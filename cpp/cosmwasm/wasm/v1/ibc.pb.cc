// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cosmwasm/wasm/v1/ibc.proto

#include "cosmwasm/wasm/v1/ibc.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace cosmwasm {
namespace wasm {
namespace v1 {
template <typename>
PROTOBUF_CONSTEXPR MsgIBCSend::MsgIBCSend(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.channel_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.data_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.timeout_height_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.timeout_timestamp_)*/ ::uint64_t{0u}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MsgIBCSendDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgIBCSendDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgIBCSendDefaultTypeInternal() {}
  union {
    MsgIBCSend _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgIBCSendDefaultTypeInternal _MsgIBCSend_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MsgIBCSendResponse::MsgIBCSendResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sequence_)*/ ::uint64_t{0u}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MsgIBCSendResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgIBCSendResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgIBCSendResponseDefaultTypeInternal() {}
  union {
    MsgIBCSendResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgIBCSendResponseDefaultTypeInternal _MsgIBCSendResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MsgIBCCloseChannel::MsgIBCCloseChannel(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.channel_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MsgIBCCloseChannelDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgIBCCloseChannelDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgIBCCloseChannelDefaultTypeInternal() {}
  union {
    MsgIBCCloseChannel _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgIBCCloseChannelDefaultTypeInternal _MsgIBCCloseChannel_default_instance_;
}  // namespace v1
}  // namespace wasm
}  // namespace cosmwasm
static ::_pb::Metadata file_level_metadata_cosmwasm_2fwasm_2fv1_2fibc_2eproto[3];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_cosmwasm_2fwasm_2fv1_2fibc_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_cosmwasm_2fwasm_2fv1_2fibc_2eproto = nullptr;
const ::uint32_t TableStruct_cosmwasm_2fwasm_2fv1_2fibc_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::MsgIBCSend, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::MsgIBCSend, _impl_.channel_),
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::MsgIBCSend, _impl_.timeout_height_),
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::MsgIBCSend, _impl_.timeout_timestamp_),
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::MsgIBCSend, _impl_.data_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::MsgIBCSendResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::MsgIBCSendResponse, _impl_.sequence_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::MsgIBCCloseChannel, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::MsgIBCCloseChannel, _impl_.channel_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::cosmwasm::wasm::v1::MsgIBCSend)},
        { 12, -1, -1, sizeof(::cosmwasm::wasm::v1::MsgIBCSendResponse)},
        { 21, -1, -1, sizeof(::cosmwasm::wasm::v1::MsgIBCCloseChannel)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::cosmwasm::wasm::v1::_MsgIBCSend_default_instance_._instance,
    &::cosmwasm::wasm::v1::_MsgIBCSendResponse_default_instance_._instance,
    &::cosmwasm::wasm::v1::_MsgIBCCloseChannel_default_instance_._instance,
};
const char descriptor_table_protodef_cosmwasm_2fwasm_2fv1_2fibc_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\032cosmwasm/wasm/v1/ibc.proto\022\020cosmwasm.w"
    "asm.v1\032\024gogoproto/gogo.proto\"\342\001\n\nMsgIBCS"
    "end\0223\n\007channel\030\002 \001(\tB\031\362\336\037\025yaml:\"source_c"
    "hannel\"R\007channel\022@\n\016timeout_height\030\004 \001(\004"
    "B\031\362\336\037\025yaml:\"timeout_height\"R\rtimeoutHeig"
    "ht\022I\n\021timeout_timestamp\030\005 \001(\004B\034\362\336\037\030yaml:"
    "\"timeout_timestamp\"R\020timeoutTimestamp\022\022\n"
    "\004data\030\006 \001(\014R\004data\"0\n\022MsgIBCSendResponse\022"
    "\032\n\010sequence\030\001 \001(\004R\010sequence\"I\n\022MsgIBCClo"
    "seChannel\0223\n\007channel\030\002 \001(\tB\031\362\336\037\025yaml:\"so"
    "urce_channel\"R\007channelB\256\001\n\024com.cosmwasm."
    "wasm.v1B\010IbcProtoP\001Z&github.com/CosmWasm"
    "/wasmd/x/wasm/types\242\002\003CWX\252\002\020Cosmwasm.Was"
    "m.V1\312\002\020Cosmwasm\\Wasm\\V1\342\002\034Cosmwasm\\Wasm\\"
    "V1\\GPBMetadata\352\002\022Cosmwasm::Wasm::V1\310\341\036\000b"
    "\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_cosmwasm_2fwasm_2fv1_2fibc_2eproto_deps[1] =
    {
        &::descriptor_table_gogoproto_2fgogo_2eproto,
};
static ::absl::once_flag descriptor_table_cosmwasm_2fwasm_2fv1_2fibc_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_cosmwasm_2fwasm_2fv1_2fibc_2eproto = {
    false,
    false,
    607,
    descriptor_table_protodef_cosmwasm_2fwasm_2fv1_2fibc_2eproto,
    "cosmwasm/wasm/v1/ibc.proto",
    &descriptor_table_cosmwasm_2fwasm_2fv1_2fibc_2eproto_once,
    descriptor_table_cosmwasm_2fwasm_2fv1_2fibc_2eproto_deps,
    1,
    3,
    schemas,
    file_default_instances,
    TableStruct_cosmwasm_2fwasm_2fv1_2fibc_2eproto::offsets,
    file_level_metadata_cosmwasm_2fwasm_2fv1_2fibc_2eproto,
    file_level_enum_descriptors_cosmwasm_2fwasm_2fv1_2fibc_2eproto,
    file_level_service_descriptors_cosmwasm_2fwasm_2fv1_2fibc_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_cosmwasm_2fwasm_2fv1_2fibc_2eproto_getter() {
  return &descriptor_table_cosmwasm_2fwasm_2fv1_2fibc_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_cosmwasm_2fwasm_2fv1_2fibc_2eproto(&descriptor_table_cosmwasm_2fwasm_2fv1_2fibc_2eproto);
namespace cosmwasm {
namespace wasm {
namespace v1 {
// ===================================================================

class MsgIBCSend::_Internal {
 public:
};

MsgIBCSend::MsgIBCSend(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmwasm.wasm.v1.MsgIBCSend)
}
MsgIBCSend::MsgIBCSend(const MsgIBCSend& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MsgIBCSend* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.channel_) {}

    , decltype(_impl_.data_) {}

    , decltype(_impl_.timeout_height_) {}

    , decltype(_impl_.timeout_timestamp_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.channel_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.channel_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_channel().empty()) {
    _this->_impl_.channel_.Set(from._internal_channel(), _this->GetArenaForAllocation());
  }
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.data_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.timeout_height_, &from._impl_.timeout_height_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.timeout_timestamp_) -
    reinterpret_cast<char*>(&_impl_.timeout_height_)) + sizeof(_impl_.timeout_timestamp_));
  // @@protoc_insertion_point(copy_constructor:cosmwasm.wasm.v1.MsgIBCSend)
}

inline void MsgIBCSend::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.channel_) {}

    , decltype(_impl_.data_) {}

    , decltype(_impl_.timeout_height_) { ::uint64_t{0u} }

    , decltype(_impl_.timeout_timestamp_) { ::uint64_t{0u} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.channel_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.channel_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.data_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MsgIBCSend::~MsgIBCSend() {
  // @@protoc_insertion_point(destructor:cosmwasm.wasm.v1.MsgIBCSend)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MsgIBCSend::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.channel_.Destroy();
  _impl_.data_.Destroy();
}

void MsgIBCSend::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MsgIBCSend::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmwasm.wasm.v1.MsgIBCSend)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.channel_.ClearToEmpty();
  _impl_.data_.ClearToEmpty();
  ::memset(&_impl_.timeout_height_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.timeout_timestamp_) -
      reinterpret_cast<char*>(&_impl_.timeout_height_)) + sizeof(_impl_.timeout_timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgIBCSend::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string channel = 2 [json_name = "channel", (.gogoproto.moretags) = "yaml:\"source_channel\""];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_channel();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmwasm.wasm.v1.MsgIBCSend.channel"));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 timeout_height = 4 [json_name = "timeoutHeight", (.gogoproto.moretags) = "yaml:\"timeout_height\""];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _impl_.timeout_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 timeout_timestamp = 5 [json_name = "timeoutTimestamp", (.gogoproto.moretags) = "yaml:\"timeout_timestamp\""];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _impl_.timeout_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes data = 6 [json_name = "data"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MsgIBCSend::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmwasm.wasm.v1.MsgIBCSend)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string channel = 2 [json_name = "channel", (.gogoproto.moretags) = "yaml:\"source_channel\""];
  if (!this->_internal_channel().empty()) {
    const std::string& _s = this->_internal_channel();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmwasm.wasm.v1.MsgIBCSend.channel");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // uint64 timeout_height = 4 [json_name = "timeoutHeight", (.gogoproto.moretags) = "yaml:\"timeout_height\""];
  if (this->_internal_timeout_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        4, this->_internal_timeout_height(), target);
  }

  // uint64 timeout_timestamp = 5 [json_name = "timeoutTimestamp", (.gogoproto.moretags) = "yaml:\"timeout_timestamp\""];
  if (this->_internal_timeout_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        5, this->_internal_timeout_timestamp(), target);
  }

  // bytes data = 6 [json_name = "data"];
  if (!this->_internal_data().empty()) {
    const std::string& _s = this->_internal_data();
    target = stream->WriteBytesMaybeAliased(6, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmwasm.wasm.v1.MsgIBCSend)
  return target;
}

::size_t MsgIBCSend::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmwasm.wasm.v1.MsgIBCSend)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string channel = 2 [json_name = "channel", (.gogoproto.moretags) = "yaml:\"source_channel\""];
  if (!this->_internal_channel().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_channel());
  }

  // bytes data = 6 [json_name = "data"];
  if (!this->_internal_data().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_data());
  }

  // uint64 timeout_height = 4 [json_name = "timeoutHeight", (.gogoproto.moretags) = "yaml:\"timeout_height\""];
  if (this->_internal_timeout_height() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_timeout_height());
  }

  // uint64 timeout_timestamp = 5 [json_name = "timeoutTimestamp", (.gogoproto.moretags) = "yaml:\"timeout_timestamp\""];
  if (this->_internal_timeout_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_timeout_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgIBCSend::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MsgIBCSend::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgIBCSend::GetClassData() const { return &_class_data_; }


void MsgIBCSend::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MsgIBCSend*>(&to_msg);
  auto& from = static_cast<const MsgIBCSend&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmwasm.wasm.v1.MsgIBCSend)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_channel().empty()) {
    _this->_internal_set_channel(from._internal_channel());
  }
  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  if (from._internal_timeout_height() != 0) {
    _this->_internal_set_timeout_height(from._internal_timeout_height());
  }
  if (from._internal_timeout_timestamp() != 0) {
    _this->_internal_set_timeout_timestamp(from._internal_timeout_timestamp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MsgIBCSend::CopyFrom(const MsgIBCSend& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmwasm.wasm.v1.MsgIBCSend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgIBCSend::IsInitialized() const {
  return true;
}

void MsgIBCSend::InternalSwap(MsgIBCSend* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.channel_, lhs_arena,
                                       &other->_impl_.channel_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.data_, lhs_arena,
                                       &other->_impl_.data_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgIBCSend, _impl_.timeout_timestamp_)
      + sizeof(MsgIBCSend::_impl_.timeout_timestamp_)
      - PROTOBUF_FIELD_OFFSET(MsgIBCSend, _impl_.timeout_height_)>(
          reinterpret_cast<char*>(&_impl_.timeout_height_),
          reinterpret_cast<char*>(&other->_impl_.timeout_height_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgIBCSend::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmwasm_2fwasm_2fv1_2fibc_2eproto_getter, &descriptor_table_cosmwasm_2fwasm_2fv1_2fibc_2eproto_once,
      file_level_metadata_cosmwasm_2fwasm_2fv1_2fibc_2eproto[0]);
}
// ===================================================================

class MsgIBCSendResponse::_Internal {
 public:
};

MsgIBCSendResponse::MsgIBCSendResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmwasm.wasm.v1.MsgIBCSendResponse)
}
MsgIBCSendResponse::MsgIBCSendResponse(const MsgIBCSendResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cosmwasm.wasm.v1.MsgIBCSendResponse)
}

inline void MsgIBCSendResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.sequence_) { ::uint64_t{0u} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MsgIBCSendResponse::~MsgIBCSendResponse() {
  // @@protoc_insertion_point(destructor:cosmwasm.wasm.v1.MsgIBCSendResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MsgIBCSendResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void MsgIBCSendResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MsgIBCSendResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmwasm.wasm.v1.MsgIBCSendResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sequence_ = ::uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgIBCSendResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 sequence = 1 [json_name = "sequence"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.sequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MsgIBCSendResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmwasm.wasm.v1.MsgIBCSendResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 sequence = 1 [json_name = "sequence"];
  if (this->_internal_sequence() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_sequence(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmwasm.wasm.v1.MsgIBCSendResponse)
  return target;
}

::size_t MsgIBCSendResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmwasm.wasm.v1.MsgIBCSendResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 sequence = 1 [json_name = "sequence"];
  if (this->_internal_sequence() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_sequence());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgIBCSendResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MsgIBCSendResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgIBCSendResponse::GetClassData() const { return &_class_data_; }


void MsgIBCSendResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MsgIBCSendResponse*>(&to_msg);
  auto& from = static_cast<const MsgIBCSendResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmwasm.wasm.v1.MsgIBCSendResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_sequence() != 0) {
    _this->_internal_set_sequence(from._internal_sequence());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MsgIBCSendResponse::CopyFrom(const MsgIBCSendResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmwasm.wasm.v1.MsgIBCSendResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgIBCSendResponse::IsInitialized() const {
  return true;
}

void MsgIBCSendResponse::InternalSwap(MsgIBCSendResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);

  swap(_impl_.sequence_, other->_impl_.sequence_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgIBCSendResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmwasm_2fwasm_2fv1_2fibc_2eproto_getter, &descriptor_table_cosmwasm_2fwasm_2fv1_2fibc_2eproto_once,
      file_level_metadata_cosmwasm_2fwasm_2fv1_2fibc_2eproto[1]);
}
// ===================================================================

class MsgIBCCloseChannel::_Internal {
 public:
};

MsgIBCCloseChannel::MsgIBCCloseChannel(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmwasm.wasm.v1.MsgIBCCloseChannel)
}
MsgIBCCloseChannel::MsgIBCCloseChannel(const MsgIBCCloseChannel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MsgIBCCloseChannel* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.channel_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.channel_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.channel_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_channel().empty()) {
    _this->_impl_.channel_.Set(from._internal_channel(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:cosmwasm.wasm.v1.MsgIBCCloseChannel)
}

inline void MsgIBCCloseChannel::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.channel_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.channel_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.channel_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MsgIBCCloseChannel::~MsgIBCCloseChannel() {
  // @@protoc_insertion_point(destructor:cosmwasm.wasm.v1.MsgIBCCloseChannel)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MsgIBCCloseChannel::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.channel_.Destroy();
}

void MsgIBCCloseChannel::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MsgIBCCloseChannel::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmwasm.wasm.v1.MsgIBCCloseChannel)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.channel_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgIBCCloseChannel::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string channel = 2 [json_name = "channel", (.gogoproto.moretags) = "yaml:\"source_channel\""];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_channel();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmwasm.wasm.v1.MsgIBCCloseChannel.channel"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MsgIBCCloseChannel::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmwasm.wasm.v1.MsgIBCCloseChannel)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string channel = 2 [json_name = "channel", (.gogoproto.moretags) = "yaml:\"source_channel\""];
  if (!this->_internal_channel().empty()) {
    const std::string& _s = this->_internal_channel();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmwasm.wasm.v1.MsgIBCCloseChannel.channel");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmwasm.wasm.v1.MsgIBCCloseChannel)
  return target;
}

::size_t MsgIBCCloseChannel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmwasm.wasm.v1.MsgIBCCloseChannel)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string channel = 2 [json_name = "channel", (.gogoproto.moretags) = "yaml:\"source_channel\""];
  if (!this->_internal_channel().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_channel());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgIBCCloseChannel::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MsgIBCCloseChannel::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgIBCCloseChannel::GetClassData() const { return &_class_data_; }


void MsgIBCCloseChannel::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MsgIBCCloseChannel*>(&to_msg);
  auto& from = static_cast<const MsgIBCCloseChannel&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmwasm.wasm.v1.MsgIBCCloseChannel)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_channel().empty()) {
    _this->_internal_set_channel(from._internal_channel());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MsgIBCCloseChannel::CopyFrom(const MsgIBCCloseChannel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmwasm.wasm.v1.MsgIBCCloseChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgIBCCloseChannel::IsInitialized() const {
  return true;
}

void MsgIBCCloseChannel::InternalSwap(MsgIBCCloseChannel* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.channel_, lhs_arena,
                                       &other->_impl_.channel_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgIBCCloseChannel::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmwasm_2fwasm_2fv1_2fibc_2eproto_getter, &descriptor_table_cosmwasm_2fwasm_2fv1_2fibc_2eproto_once,
      file_level_metadata_cosmwasm_2fwasm_2fv1_2fibc_2eproto[2]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace wasm
}  // namespace cosmwasm
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cosmwasm::wasm::v1::MsgIBCSend*
Arena::CreateMaybeMessage< ::cosmwasm::wasm::v1::MsgIBCSend >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmwasm::wasm::v1::MsgIBCSend >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmwasm::wasm::v1::MsgIBCSendResponse*
Arena::CreateMaybeMessage< ::cosmwasm::wasm::v1::MsgIBCSendResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmwasm::wasm::v1::MsgIBCSendResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmwasm::wasm::v1::MsgIBCCloseChannel*
Arena::CreateMaybeMessage< ::cosmwasm::wasm::v1::MsgIBCCloseChannel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmwasm::wasm::v1::MsgIBCCloseChannel >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

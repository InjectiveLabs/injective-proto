// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cosmwasm/wasm/v1/authz.proto

#include "cosmwasm/wasm/v1/authz.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace cosmwasm {
namespace wasm {
namespace v1 {
template <typename>
PROTOBUF_CONSTEXPR ContractExecutionAuthorization::ContractExecutionAuthorization(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.grants_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ContractExecutionAuthorizationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ContractExecutionAuthorizationDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ContractExecutionAuthorizationDefaultTypeInternal() {}
  union {
    ContractExecutionAuthorization _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ContractExecutionAuthorizationDefaultTypeInternal _ContractExecutionAuthorization_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ContractMigrationAuthorization::ContractMigrationAuthorization(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.grants_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ContractMigrationAuthorizationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ContractMigrationAuthorizationDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ContractMigrationAuthorizationDefaultTypeInternal() {}
  union {
    ContractMigrationAuthorization _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ContractMigrationAuthorizationDefaultTypeInternal _ContractMigrationAuthorization_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ContractGrant::ContractGrant(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.contract_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.limit_)*/nullptr
  , /*decltype(_impl_.filter_)*/nullptr} {}
struct ContractGrantDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ContractGrantDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ContractGrantDefaultTypeInternal() {}
  union {
    ContractGrant _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ContractGrantDefaultTypeInternal _ContractGrant_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MaxCallsLimit::MaxCallsLimit(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.remaining_)*/ ::uint64_t{0u}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MaxCallsLimitDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MaxCallsLimitDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MaxCallsLimitDefaultTypeInternal() {}
  union {
    MaxCallsLimit _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MaxCallsLimitDefaultTypeInternal _MaxCallsLimit_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MaxFundsLimit::MaxFundsLimit(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.amounts_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MaxFundsLimitDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MaxFundsLimitDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MaxFundsLimitDefaultTypeInternal() {}
  union {
    MaxFundsLimit _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MaxFundsLimitDefaultTypeInternal _MaxFundsLimit_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR CombinedLimit::CombinedLimit(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.amounts_)*/{}
  , /*decltype(_impl_.calls_remaining_)*/ ::uint64_t{0u}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CombinedLimitDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CombinedLimitDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CombinedLimitDefaultTypeInternal() {}
  union {
    CombinedLimit _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CombinedLimitDefaultTypeInternal _CombinedLimit_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR AllowAllMessagesFilter::AllowAllMessagesFilter(
    ::_pbi::ConstantInitialized) {}
struct AllowAllMessagesFilterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AllowAllMessagesFilterDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AllowAllMessagesFilterDefaultTypeInternal() {}
  union {
    AllowAllMessagesFilter _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AllowAllMessagesFilterDefaultTypeInternal _AllowAllMessagesFilter_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR AcceptedMessageKeysFilter::AcceptedMessageKeysFilter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.keys_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AcceptedMessageKeysFilterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AcceptedMessageKeysFilterDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AcceptedMessageKeysFilterDefaultTypeInternal() {}
  union {
    AcceptedMessageKeysFilter _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AcceptedMessageKeysFilterDefaultTypeInternal _AcceptedMessageKeysFilter_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR AcceptedMessagesFilter::AcceptedMessagesFilter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.messages_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AcceptedMessagesFilterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AcceptedMessagesFilterDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AcceptedMessagesFilterDefaultTypeInternal() {}
  union {
    AcceptedMessagesFilter _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AcceptedMessagesFilterDefaultTypeInternal _AcceptedMessagesFilter_default_instance_;
}  // namespace v1
}  // namespace wasm
}  // namespace cosmwasm
static ::_pb::Metadata file_level_metadata_cosmwasm_2fwasm_2fv1_2fauthz_2eproto[9];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_cosmwasm_2fwasm_2fv1_2fauthz_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_cosmwasm_2fwasm_2fv1_2fauthz_2eproto = nullptr;
const ::uint32_t TableStruct_cosmwasm_2fwasm_2fv1_2fauthz_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::ContractExecutionAuthorization, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::ContractExecutionAuthorization, _impl_.grants_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::ContractMigrationAuthorization, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::ContractMigrationAuthorization, _impl_.grants_),
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::ContractGrant, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::ContractGrant, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::ContractGrant, _impl_.contract_),
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::ContractGrant, _impl_.limit_),
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::ContractGrant, _impl_.filter_),
    ~0u,
    0,
    1,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::MaxCallsLimit, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::MaxCallsLimit, _impl_.remaining_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::MaxFundsLimit, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::MaxFundsLimit, _impl_.amounts_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::CombinedLimit, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::CombinedLimit, _impl_.calls_remaining_),
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::CombinedLimit, _impl_.amounts_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::AllowAllMessagesFilter, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::AcceptedMessageKeysFilter, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::AcceptedMessageKeysFilter, _impl_.keys_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::AcceptedMessagesFilter, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::AcceptedMessagesFilter, _impl_.messages_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::cosmwasm::wasm::v1::ContractExecutionAuthorization)},
        { 9, -1, -1, sizeof(::cosmwasm::wasm::v1::ContractMigrationAuthorization)},
        { 18, 29, -1, sizeof(::cosmwasm::wasm::v1::ContractGrant)},
        { 32, -1, -1, sizeof(::cosmwasm::wasm::v1::MaxCallsLimit)},
        { 41, -1, -1, sizeof(::cosmwasm::wasm::v1::MaxFundsLimit)},
        { 50, -1, -1, sizeof(::cosmwasm::wasm::v1::CombinedLimit)},
        { 60, -1, -1, sizeof(::cosmwasm::wasm::v1::AllowAllMessagesFilter)},
        { 68, -1, -1, sizeof(::cosmwasm::wasm::v1::AcceptedMessageKeysFilter)},
        { 77, -1, -1, sizeof(::cosmwasm::wasm::v1::AcceptedMessagesFilter)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::cosmwasm::wasm::v1::_ContractExecutionAuthorization_default_instance_._instance,
    &::cosmwasm::wasm::v1::_ContractMigrationAuthorization_default_instance_._instance,
    &::cosmwasm::wasm::v1::_ContractGrant_default_instance_._instance,
    &::cosmwasm::wasm::v1::_MaxCallsLimit_default_instance_._instance,
    &::cosmwasm::wasm::v1::_MaxFundsLimit_default_instance_._instance,
    &::cosmwasm::wasm::v1::_CombinedLimit_default_instance_._instance,
    &::cosmwasm::wasm::v1::_AllowAllMessagesFilter_default_instance_._instance,
    &::cosmwasm::wasm::v1::_AcceptedMessageKeysFilter_default_instance_._instance,
    &::cosmwasm::wasm::v1::_AcceptedMessagesFilter_default_instance_._instance,
};
const char descriptor_table_protodef_cosmwasm_2fwasm_2fv1_2fauthz_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\034cosmwasm/wasm/v1/authz.proto\022\020cosmwasm"
    ".wasm.v1\032\024gogoproto/gogo.proto\032\031cosmos_p"
    "roto/cosmos.proto\032\036cosmos/base/v1beta1/c"
    "oin.proto\032\031google/protobuf/any.proto\032\021am"
    "ino/amino.proto\"\264\001\n\036ContractExecutionAut"
    "horization\022B\n\006grants\030\001 \003(\0132\037.cosmwasm.wa"
    "sm.v1.ContractGrantB\t\310\336\037\000\250\347\260*\001R\006grants:N"
    "\312\264-\"cosmos.authz.v1beta1.Authorization\212\347"
    "\260*#wasm/ContractExecutionAuthorization\"\264"
    "\001\n\036ContractMigrationAuthorization\022B\n\006gra"
    "nts\030\001 \003(\0132\037.cosmwasm.wasm.v1.ContractGra"
    "ntB\t\310\336\037\000\250\347\260*\001R\006grants:N\312\264-\"cosmos.authz."
    "v1beta1.Authorization\212\347\260*#wasm/ContractM"
    "igrationAuthorization\"\332\001\n\rContractGrant\022"
    "\032\n\010contract\030\001 \001(\tR\010contract\022T\n\005limit\030\002 \001"
    "(\0132\024.google.protobuf.AnyB(\312\264-$cosmwasm.w"
    "asm.v1.ContractAuthzLimitXR\005limit\022W\n\006fil"
    "ter\030\003 \001(\0132\024.google.protobuf.AnyB)\312\264-%cos"
    "mwasm.wasm.v1.ContractAuthzFilterXR\006filt"
    "er\"n\n\rMaxCallsLimit\022\034\n\tremaining\030\001 \001(\004R\t"
    "remaining:\?\312\264-$cosmwasm.wasm.v1.Contract"
    "AuthzLimitX\212\347\260*\022wasm/MaxCallsLimit\"\274\001\n\rM"
    "axFundsLimit\022j\n\007amounts\030\001 \003(\0132\031.cosmos.b"
    "ase.v1beta1.CoinB5\310\336\037\000\252\337\037(github.com/cos"
    "mos/cosmos-sdk/types.Coins\250\347\260*\001R\007amounts"
    ":\?\312\264-$cosmwasm.wasm.v1.ContractAuthzLimi"
    "tX\212\347\260*\022wasm/MaxFundsLimit\"\345\001\n\rCombinedLi"
    "mit\022\'\n\017calls_remaining\030\001 \001(\004R\016callsRemai"
    "ning\022j\n\007amounts\030\002 \003(\0132\031.cosmos.base.v1be"
    "ta1.CoinB5\310\336\037\000\252\337\037(github.com/cosmos/cosm"
    "os-sdk/types.Coins\250\347\260*\001R\007amounts:\?\312\264-$co"
    "smwasm.wasm.v1.ContractAuthzLimitX\212\347\260*\022w"
    "asm/CombinedLimit\"c\n\026AllowAllMessagesFil"
    "ter:I\312\264-%cosmwasm.wasm.v1.ContractAuthzF"
    "ilterX\212\347\260*\033wasm/AllowAllMessagesFilter\"}"
    "\n\031AcceptedMessageKeysFilter\022\022\n\004keys\030\001 \003("
    "\tR\004keys:L\312\264-%cosmwasm.wasm.v1.ContractAu"
    "thzFilterX\212\347\260*\036wasm/AcceptedMessageKeysF"
    "ilter\"\227\001\n\026AcceptedMessagesFilter\0222\n\010mess"
    "ages\030\001 \003(\014B\026\372\336\037\022RawContractMessageR\010mess"
    "ages:I\312\264-%cosmwasm.wasm.v1.ContractAuthz"
    "FilterX\212\347\260*\033wasm/AcceptedMessagesFilterB"
    "\260\001\n\024com.cosmwasm.wasm.v1B\nAuthzProtoP\001Z&"
    "github.com/CosmWasm/wasmd/x/wasm/types\242\002"
    "\003CWX\252\002\020Cosmwasm.Wasm.V1\312\002\020Cosmwasm\\Wasm\\"
    "V1\342\002\034Cosmwasm\\Wasm\\V1\\GPBMetadata\352\002\022Cosm"
    "wasm::Wasm::V1\310\341\036\000b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_cosmwasm_2fwasm_2fv1_2fauthz_2eproto_deps[5] =
    {
        &::descriptor_table_amino_2famino_2eproto,
        &::descriptor_table_cosmos_2fbase_2fv1beta1_2fcoin_2eproto,
        &::descriptor_table_cosmos_5fproto_2fcosmos_2eproto,
        &::descriptor_table_gogoproto_2fgogo_2eproto,
        &::descriptor_table_google_2fprotobuf_2fany_2eproto,
};
static ::absl::once_flag descriptor_table_cosmwasm_2fwasm_2fv1_2fauthz_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_cosmwasm_2fwasm_2fv1_2fauthz_2eproto = {
    false,
    false,
    1866,
    descriptor_table_protodef_cosmwasm_2fwasm_2fv1_2fauthz_2eproto,
    "cosmwasm/wasm/v1/authz.proto",
    &descriptor_table_cosmwasm_2fwasm_2fv1_2fauthz_2eproto_once,
    descriptor_table_cosmwasm_2fwasm_2fv1_2fauthz_2eproto_deps,
    5,
    9,
    schemas,
    file_default_instances,
    TableStruct_cosmwasm_2fwasm_2fv1_2fauthz_2eproto::offsets,
    file_level_metadata_cosmwasm_2fwasm_2fv1_2fauthz_2eproto,
    file_level_enum_descriptors_cosmwasm_2fwasm_2fv1_2fauthz_2eproto,
    file_level_service_descriptors_cosmwasm_2fwasm_2fv1_2fauthz_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_cosmwasm_2fwasm_2fv1_2fauthz_2eproto_getter() {
  return &descriptor_table_cosmwasm_2fwasm_2fv1_2fauthz_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_cosmwasm_2fwasm_2fv1_2fauthz_2eproto(&descriptor_table_cosmwasm_2fwasm_2fv1_2fauthz_2eproto);
namespace cosmwasm {
namespace wasm {
namespace v1 {
// ===================================================================

class ContractExecutionAuthorization::_Internal {
 public:
};

ContractExecutionAuthorization::ContractExecutionAuthorization(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmwasm.wasm.v1.ContractExecutionAuthorization)
}
ContractExecutionAuthorization::ContractExecutionAuthorization(const ContractExecutionAuthorization& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ContractExecutionAuthorization* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.grants_){from._impl_.grants_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cosmwasm.wasm.v1.ContractExecutionAuthorization)
}

inline void ContractExecutionAuthorization::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.grants_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ContractExecutionAuthorization::~ContractExecutionAuthorization() {
  // @@protoc_insertion_point(destructor:cosmwasm.wasm.v1.ContractExecutionAuthorization)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ContractExecutionAuthorization::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_grants()->~RepeatedPtrField();
}

void ContractExecutionAuthorization::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ContractExecutionAuthorization::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmwasm.wasm.v1.ContractExecutionAuthorization)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_grants()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContractExecutionAuthorization::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .cosmwasm.wasm.v1.ContractGrant grants = 1 [json_name = "grants", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_grants(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ContractExecutionAuthorization::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmwasm.wasm.v1.ContractExecutionAuthorization)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cosmwasm.wasm.v1.ContractGrant grants = 1 [json_name = "grants", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_grants_size()); i < n; i++) {
    const auto& repfield = this->_internal_grants(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmwasm.wasm.v1.ContractExecutionAuthorization)
  return target;
}

::size_t ContractExecutionAuthorization::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmwasm.wasm.v1.ContractExecutionAuthorization)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cosmwasm.wasm.v1.ContractGrant grants = 1 [json_name = "grants", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  total_size += 1UL * this->_internal_grants_size();
  for (const auto& msg : this->_internal_grants()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ContractExecutionAuthorization::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ContractExecutionAuthorization::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ContractExecutionAuthorization::GetClassData() const { return &_class_data_; }


void ContractExecutionAuthorization::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ContractExecutionAuthorization*>(&to_msg);
  auto& from = static_cast<const ContractExecutionAuthorization&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmwasm.wasm.v1.ContractExecutionAuthorization)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_grants()->MergeFrom(from._internal_grants());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ContractExecutionAuthorization::CopyFrom(const ContractExecutionAuthorization& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmwasm.wasm.v1.ContractExecutionAuthorization)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContractExecutionAuthorization::IsInitialized() const {
  return true;
}

void ContractExecutionAuthorization::InternalSwap(ContractExecutionAuthorization* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_grants()->InternalSwap(other->_internal_mutable_grants());
}

::PROTOBUF_NAMESPACE_ID::Metadata ContractExecutionAuthorization::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmwasm_2fwasm_2fv1_2fauthz_2eproto_getter, &descriptor_table_cosmwasm_2fwasm_2fv1_2fauthz_2eproto_once,
      file_level_metadata_cosmwasm_2fwasm_2fv1_2fauthz_2eproto[0]);
}
// ===================================================================

class ContractMigrationAuthorization::_Internal {
 public:
};

ContractMigrationAuthorization::ContractMigrationAuthorization(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmwasm.wasm.v1.ContractMigrationAuthorization)
}
ContractMigrationAuthorization::ContractMigrationAuthorization(const ContractMigrationAuthorization& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ContractMigrationAuthorization* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.grants_){from._impl_.grants_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cosmwasm.wasm.v1.ContractMigrationAuthorization)
}

inline void ContractMigrationAuthorization::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.grants_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ContractMigrationAuthorization::~ContractMigrationAuthorization() {
  // @@protoc_insertion_point(destructor:cosmwasm.wasm.v1.ContractMigrationAuthorization)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ContractMigrationAuthorization::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_grants()->~RepeatedPtrField();
}

void ContractMigrationAuthorization::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ContractMigrationAuthorization::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmwasm.wasm.v1.ContractMigrationAuthorization)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_grants()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContractMigrationAuthorization::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .cosmwasm.wasm.v1.ContractGrant grants = 1 [json_name = "grants", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_grants(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ContractMigrationAuthorization::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmwasm.wasm.v1.ContractMigrationAuthorization)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cosmwasm.wasm.v1.ContractGrant grants = 1 [json_name = "grants", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_grants_size()); i < n; i++) {
    const auto& repfield = this->_internal_grants(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmwasm.wasm.v1.ContractMigrationAuthorization)
  return target;
}

::size_t ContractMigrationAuthorization::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmwasm.wasm.v1.ContractMigrationAuthorization)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cosmwasm.wasm.v1.ContractGrant grants = 1 [json_name = "grants", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  total_size += 1UL * this->_internal_grants_size();
  for (const auto& msg : this->_internal_grants()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ContractMigrationAuthorization::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ContractMigrationAuthorization::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ContractMigrationAuthorization::GetClassData() const { return &_class_data_; }


void ContractMigrationAuthorization::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ContractMigrationAuthorization*>(&to_msg);
  auto& from = static_cast<const ContractMigrationAuthorization&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmwasm.wasm.v1.ContractMigrationAuthorization)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_grants()->MergeFrom(from._internal_grants());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ContractMigrationAuthorization::CopyFrom(const ContractMigrationAuthorization& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmwasm.wasm.v1.ContractMigrationAuthorization)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContractMigrationAuthorization::IsInitialized() const {
  return true;
}

void ContractMigrationAuthorization::InternalSwap(ContractMigrationAuthorization* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_grants()->InternalSwap(other->_internal_mutable_grants());
}

::PROTOBUF_NAMESPACE_ID::Metadata ContractMigrationAuthorization::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmwasm_2fwasm_2fv1_2fauthz_2eproto_getter, &descriptor_table_cosmwasm_2fwasm_2fv1_2fauthz_2eproto_once,
      file_level_metadata_cosmwasm_2fwasm_2fv1_2fauthz_2eproto[1]);
}
// ===================================================================

class ContractGrant::_Internal {
 public:
  using HasBits = decltype(std::declval<ContractGrant>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ContractGrant, _impl_._has_bits_);
  static const ::PROTOBUF_NAMESPACE_ID::Any& limit(const ContractGrant* msg);
  static void set_has_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Any& filter(const ContractGrant* msg);
  static void set_has_filter(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::Any&
ContractGrant::_Internal::limit(const ContractGrant* msg) {
  return *msg->_impl_.limit_;
}
const ::PROTOBUF_NAMESPACE_ID::Any&
ContractGrant::_Internal::filter(const ContractGrant* msg) {
  return *msg->_impl_.filter_;
}
void ContractGrant::clear_limit() {
  if (_impl_.limit_ != nullptr) _impl_.limit_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void ContractGrant::clear_filter() {
  if (_impl_.filter_ != nullptr) _impl_.filter_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
ContractGrant::ContractGrant(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmwasm.wasm.v1.ContractGrant)
}
ContractGrant::ContractGrant(const ContractGrant& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ContractGrant* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.contract_) {}

    , decltype(_impl_.limit_){nullptr}
    , decltype(_impl_.filter_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.contract_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.contract_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_contract().empty()) {
    _this->_impl_.contract_.Set(from._internal_contract(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.limit_ = new ::PROTOBUF_NAMESPACE_ID::Any(*from._impl_.limit_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.filter_ = new ::PROTOBUF_NAMESPACE_ID::Any(*from._impl_.filter_);
  }
  // @@protoc_insertion_point(copy_constructor:cosmwasm.wasm.v1.ContractGrant)
}

inline void ContractGrant::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.contract_) {}

    , decltype(_impl_.limit_){nullptr}
    , decltype(_impl_.filter_){nullptr}
  };
  _impl_.contract_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.contract_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ContractGrant::~ContractGrant() {
  // @@protoc_insertion_point(destructor:cosmwasm.wasm.v1.ContractGrant)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ContractGrant::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.contract_.Destroy();
  if (this != internal_default_instance()) delete _impl_.limit_;
  if (this != internal_default_instance()) delete _impl_.filter_;
}

void ContractGrant::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ContractGrant::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmwasm.wasm.v1.ContractGrant)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.contract_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.limit_ != nullptr);
      _impl_.limit_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.filter_ != nullptr);
      _impl_.filter_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContractGrant::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string contract = 1 [json_name = "contract"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_contract();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmwasm.wasm.v1.ContractGrant.contract"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Any limit = 2 [json_name = "limit", (.cosmos_proto.accepts_interface) = "cosmwasm.wasm.v1.ContractAuthzLimitX"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_limit(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Any filter = 3 [json_name = "filter", (.cosmos_proto.accepts_interface) = "cosmwasm.wasm.v1.ContractAuthzFilterX"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_filter(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ContractGrant::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmwasm.wasm.v1.ContractGrant)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string contract = 1 [json_name = "contract"];
  if (!this->_internal_contract().empty()) {
    const std::string& _s = this->_internal_contract();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmwasm.wasm.v1.ContractGrant.contract");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .google.protobuf.Any limit = 2 [json_name = "limit", (.cosmos_proto.accepts_interface) = "cosmwasm.wasm.v1.ContractAuthzLimitX"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::limit(this),
        _Internal::limit(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Any filter = 3 [json_name = "filter", (.cosmos_proto.accepts_interface) = "cosmwasm.wasm.v1.ContractAuthzFilterX"];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::filter(this),
        _Internal::filter(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmwasm.wasm.v1.ContractGrant)
  return target;
}

::size_t ContractGrant::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmwasm.wasm.v1.ContractGrant)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string contract = 1 [json_name = "contract"];
  if (!this->_internal_contract().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_contract());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .google.protobuf.Any limit = 2 [json_name = "limit", (.cosmos_proto.accepts_interface) = "cosmwasm.wasm.v1.ContractAuthzLimitX"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.limit_);
    }

    // .google.protobuf.Any filter = 3 [json_name = "filter", (.cosmos_proto.accepts_interface) = "cosmwasm.wasm.v1.ContractAuthzFilterX"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.filter_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ContractGrant::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ContractGrant::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ContractGrant::GetClassData() const { return &_class_data_; }


void ContractGrant::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ContractGrant*>(&to_msg);
  auto& from = static_cast<const ContractGrant&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmwasm.wasm.v1.ContractGrant)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_contract().empty()) {
    _this->_internal_set_contract(from._internal_contract());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_limit()->::PROTOBUF_NAMESPACE_ID::Any::MergeFrom(
          from._internal_limit());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_filter()->::PROTOBUF_NAMESPACE_ID::Any::MergeFrom(
          from._internal_filter());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ContractGrant::CopyFrom(const ContractGrant& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmwasm.wasm.v1.ContractGrant)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContractGrant::IsInitialized() const {
  return true;
}

void ContractGrant::InternalSwap(ContractGrant* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.contract_, lhs_arena,
                                       &other->_impl_.contract_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ContractGrant, _impl_.filter_)
      + sizeof(ContractGrant::_impl_.filter_)
      - PROTOBUF_FIELD_OFFSET(ContractGrant, _impl_.limit_)>(
          reinterpret_cast<char*>(&_impl_.limit_),
          reinterpret_cast<char*>(&other->_impl_.limit_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ContractGrant::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmwasm_2fwasm_2fv1_2fauthz_2eproto_getter, &descriptor_table_cosmwasm_2fwasm_2fv1_2fauthz_2eproto_once,
      file_level_metadata_cosmwasm_2fwasm_2fv1_2fauthz_2eproto[2]);
}
// ===================================================================

class MaxCallsLimit::_Internal {
 public:
};

MaxCallsLimit::MaxCallsLimit(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmwasm.wasm.v1.MaxCallsLimit)
}
MaxCallsLimit::MaxCallsLimit(const MaxCallsLimit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cosmwasm.wasm.v1.MaxCallsLimit)
}

inline void MaxCallsLimit::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.remaining_) { ::uint64_t{0u} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MaxCallsLimit::~MaxCallsLimit() {
  // @@protoc_insertion_point(destructor:cosmwasm.wasm.v1.MaxCallsLimit)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MaxCallsLimit::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void MaxCallsLimit::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MaxCallsLimit::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmwasm.wasm.v1.MaxCallsLimit)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.remaining_ = ::uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MaxCallsLimit::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 remaining = 1 [json_name = "remaining"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.remaining_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MaxCallsLimit::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmwasm.wasm.v1.MaxCallsLimit)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 remaining = 1 [json_name = "remaining"];
  if (this->_internal_remaining() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_remaining(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmwasm.wasm.v1.MaxCallsLimit)
  return target;
}

::size_t MaxCallsLimit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmwasm.wasm.v1.MaxCallsLimit)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 remaining = 1 [json_name = "remaining"];
  if (this->_internal_remaining() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_remaining());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MaxCallsLimit::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MaxCallsLimit::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MaxCallsLimit::GetClassData() const { return &_class_data_; }


void MaxCallsLimit::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MaxCallsLimit*>(&to_msg);
  auto& from = static_cast<const MaxCallsLimit&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmwasm.wasm.v1.MaxCallsLimit)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_remaining() != 0) {
    _this->_internal_set_remaining(from._internal_remaining());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MaxCallsLimit::CopyFrom(const MaxCallsLimit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmwasm.wasm.v1.MaxCallsLimit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MaxCallsLimit::IsInitialized() const {
  return true;
}

void MaxCallsLimit::InternalSwap(MaxCallsLimit* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);

  swap(_impl_.remaining_, other->_impl_.remaining_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MaxCallsLimit::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmwasm_2fwasm_2fv1_2fauthz_2eproto_getter, &descriptor_table_cosmwasm_2fwasm_2fv1_2fauthz_2eproto_once,
      file_level_metadata_cosmwasm_2fwasm_2fv1_2fauthz_2eproto[3]);
}
// ===================================================================

class MaxFundsLimit::_Internal {
 public:
};

void MaxFundsLimit::clear_amounts() {
  _internal_mutable_amounts()->Clear();
}
MaxFundsLimit::MaxFundsLimit(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmwasm.wasm.v1.MaxFundsLimit)
}
MaxFundsLimit::MaxFundsLimit(const MaxFundsLimit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MaxFundsLimit* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.amounts_){from._impl_.amounts_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cosmwasm.wasm.v1.MaxFundsLimit)
}

inline void MaxFundsLimit::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.amounts_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MaxFundsLimit::~MaxFundsLimit() {
  // @@protoc_insertion_point(destructor:cosmwasm.wasm.v1.MaxFundsLimit)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MaxFundsLimit::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_amounts()->~RepeatedPtrField();
}

void MaxFundsLimit::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MaxFundsLimit::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmwasm.wasm.v1.MaxFundsLimit)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_amounts()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MaxFundsLimit::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .cosmos.base.v1beta1.Coin amounts = 1 [json_name = "amounts", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.dont_omitempty) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_amounts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MaxFundsLimit::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmwasm.wasm.v1.MaxFundsLimit)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cosmos.base.v1beta1.Coin amounts = 1 [json_name = "amounts", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.dont_omitempty) = true];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_amounts_size()); i < n; i++) {
    const auto& repfield = this->_internal_amounts(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmwasm.wasm.v1.MaxFundsLimit)
  return target;
}

::size_t MaxFundsLimit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmwasm.wasm.v1.MaxFundsLimit)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cosmos.base.v1beta1.Coin amounts = 1 [json_name = "amounts", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.dont_omitempty) = true];
  total_size += 1UL * this->_internal_amounts_size();
  for (const auto& msg : this->_internal_amounts()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MaxFundsLimit::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MaxFundsLimit::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MaxFundsLimit::GetClassData() const { return &_class_data_; }


void MaxFundsLimit::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MaxFundsLimit*>(&to_msg);
  auto& from = static_cast<const MaxFundsLimit&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmwasm.wasm.v1.MaxFundsLimit)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_amounts()->MergeFrom(from._internal_amounts());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MaxFundsLimit::CopyFrom(const MaxFundsLimit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmwasm.wasm.v1.MaxFundsLimit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MaxFundsLimit::IsInitialized() const {
  return true;
}

void MaxFundsLimit::InternalSwap(MaxFundsLimit* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_amounts()->InternalSwap(other->_internal_mutable_amounts());
}

::PROTOBUF_NAMESPACE_ID::Metadata MaxFundsLimit::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmwasm_2fwasm_2fv1_2fauthz_2eproto_getter, &descriptor_table_cosmwasm_2fwasm_2fv1_2fauthz_2eproto_once,
      file_level_metadata_cosmwasm_2fwasm_2fv1_2fauthz_2eproto[4]);
}
// ===================================================================

class CombinedLimit::_Internal {
 public:
};

void CombinedLimit::clear_amounts() {
  _internal_mutable_amounts()->Clear();
}
CombinedLimit::CombinedLimit(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmwasm.wasm.v1.CombinedLimit)
}
CombinedLimit::CombinedLimit(const CombinedLimit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CombinedLimit* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.amounts_){from._impl_.amounts_}
    , decltype(_impl_.calls_remaining_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.calls_remaining_ = from._impl_.calls_remaining_;
  // @@protoc_insertion_point(copy_constructor:cosmwasm.wasm.v1.CombinedLimit)
}

inline void CombinedLimit::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.amounts_){arena}
    , decltype(_impl_.calls_remaining_) { ::uint64_t{0u} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CombinedLimit::~CombinedLimit() {
  // @@protoc_insertion_point(destructor:cosmwasm.wasm.v1.CombinedLimit)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CombinedLimit::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_amounts()->~RepeatedPtrField();
}

void CombinedLimit::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CombinedLimit::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmwasm.wasm.v1.CombinedLimit)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_amounts()->Clear();
  _impl_.calls_remaining_ = ::uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CombinedLimit::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 calls_remaining = 1 [json_name = "callsRemaining"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.calls_remaining_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .cosmos.base.v1beta1.Coin amounts = 2 [json_name = "amounts", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.dont_omitempty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_amounts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* CombinedLimit::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmwasm.wasm.v1.CombinedLimit)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 calls_remaining = 1 [json_name = "callsRemaining"];
  if (this->_internal_calls_remaining() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_calls_remaining(), target);
  }

  // repeated .cosmos.base.v1beta1.Coin amounts = 2 [json_name = "amounts", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.dont_omitempty) = true];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_amounts_size()); i < n; i++) {
    const auto& repfield = this->_internal_amounts(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmwasm.wasm.v1.CombinedLimit)
  return target;
}

::size_t CombinedLimit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmwasm.wasm.v1.CombinedLimit)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cosmos.base.v1beta1.Coin amounts = 2 [json_name = "amounts", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.dont_omitempty) = true];
  total_size += 1UL * this->_internal_amounts_size();
  for (const auto& msg : this->_internal_amounts()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint64 calls_remaining = 1 [json_name = "callsRemaining"];
  if (this->_internal_calls_remaining() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_calls_remaining());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CombinedLimit::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CombinedLimit::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CombinedLimit::GetClassData() const { return &_class_data_; }


void CombinedLimit::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CombinedLimit*>(&to_msg);
  auto& from = static_cast<const CombinedLimit&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmwasm.wasm.v1.CombinedLimit)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_amounts()->MergeFrom(from._internal_amounts());
  if (from._internal_calls_remaining() != 0) {
    _this->_internal_set_calls_remaining(from._internal_calls_remaining());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CombinedLimit::CopyFrom(const CombinedLimit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmwasm.wasm.v1.CombinedLimit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CombinedLimit::IsInitialized() const {
  return true;
}

void CombinedLimit::InternalSwap(CombinedLimit* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_amounts()->InternalSwap(other->_internal_mutable_amounts());

  swap(_impl_.calls_remaining_, other->_impl_.calls_remaining_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CombinedLimit::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmwasm_2fwasm_2fv1_2fauthz_2eproto_getter, &descriptor_table_cosmwasm_2fwasm_2fv1_2fauthz_2eproto_once,
      file_level_metadata_cosmwasm_2fwasm_2fv1_2fauthz_2eproto[5]);
}
// ===================================================================

class AllowAllMessagesFilter::_Internal {
 public:
};

AllowAllMessagesFilter::AllowAllMessagesFilter(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:cosmwasm.wasm.v1.AllowAllMessagesFilter)
}
AllowAllMessagesFilter::AllowAllMessagesFilter(const AllowAllMessagesFilter& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  AllowAllMessagesFilter* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cosmwasm.wasm.v1.AllowAllMessagesFilter)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AllowAllMessagesFilter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AllowAllMessagesFilter::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata AllowAllMessagesFilter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmwasm_2fwasm_2fv1_2fauthz_2eproto_getter, &descriptor_table_cosmwasm_2fwasm_2fv1_2fauthz_2eproto_once,
      file_level_metadata_cosmwasm_2fwasm_2fv1_2fauthz_2eproto[6]);
}
// ===================================================================

class AcceptedMessageKeysFilter::_Internal {
 public:
};

AcceptedMessageKeysFilter::AcceptedMessageKeysFilter(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmwasm.wasm.v1.AcceptedMessageKeysFilter)
}
AcceptedMessageKeysFilter::AcceptedMessageKeysFilter(const AcceptedMessageKeysFilter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AcceptedMessageKeysFilter* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.keys_){from._impl_.keys_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cosmwasm.wasm.v1.AcceptedMessageKeysFilter)
}

inline void AcceptedMessageKeysFilter::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.keys_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AcceptedMessageKeysFilter::~AcceptedMessageKeysFilter() {
  // @@protoc_insertion_point(destructor:cosmwasm.wasm.v1.AcceptedMessageKeysFilter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AcceptedMessageKeysFilter::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_keys()->~RepeatedPtrField();
}

void AcceptedMessageKeysFilter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AcceptedMessageKeysFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmwasm.wasm.v1.AcceptedMessageKeysFilter)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_keys()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AcceptedMessageKeysFilter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string keys = 1 [json_name = "keys"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_keys();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "cosmwasm.wasm.v1.AcceptedMessageKeysFilter.keys"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* AcceptedMessageKeysFilter::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmwasm.wasm.v1.AcceptedMessageKeysFilter)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string keys = 1 [json_name = "keys"];
  for (int i = 0, n = this->_internal_keys_size(); i < n; ++i) {
    const auto& s = this->_internal_keys(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmwasm.wasm.v1.AcceptedMessageKeysFilter.keys");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmwasm.wasm.v1.AcceptedMessageKeysFilter)
  return target;
}

::size_t AcceptedMessageKeysFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmwasm.wasm.v1.AcceptedMessageKeysFilter)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string keys = 1 [json_name = "keys"];
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_keys().size());
  for (int i = 0, n = _internal_keys().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_keys().Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AcceptedMessageKeysFilter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AcceptedMessageKeysFilter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AcceptedMessageKeysFilter::GetClassData() const { return &_class_data_; }


void AcceptedMessageKeysFilter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AcceptedMessageKeysFilter*>(&to_msg);
  auto& from = static_cast<const AcceptedMessageKeysFilter&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmwasm.wasm.v1.AcceptedMessageKeysFilter)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_keys()->MergeFrom(from._internal_keys());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AcceptedMessageKeysFilter::CopyFrom(const AcceptedMessageKeysFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmwasm.wasm.v1.AcceptedMessageKeysFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AcceptedMessageKeysFilter::IsInitialized() const {
  return true;
}

void AcceptedMessageKeysFilter::InternalSwap(AcceptedMessageKeysFilter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_keys()->InternalSwap(
      other->_internal_mutable_keys());
}

::PROTOBUF_NAMESPACE_ID::Metadata AcceptedMessageKeysFilter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmwasm_2fwasm_2fv1_2fauthz_2eproto_getter, &descriptor_table_cosmwasm_2fwasm_2fv1_2fauthz_2eproto_once,
      file_level_metadata_cosmwasm_2fwasm_2fv1_2fauthz_2eproto[7]);
}
// ===================================================================

class AcceptedMessagesFilter::_Internal {
 public:
};

AcceptedMessagesFilter::AcceptedMessagesFilter(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmwasm.wasm.v1.AcceptedMessagesFilter)
}
AcceptedMessagesFilter::AcceptedMessagesFilter(const AcceptedMessagesFilter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AcceptedMessagesFilter* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.messages_){from._impl_.messages_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cosmwasm.wasm.v1.AcceptedMessagesFilter)
}

inline void AcceptedMessagesFilter::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.messages_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AcceptedMessagesFilter::~AcceptedMessagesFilter() {
  // @@protoc_insertion_point(destructor:cosmwasm.wasm.v1.AcceptedMessagesFilter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AcceptedMessagesFilter::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_messages()->~RepeatedPtrField();
}

void AcceptedMessagesFilter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AcceptedMessagesFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmwasm.wasm.v1.AcceptedMessagesFilter)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_messages()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AcceptedMessagesFilter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated bytes messages = 1 [json_name = "messages", (.gogoproto.casttype) = "RawContractMessage"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_messages();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* AcceptedMessagesFilter::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmwasm.wasm.v1.AcceptedMessagesFilter)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes messages = 1 [json_name = "messages", (.gogoproto.casttype) = "RawContractMessage"];
  for (int i = 0, n = this->_internal_messages_size(); i < n; ++i) {
    const auto& s = this->_internal_messages(i);
    target = stream->WriteBytes(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmwasm.wasm.v1.AcceptedMessagesFilter)
  return target;
}

::size_t AcceptedMessagesFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmwasm.wasm.v1.AcceptedMessagesFilter)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes messages = 1 [json_name = "messages", (.gogoproto.casttype) = "RawContractMessage"];
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_messages().size());
  for (int i = 0, n = _internal_messages().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        _internal_messages().Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AcceptedMessagesFilter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AcceptedMessagesFilter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AcceptedMessagesFilter::GetClassData() const { return &_class_data_; }


void AcceptedMessagesFilter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AcceptedMessagesFilter*>(&to_msg);
  auto& from = static_cast<const AcceptedMessagesFilter&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmwasm.wasm.v1.AcceptedMessagesFilter)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_messages()->MergeFrom(from._internal_messages());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AcceptedMessagesFilter::CopyFrom(const AcceptedMessagesFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmwasm.wasm.v1.AcceptedMessagesFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AcceptedMessagesFilter::IsInitialized() const {
  return true;
}

void AcceptedMessagesFilter::InternalSwap(AcceptedMessagesFilter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_messages()->InternalSwap(
      other->_internal_mutable_messages());
}

::PROTOBUF_NAMESPACE_ID::Metadata AcceptedMessagesFilter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmwasm_2fwasm_2fv1_2fauthz_2eproto_getter, &descriptor_table_cosmwasm_2fwasm_2fv1_2fauthz_2eproto_once,
      file_level_metadata_cosmwasm_2fwasm_2fv1_2fauthz_2eproto[8]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace wasm
}  // namespace cosmwasm
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cosmwasm::wasm::v1::ContractExecutionAuthorization*
Arena::CreateMaybeMessage< ::cosmwasm::wasm::v1::ContractExecutionAuthorization >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmwasm::wasm::v1::ContractExecutionAuthorization >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmwasm::wasm::v1::ContractMigrationAuthorization*
Arena::CreateMaybeMessage< ::cosmwasm::wasm::v1::ContractMigrationAuthorization >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmwasm::wasm::v1::ContractMigrationAuthorization >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmwasm::wasm::v1::ContractGrant*
Arena::CreateMaybeMessage< ::cosmwasm::wasm::v1::ContractGrant >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmwasm::wasm::v1::ContractGrant >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmwasm::wasm::v1::MaxCallsLimit*
Arena::CreateMaybeMessage< ::cosmwasm::wasm::v1::MaxCallsLimit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmwasm::wasm::v1::MaxCallsLimit >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmwasm::wasm::v1::MaxFundsLimit*
Arena::CreateMaybeMessage< ::cosmwasm::wasm::v1::MaxFundsLimit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmwasm::wasm::v1::MaxFundsLimit >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmwasm::wasm::v1::CombinedLimit*
Arena::CreateMaybeMessage< ::cosmwasm::wasm::v1::CombinedLimit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmwasm::wasm::v1::CombinedLimit >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmwasm::wasm::v1::AllowAllMessagesFilter*
Arena::CreateMaybeMessage< ::cosmwasm::wasm::v1::AllowAllMessagesFilter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmwasm::wasm::v1::AllowAllMessagesFilter >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmwasm::wasm::v1::AcceptedMessageKeysFilter*
Arena::CreateMaybeMessage< ::cosmwasm::wasm::v1::AcceptedMessageKeysFilter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmwasm::wasm::v1::AcceptedMessageKeysFilter >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmwasm::wasm::v1::AcceptedMessagesFilter*
Arena::CreateMaybeMessage< ::cosmwasm::wasm::v1::AcceptedMessagesFilter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmwasm::wasm::v1::AcceptedMessagesFilter >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

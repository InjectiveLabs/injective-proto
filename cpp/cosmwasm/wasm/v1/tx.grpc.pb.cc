// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: cosmwasm/wasm/v1/tx.proto

#include "cosmwasm/wasm/v1/tx.pb.h"
#include "cosmwasm/wasm/v1/tx.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace cosmwasm {
namespace wasm {
namespace v1 {

static const char* Msg_method_names[] = {
  "/cosmwasm.wasm.v1.Msg/StoreCode",
  "/cosmwasm.wasm.v1.Msg/InstantiateContract",
  "/cosmwasm.wasm.v1.Msg/InstantiateContract2",
  "/cosmwasm.wasm.v1.Msg/ExecuteContract",
  "/cosmwasm.wasm.v1.Msg/MigrateContract",
  "/cosmwasm.wasm.v1.Msg/UpdateAdmin",
  "/cosmwasm.wasm.v1.Msg/ClearAdmin",
  "/cosmwasm.wasm.v1.Msg/UpdateInstantiateConfig",
  "/cosmwasm.wasm.v1.Msg/UpdateParams",
  "/cosmwasm.wasm.v1.Msg/SudoContract",
  "/cosmwasm.wasm.v1.Msg/PinCodes",
  "/cosmwasm.wasm.v1.Msg/UnpinCodes",
  "/cosmwasm.wasm.v1.Msg/StoreAndInstantiateContract",
  "/cosmwasm.wasm.v1.Msg/RemoveCodeUploadParamsAddresses",
  "/cosmwasm.wasm.v1.Msg/AddCodeUploadParamsAddresses",
};

std::unique_ptr< Msg::Stub> Msg::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Msg::Stub> stub(new Msg::Stub(channel, options));
  return stub;
}

Msg::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_StoreCode_(Msg_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_InstantiateContract_(Msg_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_InstantiateContract2_(Msg_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ExecuteContract_(Msg_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_MigrateContract_(Msg_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateAdmin_(Msg_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ClearAdmin_(Msg_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateInstantiateConfig_(Msg_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateParams_(Msg_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SudoContract_(Msg_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PinCodes_(Msg_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UnpinCodes_(Msg_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StoreAndInstantiateContract_(Msg_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RemoveCodeUploadParamsAddresses_(Msg_method_names[13], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AddCodeUploadParamsAddresses_(Msg_method_names[14], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Msg::Stub::StoreCode(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::MsgStoreCode& request, ::cosmwasm::wasm::v1::MsgStoreCodeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmwasm::wasm::v1::MsgStoreCode, ::cosmwasm::wasm::v1::MsgStoreCodeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_StoreCode_, context, request, response);
}

void Msg::Stub::async::StoreCode(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::MsgStoreCode* request, ::cosmwasm::wasm::v1::MsgStoreCodeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmwasm::wasm::v1::MsgStoreCode, ::cosmwasm::wasm::v1::MsgStoreCodeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StoreCode_, context, request, response, std::move(f));
}

void Msg::Stub::async::StoreCode(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::MsgStoreCode* request, ::cosmwasm::wasm::v1::MsgStoreCodeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StoreCode_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmwasm::wasm::v1::MsgStoreCodeResponse>* Msg::Stub::PrepareAsyncStoreCodeRaw(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::MsgStoreCode& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmwasm::wasm::v1::MsgStoreCodeResponse, ::cosmwasm::wasm::v1::MsgStoreCode, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_StoreCode_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmwasm::wasm::v1::MsgStoreCodeResponse>* Msg::Stub::AsyncStoreCodeRaw(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::MsgStoreCode& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncStoreCodeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Msg::Stub::InstantiateContract(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::MsgInstantiateContract& request, ::cosmwasm::wasm::v1::MsgInstantiateContractResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmwasm::wasm::v1::MsgInstantiateContract, ::cosmwasm::wasm::v1::MsgInstantiateContractResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_InstantiateContract_, context, request, response);
}

void Msg::Stub::async::InstantiateContract(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::MsgInstantiateContract* request, ::cosmwasm::wasm::v1::MsgInstantiateContractResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmwasm::wasm::v1::MsgInstantiateContract, ::cosmwasm::wasm::v1::MsgInstantiateContractResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_InstantiateContract_, context, request, response, std::move(f));
}

void Msg::Stub::async::InstantiateContract(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::MsgInstantiateContract* request, ::cosmwasm::wasm::v1::MsgInstantiateContractResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_InstantiateContract_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmwasm::wasm::v1::MsgInstantiateContractResponse>* Msg::Stub::PrepareAsyncInstantiateContractRaw(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::MsgInstantiateContract& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmwasm::wasm::v1::MsgInstantiateContractResponse, ::cosmwasm::wasm::v1::MsgInstantiateContract, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_InstantiateContract_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmwasm::wasm::v1::MsgInstantiateContractResponse>* Msg::Stub::AsyncInstantiateContractRaw(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::MsgInstantiateContract& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncInstantiateContractRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Msg::Stub::InstantiateContract2(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::MsgInstantiateContract2& request, ::cosmwasm::wasm::v1::MsgInstantiateContract2Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmwasm::wasm::v1::MsgInstantiateContract2, ::cosmwasm::wasm::v1::MsgInstantiateContract2Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_InstantiateContract2_, context, request, response);
}

void Msg::Stub::async::InstantiateContract2(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::MsgInstantiateContract2* request, ::cosmwasm::wasm::v1::MsgInstantiateContract2Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmwasm::wasm::v1::MsgInstantiateContract2, ::cosmwasm::wasm::v1::MsgInstantiateContract2Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_InstantiateContract2_, context, request, response, std::move(f));
}

void Msg::Stub::async::InstantiateContract2(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::MsgInstantiateContract2* request, ::cosmwasm::wasm::v1::MsgInstantiateContract2Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_InstantiateContract2_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmwasm::wasm::v1::MsgInstantiateContract2Response>* Msg::Stub::PrepareAsyncInstantiateContract2Raw(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::MsgInstantiateContract2& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmwasm::wasm::v1::MsgInstantiateContract2Response, ::cosmwasm::wasm::v1::MsgInstantiateContract2, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_InstantiateContract2_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmwasm::wasm::v1::MsgInstantiateContract2Response>* Msg::Stub::AsyncInstantiateContract2Raw(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::MsgInstantiateContract2& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncInstantiateContract2Raw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Msg::Stub::ExecuteContract(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::MsgExecuteContract& request, ::cosmwasm::wasm::v1::MsgExecuteContractResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmwasm::wasm::v1::MsgExecuteContract, ::cosmwasm::wasm::v1::MsgExecuteContractResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ExecuteContract_, context, request, response);
}

void Msg::Stub::async::ExecuteContract(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::MsgExecuteContract* request, ::cosmwasm::wasm::v1::MsgExecuteContractResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmwasm::wasm::v1::MsgExecuteContract, ::cosmwasm::wasm::v1::MsgExecuteContractResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExecuteContract_, context, request, response, std::move(f));
}

void Msg::Stub::async::ExecuteContract(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::MsgExecuteContract* request, ::cosmwasm::wasm::v1::MsgExecuteContractResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExecuteContract_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmwasm::wasm::v1::MsgExecuteContractResponse>* Msg::Stub::PrepareAsyncExecuteContractRaw(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::MsgExecuteContract& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmwasm::wasm::v1::MsgExecuteContractResponse, ::cosmwasm::wasm::v1::MsgExecuteContract, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ExecuteContract_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmwasm::wasm::v1::MsgExecuteContractResponse>* Msg::Stub::AsyncExecuteContractRaw(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::MsgExecuteContract& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncExecuteContractRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Msg::Stub::MigrateContract(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::MsgMigrateContract& request, ::cosmwasm::wasm::v1::MsgMigrateContractResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmwasm::wasm::v1::MsgMigrateContract, ::cosmwasm::wasm::v1::MsgMigrateContractResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_MigrateContract_, context, request, response);
}

void Msg::Stub::async::MigrateContract(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::MsgMigrateContract* request, ::cosmwasm::wasm::v1::MsgMigrateContractResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmwasm::wasm::v1::MsgMigrateContract, ::cosmwasm::wasm::v1::MsgMigrateContractResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_MigrateContract_, context, request, response, std::move(f));
}

void Msg::Stub::async::MigrateContract(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::MsgMigrateContract* request, ::cosmwasm::wasm::v1::MsgMigrateContractResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_MigrateContract_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmwasm::wasm::v1::MsgMigrateContractResponse>* Msg::Stub::PrepareAsyncMigrateContractRaw(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::MsgMigrateContract& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmwasm::wasm::v1::MsgMigrateContractResponse, ::cosmwasm::wasm::v1::MsgMigrateContract, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_MigrateContract_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmwasm::wasm::v1::MsgMigrateContractResponse>* Msg::Stub::AsyncMigrateContractRaw(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::MsgMigrateContract& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncMigrateContractRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Msg::Stub::UpdateAdmin(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::MsgUpdateAdmin& request, ::cosmwasm::wasm::v1::MsgUpdateAdminResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmwasm::wasm::v1::MsgUpdateAdmin, ::cosmwasm::wasm::v1::MsgUpdateAdminResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateAdmin_, context, request, response);
}

void Msg::Stub::async::UpdateAdmin(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::MsgUpdateAdmin* request, ::cosmwasm::wasm::v1::MsgUpdateAdminResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmwasm::wasm::v1::MsgUpdateAdmin, ::cosmwasm::wasm::v1::MsgUpdateAdminResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateAdmin_, context, request, response, std::move(f));
}

void Msg::Stub::async::UpdateAdmin(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::MsgUpdateAdmin* request, ::cosmwasm::wasm::v1::MsgUpdateAdminResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateAdmin_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmwasm::wasm::v1::MsgUpdateAdminResponse>* Msg::Stub::PrepareAsyncUpdateAdminRaw(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::MsgUpdateAdmin& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmwasm::wasm::v1::MsgUpdateAdminResponse, ::cosmwasm::wasm::v1::MsgUpdateAdmin, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateAdmin_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmwasm::wasm::v1::MsgUpdateAdminResponse>* Msg::Stub::AsyncUpdateAdminRaw(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::MsgUpdateAdmin& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateAdminRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Msg::Stub::ClearAdmin(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::MsgClearAdmin& request, ::cosmwasm::wasm::v1::MsgClearAdminResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmwasm::wasm::v1::MsgClearAdmin, ::cosmwasm::wasm::v1::MsgClearAdminResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ClearAdmin_, context, request, response);
}

void Msg::Stub::async::ClearAdmin(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::MsgClearAdmin* request, ::cosmwasm::wasm::v1::MsgClearAdminResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmwasm::wasm::v1::MsgClearAdmin, ::cosmwasm::wasm::v1::MsgClearAdminResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ClearAdmin_, context, request, response, std::move(f));
}

void Msg::Stub::async::ClearAdmin(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::MsgClearAdmin* request, ::cosmwasm::wasm::v1::MsgClearAdminResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ClearAdmin_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmwasm::wasm::v1::MsgClearAdminResponse>* Msg::Stub::PrepareAsyncClearAdminRaw(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::MsgClearAdmin& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmwasm::wasm::v1::MsgClearAdminResponse, ::cosmwasm::wasm::v1::MsgClearAdmin, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ClearAdmin_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmwasm::wasm::v1::MsgClearAdminResponse>* Msg::Stub::AsyncClearAdminRaw(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::MsgClearAdmin& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncClearAdminRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Msg::Stub::UpdateInstantiateConfig(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::MsgUpdateInstantiateConfig& request, ::cosmwasm::wasm::v1::MsgUpdateInstantiateConfigResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmwasm::wasm::v1::MsgUpdateInstantiateConfig, ::cosmwasm::wasm::v1::MsgUpdateInstantiateConfigResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateInstantiateConfig_, context, request, response);
}

void Msg::Stub::async::UpdateInstantiateConfig(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::MsgUpdateInstantiateConfig* request, ::cosmwasm::wasm::v1::MsgUpdateInstantiateConfigResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmwasm::wasm::v1::MsgUpdateInstantiateConfig, ::cosmwasm::wasm::v1::MsgUpdateInstantiateConfigResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateInstantiateConfig_, context, request, response, std::move(f));
}

void Msg::Stub::async::UpdateInstantiateConfig(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::MsgUpdateInstantiateConfig* request, ::cosmwasm::wasm::v1::MsgUpdateInstantiateConfigResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateInstantiateConfig_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmwasm::wasm::v1::MsgUpdateInstantiateConfigResponse>* Msg::Stub::PrepareAsyncUpdateInstantiateConfigRaw(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::MsgUpdateInstantiateConfig& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmwasm::wasm::v1::MsgUpdateInstantiateConfigResponse, ::cosmwasm::wasm::v1::MsgUpdateInstantiateConfig, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateInstantiateConfig_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmwasm::wasm::v1::MsgUpdateInstantiateConfigResponse>* Msg::Stub::AsyncUpdateInstantiateConfigRaw(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::MsgUpdateInstantiateConfig& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateInstantiateConfigRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Msg::Stub::UpdateParams(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::MsgUpdateParams& request, ::cosmwasm::wasm::v1::MsgUpdateParamsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmwasm::wasm::v1::MsgUpdateParams, ::cosmwasm::wasm::v1::MsgUpdateParamsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateParams_, context, request, response);
}

void Msg::Stub::async::UpdateParams(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::MsgUpdateParams* request, ::cosmwasm::wasm::v1::MsgUpdateParamsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmwasm::wasm::v1::MsgUpdateParams, ::cosmwasm::wasm::v1::MsgUpdateParamsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateParams_, context, request, response, std::move(f));
}

void Msg::Stub::async::UpdateParams(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::MsgUpdateParams* request, ::cosmwasm::wasm::v1::MsgUpdateParamsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateParams_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmwasm::wasm::v1::MsgUpdateParamsResponse>* Msg::Stub::PrepareAsyncUpdateParamsRaw(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::MsgUpdateParams& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmwasm::wasm::v1::MsgUpdateParamsResponse, ::cosmwasm::wasm::v1::MsgUpdateParams, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateParams_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmwasm::wasm::v1::MsgUpdateParamsResponse>* Msg::Stub::AsyncUpdateParamsRaw(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::MsgUpdateParams& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateParamsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Msg::Stub::SudoContract(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::MsgSudoContract& request, ::cosmwasm::wasm::v1::MsgSudoContractResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmwasm::wasm::v1::MsgSudoContract, ::cosmwasm::wasm::v1::MsgSudoContractResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SudoContract_, context, request, response);
}

void Msg::Stub::async::SudoContract(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::MsgSudoContract* request, ::cosmwasm::wasm::v1::MsgSudoContractResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmwasm::wasm::v1::MsgSudoContract, ::cosmwasm::wasm::v1::MsgSudoContractResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SudoContract_, context, request, response, std::move(f));
}

void Msg::Stub::async::SudoContract(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::MsgSudoContract* request, ::cosmwasm::wasm::v1::MsgSudoContractResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SudoContract_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmwasm::wasm::v1::MsgSudoContractResponse>* Msg::Stub::PrepareAsyncSudoContractRaw(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::MsgSudoContract& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmwasm::wasm::v1::MsgSudoContractResponse, ::cosmwasm::wasm::v1::MsgSudoContract, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SudoContract_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmwasm::wasm::v1::MsgSudoContractResponse>* Msg::Stub::AsyncSudoContractRaw(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::MsgSudoContract& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSudoContractRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Msg::Stub::PinCodes(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::MsgPinCodes& request, ::cosmwasm::wasm::v1::MsgPinCodesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmwasm::wasm::v1::MsgPinCodes, ::cosmwasm::wasm::v1::MsgPinCodesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PinCodes_, context, request, response);
}

void Msg::Stub::async::PinCodes(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::MsgPinCodes* request, ::cosmwasm::wasm::v1::MsgPinCodesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmwasm::wasm::v1::MsgPinCodes, ::cosmwasm::wasm::v1::MsgPinCodesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PinCodes_, context, request, response, std::move(f));
}

void Msg::Stub::async::PinCodes(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::MsgPinCodes* request, ::cosmwasm::wasm::v1::MsgPinCodesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PinCodes_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmwasm::wasm::v1::MsgPinCodesResponse>* Msg::Stub::PrepareAsyncPinCodesRaw(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::MsgPinCodes& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmwasm::wasm::v1::MsgPinCodesResponse, ::cosmwasm::wasm::v1::MsgPinCodes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PinCodes_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmwasm::wasm::v1::MsgPinCodesResponse>* Msg::Stub::AsyncPinCodesRaw(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::MsgPinCodes& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPinCodesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Msg::Stub::UnpinCodes(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::MsgUnpinCodes& request, ::cosmwasm::wasm::v1::MsgUnpinCodesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmwasm::wasm::v1::MsgUnpinCodes, ::cosmwasm::wasm::v1::MsgUnpinCodesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UnpinCodes_, context, request, response);
}

void Msg::Stub::async::UnpinCodes(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::MsgUnpinCodes* request, ::cosmwasm::wasm::v1::MsgUnpinCodesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmwasm::wasm::v1::MsgUnpinCodes, ::cosmwasm::wasm::v1::MsgUnpinCodesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UnpinCodes_, context, request, response, std::move(f));
}

void Msg::Stub::async::UnpinCodes(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::MsgUnpinCodes* request, ::cosmwasm::wasm::v1::MsgUnpinCodesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UnpinCodes_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmwasm::wasm::v1::MsgUnpinCodesResponse>* Msg::Stub::PrepareAsyncUnpinCodesRaw(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::MsgUnpinCodes& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmwasm::wasm::v1::MsgUnpinCodesResponse, ::cosmwasm::wasm::v1::MsgUnpinCodes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UnpinCodes_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmwasm::wasm::v1::MsgUnpinCodesResponse>* Msg::Stub::AsyncUnpinCodesRaw(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::MsgUnpinCodes& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUnpinCodesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Msg::Stub::StoreAndInstantiateContract(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::MsgStoreAndInstantiateContract& request, ::cosmwasm::wasm::v1::MsgStoreAndInstantiateContractResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmwasm::wasm::v1::MsgStoreAndInstantiateContract, ::cosmwasm::wasm::v1::MsgStoreAndInstantiateContractResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_StoreAndInstantiateContract_, context, request, response);
}

void Msg::Stub::async::StoreAndInstantiateContract(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::MsgStoreAndInstantiateContract* request, ::cosmwasm::wasm::v1::MsgStoreAndInstantiateContractResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmwasm::wasm::v1::MsgStoreAndInstantiateContract, ::cosmwasm::wasm::v1::MsgStoreAndInstantiateContractResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StoreAndInstantiateContract_, context, request, response, std::move(f));
}

void Msg::Stub::async::StoreAndInstantiateContract(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::MsgStoreAndInstantiateContract* request, ::cosmwasm::wasm::v1::MsgStoreAndInstantiateContractResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StoreAndInstantiateContract_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmwasm::wasm::v1::MsgStoreAndInstantiateContractResponse>* Msg::Stub::PrepareAsyncStoreAndInstantiateContractRaw(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::MsgStoreAndInstantiateContract& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmwasm::wasm::v1::MsgStoreAndInstantiateContractResponse, ::cosmwasm::wasm::v1::MsgStoreAndInstantiateContract, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_StoreAndInstantiateContract_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmwasm::wasm::v1::MsgStoreAndInstantiateContractResponse>* Msg::Stub::AsyncStoreAndInstantiateContractRaw(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::MsgStoreAndInstantiateContract& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncStoreAndInstantiateContractRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Msg::Stub::RemoveCodeUploadParamsAddresses(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::MsgRemoveCodeUploadParamsAddresses& request, ::cosmwasm::wasm::v1::MsgRemoveCodeUploadParamsAddressesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmwasm::wasm::v1::MsgRemoveCodeUploadParamsAddresses, ::cosmwasm::wasm::v1::MsgRemoveCodeUploadParamsAddressesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RemoveCodeUploadParamsAddresses_, context, request, response);
}

void Msg::Stub::async::RemoveCodeUploadParamsAddresses(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::MsgRemoveCodeUploadParamsAddresses* request, ::cosmwasm::wasm::v1::MsgRemoveCodeUploadParamsAddressesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmwasm::wasm::v1::MsgRemoveCodeUploadParamsAddresses, ::cosmwasm::wasm::v1::MsgRemoveCodeUploadParamsAddressesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RemoveCodeUploadParamsAddresses_, context, request, response, std::move(f));
}

void Msg::Stub::async::RemoveCodeUploadParamsAddresses(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::MsgRemoveCodeUploadParamsAddresses* request, ::cosmwasm::wasm::v1::MsgRemoveCodeUploadParamsAddressesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RemoveCodeUploadParamsAddresses_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmwasm::wasm::v1::MsgRemoveCodeUploadParamsAddressesResponse>* Msg::Stub::PrepareAsyncRemoveCodeUploadParamsAddressesRaw(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::MsgRemoveCodeUploadParamsAddresses& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmwasm::wasm::v1::MsgRemoveCodeUploadParamsAddressesResponse, ::cosmwasm::wasm::v1::MsgRemoveCodeUploadParamsAddresses, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RemoveCodeUploadParamsAddresses_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmwasm::wasm::v1::MsgRemoveCodeUploadParamsAddressesResponse>* Msg::Stub::AsyncRemoveCodeUploadParamsAddressesRaw(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::MsgRemoveCodeUploadParamsAddresses& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRemoveCodeUploadParamsAddressesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Msg::Stub::AddCodeUploadParamsAddresses(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::MsgAddCodeUploadParamsAddresses& request, ::cosmwasm::wasm::v1::MsgAddCodeUploadParamsAddressesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmwasm::wasm::v1::MsgAddCodeUploadParamsAddresses, ::cosmwasm::wasm::v1::MsgAddCodeUploadParamsAddressesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AddCodeUploadParamsAddresses_, context, request, response);
}

void Msg::Stub::async::AddCodeUploadParamsAddresses(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::MsgAddCodeUploadParamsAddresses* request, ::cosmwasm::wasm::v1::MsgAddCodeUploadParamsAddressesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmwasm::wasm::v1::MsgAddCodeUploadParamsAddresses, ::cosmwasm::wasm::v1::MsgAddCodeUploadParamsAddressesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddCodeUploadParamsAddresses_, context, request, response, std::move(f));
}

void Msg::Stub::async::AddCodeUploadParamsAddresses(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::MsgAddCodeUploadParamsAddresses* request, ::cosmwasm::wasm::v1::MsgAddCodeUploadParamsAddressesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddCodeUploadParamsAddresses_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmwasm::wasm::v1::MsgAddCodeUploadParamsAddressesResponse>* Msg::Stub::PrepareAsyncAddCodeUploadParamsAddressesRaw(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::MsgAddCodeUploadParamsAddresses& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmwasm::wasm::v1::MsgAddCodeUploadParamsAddressesResponse, ::cosmwasm::wasm::v1::MsgAddCodeUploadParamsAddresses, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AddCodeUploadParamsAddresses_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmwasm::wasm::v1::MsgAddCodeUploadParamsAddressesResponse>* Msg::Stub::AsyncAddCodeUploadParamsAddressesRaw(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::MsgAddCodeUploadParamsAddresses& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAddCodeUploadParamsAddressesRaw(context, request, cq);
  result->StartCall();
  return result;
}

Msg::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Msg_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Msg::Service, ::cosmwasm::wasm::v1::MsgStoreCode, ::cosmwasm::wasm::v1::MsgStoreCodeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Msg::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmwasm::wasm::v1::MsgStoreCode* req,
             ::cosmwasm::wasm::v1::MsgStoreCodeResponse* resp) {
               return service->StoreCode(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Msg_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Msg::Service, ::cosmwasm::wasm::v1::MsgInstantiateContract, ::cosmwasm::wasm::v1::MsgInstantiateContractResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Msg::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmwasm::wasm::v1::MsgInstantiateContract* req,
             ::cosmwasm::wasm::v1::MsgInstantiateContractResponse* resp) {
               return service->InstantiateContract(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Msg_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Msg::Service, ::cosmwasm::wasm::v1::MsgInstantiateContract2, ::cosmwasm::wasm::v1::MsgInstantiateContract2Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Msg::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmwasm::wasm::v1::MsgInstantiateContract2* req,
             ::cosmwasm::wasm::v1::MsgInstantiateContract2Response* resp) {
               return service->InstantiateContract2(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Msg_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Msg::Service, ::cosmwasm::wasm::v1::MsgExecuteContract, ::cosmwasm::wasm::v1::MsgExecuteContractResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Msg::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmwasm::wasm::v1::MsgExecuteContract* req,
             ::cosmwasm::wasm::v1::MsgExecuteContractResponse* resp) {
               return service->ExecuteContract(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Msg_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Msg::Service, ::cosmwasm::wasm::v1::MsgMigrateContract, ::cosmwasm::wasm::v1::MsgMigrateContractResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Msg::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmwasm::wasm::v1::MsgMigrateContract* req,
             ::cosmwasm::wasm::v1::MsgMigrateContractResponse* resp) {
               return service->MigrateContract(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Msg_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Msg::Service, ::cosmwasm::wasm::v1::MsgUpdateAdmin, ::cosmwasm::wasm::v1::MsgUpdateAdminResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Msg::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmwasm::wasm::v1::MsgUpdateAdmin* req,
             ::cosmwasm::wasm::v1::MsgUpdateAdminResponse* resp) {
               return service->UpdateAdmin(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Msg_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Msg::Service, ::cosmwasm::wasm::v1::MsgClearAdmin, ::cosmwasm::wasm::v1::MsgClearAdminResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Msg::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmwasm::wasm::v1::MsgClearAdmin* req,
             ::cosmwasm::wasm::v1::MsgClearAdminResponse* resp) {
               return service->ClearAdmin(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Msg_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Msg::Service, ::cosmwasm::wasm::v1::MsgUpdateInstantiateConfig, ::cosmwasm::wasm::v1::MsgUpdateInstantiateConfigResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Msg::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmwasm::wasm::v1::MsgUpdateInstantiateConfig* req,
             ::cosmwasm::wasm::v1::MsgUpdateInstantiateConfigResponse* resp) {
               return service->UpdateInstantiateConfig(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Msg_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Msg::Service, ::cosmwasm::wasm::v1::MsgUpdateParams, ::cosmwasm::wasm::v1::MsgUpdateParamsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Msg::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmwasm::wasm::v1::MsgUpdateParams* req,
             ::cosmwasm::wasm::v1::MsgUpdateParamsResponse* resp) {
               return service->UpdateParams(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Msg_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Msg::Service, ::cosmwasm::wasm::v1::MsgSudoContract, ::cosmwasm::wasm::v1::MsgSudoContractResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Msg::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmwasm::wasm::v1::MsgSudoContract* req,
             ::cosmwasm::wasm::v1::MsgSudoContractResponse* resp) {
               return service->SudoContract(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Msg_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Msg::Service, ::cosmwasm::wasm::v1::MsgPinCodes, ::cosmwasm::wasm::v1::MsgPinCodesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Msg::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmwasm::wasm::v1::MsgPinCodes* req,
             ::cosmwasm::wasm::v1::MsgPinCodesResponse* resp) {
               return service->PinCodes(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Msg_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Msg::Service, ::cosmwasm::wasm::v1::MsgUnpinCodes, ::cosmwasm::wasm::v1::MsgUnpinCodesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Msg::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmwasm::wasm::v1::MsgUnpinCodes* req,
             ::cosmwasm::wasm::v1::MsgUnpinCodesResponse* resp) {
               return service->UnpinCodes(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Msg_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Msg::Service, ::cosmwasm::wasm::v1::MsgStoreAndInstantiateContract, ::cosmwasm::wasm::v1::MsgStoreAndInstantiateContractResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Msg::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmwasm::wasm::v1::MsgStoreAndInstantiateContract* req,
             ::cosmwasm::wasm::v1::MsgStoreAndInstantiateContractResponse* resp) {
               return service->StoreAndInstantiateContract(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Msg_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Msg::Service, ::cosmwasm::wasm::v1::MsgRemoveCodeUploadParamsAddresses, ::cosmwasm::wasm::v1::MsgRemoveCodeUploadParamsAddressesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Msg::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmwasm::wasm::v1::MsgRemoveCodeUploadParamsAddresses* req,
             ::cosmwasm::wasm::v1::MsgRemoveCodeUploadParamsAddressesResponse* resp) {
               return service->RemoveCodeUploadParamsAddresses(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Msg_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Msg::Service, ::cosmwasm::wasm::v1::MsgAddCodeUploadParamsAddresses, ::cosmwasm::wasm::v1::MsgAddCodeUploadParamsAddressesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Msg::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmwasm::wasm::v1::MsgAddCodeUploadParamsAddresses* req,
             ::cosmwasm::wasm::v1::MsgAddCodeUploadParamsAddressesResponse* resp) {
               return service->AddCodeUploadParamsAddresses(ctx, req, resp);
             }, this)));
}

Msg::Service::~Service() {
}

::grpc::Status Msg::Service::StoreCode(::grpc::ServerContext* context, const ::cosmwasm::wasm::v1::MsgStoreCode* request, ::cosmwasm::wasm::v1::MsgStoreCodeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Msg::Service::InstantiateContract(::grpc::ServerContext* context, const ::cosmwasm::wasm::v1::MsgInstantiateContract* request, ::cosmwasm::wasm::v1::MsgInstantiateContractResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Msg::Service::InstantiateContract2(::grpc::ServerContext* context, const ::cosmwasm::wasm::v1::MsgInstantiateContract2* request, ::cosmwasm::wasm::v1::MsgInstantiateContract2Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Msg::Service::ExecuteContract(::grpc::ServerContext* context, const ::cosmwasm::wasm::v1::MsgExecuteContract* request, ::cosmwasm::wasm::v1::MsgExecuteContractResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Msg::Service::MigrateContract(::grpc::ServerContext* context, const ::cosmwasm::wasm::v1::MsgMigrateContract* request, ::cosmwasm::wasm::v1::MsgMigrateContractResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Msg::Service::UpdateAdmin(::grpc::ServerContext* context, const ::cosmwasm::wasm::v1::MsgUpdateAdmin* request, ::cosmwasm::wasm::v1::MsgUpdateAdminResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Msg::Service::ClearAdmin(::grpc::ServerContext* context, const ::cosmwasm::wasm::v1::MsgClearAdmin* request, ::cosmwasm::wasm::v1::MsgClearAdminResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Msg::Service::UpdateInstantiateConfig(::grpc::ServerContext* context, const ::cosmwasm::wasm::v1::MsgUpdateInstantiateConfig* request, ::cosmwasm::wasm::v1::MsgUpdateInstantiateConfigResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Msg::Service::UpdateParams(::grpc::ServerContext* context, const ::cosmwasm::wasm::v1::MsgUpdateParams* request, ::cosmwasm::wasm::v1::MsgUpdateParamsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Msg::Service::SudoContract(::grpc::ServerContext* context, const ::cosmwasm::wasm::v1::MsgSudoContract* request, ::cosmwasm::wasm::v1::MsgSudoContractResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Msg::Service::PinCodes(::grpc::ServerContext* context, const ::cosmwasm::wasm::v1::MsgPinCodes* request, ::cosmwasm::wasm::v1::MsgPinCodesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Msg::Service::UnpinCodes(::grpc::ServerContext* context, const ::cosmwasm::wasm::v1::MsgUnpinCodes* request, ::cosmwasm::wasm::v1::MsgUnpinCodesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Msg::Service::StoreAndInstantiateContract(::grpc::ServerContext* context, const ::cosmwasm::wasm::v1::MsgStoreAndInstantiateContract* request, ::cosmwasm::wasm::v1::MsgStoreAndInstantiateContractResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Msg::Service::RemoveCodeUploadParamsAddresses(::grpc::ServerContext* context, const ::cosmwasm::wasm::v1::MsgRemoveCodeUploadParamsAddresses* request, ::cosmwasm::wasm::v1::MsgRemoveCodeUploadParamsAddressesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Msg::Service::AddCodeUploadParamsAddresses(::grpc::ServerContext* context, const ::cosmwasm::wasm::v1::MsgAddCodeUploadParamsAddresses* request, ::cosmwasm::wasm::v1::MsgAddCodeUploadParamsAddressesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace cosmwasm
}  // namespace wasm
}  // namespace v1


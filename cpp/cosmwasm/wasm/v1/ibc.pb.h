// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cosmwasm/wasm/v1/ibc.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cosmwasm_2fwasm_2fv1_2fibc_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_cosmwasm_2fwasm_2fv1_2fibc_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "gogoproto/gogo.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_cosmwasm_2fwasm_2fv1_2fibc_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cosmwasm_2fwasm_2fv1_2fibc_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_cosmwasm_2fwasm_2fv1_2fibc_2eproto;
namespace cosmwasm {
namespace wasm {
namespace v1 {
class MsgIBCCloseChannel;
struct MsgIBCCloseChannelDefaultTypeInternal;
extern MsgIBCCloseChannelDefaultTypeInternal _MsgIBCCloseChannel_default_instance_;
class MsgIBCSend;
struct MsgIBCSendDefaultTypeInternal;
extern MsgIBCSendDefaultTypeInternal _MsgIBCSend_default_instance_;
class MsgIBCSendResponse;
struct MsgIBCSendResponseDefaultTypeInternal;
extern MsgIBCSendResponseDefaultTypeInternal _MsgIBCSendResponse_default_instance_;
}  // namespace v1
}  // namespace wasm
}  // namespace cosmwasm
PROTOBUF_NAMESPACE_OPEN
template <>
::cosmwasm::wasm::v1::MsgIBCCloseChannel* Arena::CreateMaybeMessage<::cosmwasm::wasm::v1::MsgIBCCloseChannel>(Arena*);
template <>
::cosmwasm::wasm::v1::MsgIBCSend* Arena::CreateMaybeMessage<::cosmwasm::wasm::v1::MsgIBCSend>(Arena*);
template <>
::cosmwasm::wasm::v1::MsgIBCSendResponse* Arena::CreateMaybeMessage<::cosmwasm::wasm::v1::MsgIBCSendResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace cosmwasm {
namespace wasm {
namespace v1 {

// ===================================================================


// -------------------------------------------------------------------

class MsgIBCSend final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmwasm.wasm.v1.MsgIBCSend) */ {
 public:
  inline MsgIBCSend() : MsgIBCSend(nullptr) {}
  ~MsgIBCSend() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MsgIBCSend(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgIBCSend(const MsgIBCSend& from);
  MsgIBCSend(MsgIBCSend&& from) noexcept
    : MsgIBCSend() {
    *this = ::std::move(from);
  }

  inline MsgIBCSend& operator=(const MsgIBCSend& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgIBCSend& operator=(MsgIBCSend&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgIBCSend& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgIBCSend* internal_default_instance() {
    return reinterpret_cast<const MsgIBCSend*>(
               &_MsgIBCSend_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MsgIBCSend& a, MsgIBCSend& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgIBCSend* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgIBCSend* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgIBCSend* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgIBCSend>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MsgIBCSend& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MsgIBCSend& from) {
    MsgIBCSend::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgIBCSend* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmwasm.wasm.v1.MsgIBCSend";
  }
  protected:
  explicit MsgIBCSend(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelFieldNumber = 2,
    kDataFieldNumber = 6,
    kTimeoutHeightFieldNumber = 4,
    kTimeoutTimestampFieldNumber = 5,
  };
  // string channel = 2 [json_name = "channel", (.gogoproto.moretags) = "yaml:\"source_channel\""];
  void clear_channel() ;
  const std::string& channel() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_channel(Arg_&& arg, Args_... args);
  std::string* mutable_channel();
  PROTOBUF_NODISCARD std::string* release_channel();
  void set_allocated_channel(std::string* ptr);

  private:
  const std::string& _internal_channel() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_channel(
      const std::string& value);
  std::string* _internal_mutable_channel();

  public:
  // bytes data = 6 [json_name = "data"];
  void clear_data() ;
  const std::string& data() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_data(Arg_&& arg, Args_... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* ptr);

  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(
      const std::string& value);
  std::string* _internal_mutable_data();

  public:
  // uint64 timeout_height = 4 [json_name = "timeoutHeight", (.gogoproto.moretags) = "yaml:\"timeout_height\""];
  void clear_timeout_height() ;
  ::uint64_t timeout_height() const;
  void set_timeout_height(::uint64_t value);

  private:
  ::uint64_t _internal_timeout_height() const;
  void _internal_set_timeout_height(::uint64_t value);

  public:
  // uint64 timeout_timestamp = 5 [json_name = "timeoutTimestamp", (.gogoproto.moretags) = "yaml:\"timeout_timestamp\""];
  void clear_timeout_timestamp() ;
  ::uint64_t timeout_timestamp() const;
  void set_timeout_timestamp(::uint64_t value);

  private:
  ::uint64_t _internal_timeout_timestamp() const;
  void _internal_set_timeout_timestamp(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:cosmwasm.wasm.v1.MsgIBCSend)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr channel_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
    ::uint64_t timeout_height_;
    ::uint64_t timeout_timestamp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmwasm_2fwasm_2fv1_2fibc_2eproto;
};// -------------------------------------------------------------------

class MsgIBCSendResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmwasm.wasm.v1.MsgIBCSendResponse) */ {
 public:
  inline MsgIBCSendResponse() : MsgIBCSendResponse(nullptr) {}
  ~MsgIBCSendResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MsgIBCSendResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgIBCSendResponse(const MsgIBCSendResponse& from);
  MsgIBCSendResponse(MsgIBCSendResponse&& from) noexcept
    : MsgIBCSendResponse() {
    *this = ::std::move(from);
  }

  inline MsgIBCSendResponse& operator=(const MsgIBCSendResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgIBCSendResponse& operator=(MsgIBCSendResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgIBCSendResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgIBCSendResponse* internal_default_instance() {
    return reinterpret_cast<const MsgIBCSendResponse*>(
               &_MsgIBCSendResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MsgIBCSendResponse& a, MsgIBCSendResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgIBCSendResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgIBCSendResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgIBCSendResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgIBCSendResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MsgIBCSendResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MsgIBCSendResponse& from) {
    MsgIBCSendResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgIBCSendResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmwasm.wasm.v1.MsgIBCSendResponse";
  }
  protected:
  explicit MsgIBCSendResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSequenceFieldNumber = 1,
  };
  // uint64 sequence = 1 [json_name = "sequence"];
  void clear_sequence() ;
  ::uint64_t sequence() const;
  void set_sequence(::uint64_t value);

  private:
  ::uint64_t _internal_sequence() const;
  void _internal_set_sequence(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:cosmwasm.wasm.v1.MsgIBCSendResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::uint64_t sequence_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmwasm_2fwasm_2fv1_2fibc_2eproto;
};// -------------------------------------------------------------------

class MsgIBCCloseChannel final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmwasm.wasm.v1.MsgIBCCloseChannel) */ {
 public:
  inline MsgIBCCloseChannel() : MsgIBCCloseChannel(nullptr) {}
  ~MsgIBCCloseChannel() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MsgIBCCloseChannel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgIBCCloseChannel(const MsgIBCCloseChannel& from);
  MsgIBCCloseChannel(MsgIBCCloseChannel&& from) noexcept
    : MsgIBCCloseChannel() {
    *this = ::std::move(from);
  }

  inline MsgIBCCloseChannel& operator=(const MsgIBCCloseChannel& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgIBCCloseChannel& operator=(MsgIBCCloseChannel&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgIBCCloseChannel& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgIBCCloseChannel* internal_default_instance() {
    return reinterpret_cast<const MsgIBCCloseChannel*>(
               &_MsgIBCCloseChannel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MsgIBCCloseChannel& a, MsgIBCCloseChannel& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgIBCCloseChannel* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgIBCCloseChannel* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgIBCCloseChannel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgIBCCloseChannel>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MsgIBCCloseChannel& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MsgIBCCloseChannel& from) {
    MsgIBCCloseChannel::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgIBCCloseChannel* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmwasm.wasm.v1.MsgIBCCloseChannel";
  }
  protected:
  explicit MsgIBCCloseChannel(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelFieldNumber = 2,
  };
  // string channel = 2 [json_name = "channel", (.gogoproto.moretags) = "yaml:\"source_channel\""];
  void clear_channel() ;
  const std::string& channel() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_channel(Arg_&& arg, Args_... args);
  std::string* mutable_channel();
  PROTOBUF_NODISCARD std::string* release_channel();
  void set_allocated_channel(std::string* ptr);

  private:
  const std::string& _internal_channel() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_channel(
      const std::string& value);
  std::string* _internal_mutable_channel();

  public:
  // @@protoc_insertion_point(class_scope:cosmwasm.wasm.v1.MsgIBCCloseChannel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr channel_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmwasm_2fwasm_2fv1_2fibc_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// MsgIBCSend

// string channel = 2 [json_name = "channel", (.gogoproto.moretags) = "yaml:\"source_channel\""];
inline void MsgIBCSend::clear_channel() {
  _impl_.channel_.ClearToEmpty();
}
inline const std::string& MsgIBCSend::channel() const {
  // @@protoc_insertion_point(field_get:cosmwasm.wasm.v1.MsgIBCSend.channel)
  return _internal_channel();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgIBCSend::set_channel(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.channel_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmwasm.wasm.v1.MsgIBCSend.channel)
}
inline std::string* MsgIBCSend::mutable_channel() {
  std::string* _s = _internal_mutable_channel();
  // @@protoc_insertion_point(field_mutable:cosmwasm.wasm.v1.MsgIBCSend.channel)
  return _s;
}
inline const std::string& MsgIBCSend::_internal_channel() const {
  return _impl_.channel_.Get();
}
inline void MsgIBCSend::_internal_set_channel(const std::string& value) {
  ;


  _impl_.channel_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgIBCSend::_internal_mutable_channel() {
  ;
  return _impl_.channel_.Mutable( GetArenaForAllocation());
}
inline std::string* MsgIBCSend::release_channel() {
  // @@protoc_insertion_point(field_release:cosmwasm.wasm.v1.MsgIBCSend.channel)
  return _impl_.channel_.Release();
}
inline void MsgIBCSend::set_allocated_channel(std::string* value) {
  _impl_.channel_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.channel_.IsDefault()) {
          _impl_.channel_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmwasm.wasm.v1.MsgIBCSend.channel)
}

// uint64 timeout_height = 4 [json_name = "timeoutHeight", (.gogoproto.moretags) = "yaml:\"timeout_height\""];
inline void MsgIBCSend::clear_timeout_height() {
  _impl_.timeout_height_ = ::uint64_t{0u};
}
inline ::uint64_t MsgIBCSend::timeout_height() const {
  // @@protoc_insertion_point(field_get:cosmwasm.wasm.v1.MsgIBCSend.timeout_height)
  return _internal_timeout_height();
}
inline void MsgIBCSend::set_timeout_height(::uint64_t value) {
  _internal_set_timeout_height(value);
  // @@protoc_insertion_point(field_set:cosmwasm.wasm.v1.MsgIBCSend.timeout_height)
}
inline ::uint64_t MsgIBCSend::_internal_timeout_height() const {
  return _impl_.timeout_height_;
}
inline void MsgIBCSend::_internal_set_timeout_height(::uint64_t value) {
  ;
  _impl_.timeout_height_ = value;
}

// uint64 timeout_timestamp = 5 [json_name = "timeoutTimestamp", (.gogoproto.moretags) = "yaml:\"timeout_timestamp\""];
inline void MsgIBCSend::clear_timeout_timestamp() {
  _impl_.timeout_timestamp_ = ::uint64_t{0u};
}
inline ::uint64_t MsgIBCSend::timeout_timestamp() const {
  // @@protoc_insertion_point(field_get:cosmwasm.wasm.v1.MsgIBCSend.timeout_timestamp)
  return _internal_timeout_timestamp();
}
inline void MsgIBCSend::set_timeout_timestamp(::uint64_t value) {
  _internal_set_timeout_timestamp(value);
  // @@protoc_insertion_point(field_set:cosmwasm.wasm.v1.MsgIBCSend.timeout_timestamp)
}
inline ::uint64_t MsgIBCSend::_internal_timeout_timestamp() const {
  return _impl_.timeout_timestamp_;
}
inline void MsgIBCSend::_internal_set_timeout_timestamp(::uint64_t value) {
  ;
  _impl_.timeout_timestamp_ = value;
}

// bytes data = 6 [json_name = "data"];
inline void MsgIBCSend::clear_data() {
  _impl_.data_.ClearToEmpty();
}
inline const std::string& MsgIBCSend::data() const {
  // @@protoc_insertion_point(field_get:cosmwasm.wasm.v1.MsgIBCSend.data)
  return _internal_data();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgIBCSend::set_data(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.data_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmwasm.wasm.v1.MsgIBCSend.data)
}
inline std::string* MsgIBCSend::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:cosmwasm.wasm.v1.MsgIBCSend.data)
  return _s;
}
inline const std::string& MsgIBCSend::_internal_data() const {
  return _impl_.data_.Get();
}
inline void MsgIBCSend::_internal_set_data(const std::string& value) {
  ;


  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgIBCSend::_internal_mutable_data() {
  ;
  return _impl_.data_.Mutable( GetArenaForAllocation());
}
inline std::string* MsgIBCSend::release_data() {
  // @@protoc_insertion_point(field_release:cosmwasm.wasm.v1.MsgIBCSend.data)
  return _impl_.data_.Release();
}
inline void MsgIBCSend::set_allocated_data(std::string* value) {
  _impl_.data_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.data_.IsDefault()) {
          _impl_.data_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmwasm.wasm.v1.MsgIBCSend.data)
}

// -------------------------------------------------------------------

// MsgIBCSendResponse

// uint64 sequence = 1 [json_name = "sequence"];
inline void MsgIBCSendResponse::clear_sequence() {
  _impl_.sequence_ = ::uint64_t{0u};
}
inline ::uint64_t MsgIBCSendResponse::sequence() const {
  // @@protoc_insertion_point(field_get:cosmwasm.wasm.v1.MsgIBCSendResponse.sequence)
  return _internal_sequence();
}
inline void MsgIBCSendResponse::set_sequence(::uint64_t value) {
  _internal_set_sequence(value);
  // @@protoc_insertion_point(field_set:cosmwasm.wasm.v1.MsgIBCSendResponse.sequence)
}
inline ::uint64_t MsgIBCSendResponse::_internal_sequence() const {
  return _impl_.sequence_;
}
inline void MsgIBCSendResponse::_internal_set_sequence(::uint64_t value) {
  ;
  _impl_.sequence_ = value;
}

// -------------------------------------------------------------------

// MsgIBCCloseChannel

// string channel = 2 [json_name = "channel", (.gogoproto.moretags) = "yaml:\"source_channel\""];
inline void MsgIBCCloseChannel::clear_channel() {
  _impl_.channel_.ClearToEmpty();
}
inline const std::string& MsgIBCCloseChannel::channel() const {
  // @@protoc_insertion_point(field_get:cosmwasm.wasm.v1.MsgIBCCloseChannel.channel)
  return _internal_channel();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgIBCCloseChannel::set_channel(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.channel_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmwasm.wasm.v1.MsgIBCCloseChannel.channel)
}
inline std::string* MsgIBCCloseChannel::mutable_channel() {
  std::string* _s = _internal_mutable_channel();
  // @@protoc_insertion_point(field_mutable:cosmwasm.wasm.v1.MsgIBCCloseChannel.channel)
  return _s;
}
inline const std::string& MsgIBCCloseChannel::_internal_channel() const {
  return _impl_.channel_.Get();
}
inline void MsgIBCCloseChannel::_internal_set_channel(const std::string& value) {
  ;


  _impl_.channel_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgIBCCloseChannel::_internal_mutable_channel() {
  ;
  return _impl_.channel_.Mutable( GetArenaForAllocation());
}
inline std::string* MsgIBCCloseChannel::release_channel() {
  // @@protoc_insertion_point(field_release:cosmwasm.wasm.v1.MsgIBCCloseChannel.channel)
  return _impl_.channel_.Release();
}
inline void MsgIBCCloseChannel::set_allocated_channel(std::string* value) {
  _impl_.channel_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.channel_.IsDefault()) {
          _impl_.channel_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmwasm.wasm.v1.MsgIBCCloseChannel.channel)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace wasm
}  // namespace cosmwasm


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_cosmwasm_2fwasm_2fv1_2fibc_2eproto_2epb_2eh

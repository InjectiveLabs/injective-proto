// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cosmwasm/wasm/v1/types.proto

#include "cosmwasm/wasm/v1/types.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace cosmwasm {
namespace wasm {
namespace v1 {
template <typename>
PROTOBUF_CONSTEXPR AccessTypeParam::AccessTypeParam(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.value_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AccessTypeParamDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AccessTypeParamDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AccessTypeParamDefaultTypeInternal() {}
  union {
    AccessTypeParam _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AccessTypeParamDefaultTypeInternal _AccessTypeParam_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR AccessConfig::AccessConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.addresses_)*/{}
  , /*decltype(_impl_.permission_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AccessConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AccessConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AccessConfigDefaultTypeInternal() {}
  union {
    AccessConfig _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AccessConfigDefaultTypeInternal _AccessConfig_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Params::Params(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.code_upload_access_)*/nullptr
  , /*decltype(_impl_.instantiate_default_permission_)*/ 0
} {}
struct ParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ParamsDefaultTypeInternal() {}
  union {
    Params _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ParamsDefaultTypeInternal _Params_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR CodeInfo::CodeInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.code_hash_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.creator_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.instantiate_config_)*/nullptr} {}
struct CodeInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CodeInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CodeInfoDefaultTypeInternal() {}
  union {
    CodeInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CodeInfoDefaultTypeInternal _CodeInfo_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ContractInfo::ContractInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.creator_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.admin_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.label_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.ibc_port_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.created_)*/nullptr
  , /*decltype(_impl_.extension_)*/nullptr
  , /*decltype(_impl_.code_id_)*/ ::uint64_t{0u}
} {}
struct ContractInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ContractInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ContractInfoDefaultTypeInternal() {}
  union {
    ContractInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ContractInfoDefaultTypeInternal _ContractInfo_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ContractCodeHistoryEntry::ContractCodeHistoryEntry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.msg_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.updated_)*/nullptr
  , /*decltype(_impl_.code_id_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.operation_)*/ 0
} {}
struct ContractCodeHistoryEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ContractCodeHistoryEntryDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ContractCodeHistoryEntryDefaultTypeInternal() {}
  union {
    ContractCodeHistoryEntry _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ContractCodeHistoryEntryDefaultTypeInternal _ContractCodeHistoryEntry_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR AbsoluteTxPosition::AbsoluteTxPosition(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.block_height_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.tx_index_)*/ ::uint64_t{0u}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AbsoluteTxPositionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AbsoluteTxPositionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AbsoluteTxPositionDefaultTypeInternal() {}
  union {
    AbsoluteTxPosition _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AbsoluteTxPositionDefaultTypeInternal _AbsoluteTxPosition_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Model::Model(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.key_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.value_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ModelDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ModelDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ModelDefaultTypeInternal() {}
  union {
    Model _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ModelDefaultTypeInternal _Model_default_instance_;
}  // namespace v1
}  // namespace wasm
}  // namespace cosmwasm
static ::_pb::Metadata file_level_metadata_cosmwasm_2fwasm_2fv1_2ftypes_2eproto[8];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_cosmwasm_2fwasm_2fv1_2ftypes_2eproto[2];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_cosmwasm_2fwasm_2fv1_2ftypes_2eproto = nullptr;
const ::uint32_t TableStruct_cosmwasm_2fwasm_2fv1_2ftypes_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::AccessTypeParam, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::AccessTypeParam, _impl_.value_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::AccessConfig, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::AccessConfig, _impl_.permission_),
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::AccessConfig, _impl_.addresses_),
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::Params, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::Params, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::Params, _impl_.code_upload_access_),
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::Params, _impl_.instantiate_default_permission_),
    0,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::CodeInfo, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::CodeInfo, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::CodeInfo, _impl_.code_hash_),
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::CodeInfo, _impl_.creator_),
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::CodeInfo, _impl_.instantiate_config_),
    ~0u,
    ~0u,
    0,
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::ContractInfo, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::ContractInfo, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::ContractInfo, _impl_.code_id_),
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::ContractInfo, _impl_.creator_),
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::ContractInfo, _impl_.admin_),
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::ContractInfo, _impl_.label_),
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::ContractInfo, _impl_.created_),
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::ContractInfo, _impl_.ibc_port_id_),
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::ContractInfo, _impl_.extension_),
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    0,
    ~0u,
    1,
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::ContractCodeHistoryEntry, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::ContractCodeHistoryEntry, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::ContractCodeHistoryEntry, _impl_.operation_),
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::ContractCodeHistoryEntry, _impl_.code_id_),
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::ContractCodeHistoryEntry, _impl_.updated_),
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::ContractCodeHistoryEntry, _impl_.msg_),
    ~0u,
    ~0u,
    0,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::AbsoluteTxPosition, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::AbsoluteTxPosition, _impl_.block_height_),
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::AbsoluteTxPosition, _impl_.tx_index_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::Model, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::Model, _impl_.key_),
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::Model, _impl_.value_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::cosmwasm::wasm::v1::AccessTypeParam)},
        { 9, -1, -1, sizeof(::cosmwasm::wasm::v1::AccessConfig)},
        { 19, 29, -1, sizeof(::cosmwasm::wasm::v1::Params)},
        { 31, 42, -1, sizeof(::cosmwasm::wasm::v1::CodeInfo)},
        { 45, 60, -1, sizeof(::cosmwasm::wasm::v1::ContractInfo)},
        { 67, 79, -1, sizeof(::cosmwasm::wasm::v1::ContractCodeHistoryEntry)},
        { 83, -1, -1, sizeof(::cosmwasm::wasm::v1::AbsoluteTxPosition)},
        { 93, -1, -1, sizeof(::cosmwasm::wasm::v1::Model)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::cosmwasm::wasm::v1::_AccessTypeParam_default_instance_._instance,
    &::cosmwasm::wasm::v1::_AccessConfig_default_instance_._instance,
    &::cosmwasm::wasm::v1::_Params_default_instance_._instance,
    &::cosmwasm::wasm::v1::_CodeInfo_default_instance_._instance,
    &::cosmwasm::wasm::v1::_ContractInfo_default_instance_._instance,
    &::cosmwasm::wasm::v1::_ContractCodeHistoryEntry_default_instance_._instance,
    &::cosmwasm::wasm::v1::_AbsoluteTxPosition_default_instance_._instance,
    &::cosmwasm::wasm::v1::_Model_default_instance_._instance,
};
const char descriptor_table_protodef_cosmwasm_2fwasm_2fv1_2ftypes_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\034cosmwasm/wasm/v1/types.proto\022\020cosmwasm"
    ".wasm.v1\032\031cosmos_proto/cosmos.proto\032\024gog"
    "oproto/gogo.proto\032\031google/protobuf/any.p"
    "roto\032\021amino/amino.proto\"]\n\017AccessTypePar"
    "am\022D\n\005value\030\001 \001(\0162\034.cosmwasm.wasm.v1.Acc"
    "essTypeB\020\362\336\037\014yaml:\"value\"R\005value:\004\230\240\037\001\"\243"
    "\001\n\014AccessConfig\022S\n\npermission\030\001 \001(\0162\034.co"
    "smwasm.wasm.v1.AccessTypeB\025\362\336\037\021yaml:\"per"
    "mission\"R\npermission\0222\n\taddresses\030\003 \003(\tB"
    "\024\362\336\037\020yaml:\"addresses\"R\taddresses:\004\230\240\037\001J\004"
    "\010\002\020\003\"\224\002\n\006Params\022t\n\022code_upload_access\030\001 "
    "\001(\0132\036.cosmwasm.wasm.v1.AccessConfigB&\310\336\037"
    "\000\362\336\037\031yaml:\"code_upload_access\"\250\347\260*\001R\020cod"
    "eUploadAccess\022\215\001\n\036instantiate_default_pe"
    "rmission\030\002 \001(\0162\034.cosmwasm.wasm.v1.Access"
    "TypeB)\362\336\037%yaml:\"instantiate_default_perm"
    "ission\"R\034instantiateDefaultPermission:\004\230"
    "\240\037\000\"\247\001\n\010CodeInfo\022\033\n\tcode_hash\030\001 \001(\014R\010cod"
    "eHash\022\030\n\007creator\030\002 \001(\tR\007creator\022X\n\022insta"
    "ntiate_config\030\005 \001(\0132\036.cosmwasm.wasm.v1.A"
    "ccessConfigB\t\310\336\037\000\250\347\260*\001R\021instantiateConfi"
    "gJ\004\010\003\020\004J\004\010\004\020\005\"\316\002\n\014ContractInfo\022#\n\007code_i"
    "d\030\001 \001(\004B\n\342\336\037\006CodeIDR\006codeId\022\030\n\007creator\030\002"
    " \001(\tR\007creator\022\024\n\005admin\030\003 \001(\tR\005admin\022\024\n\005l"
    "abel\030\004 \001(\tR\005label\022>\n\007created\030\005 \001(\0132$.cos"
    "mwasm.wasm.v1.AbsoluteTxPositionR\007create"
    "d\022-\n\013ibc_port_id\030\006 \001(\tB\r\342\336\037\tIBCPortIDR\ti"
    "bcPortId\022^\n\textension\030\007 \001(\0132\024.google.pro"
    "tobuf.AnyB*\312\264-&cosmwasm.wasm.v1.Contract"
    "InfoExtensionR\textension:\004\350\240\037\001\"\373\001\n\030Contr"
    "actCodeHistoryEntry\022P\n\toperation\030\001 \001(\01622"
    ".cosmwasm.wasm.v1.ContractCodeHistoryOpe"
    "rationTypeR\toperation\022#\n\007code_id\030\002 \001(\004B\n"
    "\342\336\037\006CodeIDR\006codeId\022>\n\007updated\030\003 \001(\0132$.co"
    "smwasm.wasm.v1.AbsoluteTxPositionR\007updat"
    "ed\022(\n\003msg\030\004 \001(\014B\026\372\336\037\022RawContractMessageR"
    "\003msg\"R\n\022AbsoluteTxPosition\022!\n\014block_heig"
    "ht\030\001 \001(\004R\013blockHeight\022\031\n\010tx_index\030\002 \001(\004R"
    "\007txIndex\"e\n\005Model\022F\n\003key\030\001 \001(\014B4\372\336\0370gith"
    "ub.com/cometbft/cometbft/libs/bytes.HexB"
    "ytesR\003key\022\024\n\005value\030\002 \001(\014R\005value*\366\001\n\nAcce"
    "ssType\0226\n\027ACCESS_TYPE_UNSPECIFIED\020\000\032\031\212\235 "
    "\025AccessTypeUnspecified\022,\n\022ACCESS_TYPE_NO"
    "BODY\020\001\032\024\212\235 \020AccessTypeNobody\0222\n\025ACCESS_T"
    "YPE_EVERYBODY\020\003\032\027\212\235 \023AccessTypeEverybody"
    "\022>\n\034ACCESS_TYPE_ANY_OF_ADDRESSES\020\004\032\034\212\235 \030"
    "AccessTypeAnyOfAddresses\032\010\210\243\036\000\250\244\036\000\"\004\010\002\020\002"
    "*\246\003\n ContractCodeHistoryOperationType\022e\n"
    "0CONTRACT_CODE_HISTORY_OPERATION_TYPE_UN"
    "SPECIFIED\020\000\032/\212\235 +ContractCodeHistoryOper"
    "ationTypeUnspecified\022W\n)CONTRACT_CODE_HI"
    "STORY_OPERATION_TYPE_INIT\020\001\032(\212\235 $Contrac"
    "tCodeHistoryOperationTypeInit\022]\n,CONTRAC"
    "T_CODE_HISTORY_OPERATION_TYPE_MIGRATE\020\002\032"
    "+\212\235 \'ContractCodeHistoryOperationTypeMig"
    "rate\022]\n,CONTRACT_CODE_HISTORY_OPERATION_"
    "TYPE_GENESIS\020\003\032+\212\235 \'ContractCodeHistoryO"
    "perationTypeGenesis\032\004\210\243\036\000B\264\001\n\024com.cosmwa"
    "sm.wasm.v1B\nTypesProtoP\001Z&github.com/Cos"
    "mWasm/wasmd/x/wasm/types\242\002\003CWX\252\002\020Cosmwas"
    "m.Wasm.V1\312\002\020Cosmwasm\\Wasm\\V1\342\002\034Cosmwasm\\"
    "Wasm\\V1\\GPBMetadata\352\002\022Cosmwasm::Wasm::V1"
    "\310\341\036\000\250\342\036\001b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_cosmwasm_2fwasm_2fv1_2ftypes_2eproto_deps[4] =
    {
        &::descriptor_table_amino_2famino_2eproto,
        &::descriptor_table_cosmos_5fproto_2fcosmos_2eproto,
        &::descriptor_table_gogoproto_2fgogo_2eproto,
        &::descriptor_table_google_2fprotobuf_2fany_2eproto,
};
static ::absl::once_flag descriptor_table_cosmwasm_2fwasm_2fv1_2ftypes_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_cosmwasm_2fwasm_2fv1_2ftypes_2eproto = {
    false,
    false,
    2496,
    descriptor_table_protodef_cosmwasm_2fwasm_2fv1_2ftypes_2eproto,
    "cosmwasm/wasm/v1/types.proto",
    &descriptor_table_cosmwasm_2fwasm_2fv1_2ftypes_2eproto_once,
    descriptor_table_cosmwasm_2fwasm_2fv1_2ftypes_2eproto_deps,
    4,
    8,
    schemas,
    file_default_instances,
    TableStruct_cosmwasm_2fwasm_2fv1_2ftypes_2eproto::offsets,
    file_level_metadata_cosmwasm_2fwasm_2fv1_2ftypes_2eproto,
    file_level_enum_descriptors_cosmwasm_2fwasm_2fv1_2ftypes_2eproto,
    file_level_service_descriptors_cosmwasm_2fwasm_2fv1_2ftypes_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_cosmwasm_2fwasm_2fv1_2ftypes_2eproto_getter() {
  return &descriptor_table_cosmwasm_2fwasm_2fv1_2ftypes_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_cosmwasm_2fwasm_2fv1_2ftypes_2eproto(&descriptor_table_cosmwasm_2fwasm_2fv1_2ftypes_2eproto);
namespace cosmwasm {
namespace wasm {
namespace v1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AccessType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_cosmwasm_2fwasm_2fv1_2ftypes_2eproto);
  return file_level_enum_descriptors_cosmwasm_2fwasm_2fv1_2ftypes_2eproto[0];
}
bool AccessType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ContractCodeHistoryOperationType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_cosmwasm_2fwasm_2fv1_2ftypes_2eproto);
  return file_level_enum_descriptors_cosmwasm_2fwasm_2fv1_2ftypes_2eproto[1];
}
bool ContractCodeHistoryOperationType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}
// ===================================================================

class AccessTypeParam::_Internal {
 public:
};

AccessTypeParam::AccessTypeParam(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmwasm.wasm.v1.AccessTypeParam)
}
AccessTypeParam::AccessTypeParam(const AccessTypeParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cosmwasm.wasm.v1.AccessTypeParam)
}

inline void AccessTypeParam::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.value_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AccessTypeParam::~AccessTypeParam() {
  // @@protoc_insertion_point(destructor:cosmwasm.wasm.v1.AccessTypeParam)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AccessTypeParam::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void AccessTypeParam::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AccessTypeParam::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmwasm.wasm.v1.AccessTypeParam)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.value_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AccessTypeParam::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cosmwasm.wasm.v1.AccessType value = 1 [json_name = "value", (.gogoproto.moretags) = "yaml:\"value\""];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_value(static_cast<::cosmwasm::wasm::v1::AccessType>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* AccessTypeParam::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmwasm.wasm.v1.AccessTypeParam)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .cosmwasm.wasm.v1.AccessType value = 1 [json_name = "value", (.gogoproto.moretags) = "yaml:\"value\""];
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmwasm.wasm.v1.AccessTypeParam)
  return target;
}

::size_t AccessTypeParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmwasm.wasm.v1.AccessTypeParam)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cosmwasm.wasm.v1.AccessType value = 1 [json_name = "value", (.gogoproto.moretags) = "yaml:\"value\""];
  if (this->_internal_value() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AccessTypeParam::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AccessTypeParam::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AccessTypeParam::GetClassData() const { return &_class_data_; }


void AccessTypeParam::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AccessTypeParam*>(&to_msg);
  auto& from = static_cast<const AccessTypeParam&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmwasm.wasm.v1.AccessTypeParam)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_value() != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AccessTypeParam::CopyFrom(const AccessTypeParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmwasm.wasm.v1.AccessTypeParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccessTypeParam::IsInitialized() const {
  return true;
}

void AccessTypeParam::InternalSwap(AccessTypeParam* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.value_, other->_impl_.value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AccessTypeParam::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmwasm_2fwasm_2fv1_2ftypes_2eproto_getter, &descriptor_table_cosmwasm_2fwasm_2fv1_2ftypes_2eproto_once,
      file_level_metadata_cosmwasm_2fwasm_2fv1_2ftypes_2eproto[0]);
}
// ===================================================================

class AccessConfig::_Internal {
 public:
};

AccessConfig::AccessConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmwasm.wasm.v1.AccessConfig)
}
AccessConfig::AccessConfig(const AccessConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AccessConfig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.addresses_){from._impl_.addresses_}
    , decltype(_impl_.permission_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.permission_ = from._impl_.permission_;
  // @@protoc_insertion_point(copy_constructor:cosmwasm.wasm.v1.AccessConfig)
}

inline void AccessConfig::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.addresses_){arena}
    , decltype(_impl_.permission_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AccessConfig::~AccessConfig() {
  // @@protoc_insertion_point(destructor:cosmwasm.wasm.v1.AccessConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AccessConfig::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_addresses()->~RepeatedPtrField();
}

void AccessConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AccessConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmwasm.wasm.v1.AccessConfig)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_addresses()->Clear();
  _impl_.permission_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AccessConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cosmwasm.wasm.v1.AccessType permission = 1 [json_name = "permission", (.gogoproto.moretags) = "yaml:\"permission\""];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_permission(static_cast<::cosmwasm::wasm::v1::AccessType>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string addresses = 3 [json_name = "addresses", (.gogoproto.moretags) = "yaml:\"addresses\""];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_addresses();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "cosmwasm.wasm.v1.AccessConfig.addresses"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* AccessConfig::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmwasm.wasm.v1.AccessConfig)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .cosmwasm.wasm.v1.AccessType permission = 1 [json_name = "permission", (.gogoproto.moretags) = "yaml:\"permission\""];
  if (this->_internal_permission() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_permission(), target);
  }

  // repeated string addresses = 3 [json_name = "addresses", (.gogoproto.moretags) = "yaml:\"addresses\""];
  for (int i = 0, n = this->_internal_addresses_size(); i < n; ++i) {
    const auto& s = this->_internal_addresses(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmwasm.wasm.v1.AccessConfig.addresses");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmwasm.wasm.v1.AccessConfig)
  return target;
}

::size_t AccessConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmwasm.wasm.v1.AccessConfig)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string addresses = 3 [json_name = "addresses", (.gogoproto.moretags) = "yaml:\"addresses\""];
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_addresses().size());
  for (int i = 0, n = _internal_addresses().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_addresses().Get(i));
  }

  // .cosmwasm.wasm.v1.AccessType permission = 1 [json_name = "permission", (.gogoproto.moretags) = "yaml:\"permission\""];
  if (this->_internal_permission() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_permission());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AccessConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AccessConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AccessConfig::GetClassData() const { return &_class_data_; }


void AccessConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AccessConfig*>(&to_msg);
  auto& from = static_cast<const AccessConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmwasm.wasm.v1.AccessConfig)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_addresses()->MergeFrom(from._internal_addresses());
  if (from._internal_permission() != 0) {
    _this->_internal_set_permission(from._internal_permission());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AccessConfig::CopyFrom(const AccessConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmwasm.wasm.v1.AccessConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccessConfig::IsInitialized() const {
  return true;
}

void AccessConfig::InternalSwap(AccessConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_addresses()->InternalSwap(
      other->_internal_mutable_addresses());
  swap(_impl_.permission_, other->_impl_.permission_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AccessConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmwasm_2fwasm_2fv1_2ftypes_2eproto_getter, &descriptor_table_cosmwasm_2fwasm_2fv1_2ftypes_2eproto_once,
      file_level_metadata_cosmwasm_2fwasm_2fv1_2ftypes_2eproto[1]);
}
// ===================================================================

class Params::_Internal {
 public:
  using HasBits = decltype(std::declval<Params>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Params, _impl_._has_bits_);
  static const ::cosmwasm::wasm::v1::AccessConfig& code_upload_access(const Params* msg);
  static void set_has_code_upload_access(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::cosmwasm::wasm::v1::AccessConfig&
Params::_Internal::code_upload_access(const Params* msg) {
  return *msg->_impl_.code_upload_access_;
}
Params::Params(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmwasm.wasm.v1.Params)
}
Params::Params(const Params& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Params* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.code_upload_access_){nullptr}
    , decltype(_impl_.instantiate_default_permission_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.code_upload_access_ = new ::cosmwasm::wasm::v1::AccessConfig(*from._impl_.code_upload_access_);
  }
  _this->_impl_.instantiate_default_permission_ = from._impl_.instantiate_default_permission_;
  // @@protoc_insertion_point(copy_constructor:cosmwasm.wasm.v1.Params)
}

inline void Params::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.code_upload_access_){nullptr}
    , decltype(_impl_.instantiate_default_permission_) { 0 }

  };
}

Params::~Params() {
  // @@protoc_insertion_point(destructor:cosmwasm.wasm.v1.Params)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Params::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.code_upload_access_;
}

void Params::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Params::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmwasm.wasm.v1.Params)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.code_upload_access_ != nullptr);
    _impl_.code_upload_access_->Clear();
  }
  _impl_.instantiate_default_permission_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Params::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cosmwasm.wasm.v1.AccessConfig code_upload_access = 1 [json_name = "codeUploadAccess", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:\"code_upload_access\"", (.amino.dont_omitempty) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_code_upload_access(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .cosmwasm.wasm.v1.AccessType instantiate_default_permission = 2 [json_name = "instantiateDefaultPermission", (.gogoproto.moretags) = "yaml:\"instantiate_default_permission\""];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_instantiate_default_permission(static_cast<::cosmwasm::wasm::v1::AccessType>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Params::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmwasm.wasm.v1.Params)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .cosmwasm.wasm.v1.AccessConfig code_upload_access = 1 [json_name = "codeUploadAccess", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:\"code_upload_access\"", (.amino.dont_omitempty) = true];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::code_upload_access(this),
        _Internal::code_upload_access(this).GetCachedSize(), target, stream);
  }

  // .cosmwasm.wasm.v1.AccessType instantiate_default_permission = 2 [json_name = "instantiateDefaultPermission", (.gogoproto.moretags) = "yaml:\"instantiate_default_permission\""];
  if (this->_internal_instantiate_default_permission() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_instantiate_default_permission(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmwasm.wasm.v1.Params)
  return target;
}

::size_t Params::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmwasm.wasm.v1.Params)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cosmwasm.wasm.v1.AccessConfig code_upload_access = 1 [json_name = "codeUploadAccess", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:\"code_upload_access\"", (.amino.dont_omitempty) = true];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.code_upload_access_);
  }

  // .cosmwasm.wasm.v1.AccessType instantiate_default_permission = 2 [json_name = "instantiateDefaultPermission", (.gogoproto.moretags) = "yaml:\"instantiate_default_permission\""];
  if (this->_internal_instantiate_default_permission() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_instantiate_default_permission());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Params::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Params::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Params::GetClassData() const { return &_class_data_; }


void Params::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Params*>(&to_msg);
  auto& from = static_cast<const Params&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmwasm.wasm.v1.Params)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_code_upload_access()->::cosmwasm::wasm::v1::AccessConfig::MergeFrom(
        from._internal_code_upload_access());
  }
  if (from._internal_instantiate_default_permission() != 0) {
    _this->_internal_set_instantiate_default_permission(from._internal_instantiate_default_permission());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Params::CopyFrom(const Params& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmwasm.wasm.v1.Params)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Params::IsInitialized() const {
  return true;
}

void Params::InternalSwap(Params* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Params, _impl_.instantiate_default_permission_)
      + sizeof(Params::_impl_.instantiate_default_permission_)
      - PROTOBUF_FIELD_OFFSET(Params, _impl_.code_upload_access_)>(
          reinterpret_cast<char*>(&_impl_.code_upload_access_),
          reinterpret_cast<char*>(&other->_impl_.code_upload_access_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Params::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmwasm_2fwasm_2fv1_2ftypes_2eproto_getter, &descriptor_table_cosmwasm_2fwasm_2fv1_2ftypes_2eproto_once,
      file_level_metadata_cosmwasm_2fwasm_2fv1_2ftypes_2eproto[2]);
}
// ===================================================================

class CodeInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CodeInfo>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CodeInfo, _impl_._has_bits_);
  static const ::cosmwasm::wasm::v1::AccessConfig& instantiate_config(const CodeInfo* msg);
  static void set_has_instantiate_config(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::cosmwasm::wasm::v1::AccessConfig&
CodeInfo::_Internal::instantiate_config(const CodeInfo* msg) {
  return *msg->_impl_.instantiate_config_;
}
CodeInfo::CodeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmwasm.wasm.v1.CodeInfo)
}
CodeInfo::CodeInfo(const CodeInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CodeInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.code_hash_) {}

    , decltype(_impl_.creator_) {}

    , decltype(_impl_.instantiate_config_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.code_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.code_hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_code_hash().empty()) {
    _this->_impl_.code_hash_.Set(from._internal_code_hash(), _this->GetArenaForAllocation());
  }
  _impl_.creator_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.creator_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_creator().empty()) {
    _this->_impl_.creator_.Set(from._internal_creator(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.instantiate_config_ = new ::cosmwasm::wasm::v1::AccessConfig(*from._impl_.instantiate_config_);
  }
  // @@protoc_insertion_point(copy_constructor:cosmwasm.wasm.v1.CodeInfo)
}

inline void CodeInfo::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.code_hash_) {}

    , decltype(_impl_.creator_) {}

    , decltype(_impl_.instantiate_config_){nullptr}
  };
  _impl_.code_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.code_hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.creator_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.creator_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CodeInfo::~CodeInfo() {
  // @@protoc_insertion_point(destructor:cosmwasm.wasm.v1.CodeInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CodeInfo::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.code_hash_.Destroy();
  _impl_.creator_.Destroy();
  if (this != internal_default_instance()) delete _impl_.instantiate_config_;
}

void CodeInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CodeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmwasm.wasm.v1.CodeInfo)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.code_hash_.ClearToEmpty();
  _impl_.creator_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.instantiate_config_ != nullptr);
    _impl_.instantiate_config_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CodeInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes code_hash = 1 [json_name = "codeHash"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_code_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string creator = 2 [json_name = "creator"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_creator();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmwasm.wasm.v1.CodeInfo.creator"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .cosmwasm.wasm.v1.AccessConfig instantiate_config = 5 [json_name = "instantiateConfig", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_instantiate_config(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* CodeInfo::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmwasm.wasm.v1.CodeInfo)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes code_hash = 1 [json_name = "codeHash"];
  if (!this->_internal_code_hash().empty()) {
    const std::string& _s = this->_internal_code_hash();
    target = stream->WriteBytesMaybeAliased(1, _s, target);
  }

  // string creator = 2 [json_name = "creator"];
  if (!this->_internal_creator().empty()) {
    const std::string& _s = this->_internal_creator();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmwasm.wasm.v1.CodeInfo.creator");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .cosmwasm.wasm.v1.AccessConfig instantiate_config = 5 [json_name = "instantiateConfig", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::instantiate_config(this),
        _Internal::instantiate_config(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmwasm.wasm.v1.CodeInfo)
  return target;
}

::size_t CodeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmwasm.wasm.v1.CodeInfo)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes code_hash = 1 [json_name = "codeHash"];
  if (!this->_internal_code_hash().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_code_hash());
  }

  // string creator = 2 [json_name = "creator"];
  if (!this->_internal_creator().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_creator());
  }

  // .cosmwasm.wasm.v1.AccessConfig instantiate_config = 5 [json_name = "instantiateConfig", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.instantiate_config_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CodeInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CodeInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CodeInfo::GetClassData() const { return &_class_data_; }


void CodeInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CodeInfo*>(&to_msg);
  auto& from = static_cast<const CodeInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmwasm.wasm.v1.CodeInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_code_hash().empty()) {
    _this->_internal_set_code_hash(from._internal_code_hash());
  }
  if (!from._internal_creator().empty()) {
    _this->_internal_set_creator(from._internal_creator());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_instantiate_config()->::cosmwasm::wasm::v1::AccessConfig::MergeFrom(
        from._internal_instantiate_config());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CodeInfo::CopyFrom(const CodeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmwasm.wasm.v1.CodeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CodeInfo::IsInitialized() const {
  return true;
}

void CodeInfo::InternalSwap(CodeInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.code_hash_, lhs_arena,
                                       &other->_impl_.code_hash_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.creator_, lhs_arena,
                                       &other->_impl_.creator_, rhs_arena);
  swap(_impl_.instantiate_config_, other->_impl_.instantiate_config_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CodeInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmwasm_2fwasm_2fv1_2ftypes_2eproto_getter, &descriptor_table_cosmwasm_2fwasm_2fv1_2ftypes_2eproto_once,
      file_level_metadata_cosmwasm_2fwasm_2fv1_2ftypes_2eproto[3]);
}
// ===================================================================

class ContractInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<ContractInfo>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ContractInfo, _impl_._has_bits_);
  static const ::cosmwasm::wasm::v1::AbsoluteTxPosition& created(const ContractInfo* msg);
  static void set_has_created(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Any& extension(const ContractInfo* msg);
  static void set_has_extension(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::cosmwasm::wasm::v1::AbsoluteTxPosition&
ContractInfo::_Internal::created(const ContractInfo* msg) {
  return *msg->_impl_.created_;
}
const ::PROTOBUF_NAMESPACE_ID::Any&
ContractInfo::_Internal::extension(const ContractInfo* msg) {
  return *msg->_impl_.extension_;
}
void ContractInfo::clear_extension() {
  if (_impl_.extension_ != nullptr) _impl_.extension_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
ContractInfo::ContractInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmwasm.wasm.v1.ContractInfo)
}
ContractInfo::ContractInfo(const ContractInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ContractInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.creator_) {}

    , decltype(_impl_.admin_) {}

    , decltype(_impl_.label_) {}

    , decltype(_impl_.ibc_port_id_) {}

    , decltype(_impl_.created_){nullptr}
    , decltype(_impl_.extension_){nullptr}
    , decltype(_impl_.code_id_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.creator_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.creator_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_creator().empty()) {
    _this->_impl_.creator_.Set(from._internal_creator(), _this->GetArenaForAllocation());
  }
  _impl_.admin_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.admin_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_admin().empty()) {
    _this->_impl_.admin_.Set(from._internal_admin(), _this->GetArenaForAllocation());
  }
  _impl_.label_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.label_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_label().empty()) {
    _this->_impl_.label_.Set(from._internal_label(), _this->GetArenaForAllocation());
  }
  _impl_.ibc_port_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.ibc_port_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ibc_port_id().empty()) {
    _this->_impl_.ibc_port_id_.Set(from._internal_ibc_port_id(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.created_ = new ::cosmwasm::wasm::v1::AbsoluteTxPosition(*from._impl_.created_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.extension_ = new ::PROTOBUF_NAMESPACE_ID::Any(*from._impl_.extension_);
  }
  _this->_impl_.code_id_ = from._impl_.code_id_;
  // @@protoc_insertion_point(copy_constructor:cosmwasm.wasm.v1.ContractInfo)
}

inline void ContractInfo::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.creator_) {}

    , decltype(_impl_.admin_) {}

    , decltype(_impl_.label_) {}

    , decltype(_impl_.ibc_port_id_) {}

    , decltype(_impl_.created_){nullptr}
    , decltype(_impl_.extension_){nullptr}
    , decltype(_impl_.code_id_) { ::uint64_t{0u} }

  };
  _impl_.creator_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.creator_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.admin_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.admin_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.label_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.label_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ibc_port_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.ibc_port_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ContractInfo::~ContractInfo() {
  // @@protoc_insertion_point(destructor:cosmwasm.wasm.v1.ContractInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ContractInfo::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.creator_.Destroy();
  _impl_.admin_.Destroy();
  _impl_.label_.Destroy();
  _impl_.ibc_port_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.created_;
  if (this != internal_default_instance()) delete _impl_.extension_;
}

void ContractInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ContractInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmwasm.wasm.v1.ContractInfo)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.creator_.ClearToEmpty();
  _impl_.admin_.ClearToEmpty();
  _impl_.label_.ClearToEmpty();
  _impl_.ibc_port_id_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.created_ != nullptr);
      _impl_.created_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.extension_ != nullptr);
      _impl_.extension_->Clear();
    }
  }
  _impl_.code_id_ = ::uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContractInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 code_id = 1 [json_name = "codeId", (.gogoproto.customname) = "CodeID"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.code_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string creator = 2 [json_name = "creator"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_creator();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmwasm.wasm.v1.ContractInfo.creator"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string admin = 3 [json_name = "admin"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_admin();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmwasm.wasm.v1.ContractInfo.admin"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string label = 4 [json_name = "label"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_label();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmwasm.wasm.v1.ContractInfo.label"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .cosmwasm.wasm.v1.AbsoluteTxPosition created = 5 [json_name = "created"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_created(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string ibc_port_id = 6 [json_name = "ibcPortId", (.gogoproto.customname) = "IBCPortID"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_ibc_port_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmwasm.wasm.v1.ContractInfo.ibc_port_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Any extension = 7 [json_name = "extension", (.cosmos_proto.accepts_interface) = "cosmwasm.wasm.v1.ContractInfoExtension"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_extension(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ContractInfo::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmwasm.wasm.v1.ContractInfo)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 code_id = 1 [json_name = "codeId", (.gogoproto.customname) = "CodeID"];
  if (this->_internal_code_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_code_id(), target);
  }

  // string creator = 2 [json_name = "creator"];
  if (!this->_internal_creator().empty()) {
    const std::string& _s = this->_internal_creator();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmwasm.wasm.v1.ContractInfo.creator");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string admin = 3 [json_name = "admin"];
  if (!this->_internal_admin().empty()) {
    const std::string& _s = this->_internal_admin();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmwasm.wasm.v1.ContractInfo.admin");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string label = 4 [json_name = "label"];
  if (!this->_internal_label().empty()) {
    const std::string& _s = this->_internal_label();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmwasm.wasm.v1.ContractInfo.label");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .cosmwasm.wasm.v1.AbsoluteTxPosition created = 5 [json_name = "created"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::created(this),
        _Internal::created(this).GetCachedSize(), target, stream);
  }

  // string ibc_port_id = 6 [json_name = "ibcPortId", (.gogoproto.customname) = "IBCPortID"];
  if (!this->_internal_ibc_port_id().empty()) {
    const std::string& _s = this->_internal_ibc_port_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmwasm.wasm.v1.ContractInfo.ibc_port_id");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  // .google.protobuf.Any extension = 7 [json_name = "extension", (.cosmos_proto.accepts_interface) = "cosmwasm.wasm.v1.ContractInfoExtension"];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::extension(this),
        _Internal::extension(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmwasm.wasm.v1.ContractInfo)
  return target;
}

::size_t ContractInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmwasm.wasm.v1.ContractInfo)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string creator = 2 [json_name = "creator"];
  if (!this->_internal_creator().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_creator());
  }

  // string admin = 3 [json_name = "admin"];
  if (!this->_internal_admin().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_admin());
  }

  // string label = 4 [json_name = "label"];
  if (!this->_internal_label().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_label());
  }

  // string ibc_port_id = 6 [json_name = "ibcPortId", (.gogoproto.customname) = "IBCPortID"];
  if (!this->_internal_ibc_port_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_ibc_port_id());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .cosmwasm.wasm.v1.AbsoluteTxPosition created = 5 [json_name = "created"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.created_);
    }

    // .google.protobuf.Any extension = 7 [json_name = "extension", (.cosmos_proto.accepts_interface) = "cosmwasm.wasm.v1.ContractInfoExtension"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.extension_);
    }

  }
  // uint64 code_id = 1 [json_name = "codeId", (.gogoproto.customname) = "CodeID"];
  if (this->_internal_code_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_code_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ContractInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ContractInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ContractInfo::GetClassData() const { return &_class_data_; }


void ContractInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ContractInfo*>(&to_msg);
  auto& from = static_cast<const ContractInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmwasm.wasm.v1.ContractInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_creator().empty()) {
    _this->_internal_set_creator(from._internal_creator());
  }
  if (!from._internal_admin().empty()) {
    _this->_internal_set_admin(from._internal_admin());
  }
  if (!from._internal_label().empty()) {
    _this->_internal_set_label(from._internal_label());
  }
  if (!from._internal_ibc_port_id().empty()) {
    _this->_internal_set_ibc_port_id(from._internal_ibc_port_id());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_created()->::cosmwasm::wasm::v1::AbsoluteTxPosition::MergeFrom(
          from._internal_created());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_extension()->::PROTOBUF_NAMESPACE_ID::Any::MergeFrom(
          from._internal_extension());
    }
  }
  if (from._internal_code_id() != 0) {
    _this->_internal_set_code_id(from._internal_code_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ContractInfo::CopyFrom(const ContractInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmwasm.wasm.v1.ContractInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContractInfo::IsInitialized() const {
  return true;
}

void ContractInfo::InternalSwap(ContractInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.creator_, lhs_arena,
                                       &other->_impl_.creator_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.admin_, lhs_arena,
                                       &other->_impl_.admin_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.label_, lhs_arena,
                                       &other->_impl_.label_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.ibc_port_id_, lhs_arena,
                                       &other->_impl_.ibc_port_id_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ContractInfo, _impl_.code_id_)
      + sizeof(ContractInfo::_impl_.code_id_)
      - PROTOBUF_FIELD_OFFSET(ContractInfo, _impl_.created_)>(
          reinterpret_cast<char*>(&_impl_.created_),
          reinterpret_cast<char*>(&other->_impl_.created_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ContractInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmwasm_2fwasm_2fv1_2ftypes_2eproto_getter, &descriptor_table_cosmwasm_2fwasm_2fv1_2ftypes_2eproto_once,
      file_level_metadata_cosmwasm_2fwasm_2fv1_2ftypes_2eproto[4]);
}
// ===================================================================

class ContractCodeHistoryEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<ContractCodeHistoryEntry>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ContractCodeHistoryEntry, _impl_._has_bits_);
  static const ::cosmwasm::wasm::v1::AbsoluteTxPosition& updated(const ContractCodeHistoryEntry* msg);
  static void set_has_updated(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::cosmwasm::wasm::v1::AbsoluteTxPosition&
ContractCodeHistoryEntry::_Internal::updated(const ContractCodeHistoryEntry* msg) {
  return *msg->_impl_.updated_;
}
ContractCodeHistoryEntry::ContractCodeHistoryEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmwasm.wasm.v1.ContractCodeHistoryEntry)
}
ContractCodeHistoryEntry::ContractCodeHistoryEntry(const ContractCodeHistoryEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ContractCodeHistoryEntry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.msg_) {}

    , decltype(_impl_.updated_){nullptr}
    , decltype(_impl_.code_id_) {}

    , decltype(_impl_.operation_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.msg_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_msg().empty()) {
    _this->_impl_.msg_.Set(from._internal_msg(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.updated_ = new ::cosmwasm::wasm::v1::AbsoluteTxPosition(*from._impl_.updated_);
  }
  ::memcpy(&_impl_.code_id_, &from._impl_.code_id_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.operation_) -
    reinterpret_cast<char*>(&_impl_.code_id_)) + sizeof(_impl_.operation_));
  // @@protoc_insertion_point(copy_constructor:cosmwasm.wasm.v1.ContractCodeHistoryEntry)
}

inline void ContractCodeHistoryEntry::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.msg_) {}

    , decltype(_impl_.updated_){nullptr}
    , decltype(_impl_.code_id_) { ::uint64_t{0u} }

    , decltype(_impl_.operation_) { 0 }

  };
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.msg_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ContractCodeHistoryEntry::~ContractCodeHistoryEntry() {
  // @@protoc_insertion_point(destructor:cosmwasm.wasm.v1.ContractCodeHistoryEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ContractCodeHistoryEntry::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.msg_.Destroy();
  if (this != internal_default_instance()) delete _impl_.updated_;
}

void ContractCodeHistoryEntry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ContractCodeHistoryEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmwasm.wasm.v1.ContractCodeHistoryEntry)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.msg_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.updated_ != nullptr);
    _impl_.updated_->Clear();
  }
  ::memset(&_impl_.code_id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.operation_) -
      reinterpret_cast<char*>(&_impl_.code_id_)) + sizeof(_impl_.operation_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContractCodeHistoryEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cosmwasm.wasm.v1.ContractCodeHistoryOperationType operation = 1 [json_name = "operation"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_operation(static_cast<::cosmwasm::wasm::v1::ContractCodeHistoryOperationType>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 code_id = 2 [json_name = "codeId", (.gogoproto.customname) = "CodeID"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.code_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .cosmwasm.wasm.v1.AbsoluteTxPosition updated = 3 [json_name = "updated"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_updated(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes msg = 4 [json_name = "msg", (.gogoproto.casttype) = "RawContractMessage"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_msg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ContractCodeHistoryEntry::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmwasm.wasm.v1.ContractCodeHistoryEntry)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .cosmwasm.wasm.v1.ContractCodeHistoryOperationType operation = 1 [json_name = "operation"];
  if (this->_internal_operation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_operation(), target);
  }

  // uint64 code_id = 2 [json_name = "codeId", (.gogoproto.customname) = "CodeID"];
  if (this->_internal_code_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_code_id(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .cosmwasm.wasm.v1.AbsoluteTxPosition updated = 3 [json_name = "updated"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::updated(this),
        _Internal::updated(this).GetCachedSize(), target, stream);
  }

  // bytes msg = 4 [json_name = "msg", (.gogoproto.casttype) = "RawContractMessage"];
  if (!this->_internal_msg().empty()) {
    const std::string& _s = this->_internal_msg();
    target = stream->WriteBytesMaybeAliased(4, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmwasm.wasm.v1.ContractCodeHistoryEntry)
  return target;
}

::size_t ContractCodeHistoryEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmwasm.wasm.v1.ContractCodeHistoryEntry)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes msg = 4 [json_name = "msg", (.gogoproto.casttype) = "RawContractMessage"];
  if (!this->_internal_msg().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_msg());
  }

  // .cosmwasm.wasm.v1.AbsoluteTxPosition updated = 3 [json_name = "updated"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.updated_);
  }

  // uint64 code_id = 2 [json_name = "codeId", (.gogoproto.customname) = "CodeID"];
  if (this->_internal_code_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_code_id());
  }

  // .cosmwasm.wasm.v1.ContractCodeHistoryOperationType operation = 1 [json_name = "operation"];
  if (this->_internal_operation() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_operation());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ContractCodeHistoryEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ContractCodeHistoryEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ContractCodeHistoryEntry::GetClassData() const { return &_class_data_; }


void ContractCodeHistoryEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ContractCodeHistoryEntry*>(&to_msg);
  auto& from = static_cast<const ContractCodeHistoryEntry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmwasm.wasm.v1.ContractCodeHistoryEntry)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_msg().empty()) {
    _this->_internal_set_msg(from._internal_msg());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_updated()->::cosmwasm::wasm::v1::AbsoluteTxPosition::MergeFrom(
        from._internal_updated());
  }
  if (from._internal_code_id() != 0) {
    _this->_internal_set_code_id(from._internal_code_id());
  }
  if (from._internal_operation() != 0) {
    _this->_internal_set_operation(from._internal_operation());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ContractCodeHistoryEntry::CopyFrom(const ContractCodeHistoryEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmwasm.wasm.v1.ContractCodeHistoryEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContractCodeHistoryEntry::IsInitialized() const {
  return true;
}

void ContractCodeHistoryEntry::InternalSwap(ContractCodeHistoryEntry* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.msg_, lhs_arena,
                                       &other->_impl_.msg_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ContractCodeHistoryEntry, _impl_.operation_)
      + sizeof(ContractCodeHistoryEntry::_impl_.operation_)
      - PROTOBUF_FIELD_OFFSET(ContractCodeHistoryEntry, _impl_.updated_)>(
          reinterpret_cast<char*>(&_impl_.updated_),
          reinterpret_cast<char*>(&other->_impl_.updated_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ContractCodeHistoryEntry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmwasm_2fwasm_2fv1_2ftypes_2eproto_getter, &descriptor_table_cosmwasm_2fwasm_2fv1_2ftypes_2eproto_once,
      file_level_metadata_cosmwasm_2fwasm_2fv1_2ftypes_2eproto[5]);
}
// ===================================================================

class AbsoluteTxPosition::_Internal {
 public:
};

AbsoluteTxPosition::AbsoluteTxPosition(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmwasm.wasm.v1.AbsoluteTxPosition)
}
AbsoluteTxPosition::AbsoluteTxPosition(const AbsoluteTxPosition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cosmwasm.wasm.v1.AbsoluteTxPosition)
}

inline void AbsoluteTxPosition::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.block_height_) { ::uint64_t{0u} }

    , decltype(_impl_.tx_index_) { ::uint64_t{0u} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AbsoluteTxPosition::~AbsoluteTxPosition() {
  // @@protoc_insertion_point(destructor:cosmwasm.wasm.v1.AbsoluteTxPosition)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AbsoluteTxPosition::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void AbsoluteTxPosition::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AbsoluteTxPosition::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmwasm.wasm.v1.AbsoluteTxPosition)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.block_height_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.tx_index_) -
      reinterpret_cast<char*>(&_impl_.block_height_)) + sizeof(_impl_.tx_index_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AbsoluteTxPosition::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 block_height = 1 [json_name = "blockHeight"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.block_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 tx_index = 2 [json_name = "txIndex"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.tx_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* AbsoluteTxPosition::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmwasm.wasm.v1.AbsoluteTxPosition)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 block_height = 1 [json_name = "blockHeight"];
  if (this->_internal_block_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_block_height(), target);
  }

  // uint64 tx_index = 2 [json_name = "txIndex"];
  if (this->_internal_tx_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_tx_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmwasm.wasm.v1.AbsoluteTxPosition)
  return target;
}

::size_t AbsoluteTxPosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmwasm.wasm.v1.AbsoluteTxPosition)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 block_height = 1 [json_name = "blockHeight"];
  if (this->_internal_block_height() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_block_height());
  }

  // uint64 tx_index = 2 [json_name = "txIndex"];
  if (this->_internal_tx_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_tx_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AbsoluteTxPosition::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AbsoluteTxPosition::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AbsoluteTxPosition::GetClassData() const { return &_class_data_; }


void AbsoluteTxPosition::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AbsoluteTxPosition*>(&to_msg);
  auto& from = static_cast<const AbsoluteTxPosition&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmwasm.wasm.v1.AbsoluteTxPosition)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_block_height() != 0) {
    _this->_internal_set_block_height(from._internal_block_height());
  }
  if (from._internal_tx_index() != 0) {
    _this->_internal_set_tx_index(from._internal_tx_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AbsoluteTxPosition::CopyFrom(const AbsoluteTxPosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmwasm.wasm.v1.AbsoluteTxPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AbsoluteTxPosition::IsInitialized() const {
  return true;
}

void AbsoluteTxPosition::InternalSwap(AbsoluteTxPosition* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AbsoluteTxPosition, _impl_.tx_index_)
      + sizeof(AbsoluteTxPosition::_impl_.tx_index_)
      - PROTOBUF_FIELD_OFFSET(AbsoluteTxPosition, _impl_.block_height_)>(
          reinterpret_cast<char*>(&_impl_.block_height_),
          reinterpret_cast<char*>(&other->_impl_.block_height_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AbsoluteTxPosition::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmwasm_2fwasm_2fv1_2ftypes_2eproto_getter, &descriptor_table_cosmwasm_2fwasm_2fv1_2ftypes_2eproto_once,
      file_level_metadata_cosmwasm_2fwasm_2fv1_2ftypes_2eproto[6]);
}
// ===================================================================

class Model::_Internal {
 public:
};

Model::Model(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmwasm.wasm.v1.Model)
}
Model::Model(const Model& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Model* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.key_) {}

    , decltype(_impl_.value_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.key_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    _this->_impl_.key_.Set(from._internal_key(), _this->GetArenaForAllocation());
  }
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.value_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_value().empty()) {
    _this->_impl_.value_.Set(from._internal_value(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:cosmwasm.wasm.v1.Model)
}

inline void Model::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.key_) {}

    , decltype(_impl_.value_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.key_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.value_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Model::~Model() {
  // @@protoc_insertion_point(destructor:cosmwasm.wasm.v1.Model)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Model::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.key_.Destroy();
  _impl_.value_.Destroy();
}

void Model::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Model::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmwasm.wasm.v1.Model)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.key_.ClearToEmpty();
  _impl_.value_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Model::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes key = 1 [json_name = "key", (.gogoproto.casttype) = "github.com/cometbft/cometbft/libs/bytes.HexBytes"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes value = 2 [json_name = "value"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Model::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmwasm.wasm.v1.Model)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes key = 1 [json_name = "key", (.gogoproto.casttype) = "github.com/cometbft/cometbft/libs/bytes.HexBytes"];
  if (!this->_internal_key().empty()) {
    const std::string& _s = this->_internal_key();
    target = stream->WriteBytesMaybeAliased(1, _s, target);
  }

  // bytes value = 2 [json_name = "value"];
  if (!this->_internal_value().empty()) {
    const std::string& _s = this->_internal_value();
    target = stream->WriteBytesMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmwasm.wasm.v1.Model)
  return target;
}

::size_t Model::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmwasm.wasm.v1.Model)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes key = 1 [json_name = "key", (.gogoproto.casttype) = "github.com/cometbft/cometbft/libs/bytes.HexBytes"];
  if (!this->_internal_key().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_key());
  }

  // bytes value = 2 [json_name = "value"];
  if (!this->_internal_value().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Model::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Model::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Model::GetClassData() const { return &_class_data_; }


void Model::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Model*>(&to_msg);
  auto& from = static_cast<const Model&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmwasm.wasm.v1.Model)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_key().empty()) {
    _this->_internal_set_key(from._internal_key());
  }
  if (!from._internal_value().empty()) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Model::CopyFrom(const Model& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmwasm.wasm.v1.Model)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Model::IsInitialized() const {
  return true;
}

void Model::InternalSwap(Model* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.key_, lhs_arena,
                                       &other->_impl_.key_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.value_, lhs_arena,
                                       &other->_impl_.value_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata Model::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmwasm_2fwasm_2fv1_2ftypes_2eproto_getter, &descriptor_table_cosmwasm_2fwasm_2fv1_2ftypes_2eproto_once,
      file_level_metadata_cosmwasm_2fwasm_2fv1_2ftypes_2eproto[7]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace wasm
}  // namespace cosmwasm
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cosmwasm::wasm::v1::AccessTypeParam*
Arena::CreateMaybeMessage< ::cosmwasm::wasm::v1::AccessTypeParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmwasm::wasm::v1::AccessTypeParam >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmwasm::wasm::v1::AccessConfig*
Arena::CreateMaybeMessage< ::cosmwasm::wasm::v1::AccessConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmwasm::wasm::v1::AccessConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmwasm::wasm::v1::Params*
Arena::CreateMaybeMessage< ::cosmwasm::wasm::v1::Params >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmwasm::wasm::v1::Params >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmwasm::wasm::v1::CodeInfo*
Arena::CreateMaybeMessage< ::cosmwasm::wasm::v1::CodeInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmwasm::wasm::v1::CodeInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmwasm::wasm::v1::ContractInfo*
Arena::CreateMaybeMessage< ::cosmwasm::wasm::v1::ContractInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmwasm::wasm::v1::ContractInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmwasm::wasm::v1::ContractCodeHistoryEntry*
Arena::CreateMaybeMessage< ::cosmwasm::wasm::v1::ContractCodeHistoryEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmwasm::wasm::v1::ContractCodeHistoryEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmwasm::wasm::v1::AbsoluteTxPosition*
Arena::CreateMaybeMessage< ::cosmwasm::wasm::v1::AbsoluteTxPosition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmwasm::wasm::v1::AbsoluteTxPosition >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmwasm::wasm::v1::Model*
Arena::CreateMaybeMessage< ::cosmwasm::wasm::v1::Model >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmwasm::wasm::v1::Model >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

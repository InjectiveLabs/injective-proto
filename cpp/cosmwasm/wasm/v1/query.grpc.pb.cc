// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: cosmwasm/wasm/v1/query.proto

#include "cosmwasm/wasm/v1/query.pb.h"
#include "cosmwasm/wasm/v1/query.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace cosmwasm {
namespace wasm {
namespace v1 {

static const char* Query_method_names[] = {
  "/cosmwasm.wasm.v1.Query/ContractInfo",
  "/cosmwasm.wasm.v1.Query/ContractHistory",
  "/cosmwasm.wasm.v1.Query/ContractsByCode",
  "/cosmwasm.wasm.v1.Query/AllContractState",
  "/cosmwasm.wasm.v1.Query/RawContractState",
  "/cosmwasm.wasm.v1.Query/SmartContractState",
  "/cosmwasm.wasm.v1.Query/Code",
  "/cosmwasm.wasm.v1.Query/Codes",
  "/cosmwasm.wasm.v1.Query/PinnedCodes",
  "/cosmwasm.wasm.v1.Query/Params",
  "/cosmwasm.wasm.v1.Query/ContractsByCreator",
};

std::unique_ptr< Query::Stub> Query::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Query::Stub> stub(new Query::Stub(channel, options));
  return stub;
}

Query::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_ContractInfo_(Query_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ContractHistory_(Query_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ContractsByCode_(Query_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AllContractState_(Query_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RawContractState_(Query_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SmartContractState_(Query_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Code_(Query_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Codes_(Query_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PinnedCodes_(Query_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Params_(Query_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ContractsByCreator_(Query_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Query::Stub::ContractInfo(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryContractInfoRequest& request, ::cosmwasm::wasm::v1::QueryContractInfoResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmwasm::wasm::v1::QueryContractInfoRequest, ::cosmwasm::wasm::v1::QueryContractInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ContractInfo_, context, request, response);
}

void Query::Stub::async::ContractInfo(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryContractInfoRequest* request, ::cosmwasm::wasm::v1::QueryContractInfoResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmwasm::wasm::v1::QueryContractInfoRequest, ::cosmwasm::wasm::v1::QueryContractInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ContractInfo_, context, request, response, std::move(f));
}

void Query::Stub::async::ContractInfo(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryContractInfoRequest* request, ::cosmwasm::wasm::v1::QueryContractInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ContractInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmwasm::wasm::v1::QueryContractInfoResponse>* Query::Stub::PrepareAsyncContractInfoRaw(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryContractInfoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmwasm::wasm::v1::QueryContractInfoResponse, ::cosmwasm::wasm::v1::QueryContractInfoRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ContractInfo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmwasm::wasm::v1::QueryContractInfoResponse>* Query::Stub::AsyncContractInfoRaw(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryContractInfoRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncContractInfoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::ContractHistory(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryContractHistoryRequest& request, ::cosmwasm::wasm::v1::QueryContractHistoryResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmwasm::wasm::v1::QueryContractHistoryRequest, ::cosmwasm::wasm::v1::QueryContractHistoryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ContractHistory_, context, request, response);
}

void Query::Stub::async::ContractHistory(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryContractHistoryRequest* request, ::cosmwasm::wasm::v1::QueryContractHistoryResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmwasm::wasm::v1::QueryContractHistoryRequest, ::cosmwasm::wasm::v1::QueryContractHistoryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ContractHistory_, context, request, response, std::move(f));
}

void Query::Stub::async::ContractHistory(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryContractHistoryRequest* request, ::cosmwasm::wasm::v1::QueryContractHistoryResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ContractHistory_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmwasm::wasm::v1::QueryContractHistoryResponse>* Query::Stub::PrepareAsyncContractHistoryRaw(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryContractHistoryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmwasm::wasm::v1::QueryContractHistoryResponse, ::cosmwasm::wasm::v1::QueryContractHistoryRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ContractHistory_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmwasm::wasm::v1::QueryContractHistoryResponse>* Query::Stub::AsyncContractHistoryRaw(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryContractHistoryRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncContractHistoryRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::ContractsByCode(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryContractsByCodeRequest& request, ::cosmwasm::wasm::v1::QueryContractsByCodeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmwasm::wasm::v1::QueryContractsByCodeRequest, ::cosmwasm::wasm::v1::QueryContractsByCodeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ContractsByCode_, context, request, response);
}

void Query::Stub::async::ContractsByCode(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryContractsByCodeRequest* request, ::cosmwasm::wasm::v1::QueryContractsByCodeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmwasm::wasm::v1::QueryContractsByCodeRequest, ::cosmwasm::wasm::v1::QueryContractsByCodeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ContractsByCode_, context, request, response, std::move(f));
}

void Query::Stub::async::ContractsByCode(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryContractsByCodeRequest* request, ::cosmwasm::wasm::v1::QueryContractsByCodeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ContractsByCode_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmwasm::wasm::v1::QueryContractsByCodeResponse>* Query::Stub::PrepareAsyncContractsByCodeRaw(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryContractsByCodeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmwasm::wasm::v1::QueryContractsByCodeResponse, ::cosmwasm::wasm::v1::QueryContractsByCodeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ContractsByCode_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmwasm::wasm::v1::QueryContractsByCodeResponse>* Query::Stub::AsyncContractsByCodeRaw(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryContractsByCodeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncContractsByCodeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::AllContractState(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryAllContractStateRequest& request, ::cosmwasm::wasm::v1::QueryAllContractStateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmwasm::wasm::v1::QueryAllContractStateRequest, ::cosmwasm::wasm::v1::QueryAllContractStateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AllContractState_, context, request, response);
}

void Query::Stub::async::AllContractState(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryAllContractStateRequest* request, ::cosmwasm::wasm::v1::QueryAllContractStateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmwasm::wasm::v1::QueryAllContractStateRequest, ::cosmwasm::wasm::v1::QueryAllContractStateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AllContractState_, context, request, response, std::move(f));
}

void Query::Stub::async::AllContractState(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryAllContractStateRequest* request, ::cosmwasm::wasm::v1::QueryAllContractStateResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AllContractState_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmwasm::wasm::v1::QueryAllContractStateResponse>* Query::Stub::PrepareAsyncAllContractStateRaw(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryAllContractStateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmwasm::wasm::v1::QueryAllContractStateResponse, ::cosmwasm::wasm::v1::QueryAllContractStateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AllContractState_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmwasm::wasm::v1::QueryAllContractStateResponse>* Query::Stub::AsyncAllContractStateRaw(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryAllContractStateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAllContractStateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::RawContractState(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryRawContractStateRequest& request, ::cosmwasm::wasm::v1::QueryRawContractStateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmwasm::wasm::v1::QueryRawContractStateRequest, ::cosmwasm::wasm::v1::QueryRawContractStateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RawContractState_, context, request, response);
}

void Query::Stub::async::RawContractState(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryRawContractStateRequest* request, ::cosmwasm::wasm::v1::QueryRawContractStateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmwasm::wasm::v1::QueryRawContractStateRequest, ::cosmwasm::wasm::v1::QueryRawContractStateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RawContractState_, context, request, response, std::move(f));
}

void Query::Stub::async::RawContractState(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryRawContractStateRequest* request, ::cosmwasm::wasm::v1::QueryRawContractStateResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RawContractState_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmwasm::wasm::v1::QueryRawContractStateResponse>* Query::Stub::PrepareAsyncRawContractStateRaw(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryRawContractStateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmwasm::wasm::v1::QueryRawContractStateResponse, ::cosmwasm::wasm::v1::QueryRawContractStateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RawContractState_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmwasm::wasm::v1::QueryRawContractStateResponse>* Query::Stub::AsyncRawContractStateRaw(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryRawContractStateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRawContractStateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::SmartContractState(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QuerySmartContractStateRequest& request, ::cosmwasm::wasm::v1::QuerySmartContractStateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmwasm::wasm::v1::QuerySmartContractStateRequest, ::cosmwasm::wasm::v1::QuerySmartContractStateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SmartContractState_, context, request, response);
}

void Query::Stub::async::SmartContractState(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QuerySmartContractStateRequest* request, ::cosmwasm::wasm::v1::QuerySmartContractStateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmwasm::wasm::v1::QuerySmartContractStateRequest, ::cosmwasm::wasm::v1::QuerySmartContractStateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SmartContractState_, context, request, response, std::move(f));
}

void Query::Stub::async::SmartContractState(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QuerySmartContractStateRequest* request, ::cosmwasm::wasm::v1::QuerySmartContractStateResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SmartContractState_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmwasm::wasm::v1::QuerySmartContractStateResponse>* Query::Stub::PrepareAsyncSmartContractStateRaw(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QuerySmartContractStateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmwasm::wasm::v1::QuerySmartContractStateResponse, ::cosmwasm::wasm::v1::QuerySmartContractStateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SmartContractState_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmwasm::wasm::v1::QuerySmartContractStateResponse>* Query::Stub::AsyncSmartContractStateRaw(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QuerySmartContractStateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSmartContractStateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::Code(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryCodeRequest& request, ::cosmwasm::wasm::v1::QueryCodeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmwasm::wasm::v1::QueryCodeRequest, ::cosmwasm::wasm::v1::QueryCodeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Code_, context, request, response);
}

void Query::Stub::async::Code(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryCodeRequest* request, ::cosmwasm::wasm::v1::QueryCodeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmwasm::wasm::v1::QueryCodeRequest, ::cosmwasm::wasm::v1::QueryCodeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Code_, context, request, response, std::move(f));
}

void Query::Stub::async::Code(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryCodeRequest* request, ::cosmwasm::wasm::v1::QueryCodeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Code_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmwasm::wasm::v1::QueryCodeResponse>* Query::Stub::PrepareAsyncCodeRaw(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryCodeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmwasm::wasm::v1::QueryCodeResponse, ::cosmwasm::wasm::v1::QueryCodeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Code_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmwasm::wasm::v1::QueryCodeResponse>* Query::Stub::AsyncCodeRaw(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryCodeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCodeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::Codes(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryCodesRequest& request, ::cosmwasm::wasm::v1::QueryCodesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmwasm::wasm::v1::QueryCodesRequest, ::cosmwasm::wasm::v1::QueryCodesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Codes_, context, request, response);
}

void Query::Stub::async::Codes(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryCodesRequest* request, ::cosmwasm::wasm::v1::QueryCodesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmwasm::wasm::v1::QueryCodesRequest, ::cosmwasm::wasm::v1::QueryCodesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Codes_, context, request, response, std::move(f));
}

void Query::Stub::async::Codes(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryCodesRequest* request, ::cosmwasm::wasm::v1::QueryCodesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Codes_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmwasm::wasm::v1::QueryCodesResponse>* Query::Stub::PrepareAsyncCodesRaw(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryCodesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmwasm::wasm::v1::QueryCodesResponse, ::cosmwasm::wasm::v1::QueryCodesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Codes_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmwasm::wasm::v1::QueryCodesResponse>* Query::Stub::AsyncCodesRaw(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryCodesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCodesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::PinnedCodes(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryPinnedCodesRequest& request, ::cosmwasm::wasm::v1::QueryPinnedCodesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmwasm::wasm::v1::QueryPinnedCodesRequest, ::cosmwasm::wasm::v1::QueryPinnedCodesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PinnedCodes_, context, request, response);
}

void Query::Stub::async::PinnedCodes(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryPinnedCodesRequest* request, ::cosmwasm::wasm::v1::QueryPinnedCodesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmwasm::wasm::v1::QueryPinnedCodesRequest, ::cosmwasm::wasm::v1::QueryPinnedCodesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PinnedCodes_, context, request, response, std::move(f));
}

void Query::Stub::async::PinnedCodes(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryPinnedCodesRequest* request, ::cosmwasm::wasm::v1::QueryPinnedCodesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PinnedCodes_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmwasm::wasm::v1::QueryPinnedCodesResponse>* Query::Stub::PrepareAsyncPinnedCodesRaw(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryPinnedCodesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmwasm::wasm::v1::QueryPinnedCodesResponse, ::cosmwasm::wasm::v1::QueryPinnedCodesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PinnedCodes_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmwasm::wasm::v1::QueryPinnedCodesResponse>* Query::Stub::AsyncPinnedCodesRaw(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryPinnedCodesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPinnedCodesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::Params(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryParamsRequest& request, ::cosmwasm::wasm::v1::QueryParamsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmwasm::wasm::v1::QueryParamsRequest, ::cosmwasm::wasm::v1::QueryParamsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Params_, context, request, response);
}

void Query::Stub::async::Params(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryParamsRequest* request, ::cosmwasm::wasm::v1::QueryParamsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmwasm::wasm::v1::QueryParamsRequest, ::cosmwasm::wasm::v1::QueryParamsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Params_, context, request, response, std::move(f));
}

void Query::Stub::async::Params(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryParamsRequest* request, ::cosmwasm::wasm::v1::QueryParamsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Params_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmwasm::wasm::v1::QueryParamsResponse>* Query::Stub::PrepareAsyncParamsRaw(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryParamsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmwasm::wasm::v1::QueryParamsResponse, ::cosmwasm::wasm::v1::QueryParamsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Params_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmwasm::wasm::v1::QueryParamsResponse>* Query::Stub::AsyncParamsRaw(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryParamsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncParamsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::ContractsByCreator(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryContractsByCreatorRequest& request, ::cosmwasm::wasm::v1::QueryContractsByCreatorResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmwasm::wasm::v1::QueryContractsByCreatorRequest, ::cosmwasm::wasm::v1::QueryContractsByCreatorResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ContractsByCreator_, context, request, response);
}

void Query::Stub::async::ContractsByCreator(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryContractsByCreatorRequest* request, ::cosmwasm::wasm::v1::QueryContractsByCreatorResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmwasm::wasm::v1::QueryContractsByCreatorRequest, ::cosmwasm::wasm::v1::QueryContractsByCreatorResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ContractsByCreator_, context, request, response, std::move(f));
}

void Query::Stub::async::ContractsByCreator(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryContractsByCreatorRequest* request, ::cosmwasm::wasm::v1::QueryContractsByCreatorResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ContractsByCreator_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmwasm::wasm::v1::QueryContractsByCreatorResponse>* Query::Stub::PrepareAsyncContractsByCreatorRaw(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryContractsByCreatorRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmwasm::wasm::v1::QueryContractsByCreatorResponse, ::cosmwasm::wasm::v1::QueryContractsByCreatorRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ContractsByCreator_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmwasm::wasm::v1::QueryContractsByCreatorResponse>* Query::Stub::AsyncContractsByCreatorRaw(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryContractsByCreatorRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncContractsByCreatorRaw(context, request, cq);
  result->StartCall();
  return result;
}

Query::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::cosmwasm::wasm::v1::QueryContractInfoRequest, ::cosmwasm::wasm::v1::QueryContractInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmwasm::wasm::v1::QueryContractInfoRequest* req,
             ::cosmwasm::wasm::v1::QueryContractInfoResponse* resp) {
               return service->ContractInfo(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::cosmwasm::wasm::v1::QueryContractHistoryRequest, ::cosmwasm::wasm::v1::QueryContractHistoryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmwasm::wasm::v1::QueryContractHistoryRequest* req,
             ::cosmwasm::wasm::v1::QueryContractHistoryResponse* resp) {
               return service->ContractHistory(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::cosmwasm::wasm::v1::QueryContractsByCodeRequest, ::cosmwasm::wasm::v1::QueryContractsByCodeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmwasm::wasm::v1::QueryContractsByCodeRequest* req,
             ::cosmwasm::wasm::v1::QueryContractsByCodeResponse* resp) {
               return service->ContractsByCode(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::cosmwasm::wasm::v1::QueryAllContractStateRequest, ::cosmwasm::wasm::v1::QueryAllContractStateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmwasm::wasm::v1::QueryAllContractStateRequest* req,
             ::cosmwasm::wasm::v1::QueryAllContractStateResponse* resp) {
               return service->AllContractState(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::cosmwasm::wasm::v1::QueryRawContractStateRequest, ::cosmwasm::wasm::v1::QueryRawContractStateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmwasm::wasm::v1::QueryRawContractStateRequest* req,
             ::cosmwasm::wasm::v1::QueryRawContractStateResponse* resp) {
               return service->RawContractState(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::cosmwasm::wasm::v1::QuerySmartContractStateRequest, ::cosmwasm::wasm::v1::QuerySmartContractStateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmwasm::wasm::v1::QuerySmartContractStateRequest* req,
             ::cosmwasm::wasm::v1::QuerySmartContractStateResponse* resp) {
               return service->SmartContractState(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::cosmwasm::wasm::v1::QueryCodeRequest, ::cosmwasm::wasm::v1::QueryCodeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmwasm::wasm::v1::QueryCodeRequest* req,
             ::cosmwasm::wasm::v1::QueryCodeResponse* resp) {
               return service->Code(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::cosmwasm::wasm::v1::QueryCodesRequest, ::cosmwasm::wasm::v1::QueryCodesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmwasm::wasm::v1::QueryCodesRequest* req,
             ::cosmwasm::wasm::v1::QueryCodesResponse* resp) {
               return service->Codes(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::cosmwasm::wasm::v1::QueryPinnedCodesRequest, ::cosmwasm::wasm::v1::QueryPinnedCodesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmwasm::wasm::v1::QueryPinnedCodesRequest* req,
             ::cosmwasm::wasm::v1::QueryPinnedCodesResponse* resp) {
               return service->PinnedCodes(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::cosmwasm::wasm::v1::QueryParamsRequest, ::cosmwasm::wasm::v1::QueryParamsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmwasm::wasm::v1::QueryParamsRequest* req,
             ::cosmwasm::wasm::v1::QueryParamsResponse* resp) {
               return service->Params(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::cosmwasm::wasm::v1::QueryContractsByCreatorRequest, ::cosmwasm::wasm::v1::QueryContractsByCreatorResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmwasm::wasm::v1::QueryContractsByCreatorRequest* req,
             ::cosmwasm::wasm::v1::QueryContractsByCreatorResponse* resp) {
               return service->ContractsByCreator(ctx, req, resp);
             }, this)));
}

Query::Service::~Service() {
}

::grpc::Status Query::Service::ContractInfo(::grpc::ServerContext* context, const ::cosmwasm::wasm::v1::QueryContractInfoRequest* request, ::cosmwasm::wasm::v1::QueryContractInfoResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::ContractHistory(::grpc::ServerContext* context, const ::cosmwasm::wasm::v1::QueryContractHistoryRequest* request, ::cosmwasm::wasm::v1::QueryContractHistoryResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::ContractsByCode(::grpc::ServerContext* context, const ::cosmwasm::wasm::v1::QueryContractsByCodeRequest* request, ::cosmwasm::wasm::v1::QueryContractsByCodeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::AllContractState(::grpc::ServerContext* context, const ::cosmwasm::wasm::v1::QueryAllContractStateRequest* request, ::cosmwasm::wasm::v1::QueryAllContractStateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::RawContractState(::grpc::ServerContext* context, const ::cosmwasm::wasm::v1::QueryRawContractStateRequest* request, ::cosmwasm::wasm::v1::QueryRawContractStateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::SmartContractState(::grpc::ServerContext* context, const ::cosmwasm::wasm::v1::QuerySmartContractStateRequest* request, ::cosmwasm::wasm::v1::QuerySmartContractStateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::Code(::grpc::ServerContext* context, const ::cosmwasm::wasm::v1::QueryCodeRequest* request, ::cosmwasm::wasm::v1::QueryCodeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::Codes(::grpc::ServerContext* context, const ::cosmwasm::wasm::v1::QueryCodesRequest* request, ::cosmwasm::wasm::v1::QueryCodesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::PinnedCodes(::grpc::ServerContext* context, const ::cosmwasm::wasm::v1::QueryPinnedCodesRequest* request, ::cosmwasm::wasm::v1::QueryPinnedCodesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::Params(::grpc::ServerContext* context, const ::cosmwasm::wasm::v1::QueryParamsRequest* request, ::cosmwasm::wasm::v1::QueryParamsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::ContractsByCreator(::grpc::ServerContext* context, const ::cosmwasm::wasm::v1::QueryContractsByCreatorRequest* request, ::cosmwasm::wasm::v1::QueryContractsByCreatorResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace cosmwasm
}  // namespace wasm
}  // namespace v1


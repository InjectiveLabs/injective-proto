// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cosmwasm/wasm/v1/genesis.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cosmwasm_2fwasm_2fv1_2fgenesis_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_cosmwasm_2fwasm_2fv1_2fgenesis_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "gogoproto/gogo.pb.h"
#include "cosmwasm/wasm/v1/types.pb.h"
#include "amino/amino.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_cosmwasm_2fwasm_2fv1_2fgenesis_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cosmwasm_2fwasm_2fv1_2fgenesis_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_cosmwasm_2fwasm_2fv1_2fgenesis_2eproto;
namespace cosmwasm {
namespace wasm {
namespace v1 {
class Code;
struct CodeDefaultTypeInternal;
extern CodeDefaultTypeInternal _Code_default_instance_;
class Contract;
struct ContractDefaultTypeInternal;
extern ContractDefaultTypeInternal _Contract_default_instance_;
class GenesisState;
struct GenesisStateDefaultTypeInternal;
extern GenesisStateDefaultTypeInternal _GenesisState_default_instance_;
class Sequence;
struct SequenceDefaultTypeInternal;
extern SequenceDefaultTypeInternal _Sequence_default_instance_;
}  // namespace v1
}  // namespace wasm
}  // namespace cosmwasm
PROTOBUF_NAMESPACE_OPEN
template <>
::cosmwasm::wasm::v1::Code* Arena::CreateMaybeMessage<::cosmwasm::wasm::v1::Code>(Arena*);
template <>
::cosmwasm::wasm::v1::Contract* Arena::CreateMaybeMessage<::cosmwasm::wasm::v1::Contract>(Arena*);
template <>
::cosmwasm::wasm::v1::GenesisState* Arena::CreateMaybeMessage<::cosmwasm::wasm::v1::GenesisState>(Arena*);
template <>
::cosmwasm::wasm::v1::Sequence* Arena::CreateMaybeMessage<::cosmwasm::wasm::v1::Sequence>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace cosmwasm {
namespace wasm {
namespace v1 {

// ===================================================================


// -------------------------------------------------------------------

class GenesisState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmwasm.wasm.v1.GenesisState) */ {
 public:
  inline GenesisState() : GenesisState(nullptr) {}
  ~GenesisState() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GenesisState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GenesisState(const GenesisState& from);
  GenesisState(GenesisState&& from) noexcept
    : GenesisState() {
    *this = ::std::move(from);
  }

  inline GenesisState& operator=(const GenesisState& from) {
    CopyFrom(from);
    return *this;
  }
  inline GenesisState& operator=(GenesisState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GenesisState& default_instance() {
    return *internal_default_instance();
  }
  static inline const GenesisState* internal_default_instance() {
    return reinterpret_cast<const GenesisState*>(
               &_GenesisState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GenesisState& a, GenesisState& b) {
    a.Swap(&b);
  }
  inline void Swap(GenesisState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GenesisState* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GenesisState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GenesisState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GenesisState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GenesisState& from) {
    GenesisState::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GenesisState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmwasm.wasm.v1.GenesisState";
  }
  protected:
  explicit GenesisState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCodesFieldNumber = 2,
    kContractsFieldNumber = 3,
    kSequencesFieldNumber = 4,
    kParamsFieldNumber = 1,
  };
  // repeated .cosmwasm.wasm.v1.Code codes = 2 [json_name = "codes", (.gogoproto.nullable) = false, (.gogoproto.jsontag) = "codes,omitempty", (.amino.dont_omitempty) = true];
  int codes_size() const;
  private:
  int _internal_codes_size() const;

  public:
  void clear_codes() ;
  ::cosmwasm::wasm::v1::Code* mutable_codes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmwasm::wasm::v1::Code >*
      mutable_codes();
  private:
  const ::cosmwasm::wasm::v1::Code& _internal_codes(int index) const;
  ::cosmwasm::wasm::v1::Code* _internal_add_codes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmwasm::wasm::v1::Code>& _internal_codes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmwasm::wasm::v1::Code>* _internal_mutable_codes();
  public:
  const ::cosmwasm::wasm::v1::Code& codes(int index) const;
  ::cosmwasm::wasm::v1::Code* add_codes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmwasm::wasm::v1::Code >&
      codes() const;
  // repeated .cosmwasm.wasm.v1.Contract contracts = 3 [json_name = "contracts", (.gogoproto.nullable) = false, (.gogoproto.jsontag) = "contracts,omitempty", (.amino.dont_omitempty) = true];
  int contracts_size() const;
  private:
  int _internal_contracts_size() const;

  public:
  void clear_contracts() ;
  ::cosmwasm::wasm::v1::Contract* mutable_contracts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmwasm::wasm::v1::Contract >*
      mutable_contracts();
  private:
  const ::cosmwasm::wasm::v1::Contract& _internal_contracts(int index) const;
  ::cosmwasm::wasm::v1::Contract* _internal_add_contracts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmwasm::wasm::v1::Contract>& _internal_contracts() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmwasm::wasm::v1::Contract>* _internal_mutable_contracts();
  public:
  const ::cosmwasm::wasm::v1::Contract& contracts(int index) const;
  ::cosmwasm::wasm::v1::Contract* add_contracts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmwasm::wasm::v1::Contract >&
      contracts() const;
  // repeated .cosmwasm.wasm.v1.Sequence sequences = 4 [json_name = "sequences", (.gogoproto.nullable) = false, (.gogoproto.jsontag) = "sequences,omitempty", (.amino.dont_omitempty) = true];
  int sequences_size() const;
  private:
  int _internal_sequences_size() const;

  public:
  void clear_sequences() ;
  ::cosmwasm::wasm::v1::Sequence* mutable_sequences(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmwasm::wasm::v1::Sequence >*
      mutable_sequences();
  private:
  const ::cosmwasm::wasm::v1::Sequence& _internal_sequences(int index) const;
  ::cosmwasm::wasm::v1::Sequence* _internal_add_sequences();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmwasm::wasm::v1::Sequence>& _internal_sequences() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmwasm::wasm::v1::Sequence>* _internal_mutable_sequences();
  public:
  const ::cosmwasm::wasm::v1::Sequence& sequences(int index) const;
  ::cosmwasm::wasm::v1::Sequence* add_sequences();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmwasm::wasm::v1::Sequence >&
      sequences() const;
  // .cosmwasm.wasm.v1.Params params = 1 [json_name = "params", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  bool has_params() const;
  void clear_params() ;
  const ::cosmwasm::wasm::v1::Params& params() const;
  PROTOBUF_NODISCARD ::cosmwasm::wasm::v1::Params* release_params();
  ::cosmwasm::wasm::v1::Params* mutable_params();
  void set_allocated_params(::cosmwasm::wasm::v1::Params* params);
  private:
  const ::cosmwasm::wasm::v1::Params& _internal_params() const;
  ::cosmwasm::wasm::v1::Params* _internal_mutable_params();
  public:
  void unsafe_arena_set_allocated_params(
      ::cosmwasm::wasm::v1::Params* params);
  ::cosmwasm::wasm::v1::Params* unsafe_arena_release_params();
  // @@protoc_insertion_point(class_scope:cosmwasm.wasm.v1.GenesisState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmwasm::wasm::v1::Code > codes_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmwasm::wasm::v1::Contract > contracts_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmwasm::wasm::v1::Sequence > sequences_;
    ::cosmwasm::wasm::v1::Params* params_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmwasm_2fwasm_2fv1_2fgenesis_2eproto;
};// -------------------------------------------------------------------

class Code final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmwasm.wasm.v1.Code) */ {
 public:
  inline Code() : Code(nullptr) {}
  ~Code() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Code(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Code(const Code& from);
  Code(Code&& from) noexcept
    : Code() {
    *this = ::std::move(from);
  }

  inline Code& operator=(const Code& from) {
    CopyFrom(from);
    return *this;
  }
  inline Code& operator=(Code&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Code& default_instance() {
    return *internal_default_instance();
  }
  static inline const Code* internal_default_instance() {
    return reinterpret_cast<const Code*>(
               &_Code_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Code& a, Code& b) {
    a.Swap(&b);
  }
  inline void Swap(Code* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Code* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Code* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Code>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Code& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Code& from) {
    Code::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Code* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmwasm.wasm.v1.Code";
  }
  protected:
  explicit Code(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCodeBytesFieldNumber = 3,
    kCodeInfoFieldNumber = 2,
    kCodeIdFieldNumber = 1,
    kPinnedFieldNumber = 4,
  };
  // bytes code_bytes = 3 [json_name = "codeBytes"];
  void clear_code_bytes() ;
  const std::string& code_bytes() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_code_bytes(Arg_&& arg, Args_... args);
  std::string* mutable_code_bytes();
  PROTOBUF_NODISCARD std::string* release_code_bytes();
  void set_allocated_code_bytes(std::string* ptr);

  private:
  const std::string& _internal_code_bytes() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_code_bytes(
      const std::string& value);
  std::string* _internal_mutable_code_bytes();

  public:
  // .cosmwasm.wasm.v1.CodeInfo code_info = 2 [json_name = "codeInfo", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  bool has_code_info() const;
  void clear_code_info() ;
  const ::cosmwasm::wasm::v1::CodeInfo& code_info() const;
  PROTOBUF_NODISCARD ::cosmwasm::wasm::v1::CodeInfo* release_code_info();
  ::cosmwasm::wasm::v1::CodeInfo* mutable_code_info();
  void set_allocated_code_info(::cosmwasm::wasm::v1::CodeInfo* code_info);
  private:
  const ::cosmwasm::wasm::v1::CodeInfo& _internal_code_info() const;
  ::cosmwasm::wasm::v1::CodeInfo* _internal_mutable_code_info();
  public:
  void unsafe_arena_set_allocated_code_info(
      ::cosmwasm::wasm::v1::CodeInfo* code_info);
  ::cosmwasm::wasm::v1::CodeInfo* unsafe_arena_release_code_info();
  // uint64 code_id = 1 [json_name = "codeId", (.gogoproto.customname) = "CodeID"];
  void clear_code_id() ;
  ::uint64_t code_id() const;
  void set_code_id(::uint64_t value);

  private:
  ::uint64_t _internal_code_id() const;
  void _internal_set_code_id(::uint64_t value);

  public:
  // bool pinned = 4 [json_name = "pinned"];
  void clear_pinned() ;
  bool pinned() const;
  void set_pinned(bool value);

  private:
  bool _internal_pinned() const;
  void _internal_set_pinned(bool value);

  public:
  // @@protoc_insertion_point(class_scope:cosmwasm.wasm.v1.Code)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr code_bytes_;
    ::cosmwasm::wasm::v1::CodeInfo* code_info_;
    ::uint64_t code_id_;
    bool pinned_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmwasm_2fwasm_2fv1_2fgenesis_2eproto;
};// -------------------------------------------------------------------

class Contract final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmwasm.wasm.v1.Contract) */ {
 public:
  inline Contract() : Contract(nullptr) {}
  ~Contract() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Contract(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Contract(const Contract& from);
  Contract(Contract&& from) noexcept
    : Contract() {
    *this = ::std::move(from);
  }

  inline Contract& operator=(const Contract& from) {
    CopyFrom(from);
    return *this;
  }
  inline Contract& operator=(Contract&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Contract& default_instance() {
    return *internal_default_instance();
  }
  static inline const Contract* internal_default_instance() {
    return reinterpret_cast<const Contract*>(
               &_Contract_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Contract& a, Contract& b) {
    a.Swap(&b);
  }
  inline void Swap(Contract* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Contract* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Contract* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Contract>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Contract& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Contract& from) {
    Contract::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Contract* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmwasm.wasm.v1.Contract";
  }
  protected:
  explicit Contract(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContractStateFieldNumber = 3,
    kContractCodeHistoryFieldNumber = 4,
    kContractAddressFieldNumber = 1,
    kContractInfoFieldNumber = 2,
  };
  // repeated .cosmwasm.wasm.v1.Model contract_state = 3 [json_name = "contractState", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  int contract_state_size() const;
  private:
  int _internal_contract_state_size() const;

  public:
  void clear_contract_state() ;
  ::cosmwasm::wasm::v1::Model* mutable_contract_state(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmwasm::wasm::v1::Model >*
      mutable_contract_state();
  private:
  const ::cosmwasm::wasm::v1::Model& _internal_contract_state(int index) const;
  ::cosmwasm::wasm::v1::Model* _internal_add_contract_state();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmwasm::wasm::v1::Model>& _internal_contract_state() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmwasm::wasm::v1::Model>* _internal_mutable_contract_state();
  public:
  const ::cosmwasm::wasm::v1::Model& contract_state(int index) const;
  ::cosmwasm::wasm::v1::Model* add_contract_state();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmwasm::wasm::v1::Model >&
      contract_state() const;
  // repeated .cosmwasm.wasm.v1.ContractCodeHistoryEntry contract_code_history = 4 [json_name = "contractCodeHistory", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  int contract_code_history_size() const;
  private:
  int _internal_contract_code_history_size() const;

  public:
  void clear_contract_code_history() ;
  ::cosmwasm::wasm::v1::ContractCodeHistoryEntry* mutable_contract_code_history(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmwasm::wasm::v1::ContractCodeHistoryEntry >*
      mutable_contract_code_history();
  private:
  const ::cosmwasm::wasm::v1::ContractCodeHistoryEntry& _internal_contract_code_history(int index) const;
  ::cosmwasm::wasm::v1::ContractCodeHistoryEntry* _internal_add_contract_code_history();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmwasm::wasm::v1::ContractCodeHistoryEntry>& _internal_contract_code_history() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmwasm::wasm::v1::ContractCodeHistoryEntry>* _internal_mutable_contract_code_history();
  public:
  const ::cosmwasm::wasm::v1::ContractCodeHistoryEntry& contract_code_history(int index) const;
  ::cosmwasm::wasm::v1::ContractCodeHistoryEntry* add_contract_code_history();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmwasm::wasm::v1::ContractCodeHistoryEntry >&
      contract_code_history() const;
  // string contract_address = 1 [json_name = "contractAddress"];
  void clear_contract_address() ;
  const std::string& contract_address() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_contract_address(Arg_&& arg, Args_... args);
  std::string* mutable_contract_address();
  PROTOBUF_NODISCARD std::string* release_contract_address();
  void set_allocated_contract_address(std::string* ptr);

  private:
  const std::string& _internal_contract_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_contract_address(
      const std::string& value);
  std::string* _internal_mutable_contract_address();

  public:
  // .cosmwasm.wasm.v1.ContractInfo contract_info = 2 [json_name = "contractInfo", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  bool has_contract_info() const;
  void clear_contract_info() ;
  const ::cosmwasm::wasm::v1::ContractInfo& contract_info() const;
  PROTOBUF_NODISCARD ::cosmwasm::wasm::v1::ContractInfo* release_contract_info();
  ::cosmwasm::wasm::v1::ContractInfo* mutable_contract_info();
  void set_allocated_contract_info(::cosmwasm::wasm::v1::ContractInfo* contract_info);
  private:
  const ::cosmwasm::wasm::v1::ContractInfo& _internal_contract_info() const;
  ::cosmwasm::wasm::v1::ContractInfo* _internal_mutable_contract_info();
  public:
  void unsafe_arena_set_allocated_contract_info(
      ::cosmwasm::wasm::v1::ContractInfo* contract_info);
  ::cosmwasm::wasm::v1::ContractInfo* unsafe_arena_release_contract_info();
  // @@protoc_insertion_point(class_scope:cosmwasm.wasm.v1.Contract)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmwasm::wasm::v1::Model > contract_state_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmwasm::wasm::v1::ContractCodeHistoryEntry > contract_code_history_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contract_address_;
    ::cosmwasm::wasm::v1::ContractInfo* contract_info_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmwasm_2fwasm_2fv1_2fgenesis_2eproto;
};// -------------------------------------------------------------------

class Sequence final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmwasm.wasm.v1.Sequence) */ {
 public:
  inline Sequence() : Sequence(nullptr) {}
  ~Sequence() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Sequence(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Sequence(const Sequence& from);
  Sequence(Sequence&& from) noexcept
    : Sequence() {
    *this = ::std::move(from);
  }

  inline Sequence& operator=(const Sequence& from) {
    CopyFrom(from);
    return *this;
  }
  inline Sequence& operator=(Sequence&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Sequence& default_instance() {
    return *internal_default_instance();
  }
  static inline const Sequence* internal_default_instance() {
    return reinterpret_cast<const Sequence*>(
               &_Sequence_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Sequence& a, Sequence& b) {
    a.Swap(&b);
  }
  inline void Swap(Sequence* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Sequence* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Sequence* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Sequence>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Sequence& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Sequence& from) {
    Sequence::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Sequence* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmwasm.wasm.v1.Sequence";
  }
  protected:
  explicit Sequence(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // bytes id_key = 1 [json_name = "idKey", (.gogoproto.customname) = "IDKey"];
  void clear_id_key() ;
  const std::string& id_key() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_id_key(Arg_&& arg, Args_... args);
  std::string* mutable_id_key();
  PROTOBUF_NODISCARD std::string* release_id_key();
  void set_allocated_id_key(std::string* ptr);

  private:
  const std::string& _internal_id_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id_key(
      const std::string& value);
  std::string* _internal_mutable_id_key();

  public:
  // uint64 value = 2 [json_name = "value"];
  void clear_value() ;
  ::uint64_t value() const;
  void set_value(::uint64_t value);

  private:
  ::uint64_t _internal_value() const;
  void _internal_set_value(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:cosmwasm.wasm.v1.Sequence)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_key_;
    ::uint64_t value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmwasm_2fwasm_2fv1_2fgenesis_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// GenesisState

// .cosmwasm.wasm.v1.Params params = 1 [json_name = "params", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
inline bool GenesisState::has_params() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.params_ != nullptr);
  return value;
}
inline const ::cosmwasm::wasm::v1::Params& GenesisState::_internal_params() const {
  const ::cosmwasm::wasm::v1::Params* p = _impl_.params_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmwasm::wasm::v1::Params&>(
      ::cosmwasm::wasm::v1::_Params_default_instance_);
}
inline const ::cosmwasm::wasm::v1::Params& GenesisState::params() const {
  // @@protoc_insertion_point(field_get:cosmwasm.wasm.v1.GenesisState.params)
  return _internal_params();
}
inline void GenesisState::unsafe_arena_set_allocated_params(
    ::cosmwasm::wasm::v1::Params* params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.params_);
  }
  _impl_.params_ = params;
  if (params) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmwasm.wasm.v1.GenesisState.params)
}
inline ::cosmwasm::wasm::v1::Params* GenesisState::release_params() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmwasm::wasm::v1::Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmwasm::wasm::v1::Params* GenesisState::unsafe_arena_release_params() {
  // @@protoc_insertion_point(field_release:cosmwasm.wasm.v1.GenesisState.params)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmwasm::wasm::v1::Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
  return temp;
}
inline ::cosmwasm::wasm::v1::Params* GenesisState::_internal_mutable_params() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.params_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmwasm::wasm::v1::Params>(GetArenaForAllocation());
    _impl_.params_ = p;
  }
  return _impl_.params_;
}
inline ::cosmwasm::wasm::v1::Params* GenesisState::mutable_params() {
  ::cosmwasm::wasm::v1::Params* _msg = _internal_mutable_params();
  // @@protoc_insertion_point(field_mutable:cosmwasm.wasm.v1.GenesisState.params)
  return _msg;
}
inline void GenesisState::set_allocated_params(::cosmwasm::wasm::v1::Params* params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.params_);
  }
  if (params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(params));
    if (message_arena != submessage_arena) {
      params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, params, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.params_ = params;
  // @@protoc_insertion_point(field_set_allocated:cosmwasm.wasm.v1.GenesisState.params)
}

// repeated .cosmwasm.wasm.v1.Code codes = 2 [json_name = "codes", (.gogoproto.nullable) = false, (.gogoproto.jsontag) = "codes,omitempty", (.amino.dont_omitempty) = true];
inline int GenesisState::_internal_codes_size() const {
  return _impl_.codes_.size();
}
inline int GenesisState::codes_size() const {
  return _internal_codes_size();
}
inline void GenesisState::clear_codes() {
  _internal_mutable_codes()->Clear();
}
inline ::cosmwasm::wasm::v1::Code* GenesisState::mutable_codes(int index) {
  // @@protoc_insertion_point(field_mutable:cosmwasm.wasm.v1.GenesisState.codes)
  return _internal_mutable_codes()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmwasm::wasm::v1::Code >*
GenesisState::mutable_codes() {
  // @@protoc_insertion_point(field_mutable_list:cosmwasm.wasm.v1.GenesisState.codes)
  return _internal_mutable_codes();
}
inline const ::cosmwasm::wasm::v1::Code& GenesisState::_internal_codes(int index) const {
  return _internal_codes().Get(index);
}
inline const ::cosmwasm::wasm::v1::Code& GenesisState::codes(int index) const {
  // @@protoc_insertion_point(field_get:cosmwasm.wasm.v1.GenesisState.codes)
  return _internal_codes(index);
}
inline ::cosmwasm::wasm::v1::Code* GenesisState::_internal_add_codes() {
  return _internal_mutable_codes()->Add();
}
inline ::cosmwasm::wasm::v1::Code* GenesisState::add_codes() {
  ::cosmwasm::wasm::v1::Code* _add = _internal_add_codes();
  // @@protoc_insertion_point(field_add:cosmwasm.wasm.v1.GenesisState.codes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmwasm::wasm::v1::Code >&
GenesisState::codes() const {
  // @@protoc_insertion_point(field_list:cosmwasm.wasm.v1.GenesisState.codes)
  return _internal_codes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmwasm::wasm::v1::Code>&
GenesisState::_internal_codes() const {
  return _impl_.codes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmwasm::wasm::v1::Code>*
GenesisState::_internal_mutable_codes() {
  return &_impl_.codes_;
}

// repeated .cosmwasm.wasm.v1.Contract contracts = 3 [json_name = "contracts", (.gogoproto.nullable) = false, (.gogoproto.jsontag) = "contracts,omitempty", (.amino.dont_omitempty) = true];
inline int GenesisState::_internal_contracts_size() const {
  return _impl_.contracts_.size();
}
inline int GenesisState::contracts_size() const {
  return _internal_contracts_size();
}
inline void GenesisState::clear_contracts() {
  _internal_mutable_contracts()->Clear();
}
inline ::cosmwasm::wasm::v1::Contract* GenesisState::mutable_contracts(int index) {
  // @@protoc_insertion_point(field_mutable:cosmwasm.wasm.v1.GenesisState.contracts)
  return _internal_mutable_contracts()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmwasm::wasm::v1::Contract >*
GenesisState::mutable_contracts() {
  // @@protoc_insertion_point(field_mutable_list:cosmwasm.wasm.v1.GenesisState.contracts)
  return _internal_mutable_contracts();
}
inline const ::cosmwasm::wasm::v1::Contract& GenesisState::_internal_contracts(int index) const {
  return _internal_contracts().Get(index);
}
inline const ::cosmwasm::wasm::v1::Contract& GenesisState::contracts(int index) const {
  // @@protoc_insertion_point(field_get:cosmwasm.wasm.v1.GenesisState.contracts)
  return _internal_contracts(index);
}
inline ::cosmwasm::wasm::v1::Contract* GenesisState::_internal_add_contracts() {
  return _internal_mutable_contracts()->Add();
}
inline ::cosmwasm::wasm::v1::Contract* GenesisState::add_contracts() {
  ::cosmwasm::wasm::v1::Contract* _add = _internal_add_contracts();
  // @@protoc_insertion_point(field_add:cosmwasm.wasm.v1.GenesisState.contracts)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmwasm::wasm::v1::Contract >&
GenesisState::contracts() const {
  // @@protoc_insertion_point(field_list:cosmwasm.wasm.v1.GenesisState.contracts)
  return _internal_contracts();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmwasm::wasm::v1::Contract>&
GenesisState::_internal_contracts() const {
  return _impl_.contracts_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmwasm::wasm::v1::Contract>*
GenesisState::_internal_mutable_contracts() {
  return &_impl_.contracts_;
}

// repeated .cosmwasm.wasm.v1.Sequence sequences = 4 [json_name = "sequences", (.gogoproto.nullable) = false, (.gogoproto.jsontag) = "sequences,omitempty", (.amino.dont_omitempty) = true];
inline int GenesisState::_internal_sequences_size() const {
  return _impl_.sequences_.size();
}
inline int GenesisState::sequences_size() const {
  return _internal_sequences_size();
}
inline void GenesisState::clear_sequences() {
  _internal_mutable_sequences()->Clear();
}
inline ::cosmwasm::wasm::v1::Sequence* GenesisState::mutable_sequences(int index) {
  // @@protoc_insertion_point(field_mutable:cosmwasm.wasm.v1.GenesisState.sequences)
  return _internal_mutable_sequences()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmwasm::wasm::v1::Sequence >*
GenesisState::mutable_sequences() {
  // @@protoc_insertion_point(field_mutable_list:cosmwasm.wasm.v1.GenesisState.sequences)
  return _internal_mutable_sequences();
}
inline const ::cosmwasm::wasm::v1::Sequence& GenesisState::_internal_sequences(int index) const {
  return _internal_sequences().Get(index);
}
inline const ::cosmwasm::wasm::v1::Sequence& GenesisState::sequences(int index) const {
  // @@protoc_insertion_point(field_get:cosmwasm.wasm.v1.GenesisState.sequences)
  return _internal_sequences(index);
}
inline ::cosmwasm::wasm::v1::Sequence* GenesisState::_internal_add_sequences() {
  return _internal_mutable_sequences()->Add();
}
inline ::cosmwasm::wasm::v1::Sequence* GenesisState::add_sequences() {
  ::cosmwasm::wasm::v1::Sequence* _add = _internal_add_sequences();
  // @@protoc_insertion_point(field_add:cosmwasm.wasm.v1.GenesisState.sequences)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmwasm::wasm::v1::Sequence >&
GenesisState::sequences() const {
  // @@protoc_insertion_point(field_list:cosmwasm.wasm.v1.GenesisState.sequences)
  return _internal_sequences();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmwasm::wasm::v1::Sequence>&
GenesisState::_internal_sequences() const {
  return _impl_.sequences_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmwasm::wasm::v1::Sequence>*
GenesisState::_internal_mutable_sequences() {
  return &_impl_.sequences_;
}

// -------------------------------------------------------------------

// Code

// uint64 code_id = 1 [json_name = "codeId", (.gogoproto.customname) = "CodeID"];
inline void Code::clear_code_id() {
  _impl_.code_id_ = ::uint64_t{0u};
}
inline ::uint64_t Code::code_id() const {
  // @@protoc_insertion_point(field_get:cosmwasm.wasm.v1.Code.code_id)
  return _internal_code_id();
}
inline void Code::set_code_id(::uint64_t value) {
  _internal_set_code_id(value);
  // @@protoc_insertion_point(field_set:cosmwasm.wasm.v1.Code.code_id)
}
inline ::uint64_t Code::_internal_code_id() const {
  return _impl_.code_id_;
}
inline void Code::_internal_set_code_id(::uint64_t value) {
  ;
  _impl_.code_id_ = value;
}

// .cosmwasm.wasm.v1.CodeInfo code_info = 2 [json_name = "codeInfo", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
inline bool Code::has_code_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.code_info_ != nullptr);
  return value;
}
inline const ::cosmwasm::wasm::v1::CodeInfo& Code::_internal_code_info() const {
  const ::cosmwasm::wasm::v1::CodeInfo* p = _impl_.code_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmwasm::wasm::v1::CodeInfo&>(
      ::cosmwasm::wasm::v1::_CodeInfo_default_instance_);
}
inline const ::cosmwasm::wasm::v1::CodeInfo& Code::code_info() const {
  // @@protoc_insertion_point(field_get:cosmwasm.wasm.v1.Code.code_info)
  return _internal_code_info();
}
inline void Code::unsafe_arena_set_allocated_code_info(
    ::cosmwasm::wasm::v1::CodeInfo* code_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.code_info_);
  }
  _impl_.code_info_ = code_info;
  if (code_info) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmwasm.wasm.v1.Code.code_info)
}
inline ::cosmwasm::wasm::v1::CodeInfo* Code::release_code_info() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmwasm::wasm::v1::CodeInfo* temp = _impl_.code_info_;
  _impl_.code_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmwasm::wasm::v1::CodeInfo* Code::unsafe_arena_release_code_info() {
  // @@protoc_insertion_point(field_release:cosmwasm.wasm.v1.Code.code_info)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmwasm::wasm::v1::CodeInfo* temp = _impl_.code_info_;
  _impl_.code_info_ = nullptr;
  return temp;
}
inline ::cosmwasm::wasm::v1::CodeInfo* Code::_internal_mutable_code_info() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.code_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmwasm::wasm::v1::CodeInfo>(GetArenaForAllocation());
    _impl_.code_info_ = p;
  }
  return _impl_.code_info_;
}
inline ::cosmwasm::wasm::v1::CodeInfo* Code::mutable_code_info() {
  ::cosmwasm::wasm::v1::CodeInfo* _msg = _internal_mutable_code_info();
  // @@protoc_insertion_point(field_mutable:cosmwasm.wasm.v1.Code.code_info)
  return _msg;
}
inline void Code::set_allocated_code_info(::cosmwasm::wasm::v1::CodeInfo* code_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.code_info_);
  }
  if (code_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(code_info));
    if (message_arena != submessage_arena) {
      code_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, code_info, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.code_info_ = code_info;
  // @@protoc_insertion_point(field_set_allocated:cosmwasm.wasm.v1.Code.code_info)
}

// bytes code_bytes = 3 [json_name = "codeBytes"];
inline void Code::clear_code_bytes() {
  _impl_.code_bytes_.ClearToEmpty();
}
inline const std::string& Code::code_bytes() const {
  // @@protoc_insertion_point(field_get:cosmwasm.wasm.v1.Code.code_bytes)
  return _internal_code_bytes();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Code::set_code_bytes(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.code_bytes_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmwasm.wasm.v1.Code.code_bytes)
}
inline std::string* Code::mutable_code_bytes() {
  std::string* _s = _internal_mutable_code_bytes();
  // @@protoc_insertion_point(field_mutable:cosmwasm.wasm.v1.Code.code_bytes)
  return _s;
}
inline const std::string& Code::_internal_code_bytes() const {
  return _impl_.code_bytes_.Get();
}
inline void Code::_internal_set_code_bytes(const std::string& value) {
  ;


  _impl_.code_bytes_.Set(value, GetArenaForAllocation());
}
inline std::string* Code::_internal_mutable_code_bytes() {
  ;
  return _impl_.code_bytes_.Mutable( GetArenaForAllocation());
}
inline std::string* Code::release_code_bytes() {
  // @@protoc_insertion_point(field_release:cosmwasm.wasm.v1.Code.code_bytes)
  return _impl_.code_bytes_.Release();
}
inline void Code::set_allocated_code_bytes(std::string* value) {
  _impl_.code_bytes_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.code_bytes_.IsDefault()) {
          _impl_.code_bytes_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmwasm.wasm.v1.Code.code_bytes)
}

// bool pinned = 4 [json_name = "pinned"];
inline void Code::clear_pinned() {
  _impl_.pinned_ = false;
}
inline bool Code::pinned() const {
  // @@protoc_insertion_point(field_get:cosmwasm.wasm.v1.Code.pinned)
  return _internal_pinned();
}
inline void Code::set_pinned(bool value) {
  _internal_set_pinned(value);
  // @@protoc_insertion_point(field_set:cosmwasm.wasm.v1.Code.pinned)
}
inline bool Code::_internal_pinned() const {
  return _impl_.pinned_;
}
inline void Code::_internal_set_pinned(bool value) {
  ;
  _impl_.pinned_ = value;
}

// -------------------------------------------------------------------

// Contract

// string contract_address = 1 [json_name = "contractAddress"];
inline void Contract::clear_contract_address() {
  _impl_.contract_address_.ClearToEmpty();
}
inline const std::string& Contract::contract_address() const {
  // @@protoc_insertion_point(field_get:cosmwasm.wasm.v1.Contract.contract_address)
  return _internal_contract_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Contract::set_contract_address(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.contract_address_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmwasm.wasm.v1.Contract.contract_address)
}
inline std::string* Contract::mutable_contract_address() {
  std::string* _s = _internal_mutable_contract_address();
  // @@protoc_insertion_point(field_mutable:cosmwasm.wasm.v1.Contract.contract_address)
  return _s;
}
inline const std::string& Contract::_internal_contract_address() const {
  return _impl_.contract_address_.Get();
}
inline void Contract::_internal_set_contract_address(const std::string& value) {
  ;


  _impl_.contract_address_.Set(value, GetArenaForAllocation());
}
inline std::string* Contract::_internal_mutable_contract_address() {
  ;
  return _impl_.contract_address_.Mutable( GetArenaForAllocation());
}
inline std::string* Contract::release_contract_address() {
  // @@protoc_insertion_point(field_release:cosmwasm.wasm.v1.Contract.contract_address)
  return _impl_.contract_address_.Release();
}
inline void Contract::set_allocated_contract_address(std::string* value) {
  _impl_.contract_address_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.contract_address_.IsDefault()) {
          _impl_.contract_address_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmwasm.wasm.v1.Contract.contract_address)
}

// .cosmwasm.wasm.v1.ContractInfo contract_info = 2 [json_name = "contractInfo", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
inline bool Contract::has_contract_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.contract_info_ != nullptr);
  return value;
}
inline const ::cosmwasm::wasm::v1::ContractInfo& Contract::_internal_contract_info() const {
  const ::cosmwasm::wasm::v1::ContractInfo* p = _impl_.contract_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmwasm::wasm::v1::ContractInfo&>(
      ::cosmwasm::wasm::v1::_ContractInfo_default_instance_);
}
inline const ::cosmwasm::wasm::v1::ContractInfo& Contract::contract_info() const {
  // @@protoc_insertion_point(field_get:cosmwasm.wasm.v1.Contract.contract_info)
  return _internal_contract_info();
}
inline void Contract::unsafe_arena_set_allocated_contract_info(
    ::cosmwasm::wasm::v1::ContractInfo* contract_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.contract_info_);
  }
  _impl_.contract_info_ = contract_info;
  if (contract_info) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmwasm.wasm.v1.Contract.contract_info)
}
inline ::cosmwasm::wasm::v1::ContractInfo* Contract::release_contract_info() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmwasm::wasm::v1::ContractInfo* temp = _impl_.contract_info_;
  _impl_.contract_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmwasm::wasm::v1::ContractInfo* Contract::unsafe_arena_release_contract_info() {
  // @@protoc_insertion_point(field_release:cosmwasm.wasm.v1.Contract.contract_info)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmwasm::wasm::v1::ContractInfo* temp = _impl_.contract_info_;
  _impl_.contract_info_ = nullptr;
  return temp;
}
inline ::cosmwasm::wasm::v1::ContractInfo* Contract::_internal_mutable_contract_info() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.contract_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmwasm::wasm::v1::ContractInfo>(GetArenaForAllocation());
    _impl_.contract_info_ = p;
  }
  return _impl_.contract_info_;
}
inline ::cosmwasm::wasm::v1::ContractInfo* Contract::mutable_contract_info() {
  ::cosmwasm::wasm::v1::ContractInfo* _msg = _internal_mutable_contract_info();
  // @@protoc_insertion_point(field_mutable:cosmwasm.wasm.v1.Contract.contract_info)
  return _msg;
}
inline void Contract::set_allocated_contract_info(::cosmwasm::wasm::v1::ContractInfo* contract_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.contract_info_);
  }
  if (contract_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(contract_info));
    if (message_arena != submessage_arena) {
      contract_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, contract_info, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.contract_info_ = contract_info;
  // @@protoc_insertion_point(field_set_allocated:cosmwasm.wasm.v1.Contract.contract_info)
}

// repeated .cosmwasm.wasm.v1.Model contract_state = 3 [json_name = "contractState", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
inline int Contract::_internal_contract_state_size() const {
  return _impl_.contract_state_.size();
}
inline int Contract::contract_state_size() const {
  return _internal_contract_state_size();
}
inline ::cosmwasm::wasm::v1::Model* Contract::mutable_contract_state(int index) {
  // @@protoc_insertion_point(field_mutable:cosmwasm.wasm.v1.Contract.contract_state)
  return _internal_mutable_contract_state()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmwasm::wasm::v1::Model >*
Contract::mutable_contract_state() {
  // @@protoc_insertion_point(field_mutable_list:cosmwasm.wasm.v1.Contract.contract_state)
  return _internal_mutable_contract_state();
}
inline const ::cosmwasm::wasm::v1::Model& Contract::_internal_contract_state(int index) const {
  return _internal_contract_state().Get(index);
}
inline const ::cosmwasm::wasm::v1::Model& Contract::contract_state(int index) const {
  // @@protoc_insertion_point(field_get:cosmwasm.wasm.v1.Contract.contract_state)
  return _internal_contract_state(index);
}
inline ::cosmwasm::wasm::v1::Model* Contract::_internal_add_contract_state() {
  return _internal_mutable_contract_state()->Add();
}
inline ::cosmwasm::wasm::v1::Model* Contract::add_contract_state() {
  ::cosmwasm::wasm::v1::Model* _add = _internal_add_contract_state();
  // @@protoc_insertion_point(field_add:cosmwasm.wasm.v1.Contract.contract_state)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmwasm::wasm::v1::Model >&
Contract::contract_state() const {
  // @@protoc_insertion_point(field_list:cosmwasm.wasm.v1.Contract.contract_state)
  return _internal_contract_state();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmwasm::wasm::v1::Model>&
Contract::_internal_contract_state() const {
  return _impl_.contract_state_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmwasm::wasm::v1::Model>*
Contract::_internal_mutable_contract_state() {
  return &_impl_.contract_state_;
}

// repeated .cosmwasm.wasm.v1.ContractCodeHistoryEntry contract_code_history = 4 [json_name = "contractCodeHistory", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
inline int Contract::_internal_contract_code_history_size() const {
  return _impl_.contract_code_history_.size();
}
inline int Contract::contract_code_history_size() const {
  return _internal_contract_code_history_size();
}
inline ::cosmwasm::wasm::v1::ContractCodeHistoryEntry* Contract::mutable_contract_code_history(int index) {
  // @@protoc_insertion_point(field_mutable:cosmwasm.wasm.v1.Contract.contract_code_history)
  return _internal_mutable_contract_code_history()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmwasm::wasm::v1::ContractCodeHistoryEntry >*
Contract::mutable_contract_code_history() {
  // @@protoc_insertion_point(field_mutable_list:cosmwasm.wasm.v1.Contract.contract_code_history)
  return _internal_mutable_contract_code_history();
}
inline const ::cosmwasm::wasm::v1::ContractCodeHistoryEntry& Contract::_internal_contract_code_history(int index) const {
  return _internal_contract_code_history().Get(index);
}
inline const ::cosmwasm::wasm::v1::ContractCodeHistoryEntry& Contract::contract_code_history(int index) const {
  // @@protoc_insertion_point(field_get:cosmwasm.wasm.v1.Contract.contract_code_history)
  return _internal_contract_code_history(index);
}
inline ::cosmwasm::wasm::v1::ContractCodeHistoryEntry* Contract::_internal_add_contract_code_history() {
  return _internal_mutable_contract_code_history()->Add();
}
inline ::cosmwasm::wasm::v1::ContractCodeHistoryEntry* Contract::add_contract_code_history() {
  ::cosmwasm::wasm::v1::ContractCodeHistoryEntry* _add = _internal_add_contract_code_history();
  // @@protoc_insertion_point(field_add:cosmwasm.wasm.v1.Contract.contract_code_history)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmwasm::wasm::v1::ContractCodeHistoryEntry >&
Contract::contract_code_history() const {
  // @@protoc_insertion_point(field_list:cosmwasm.wasm.v1.Contract.contract_code_history)
  return _internal_contract_code_history();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmwasm::wasm::v1::ContractCodeHistoryEntry>&
Contract::_internal_contract_code_history() const {
  return _impl_.contract_code_history_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmwasm::wasm::v1::ContractCodeHistoryEntry>*
Contract::_internal_mutable_contract_code_history() {
  return &_impl_.contract_code_history_;
}

// -------------------------------------------------------------------

// Sequence

// bytes id_key = 1 [json_name = "idKey", (.gogoproto.customname) = "IDKey"];
inline void Sequence::clear_id_key() {
  _impl_.id_key_.ClearToEmpty();
}
inline const std::string& Sequence::id_key() const {
  // @@protoc_insertion_point(field_get:cosmwasm.wasm.v1.Sequence.id_key)
  return _internal_id_key();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Sequence::set_id_key(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.id_key_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmwasm.wasm.v1.Sequence.id_key)
}
inline std::string* Sequence::mutable_id_key() {
  std::string* _s = _internal_mutable_id_key();
  // @@protoc_insertion_point(field_mutable:cosmwasm.wasm.v1.Sequence.id_key)
  return _s;
}
inline const std::string& Sequence::_internal_id_key() const {
  return _impl_.id_key_.Get();
}
inline void Sequence::_internal_set_id_key(const std::string& value) {
  ;


  _impl_.id_key_.Set(value, GetArenaForAllocation());
}
inline std::string* Sequence::_internal_mutable_id_key() {
  ;
  return _impl_.id_key_.Mutable( GetArenaForAllocation());
}
inline std::string* Sequence::release_id_key() {
  // @@protoc_insertion_point(field_release:cosmwasm.wasm.v1.Sequence.id_key)
  return _impl_.id_key_.Release();
}
inline void Sequence::set_allocated_id_key(std::string* value) {
  _impl_.id_key_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.id_key_.IsDefault()) {
          _impl_.id_key_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmwasm.wasm.v1.Sequence.id_key)
}

// uint64 value = 2 [json_name = "value"];
inline void Sequence::clear_value() {
  _impl_.value_ = ::uint64_t{0u};
}
inline ::uint64_t Sequence::value() const {
  // @@protoc_insertion_point(field_get:cosmwasm.wasm.v1.Sequence.value)
  return _internal_value();
}
inline void Sequence::set_value(::uint64_t value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:cosmwasm.wasm.v1.Sequence.value)
}
inline ::uint64_t Sequence::_internal_value() const {
  return _impl_.value_;
}
inline void Sequence::_internal_set_value(::uint64_t value) {
  ;
  _impl_.value_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace wasm
}  // namespace cosmwasm


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_cosmwasm_2fwasm_2fv1_2fgenesis_2eproto_2epb_2eh

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cosmwasm/wasm/v1/proposal.proto

#include "cosmwasm/wasm/v1/proposal.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace cosmwasm {
namespace wasm {
namespace v1 {
template <typename>
PROTOBUF_CONSTEXPR StoreCodeProposal::StoreCodeProposal(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.title_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.description_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.run_as_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.wasm_byte_code_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.source_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.builder_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.code_hash_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.instantiate_permission_)*/nullptr
  , /*decltype(_impl_.unpin_code_)*/ false
} {}
struct StoreCodeProposalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StoreCodeProposalDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StoreCodeProposalDefaultTypeInternal() {}
  union {
    StoreCodeProposal _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StoreCodeProposalDefaultTypeInternal _StoreCodeProposal_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR InstantiateContractProposal::InstantiateContractProposal(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.funds_)*/{}
  , /*decltype(_impl_.title_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.description_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.run_as_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.admin_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.label_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.msg_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.code_id_)*/ ::uint64_t{0u}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct InstantiateContractProposalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InstantiateContractProposalDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~InstantiateContractProposalDefaultTypeInternal() {}
  union {
    InstantiateContractProposal _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InstantiateContractProposalDefaultTypeInternal _InstantiateContractProposal_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR InstantiateContract2Proposal::InstantiateContract2Proposal(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.funds_)*/{}
  , /*decltype(_impl_.title_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.description_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.run_as_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.admin_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.label_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.msg_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.salt_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.code_id_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.fix_msg_)*/ false

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct InstantiateContract2ProposalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InstantiateContract2ProposalDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~InstantiateContract2ProposalDefaultTypeInternal() {}
  union {
    InstantiateContract2Proposal _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InstantiateContract2ProposalDefaultTypeInternal _InstantiateContract2Proposal_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MigrateContractProposal::MigrateContractProposal(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.title_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.description_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.contract_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.msg_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.code_id_)*/ ::uint64_t{0u}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MigrateContractProposalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MigrateContractProposalDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MigrateContractProposalDefaultTypeInternal() {}
  union {
    MigrateContractProposal _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MigrateContractProposalDefaultTypeInternal _MigrateContractProposal_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR SudoContractProposal::SudoContractProposal(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.title_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.description_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.contract_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.msg_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SudoContractProposalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SudoContractProposalDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SudoContractProposalDefaultTypeInternal() {}
  union {
    SudoContractProposal _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SudoContractProposalDefaultTypeInternal _SudoContractProposal_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ExecuteContractProposal::ExecuteContractProposal(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.funds_)*/{}
  , /*decltype(_impl_.title_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.description_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.run_as_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.contract_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.msg_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ExecuteContractProposalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExecuteContractProposalDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExecuteContractProposalDefaultTypeInternal() {}
  union {
    ExecuteContractProposal _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExecuteContractProposalDefaultTypeInternal _ExecuteContractProposal_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR UpdateAdminProposal::UpdateAdminProposal(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.title_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.description_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.new_admin_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.contract_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UpdateAdminProposalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateAdminProposalDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateAdminProposalDefaultTypeInternal() {}
  union {
    UpdateAdminProposal _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateAdminProposalDefaultTypeInternal _UpdateAdminProposal_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ClearAdminProposal::ClearAdminProposal(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.title_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.description_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.contract_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ClearAdminProposalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClearAdminProposalDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClearAdminProposalDefaultTypeInternal() {}
  union {
    ClearAdminProposal _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClearAdminProposalDefaultTypeInternal _ClearAdminProposal_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR PinCodesProposal::PinCodesProposal(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.code_ids_)*/ {}
  ,/* _impl_._code_ids_cached_byte_size_ = */ { 0 }

  , /*decltype(_impl_.title_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.description_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PinCodesProposalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PinCodesProposalDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PinCodesProposalDefaultTypeInternal() {}
  union {
    PinCodesProposal _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PinCodesProposalDefaultTypeInternal _PinCodesProposal_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR UnpinCodesProposal::UnpinCodesProposal(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.code_ids_)*/ {}
  ,/* _impl_._code_ids_cached_byte_size_ = */ { 0 }

  , /*decltype(_impl_.title_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.description_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UnpinCodesProposalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UnpinCodesProposalDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~UnpinCodesProposalDefaultTypeInternal() {}
  union {
    UnpinCodesProposal _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UnpinCodesProposalDefaultTypeInternal _UnpinCodesProposal_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR AccessConfigUpdate::AccessConfigUpdate(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.instantiate_permission_)*/nullptr
  , /*decltype(_impl_.code_id_)*/ ::uint64_t{0u}
} {}
struct AccessConfigUpdateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AccessConfigUpdateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AccessConfigUpdateDefaultTypeInternal() {}
  union {
    AccessConfigUpdate _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AccessConfigUpdateDefaultTypeInternal _AccessConfigUpdate_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR UpdateInstantiateConfigProposal::UpdateInstantiateConfigProposal(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.access_config_updates_)*/{}
  , /*decltype(_impl_.title_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.description_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UpdateInstantiateConfigProposalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateInstantiateConfigProposalDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateInstantiateConfigProposalDefaultTypeInternal() {}
  union {
    UpdateInstantiateConfigProposal _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateInstantiateConfigProposalDefaultTypeInternal _UpdateInstantiateConfigProposal_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR StoreAndInstantiateContractProposal::StoreAndInstantiateContractProposal(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.funds_)*/{}
  , /*decltype(_impl_.title_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.description_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.run_as_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.wasm_byte_code_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.admin_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.label_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.msg_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.source_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.builder_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.code_hash_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.instantiate_permission_)*/nullptr
  , /*decltype(_impl_.unpin_code_)*/ false
} {}
struct StoreAndInstantiateContractProposalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StoreAndInstantiateContractProposalDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StoreAndInstantiateContractProposalDefaultTypeInternal() {}
  union {
    StoreAndInstantiateContractProposal _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StoreAndInstantiateContractProposalDefaultTypeInternal _StoreAndInstantiateContractProposal_default_instance_;
}  // namespace v1
}  // namespace wasm
}  // namespace cosmwasm
static ::_pb::Metadata file_level_metadata_cosmwasm_2fwasm_2fv1_2fproposal_2eproto[13];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_cosmwasm_2fwasm_2fv1_2fproposal_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_cosmwasm_2fwasm_2fv1_2fproposal_2eproto = nullptr;
const ::uint32_t TableStruct_cosmwasm_2fwasm_2fv1_2fproposal_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::StoreCodeProposal, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::StoreCodeProposal, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::StoreCodeProposal, _impl_.title_),
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::StoreCodeProposal, _impl_.description_),
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::StoreCodeProposal, _impl_.run_as_),
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::StoreCodeProposal, _impl_.wasm_byte_code_),
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::StoreCodeProposal, _impl_.instantiate_permission_),
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::StoreCodeProposal, _impl_.unpin_code_),
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::StoreCodeProposal, _impl_.source_),
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::StoreCodeProposal, _impl_.builder_),
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::StoreCodeProposal, _impl_.code_hash_),
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    0,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::InstantiateContractProposal, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::InstantiateContractProposal, _impl_.title_),
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::InstantiateContractProposal, _impl_.description_),
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::InstantiateContractProposal, _impl_.run_as_),
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::InstantiateContractProposal, _impl_.admin_),
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::InstantiateContractProposal, _impl_.code_id_),
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::InstantiateContractProposal, _impl_.label_),
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::InstantiateContractProposal, _impl_.msg_),
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::InstantiateContractProposal, _impl_.funds_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::InstantiateContract2Proposal, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::InstantiateContract2Proposal, _impl_.title_),
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::InstantiateContract2Proposal, _impl_.description_),
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::InstantiateContract2Proposal, _impl_.run_as_),
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::InstantiateContract2Proposal, _impl_.admin_),
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::InstantiateContract2Proposal, _impl_.code_id_),
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::InstantiateContract2Proposal, _impl_.label_),
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::InstantiateContract2Proposal, _impl_.msg_),
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::InstantiateContract2Proposal, _impl_.funds_),
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::InstantiateContract2Proposal, _impl_.salt_),
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::InstantiateContract2Proposal, _impl_.fix_msg_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::MigrateContractProposal, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::MigrateContractProposal, _impl_.title_),
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::MigrateContractProposal, _impl_.description_),
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::MigrateContractProposal, _impl_.contract_),
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::MigrateContractProposal, _impl_.code_id_),
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::MigrateContractProposal, _impl_.msg_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::SudoContractProposal, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::SudoContractProposal, _impl_.title_),
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::SudoContractProposal, _impl_.description_),
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::SudoContractProposal, _impl_.contract_),
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::SudoContractProposal, _impl_.msg_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::ExecuteContractProposal, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::ExecuteContractProposal, _impl_.title_),
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::ExecuteContractProposal, _impl_.description_),
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::ExecuteContractProposal, _impl_.run_as_),
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::ExecuteContractProposal, _impl_.contract_),
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::ExecuteContractProposal, _impl_.msg_),
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::ExecuteContractProposal, _impl_.funds_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::UpdateAdminProposal, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::UpdateAdminProposal, _impl_.title_),
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::UpdateAdminProposal, _impl_.description_),
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::UpdateAdminProposal, _impl_.new_admin_),
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::UpdateAdminProposal, _impl_.contract_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::ClearAdminProposal, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::ClearAdminProposal, _impl_.title_),
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::ClearAdminProposal, _impl_.description_),
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::ClearAdminProposal, _impl_.contract_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::PinCodesProposal, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::PinCodesProposal, _impl_.title_),
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::PinCodesProposal, _impl_.description_),
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::PinCodesProposal, _impl_.code_ids_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::UnpinCodesProposal, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::UnpinCodesProposal, _impl_.title_),
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::UnpinCodesProposal, _impl_.description_),
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::UnpinCodesProposal, _impl_.code_ids_),
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::AccessConfigUpdate, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::AccessConfigUpdate, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::AccessConfigUpdate, _impl_.code_id_),
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::AccessConfigUpdate, _impl_.instantiate_permission_),
    ~0u,
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::UpdateInstantiateConfigProposal, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::UpdateInstantiateConfigProposal, _impl_.title_),
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::UpdateInstantiateConfigProposal, _impl_.description_),
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::UpdateInstantiateConfigProposal, _impl_.access_config_updates_),
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::StoreAndInstantiateContractProposal, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::StoreAndInstantiateContractProposal, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::StoreAndInstantiateContractProposal, _impl_.title_),
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::StoreAndInstantiateContractProposal, _impl_.description_),
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::StoreAndInstantiateContractProposal, _impl_.run_as_),
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::StoreAndInstantiateContractProposal, _impl_.wasm_byte_code_),
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::StoreAndInstantiateContractProposal, _impl_.instantiate_permission_),
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::StoreAndInstantiateContractProposal, _impl_.unpin_code_),
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::StoreAndInstantiateContractProposal, _impl_.admin_),
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::StoreAndInstantiateContractProposal, _impl_.label_),
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::StoreAndInstantiateContractProposal, _impl_.msg_),
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::StoreAndInstantiateContractProposal, _impl_.funds_),
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::StoreAndInstantiateContractProposal, _impl_.source_),
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::StoreAndInstantiateContractProposal, _impl_.builder_),
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::StoreAndInstantiateContractProposal, _impl_.code_hash_),
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    0,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 17, -1, sizeof(::cosmwasm::wasm::v1::StoreCodeProposal)},
        { 26, -1, -1, sizeof(::cosmwasm::wasm::v1::InstantiateContractProposal)},
        { 42, -1, -1, sizeof(::cosmwasm::wasm::v1::InstantiateContract2Proposal)},
        { 60, -1, -1, sizeof(::cosmwasm::wasm::v1::MigrateContractProposal)},
        { 73, -1, -1, sizeof(::cosmwasm::wasm::v1::SudoContractProposal)},
        { 85, -1, -1, sizeof(::cosmwasm::wasm::v1::ExecuteContractProposal)},
        { 99, -1, -1, sizeof(::cosmwasm::wasm::v1::UpdateAdminProposal)},
        { 111, -1, -1, sizeof(::cosmwasm::wasm::v1::ClearAdminProposal)},
        { 122, -1, -1, sizeof(::cosmwasm::wasm::v1::PinCodesProposal)},
        { 133, -1, -1, sizeof(::cosmwasm::wasm::v1::UnpinCodesProposal)},
        { 144, 154, -1, sizeof(::cosmwasm::wasm::v1::AccessConfigUpdate)},
        { 156, -1, -1, sizeof(::cosmwasm::wasm::v1::UpdateInstantiateConfigProposal)},
        { 167, 188, -1, sizeof(::cosmwasm::wasm::v1::StoreAndInstantiateContractProposal)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::cosmwasm::wasm::v1::_StoreCodeProposal_default_instance_._instance,
    &::cosmwasm::wasm::v1::_InstantiateContractProposal_default_instance_._instance,
    &::cosmwasm::wasm::v1::_InstantiateContract2Proposal_default_instance_._instance,
    &::cosmwasm::wasm::v1::_MigrateContractProposal_default_instance_._instance,
    &::cosmwasm::wasm::v1::_SudoContractProposal_default_instance_._instance,
    &::cosmwasm::wasm::v1::_ExecuteContractProposal_default_instance_._instance,
    &::cosmwasm::wasm::v1::_UpdateAdminProposal_default_instance_._instance,
    &::cosmwasm::wasm::v1::_ClearAdminProposal_default_instance_._instance,
    &::cosmwasm::wasm::v1::_PinCodesProposal_default_instance_._instance,
    &::cosmwasm::wasm::v1::_UnpinCodesProposal_default_instance_._instance,
    &::cosmwasm::wasm::v1::_AccessConfigUpdate_default_instance_._instance,
    &::cosmwasm::wasm::v1::_UpdateInstantiateConfigProposal_default_instance_._instance,
    &::cosmwasm::wasm::v1::_StoreAndInstantiateContractProposal_default_instance_._instance,
};
const char descriptor_table_protodef_cosmwasm_2fwasm_2fv1_2fproposal_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\037cosmwasm/wasm/v1/proposal.proto\022\020cosmw"
    "asm.wasm.v1\032\024gogoproto/gogo.proto\032\031cosmo"
    "s_proto/cosmos.proto\032\036cosmos/base/v1beta"
    "1/coin.proto\032\034cosmwasm/wasm/v1/types.pro"
    "to\032\021amino/amino.proto\"\250\003\n\021StoreCodePropo"
    "sal\022\024\n\005title\030\001 \001(\tR\005title\022 \n\013description"
    "\030\002 \001(\tR\013description\022\025\n\006run_as\030\003 \001(\tR\005run"
    "As\0226\n\016wasm_byte_code\030\004 \001(\014B\020\342\336\037\014WASMByte"
    "CodeR\014wasmByteCode\022U\n\026instantiate_permis"
    "sion\030\007 \001(\0132\036.cosmwasm.wasm.v1.AccessConf"
    "igR\025instantiatePermission\022\035\n\nunpin_code\030"
    "\010 \001(\010R\tunpinCode\022\026\n\006source\030\t \001(\tR\006source"
    "\022\030\n\007builder\030\n \001(\tR\007builder\022\033\n\tcode_hash\030"
    "\013 \001(\014R\010codeHash:;\030\001\312\264-\032cosmos.gov.v1beta"
    "1.Content\212\347\260*\026wasm/StoreCodeProposalJ\004\010\005"
    "\020\006J\004\010\006\020\007\"\226\003\n\033InstantiateContractProposal"
    "\022\024\n\005title\030\001 \001(\tR\005title\022 \n\013description\030\002 "
    "\001(\tR\013description\022\025\n\006run_as\030\003 \001(\tR\005runAs\022"
    "\024\n\005admin\030\004 \001(\tR\005admin\022#\n\007code_id\030\005 \001(\004B\n"
    "\342\336\037\006CodeIDR\006codeId\022\024\n\005label\030\006 \001(\tR\005label"
    "\022(\n\003msg\030\007 \001(\014B\026\372\336\037\022RawContractMessageR\003m"
    "sg\022f\n\005funds\030\010 \003(\0132\031.cosmos.base.v1beta1."
    "CoinB5\310\336\037\000\252\337\037(github.com/cosmos/cosmos-s"
    "dk/types.Coins\250\347\260*\001R\005funds:E\030\001\312\264-\032cosmos"
    ".gov.v1beta1.Content\212\347\260* wasm/Instantiat"
    "eContractProposal\"\305\003\n\034InstantiateContrac"
    "t2Proposal\022\024\n\005title\030\001 \001(\tR\005title\022 \n\013desc"
    "ription\030\002 \001(\tR\013description\022\025\n\006run_as\030\003 \001"
    "(\tR\005runAs\022\024\n\005admin\030\004 \001(\tR\005admin\022#\n\007code_"
    "id\030\005 \001(\004B\n\342\336\037\006CodeIDR\006codeId\022\024\n\005label\030\006 "
    "\001(\tR\005label\022(\n\003msg\030\007 \001(\014B\026\372\336\037\022RawContract"
    "MessageR\003msg\022f\n\005funds\030\010 \003(\0132\031.cosmos.bas"
    "e.v1beta1.CoinB5\310\336\037\000\252\337\037(github.com/cosmo"
    "s/cosmos-sdk/types.Coins\250\347\260*\001R\005funds\022\022\n\004"
    "salt\030\t \001(\014R\004salt\022\027\n\007fix_msg\030\n \001(\010R\006fixMs"
    "g:F\030\001\312\264-\032cosmos.gov.v1beta1.Content\212\347\260*!"
    "wasm/InstantiateContract2Proposal\"\377\001\n\027Mi"
    "grateContractProposal\022\024\n\005title\030\001 \001(\tR\005ti"
    "tle\022 \n\013description\030\002 \001(\tR\013description\022\032\n"
    "\010contract\030\004 \001(\tR\010contract\022#\n\007code_id\030\005 \001"
    "(\004B\n\342\336\037\006CodeIDR\006codeId\022(\n\003msg\030\006 \001(\014B\026\372\336\037"
    "\022RawContractMessageR\003msg:A\030\001\312\264-\032cosmos.g"
    "ov.v1beta1.Content\212\347\260*\034wasm/MigrateContr"
    "actProposal\"\324\001\n\024SudoContractProposal\022\024\n\005"
    "title\030\001 \001(\tR\005title\022 \n\013description\030\002 \001(\tR"
    "\013description\022\032\n\010contract\030\003 \001(\tR\010contract"
    "\022(\n\003msg\030\004 \001(\014B\026\372\336\037\022RawContractMessageR\003m"
    "sg:>\030\001\312\264-\032cosmos.gov.v1beta1.Content\212\347\260*"
    "\031wasm/SudoContractProposal\"\331\002\n\027ExecuteCo"
    "ntractProposal\022\024\n\005title\030\001 \001(\tR\005title\022 \n\013"
    "description\030\002 \001(\tR\013description\022\025\n\006run_as"
    "\030\003 \001(\tR\005runAs\022\032\n\010contract\030\004 \001(\tR\010contrac"
    "t\022(\n\003msg\030\005 \001(\014B\026\372\336\037\022RawContractMessageR\003"
    "msg\022f\n\005funds\030\006 \003(\0132\031.cosmos.base.v1beta1"
    ".CoinB5\310\336\037\000\252\337\037(github.com/cosmos/cosmos-"
    "sdk/types.Coins\250\347\260*\001R\005funds:A\030\001\312\264-\032cosmo"
    "s.gov.v1beta1.Content\212\347\260*\034wasm/ExecuteCo"
    "ntractProposal\"\333\001\n\023UpdateAdminProposal\022\024"
    "\n\005title\030\001 \001(\tR\005title\022 \n\013description\030\002 \001("
    "\tR\013description\0221\n\tnew_admin\030\003 \001(\tB\024\362\336\037\020y"
    "aml:\"new_admin\"R\010newAdmin\022\032\n\010contract\030\004 "
    "\001(\tR\010contract:=\030\001\312\264-\032cosmos.gov.v1beta1."
    "Content\212\347\260*\030wasm/UpdateAdminProposal\"\246\001\n"
    "\022ClearAdminProposal\022\024\n\005title\030\001 \001(\tR\005titl"
    "e\022 \n\013description\030\002 \001(\tR\013description\022\032\n\010c"
    "ontract\030\003 \001(\tR\010contract:<\030\001\312\264-\032cosmos.go"
    "v.v1beta1.Content\212\347\260*\027wasm/ClearAdminPro"
    "posal\"\353\001\n\020PinCodesProposal\022&\n\005title\030\001 \001("
    "\tB\020\362\336\037\014yaml:\"title\"R\005title\0228\n\013descriptio"
    "n\030\002 \001(\tB\026\362\336\037\022yaml:\"description\"R\013descrip"
    "tion\0229\n\010code_ids\030\003 \003(\004B\036\342\336\037\007CodeIDs\362\336\037\017y"
    "aml:\"code_ids\"R\007codeIds::\030\001\312\264-\032cosmos.go"
    "v.v1beta1.Content\212\347\260*\025wasm/PinCodesPropo"
    "sal\"\357\001\n\022UnpinCodesProposal\022&\n\005title\030\001 \001("
    "\tB\020\362\336\037\014yaml:\"title\"R\005title\0228\n\013descriptio"
    "n\030\002 \001(\tB\026\362\336\037\022yaml:\"description\"R\013descrip"
    "tion\0229\n\010code_ids\030\003 \003(\004B\036\342\336\037\007CodeIDs\362\336\037\017y"
    "aml:\"code_ids\"R\007codeIds:<\030\001\312\264-\032cosmos.go"
    "v.v1beta1.Content\212\347\260*\027wasm/UnpinCodesPro"
    "posal\"\233\001\n\022AccessConfigUpdate\022#\n\007code_id\030"
    "\001 \001(\004B\n\342\336\037\006CodeIDR\006codeId\022`\n\026instantiate"
    "_permission\030\002 \001(\0132\036.cosmwasm.wasm.v1.Acc"
    "essConfigB\t\310\336\037\000\250\347\260*\001R\025instantiatePermiss"
    "ion\"\263\002\n\037UpdateInstantiateConfigProposal\022"
    "&\n\005title\030\001 \001(\tB\020\362\336\037\014yaml:\"title\"R\005title\022"
    "8\n\013description\030\002 \001(\tB\026\362\336\037\022yaml:\"descript"
    "ion\"R\013description\022c\n\025access_config_updat"
    "es\030\003 \003(\0132$.cosmwasm.wasm.v1.AccessConfig"
    "UpdateB\t\310\336\037\000\250\347\260*\001R\023accessConfigUpdates:I"
    "\030\001\312\264-\032cosmos.gov.v1beta1.Content\212\347\260*$was"
    "m/UpdateInstantiateConfigProposal\"\376\004\n#St"
    "oreAndInstantiateContractProposal\022\024\n\005tit"
    "le\030\001 \001(\tR\005title\022 \n\013description\030\002 \001(\tR\013de"
    "scription\022\025\n\006run_as\030\003 \001(\tR\005runAs\0226\n\016wasm"
    "_byte_code\030\004 \001(\014B\020\342\336\037\014WASMByteCodeR\014wasm"
    "ByteCode\022U\n\026instantiate_permission\030\005 \001(\013"
    "2\036.cosmwasm.wasm.v1.AccessConfigR\025instan"
    "tiatePermission\022\035\n\nunpin_code\030\006 \001(\010R\tunp"
    "inCode\022\024\n\005admin\030\007 \001(\tR\005admin\022\024\n\005label\030\010 "
    "\001(\tR\005label\022(\n\003msg\030\t \001(\014B\026\372\336\037\022RawContract"
    "MessageR\003msg\022f\n\005funds\030\n \003(\0132\031.cosmos.bas"
    "e.v1beta1.CoinB5\310\336\037\000\252\337\037(github.com/cosmo"
    "s/cosmos-sdk/types.Coins\250\347\260*\001R\005funds\022\026\n\006"
    "source\030\013 \001(\tR\006source\022\030\n\007builder\030\014 \001(\tR\007b"
    "uilder\022\033\n\tcode_hash\030\r \001(\014R\010codeHash:M\030\001\312"
    "\264-\032cosmos.gov.v1beta1.Content\212\347\260*(wasm/S"
    "toreAndInstantiateContractProposalB\273\001\n\024c"
    "om.cosmwasm.wasm.v1B\rProposalProtoP\001Z&gi"
    "thub.com/CosmWasm/wasmd/x/wasm/types\242\002\003C"
    "WX\252\002\020Cosmwasm.Wasm.V1\312\002\020Cosmwasm\\Wasm\\V1"
    "\342\002\034Cosmwasm\\Wasm\\V1\\GPBMetadata\352\002\022Cosmwa"
    "sm::Wasm::V1\310\341\036\000\330\341\036\000\250\342\036\001b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_cosmwasm_2fwasm_2fv1_2fproposal_2eproto_deps[5] =
    {
        &::descriptor_table_amino_2famino_2eproto,
        &::descriptor_table_cosmos_2fbase_2fv1beta1_2fcoin_2eproto,
        &::descriptor_table_cosmos_5fproto_2fcosmos_2eproto,
        &::descriptor_table_cosmwasm_2fwasm_2fv1_2ftypes_2eproto,
        &::descriptor_table_gogoproto_2fgogo_2eproto,
};
static ::absl::once_flag descriptor_table_cosmwasm_2fwasm_2fv1_2fproposal_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_cosmwasm_2fwasm_2fv1_2fproposal_2eproto = {
    false,
    false,
    4472,
    descriptor_table_protodef_cosmwasm_2fwasm_2fv1_2fproposal_2eproto,
    "cosmwasm/wasm/v1/proposal.proto",
    &descriptor_table_cosmwasm_2fwasm_2fv1_2fproposal_2eproto_once,
    descriptor_table_cosmwasm_2fwasm_2fv1_2fproposal_2eproto_deps,
    5,
    13,
    schemas,
    file_default_instances,
    TableStruct_cosmwasm_2fwasm_2fv1_2fproposal_2eproto::offsets,
    file_level_metadata_cosmwasm_2fwasm_2fv1_2fproposal_2eproto,
    file_level_enum_descriptors_cosmwasm_2fwasm_2fv1_2fproposal_2eproto,
    file_level_service_descriptors_cosmwasm_2fwasm_2fv1_2fproposal_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_cosmwasm_2fwasm_2fv1_2fproposal_2eproto_getter() {
  return &descriptor_table_cosmwasm_2fwasm_2fv1_2fproposal_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_cosmwasm_2fwasm_2fv1_2fproposal_2eproto(&descriptor_table_cosmwasm_2fwasm_2fv1_2fproposal_2eproto);
namespace cosmwasm {
namespace wasm {
namespace v1 {
// ===================================================================

class StoreCodeProposal::_Internal {
 public:
  using HasBits = decltype(std::declval<StoreCodeProposal>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(StoreCodeProposal, _impl_._has_bits_);
  static const ::cosmwasm::wasm::v1::AccessConfig& instantiate_permission(const StoreCodeProposal* msg);
  static void set_has_instantiate_permission(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::cosmwasm::wasm::v1::AccessConfig&
StoreCodeProposal::_Internal::instantiate_permission(const StoreCodeProposal* msg) {
  return *msg->_impl_.instantiate_permission_;
}
void StoreCodeProposal::clear_instantiate_permission() {
  if (_impl_.instantiate_permission_ != nullptr) _impl_.instantiate_permission_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
StoreCodeProposal::StoreCodeProposal(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmwasm.wasm.v1.StoreCodeProposal)
}
StoreCodeProposal::StoreCodeProposal(const StoreCodeProposal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StoreCodeProposal* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.title_) {}

    , decltype(_impl_.description_) {}

    , decltype(_impl_.run_as_) {}

    , decltype(_impl_.wasm_byte_code_) {}

    , decltype(_impl_.source_) {}

    , decltype(_impl_.builder_) {}

    , decltype(_impl_.code_hash_) {}

    , decltype(_impl_.instantiate_permission_){nullptr}
    , decltype(_impl_.unpin_code_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.title_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_title().empty()) {
    _this->_impl_.title_.Set(from._internal_title(), _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.description_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), _this->GetArenaForAllocation());
  }
  _impl_.run_as_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.run_as_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_run_as().empty()) {
    _this->_impl_.run_as_.Set(from._internal_run_as(), _this->GetArenaForAllocation());
  }
  _impl_.wasm_byte_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.wasm_byte_code_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_wasm_byte_code().empty()) {
    _this->_impl_.wasm_byte_code_.Set(from._internal_wasm_byte_code(), _this->GetArenaForAllocation());
  }
  _impl_.source_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.source_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_source().empty()) {
    _this->_impl_.source_.Set(from._internal_source(), _this->GetArenaForAllocation());
  }
  _impl_.builder_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.builder_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_builder().empty()) {
    _this->_impl_.builder_.Set(from._internal_builder(), _this->GetArenaForAllocation());
  }
  _impl_.code_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.code_hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_code_hash().empty()) {
    _this->_impl_.code_hash_.Set(from._internal_code_hash(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.instantiate_permission_ = new ::cosmwasm::wasm::v1::AccessConfig(*from._impl_.instantiate_permission_);
  }
  _this->_impl_.unpin_code_ = from._impl_.unpin_code_;
  // @@protoc_insertion_point(copy_constructor:cosmwasm.wasm.v1.StoreCodeProposal)
}

inline void StoreCodeProposal::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.title_) {}

    , decltype(_impl_.description_) {}

    , decltype(_impl_.run_as_) {}

    , decltype(_impl_.wasm_byte_code_) {}

    , decltype(_impl_.source_) {}

    , decltype(_impl_.builder_) {}

    , decltype(_impl_.code_hash_) {}

    , decltype(_impl_.instantiate_permission_){nullptr}
    , decltype(_impl_.unpin_code_) { false }

  };
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.title_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.description_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.run_as_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.run_as_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.wasm_byte_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.wasm_byte_code_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.source_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.source_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.builder_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.builder_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.code_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.code_hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StoreCodeProposal::~StoreCodeProposal() {
  // @@protoc_insertion_point(destructor:cosmwasm.wasm.v1.StoreCodeProposal)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StoreCodeProposal::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.title_.Destroy();
  _impl_.description_.Destroy();
  _impl_.run_as_.Destroy();
  _impl_.wasm_byte_code_.Destroy();
  _impl_.source_.Destroy();
  _impl_.builder_.Destroy();
  _impl_.code_hash_.Destroy();
  if (this != internal_default_instance()) delete _impl_.instantiate_permission_;
}

void StoreCodeProposal::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StoreCodeProposal::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmwasm.wasm.v1.StoreCodeProposal)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.title_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  _impl_.run_as_.ClearToEmpty();
  _impl_.wasm_byte_code_.ClearToEmpty();
  _impl_.source_.ClearToEmpty();
  _impl_.builder_.ClearToEmpty();
  _impl_.code_hash_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.instantiate_permission_ != nullptr);
    _impl_.instantiate_permission_->Clear();
  }
  _impl_.unpin_code_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StoreCodeProposal::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string title = 1 [json_name = "title"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmwasm.wasm.v1.StoreCodeProposal.title"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string description = 2 [json_name = "description"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmwasm.wasm.v1.StoreCodeProposal.description"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string run_as = 3 [json_name = "runAs"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_run_as();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmwasm.wasm.v1.StoreCodeProposal.run_as"));
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes wasm_byte_code = 4 [json_name = "wasmByteCode", (.gogoproto.customname) = "WASMByteCode"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_wasm_byte_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .cosmwasm.wasm.v1.AccessConfig instantiate_permission = 7 [json_name = "instantiatePermission"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_instantiate_permission(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bool unpin_code = 8 [json_name = "unpinCode"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 64)) {
          _impl_.unpin_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string source = 9 [json_name = "source"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_source();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmwasm.wasm.v1.StoreCodeProposal.source"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string builder = 10 [json_name = "builder"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_builder();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmwasm.wasm.v1.StoreCodeProposal.builder"));
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes code_hash = 11 [json_name = "codeHash"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_code_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* StoreCodeProposal::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmwasm.wasm.v1.StoreCodeProposal)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string title = 1 [json_name = "title"];
  if (!this->_internal_title().empty()) {
    const std::string& _s = this->_internal_title();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmwasm.wasm.v1.StoreCodeProposal.title");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string description = 2 [json_name = "description"];
  if (!this->_internal_description().empty()) {
    const std::string& _s = this->_internal_description();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmwasm.wasm.v1.StoreCodeProposal.description");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string run_as = 3 [json_name = "runAs"];
  if (!this->_internal_run_as().empty()) {
    const std::string& _s = this->_internal_run_as();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmwasm.wasm.v1.StoreCodeProposal.run_as");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // bytes wasm_byte_code = 4 [json_name = "wasmByteCode", (.gogoproto.customname) = "WASMByteCode"];
  if (!this->_internal_wasm_byte_code().empty()) {
    const std::string& _s = this->_internal_wasm_byte_code();
    target = stream->WriteBytesMaybeAliased(4, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .cosmwasm.wasm.v1.AccessConfig instantiate_permission = 7 [json_name = "instantiatePermission"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::instantiate_permission(this),
        _Internal::instantiate_permission(this).GetCachedSize(), target, stream);
  }

  // bool unpin_code = 8 [json_name = "unpinCode"];
  if (this->_internal_unpin_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        8, this->_internal_unpin_code(), target);
  }

  // string source = 9 [json_name = "source"];
  if (!this->_internal_source().empty()) {
    const std::string& _s = this->_internal_source();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmwasm.wasm.v1.StoreCodeProposal.source");
    target = stream->WriteStringMaybeAliased(9, _s, target);
  }

  // string builder = 10 [json_name = "builder"];
  if (!this->_internal_builder().empty()) {
    const std::string& _s = this->_internal_builder();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmwasm.wasm.v1.StoreCodeProposal.builder");
    target = stream->WriteStringMaybeAliased(10, _s, target);
  }

  // bytes code_hash = 11 [json_name = "codeHash"];
  if (!this->_internal_code_hash().empty()) {
    const std::string& _s = this->_internal_code_hash();
    target = stream->WriteBytesMaybeAliased(11, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmwasm.wasm.v1.StoreCodeProposal)
  return target;
}

::size_t StoreCodeProposal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmwasm.wasm.v1.StoreCodeProposal)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string title = 1 [json_name = "title"];
  if (!this->_internal_title().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_title());
  }

  // string description = 2 [json_name = "description"];
  if (!this->_internal_description().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_description());
  }

  // string run_as = 3 [json_name = "runAs"];
  if (!this->_internal_run_as().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_run_as());
  }

  // bytes wasm_byte_code = 4 [json_name = "wasmByteCode", (.gogoproto.customname) = "WASMByteCode"];
  if (!this->_internal_wasm_byte_code().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_wasm_byte_code());
  }

  // string source = 9 [json_name = "source"];
  if (!this->_internal_source().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_source());
  }

  // string builder = 10 [json_name = "builder"];
  if (!this->_internal_builder().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_builder());
  }

  // bytes code_hash = 11 [json_name = "codeHash"];
  if (!this->_internal_code_hash().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_code_hash());
  }

  // .cosmwasm.wasm.v1.AccessConfig instantiate_permission = 7 [json_name = "instantiatePermission"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.instantiate_permission_);
  }

  // bool unpin_code = 8 [json_name = "unpinCode"];
  if (this->_internal_unpin_code() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StoreCodeProposal::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StoreCodeProposal::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StoreCodeProposal::GetClassData() const { return &_class_data_; }


void StoreCodeProposal::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StoreCodeProposal*>(&to_msg);
  auto& from = static_cast<const StoreCodeProposal&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmwasm.wasm.v1.StoreCodeProposal)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_title().empty()) {
    _this->_internal_set_title(from._internal_title());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  if (!from._internal_run_as().empty()) {
    _this->_internal_set_run_as(from._internal_run_as());
  }
  if (!from._internal_wasm_byte_code().empty()) {
    _this->_internal_set_wasm_byte_code(from._internal_wasm_byte_code());
  }
  if (!from._internal_source().empty()) {
    _this->_internal_set_source(from._internal_source());
  }
  if (!from._internal_builder().empty()) {
    _this->_internal_set_builder(from._internal_builder());
  }
  if (!from._internal_code_hash().empty()) {
    _this->_internal_set_code_hash(from._internal_code_hash());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_instantiate_permission()->::cosmwasm::wasm::v1::AccessConfig::MergeFrom(
        from._internal_instantiate_permission());
  }
  if (from._internal_unpin_code() != 0) {
    _this->_internal_set_unpin_code(from._internal_unpin_code());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StoreCodeProposal::CopyFrom(const StoreCodeProposal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmwasm.wasm.v1.StoreCodeProposal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoreCodeProposal::IsInitialized() const {
  return true;
}

void StoreCodeProposal::InternalSwap(StoreCodeProposal* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.title_, lhs_arena,
                                       &other->_impl_.title_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.description_, lhs_arena,
                                       &other->_impl_.description_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.run_as_, lhs_arena,
                                       &other->_impl_.run_as_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.wasm_byte_code_, lhs_arena,
                                       &other->_impl_.wasm_byte_code_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.source_, lhs_arena,
                                       &other->_impl_.source_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.builder_, lhs_arena,
                                       &other->_impl_.builder_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.code_hash_, lhs_arena,
                                       &other->_impl_.code_hash_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StoreCodeProposal, _impl_.unpin_code_)
      + sizeof(StoreCodeProposal::_impl_.unpin_code_)
      - PROTOBUF_FIELD_OFFSET(StoreCodeProposal, _impl_.instantiate_permission_)>(
          reinterpret_cast<char*>(&_impl_.instantiate_permission_),
          reinterpret_cast<char*>(&other->_impl_.instantiate_permission_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StoreCodeProposal::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmwasm_2fwasm_2fv1_2fproposal_2eproto_getter, &descriptor_table_cosmwasm_2fwasm_2fv1_2fproposal_2eproto_once,
      file_level_metadata_cosmwasm_2fwasm_2fv1_2fproposal_2eproto[0]);
}
// ===================================================================

class InstantiateContractProposal::_Internal {
 public:
};

void InstantiateContractProposal::clear_funds() {
  _internal_mutable_funds()->Clear();
}
InstantiateContractProposal::InstantiateContractProposal(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmwasm.wasm.v1.InstantiateContractProposal)
}
InstantiateContractProposal::InstantiateContractProposal(const InstantiateContractProposal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  InstantiateContractProposal* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.funds_){from._impl_.funds_}
    , decltype(_impl_.title_) {}

    , decltype(_impl_.description_) {}

    , decltype(_impl_.run_as_) {}

    , decltype(_impl_.admin_) {}

    , decltype(_impl_.label_) {}

    , decltype(_impl_.msg_) {}

    , decltype(_impl_.code_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.title_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_title().empty()) {
    _this->_impl_.title_.Set(from._internal_title(), _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.description_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), _this->GetArenaForAllocation());
  }
  _impl_.run_as_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.run_as_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_run_as().empty()) {
    _this->_impl_.run_as_.Set(from._internal_run_as(), _this->GetArenaForAllocation());
  }
  _impl_.admin_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.admin_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_admin().empty()) {
    _this->_impl_.admin_.Set(from._internal_admin(), _this->GetArenaForAllocation());
  }
  _impl_.label_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.label_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_label().empty()) {
    _this->_impl_.label_.Set(from._internal_label(), _this->GetArenaForAllocation());
  }
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.msg_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_msg().empty()) {
    _this->_impl_.msg_.Set(from._internal_msg(), _this->GetArenaForAllocation());
  }
  _this->_impl_.code_id_ = from._impl_.code_id_;
  // @@protoc_insertion_point(copy_constructor:cosmwasm.wasm.v1.InstantiateContractProposal)
}

inline void InstantiateContractProposal::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.funds_){arena}
    , decltype(_impl_.title_) {}

    , decltype(_impl_.description_) {}

    , decltype(_impl_.run_as_) {}

    , decltype(_impl_.admin_) {}

    , decltype(_impl_.label_) {}

    , decltype(_impl_.msg_) {}

    , decltype(_impl_.code_id_) { ::uint64_t{0u} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.title_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.description_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.run_as_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.run_as_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.admin_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.admin_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.label_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.label_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.msg_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

InstantiateContractProposal::~InstantiateContractProposal() {
  // @@protoc_insertion_point(destructor:cosmwasm.wasm.v1.InstantiateContractProposal)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InstantiateContractProposal::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_funds()->~RepeatedPtrField();
  _impl_.title_.Destroy();
  _impl_.description_.Destroy();
  _impl_.run_as_.Destroy();
  _impl_.admin_.Destroy();
  _impl_.label_.Destroy();
  _impl_.msg_.Destroy();
}

void InstantiateContractProposal::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InstantiateContractProposal::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmwasm.wasm.v1.InstantiateContractProposal)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_funds()->Clear();
  _impl_.title_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  _impl_.run_as_.ClearToEmpty();
  _impl_.admin_.ClearToEmpty();
  _impl_.label_.ClearToEmpty();
  _impl_.msg_.ClearToEmpty();
  _impl_.code_id_ = ::uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InstantiateContractProposal::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string title = 1 [json_name = "title"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmwasm.wasm.v1.InstantiateContractProposal.title"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string description = 2 [json_name = "description"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmwasm.wasm.v1.InstantiateContractProposal.description"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string run_as = 3 [json_name = "runAs"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_run_as();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmwasm.wasm.v1.InstantiateContractProposal.run_as"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string admin = 4 [json_name = "admin"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_admin();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmwasm.wasm.v1.InstantiateContractProposal.admin"));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 code_id = 5 [json_name = "codeId", (.gogoproto.customname) = "CodeID"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _impl_.code_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string label = 6 [json_name = "label"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_label();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmwasm.wasm.v1.InstantiateContractProposal.label"));
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes msg = 7 [json_name = "msg", (.gogoproto.casttype) = "RawContractMessage"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_msg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .cosmos.base.v1beta1.Coin funds = 8 [json_name = "funds", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.dont_omitempty) = true];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_funds(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* InstantiateContractProposal::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmwasm.wasm.v1.InstantiateContractProposal)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string title = 1 [json_name = "title"];
  if (!this->_internal_title().empty()) {
    const std::string& _s = this->_internal_title();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmwasm.wasm.v1.InstantiateContractProposal.title");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string description = 2 [json_name = "description"];
  if (!this->_internal_description().empty()) {
    const std::string& _s = this->_internal_description();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmwasm.wasm.v1.InstantiateContractProposal.description");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string run_as = 3 [json_name = "runAs"];
  if (!this->_internal_run_as().empty()) {
    const std::string& _s = this->_internal_run_as();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmwasm.wasm.v1.InstantiateContractProposal.run_as");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string admin = 4 [json_name = "admin"];
  if (!this->_internal_admin().empty()) {
    const std::string& _s = this->_internal_admin();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmwasm.wasm.v1.InstantiateContractProposal.admin");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // uint64 code_id = 5 [json_name = "codeId", (.gogoproto.customname) = "CodeID"];
  if (this->_internal_code_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        5, this->_internal_code_id(), target);
  }

  // string label = 6 [json_name = "label"];
  if (!this->_internal_label().empty()) {
    const std::string& _s = this->_internal_label();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmwasm.wasm.v1.InstantiateContractProposal.label");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  // bytes msg = 7 [json_name = "msg", (.gogoproto.casttype) = "RawContractMessage"];
  if (!this->_internal_msg().empty()) {
    const std::string& _s = this->_internal_msg();
    target = stream->WriteBytesMaybeAliased(7, _s, target);
  }

  // repeated .cosmos.base.v1beta1.Coin funds = 8 [json_name = "funds", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.dont_omitempty) = true];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_funds_size()); i < n; i++) {
    const auto& repfield = this->_internal_funds(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmwasm.wasm.v1.InstantiateContractProposal)
  return target;
}

::size_t InstantiateContractProposal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmwasm.wasm.v1.InstantiateContractProposal)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cosmos.base.v1beta1.Coin funds = 8 [json_name = "funds", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.dont_omitempty) = true];
  total_size += 1UL * this->_internal_funds_size();
  for (const auto& msg : this->_internal_funds()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string title = 1 [json_name = "title"];
  if (!this->_internal_title().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_title());
  }

  // string description = 2 [json_name = "description"];
  if (!this->_internal_description().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_description());
  }

  // string run_as = 3 [json_name = "runAs"];
  if (!this->_internal_run_as().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_run_as());
  }

  // string admin = 4 [json_name = "admin"];
  if (!this->_internal_admin().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_admin());
  }

  // string label = 6 [json_name = "label"];
  if (!this->_internal_label().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_label());
  }

  // bytes msg = 7 [json_name = "msg", (.gogoproto.casttype) = "RawContractMessage"];
  if (!this->_internal_msg().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_msg());
  }

  // uint64 code_id = 5 [json_name = "codeId", (.gogoproto.customname) = "CodeID"];
  if (this->_internal_code_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_code_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InstantiateContractProposal::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    InstantiateContractProposal::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InstantiateContractProposal::GetClassData() const { return &_class_data_; }


void InstantiateContractProposal::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<InstantiateContractProposal*>(&to_msg);
  auto& from = static_cast<const InstantiateContractProposal&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmwasm.wasm.v1.InstantiateContractProposal)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_funds()->MergeFrom(from._internal_funds());
  if (!from._internal_title().empty()) {
    _this->_internal_set_title(from._internal_title());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  if (!from._internal_run_as().empty()) {
    _this->_internal_set_run_as(from._internal_run_as());
  }
  if (!from._internal_admin().empty()) {
    _this->_internal_set_admin(from._internal_admin());
  }
  if (!from._internal_label().empty()) {
    _this->_internal_set_label(from._internal_label());
  }
  if (!from._internal_msg().empty()) {
    _this->_internal_set_msg(from._internal_msg());
  }
  if (from._internal_code_id() != 0) {
    _this->_internal_set_code_id(from._internal_code_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InstantiateContractProposal::CopyFrom(const InstantiateContractProposal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmwasm.wasm.v1.InstantiateContractProposal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstantiateContractProposal::IsInitialized() const {
  return true;
}

void InstantiateContractProposal::InternalSwap(InstantiateContractProposal* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_funds()->InternalSwap(other->_internal_mutable_funds());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.title_, lhs_arena,
                                       &other->_impl_.title_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.description_, lhs_arena,
                                       &other->_impl_.description_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.run_as_, lhs_arena,
                                       &other->_impl_.run_as_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.admin_, lhs_arena,
                                       &other->_impl_.admin_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.label_, lhs_arena,
                                       &other->_impl_.label_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.msg_, lhs_arena,
                                       &other->_impl_.msg_, rhs_arena);

  swap(_impl_.code_id_, other->_impl_.code_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InstantiateContractProposal::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmwasm_2fwasm_2fv1_2fproposal_2eproto_getter, &descriptor_table_cosmwasm_2fwasm_2fv1_2fproposal_2eproto_once,
      file_level_metadata_cosmwasm_2fwasm_2fv1_2fproposal_2eproto[1]);
}
// ===================================================================

class InstantiateContract2Proposal::_Internal {
 public:
};

void InstantiateContract2Proposal::clear_funds() {
  _internal_mutable_funds()->Clear();
}
InstantiateContract2Proposal::InstantiateContract2Proposal(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmwasm.wasm.v1.InstantiateContract2Proposal)
}
InstantiateContract2Proposal::InstantiateContract2Proposal(const InstantiateContract2Proposal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  InstantiateContract2Proposal* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.funds_){from._impl_.funds_}
    , decltype(_impl_.title_) {}

    , decltype(_impl_.description_) {}

    , decltype(_impl_.run_as_) {}

    , decltype(_impl_.admin_) {}

    , decltype(_impl_.label_) {}

    , decltype(_impl_.msg_) {}

    , decltype(_impl_.salt_) {}

    , decltype(_impl_.code_id_) {}

    , decltype(_impl_.fix_msg_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.title_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_title().empty()) {
    _this->_impl_.title_.Set(from._internal_title(), _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.description_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), _this->GetArenaForAllocation());
  }
  _impl_.run_as_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.run_as_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_run_as().empty()) {
    _this->_impl_.run_as_.Set(from._internal_run_as(), _this->GetArenaForAllocation());
  }
  _impl_.admin_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.admin_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_admin().empty()) {
    _this->_impl_.admin_.Set(from._internal_admin(), _this->GetArenaForAllocation());
  }
  _impl_.label_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.label_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_label().empty()) {
    _this->_impl_.label_.Set(from._internal_label(), _this->GetArenaForAllocation());
  }
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.msg_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_msg().empty()) {
    _this->_impl_.msg_.Set(from._internal_msg(), _this->GetArenaForAllocation());
  }
  _impl_.salt_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.salt_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_salt().empty()) {
    _this->_impl_.salt_.Set(from._internal_salt(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.code_id_, &from._impl_.code_id_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.fix_msg_) -
    reinterpret_cast<char*>(&_impl_.code_id_)) + sizeof(_impl_.fix_msg_));
  // @@protoc_insertion_point(copy_constructor:cosmwasm.wasm.v1.InstantiateContract2Proposal)
}

inline void InstantiateContract2Proposal::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.funds_){arena}
    , decltype(_impl_.title_) {}

    , decltype(_impl_.description_) {}

    , decltype(_impl_.run_as_) {}

    , decltype(_impl_.admin_) {}

    , decltype(_impl_.label_) {}

    , decltype(_impl_.msg_) {}

    , decltype(_impl_.salt_) {}

    , decltype(_impl_.code_id_) { ::uint64_t{0u} }

    , decltype(_impl_.fix_msg_) { false }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.title_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.description_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.run_as_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.run_as_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.admin_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.admin_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.label_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.label_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.msg_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.salt_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.salt_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

InstantiateContract2Proposal::~InstantiateContract2Proposal() {
  // @@protoc_insertion_point(destructor:cosmwasm.wasm.v1.InstantiateContract2Proposal)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InstantiateContract2Proposal::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_funds()->~RepeatedPtrField();
  _impl_.title_.Destroy();
  _impl_.description_.Destroy();
  _impl_.run_as_.Destroy();
  _impl_.admin_.Destroy();
  _impl_.label_.Destroy();
  _impl_.msg_.Destroy();
  _impl_.salt_.Destroy();
}

void InstantiateContract2Proposal::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InstantiateContract2Proposal::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmwasm.wasm.v1.InstantiateContract2Proposal)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_funds()->Clear();
  _impl_.title_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  _impl_.run_as_.ClearToEmpty();
  _impl_.admin_.ClearToEmpty();
  _impl_.label_.ClearToEmpty();
  _impl_.msg_.ClearToEmpty();
  _impl_.salt_.ClearToEmpty();
  ::memset(&_impl_.code_id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.fix_msg_) -
      reinterpret_cast<char*>(&_impl_.code_id_)) + sizeof(_impl_.fix_msg_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InstantiateContract2Proposal::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string title = 1 [json_name = "title"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmwasm.wasm.v1.InstantiateContract2Proposal.title"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string description = 2 [json_name = "description"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmwasm.wasm.v1.InstantiateContract2Proposal.description"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string run_as = 3 [json_name = "runAs"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_run_as();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmwasm.wasm.v1.InstantiateContract2Proposal.run_as"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string admin = 4 [json_name = "admin"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_admin();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmwasm.wasm.v1.InstantiateContract2Proposal.admin"));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 code_id = 5 [json_name = "codeId", (.gogoproto.customname) = "CodeID"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _impl_.code_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string label = 6 [json_name = "label"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_label();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmwasm.wasm.v1.InstantiateContract2Proposal.label"));
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes msg = 7 [json_name = "msg", (.gogoproto.casttype) = "RawContractMessage"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_msg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .cosmos.base.v1beta1.Coin funds = 8 [json_name = "funds", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.dont_omitempty) = true];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_funds(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes salt = 9 [json_name = "salt"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_salt();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bool fix_msg = 10 [json_name = "fixMsg"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 80)) {
          _impl_.fix_msg_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* InstantiateContract2Proposal::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmwasm.wasm.v1.InstantiateContract2Proposal)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string title = 1 [json_name = "title"];
  if (!this->_internal_title().empty()) {
    const std::string& _s = this->_internal_title();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmwasm.wasm.v1.InstantiateContract2Proposal.title");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string description = 2 [json_name = "description"];
  if (!this->_internal_description().empty()) {
    const std::string& _s = this->_internal_description();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmwasm.wasm.v1.InstantiateContract2Proposal.description");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string run_as = 3 [json_name = "runAs"];
  if (!this->_internal_run_as().empty()) {
    const std::string& _s = this->_internal_run_as();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmwasm.wasm.v1.InstantiateContract2Proposal.run_as");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string admin = 4 [json_name = "admin"];
  if (!this->_internal_admin().empty()) {
    const std::string& _s = this->_internal_admin();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmwasm.wasm.v1.InstantiateContract2Proposal.admin");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // uint64 code_id = 5 [json_name = "codeId", (.gogoproto.customname) = "CodeID"];
  if (this->_internal_code_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        5, this->_internal_code_id(), target);
  }

  // string label = 6 [json_name = "label"];
  if (!this->_internal_label().empty()) {
    const std::string& _s = this->_internal_label();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmwasm.wasm.v1.InstantiateContract2Proposal.label");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  // bytes msg = 7 [json_name = "msg", (.gogoproto.casttype) = "RawContractMessage"];
  if (!this->_internal_msg().empty()) {
    const std::string& _s = this->_internal_msg();
    target = stream->WriteBytesMaybeAliased(7, _s, target);
  }

  // repeated .cosmos.base.v1beta1.Coin funds = 8 [json_name = "funds", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.dont_omitempty) = true];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_funds_size()); i < n; i++) {
    const auto& repfield = this->_internal_funds(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  // bytes salt = 9 [json_name = "salt"];
  if (!this->_internal_salt().empty()) {
    const std::string& _s = this->_internal_salt();
    target = stream->WriteBytesMaybeAliased(9, _s, target);
  }

  // bool fix_msg = 10 [json_name = "fixMsg"];
  if (this->_internal_fix_msg() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        10, this->_internal_fix_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmwasm.wasm.v1.InstantiateContract2Proposal)
  return target;
}

::size_t InstantiateContract2Proposal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmwasm.wasm.v1.InstantiateContract2Proposal)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cosmos.base.v1beta1.Coin funds = 8 [json_name = "funds", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.dont_omitempty) = true];
  total_size += 1UL * this->_internal_funds_size();
  for (const auto& msg : this->_internal_funds()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string title = 1 [json_name = "title"];
  if (!this->_internal_title().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_title());
  }

  // string description = 2 [json_name = "description"];
  if (!this->_internal_description().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_description());
  }

  // string run_as = 3 [json_name = "runAs"];
  if (!this->_internal_run_as().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_run_as());
  }

  // string admin = 4 [json_name = "admin"];
  if (!this->_internal_admin().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_admin());
  }

  // string label = 6 [json_name = "label"];
  if (!this->_internal_label().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_label());
  }

  // bytes msg = 7 [json_name = "msg", (.gogoproto.casttype) = "RawContractMessage"];
  if (!this->_internal_msg().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_msg());
  }

  // bytes salt = 9 [json_name = "salt"];
  if (!this->_internal_salt().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_salt());
  }

  // uint64 code_id = 5 [json_name = "codeId", (.gogoproto.customname) = "CodeID"];
  if (this->_internal_code_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_code_id());
  }

  // bool fix_msg = 10 [json_name = "fixMsg"];
  if (this->_internal_fix_msg() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InstantiateContract2Proposal::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    InstantiateContract2Proposal::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InstantiateContract2Proposal::GetClassData() const { return &_class_data_; }


void InstantiateContract2Proposal::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<InstantiateContract2Proposal*>(&to_msg);
  auto& from = static_cast<const InstantiateContract2Proposal&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmwasm.wasm.v1.InstantiateContract2Proposal)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_funds()->MergeFrom(from._internal_funds());
  if (!from._internal_title().empty()) {
    _this->_internal_set_title(from._internal_title());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  if (!from._internal_run_as().empty()) {
    _this->_internal_set_run_as(from._internal_run_as());
  }
  if (!from._internal_admin().empty()) {
    _this->_internal_set_admin(from._internal_admin());
  }
  if (!from._internal_label().empty()) {
    _this->_internal_set_label(from._internal_label());
  }
  if (!from._internal_msg().empty()) {
    _this->_internal_set_msg(from._internal_msg());
  }
  if (!from._internal_salt().empty()) {
    _this->_internal_set_salt(from._internal_salt());
  }
  if (from._internal_code_id() != 0) {
    _this->_internal_set_code_id(from._internal_code_id());
  }
  if (from._internal_fix_msg() != 0) {
    _this->_internal_set_fix_msg(from._internal_fix_msg());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InstantiateContract2Proposal::CopyFrom(const InstantiateContract2Proposal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmwasm.wasm.v1.InstantiateContract2Proposal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstantiateContract2Proposal::IsInitialized() const {
  return true;
}

void InstantiateContract2Proposal::InternalSwap(InstantiateContract2Proposal* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_funds()->InternalSwap(other->_internal_mutable_funds());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.title_, lhs_arena,
                                       &other->_impl_.title_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.description_, lhs_arena,
                                       &other->_impl_.description_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.run_as_, lhs_arena,
                                       &other->_impl_.run_as_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.admin_, lhs_arena,
                                       &other->_impl_.admin_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.label_, lhs_arena,
                                       &other->_impl_.label_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.msg_, lhs_arena,
                                       &other->_impl_.msg_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.salt_, lhs_arena,
                                       &other->_impl_.salt_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InstantiateContract2Proposal, _impl_.fix_msg_)
      + sizeof(InstantiateContract2Proposal::_impl_.fix_msg_)
      - PROTOBUF_FIELD_OFFSET(InstantiateContract2Proposal, _impl_.code_id_)>(
          reinterpret_cast<char*>(&_impl_.code_id_),
          reinterpret_cast<char*>(&other->_impl_.code_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InstantiateContract2Proposal::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmwasm_2fwasm_2fv1_2fproposal_2eproto_getter, &descriptor_table_cosmwasm_2fwasm_2fv1_2fproposal_2eproto_once,
      file_level_metadata_cosmwasm_2fwasm_2fv1_2fproposal_2eproto[2]);
}
// ===================================================================

class MigrateContractProposal::_Internal {
 public:
};

MigrateContractProposal::MigrateContractProposal(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmwasm.wasm.v1.MigrateContractProposal)
}
MigrateContractProposal::MigrateContractProposal(const MigrateContractProposal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MigrateContractProposal* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.title_) {}

    , decltype(_impl_.description_) {}

    , decltype(_impl_.contract_) {}

    , decltype(_impl_.msg_) {}

    , decltype(_impl_.code_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.title_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_title().empty()) {
    _this->_impl_.title_.Set(from._internal_title(), _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.description_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), _this->GetArenaForAllocation());
  }
  _impl_.contract_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.contract_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_contract().empty()) {
    _this->_impl_.contract_.Set(from._internal_contract(), _this->GetArenaForAllocation());
  }
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.msg_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_msg().empty()) {
    _this->_impl_.msg_.Set(from._internal_msg(), _this->GetArenaForAllocation());
  }
  _this->_impl_.code_id_ = from._impl_.code_id_;
  // @@protoc_insertion_point(copy_constructor:cosmwasm.wasm.v1.MigrateContractProposal)
}

inline void MigrateContractProposal::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.title_) {}

    , decltype(_impl_.description_) {}

    , decltype(_impl_.contract_) {}

    , decltype(_impl_.msg_) {}

    , decltype(_impl_.code_id_) { ::uint64_t{0u} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.title_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.description_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.contract_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.contract_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.msg_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MigrateContractProposal::~MigrateContractProposal() {
  // @@protoc_insertion_point(destructor:cosmwasm.wasm.v1.MigrateContractProposal)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MigrateContractProposal::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.title_.Destroy();
  _impl_.description_.Destroy();
  _impl_.contract_.Destroy();
  _impl_.msg_.Destroy();
}

void MigrateContractProposal::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MigrateContractProposal::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmwasm.wasm.v1.MigrateContractProposal)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.title_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  _impl_.contract_.ClearToEmpty();
  _impl_.msg_.ClearToEmpty();
  _impl_.code_id_ = ::uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MigrateContractProposal::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string title = 1 [json_name = "title"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmwasm.wasm.v1.MigrateContractProposal.title"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string description = 2 [json_name = "description"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmwasm.wasm.v1.MigrateContractProposal.description"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string contract = 4 [json_name = "contract"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_contract();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmwasm.wasm.v1.MigrateContractProposal.contract"));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 code_id = 5 [json_name = "codeId", (.gogoproto.customname) = "CodeID"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _impl_.code_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes msg = 6 [json_name = "msg", (.gogoproto.casttype) = "RawContractMessage"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_msg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MigrateContractProposal::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmwasm.wasm.v1.MigrateContractProposal)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string title = 1 [json_name = "title"];
  if (!this->_internal_title().empty()) {
    const std::string& _s = this->_internal_title();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmwasm.wasm.v1.MigrateContractProposal.title");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string description = 2 [json_name = "description"];
  if (!this->_internal_description().empty()) {
    const std::string& _s = this->_internal_description();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmwasm.wasm.v1.MigrateContractProposal.description");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string contract = 4 [json_name = "contract"];
  if (!this->_internal_contract().empty()) {
    const std::string& _s = this->_internal_contract();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmwasm.wasm.v1.MigrateContractProposal.contract");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // uint64 code_id = 5 [json_name = "codeId", (.gogoproto.customname) = "CodeID"];
  if (this->_internal_code_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        5, this->_internal_code_id(), target);
  }

  // bytes msg = 6 [json_name = "msg", (.gogoproto.casttype) = "RawContractMessage"];
  if (!this->_internal_msg().empty()) {
    const std::string& _s = this->_internal_msg();
    target = stream->WriteBytesMaybeAliased(6, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmwasm.wasm.v1.MigrateContractProposal)
  return target;
}

::size_t MigrateContractProposal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmwasm.wasm.v1.MigrateContractProposal)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string title = 1 [json_name = "title"];
  if (!this->_internal_title().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_title());
  }

  // string description = 2 [json_name = "description"];
  if (!this->_internal_description().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_description());
  }

  // string contract = 4 [json_name = "contract"];
  if (!this->_internal_contract().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_contract());
  }

  // bytes msg = 6 [json_name = "msg", (.gogoproto.casttype) = "RawContractMessage"];
  if (!this->_internal_msg().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_msg());
  }

  // uint64 code_id = 5 [json_name = "codeId", (.gogoproto.customname) = "CodeID"];
  if (this->_internal_code_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_code_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MigrateContractProposal::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MigrateContractProposal::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MigrateContractProposal::GetClassData() const { return &_class_data_; }


void MigrateContractProposal::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MigrateContractProposal*>(&to_msg);
  auto& from = static_cast<const MigrateContractProposal&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmwasm.wasm.v1.MigrateContractProposal)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_title().empty()) {
    _this->_internal_set_title(from._internal_title());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  if (!from._internal_contract().empty()) {
    _this->_internal_set_contract(from._internal_contract());
  }
  if (!from._internal_msg().empty()) {
    _this->_internal_set_msg(from._internal_msg());
  }
  if (from._internal_code_id() != 0) {
    _this->_internal_set_code_id(from._internal_code_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MigrateContractProposal::CopyFrom(const MigrateContractProposal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmwasm.wasm.v1.MigrateContractProposal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MigrateContractProposal::IsInitialized() const {
  return true;
}

void MigrateContractProposal::InternalSwap(MigrateContractProposal* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.title_, lhs_arena,
                                       &other->_impl_.title_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.description_, lhs_arena,
                                       &other->_impl_.description_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.contract_, lhs_arena,
                                       &other->_impl_.contract_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.msg_, lhs_arena,
                                       &other->_impl_.msg_, rhs_arena);

  swap(_impl_.code_id_, other->_impl_.code_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MigrateContractProposal::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmwasm_2fwasm_2fv1_2fproposal_2eproto_getter, &descriptor_table_cosmwasm_2fwasm_2fv1_2fproposal_2eproto_once,
      file_level_metadata_cosmwasm_2fwasm_2fv1_2fproposal_2eproto[3]);
}
// ===================================================================

class SudoContractProposal::_Internal {
 public:
};

SudoContractProposal::SudoContractProposal(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmwasm.wasm.v1.SudoContractProposal)
}
SudoContractProposal::SudoContractProposal(const SudoContractProposal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SudoContractProposal* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.title_) {}

    , decltype(_impl_.description_) {}

    , decltype(_impl_.contract_) {}

    , decltype(_impl_.msg_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.title_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_title().empty()) {
    _this->_impl_.title_.Set(from._internal_title(), _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.description_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), _this->GetArenaForAllocation());
  }
  _impl_.contract_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.contract_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_contract().empty()) {
    _this->_impl_.contract_.Set(from._internal_contract(), _this->GetArenaForAllocation());
  }
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.msg_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_msg().empty()) {
    _this->_impl_.msg_.Set(from._internal_msg(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:cosmwasm.wasm.v1.SudoContractProposal)
}

inline void SudoContractProposal::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.title_) {}

    , decltype(_impl_.description_) {}

    , decltype(_impl_.contract_) {}

    , decltype(_impl_.msg_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.title_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.description_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.contract_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.contract_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.msg_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SudoContractProposal::~SudoContractProposal() {
  // @@protoc_insertion_point(destructor:cosmwasm.wasm.v1.SudoContractProposal)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SudoContractProposal::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.title_.Destroy();
  _impl_.description_.Destroy();
  _impl_.contract_.Destroy();
  _impl_.msg_.Destroy();
}

void SudoContractProposal::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SudoContractProposal::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmwasm.wasm.v1.SudoContractProposal)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.title_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  _impl_.contract_.ClearToEmpty();
  _impl_.msg_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SudoContractProposal::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string title = 1 [json_name = "title"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmwasm.wasm.v1.SudoContractProposal.title"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string description = 2 [json_name = "description"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmwasm.wasm.v1.SudoContractProposal.description"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string contract = 3 [json_name = "contract"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_contract();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmwasm.wasm.v1.SudoContractProposal.contract"));
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes msg = 4 [json_name = "msg", (.gogoproto.casttype) = "RawContractMessage"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_msg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SudoContractProposal::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmwasm.wasm.v1.SudoContractProposal)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string title = 1 [json_name = "title"];
  if (!this->_internal_title().empty()) {
    const std::string& _s = this->_internal_title();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmwasm.wasm.v1.SudoContractProposal.title");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string description = 2 [json_name = "description"];
  if (!this->_internal_description().empty()) {
    const std::string& _s = this->_internal_description();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmwasm.wasm.v1.SudoContractProposal.description");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string contract = 3 [json_name = "contract"];
  if (!this->_internal_contract().empty()) {
    const std::string& _s = this->_internal_contract();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmwasm.wasm.v1.SudoContractProposal.contract");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // bytes msg = 4 [json_name = "msg", (.gogoproto.casttype) = "RawContractMessage"];
  if (!this->_internal_msg().empty()) {
    const std::string& _s = this->_internal_msg();
    target = stream->WriteBytesMaybeAliased(4, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmwasm.wasm.v1.SudoContractProposal)
  return target;
}

::size_t SudoContractProposal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmwasm.wasm.v1.SudoContractProposal)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string title = 1 [json_name = "title"];
  if (!this->_internal_title().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_title());
  }

  // string description = 2 [json_name = "description"];
  if (!this->_internal_description().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_description());
  }

  // string contract = 3 [json_name = "contract"];
  if (!this->_internal_contract().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_contract());
  }

  // bytes msg = 4 [json_name = "msg", (.gogoproto.casttype) = "RawContractMessage"];
  if (!this->_internal_msg().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_msg());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SudoContractProposal::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SudoContractProposal::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SudoContractProposal::GetClassData() const { return &_class_data_; }


void SudoContractProposal::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SudoContractProposal*>(&to_msg);
  auto& from = static_cast<const SudoContractProposal&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmwasm.wasm.v1.SudoContractProposal)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_title().empty()) {
    _this->_internal_set_title(from._internal_title());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  if (!from._internal_contract().empty()) {
    _this->_internal_set_contract(from._internal_contract());
  }
  if (!from._internal_msg().empty()) {
    _this->_internal_set_msg(from._internal_msg());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SudoContractProposal::CopyFrom(const SudoContractProposal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmwasm.wasm.v1.SudoContractProposal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SudoContractProposal::IsInitialized() const {
  return true;
}

void SudoContractProposal::InternalSwap(SudoContractProposal* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.title_, lhs_arena,
                                       &other->_impl_.title_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.description_, lhs_arena,
                                       &other->_impl_.description_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.contract_, lhs_arena,
                                       &other->_impl_.contract_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.msg_, lhs_arena,
                                       &other->_impl_.msg_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata SudoContractProposal::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmwasm_2fwasm_2fv1_2fproposal_2eproto_getter, &descriptor_table_cosmwasm_2fwasm_2fv1_2fproposal_2eproto_once,
      file_level_metadata_cosmwasm_2fwasm_2fv1_2fproposal_2eproto[4]);
}
// ===================================================================

class ExecuteContractProposal::_Internal {
 public:
};

void ExecuteContractProposal::clear_funds() {
  _internal_mutable_funds()->Clear();
}
ExecuteContractProposal::ExecuteContractProposal(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmwasm.wasm.v1.ExecuteContractProposal)
}
ExecuteContractProposal::ExecuteContractProposal(const ExecuteContractProposal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ExecuteContractProposal* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.funds_){from._impl_.funds_}
    , decltype(_impl_.title_) {}

    , decltype(_impl_.description_) {}

    , decltype(_impl_.run_as_) {}

    , decltype(_impl_.contract_) {}

    , decltype(_impl_.msg_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.title_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_title().empty()) {
    _this->_impl_.title_.Set(from._internal_title(), _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.description_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), _this->GetArenaForAllocation());
  }
  _impl_.run_as_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.run_as_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_run_as().empty()) {
    _this->_impl_.run_as_.Set(from._internal_run_as(), _this->GetArenaForAllocation());
  }
  _impl_.contract_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.contract_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_contract().empty()) {
    _this->_impl_.contract_.Set(from._internal_contract(), _this->GetArenaForAllocation());
  }
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.msg_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_msg().empty()) {
    _this->_impl_.msg_.Set(from._internal_msg(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:cosmwasm.wasm.v1.ExecuteContractProposal)
}

inline void ExecuteContractProposal::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.funds_){arena}
    , decltype(_impl_.title_) {}

    , decltype(_impl_.description_) {}

    , decltype(_impl_.run_as_) {}

    , decltype(_impl_.contract_) {}

    , decltype(_impl_.msg_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.title_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.description_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.run_as_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.run_as_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.contract_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.contract_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.msg_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ExecuteContractProposal::~ExecuteContractProposal() {
  // @@protoc_insertion_point(destructor:cosmwasm.wasm.v1.ExecuteContractProposal)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ExecuteContractProposal::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_funds()->~RepeatedPtrField();
  _impl_.title_.Destroy();
  _impl_.description_.Destroy();
  _impl_.run_as_.Destroy();
  _impl_.contract_.Destroy();
  _impl_.msg_.Destroy();
}

void ExecuteContractProposal::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ExecuteContractProposal::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmwasm.wasm.v1.ExecuteContractProposal)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_funds()->Clear();
  _impl_.title_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  _impl_.run_as_.ClearToEmpty();
  _impl_.contract_.ClearToEmpty();
  _impl_.msg_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExecuteContractProposal::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string title = 1 [json_name = "title"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmwasm.wasm.v1.ExecuteContractProposal.title"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string description = 2 [json_name = "description"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmwasm.wasm.v1.ExecuteContractProposal.description"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string run_as = 3 [json_name = "runAs"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_run_as();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmwasm.wasm.v1.ExecuteContractProposal.run_as"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string contract = 4 [json_name = "contract"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_contract();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmwasm.wasm.v1.ExecuteContractProposal.contract"));
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes msg = 5 [json_name = "msg", (.gogoproto.casttype) = "RawContractMessage"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_msg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .cosmos.base.v1beta1.Coin funds = 6 [json_name = "funds", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.dont_omitempty) = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_funds(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ExecuteContractProposal::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmwasm.wasm.v1.ExecuteContractProposal)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string title = 1 [json_name = "title"];
  if (!this->_internal_title().empty()) {
    const std::string& _s = this->_internal_title();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmwasm.wasm.v1.ExecuteContractProposal.title");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string description = 2 [json_name = "description"];
  if (!this->_internal_description().empty()) {
    const std::string& _s = this->_internal_description();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmwasm.wasm.v1.ExecuteContractProposal.description");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string run_as = 3 [json_name = "runAs"];
  if (!this->_internal_run_as().empty()) {
    const std::string& _s = this->_internal_run_as();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmwasm.wasm.v1.ExecuteContractProposal.run_as");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string contract = 4 [json_name = "contract"];
  if (!this->_internal_contract().empty()) {
    const std::string& _s = this->_internal_contract();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmwasm.wasm.v1.ExecuteContractProposal.contract");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // bytes msg = 5 [json_name = "msg", (.gogoproto.casttype) = "RawContractMessage"];
  if (!this->_internal_msg().empty()) {
    const std::string& _s = this->_internal_msg();
    target = stream->WriteBytesMaybeAliased(5, _s, target);
  }

  // repeated .cosmos.base.v1beta1.Coin funds = 6 [json_name = "funds", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.dont_omitempty) = true];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_funds_size()); i < n; i++) {
    const auto& repfield = this->_internal_funds(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmwasm.wasm.v1.ExecuteContractProposal)
  return target;
}

::size_t ExecuteContractProposal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmwasm.wasm.v1.ExecuteContractProposal)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cosmos.base.v1beta1.Coin funds = 6 [json_name = "funds", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.dont_omitempty) = true];
  total_size += 1UL * this->_internal_funds_size();
  for (const auto& msg : this->_internal_funds()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string title = 1 [json_name = "title"];
  if (!this->_internal_title().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_title());
  }

  // string description = 2 [json_name = "description"];
  if (!this->_internal_description().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_description());
  }

  // string run_as = 3 [json_name = "runAs"];
  if (!this->_internal_run_as().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_run_as());
  }

  // string contract = 4 [json_name = "contract"];
  if (!this->_internal_contract().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_contract());
  }

  // bytes msg = 5 [json_name = "msg", (.gogoproto.casttype) = "RawContractMessage"];
  if (!this->_internal_msg().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_msg());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExecuteContractProposal::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ExecuteContractProposal::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExecuteContractProposal::GetClassData() const { return &_class_data_; }


void ExecuteContractProposal::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ExecuteContractProposal*>(&to_msg);
  auto& from = static_cast<const ExecuteContractProposal&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmwasm.wasm.v1.ExecuteContractProposal)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_funds()->MergeFrom(from._internal_funds());
  if (!from._internal_title().empty()) {
    _this->_internal_set_title(from._internal_title());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  if (!from._internal_run_as().empty()) {
    _this->_internal_set_run_as(from._internal_run_as());
  }
  if (!from._internal_contract().empty()) {
    _this->_internal_set_contract(from._internal_contract());
  }
  if (!from._internal_msg().empty()) {
    _this->_internal_set_msg(from._internal_msg());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExecuteContractProposal::CopyFrom(const ExecuteContractProposal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmwasm.wasm.v1.ExecuteContractProposal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecuteContractProposal::IsInitialized() const {
  return true;
}

void ExecuteContractProposal::InternalSwap(ExecuteContractProposal* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_funds()->InternalSwap(other->_internal_mutable_funds());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.title_, lhs_arena,
                                       &other->_impl_.title_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.description_, lhs_arena,
                                       &other->_impl_.description_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.run_as_, lhs_arena,
                                       &other->_impl_.run_as_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.contract_, lhs_arena,
                                       &other->_impl_.contract_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.msg_, lhs_arena,
                                       &other->_impl_.msg_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata ExecuteContractProposal::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmwasm_2fwasm_2fv1_2fproposal_2eproto_getter, &descriptor_table_cosmwasm_2fwasm_2fv1_2fproposal_2eproto_once,
      file_level_metadata_cosmwasm_2fwasm_2fv1_2fproposal_2eproto[5]);
}
// ===================================================================

class UpdateAdminProposal::_Internal {
 public:
};

UpdateAdminProposal::UpdateAdminProposal(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmwasm.wasm.v1.UpdateAdminProposal)
}
UpdateAdminProposal::UpdateAdminProposal(const UpdateAdminProposal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UpdateAdminProposal* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.title_) {}

    , decltype(_impl_.description_) {}

    , decltype(_impl_.new_admin_) {}

    , decltype(_impl_.contract_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.title_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_title().empty()) {
    _this->_impl_.title_.Set(from._internal_title(), _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.description_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), _this->GetArenaForAllocation());
  }
  _impl_.new_admin_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.new_admin_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_new_admin().empty()) {
    _this->_impl_.new_admin_.Set(from._internal_new_admin(), _this->GetArenaForAllocation());
  }
  _impl_.contract_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.contract_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_contract().empty()) {
    _this->_impl_.contract_.Set(from._internal_contract(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:cosmwasm.wasm.v1.UpdateAdminProposal)
}

inline void UpdateAdminProposal::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.title_) {}

    , decltype(_impl_.description_) {}

    , decltype(_impl_.new_admin_) {}

    , decltype(_impl_.contract_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.title_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.description_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.new_admin_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.new_admin_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.contract_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.contract_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UpdateAdminProposal::~UpdateAdminProposal() {
  // @@protoc_insertion_point(destructor:cosmwasm.wasm.v1.UpdateAdminProposal)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UpdateAdminProposal::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.title_.Destroy();
  _impl_.description_.Destroy();
  _impl_.new_admin_.Destroy();
  _impl_.contract_.Destroy();
}

void UpdateAdminProposal::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UpdateAdminProposal::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmwasm.wasm.v1.UpdateAdminProposal)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.title_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  _impl_.new_admin_.ClearToEmpty();
  _impl_.contract_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateAdminProposal::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string title = 1 [json_name = "title"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmwasm.wasm.v1.UpdateAdminProposal.title"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string description = 2 [json_name = "description"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmwasm.wasm.v1.UpdateAdminProposal.description"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string new_admin = 3 [json_name = "newAdmin", (.gogoproto.moretags) = "yaml:\"new_admin\""];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_new_admin();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmwasm.wasm.v1.UpdateAdminProposal.new_admin"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string contract = 4 [json_name = "contract"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_contract();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmwasm.wasm.v1.UpdateAdminProposal.contract"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* UpdateAdminProposal::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmwasm.wasm.v1.UpdateAdminProposal)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string title = 1 [json_name = "title"];
  if (!this->_internal_title().empty()) {
    const std::string& _s = this->_internal_title();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmwasm.wasm.v1.UpdateAdminProposal.title");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string description = 2 [json_name = "description"];
  if (!this->_internal_description().empty()) {
    const std::string& _s = this->_internal_description();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmwasm.wasm.v1.UpdateAdminProposal.description");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string new_admin = 3 [json_name = "newAdmin", (.gogoproto.moretags) = "yaml:\"new_admin\""];
  if (!this->_internal_new_admin().empty()) {
    const std::string& _s = this->_internal_new_admin();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmwasm.wasm.v1.UpdateAdminProposal.new_admin");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string contract = 4 [json_name = "contract"];
  if (!this->_internal_contract().empty()) {
    const std::string& _s = this->_internal_contract();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmwasm.wasm.v1.UpdateAdminProposal.contract");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmwasm.wasm.v1.UpdateAdminProposal)
  return target;
}

::size_t UpdateAdminProposal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmwasm.wasm.v1.UpdateAdminProposal)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string title = 1 [json_name = "title"];
  if (!this->_internal_title().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_title());
  }

  // string description = 2 [json_name = "description"];
  if (!this->_internal_description().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_description());
  }

  // string new_admin = 3 [json_name = "newAdmin", (.gogoproto.moretags) = "yaml:\"new_admin\""];
  if (!this->_internal_new_admin().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_new_admin());
  }

  // string contract = 4 [json_name = "contract"];
  if (!this->_internal_contract().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_contract());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateAdminProposal::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UpdateAdminProposal::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateAdminProposal::GetClassData() const { return &_class_data_; }


void UpdateAdminProposal::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UpdateAdminProposal*>(&to_msg);
  auto& from = static_cast<const UpdateAdminProposal&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmwasm.wasm.v1.UpdateAdminProposal)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_title().empty()) {
    _this->_internal_set_title(from._internal_title());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  if (!from._internal_new_admin().empty()) {
    _this->_internal_set_new_admin(from._internal_new_admin());
  }
  if (!from._internal_contract().empty()) {
    _this->_internal_set_contract(from._internal_contract());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateAdminProposal::CopyFrom(const UpdateAdminProposal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmwasm.wasm.v1.UpdateAdminProposal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateAdminProposal::IsInitialized() const {
  return true;
}

void UpdateAdminProposal::InternalSwap(UpdateAdminProposal* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.title_, lhs_arena,
                                       &other->_impl_.title_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.description_, lhs_arena,
                                       &other->_impl_.description_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.new_admin_, lhs_arena,
                                       &other->_impl_.new_admin_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.contract_, lhs_arena,
                                       &other->_impl_.contract_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateAdminProposal::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmwasm_2fwasm_2fv1_2fproposal_2eproto_getter, &descriptor_table_cosmwasm_2fwasm_2fv1_2fproposal_2eproto_once,
      file_level_metadata_cosmwasm_2fwasm_2fv1_2fproposal_2eproto[6]);
}
// ===================================================================

class ClearAdminProposal::_Internal {
 public:
};

ClearAdminProposal::ClearAdminProposal(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmwasm.wasm.v1.ClearAdminProposal)
}
ClearAdminProposal::ClearAdminProposal(const ClearAdminProposal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ClearAdminProposal* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.title_) {}

    , decltype(_impl_.description_) {}

    , decltype(_impl_.contract_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.title_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_title().empty()) {
    _this->_impl_.title_.Set(from._internal_title(), _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.description_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), _this->GetArenaForAllocation());
  }
  _impl_.contract_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.contract_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_contract().empty()) {
    _this->_impl_.contract_.Set(from._internal_contract(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:cosmwasm.wasm.v1.ClearAdminProposal)
}

inline void ClearAdminProposal::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.title_) {}

    , decltype(_impl_.description_) {}

    , decltype(_impl_.contract_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.title_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.description_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.contract_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.contract_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ClearAdminProposal::~ClearAdminProposal() {
  // @@protoc_insertion_point(destructor:cosmwasm.wasm.v1.ClearAdminProposal)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClearAdminProposal::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.title_.Destroy();
  _impl_.description_.Destroy();
  _impl_.contract_.Destroy();
}

void ClearAdminProposal::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ClearAdminProposal::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmwasm.wasm.v1.ClearAdminProposal)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.title_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  _impl_.contract_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClearAdminProposal::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string title = 1 [json_name = "title"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmwasm.wasm.v1.ClearAdminProposal.title"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string description = 2 [json_name = "description"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmwasm.wasm.v1.ClearAdminProposal.description"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string contract = 3 [json_name = "contract"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_contract();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmwasm.wasm.v1.ClearAdminProposal.contract"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ClearAdminProposal::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmwasm.wasm.v1.ClearAdminProposal)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string title = 1 [json_name = "title"];
  if (!this->_internal_title().empty()) {
    const std::string& _s = this->_internal_title();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmwasm.wasm.v1.ClearAdminProposal.title");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string description = 2 [json_name = "description"];
  if (!this->_internal_description().empty()) {
    const std::string& _s = this->_internal_description();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmwasm.wasm.v1.ClearAdminProposal.description");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string contract = 3 [json_name = "contract"];
  if (!this->_internal_contract().empty()) {
    const std::string& _s = this->_internal_contract();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmwasm.wasm.v1.ClearAdminProposal.contract");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmwasm.wasm.v1.ClearAdminProposal)
  return target;
}

::size_t ClearAdminProposal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmwasm.wasm.v1.ClearAdminProposal)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string title = 1 [json_name = "title"];
  if (!this->_internal_title().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_title());
  }

  // string description = 2 [json_name = "description"];
  if (!this->_internal_description().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_description());
  }

  // string contract = 3 [json_name = "contract"];
  if (!this->_internal_contract().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_contract());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ClearAdminProposal::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ClearAdminProposal::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ClearAdminProposal::GetClassData() const { return &_class_data_; }


void ClearAdminProposal::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ClearAdminProposal*>(&to_msg);
  auto& from = static_cast<const ClearAdminProposal&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmwasm.wasm.v1.ClearAdminProposal)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_title().empty()) {
    _this->_internal_set_title(from._internal_title());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  if (!from._internal_contract().empty()) {
    _this->_internal_set_contract(from._internal_contract());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ClearAdminProposal::CopyFrom(const ClearAdminProposal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmwasm.wasm.v1.ClearAdminProposal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClearAdminProposal::IsInitialized() const {
  return true;
}

void ClearAdminProposal::InternalSwap(ClearAdminProposal* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.title_, lhs_arena,
                                       &other->_impl_.title_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.description_, lhs_arena,
                                       &other->_impl_.description_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.contract_, lhs_arena,
                                       &other->_impl_.contract_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClearAdminProposal::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmwasm_2fwasm_2fv1_2fproposal_2eproto_getter, &descriptor_table_cosmwasm_2fwasm_2fv1_2fproposal_2eproto_once,
      file_level_metadata_cosmwasm_2fwasm_2fv1_2fproposal_2eproto[7]);
}
// ===================================================================

class PinCodesProposal::_Internal {
 public:
};

PinCodesProposal::PinCodesProposal(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmwasm.wasm.v1.PinCodesProposal)
}
PinCodesProposal::PinCodesProposal(const PinCodesProposal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PinCodesProposal* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.code_ids_) { from._impl_.code_ids_ }
    ,/* _impl_._code_ids_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.title_) {}

    , decltype(_impl_.description_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.title_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_title().empty()) {
    _this->_impl_.title_.Set(from._internal_title(), _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.description_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:cosmwasm.wasm.v1.PinCodesProposal)
}

inline void PinCodesProposal::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.code_ids_) { arena }
    ,/* _impl_._code_ids_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.title_) {}

    , decltype(_impl_.description_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.title_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.description_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PinCodesProposal::~PinCodesProposal() {
  // @@protoc_insertion_point(destructor:cosmwasm.wasm.v1.PinCodesProposal)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PinCodesProposal::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.code_ids_.~RepeatedField();
  _impl_.title_.Destroy();
  _impl_.description_.Destroy();
}

void PinCodesProposal::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PinCodesProposal::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmwasm.wasm.v1.PinCodesProposal)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_code_ids()->Clear();
  _impl_.title_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PinCodesProposal::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string title = 1 [json_name = "title", (.gogoproto.moretags) = "yaml:\"title\""];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmwasm.wasm.v1.PinCodesProposal.title"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string description = 2 [json_name = "description", (.gogoproto.moretags) = "yaml:\"description\""];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmwasm.wasm.v1.PinCodesProposal.description"));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated uint64 code_ids = 3 [json_name = "codeIds", (.gogoproto.customname) = "CodeIDs", (.gogoproto.moretags) = "yaml:\"code_ids\""];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_code_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::uint8_t>(tag) == 24) {
          _internal_add_code_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* PinCodesProposal::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmwasm.wasm.v1.PinCodesProposal)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string title = 1 [json_name = "title", (.gogoproto.moretags) = "yaml:\"title\""];
  if (!this->_internal_title().empty()) {
    const std::string& _s = this->_internal_title();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmwasm.wasm.v1.PinCodesProposal.title");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string description = 2 [json_name = "description", (.gogoproto.moretags) = "yaml:\"description\""];
  if (!this->_internal_description().empty()) {
    const std::string& _s = this->_internal_description();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmwasm.wasm.v1.PinCodesProposal.description");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // repeated uint64 code_ids = 3 [json_name = "codeIds", (.gogoproto.customname) = "CodeIDs", (.gogoproto.moretags) = "yaml:\"code_ids\""];
  {
    int byte_size = _impl_._code_ids_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(3, _internal_code_ids(),
                                                 byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmwasm.wasm.v1.PinCodesProposal)
  return target;
}

::size_t PinCodesProposal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmwasm.wasm.v1.PinCodesProposal)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 code_ids = 3 [json_name = "codeIds", (.gogoproto.customname) = "CodeIDs", (.gogoproto.moretags) = "yaml:\"code_ids\""];
  {
    std::size_t data_size = ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_code_ids())
    ;
    _impl_._code_ids_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }

  // string title = 1 [json_name = "title", (.gogoproto.moretags) = "yaml:\"title\""];
  if (!this->_internal_title().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_title());
  }

  // string description = 2 [json_name = "description", (.gogoproto.moretags) = "yaml:\"description\""];
  if (!this->_internal_description().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_description());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PinCodesProposal::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PinCodesProposal::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PinCodesProposal::GetClassData() const { return &_class_data_; }


void PinCodesProposal::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PinCodesProposal*>(&to_msg);
  auto& from = static_cast<const PinCodesProposal&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmwasm.wasm.v1.PinCodesProposal)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.code_ids_.MergeFrom(from._impl_.code_ids_);
  if (!from._internal_title().empty()) {
    _this->_internal_set_title(from._internal_title());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PinCodesProposal::CopyFrom(const PinCodesProposal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmwasm.wasm.v1.PinCodesProposal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PinCodesProposal::IsInitialized() const {
  return true;
}

void PinCodesProposal::InternalSwap(PinCodesProposal* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.code_ids_.InternalSwap(&other->_impl_.code_ids_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.title_, lhs_arena,
                                       &other->_impl_.title_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.description_, lhs_arena,
                                       &other->_impl_.description_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata PinCodesProposal::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmwasm_2fwasm_2fv1_2fproposal_2eproto_getter, &descriptor_table_cosmwasm_2fwasm_2fv1_2fproposal_2eproto_once,
      file_level_metadata_cosmwasm_2fwasm_2fv1_2fproposal_2eproto[8]);
}
// ===================================================================

class UnpinCodesProposal::_Internal {
 public:
};

UnpinCodesProposal::UnpinCodesProposal(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmwasm.wasm.v1.UnpinCodesProposal)
}
UnpinCodesProposal::UnpinCodesProposal(const UnpinCodesProposal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UnpinCodesProposal* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.code_ids_) { from._impl_.code_ids_ }
    ,/* _impl_._code_ids_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.title_) {}

    , decltype(_impl_.description_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.title_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_title().empty()) {
    _this->_impl_.title_.Set(from._internal_title(), _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.description_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:cosmwasm.wasm.v1.UnpinCodesProposal)
}

inline void UnpinCodesProposal::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.code_ids_) { arena }
    ,/* _impl_._code_ids_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.title_) {}

    , decltype(_impl_.description_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.title_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.description_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UnpinCodesProposal::~UnpinCodesProposal() {
  // @@protoc_insertion_point(destructor:cosmwasm.wasm.v1.UnpinCodesProposal)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UnpinCodesProposal::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.code_ids_.~RepeatedField();
  _impl_.title_.Destroy();
  _impl_.description_.Destroy();
}

void UnpinCodesProposal::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UnpinCodesProposal::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmwasm.wasm.v1.UnpinCodesProposal)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_code_ids()->Clear();
  _impl_.title_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnpinCodesProposal::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string title = 1 [json_name = "title", (.gogoproto.moretags) = "yaml:\"title\""];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmwasm.wasm.v1.UnpinCodesProposal.title"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string description = 2 [json_name = "description", (.gogoproto.moretags) = "yaml:\"description\""];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmwasm.wasm.v1.UnpinCodesProposal.description"));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated uint64 code_ids = 3 [json_name = "codeIds", (.gogoproto.customname) = "CodeIDs", (.gogoproto.moretags) = "yaml:\"code_ids\""];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_code_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::uint8_t>(tag) == 24) {
          _internal_add_code_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* UnpinCodesProposal::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmwasm.wasm.v1.UnpinCodesProposal)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string title = 1 [json_name = "title", (.gogoproto.moretags) = "yaml:\"title\""];
  if (!this->_internal_title().empty()) {
    const std::string& _s = this->_internal_title();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmwasm.wasm.v1.UnpinCodesProposal.title");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string description = 2 [json_name = "description", (.gogoproto.moretags) = "yaml:\"description\""];
  if (!this->_internal_description().empty()) {
    const std::string& _s = this->_internal_description();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmwasm.wasm.v1.UnpinCodesProposal.description");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // repeated uint64 code_ids = 3 [json_name = "codeIds", (.gogoproto.customname) = "CodeIDs", (.gogoproto.moretags) = "yaml:\"code_ids\""];
  {
    int byte_size = _impl_._code_ids_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(3, _internal_code_ids(),
                                                 byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmwasm.wasm.v1.UnpinCodesProposal)
  return target;
}

::size_t UnpinCodesProposal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmwasm.wasm.v1.UnpinCodesProposal)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 code_ids = 3 [json_name = "codeIds", (.gogoproto.customname) = "CodeIDs", (.gogoproto.moretags) = "yaml:\"code_ids\""];
  {
    std::size_t data_size = ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_code_ids())
    ;
    _impl_._code_ids_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }

  // string title = 1 [json_name = "title", (.gogoproto.moretags) = "yaml:\"title\""];
  if (!this->_internal_title().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_title());
  }

  // string description = 2 [json_name = "description", (.gogoproto.moretags) = "yaml:\"description\""];
  if (!this->_internal_description().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_description());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UnpinCodesProposal::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UnpinCodesProposal::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UnpinCodesProposal::GetClassData() const { return &_class_data_; }


void UnpinCodesProposal::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UnpinCodesProposal*>(&to_msg);
  auto& from = static_cast<const UnpinCodesProposal&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmwasm.wasm.v1.UnpinCodesProposal)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.code_ids_.MergeFrom(from._impl_.code_ids_);
  if (!from._internal_title().empty()) {
    _this->_internal_set_title(from._internal_title());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UnpinCodesProposal::CopyFrom(const UnpinCodesProposal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmwasm.wasm.v1.UnpinCodesProposal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnpinCodesProposal::IsInitialized() const {
  return true;
}

void UnpinCodesProposal::InternalSwap(UnpinCodesProposal* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.code_ids_.InternalSwap(&other->_impl_.code_ids_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.title_, lhs_arena,
                                       &other->_impl_.title_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.description_, lhs_arena,
                                       &other->_impl_.description_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata UnpinCodesProposal::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmwasm_2fwasm_2fv1_2fproposal_2eproto_getter, &descriptor_table_cosmwasm_2fwasm_2fv1_2fproposal_2eproto_once,
      file_level_metadata_cosmwasm_2fwasm_2fv1_2fproposal_2eproto[9]);
}
// ===================================================================

class AccessConfigUpdate::_Internal {
 public:
  using HasBits = decltype(std::declval<AccessConfigUpdate>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(AccessConfigUpdate, _impl_._has_bits_);
  static const ::cosmwasm::wasm::v1::AccessConfig& instantiate_permission(const AccessConfigUpdate* msg);
  static void set_has_instantiate_permission(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::cosmwasm::wasm::v1::AccessConfig&
AccessConfigUpdate::_Internal::instantiate_permission(const AccessConfigUpdate* msg) {
  return *msg->_impl_.instantiate_permission_;
}
void AccessConfigUpdate::clear_instantiate_permission() {
  if (_impl_.instantiate_permission_ != nullptr) _impl_.instantiate_permission_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
AccessConfigUpdate::AccessConfigUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmwasm.wasm.v1.AccessConfigUpdate)
}
AccessConfigUpdate::AccessConfigUpdate(const AccessConfigUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AccessConfigUpdate* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.instantiate_permission_){nullptr}
    , decltype(_impl_.code_id_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.instantiate_permission_ = new ::cosmwasm::wasm::v1::AccessConfig(*from._impl_.instantiate_permission_);
  }
  _this->_impl_.code_id_ = from._impl_.code_id_;
  // @@protoc_insertion_point(copy_constructor:cosmwasm.wasm.v1.AccessConfigUpdate)
}

inline void AccessConfigUpdate::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.instantiate_permission_){nullptr}
    , decltype(_impl_.code_id_) { ::uint64_t{0u} }

  };
}

AccessConfigUpdate::~AccessConfigUpdate() {
  // @@protoc_insertion_point(destructor:cosmwasm.wasm.v1.AccessConfigUpdate)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AccessConfigUpdate::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.instantiate_permission_;
}

void AccessConfigUpdate::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AccessConfigUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmwasm.wasm.v1.AccessConfigUpdate)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.instantiate_permission_ != nullptr);
    _impl_.instantiate_permission_->Clear();
  }
  _impl_.code_id_ = ::uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AccessConfigUpdate::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 code_id = 1 [json_name = "codeId", (.gogoproto.customname) = "CodeID"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.code_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .cosmwasm.wasm.v1.AccessConfig instantiate_permission = 2 [json_name = "instantiatePermission", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_instantiate_permission(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* AccessConfigUpdate::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmwasm.wasm.v1.AccessConfigUpdate)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 code_id = 1 [json_name = "codeId", (.gogoproto.customname) = "CodeID"];
  if (this->_internal_code_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_code_id(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .cosmwasm.wasm.v1.AccessConfig instantiate_permission = 2 [json_name = "instantiatePermission", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::instantiate_permission(this),
        _Internal::instantiate_permission(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmwasm.wasm.v1.AccessConfigUpdate)
  return target;
}

::size_t AccessConfigUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmwasm.wasm.v1.AccessConfigUpdate)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cosmwasm.wasm.v1.AccessConfig instantiate_permission = 2 [json_name = "instantiatePermission", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.instantiate_permission_);
  }

  // uint64 code_id = 1 [json_name = "codeId", (.gogoproto.customname) = "CodeID"];
  if (this->_internal_code_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_code_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AccessConfigUpdate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AccessConfigUpdate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AccessConfigUpdate::GetClassData() const { return &_class_data_; }


void AccessConfigUpdate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AccessConfigUpdate*>(&to_msg);
  auto& from = static_cast<const AccessConfigUpdate&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmwasm.wasm.v1.AccessConfigUpdate)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_instantiate_permission()->::cosmwasm::wasm::v1::AccessConfig::MergeFrom(
        from._internal_instantiate_permission());
  }
  if (from._internal_code_id() != 0) {
    _this->_internal_set_code_id(from._internal_code_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AccessConfigUpdate::CopyFrom(const AccessConfigUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmwasm.wasm.v1.AccessConfigUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccessConfigUpdate::IsInitialized() const {
  return true;
}

void AccessConfigUpdate::InternalSwap(AccessConfigUpdate* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AccessConfigUpdate, _impl_.code_id_)
      + sizeof(AccessConfigUpdate::_impl_.code_id_)
      - PROTOBUF_FIELD_OFFSET(AccessConfigUpdate, _impl_.instantiate_permission_)>(
          reinterpret_cast<char*>(&_impl_.instantiate_permission_),
          reinterpret_cast<char*>(&other->_impl_.instantiate_permission_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AccessConfigUpdate::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmwasm_2fwasm_2fv1_2fproposal_2eproto_getter, &descriptor_table_cosmwasm_2fwasm_2fv1_2fproposal_2eproto_once,
      file_level_metadata_cosmwasm_2fwasm_2fv1_2fproposal_2eproto[10]);
}
// ===================================================================

class UpdateInstantiateConfigProposal::_Internal {
 public:
};

UpdateInstantiateConfigProposal::UpdateInstantiateConfigProposal(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmwasm.wasm.v1.UpdateInstantiateConfigProposal)
}
UpdateInstantiateConfigProposal::UpdateInstantiateConfigProposal(const UpdateInstantiateConfigProposal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UpdateInstantiateConfigProposal* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.access_config_updates_){from._impl_.access_config_updates_}
    , decltype(_impl_.title_) {}

    , decltype(_impl_.description_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.title_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_title().empty()) {
    _this->_impl_.title_.Set(from._internal_title(), _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.description_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:cosmwasm.wasm.v1.UpdateInstantiateConfigProposal)
}

inline void UpdateInstantiateConfigProposal::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.access_config_updates_){arena}
    , decltype(_impl_.title_) {}

    , decltype(_impl_.description_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.title_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.description_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UpdateInstantiateConfigProposal::~UpdateInstantiateConfigProposal() {
  // @@protoc_insertion_point(destructor:cosmwasm.wasm.v1.UpdateInstantiateConfigProposal)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UpdateInstantiateConfigProposal::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_access_config_updates()->~RepeatedPtrField();
  _impl_.title_.Destroy();
  _impl_.description_.Destroy();
}

void UpdateInstantiateConfigProposal::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UpdateInstantiateConfigProposal::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmwasm.wasm.v1.UpdateInstantiateConfigProposal)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_access_config_updates()->Clear();
  _impl_.title_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateInstantiateConfigProposal::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string title = 1 [json_name = "title", (.gogoproto.moretags) = "yaml:\"title\""];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmwasm.wasm.v1.UpdateInstantiateConfigProposal.title"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string description = 2 [json_name = "description", (.gogoproto.moretags) = "yaml:\"description\""];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmwasm.wasm.v1.UpdateInstantiateConfigProposal.description"));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .cosmwasm.wasm.v1.AccessConfigUpdate access_config_updates = 3 [json_name = "accessConfigUpdates", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_access_config_updates(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* UpdateInstantiateConfigProposal::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmwasm.wasm.v1.UpdateInstantiateConfigProposal)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string title = 1 [json_name = "title", (.gogoproto.moretags) = "yaml:\"title\""];
  if (!this->_internal_title().empty()) {
    const std::string& _s = this->_internal_title();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmwasm.wasm.v1.UpdateInstantiateConfigProposal.title");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string description = 2 [json_name = "description", (.gogoproto.moretags) = "yaml:\"description\""];
  if (!this->_internal_description().empty()) {
    const std::string& _s = this->_internal_description();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmwasm.wasm.v1.UpdateInstantiateConfigProposal.description");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // repeated .cosmwasm.wasm.v1.AccessConfigUpdate access_config_updates = 3 [json_name = "accessConfigUpdates", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_access_config_updates_size()); i < n; i++) {
    const auto& repfield = this->_internal_access_config_updates(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmwasm.wasm.v1.UpdateInstantiateConfigProposal)
  return target;
}

::size_t UpdateInstantiateConfigProposal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmwasm.wasm.v1.UpdateInstantiateConfigProposal)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cosmwasm.wasm.v1.AccessConfigUpdate access_config_updates = 3 [json_name = "accessConfigUpdates", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  total_size += 1UL * this->_internal_access_config_updates_size();
  for (const auto& msg : this->_internal_access_config_updates()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string title = 1 [json_name = "title", (.gogoproto.moretags) = "yaml:\"title\""];
  if (!this->_internal_title().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_title());
  }

  // string description = 2 [json_name = "description", (.gogoproto.moretags) = "yaml:\"description\""];
  if (!this->_internal_description().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_description());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateInstantiateConfigProposal::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UpdateInstantiateConfigProposal::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateInstantiateConfigProposal::GetClassData() const { return &_class_data_; }


void UpdateInstantiateConfigProposal::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UpdateInstantiateConfigProposal*>(&to_msg);
  auto& from = static_cast<const UpdateInstantiateConfigProposal&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmwasm.wasm.v1.UpdateInstantiateConfigProposal)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_access_config_updates()->MergeFrom(from._internal_access_config_updates());
  if (!from._internal_title().empty()) {
    _this->_internal_set_title(from._internal_title());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateInstantiateConfigProposal::CopyFrom(const UpdateInstantiateConfigProposal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmwasm.wasm.v1.UpdateInstantiateConfigProposal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateInstantiateConfigProposal::IsInitialized() const {
  return true;
}

void UpdateInstantiateConfigProposal::InternalSwap(UpdateInstantiateConfigProposal* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_access_config_updates()->InternalSwap(other->_internal_mutable_access_config_updates());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.title_, lhs_arena,
                                       &other->_impl_.title_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.description_, lhs_arena,
                                       &other->_impl_.description_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateInstantiateConfigProposal::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmwasm_2fwasm_2fv1_2fproposal_2eproto_getter, &descriptor_table_cosmwasm_2fwasm_2fv1_2fproposal_2eproto_once,
      file_level_metadata_cosmwasm_2fwasm_2fv1_2fproposal_2eproto[11]);
}
// ===================================================================

class StoreAndInstantiateContractProposal::_Internal {
 public:
  using HasBits = decltype(std::declval<StoreAndInstantiateContractProposal>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(StoreAndInstantiateContractProposal, _impl_._has_bits_);
  static const ::cosmwasm::wasm::v1::AccessConfig& instantiate_permission(const StoreAndInstantiateContractProposal* msg);
  static void set_has_instantiate_permission(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::cosmwasm::wasm::v1::AccessConfig&
StoreAndInstantiateContractProposal::_Internal::instantiate_permission(const StoreAndInstantiateContractProposal* msg) {
  return *msg->_impl_.instantiate_permission_;
}
void StoreAndInstantiateContractProposal::clear_instantiate_permission() {
  if (_impl_.instantiate_permission_ != nullptr) _impl_.instantiate_permission_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void StoreAndInstantiateContractProposal::clear_funds() {
  _internal_mutable_funds()->Clear();
}
StoreAndInstantiateContractProposal::StoreAndInstantiateContractProposal(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmwasm.wasm.v1.StoreAndInstantiateContractProposal)
}
StoreAndInstantiateContractProposal::StoreAndInstantiateContractProposal(const StoreAndInstantiateContractProposal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StoreAndInstantiateContractProposal* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.funds_){from._impl_.funds_}
    , decltype(_impl_.title_) {}

    , decltype(_impl_.description_) {}

    , decltype(_impl_.run_as_) {}

    , decltype(_impl_.wasm_byte_code_) {}

    , decltype(_impl_.admin_) {}

    , decltype(_impl_.label_) {}

    , decltype(_impl_.msg_) {}

    , decltype(_impl_.source_) {}

    , decltype(_impl_.builder_) {}

    , decltype(_impl_.code_hash_) {}

    , decltype(_impl_.instantiate_permission_){nullptr}
    , decltype(_impl_.unpin_code_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.title_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_title().empty()) {
    _this->_impl_.title_.Set(from._internal_title(), _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.description_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), _this->GetArenaForAllocation());
  }
  _impl_.run_as_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.run_as_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_run_as().empty()) {
    _this->_impl_.run_as_.Set(from._internal_run_as(), _this->GetArenaForAllocation());
  }
  _impl_.wasm_byte_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.wasm_byte_code_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_wasm_byte_code().empty()) {
    _this->_impl_.wasm_byte_code_.Set(from._internal_wasm_byte_code(), _this->GetArenaForAllocation());
  }
  _impl_.admin_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.admin_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_admin().empty()) {
    _this->_impl_.admin_.Set(from._internal_admin(), _this->GetArenaForAllocation());
  }
  _impl_.label_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.label_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_label().empty()) {
    _this->_impl_.label_.Set(from._internal_label(), _this->GetArenaForAllocation());
  }
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.msg_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_msg().empty()) {
    _this->_impl_.msg_.Set(from._internal_msg(), _this->GetArenaForAllocation());
  }
  _impl_.source_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.source_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_source().empty()) {
    _this->_impl_.source_.Set(from._internal_source(), _this->GetArenaForAllocation());
  }
  _impl_.builder_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.builder_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_builder().empty()) {
    _this->_impl_.builder_.Set(from._internal_builder(), _this->GetArenaForAllocation());
  }
  _impl_.code_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.code_hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_code_hash().empty()) {
    _this->_impl_.code_hash_.Set(from._internal_code_hash(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.instantiate_permission_ = new ::cosmwasm::wasm::v1::AccessConfig(*from._impl_.instantiate_permission_);
  }
  _this->_impl_.unpin_code_ = from._impl_.unpin_code_;
  // @@protoc_insertion_point(copy_constructor:cosmwasm.wasm.v1.StoreAndInstantiateContractProposal)
}

inline void StoreAndInstantiateContractProposal::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.funds_){arena}
    , decltype(_impl_.title_) {}

    , decltype(_impl_.description_) {}

    , decltype(_impl_.run_as_) {}

    , decltype(_impl_.wasm_byte_code_) {}

    , decltype(_impl_.admin_) {}

    , decltype(_impl_.label_) {}

    , decltype(_impl_.msg_) {}

    , decltype(_impl_.source_) {}

    , decltype(_impl_.builder_) {}

    , decltype(_impl_.code_hash_) {}

    , decltype(_impl_.instantiate_permission_){nullptr}
    , decltype(_impl_.unpin_code_) { false }

  };
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.title_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.description_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.run_as_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.run_as_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.wasm_byte_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.wasm_byte_code_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.admin_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.admin_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.label_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.label_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.msg_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.source_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.source_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.builder_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.builder_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.code_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.code_hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StoreAndInstantiateContractProposal::~StoreAndInstantiateContractProposal() {
  // @@protoc_insertion_point(destructor:cosmwasm.wasm.v1.StoreAndInstantiateContractProposal)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StoreAndInstantiateContractProposal::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_funds()->~RepeatedPtrField();
  _impl_.title_.Destroy();
  _impl_.description_.Destroy();
  _impl_.run_as_.Destroy();
  _impl_.wasm_byte_code_.Destroy();
  _impl_.admin_.Destroy();
  _impl_.label_.Destroy();
  _impl_.msg_.Destroy();
  _impl_.source_.Destroy();
  _impl_.builder_.Destroy();
  _impl_.code_hash_.Destroy();
  if (this != internal_default_instance()) delete _impl_.instantiate_permission_;
}

void StoreAndInstantiateContractProposal::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StoreAndInstantiateContractProposal::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmwasm.wasm.v1.StoreAndInstantiateContractProposal)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_funds()->Clear();
  _impl_.title_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  _impl_.run_as_.ClearToEmpty();
  _impl_.wasm_byte_code_.ClearToEmpty();
  _impl_.admin_.ClearToEmpty();
  _impl_.label_.ClearToEmpty();
  _impl_.msg_.ClearToEmpty();
  _impl_.source_.ClearToEmpty();
  _impl_.builder_.ClearToEmpty();
  _impl_.code_hash_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.instantiate_permission_ != nullptr);
    _impl_.instantiate_permission_->Clear();
  }
  _impl_.unpin_code_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StoreAndInstantiateContractProposal::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string title = 1 [json_name = "title"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmwasm.wasm.v1.StoreAndInstantiateContractProposal.title"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string description = 2 [json_name = "description"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmwasm.wasm.v1.StoreAndInstantiateContractProposal.description"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string run_as = 3 [json_name = "runAs"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_run_as();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmwasm.wasm.v1.StoreAndInstantiateContractProposal.run_as"));
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes wasm_byte_code = 4 [json_name = "wasmByteCode", (.gogoproto.customname) = "WASMByteCode"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_wasm_byte_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .cosmwasm.wasm.v1.AccessConfig instantiate_permission = 5 [json_name = "instantiatePermission"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_instantiate_permission(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bool unpin_code = 6 [json_name = "unpinCode"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _impl_.unpin_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string admin = 7 [json_name = "admin"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_admin();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmwasm.wasm.v1.StoreAndInstantiateContractProposal.admin"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string label = 8 [json_name = "label"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_label();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmwasm.wasm.v1.StoreAndInstantiateContractProposal.label"));
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes msg = 9 [json_name = "msg", (.gogoproto.casttype) = "RawContractMessage"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_msg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .cosmos.base.v1beta1.Coin funds = 10 [json_name = "funds", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.dont_omitempty) = true];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_funds(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // string source = 11 [json_name = "source"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_source();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmwasm.wasm.v1.StoreAndInstantiateContractProposal.source"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string builder = 12 [json_name = "builder"];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_builder();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmwasm.wasm.v1.StoreAndInstantiateContractProposal.builder"));
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes code_hash = 13 [json_name = "codeHash"];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_code_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* StoreAndInstantiateContractProposal::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmwasm.wasm.v1.StoreAndInstantiateContractProposal)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string title = 1 [json_name = "title"];
  if (!this->_internal_title().empty()) {
    const std::string& _s = this->_internal_title();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmwasm.wasm.v1.StoreAndInstantiateContractProposal.title");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string description = 2 [json_name = "description"];
  if (!this->_internal_description().empty()) {
    const std::string& _s = this->_internal_description();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmwasm.wasm.v1.StoreAndInstantiateContractProposal.description");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string run_as = 3 [json_name = "runAs"];
  if (!this->_internal_run_as().empty()) {
    const std::string& _s = this->_internal_run_as();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmwasm.wasm.v1.StoreAndInstantiateContractProposal.run_as");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // bytes wasm_byte_code = 4 [json_name = "wasmByteCode", (.gogoproto.customname) = "WASMByteCode"];
  if (!this->_internal_wasm_byte_code().empty()) {
    const std::string& _s = this->_internal_wasm_byte_code();
    target = stream->WriteBytesMaybeAliased(4, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .cosmwasm.wasm.v1.AccessConfig instantiate_permission = 5 [json_name = "instantiatePermission"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::instantiate_permission(this),
        _Internal::instantiate_permission(this).GetCachedSize(), target, stream);
  }

  // bool unpin_code = 6 [json_name = "unpinCode"];
  if (this->_internal_unpin_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        6, this->_internal_unpin_code(), target);
  }

  // string admin = 7 [json_name = "admin"];
  if (!this->_internal_admin().empty()) {
    const std::string& _s = this->_internal_admin();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmwasm.wasm.v1.StoreAndInstantiateContractProposal.admin");
    target = stream->WriteStringMaybeAliased(7, _s, target);
  }

  // string label = 8 [json_name = "label"];
  if (!this->_internal_label().empty()) {
    const std::string& _s = this->_internal_label();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmwasm.wasm.v1.StoreAndInstantiateContractProposal.label");
    target = stream->WriteStringMaybeAliased(8, _s, target);
  }

  // bytes msg = 9 [json_name = "msg", (.gogoproto.casttype) = "RawContractMessage"];
  if (!this->_internal_msg().empty()) {
    const std::string& _s = this->_internal_msg();
    target = stream->WriteBytesMaybeAliased(9, _s, target);
  }

  // repeated .cosmos.base.v1beta1.Coin funds = 10 [json_name = "funds", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.dont_omitempty) = true];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_funds_size()); i < n; i++) {
    const auto& repfield = this->_internal_funds(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(10, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string source = 11 [json_name = "source"];
  if (!this->_internal_source().empty()) {
    const std::string& _s = this->_internal_source();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmwasm.wasm.v1.StoreAndInstantiateContractProposal.source");
    target = stream->WriteStringMaybeAliased(11, _s, target);
  }

  // string builder = 12 [json_name = "builder"];
  if (!this->_internal_builder().empty()) {
    const std::string& _s = this->_internal_builder();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmwasm.wasm.v1.StoreAndInstantiateContractProposal.builder");
    target = stream->WriteStringMaybeAliased(12, _s, target);
  }

  // bytes code_hash = 13 [json_name = "codeHash"];
  if (!this->_internal_code_hash().empty()) {
    const std::string& _s = this->_internal_code_hash();
    target = stream->WriteBytesMaybeAliased(13, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmwasm.wasm.v1.StoreAndInstantiateContractProposal)
  return target;
}

::size_t StoreAndInstantiateContractProposal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmwasm.wasm.v1.StoreAndInstantiateContractProposal)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cosmos.base.v1beta1.Coin funds = 10 [json_name = "funds", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.dont_omitempty) = true];
  total_size += 1UL * this->_internal_funds_size();
  for (const auto& msg : this->_internal_funds()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string title = 1 [json_name = "title"];
  if (!this->_internal_title().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_title());
  }

  // string description = 2 [json_name = "description"];
  if (!this->_internal_description().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_description());
  }

  // string run_as = 3 [json_name = "runAs"];
  if (!this->_internal_run_as().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_run_as());
  }

  // bytes wasm_byte_code = 4 [json_name = "wasmByteCode", (.gogoproto.customname) = "WASMByteCode"];
  if (!this->_internal_wasm_byte_code().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_wasm_byte_code());
  }

  // string admin = 7 [json_name = "admin"];
  if (!this->_internal_admin().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_admin());
  }

  // string label = 8 [json_name = "label"];
  if (!this->_internal_label().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_label());
  }

  // bytes msg = 9 [json_name = "msg", (.gogoproto.casttype) = "RawContractMessage"];
  if (!this->_internal_msg().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_msg());
  }

  // string source = 11 [json_name = "source"];
  if (!this->_internal_source().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_source());
  }

  // string builder = 12 [json_name = "builder"];
  if (!this->_internal_builder().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_builder());
  }

  // bytes code_hash = 13 [json_name = "codeHash"];
  if (!this->_internal_code_hash().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_code_hash());
  }

  // .cosmwasm.wasm.v1.AccessConfig instantiate_permission = 5 [json_name = "instantiatePermission"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.instantiate_permission_);
  }

  // bool unpin_code = 6 [json_name = "unpinCode"];
  if (this->_internal_unpin_code() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StoreAndInstantiateContractProposal::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StoreAndInstantiateContractProposal::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StoreAndInstantiateContractProposal::GetClassData() const { return &_class_data_; }


void StoreAndInstantiateContractProposal::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StoreAndInstantiateContractProposal*>(&to_msg);
  auto& from = static_cast<const StoreAndInstantiateContractProposal&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmwasm.wasm.v1.StoreAndInstantiateContractProposal)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_funds()->MergeFrom(from._internal_funds());
  if (!from._internal_title().empty()) {
    _this->_internal_set_title(from._internal_title());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  if (!from._internal_run_as().empty()) {
    _this->_internal_set_run_as(from._internal_run_as());
  }
  if (!from._internal_wasm_byte_code().empty()) {
    _this->_internal_set_wasm_byte_code(from._internal_wasm_byte_code());
  }
  if (!from._internal_admin().empty()) {
    _this->_internal_set_admin(from._internal_admin());
  }
  if (!from._internal_label().empty()) {
    _this->_internal_set_label(from._internal_label());
  }
  if (!from._internal_msg().empty()) {
    _this->_internal_set_msg(from._internal_msg());
  }
  if (!from._internal_source().empty()) {
    _this->_internal_set_source(from._internal_source());
  }
  if (!from._internal_builder().empty()) {
    _this->_internal_set_builder(from._internal_builder());
  }
  if (!from._internal_code_hash().empty()) {
    _this->_internal_set_code_hash(from._internal_code_hash());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_instantiate_permission()->::cosmwasm::wasm::v1::AccessConfig::MergeFrom(
        from._internal_instantiate_permission());
  }
  if (from._internal_unpin_code() != 0) {
    _this->_internal_set_unpin_code(from._internal_unpin_code());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StoreAndInstantiateContractProposal::CopyFrom(const StoreAndInstantiateContractProposal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmwasm.wasm.v1.StoreAndInstantiateContractProposal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoreAndInstantiateContractProposal::IsInitialized() const {
  return true;
}

void StoreAndInstantiateContractProposal::InternalSwap(StoreAndInstantiateContractProposal* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_funds()->InternalSwap(other->_internal_mutable_funds());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.title_, lhs_arena,
                                       &other->_impl_.title_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.description_, lhs_arena,
                                       &other->_impl_.description_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.run_as_, lhs_arena,
                                       &other->_impl_.run_as_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.wasm_byte_code_, lhs_arena,
                                       &other->_impl_.wasm_byte_code_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.admin_, lhs_arena,
                                       &other->_impl_.admin_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.label_, lhs_arena,
                                       &other->_impl_.label_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.msg_, lhs_arena,
                                       &other->_impl_.msg_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.source_, lhs_arena,
                                       &other->_impl_.source_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.builder_, lhs_arena,
                                       &other->_impl_.builder_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.code_hash_, lhs_arena,
                                       &other->_impl_.code_hash_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StoreAndInstantiateContractProposal, _impl_.unpin_code_)
      + sizeof(StoreAndInstantiateContractProposal::_impl_.unpin_code_)
      - PROTOBUF_FIELD_OFFSET(StoreAndInstantiateContractProposal, _impl_.instantiate_permission_)>(
          reinterpret_cast<char*>(&_impl_.instantiate_permission_),
          reinterpret_cast<char*>(&other->_impl_.instantiate_permission_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StoreAndInstantiateContractProposal::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmwasm_2fwasm_2fv1_2fproposal_2eproto_getter, &descriptor_table_cosmwasm_2fwasm_2fv1_2fproposal_2eproto_once,
      file_level_metadata_cosmwasm_2fwasm_2fv1_2fproposal_2eproto[12]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace wasm
}  // namespace cosmwasm
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cosmwasm::wasm::v1::StoreCodeProposal*
Arena::CreateMaybeMessage< ::cosmwasm::wasm::v1::StoreCodeProposal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmwasm::wasm::v1::StoreCodeProposal >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmwasm::wasm::v1::InstantiateContractProposal*
Arena::CreateMaybeMessage< ::cosmwasm::wasm::v1::InstantiateContractProposal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmwasm::wasm::v1::InstantiateContractProposal >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmwasm::wasm::v1::InstantiateContract2Proposal*
Arena::CreateMaybeMessage< ::cosmwasm::wasm::v1::InstantiateContract2Proposal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmwasm::wasm::v1::InstantiateContract2Proposal >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmwasm::wasm::v1::MigrateContractProposal*
Arena::CreateMaybeMessage< ::cosmwasm::wasm::v1::MigrateContractProposal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmwasm::wasm::v1::MigrateContractProposal >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmwasm::wasm::v1::SudoContractProposal*
Arena::CreateMaybeMessage< ::cosmwasm::wasm::v1::SudoContractProposal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmwasm::wasm::v1::SudoContractProposal >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmwasm::wasm::v1::ExecuteContractProposal*
Arena::CreateMaybeMessage< ::cosmwasm::wasm::v1::ExecuteContractProposal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmwasm::wasm::v1::ExecuteContractProposal >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmwasm::wasm::v1::UpdateAdminProposal*
Arena::CreateMaybeMessage< ::cosmwasm::wasm::v1::UpdateAdminProposal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmwasm::wasm::v1::UpdateAdminProposal >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmwasm::wasm::v1::ClearAdminProposal*
Arena::CreateMaybeMessage< ::cosmwasm::wasm::v1::ClearAdminProposal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmwasm::wasm::v1::ClearAdminProposal >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmwasm::wasm::v1::PinCodesProposal*
Arena::CreateMaybeMessage< ::cosmwasm::wasm::v1::PinCodesProposal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmwasm::wasm::v1::PinCodesProposal >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmwasm::wasm::v1::UnpinCodesProposal*
Arena::CreateMaybeMessage< ::cosmwasm::wasm::v1::UnpinCodesProposal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmwasm::wasm::v1::UnpinCodesProposal >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmwasm::wasm::v1::AccessConfigUpdate*
Arena::CreateMaybeMessage< ::cosmwasm::wasm::v1::AccessConfigUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmwasm::wasm::v1::AccessConfigUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmwasm::wasm::v1::UpdateInstantiateConfigProposal*
Arena::CreateMaybeMessage< ::cosmwasm::wasm::v1::UpdateInstantiateConfigProposal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmwasm::wasm::v1::UpdateInstantiateConfigProposal >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmwasm::wasm::v1::StoreAndInstantiateContractProposal*
Arena::CreateMaybeMessage< ::cosmwasm::wasm::v1::StoreAndInstantiateContractProposal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmwasm::wasm::v1::StoreAndInstantiateContractProposal >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

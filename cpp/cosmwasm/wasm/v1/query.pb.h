// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cosmwasm/wasm/v1/query.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cosmwasm_2fwasm_2fv1_2fquery_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_cosmwasm_2fwasm_2fv1_2fquery_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "gogoproto/gogo.pb.h"
#include "cosmwasm/wasm/v1/types.pb.h"
#include "google/api/annotations.pb.h"
#include "cosmos/base/query/v1beta1/pagination.pb.h"
#include "amino/amino.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_cosmwasm_2fwasm_2fv1_2fquery_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cosmwasm_2fwasm_2fv1_2fquery_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_cosmwasm_2fwasm_2fv1_2fquery_2eproto;
namespace cosmwasm {
namespace wasm {
namespace v1 {
class CodeInfoResponse;
struct CodeInfoResponseDefaultTypeInternal;
extern CodeInfoResponseDefaultTypeInternal _CodeInfoResponse_default_instance_;
class QueryAllContractStateRequest;
struct QueryAllContractStateRequestDefaultTypeInternal;
extern QueryAllContractStateRequestDefaultTypeInternal _QueryAllContractStateRequest_default_instance_;
class QueryAllContractStateResponse;
struct QueryAllContractStateResponseDefaultTypeInternal;
extern QueryAllContractStateResponseDefaultTypeInternal _QueryAllContractStateResponse_default_instance_;
class QueryCodeRequest;
struct QueryCodeRequestDefaultTypeInternal;
extern QueryCodeRequestDefaultTypeInternal _QueryCodeRequest_default_instance_;
class QueryCodeResponse;
struct QueryCodeResponseDefaultTypeInternal;
extern QueryCodeResponseDefaultTypeInternal _QueryCodeResponse_default_instance_;
class QueryCodesRequest;
struct QueryCodesRequestDefaultTypeInternal;
extern QueryCodesRequestDefaultTypeInternal _QueryCodesRequest_default_instance_;
class QueryCodesResponse;
struct QueryCodesResponseDefaultTypeInternal;
extern QueryCodesResponseDefaultTypeInternal _QueryCodesResponse_default_instance_;
class QueryContractHistoryRequest;
struct QueryContractHistoryRequestDefaultTypeInternal;
extern QueryContractHistoryRequestDefaultTypeInternal _QueryContractHistoryRequest_default_instance_;
class QueryContractHistoryResponse;
struct QueryContractHistoryResponseDefaultTypeInternal;
extern QueryContractHistoryResponseDefaultTypeInternal _QueryContractHistoryResponse_default_instance_;
class QueryContractInfoRequest;
struct QueryContractInfoRequestDefaultTypeInternal;
extern QueryContractInfoRequestDefaultTypeInternal _QueryContractInfoRequest_default_instance_;
class QueryContractInfoResponse;
struct QueryContractInfoResponseDefaultTypeInternal;
extern QueryContractInfoResponseDefaultTypeInternal _QueryContractInfoResponse_default_instance_;
class QueryContractsByCodeRequest;
struct QueryContractsByCodeRequestDefaultTypeInternal;
extern QueryContractsByCodeRequestDefaultTypeInternal _QueryContractsByCodeRequest_default_instance_;
class QueryContractsByCodeResponse;
struct QueryContractsByCodeResponseDefaultTypeInternal;
extern QueryContractsByCodeResponseDefaultTypeInternal _QueryContractsByCodeResponse_default_instance_;
class QueryContractsByCreatorRequest;
struct QueryContractsByCreatorRequestDefaultTypeInternal;
extern QueryContractsByCreatorRequestDefaultTypeInternal _QueryContractsByCreatorRequest_default_instance_;
class QueryContractsByCreatorResponse;
struct QueryContractsByCreatorResponseDefaultTypeInternal;
extern QueryContractsByCreatorResponseDefaultTypeInternal _QueryContractsByCreatorResponse_default_instance_;
class QueryParamsRequest;
struct QueryParamsRequestDefaultTypeInternal;
extern QueryParamsRequestDefaultTypeInternal _QueryParamsRequest_default_instance_;
class QueryParamsResponse;
struct QueryParamsResponseDefaultTypeInternal;
extern QueryParamsResponseDefaultTypeInternal _QueryParamsResponse_default_instance_;
class QueryPinnedCodesRequest;
struct QueryPinnedCodesRequestDefaultTypeInternal;
extern QueryPinnedCodesRequestDefaultTypeInternal _QueryPinnedCodesRequest_default_instance_;
class QueryPinnedCodesResponse;
struct QueryPinnedCodesResponseDefaultTypeInternal;
extern QueryPinnedCodesResponseDefaultTypeInternal _QueryPinnedCodesResponse_default_instance_;
class QueryRawContractStateRequest;
struct QueryRawContractStateRequestDefaultTypeInternal;
extern QueryRawContractStateRequestDefaultTypeInternal _QueryRawContractStateRequest_default_instance_;
class QueryRawContractStateResponse;
struct QueryRawContractStateResponseDefaultTypeInternal;
extern QueryRawContractStateResponseDefaultTypeInternal _QueryRawContractStateResponse_default_instance_;
class QuerySmartContractStateRequest;
struct QuerySmartContractStateRequestDefaultTypeInternal;
extern QuerySmartContractStateRequestDefaultTypeInternal _QuerySmartContractStateRequest_default_instance_;
class QuerySmartContractStateResponse;
struct QuerySmartContractStateResponseDefaultTypeInternal;
extern QuerySmartContractStateResponseDefaultTypeInternal _QuerySmartContractStateResponse_default_instance_;
}  // namespace v1
}  // namespace wasm
}  // namespace cosmwasm
PROTOBUF_NAMESPACE_OPEN
template <>
::cosmwasm::wasm::v1::CodeInfoResponse* Arena::CreateMaybeMessage<::cosmwasm::wasm::v1::CodeInfoResponse>(Arena*);
template <>
::cosmwasm::wasm::v1::QueryAllContractStateRequest* Arena::CreateMaybeMessage<::cosmwasm::wasm::v1::QueryAllContractStateRequest>(Arena*);
template <>
::cosmwasm::wasm::v1::QueryAllContractStateResponse* Arena::CreateMaybeMessage<::cosmwasm::wasm::v1::QueryAllContractStateResponse>(Arena*);
template <>
::cosmwasm::wasm::v1::QueryCodeRequest* Arena::CreateMaybeMessage<::cosmwasm::wasm::v1::QueryCodeRequest>(Arena*);
template <>
::cosmwasm::wasm::v1::QueryCodeResponse* Arena::CreateMaybeMessage<::cosmwasm::wasm::v1::QueryCodeResponse>(Arena*);
template <>
::cosmwasm::wasm::v1::QueryCodesRequest* Arena::CreateMaybeMessage<::cosmwasm::wasm::v1::QueryCodesRequest>(Arena*);
template <>
::cosmwasm::wasm::v1::QueryCodesResponse* Arena::CreateMaybeMessage<::cosmwasm::wasm::v1::QueryCodesResponse>(Arena*);
template <>
::cosmwasm::wasm::v1::QueryContractHistoryRequest* Arena::CreateMaybeMessage<::cosmwasm::wasm::v1::QueryContractHistoryRequest>(Arena*);
template <>
::cosmwasm::wasm::v1::QueryContractHistoryResponse* Arena::CreateMaybeMessage<::cosmwasm::wasm::v1::QueryContractHistoryResponse>(Arena*);
template <>
::cosmwasm::wasm::v1::QueryContractInfoRequest* Arena::CreateMaybeMessage<::cosmwasm::wasm::v1::QueryContractInfoRequest>(Arena*);
template <>
::cosmwasm::wasm::v1::QueryContractInfoResponse* Arena::CreateMaybeMessage<::cosmwasm::wasm::v1::QueryContractInfoResponse>(Arena*);
template <>
::cosmwasm::wasm::v1::QueryContractsByCodeRequest* Arena::CreateMaybeMessage<::cosmwasm::wasm::v1::QueryContractsByCodeRequest>(Arena*);
template <>
::cosmwasm::wasm::v1::QueryContractsByCodeResponse* Arena::CreateMaybeMessage<::cosmwasm::wasm::v1::QueryContractsByCodeResponse>(Arena*);
template <>
::cosmwasm::wasm::v1::QueryContractsByCreatorRequest* Arena::CreateMaybeMessage<::cosmwasm::wasm::v1::QueryContractsByCreatorRequest>(Arena*);
template <>
::cosmwasm::wasm::v1::QueryContractsByCreatorResponse* Arena::CreateMaybeMessage<::cosmwasm::wasm::v1::QueryContractsByCreatorResponse>(Arena*);
template <>
::cosmwasm::wasm::v1::QueryParamsRequest* Arena::CreateMaybeMessage<::cosmwasm::wasm::v1::QueryParamsRequest>(Arena*);
template <>
::cosmwasm::wasm::v1::QueryParamsResponse* Arena::CreateMaybeMessage<::cosmwasm::wasm::v1::QueryParamsResponse>(Arena*);
template <>
::cosmwasm::wasm::v1::QueryPinnedCodesRequest* Arena::CreateMaybeMessage<::cosmwasm::wasm::v1::QueryPinnedCodesRequest>(Arena*);
template <>
::cosmwasm::wasm::v1::QueryPinnedCodesResponse* Arena::CreateMaybeMessage<::cosmwasm::wasm::v1::QueryPinnedCodesResponse>(Arena*);
template <>
::cosmwasm::wasm::v1::QueryRawContractStateRequest* Arena::CreateMaybeMessage<::cosmwasm::wasm::v1::QueryRawContractStateRequest>(Arena*);
template <>
::cosmwasm::wasm::v1::QueryRawContractStateResponse* Arena::CreateMaybeMessage<::cosmwasm::wasm::v1::QueryRawContractStateResponse>(Arena*);
template <>
::cosmwasm::wasm::v1::QuerySmartContractStateRequest* Arena::CreateMaybeMessage<::cosmwasm::wasm::v1::QuerySmartContractStateRequest>(Arena*);
template <>
::cosmwasm::wasm::v1::QuerySmartContractStateResponse* Arena::CreateMaybeMessage<::cosmwasm::wasm::v1::QuerySmartContractStateResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace cosmwasm {
namespace wasm {
namespace v1 {

// ===================================================================


// -------------------------------------------------------------------

class QueryContractInfoRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmwasm.wasm.v1.QueryContractInfoRequest) */ {
 public:
  inline QueryContractInfoRequest() : QueryContractInfoRequest(nullptr) {}
  ~QueryContractInfoRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryContractInfoRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryContractInfoRequest(const QueryContractInfoRequest& from);
  QueryContractInfoRequest(QueryContractInfoRequest&& from) noexcept
    : QueryContractInfoRequest() {
    *this = ::std::move(from);
  }

  inline QueryContractInfoRequest& operator=(const QueryContractInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryContractInfoRequest& operator=(QueryContractInfoRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryContractInfoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryContractInfoRequest* internal_default_instance() {
    return reinterpret_cast<const QueryContractInfoRequest*>(
               &_QueryContractInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(QueryContractInfoRequest& a, QueryContractInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryContractInfoRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryContractInfoRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryContractInfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryContractInfoRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryContractInfoRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryContractInfoRequest& from) {
    QueryContractInfoRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryContractInfoRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmwasm.wasm.v1.QueryContractInfoRequest";
  }
  protected:
  explicit QueryContractInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
  };
  // string address = 1 [json_name = "address"];
  void clear_address() ;
  const std::string& address() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_address(Arg_&& arg, Args_... args);
  std::string* mutable_address();
  PROTOBUF_NODISCARD std::string* release_address();
  void set_allocated_address(std::string* ptr);

  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(
      const std::string& value);
  std::string* _internal_mutable_address();

  public:
  // @@protoc_insertion_point(class_scope:cosmwasm.wasm.v1.QueryContractInfoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmwasm_2fwasm_2fv1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryContractInfoResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmwasm.wasm.v1.QueryContractInfoResponse) */ {
 public:
  inline QueryContractInfoResponse() : QueryContractInfoResponse(nullptr) {}
  ~QueryContractInfoResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryContractInfoResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryContractInfoResponse(const QueryContractInfoResponse& from);
  QueryContractInfoResponse(QueryContractInfoResponse&& from) noexcept
    : QueryContractInfoResponse() {
    *this = ::std::move(from);
  }

  inline QueryContractInfoResponse& operator=(const QueryContractInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryContractInfoResponse& operator=(QueryContractInfoResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryContractInfoResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryContractInfoResponse* internal_default_instance() {
    return reinterpret_cast<const QueryContractInfoResponse*>(
               &_QueryContractInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(QueryContractInfoResponse& a, QueryContractInfoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryContractInfoResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryContractInfoResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryContractInfoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryContractInfoResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryContractInfoResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryContractInfoResponse& from) {
    QueryContractInfoResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryContractInfoResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmwasm.wasm.v1.QueryContractInfoResponse";
  }
  protected:
  explicit QueryContractInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
    kContractInfoFieldNumber = 2,
  };
  // string address = 1 [json_name = "address"];
  void clear_address() ;
  const std::string& address() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_address(Arg_&& arg, Args_... args);
  std::string* mutable_address();
  PROTOBUF_NODISCARD std::string* release_address();
  void set_allocated_address(std::string* ptr);

  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(
      const std::string& value);
  std::string* _internal_mutable_address();

  public:
  // .cosmwasm.wasm.v1.ContractInfo contract_info = 2 [json_name = "contractInfo", (.gogoproto.nullable) = false, (.gogoproto.embed) = true, (.gogoproto.jsontag) = "", (.amino.dont_omitempty) = true];
  bool has_contract_info() const;
  void clear_contract_info() ;
  const ::cosmwasm::wasm::v1::ContractInfo& contract_info() const;
  PROTOBUF_NODISCARD ::cosmwasm::wasm::v1::ContractInfo* release_contract_info();
  ::cosmwasm::wasm::v1::ContractInfo* mutable_contract_info();
  void set_allocated_contract_info(::cosmwasm::wasm::v1::ContractInfo* contract_info);
  private:
  const ::cosmwasm::wasm::v1::ContractInfo& _internal_contract_info() const;
  ::cosmwasm::wasm::v1::ContractInfo* _internal_mutable_contract_info();
  public:
  void unsafe_arena_set_allocated_contract_info(
      ::cosmwasm::wasm::v1::ContractInfo* contract_info);
  ::cosmwasm::wasm::v1::ContractInfo* unsafe_arena_release_contract_info();
  // @@protoc_insertion_point(class_scope:cosmwasm.wasm.v1.QueryContractInfoResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
    ::cosmwasm::wasm::v1::ContractInfo* contract_info_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmwasm_2fwasm_2fv1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryContractHistoryRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmwasm.wasm.v1.QueryContractHistoryRequest) */ {
 public:
  inline QueryContractHistoryRequest() : QueryContractHistoryRequest(nullptr) {}
  ~QueryContractHistoryRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryContractHistoryRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryContractHistoryRequest(const QueryContractHistoryRequest& from);
  QueryContractHistoryRequest(QueryContractHistoryRequest&& from) noexcept
    : QueryContractHistoryRequest() {
    *this = ::std::move(from);
  }

  inline QueryContractHistoryRequest& operator=(const QueryContractHistoryRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryContractHistoryRequest& operator=(QueryContractHistoryRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryContractHistoryRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryContractHistoryRequest* internal_default_instance() {
    return reinterpret_cast<const QueryContractHistoryRequest*>(
               &_QueryContractHistoryRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(QueryContractHistoryRequest& a, QueryContractHistoryRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryContractHistoryRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryContractHistoryRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryContractHistoryRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryContractHistoryRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryContractHistoryRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryContractHistoryRequest& from) {
    QueryContractHistoryRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryContractHistoryRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmwasm.wasm.v1.QueryContractHistoryRequest";
  }
  protected:
  explicit QueryContractHistoryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
    kPaginationFieldNumber = 2,
  };
  // string address = 1 [json_name = "address"];
  void clear_address() ;
  const std::string& address() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_address(Arg_&& arg, Args_... args);
  std::string* mutable_address();
  PROTOBUF_NODISCARD std::string* release_address();
  void set_allocated_address(std::string* ptr);

  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(
      const std::string& value);
  std::string* _internal_mutable_address();

  public:
  // .cosmos.base.query.v1beta1.PageRequest pagination = 2 [json_name = "pagination"];
  bool has_pagination() const;
  void clear_pagination() ;
  const ::cosmos::base::query::v1beta1::PageRequest& pagination() const;
  PROTOBUF_NODISCARD ::cosmos::base::query::v1beta1::PageRequest* release_pagination();
  ::cosmos::base::query::v1beta1::PageRequest* mutable_pagination();
  void set_allocated_pagination(::cosmos::base::query::v1beta1::PageRequest* pagination);
  private:
  const ::cosmos::base::query::v1beta1::PageRequest& _internal_pagination() const;
  ::cosmos::base::query::v1beta1::PageRequest* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::cosmos::base::query::v1beta1::PageRequest* pagination);
  ::cosmos::base::query::v1beta1::PageRequest* unsafe_arena_release_pagination();
  // @@protoc_insertion_point(class_scope:cosmwasm.wasm.v1.QueryContractHistoryRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
    ::cosmos::base::query::v1beta1::PageRequest* pagination_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmwasm_2fwasm_2fv1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryContractHistoryResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmwasm.wasm.v1.QueryContractHistoryResponse) */ {
 public:
  inline QueryContractHistoryResponse() : QueryContractHistoryResponse(nullptr) {}
  ~QueryContractHistoryResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryContractHistoryResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryContractHistoryResponse(const QueryContractHistoryResponse& from);
  QueryContractHistoryResponse(QueryContractHistoryResponse&& from) noexcept
    : QueryContractHistoryResponse() {
    *this = ::std::move(from);
  }

  inline QueryContractHistoryResponse& operator=(const QueryContractHistoryResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryContractHistoryResponse& operator=(QueryContractHistoryResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryContractHistoryResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryContractHistoryResponse* internal_default_instance() {
    return reinterpret_cast<const QueryContractHistoryResponse*>(
               &_QueryContractHistoryResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(QueryContractHistoryResponse& a, QueryContractHistoryResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryContractHistoryResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryContractHistoryResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryContractHistoryResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryContractHistoryResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryContractHistoryResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryContractHistoryResponse& from) {
    QueryContractHistoryResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryContractHistoryResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmwasm.wasm.v1.QueryContractHistoryResponse";
  }
  protected:
  explicit QueryContractHistoryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntriesFieldNumber = 1,
    kPaginationFieldNumber = 2,
  };
  // repeated .cosmwasm.wasm.v1.ContractCodeHistoryEntry entries = 1 [json_name = "entries", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  int entries_size() const;
  private:
  int _internal_entries_size() const;

  public:
  void clear_entries() ;
  ::cosmwasm::wasm::v1::ContractCodeHistoryEntry* mutable_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmwasm::wasm::v1::ContractCodeHistoryEntry >*
      mutable_entries();
  private:
  const ::cosmwasm::wasm::v1::ContractCodeHistoryEntry& _internal_entries(int index) const;
  ::cosmwasm::wasm::v1::ContractCodeHistoryEntry* _internal_add_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmwasm::wasm::v1::ContractCodeHistoryEntry>& _internal_entries() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmwasm::wasm::v1::ContractCodeHistoryEntry>* _internal_mutable_entries();
  public:
  const ::cosmwasm::wasm::v1::ContractCodeHistoryEntry& entries(int index) const;
  ::cosmwasm::wasm::v1::ContractCodeHistoryEntry* add_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmwasm::wasm::v1::ContractCodeHistoryEntry >&
      entries() const;
  // .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
  bool has_pagination() const;
  void clear_pagination() ;
  const ::cosmos::base::query::v1beta1::PageResponse& pagination() const;
  PROTOBUF_NODISCARD ::cosmos::base::query::v1beta1::PageResponse* release_pagination();
  ::cosmos::base::query::v1beta1::PageResponse* mutable_pagination();
  void set_allocated_pagination(::cosmos::base::query::v1beta1::PageResponse* pagination);
  private:
  const ::cosmos::base::query::v1beta1::PageResponse& _internal_pagination() const;
  ::cosmos::base::query::v1beta1::PageResponse* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::cosmos::base::query::v1beta1::PageResponse* pagination);
  ::cosmos::base::query::v1beta1::PageResponse* unsafe_arena_release_pagination();
  // @@protoc_insertion_point(class_scope:cosmwasm.wasm.v1.QueryContractHistoryResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmwasm::wasm::v1::ContractCodeHistoryEntry > entries_;
    ::cosmos::base::query::v1beta1::PageResponse* pagination_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmwasm_2fwasm_2fv1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryContractsByCodeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmwasm.wasm.v1.QueryContractsByCodeRequest) */ {
 public:
  inline QueryContractsByCodeRequest() : QueryContractsByCodeRequest(nullptr) {}
  ~QueryContractsByCodeRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryContractsByCodeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryContractsByCodeRequest(const QueryContractsByCodeRequest& from);
  QueryContractsByCodeRequest(QueryContractsByCodeRequest&& from) noexcept
    : QueryContractsByCodeRequest() {
    *this = ::std::move(from);
  }

  inline QueryContractsByCodeRequest& operator=(const QueryContractsByCodeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryContractsByCodeRequest& operator=(QueryContractsByCodeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryContractsByCodeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryContractsByCodeRequest* internal_default_instance() {
    return reinterpret_cast<const QueryContractsByCodeRequest*>(
               &_QueryContractsByCodeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(QueryContractsByCodeRequest& a, QueryContractsByCodeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryContractsByCodeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryContractsByCodeRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryContractsByCodeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryContractsByCodeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryContractsByCodeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryContractsByCodeRequest& from) {
    QueryContractsByCodeRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryContractsByCodeRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmwasm.wasm.v1.QueryContractsByCodeRequest";
  }
  protected:
  explicit QueryContractsByCodeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPaginationFieldNumber = 2,
    kCodeIdFieldNumber = 1,
  };
  // .cosmos.base.query.v1beta1.PageRequest pagination = 2 [json_name = "pagination"];
  bool has_pagination() const;
  void clear_pagination() ;
  const ::cosmos::base::query::v1beta1::PageRequest& pagination() const;
  PROTOBUF_NODISCARD ::cosmos::base::query::v1beta1::PageRequest* release_pagination();
  ::cosmos::base::query::v1beta1::PageRequest* mutable_pagination();
  void set_allocated_pagination(::cosmos::base::query::v1beta1::PageRequest* pagination);
  private:
  const ::cosmos::base::query::v1beta1::PageRequest& _internal_pagination() const;
  ::cosmos::base::query::v1beta1::PageRequest* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::cosmos::base::query::v1beta1::PageRequest* pagination);
  ::cosmos::base::query::v1beta1::PageRequest* unsafe_arena_release_pagination();
  // uint64 code_id = 1 [json_name = "codeId"];
  void clear_code_id() ;
  ::uint64_t code_id() const;
  void set_code_id(::uint64_t value);

  private:
  ::uint64_t _internal_code_id() const;
  void _internal_set_code_id(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:cosmwasm.wasm.v1.QueryContractsByCodeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::cosmos::base::query::v1beta1::PageRequest* pagination_;
    ::uint64_t code_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmwasm_2fwasm_2fv1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryContractsByCodeResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmwasm.wasm.v1.QueryContractsByCodeResponse) */ {
 public:
  inline QueryContractsByCodeResponse() : QueryContractsByCodeResponse(nullptr) {}
  ~QueryContractsByCodeResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryContractsByCodeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryContractsByCodeResponse(const QueryContractsByCodeResponse& from);
  QueryContractsByCodeResponse(QueryContractsByCodeResponse&& from) noexcept
    : QueryContractsByCodeResponse() {
    *this = ::std::move(from);
  }

  inline QueryContractsByCodeResponse& operator=(const QueryContractsByCodeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryContractsByCodeResponse& operator=(QueryContractsByCodeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryContractsByCodeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryContractsByCodeResponse* internal_default_instance() {
    return reinterpret_cast<const QueryContractsByCodeResponse*>(
               &_QueryContractsByCodeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(QueryContractsByCodeResponse& a, QueryContractsByCodeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryContractsByCodeResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryContractsByCodeResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryContractsByCodeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryContractsByCodeResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryContractsByCodeResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryContractsByCodeResponse& from) {
    QueryContractsByCodeResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryContractsByCodeResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmwasm.wasm.v1.QueryContractsByCodeResponse";
  }
  protected:
  explicit QueryContractsByCodeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContractsFieldNumber = 1,
    kPaginationFieldNumber = 2,
  };
  // repeated string contracts = 1 [json_name = "contracts"];
  int contracts_size() const;
  private:
  int _internal_contracts_size() const;

  public:
  void clear_contracts() ;
  const std::string& contracts(int index) const;
  std::string* mutable_contracts(int index);
  void set_contracts(int index, const std::string& value);
  void set_contracts(int index, std::string&& value);
  void set_contracts(int index, const char* value);
  void set_contracts(int index, const char* value, std::size_t size);
  void set_contracts(int index, absl::string_view value);
  std::string* add_contracts();
  void add_contracts(const std::string& value);
  void add_contracts(std::string&& value);
  void add_contracts(const char* value);
  void add_contracts(const char* value, std::size_t size);
  void add_contracts(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& contracts() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_contracts();

  private:
  const std::string& _internal_contracts(int index) const;
  std::string* _internal_add_contracts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_contracts() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_contracts();

  public:
  // .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
  bool has_pagination() const;
  void clear_pagination() ;
  const ::cosmos::base::query::v1beta1::PageResponse& pagination() const;
  PROTOBUF_NODISCARD ::cosmos::base::query::v1beta1::PageResponse* release_pagination();
  ::cosmos::base::query::v1beta1::PageResponse* mutable_pagination();
  void set_allocated_pagination(::cosmos::base::query::v1beta1::PageResponse* pagination);
  private:
  const ::cosmos::base::query::v1beta1::PageResponse& _internal_pagination() const;
  ::cosmos::base::query::v1beta1::PageResponse* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::cosmos::base::query::v1beta1::PageResponse* pagination);
  ::cosmos::base::query::v1beta1::PageResponse* unsafe_arena_release_pagination();
  // @@protoc_insertion_point(class_scope:cosmwasm.wasm.v1.QueryContractsByCodeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> contracts_;
    ::cosmos::base::query::v1beta1::PageResponse* pagination_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmwasm_2fwasm_2fv1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryAllContractStateRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmwasm.wasm.v1.QueryAllContractStateRequest) */ {
 public:
  inline QueryAllContractStateRequest() : QueryAllContractStateRequest(nullptr) {}
  ~QueryAllContractStateRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryAllContractStateRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryAllContractStateRequest(const QueryAllContractStateRequest& from);
  QueryAllContractStateRequest(QueryAllContractStateRequest&& from) noexcept
    : QueryAllContractStateRequest() {
    *this = ::std::move(from);
  }

  inline QueryAllContractStateRequest& operator=(const QueryAllContractStateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryAllContractStateRequest& operator=(QueryAllContractStateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryAllContractStateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryAllContractStateRequest* internal_default_instance() {
    return reinterpret_cast<const QueryAllContractStateRequest*>(
               &_QueryAllContractStateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(QueryAllContractStateRequest& a, QueryAllContractStateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryAllContractStateRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryAllContractStateRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryAllContractStateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryAllContractStateRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryAllContractStateRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryAllContractStateRequest& from) {
    QueryAllContractStateRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryAllContractStateRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmwasm.wasm.v1.QueryAllContractStateRequest";
  }
  protected:
  explicit QueryAllContractStateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
    kPaginationFieldNumber = 2,
  };
  // string address = 1 [json_name = "address"];
  void clear_address() ;
  const std::string& address() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_address(Arg_&& arg, Args_... args);
  std::string* mutable_address();
  PROTOBUF_NODISCARD std::string* release_address();
  void set_allocated_address(std::string* ptr);

  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(
      const std::string& value);
  std::string* _internal_mutable_address();

  public:
  // .cosmos.base.query.v1beta1.PageRequest pagination = 2 [json_name = "pagination"];
  bool has_pagination() const;
  void clear_pagination() ;
  const ::cosmos::base::query::v1beta1::PageRequest& pagination() const;
  PROTOBUF_NODISCARD ::cosmos::base::query::v1beta1::PageRequest* release_pagination();
  ::cosmos::base::query::v1beta1::PageRequest* mutable_pagination();
  void set_allocated_pagination(::cosmos::base::query::v1beta1::PageRequest* pagination);
  private:
  const ::cosmos::base::query::v1beta1::PageRequest& _internal_pagination() const;
  ::cosmos::base::query::v1beta1::PageRequest* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::cosmos::base::query::v1beta1::PageRequest* pagination);
  ::cosmos::base::query::v1beta1::PageRequest* unsafe_arena_release_pagination();
  // @@protoc_insertion_point(class_scope:cosmwasm.wasm.v1.QueryAllContractStateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
    ::cosmos::base::query::v1beta1::PageRequest* pagination_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmwasm_2fwasm_2fv1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryAllContractStateResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmwasm.wasm.v1.QueryAllContractStateResponse) */ {
 public:
  inline QueryAllContractStateResponse() : QueryAllContractStateResponse(nullptr) {}
  ~QueryAllContractStateResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryAllContractStateResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryAllContractStateResponse(const QueryAllContractStateResponse& from);
  QueryAllContractStateResponse(QueryAllContractStateResponse&& from) noexcept
    : QueryAllContractStateResponse() {
    *this = ::std::move(from);
  }

  inline QueryAllContractStateResponse& operator=(const QueryAllContractStateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryAllContractStateResponse& operator=(QueryAllContractStateResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryAllContractStateResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryAllContractStateResponse* internal_default_instance() {
    return reinterpret_cast<const QueryAllContractStateResponse*>(
               &_QueryAllContractStateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(QueryAllContractStateResponse& a, QueryAllContractStateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryAllContractStateResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryAllContractStateResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryAllContractStateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryAllContractStateResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryAllContractStateResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryAllContractStateResponse& from) {
    QueryAllContractStateResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryAllContractStateResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmwasm.wasm.v1.QueryAllContractStateResponse";
  }
  protected:
  explicit QueryAllContractStateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModelsFieldNumber = 1,
    kPaginationFieldNumber = 2,
  };
  // repeated .cosmwasm.wasm.v1.Model models = 1 [json_name = "models", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  int models_size() const;
  private:
  int _internal_models_size() const;

  public:
  void clear_models() ;
  ::cosmwasm::wasm::v1::Model* mutable_models(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmwasm::wasm::v1::Model >*
      mutable_models();
  private:
  const ::cosmwasm::wasm::v1::Model& _internal_models(int index) const;
  ::cosmwasm::wasm::v1::Model* _internal_add_models();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmwasm::wasm::v1::Model>& _internal_models() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmwasm::wasm::v1::Model>* _internal_mutable_models();
  public:
  const ::cosmwasm::wasm::v1::Model& models(int index) const;
  ::cosmwasm::wasm::v1::Model* add_models();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmwasm::wasm::v1::Model >&
      models() const;
  // .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
  bool has_pagination() const;
  void clear_pagination() ;
  const ::cosmos::base::query::v1beta1::PageResponse& pagination() const;
  PROTOBUF_NODISCARD ::cosmos::base::query::v1beta1::PageResponse* release_pagination();
  ::cosmos::base::query::v1beta1::PageResponse* mutable_pagination();
  void set_allocated_pagination(::cosmos::base::query::v1beta1::PageResponse* pagination);
  private:
  const ::cosmos::base::query::v1beta1::PageResponse& _internal_pagination() const;
  ::cosmos::base::query::v1beta1::PageResponse* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::cosmos::base::query::v1beta1::PageResponse* pagination);
  ::cosmos::base::query::v1beta1::PageResponse* unsafe_arena_release_pagination();
  // @@protoc_insertion_point(class_scope:cosmwasm.wasm.v1.QueryAllContractStateResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmwasm::wasm::v1::Model > models_;
    ::cosmos::base::query::v1beta1::PageResponse* pagination_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmwasm_2fwasm_2fv1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryRawContractStateRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmwasm.wasm.v1.QueryRawContractStateRequest) */ {
 public:
  inline QueryRawContractStateRequest() : QueryRawContractStateRequest(nullptr) {}
  ~QueryRawContractStateRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryRawContractStateRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryRawContractStateRequest(const QueryRawContractStateRequest& from);
  QueryRawContractStateRequest(QueryRawContractStateRequest&& from) noexcept
    : QueryRawContractStateRequest() {
    *this = ::std::move(from);
  }

  inline QueryRawContractStateRequest& operator=(const QueryRawContractStateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryRawContractStateRequest& operator=(QueryRawContractStateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryRawContractStateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryRawContractStateRequest* internal_default_instance() {
    return reinterpret_cast<const QueryRawContractStateRequest*>(
               &_QueryRawContractStateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(QueryRawContractStateRequest& a, QueryRawContractStateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryRawContractStateRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryRawContractStateRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryRawContractStateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryRawContractStateRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryRawContractStateRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryRawContractStateRequest& from) {
    QueryRawContractStateRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryRawContractStateRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmwasm.wasm.v1.QueryRawContractStateRequest";
  }
  protected:
  explicit QueryRawContractStateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
    kQueryDataFieldNumber = 2,
  };
  // string address = 1 [json_name = "address"];
  void clear_address() ;
  const std::string& address() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_address(Arg_&& arg, Args_... args);
  std::string* mutable_address();
  PROTOBUF_NODISCARD std::string* release_address();
  void set_allocated_address(std::string* ptr);

  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(
      const std::string& value);
  std::string* _internal_mutable_address();

  public:
  // bytes query_data = 2 [json_name = "queryData"];
  void clear_query_data() ;
  const std::string& query_data() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_query_data(Arg_&& arg, Args_... args);
  std::string* mutable_query_data();
  PROTOBUF_NODISCARD std::string* release_query_data();
  void set_allocated_query_data(std::string* ptr);

  private:
  const std::string& _internal_query_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_query_data(
      const std::string& value);
  std::string* _internal_mutable_query_data();

  public:
  // @@protoc_insertion_point(class_scope:cosmwasm.wasm.v1.QueryRawContractStateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr query_data_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmwasm_2fwasm_2fv1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryRawContractStateResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmwasm.wasm.v1.QueryRawContractStateResponse) */ {
 public:
  inline QueryRawContractStateResponse() : QueryRawContractStateResponse(nullptr) {}
  ~QueryRawContractStateResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryRawContractStateResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryRawContractStateResponse(const QueryRawContractStateResponse& from);
  QueryRawContractStateResponse(QueryRawContractStateResponse&& from) noexcept
    : QueryRawContractStateResponse() {
    *this = ::std::move(from);
  }

  inline QueryRawContractStateResponse& operator=(const QueryRawContractStateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryRawContractStateResponse& operator=(QueryRawContractStateResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryRawContractStateResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryRawContractStateResponse* internal_default_instance() {
    return reinterpret_cast<const QueryRawContractStateResponse*>(
               &_QueryRawContractStateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(QueryRawContractStateResponse& a, QueryRawContractStateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryRawContractStateResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryRawContractStateResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryRawContractStateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryRawContractStateResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryRawContractStateResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryRawContractStateResponse& from) {
    QueryRawContractStateResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryRawContractStateResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmwasm.wasm.v1.QueryRawContractStateResponse";
  }
  protected:
  explicit QueryRawContractStateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // bytes data = 1 [json_name = "data"];
  void clear_data() ;
  const std::string& data() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_data(Arg_&& arg, Args_... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* ptr);

  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(
      const std::string& value);
  std::string* _internal_mutable_data();

  public:
  // @@protoc_insertion_point(class_scope:cosmwasm.wasm.v1.QueryRawContractStateResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmwasm_2fwasm_2fv1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QuerySmartContractStateRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmwasm.wasm.v1.QuerySmartContractStateRequest) */ {
 public:
  inline QuerySmartContractStateRequest() : QuerySmartContractStateRequest(nullptr) {}
  ~QuerySmartContractStateRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QuerySmartContractStateRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QuerySmartContractStateRequest(const QuerySmartContractStateRequest& from);
  QuerySmartContractStateRequest(QuerySmartContractStateRequest&& from) noexcept
    : QuerySmartContractStateRequest() {
    *this = ::std::move(from);
  }

  inline QuerySmartContractStateRequest& operator=(const QuerySmartContractStateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QuerySmartContractStateRequest& operator=(QuerySmartContractStateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QuerySmartContractStateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QuerySmartContractStateRequest* internal_default_instance() {
    return reinterpret_cast<const QuerySmartContractStateRequest*>(
               &_QuerySmartContractStateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(QuerySmartContractStateRequest& a, QuerySmartContractStateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QuerySmartContractStateRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QuerySmartContractStateRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QuerySmartContractStateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QuerySmartContractStateRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QuerySmartContractStateRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QuerySmartContractStateRequest& from) {
    QuerySmartContractStateRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QuerySmartContractStateRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmwasm.wasm.v1.QuerySmartContractStateRequest";
  }
  protected:
  explicit QuerySmartContractStateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
    kQueryDataFieldNumber = 2,
  };
  // string address = 1 [json_name = "address"];
  void clear_address() ;
  const std::string& address() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_address(Arg_&& arg, Args_... args);
  std::string* mutable_address();
  PROTOBUF_NODISCARD std::string* release_address();
  void set_allocated_address(std::string* ptr);

  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(
      const std::string& value);
  std::string* _internal_mutable_address();

  public:
  // bytes query_data = 2 [json_name = "queryData", (.gogoproto.casttype) = "RawContractMessage"];
  void clear_query_data() ;
  const std::string& query_data() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_query_data(Arg_&& arg, Args_... args);
  std::string* mutable_query_data();
  PROTOBUF_NODISCARD std::string* release_query_data();
  void set_allocated_query_data(std::string* ptr);

  private:
  const std::string& _internal_query_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_query_data(
      const std::string& value);
  std::string* _internal_mutable_query_data();

  public:
  // @@protoc_insertion_point(class_scope:cosmwasm.wasm.v1.QuerySmartContractStateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr query_data_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmwasm_2fwasm_2fv1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QuerySmartContractStateResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmwasm.wasm.v1.QuerySmartContractStateResponse) */ {
 public:
  inline QuerySmartContractStateResponse() : QuerySmartContractStateResponse(nullptr) {}
  ~QuerySmartContractStateResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QuerySmartContractStateResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QuerySmartContractStateResponse(const QuerySmartContractStateResponse& from);
  QuerySmartContractStateResponse(QuerySmartContractStateResponse&& from) noexcept
    : QuerySmartContractStateResponse() {
    *this = ::std::move(from);
  }

  inline QuerySmartContractStateResponse& operator=(const QuerySmartContractStateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QuerySmartContractStateResponse& operator=(QuerySmartContractStateResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QuerySmartContractStateResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QuerySmartContractStateResponse* internal_default_instance() {
    return reinterpret_cast<const QuerySmartContractStateResponse*>(
               &_QuerySmartContractStateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(QuerySmartContractStateResponse& a, QuerySmartContractStateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QuerySmartContractStateResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QuerySmartContractStateResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QuerySmartContractStateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QuerySmartContractStateResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QuerySmartContractStateResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QuerySmartContractStateResponse& from) {
    QuerySmartContractStateResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QuerySmartContractStateResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmwasm.wasm.v1.QuerySmartContractStateResponse";
  }
  protected:
  explicit QuerySmartContractStateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // bytes data = 1 [json_name = "data", (.gogoproto.casttype) = "RawContractMessage"];
  void clear_data() ;
  const std::string& data() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_data(Arg_&& arg, Args_... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* ptr);

  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(
      const std::string& value);
  std::string* _internal_mutable_data();

  public:
  // @@protoc_insertion_point(class_scope:cosmwasm.wasm.v1.QuerySmartContractStateResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmwasm_2fwasm_2fv1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryCodeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmwasm.wasm.v1.QueryCodeRequest) */ {
 public:
  inline QueryCodeRequest() : QueryCodeRequest(nullptr) {}
  ~QueryCodeRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryCodeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryCodeRequest(const QueryCodeRequest& from);
  QueryCodeRequest(QueryCodeRequest&& from) noexcept
    : QueryCodeRequest() {
    *this = ::std::move(from);
  }

  inline QueryCodeRequest& operator=(const QueryCodeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryCodeRequest& operator=(QueryCodeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryCodeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryCodeRequest* internal_default_instance() {
    return reinterpret_cast<const QueryCodeRequest*>(
               &_QueryCodeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(QueryCodeRequest& a, QueryCodeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryCodeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryCodeRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryCodeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryCodeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryCodeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryCodeRequest& from) {
    QueryCodeRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryCodeRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmwasm.wasm.v1.QueryCodeRequest";
  }
  protected:
  explicit QueryCodeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCodeIdFieldNumber = 1,
  };
  // uint64 code_id = 1 [json_name = "codeId"];
  void clear_code_id() ;
  ::uint64_t code_id() const;
  void set_code_id(::uint64_t value);

  private:
  ::uint64_t _internal_code_id() const;
  void _internal_set_code_id(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:cosmwasm.wasm.v1.QueryCodeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::uint64_t code_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmwasm_2fwasm_2fv1_2fquery_2eproto;
};// -------------------------------------------------------------------

class CodeInfoResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmwasm.wasm.v1.CodeInfoResponse) */ {
 public:
  inline CodeInfoResponse() : CodeInfoResponse(nullptr) {}
  ~CodeInfoResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CodeInfoResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CodeInfoResponse(const CodeInfoResponse& from);
  CodeInfoResponse(CodeInfoResponse&& from) noexcept
    : CodeInfoResponse() {
    *this = ::std::move(from);
  }

  inline CodeInfoResponse& operator=(const CodeInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CodeInfoResponse& operator=(CodeInfoResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CodeInfoResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CodeInfoResponse* internal_default_instance() {
    return reinterpret_cast<const CodeInfoResponse*>(
               &_CodeInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(CodeInfoResponse& a, CodeInfoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CodeInfoResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CodeInfoResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CodeInfoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CodeInfoResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CodeInfoResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CodeInfoResponse& from) {
    CodeInfoResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CodeInfoResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmwasm.wasm.v1.CodeInfoResponse";
  }
  protected:
  explicit CodeInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCreatorFieldNumber = 2,
    kDataHashFieldNumber = 3,
    kInstantiatePermissionFieldNumber = 6,
    kCodeIdFieldNumber = 1,
  };
  // string creator = 2 [json_name = "creator"];
  void clear_creator() ;
  const std::string& creator() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_creator(Arg_&& arg, Args_... args);
  std::string* mutable_creator();
  PROTOBUF_NODISCARD std::string* release_creator();
  void set_allocated_creator(std::string* ptr);

  private:
  const std::string& _internal_creator() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_creator(
      const std::string& value);
  std::string* _internal_mutable_creator();

  public:
  // bytes data_hash = 3 [json_name = "dataHash", (.gogoproto.casttype) = "github.com/cometbft/cometbft/libs/bytes.HexBytes"];
  void clear_data_hash() ;
  const std::string& data_hash() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_data_hash(Arg_&& arg, Args_... args);
  std::string* mutable_data_hash();
  PROTOBUF_NODISCARD std::string* release_data_hash();
  void set_allocated_data_hash(std::string* ptr);

  private:
  const std::string& _internal_data_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data_hash(
      const std::string& value);
  std::string* _internal_mutable_data_hash();

  public:
  // .cosmwasm.wasm.v1.AccessConfig instantiate_permission = 6 [json_name = "instantiatePermission", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  bool has_instantiate_permission() const;
  void clear_instantiate_permission() ;
  const ::cosmwasm::wasm::v1::AccessConfig& instantiate_permission() const;
  PROTOBUF_NODISCARD ::cosmwasm::wasm::v1::AccessConfig* release_instantiate_permission();
  ::cosmwasm::wasm::v1::AccessConfig* mutable_instantiate_permission();
  void set_allocated_instantiate_permission(::cosmwasm::wasm::v1::AccessConfig* instantiate_permission);
  private:
  const ::cosmwasm::wasm::v1::AccessConfig& _internal_instantiate_permission() const;
  ::cosmwasm::wasm::v1::AccessConfig* _internal_mutable_instantiate_permission();
  public:
  void unsafe_arena_set_allocated_instantiate_permission(
      ::cosmwasm::wasm::v1::AccessConfig* instantiate_permission);
  ::cosmwasm::wasm::v1::AccessConfig* unsafe_arena_release_instantiate_permission();
  // uint64 code_id = 1 [json_name = "codeId", (.gogoproto.customname) = "CodeID", (.gogoproto.jsontag) = "id"];
  void clear_code_id() ;
  ::uint64_t code_id() const;
  void set_code_id(::uint64_t value);

  private:
  ::uint64_t _internal_code_id() const;
  void _internal_set_code_id(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:cosmwasm.wasm.v1.CodeInfoResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr creator_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_hash_;
    ::cosmwasm::wasm::v1::AccessConfig* instantiate_permission_;
    ::uint64_t code_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmwasm_2fwasm_2fv1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryCodeResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmwasm.wasm.v1.QueryCodeResponse) */ {
 public:
  inline QueryCodeResponse() : QueryCodeResponse(nullptr) {}
  ~QueryCodeResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryCodeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryCodeResponse(const QueryCodeResponse& from);
  QueryCodeResponse(QueryCodeResponse&& from) noexcept
    : QueryCodeResponse() {
    *this = ::std::move(from);
  }

  inline QueryCodeResponse& operator=(const QueryCodeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryCodeResponse& operator=(QueryCodeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryCodeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryCodeResponse* internal_default_instance() {
    return reinterpret_cast<const QueryCodeResponse*>(
               &_QueryCodeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(QueryCodeResponse& a, QueryCodeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryCodeResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryCodeResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryCodeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryCodeResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryCodeResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryCodeResponse& from) {
    QueryCodeResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryCodeResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmwasm.wasm.v1.QueryCodeResponse";
  }
  protected:
  explicit QueryCodeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kCodeInfoFieldNumber = 1,
  };
  // bytes data = 2 [json_name = "data", (.gogoproto.jsontag) = "data"];
  void clear_data() ;
  const std::string& data() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_data(Arg_&& arg, Args_... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* ptr);

  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(
      const std::string& value);
  std::string* _internal_mutable_data();

  public:
  // .cosmwasm.wasm.v1.CodeInfoResponse code_info = 1 [json_name = "codeInfo", (.gogoproto.embed) = true, (.gogoproto.jsontag) = ""];
  bool has_code_info() const;
  void clear_code_info() ;
  const ::cosmwasm::wasm::v1::CodeInfoResponse& code_info() const;
  PROTOBUF_NODISCARD ::cosmwasm::wasm::v1::CodeInfoResponse* release_code_info();
  ::cosmwasm::wasm::v1::CodeInfoResponse* mutable_code_info();
  void set_allocated_code_info(::cosmwasm::wasm::v1::CodeInfoResponse* code_info);
  private:
  const ::cosmwasm::wasm::v1::CodeInfoResponse& _internal_code_info() const;
  ::cosmwasm::wasm::v1::CodeInfoResponse* _internal_mutable_code_info();
  public:
  void unsafe_arena_set_allocated_code_info(
      ::cosmwasm::wasm::v1::CodeInfoResponse* code_info);
  ::cosmwasm::wasm::v1::CodeInfoResponse* unsafe_arena_release_code_info();
  // @@protoc_insertion_point(class_scope:cosmwasm.wasm.v1.QueryCodeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
    ::cosmwasm::wasm::v1::CodeInfoResponse* code_info_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmwasm_2fwasm_2fv1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryCodesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmwasm.wasm.v1.QueryCodesRequest) */ {
 public:
  inline QueryCodesRequest() : QueryCodesRequest(nullptr) {}
  ~QueryCodesRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryCodesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryCodesRequest(const QueryCodesRequest& from);
  QueryCodesRequest(QueryCodesRequest&& from) noexcept
    : QueryCodesRequest() {
    *this = ::std::move(from);
  }

  inline QueryCodesRequest& operator=(const QueryCodesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryCodesRequest& operator=(QueryCodesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryCodesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryCodesRequest* internal_default_instance() {
    return reinterpret_cast<const QueryCodesRequest*>(
               &_QueryCodesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(QueryCodesRequest& a, QueryCodesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryCodesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryCodesRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryCodesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryCodesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryCodesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryCodesRequest& from) {
    QueryCodesRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryCodesRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmwasm.wasm.v1.QueryCodesRequest";
  }
  protected:
  explicit QueryCodesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPaginationFieldNumber = 1,
  };
  // .cosmos.base.query.v1beta1.PageRequest pagination = 1 [json_name = "pagination"];
  bool has_pagination() const;
  void clear_pagination() ;
  const ::cosmos::base::query::v1beta1::PageRequest& pagination() const;
  PROTOBUF_NODISCARD ::cosmos::base::query::v1beta1::PageRequest* release_pagination();
  ::cosmos::base::query::v1beta1::PageRequest* mutable_pagination();
  void set_allocated_pagination(::cosmos::base::query::v1beta1::PageRequest* pagination);
  private:
  const ::cosmos::base::query::v1beta1::PageRequest& _internal_pagination() const;
  ::cosmos::base::query::v1beta1::PageRequest* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::cosmos::base::query::v1beta1::PageRequest* pagination);
  ::cosmos::base::query::v1beta1::PageRequest* unsafe_arena_release_pagination();
  // @@protoc_insertion_point(class_scope:cosmwasm.wasm.v1.QueryCodesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::cosmos::base::query::v1beta1::PageRequest* pagination_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmwasm_2fwasm_2fv1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryCodesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmwasm.wasm.v1.QueryCodesResponse) */ {
 public:
  inline QueryCodesResponse() : QueryCodesResponse(nullptr) {}
  ~QueryCodesResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryCodesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryCodesResponse(const QueryCodesResponse& from);
  QueryCodesResponse(QueryCodesResponse&& from) noexcept
    : QueryCodesResponse() {
    *this = ::std::move(from);
  }

  inline QueryCodesResponse& operator=(const QueryCodesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryCodesResponse& operator=(QueryCodesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryCodesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryCodesResponse* internal_default_instance() {
    return reinterpret_cast<const QueryCodesResponse*>(
               &_QueryCodesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(QueryCodesResponse& a, QueryCodesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryCodesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryCodesResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryCodesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryCodesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryCodesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryCodesResponse& from) {
    QueryCodesResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryCodesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmwasm.wasm.v1.QueryCodesResponse";
  }
  protected:
  explicit QueryCodesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCodeInfosFieldNumber = 1,
    kPaginationFieldNumber = 2,
  };
  // repeated .cosmwasm.wasm.v1.CodeInfoResponse code_infos = 1 [json_name = "codeInfos", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  int code_infos_size() const;
  private:
  int _internal_code_infos_size() const;

  public:
  void clear_code_infos() ;
  ::cosmwasm::wasm::v1::CodeInfoResponse* mutable_code_infos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmwasm::wasm::v1::CodeInfoResponse >*
      mutable_code_infos();
  private:
  const ::cosmwasm::wasm::v1::CodeInfoResponse& _internal_code_infos(int index) const;
  ::cosmwasm::wasm::v1::CodeInfoResponse* _internal_add_code_infos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmwasm::wasm::v1::CodeInfoResponse>& _internal_code_infos() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmwasm::wasm::v1::CodeInfoResponse>* _internal_mutable_code_infos();
  public:
  const ::cosmwasm::wasm::v1::CodeInfoResponse& code_infos(int index) const;
  ::cosmwasm::wasm::v1::CodeInfoResponse* add_code_infos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmwasm::wasm::v1::CodeInfoResponse >&
      code_infos() const;
  // .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
  bool has_pagination() const;
  void clear_pagination() ;
  const ::cosmos::base::query::v1beta1::PageResponse& pagination() const;
  PROTOBUF_NODISCARD ::cosmos::base::query::v1beta1::PageResponse* release_pagination();
  ::cosmos::base::query::v1beta1::PageResponse* mutable_pagination();
  void set_allocated_pagination(::cosmos::base::query::v1beta1::PageResponse* pagination);
  private:
  const ::cosmos::base::query::v1beta1::PageResponse& _internal_pagination() const;
  ::cosmos::base::query::v1beta1::PageResponse* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::cosmos::base::query::v1beta1::PageResponse* pagination);
  ::cosmos::base::query::v1beta1::PageResponse* unsafe_arena_release_pagination();
  // @@protoc_insertion_point(class_scope:cosmwasm.wasm.v1.QueryCodesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmwasm::wasm::v1::CodeInfoResponse > code_infos_;
    ::cosmos::base::query::v1beta1::PageResponse* pagination_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmwasm_2fwasm_2fv1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryPinnedCodesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmwasm.wasm.v1.QueryPinnedCodesRequest) */ {
 public:
  inline QueryPinnedCodesRequest() : QueryPinnedCodesRequest(nullptr) {}
  ~QueryPinnedCodesRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryPinnedCodesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryPinnedCodesRequest(const QueryPinnedCodesRequest& from);
  QueryPinnedCodesRequest(QueryPinnedCodesRequest&& from) noexcept
    : QueryPinnedCodesRequest() {
    *this = ::std::move(from);
  }

  inline QueryPinnedCodesRequest& operator=(const QueryPinnedCodesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryPinnedCodesRequest& operator=(QueryPinnedCodesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryPinnedCodesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryPinnedCodesRequest* internal_default_instance() {
    return reinterpret_cast<const QueryPinnedCodesRequest*>(
               &_QueryPinnedCodesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(QueryPinnedCodesRequest& a, QueryPinnedCodesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryPinnedCodesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryPinnedCodesRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryPinnedCodesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryPinnedCodesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryPinnedCodesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryPinnedCodesRequest& from) {
    QueryPinnedCodesRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryPinnedCodesRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmwasm.wasm.v1.QueryPinnedCodesRequest";
  }
  protected:
  explicit QueryPinnedCodesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPaginationFieldNumber = 2,
  };
  // .cosmos.base.query.v1beta1.PageRequest pagination = 2 [json_name = "pagination"];
  bool has_pagination() const;
  void clear_pagination() ;
  const ::cosmos::base::query::v1beta1::PageRequest& pagination() const;
  PROTOBUF_NODISCARD ::cosmos::base::query::v1beta1::PageRequest* release_pagination();
  ::cosmos::base::query::v1beta1::PageRequest* mutable_pagination();
  void set_allocated_pagination(::cosmos::base::query::v1beta1::PageRequest* pagination);
  private:
  const ::cosmos::base::query::v1beta1::PageRequest& _internal_pagination() const;
  ::cosmos::base::query::v1beta1::PageRequest* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::cosmos::base::query::v1beta1::PageRequest* pagination);
  ::cosmos::base::query::v1beta1::PageRequest* unsafe_arena_release_pagination();
  // @@protoc_insertion_point(class_scope:cosmwasm.wasm.v1.QueryPinnedCodesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::cosmos::base::query::v1beta1::PageRequest* pagination_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmwasm_2fwasm_2fv1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryPinnedCodesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmwasm.wasm.v1.QueryPinnedCodesResponse) */ {
 public:
  inline QueryPinnedCodesResponse() : QueryPinnedCodesResponse(nullptr) {}
  ~QueryPinnedCodesResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryPinnedCodesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryPinnedCodesResponse(const QueryPinnedCodesResponse& from);
  QueryPinnedCodesResponse(QueryPinnedCodesResponse&& from) noexcept
    : QueryPinnedCodesResponse() {
    *this = ::std::move(from);
  }

  inline QueryPinnedCodesResponse& operator=(const QueryPinnedCodesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryPinnedCodesResponse& operator=(QueryPinnedCodesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryPinnedCodesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryPinnedCodesResponse* internal_default_instance() {
    return reinterpret_cast<const QueryPinnedCodesResponse*>(
               &_QueryPinnedCodesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(QueryPinnedCodesResponse& a, QueryPinnedCodesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryPinnedCodesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryPinnedCodesResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryPinnedCodesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryPinnedCodesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryPinnedCodesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryPinnedCodesResponse& from) {
    QueryPinnedCodesResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryPinnedCodesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmwasm.wasm.v1.QueryPinnedCodesResponse";
  }
  protected:
  explicit QueryPinnedCodesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCodeIdsFieldNumber = 1,
    kPaginationFieldNumber = 2,
  };
  // repeated uint64 code_ids = 1 [json_name = "codeIds", (.gogoproto.customname) = "CodeIDs"];
  int code_ids_size() const;
  private:
  int _internal_code_ids_size() const;

  public:
  void clear_code_ids() ;
  ::uint64_t code_ids(int index) const;
  void set_code_ids(int index, ::uint64_t value);
  void add_code_ids(::uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>& code_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>* mutable_code_ids();

  private:
  ::uint64_t _internal_code_ids(int index) const;
  void _internal_add_code_ids(::uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>& _internal_code_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>* _internal_mutable_code_ids();

  public:
  // .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
  bool has_pagination() const;
  void clear_pagination() ;
  const ::cosmos::base::query::v1beta1::PageResponse& pagination() const;
  PROTOBUF_NODISCARD ::cosmos::base::query::v1beta1::PageResponse* release_pagination();
  ::cosmos::base::query::v1beta1::PageResponse* mutable_pagination();
  void set_allocated_pagination(::cosmos::base::query::v1beta1::PageResponse* pagination);
  private:
  const ::cosmos::base::query::v1beta1::PageResponse& _internal_pagination() const;
  ::cosmos::base::query::v1beta1::PageResponse* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::cosmos::base::query::v1beta1::PageResponse* pagination);
  ::cosmos::base::query::v1beta1::PageResponse* unsafe_arena_release_pagination();
  // @@protoc_insertion_point(class_scope:cosmwasm.wasm.v1.QueryPinnedCodesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t> code_ids_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _code_ids_cached_byte_size_;
    ::cosmos::base::query::v1beta1::PageResponse* pagination_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmwasm_2fwasm_2fv1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryParamsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:cosmwasm.wasm.v1.QueryParamsRequest) */ {
 public:
  inline QueryParamsRequest() : QueryParamsRequest(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryParamsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryParamsRequest(const QueryParamsRequest& from);
  QueryParamsRequest(QueryParamsRequest&& from) noexcept
    : QueryParamsRequest() {
    *this = ::std::move(from);
  }

  inline QueryParamsRequest& operator=(const QueryParamsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryParamsRequest& operator=(QueryParamsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryParamsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryParamsRequest* internal_default_instance() {
    return reinterpret_cast<const QueryParamsRequest*>(
               &_QueryParamsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(QueryParamsRequest& a, QueryParamsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryParamsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryParamsRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryParamsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryParamsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const QueryParamsRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const QueryParamsRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmwasm.wasm.v1.QueryParamsRequest";
  }
  protected:
  explicit QueryParamsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:cosmwasm.wasm.v1.QueryParamsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_cosmwasm_2fwasm_2fv1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryParamsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmwasm.wasm.v1.QueryParamsResponse) */ {
 public:
  inline QueryParamsResponse() : QueryParamsResponse(nullptr) {}
  ~QueryParamsResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryParamsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryParamsResponse(const QueryParamsResponse& from);
  QueryParamsResponse(QueryParamsResponse&& from) noexcept
    : QueryParamsResponse() {
    *this = ::std::move(from);
  }

  inline QueryParamsResponse& operator=(const QueryParamsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryParamsResponse& operator=(QueryParamsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryParamsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryParamsResponse* internal_default_instance() {
    return reinterpret_cast<const QueryParamsResponse*>(
               &_QueryParamsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(QueryParamsResponse& a, QueryParamsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryParamsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryParamsResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryParamsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryParamsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryParamsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryParamsResponse& from) {
    QueryParamsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryParamsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmwasm.wasm.v1.QueryParamsResponse";
  }
  protected:
  explicit QueryParamsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParamsFieldNumber = 1,
  };
  // .cosmwasm.wasm.v1.Params params = 1 [json_name = "params", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  bool has_params() const;
  void clear_params() ;
  const ::cosmwasm::wasm::v1::Params& params() const;
  PROTOBUF_NODISCARD ::cosmwasm::wasm::v1::Params* release_params();
  ::cosmwasm::wasm::v1::Params* mutable_params();
  void set_allocated_params(::cosmwasm::wasm::v1::Params* params);
  private:
  const ::cosmwasm::wasm::v1::Params& _internal_params() const;
  ::cosmwasm::wasm::v1::Params* _internal_mutable_params();
  public:
  void unsafe_arena_set_allocated_params(
      ::cosmwasm::wasm::v1::Params* params);
  ::cosmwasm::wasm::v1::Params* unsafe_arena_release_params();
  // @@protoc_insertion_point(class_scope:cosmwasm.wasm.v1.QueryParamsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::cosmwasm::wasm::v1::Params* params_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmwasm_2fwasm_2fv1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryContractsByCreatorRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmwasm.wasm.v1.QueryContractsByCreatorRequest) */ {
 public:
  inline QueryContractsByCreatorRequest() : QueryContractsByCreatorRequest(nullptr) {}
  ~QueryContractsByCreatorRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryContractsByCreatorRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryContractsByCreatorRequest(const QueryContractsByCreatorRequest& from);
  QueryContractsByCreatorRequest(QueryContractsByCreatorRequest&& from) noexcept
    : QueryContractsByCreatorRequest() {
    *this = ::std::move(from);
  }

  inline QueryContractsByCreatorRequest& operator=(const QueryContractsByCreatorRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryContractsByCreatorRequest& operator=(QueryContractsByCreatorRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryContractsByCreatorRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryContractsByCreatorRequest* internal_default_instance() {
    return reinterpret_cast<const QueryContractsByCreatorRequest*>(
               &_QueryContractsByCreatorRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(QueryContractsByCreatorRequest& a, QueryContractsByCreatorRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryContractsByCreatorRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryContractsByCreatorRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryContractsByCreatorRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryContractsByCreatorRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryContractsByCreatorRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryContractsByCreatorRequest& from) {
    QueryContractsByCreatorRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryContractsByCreatorRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmwasm.wasm.v1.QueryContractsByCreatorRequest";
  }
  protected:
  explicit QueryContractsByCreatorRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCreatorAddressFieldNumber = 1,
    kPaginationFieldNumber = 2,
  };
  // string creator_address = 1 [json_name = "creatorAddress"];
  void clear_creator_address() ;
  const std::string& creator_address() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_creator_address(Arg_&& arg, Args_... args);
  std::string* mutable_creator_address();
  PROTOBUF_NODISCARD std::string* release_creator_address();
  void set_allocated_creator_address(std::string* ptr);

  private:
  const std::string& _internal_creator_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_creator_address(
      const std::string& value);
  std::string* _internal_mutable_creator_address();

  public:
  // .cosmos.base.query.v1beta1.PageRequest pagination = 2 [json_name = "pagination"];
  bool has_pagination() const;
  void clear_pagination() ;
  const ::cosmos::base::query::v1beta1::PageRequest& pagination() const;
  PROTOBUF_NODISCARD ::cosmos::base::query::v1beta1::PageRequest* release_pagination();
  ::cosmos::base::query::v1beta1::PageRequest* mutable_pagination();
  void set_allocated_pagination(::cosmos::base::query::v1beta1::PageRequest* pagination);
  private:
  const ::cosmos::base::query::v1beta1::PageRequest& _internal_pagination() const;
  ::cosmos::base::query::v1beta1::PageRequest* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::cosmos::base::query::v1beta1::PageRequest* pagination);
  ::cosmos::base::query::v1beta1::PageRequest* unsafe_arena_release_pagination();
  // @@protoc_insertion_point(class_scope:cosmwasm.wasm.v1.QueryContractsByCreatorRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr creator_address_;
    ::cosmos::base::query::v1beta1::PageRequest* pagination_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmwasm_2fwasm_2fv1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryContractsByCreatorResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmwasm.wasm.v1.QueryContractsByCreatorResponse) */ {
 public:
  inline QueryContractsByCreatorResponse() : QueryContractsByCreatorResponse(nullptr) {}
  ~QueryContractsByCreatorResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryContractsByCreatorResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryContractsByCreatorResponse(const QueryContractsByCreatorResponse& from);
  QueryContractsByCreatorResponse(QueryContractsByCreatorResponse&& from) noexcept
    : QueryContractsByCreatorResponse() {
    *this = ::std::move(from);
  }

  inline QueryContractsByCreatorResponse& operator=(const QueryContractsByCreatorResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryContractsByCreatorResponse& operator=(QueryContractsByCreatorResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryContractsByCreatorResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryContractsByCreatorResponse* internal_default_instance() {
    return reinterpret_cast<const QueryContractsByCreatorResponse*>(
               &_QueryContractsByCreatorResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(QueryContractsByCreatorResponse& a, QueryContractsByCreatorResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryContractsByCreatorResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryContractsByCreatorResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryContractsByCreatorResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryContractsByCreatorResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryContractsByCreatorResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryContractsByCreatorResponse& from) {
    QueryContractsByCreatorResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryContractsByCreatorResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmwasm.wasm.v1.QueryContractsByCreatorResponse";
  }
  protected:
  explicit QueryContractsByCreatorResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContractAddressesFieldNumber = 1,
    kPaginationFieldNumber = 2,
  };
  // repeated string contract_addresses = 1 [json_name = "contractAddresses"];
  int contract_addresses_size() const;
  private:
  int _internal_contract_addresses_size() const;

  public:
  void clear_contract_addresses() ;
  const std::string& contract_addresses(int index) const;
  std::string* mutable_contract_addresses(int index);
  void set_contract_addresses(int index, const std::string& value);
  void set_contract_addresses(int index, std::string&& value);
  void set_contract_addresses(int index, const char* value);
  void set_contract_addresses(int index, const char* value, std::size_t size);
  void set_contract_addresses(int index, absl::string_view value);
  std::string* add_contract_addresses();
  void add_contract_addresses(const std::string& value);
  void add_contract_addresses(std::string&& value);
  void add_contract_addresses(const char* value);
  void add_contract_addresses(const char* value, std::size_t size);
  void add_contract_addresses(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& contract_addresses() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_contract_addresses();

  private:
  const std::string& _internal_contract_addresses(int index) const;
  std::string* _internal_add_contract_addresses();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_contract_addresses() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_contract_addresses();

  public:
  // .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
  bool has_pagination() const;
  void clear_pagination() ;
  const ::cosmos::base::query::v1beta1::PageResponse& pagination() const;
  PROTOBUF_NODISCARD ::cosmos::base::query::v1beta1::PageResponse* release_pagination();
  ::cosmos::base::query::v1beta1::PageResponse* mutable_pagination();
  void set_allocated_pagination(::cosmos::base::query::v1beta1::PageResponse* pagination);
  private:
  const ::cosmos::base::query::v1beta1::PageResponse& _internal_pagination() const;
  ::cosmos::base::query::v1beta1::PageResponse* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::cosmos::base::query::v1beta1::PageResponse* pagination);
  ::cosmos::base::query::v1beta1::PageResponse* unsafe_arena_release_pagination();
  // @@protoc_insertion_point(class_scope:cosmwasm.wasm.v1.QueryContractsByCreatorResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> contract_addresses_;
    ::cosmos::base::query::v1beta1::PageResponse* pagination_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmwasm_2fwasm_2fv1_2fquery_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// QueryContractInfoRequest

// string address = 1 [json_name = "address"];
inline void QueryContractInfoRequest::clear_address() {
  _impl_.address_.ClearToEmpty();
}
inline const std::string& QueryContractInfoRequest::address() const {
  // @@protoc_insertion_point(field_get:cosmwasm.wasm.v1.QueryContractInfoRequest.address)
  return _internal_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryContractInfoRequest::set_address(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.address_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmwasm.wasm.v1.QueryContractInfoRequest.address)
}
inline std::string* QueryContractInfoRequest::mutable_address() {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:cosmwasm.wasm.v1.QueryContractInfoRequest.address)
  return _s;
}
inline const std::string& QueryContractInfoRequest::_internal_address() const {
  return _impl_.address_.Get();
}
inline void QueryContractInfoRequest::_internal_set_address(const std::string& value) {
  ;


  _impl_.address_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryContractInfoRequest::_internal_mutable_address() {
  ;
  return _impl_.address_.Mutable( GetArenaForAllocation());
}
inline std::string* QueryContractInfoRequest::release_address() {
  // @@protoc_insertion_point(field_release:cosmwasm.wasm.v1.QueryContractInfoRequest.address)
  return _impl_.address_.Release();
}
inline void QueryContractInfoRequest::set_allocated_address(std::string* value) {
  _impl_.address_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.address_.IsDefault()) {
          _impl_.address_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmwasm.wasm.v1.QueryContractInfoRequest.address)
}

// -------------------------------------------------------------------

// QueryContractInfoResponse

// string address = 1 [json_name = "address"];
inline void QueryContractInfoResponse::clear_address() {
  _impl_.address_.ClearToEmpty();
}
inline const std::string& QueryContractInfoResponse::address() const {
  // @@protoc_insertion_point(field_get:cosmwasm.wasm.v1.QueryContractInfoResponse.address)
  return _internal_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryContractInfoResponse::set_address(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.address_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmwasm.wasm.v1.QueryContractInfoResponse.address)
}
inline std::string* QueryContractInfoResponse::mutable_address() {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:cosmwasm.wasm.v1.QueryContractInfoResponse.address)
  return _s;
}
inline const std::string& QueryContractInfoResponse::_internal_address() const {
  return _impl_.address_.Get();
}
inline void QueryContractInfoResponse::_internal_set_address(const std::string& value) {
  ;


  _impl_.address_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryContractInfoResponse::_internal_mutable_address() {
  ;
  return _impl_.address_.Mutable( GetArenaForAllocation());
}
inline std::string* QueryContractInfoResponse::release_address() {
  // @@protoc_insertion_point(field_release:cosmwasm.wasm.v1.QueryContractInfoResponse.address)
  return _impl_.address_.Release();
}
inline void QueryContractInfoResponse::set_allocated_address(std::string* value) {
  _impl_.address_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.address_.IsDefault()) {
          _impl_.address_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmwasm.wasm.v1.QueryContractInfoResponse.address)
}

// .cosmwasm.wasm.v1.ContractInfo contract_info = 2 [json_name = "contractInfo", (.gogoproto.nullable) = false, (.gogoproto.embed) = true, (.gogoproto.jsontag) = "", (.amino.dont_omitempty) = true];
inline bool QueryContractInfoResponse::has_contract_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.contract_info_ != nullptr);
  return value;
}
inline const ::cosmwasm::wasm::v1::ContractInfo& QueryContractInfoResponse::_internal_contract_info() const {
  const ::cosmwasm::wasm::v1::ContractInfo* p = _impl_.contract_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmwasm::wasm::v1::ContractInfo&>(
      ::cosmwasm::wasm::v1::_ContractInfo_default_instance_);
}
inline const ::cosmwasm::wasm::v1::ContractInfo& QueryContractInfoResponse::contract_info() const {
  // @@protoc_insertion_point(field_get:cosmwasm.wasm.v1.QueryContractInfoResponse.contract_info)
  return _internal_contract_info();
}
inline void QueryContractInfoResponse::unsafe_arena_set_allocated_contract_info(
    ::cosmwasm::wasm::v1::ContractInfo* contract_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.contract_info_);
  }
  _impl_.contract_info_ = contract_info;
  if (contract_info) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmwasm.wasm.v1.QueryContractInfoResponse.contract_info)
}
inline ::cosmwasm::wasm::v1::ContractInfo* QueryContractInfoResponse::release_contract_info() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmwasm::wasm::v1::ContractInfo* temp = _impl_.contract_info_;
  _impl_.contract_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmwasm::wasm::v1::ContractInfo* QueryContractInfoResponse::unsafe_arena_release_contract_info() {
  // @@protoc_insertion_point(field_release:cosmwasm.wasm.v1.QueryContractInfoResponse.contract_info)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmwasm::wasm::v1::ContractInfo* temp = _impl_.contract_info_;
  _impl_.contract_info_ = nullptr;
  return temp;
}
inline ::cosmwasm::wasm::v1::ContractInfo* QueryContractInfoResponse::_internal_mutable_contract_info() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.contract_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmwasm::wasm::v1::ContractInfo>(GetArenaForAllocation());
    _impl_.contract_info_ = p;
  }
  return _impl_.contract_info_;
}
inline ::cosmwasm::wasm::v1::ContractInfo* QueryContractInfoResponse::mutable_contract_info() {
  ::cosmwasm::wasm::v1::ContractInfo* _msg = _internal_mutable_contract_info();
  // @@protoc_insertion_point(field_mutable:cosmwasm.wasm.v1.QueryContractInfoResponse.contract_info)
  return _msg;
}
inline void QueryContractInfoResponse::set_allocated_contract_info(::cosmwasm::wasm::v1::ContractInfo* contract_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.contract_info_);
  }
  if (contract_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(contract_info));
    if (message_arena != submessage_arena) {
      contract_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, contract_info, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.contract_info_ = contract_info;
  // @@protoc_insertion_point(field_set_allocated:cosmwasm.wasm.v1.QueryContractInfoResponse.contract_info)
}

// -------------------------------------------------------------------

// QueryContractHistoryRequest

// string address = 1 [json_name = "address"];
inline void QueryContractHistoryRequest::clear_address() {
  _impl_.address_.ClearToEmpty();
}
inline const std::string& QueryContractHistoryRequest::address() const {
  // @@protoc_insertion_point(field_get:cosmwasm.wasm.v1.QueryContractHistoryRequest.address)
  return _internal_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryContractHistoryRequest::set_address(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.address_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmwasm.wasm.v1.QueryContractHistoryRequest.address)
}
inline std::string* QueryContractHistoryRequest::mutable_address() {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:cosmwasm.wasm.v1.QueryContractHistoryRequest.address)
  return _s;
}
inline const std::string& QueryContractHistoryRequest::_internal_address() const {
  return _impl_.address_.Get();
}
inline void QueryContractHistoryRequest::_internal_set_address(const std::string& value) {
  ;


  _impl_.address_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryContractHistoryRequest::_internal_mutable_address() {
  ;
  return _impl_.address_.Mutable( GetArenaForAllocation());
}
inline std::string* QueryContractHistoryRequest::release_address() {
  // @@protoc_insertion_point(field_release:cosmwasm.wasm.v1.QueryContractHistoryRequest.address)
  return _impl_.address_.Release();
}
inline void QueryContractHistoryRequest::set_allocated_address(std::string* value) {
  _impl_.address_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.address_.IsDefault()) {
          _impl_.address_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmwasm.wasm.v1.QueryContractHistoryRequest.address)
}

// .cosmos.base.query.v1beta1.PageRequest pagination = 2 [json_name = "pagination"];
inline bool QueryContractHistoryRequest::has_pagination() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pagination_ != nullptr);
  return value;
}
inline const ::cosmos::base::query::v1beta1::PageRequest& QueryContractHistoryRequest::_internal_pagination() const {
  const ::cosmos::base::query::v1beta1::PageRequest* p = _impl_.pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::query::v1beta1::PageRequest&>(
      ::cosmos::base::query::v1beta1::_PageRequest_default_instance_);
}
inline const ::cosmos::base::query::v1beta1::PageRequest& QueryContractHistoryRequest::pagination() const {
  // @@protoc_insertion_point(field_get:cosmwasm.wasm.v1.QueryContractHistoryRequest.pagination)
  return _internal_pagination();
}
inline void QueryContractHistoryRequest::unsafe_arena_set_allocated_pagination(
    ::cosmos::base::query::v1beta1::PageRequest* pagination) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  _impl_.pagination_ = pagination;
  if (pagination) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmwasm.wasm.v1.QueryContractHistoryRequest.pagination)
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryContractHistoryRequest::release_pagination() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageRequest* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryContractHistoryRequest::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:cosmwasm.wasm.v1.QueryContractHistoryRequest.pagination)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageRequest* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryContractHistoryRequest::_internal_mutable_pagination() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::base::query::v1beta1::PageRequest>(GetArenaForAllocation());
    _impl_.pagination_ = p;
  }
  return _impl_.pagination_;
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryContractHistoryRequest::mutable_pagination() {
  ::cosmos::base::query::v1beta1::PageRequest* _msg = _internal_mutable_pagination();
  // @@protoc_insertion_point(field_mutable:cosmwasm.wasm.v1.QueryContractHistoryRequest.pagination)
  return _msg;
}
inline void QueryContractHistoryRequest::set_allocated_pagination(::cosmos::base::query::v1beta1::PageRequest* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination));
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:cosmwasm.wasm.v1.QueryContractHistoryRequest.pagination)
}

// -------------------------------------------------------------------

// QueryContractHistoryResponse

// repeated .cosmwasm.wasm.v1.ContractCodeHistoryEntry entries = 1 [json_name = "entries", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
inline int QueryContractHistoryResponse::_internal_entries_size() const {
  return _impl_.entries_.size();
}
inline int QueryContractHistoryResponse::entries_size() const {
  return _internal_entries_size();
}
inline ::cosmwasm::wasm::v1::ContractCodeHistoryEntry* QueryContractHistoryResponse::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:cosmwasm.wasm.v1.QueryContractHistoryResponse.entries)
  return _internal_mutable_entries()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmwasm::wasm::v1::ContractCodeHistoryEntry >*
QueryContractHistoryResponse::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:cosmwasm.wasm.v1.QueryContractHistoryResponse.entries)
  return _internal_mutable_entries();
}
inline const ::cosmwasm::wasm::v1::ContractCodeHistoryEntry& QueryContractHistoryResponse::_internal_entries(int index) const {
  return _internal_entries().Get(index);
}
inline const ::cosmwasm::wasm::v1::ContractCodeHistoryEntry& QueryContractHistoryResponse::entries(int index) const {
  // @@protoc_insertion_point(field_get:cosmwasm.wasm.v1.QueryContractHistoryResponse.entries)
  return _internal_entries(index);
}
inline ::cosmwasm::wasm::v1::ContractCodeHistoryEntry* QueryContractHistoryResponse::_internal_add_entries() {
  return _internal_mutable_entries()->Add();
}
inline ::cosmwasm::wasm::v1::ContractCodeHistoryEntry* QueryContractHistoryResponse::add_entries() {
  ::cosmwasm::wasm::v1::ContractCodeHistoryEntry* _add = _internal_add_entries();
  // @@protoc_insertion_point(field_add:cosmwasm.wasm.v1.QueryContractHistoryResponse.entries)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmwasm::wasm::v1::ContractCodeHistoryEntry >&
QueryContractHistoryResponse::entries() const {
  // @@protoc_insertion_point(field_list:cosmwasm.wasm.v1.QueryContractHistoryResponse.entries)
  return _internal_entries();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmwasm::wasm::v1::ContractCodeHistoryEntry>&
QueryContractHistoryResponse::_internal_entries() const {
  return _impl_.entries_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmwasm::wasm::v1::ContractCodeHistoryEntry>*
QueryContractHistoryResponse::_internal_mutable_entries() {
  return &_impl_.entries_;
}

// .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
inline bool QueryContractHistoryResponse::has_pagination() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pagination_ != nullptr);
  return value;
}
inline const ::cosmos::base::query::v1beta1::PageResponse& QueryContractHistoryResponse::_internal_pagination() const {
  const ::cosmos::base::query::v1beta1::PageResponse* p = _impl_.pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::query::v1beta1::PageResponse&>(
      ::cosmos::base::query::v1beta1::_PageResponse_default_instance_);
}
inline const ::cosmos::base::query::v1beta1::PageResponse& QueryContractHistoryResponse::pagination() const {
  // @@protoc_insertion_point(field_get:cosmwasm.wasm.v1.QueryContractHistoryResponse.pagination)
  return _internal_pagination();
}
inline void QueryContractHistoryResponse::unsafe_arena_set_allocated_pagination(
    ::cosmos::base::query::v1beta1::PageResponse* pagination) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  _impl_.pagination_ = pagination;
  if (pagination) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmwasm.wasm.v1.QueryContractHistoryResponse.pagination)
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryContractHistoryResponse::release_pagination() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageResponse* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryContractHistoryResponse::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:cosmwasm.wasm.v1.QueryContractHistoryResponse.pagination)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageResponse* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryContractHistoryResponse::_internal_mutable_pagination() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::base::query::v1beta1::PageResponse>(GetArenaForAllocation());
    _impl_.pagination_ = p;
  }
  return _impl_.pagination_;
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryContractHistoryResponse::mutable_pagination() {
  ::cosmos::base::query::v1beta1::PageResponse* _msg = _internal_mutable_pagination();
  // @@protoc_insertion_point(field_mutable:cosmwasm.wasm.v1.QueryContractHistoryResponse.pagination)
  return _msg;
}
inline void QueryContractHistoryResponse::set_allocated_pagination(::cosmos::base::query::v1beta1::PageResponse* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination));
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:cosmwasm.wasm.v1.QueryContractHistoryResponse.pagination)
}

// -------------------------------------------------------------------

// QueryContractsByCodeRequest

// uint64 code_id = 1 [json_name = "codeId"];
inline void QueryContractsByCodeRequest::clear_code_id() {
  _impl_.code_id_ = ::uint64_t{0u};
}
inline ::uint64_t QueryContractsByCodeRequest::code_id() const {
  // @@protoc_insertion_point(field_get:cosmwasm.wasm.v1.QueryContractsByCodeRequest.code_id)
  return _internal_code_id();
}
inline void QueryContractsByCodeRequest::set_code_id(::uint64_t value) {
  _internal_set_code_id(value);
  // @@protoc_insertion_point(field_set:cosmwasm.wasm.v1.QueryContractsByCodeRequest.code_id)
}
inline ::uint64_t QueryContractsByCodeRequest::_internal_code_id() const {
  return _impl_.code_id_;
}
inline void QueryContractsByCodeRequest::_internal_set_code_id(::uint64_t value) {
  ;
  _impl_.code_id_ = value;
}

// .cosmos.base.query.v1beta1.PageRequest pagination = 2 [json_name = "pagination"];
inline bool QueryContractsByCodeRequest::has_pagination() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pagination_ != nullptr);
  return value;
}
inline const ::cosmos::base::query::v1beta1::PageRequest& QueryContractsByCodeRequest::_internal_pagination() const {
  const ::cosmos::base::query::v1beta1::PageRequest* p = _impl_.pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::query::v1beta1::PageRequest&>(
      ::cosmos::base::query::v1beta1::_PageRequest_default_instance_);
}
inline const ::cosmos::base::query::v1beta1::PageRequest& QueryContractsByCodeRequest::pagination() const {
  // @@protoc_insertion_point(field_get:cosmwasm.wasm.v1.QueryContractsByCodeRequest.pagination)
  return _internal_pagination();
}
inline void QueryContractsByCodeRequest::unsafe_arena_set_allocated_pagination(
    ::cosmos::base::query::v1beta1::PageRequest* pagination) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  _impl_.pagination_ = pagination;
  if (pagination) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmwasm.wasm.v1.QueryContractsByCodeRequest.pagination)
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryContractsByCodeRequest::release_pagination() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageRequest* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryContractsByCodeRequest::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:cosmwasm.wasm.v1.QueryContractsByCodeRequest.pagination)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageRequest* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryContractsByCodeRequest::_internal_mutable_pagination() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::base::query::v1beta1::PageRequest>(GetArenaForAllocation());
    _impl_.pagination_ = p;
  }
  return _impl_.pagination_;
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryContractsByCodeRequest::mutable_pagination() {
  ::cosmos::base::query::v1beta1::PageRequest* _msg = _internal_mutable_pagination();
  // @@protoc_insertion_point(field_mutable:cosmwasm.wasm.v1.QueryContractsByCodeRequest.pagination)
  return _msg;
}
inline void QueryContractsByCodeRequest::set_allocated_pagination(::cosmos::base::query::v1beta1::PageRequest* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination));
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:cosmwasm.wasm.v1.QueryContractsByCodeRequest.pagination)
}

// -------------------------------------------------------------------

// QueryContractsByCodeResponse

// repeated string contracts = 1 [json_name = "contracts"];
inline int QueryContractsByCodeResponse::_internal_contracts_size() const {
  return _impl_.contracts_.size();
}
inline int QueryContractsByCodeResponse::contracts_size() const {
  return _internal_contracts_size();
}
inline void QueryContractsByCodeResponse::clear_contracts() {
  _internal_mutable_contracts()->Clear();
}
inline std::string* QueryContractsByCodeResponse::add_contracts() {
  std::string* _s = _internal_add_contracts();
  // @@protoc_insertion_point(field_add_mutable:cosmwasm.wasm.v1.QueryContractsByCodeResponse.contracts)
  return _s;
}
inline const std::string& QueryContractsByCodeResponse::contracts(int index) const {
  // @@protoc_insertion_point(field_get:cosmwasm.wasm.v1.QueryContractsByCodeResponse.contracts)
  return _internal_contracts(index);
}
inline std::string* QueryContractsByCodeResponse::mutable_contracts(int index) {
  // @@protoc_insertion_point(field_mutable:cosmwasm.wasm.v1.QueryContractsByCodeResponse.contracts)
  return _internal_mutable_contracts()->Mutable(index);
}
inline void QueryContractsByCodeResponse::set_contracts(int index, const std::string& value) {
  _internal_mutable_contracts()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:cosmwasm.wasm.v1.QueryContractsByCodeResponse.contracts)
}
inline void QueryContractsByCodeResponse::set_contracts(int index, std::string&& value) {
  _internal_mutable_contracts()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:cosmwasm.wasm.v1.QueryContractsByCodeResponse.contracts)
}
inline void QueryContractsByCodeResponse::set_contracts(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_contracts()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:cosmwasm.wasm.v1.QueryContractsByCodeResponse.contracts)
}
inline void QueryContractsByCodeResponse::set_contracts(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_contracts()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cosmwasm.wasm.v1.QueryContractsByCodeResponse.contracts)
}
inline void QueryContractsByCodeResponse::set_contracts(int index, absl::string_view value) {
  _internal_mutable_contracts()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:cosmwasm.wasm.v1.QueryContractsByCodeResponse.contracts)
}
inline void QueryContractsByCodeResponse::add_contracts(const std::string& value) {
  _internal_mutable_contracts()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:cosmwasm.wasm.v1.QueryContractsByCodeResponse.contracts)
}
inline void QueryContractsByCodeResponse::add_contracts(std::string&& value) {
  _internal_mutable_contracts()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:cosmwasm.wasm.v1.QueryContractsByCodeResponse.contracts)
}
inline void QueryContractsByCodeResponse::add_contracts(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_contracts()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:cosmwasm.wasm.v1.QueryContractsByCodeResponse.contracts)
}
inline void QueryContractsByCodeResponse::add_contracts(const char* value, std::size_t size) {
  _internal_mutable_contracts()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:cosmwasm.wasm.v1.QueryContractsByCodeResponse.contracts)
}
inline void QueryContractsByCodeResponse::add_contracts(absl::string_view value) {
  _internal_mutable_contracts()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:cosmwasm.wasm.v1.QueryContractsByCodeResponse.contracts)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
QueryContractsByCodeResponse::contracts() const {
  // @@protoc_insertion_point(field_list:cosmwasm.wasm.v1.QueryContractsByCodeResponse.contracts)
  return _internal_contracts();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* QueryContractsByCodeResponse::mutable_contracts() {
  // @@protoc_insertion_point(field_mutable_list:cosmwasm.wasm.v1.QueryContractsByCodeResponse.contracts)
  return _internal_mutable_contracts();
}
inline const std::string& QueryContractsByCodeResponse::_internal_contracts(int index) const {
  return _internal_contracts().Get(index);
}
inline std::string* QueryContractsByCodeResponse::_internal_add_contracts() {
  return _internal_mutable_contracts()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
QueryContractsByCodeResponse::_internal_contracts() const {
  return _impl_.contracts_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
QueryContractsByCodeResponse::_internal_mutable_contracts() {
  return &_impl_.contracts_;
}

// .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
inline bool QueryContractsByCodeResponse::has_pagination() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pagination_ != nullptr);
  return value;
}
inline const ::cosmos::base::query::v1beta1::PageResponse& QueryContractsByCodeResponse::_internal_pagination() const {
  const ::cosmos::base::query::v1beta1::PageResponse* p = _impl_.pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::query::v1beta1::PageResponse&>(
      ::cosmos::base::query::v1beta1::_PageResponse_default_instance_);
}
inline const ::cosmos::base::query::v1beta1::PageResponse& QueryContractsByCodeResponse::pagination() const {
  // @@protoc_insertion_point(field_get:cosmwasm.wasm.v1.QueryContractsByCodeResponse.pagination)
  return _internal_pagination();
}
inline void QueryContractsByCodeResponse::unsafe_arena_set_allocated_pagination(
    ::cosmos::base::query::v1beta1::PageResponse* pagination) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  _impl_.pagination_ = pagination;
  if (pagination) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmwasm.wasm.v1.QueryContractsByCodeResponse.pagination)
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryContractsByCodeResponse::release_pagination() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageResponse* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryContractsByCodeResponse::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:cosmwasm.wasm.v1.QueryContractsByCodeResponse.pagination)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageResponse* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryContractsByCodeResponse::_internal_mutable_pagination() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::base::query::v1beta1::PageResponse>(GetArenaForAllocation());
    _impl_.pagination_ = p;
  }
  return _impl_.pagination_;
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryContractsByCodeResponse::mutable_pagination() {
  ::cosmos::base::query::v1beta1::PageResponse* _msg = _internal_mutable_pagination();
  // @@protoc_insertion_point(field_mutable:cosmwasm.wasm.v1.QueryContractsByCodeResponse.pagination)
  return _msg;
}
inline void QueryContractsByCodeResponse::set_allocated_pagination(::cosmos::base::query::v1beta1::PageResponse* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination));
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:cosmwasm.wasm.v1.QueryContractsByCodeResponse.pagination)
}

// -------------------------------------------------------------------

// QueryAllContractStateRequest

// string address = 1 [json_name = "address"];
inline void QueryAllContractStateRequest::clear_address() {
  _impl_.address_.ClearToEmpty();
}
inline const std::string& QueryAllContractStateRequest::address() const {
  // @@protoc_insertion_point(field_get:cosmwasm.wasm.v1.QueryAllContractStateRequest.address)
  return _internal_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryAllContractStateRequest::set_address(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.address_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmwasm.wasm.v1.QueryAllContractStateRequest.address)
}
inline std::string* QueryAllContractStateRequest::mutable_address() {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:cosmwasm.wasm.v1.QueryAllContractStateRequest.address)
  return _s;
}
inline const std::string& QueryAllContractStateRequest::_internal_address() const {
  return _impl_.address_.Get();
}
inline void QueryAllContractStateRequest::_internal_set_address(const std::string& value) {
  ;


  _impl_.address_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryAllContractStateRequest::_internal_mutable_address() {
  ;
  return _impl_.address_.Mutable( GetArenaForAllocation());
}
inline std::string* QueryAllContractStateRequest::release_address() {
  // @@protoc_insertion_point(field_release:cosmwasm.wasm.v1.QueryAllContractStateRequest.address)
  return _impl_.address_.Release();
}
inline void QueryAllContractStateRequest::set_allocated_address(std::string* value) {
  _impl_.address_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.address_.IsDefault()) {
          _impl_.address_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmwasm.wasm.v1.QueryAllContractStateRequest.address)
}

// .cosmos.base.query.v1beta1.PageRequest pagination = 2 [json_name = "pagination"];
inline bool QueryAllContractStateRequest::has_pagination() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pagination_ != nullptr);
  return value;
}
inline const ::cosmos::base::query::v1beta1::PageRequest& QueryAllContractStateRequest::_internal_pagination() const {
  const ::cosmos::base::query::v1beta1::PageRequest* p = _impl_.pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::query::v1beta1::PageRequest&>(
      ::cosmos::base::query::v1beta1::_PageRequest_default_instance_);
}
inline const ::cosmos::base::query::v1beta1::PageRequest& QueryAllContractStateRequest::pagination() const {
  // @@protoc_insertion_point(field_get:cosmwasm.wasm.v1.QueryAllContractStateRequest.pagination)
  return _internal_pagination();
}
inline void QueryAllContractStateRequest::unsafe_arena_set_allocated_pagination(
    ::cosmos::base::query::v1beta1::PageRequest* pagination) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  _impl_.pagination_ = pagination;
  if (pagination) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmwasm.wasm.v1.QueryAllContractStateRequest.pagination)
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryAllContractStateRequest::release_pagination() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageRequest* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryAllContractStateRequest::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:cosmwasm.wasm.v1.QueryAllContractStateRequest.pagination)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageRequest* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryAllContractStateRequest::_internal_mutable_pagination() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::base::query::v1beta1::PageRequest>(GetArenaForAllocation());
    _impl_.pagination_ = p;
  }
  return _impl_.pagination_;
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryAllContractStateRequest::mutable_pagination() {
  ::cosmos::base::query::v1beta1::PageRequest* _msg = _internal_mutable_pagination();
  // @@protoc_insertion_point(field_mutable:cosmwasm.wasm.v1.QueryAllContractStateRequest.pagination)
  return _msg;
}
inline void QueryAllContractStateRequest::set_allocated_pagination(::cosmos::base::query::v1beta1::PageRequest* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination));
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:cosmwasm.wasm.v1.QueryAllContractStateRequest.pagination)
}

// -------------------------------------------------------------------

// QueryAllContractStateResponse

// repeated .cosmwasm.wasm.v1.Model models = 1 [json_name = "models", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
inline int QueryAllContractStateResponse::_internal_models_size() const {
  return _impl_.models_.size();
}
inline int QueryAllContractStateResponse::models_size() const {
  return _internal_models_size();
}
inline ::cosmwasm::wasm::v1::Model* QueryAllContractStateResponse::mutable_models(int index) {
  // @@protoc_insertion_point(field_mutable:cosmwasm.wasm.v1.QueryAllContractStateResponse.models)
  return _internal_mutable_models()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmwasm::wasm::v1::Model >*
QueryAllContractStateResponse::mutable_models() {
  // @@protoc_insertion_point(field_mutable_list:cosmwasm.wasm.v1.QueryAllContractStateResponse.models)
  return _internal_mutable_models();
}
inline const ::cosmwasm::wasm::v1::Model& QueryAllContractStateResponse::_internal_models(int index) const {
  return _internal_models().Get(index);
}
inline const ::cosmwasm::wasm::v1::Model& QueryAllContractStateResponse::models(int index) const {
  // @@protoc_insertion_point(field_get:cosmwasm.wasm.v1.QueryAllContractStateResponse.models)
  return _internal_models(index);
}
inline ::cosmwasm::wasm::v1::Model* QueryAllContractStateResponse::_internal_add_models() {
  return _internal_mutable_models()->Add();
}
inline ::cosmwasm::wasm::v1::Model* QueryAllContractStateResponse::add_models() {
  ::cosmwasm::wasm::v1::Model* _add = _internal_add_models();
  // @@protoc_insertion_point(field_add:cosmwasm.wasm.v1.QueryAllContractStateResponse.models)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmwasm::wasm::v1::Model >&
QueryAllContractStateResponse::models() const {
  // @@protoc_insertion_point(field_list:cosmwasm.wasm.v1.QueryAllContractStateResponse.models)
  return _internal_models();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmwasm::wasm::v1::Model>&
QueryAllContractStateResponse::_internal_models() const {
  return _impl_.models_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmwasm::wasm::v1::Model>*
QueryAllContractStateResponse::_internal_mutable_models() {
  return &_impl_.models_;
}

// .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
inline bool QueryAllContractStateResponse::has_pagination() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pagination_ != nullptr);
  return value;
}
inline const ::cosmos::base::query::v1beta1::PageResponse& QueryAllContractStateResponse::_internal_pagination() const {
  const ::cosmos::base::query::v1beta1::PageResponse* p = _impl_.pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::query::v1beta1::PageResponse&>(
      ::cosmos::base::query::v1beta1::_PageResponse_default_instance_);
}
inline const ::cosmos::base::query::v1beta1::PageResponse& QueryAllContractStateResponse::pagination() const {
  // @@protoc_insertion_point(field_get:cosmwasm.wasm.v1.QueryAllContractStateResponse.pagination)
  return _internal_pagination();
}
inline void QueryAllContractStateResponse::unsafe_arena_set_allocated_pagination(
    ::cosmos::base::query::v1beta1::PageResponse* pagination) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  _impl_.pagination_ = pagination;
  if (pagination) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmwasm.wasm.v1.QueryAllContractStateResponse.pagination)
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryAllContractStateResponse::release_pagination() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageResponse* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryAllContractStateResponse::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:cosmwasm.wasm.v1.QueryAllContractStateResponse.pagination)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageResponse* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryAllContractStateResponse::_internal_mutable_pagination() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::base::query::v1beta1::PageResponse>(GetArenaForAllocation());
    _impl_.pagination_ = p;
  }
  return _impl_.pagination_;
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryAllContractStateResponse::mutable_pagination() {
  ::cosmos::base::query::v1beta1::PageResponse* _msg = _internal_mutable_pagination();
  // @@protoc_insertion_point(field_mutable:cosmwasm.wasm.v1.QueryAllContractStateResponse.pagination)
  return _msg;
}
inline void QueryAllContractStateResponse::set_allocated_pagination(::cosmos::base::query::v1beta1::PageResponse* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination));
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:cosmwasm.wasm.v1.QueryAllContractStateResponse.pagination)
}

// -------------------------------------------------------------------

// QueryRawContractStateRequest

// string address = 1 [json_name = "address"];
inline void QueryRawContractStateRequest::clear_address() {
  _impl_.address_.ClearToEmpty();
}
inline const std::string& QueryRawContractStateRequest::address() const {
  // @@protoc_insertion_point(field_get:cosmwasm.wasm.v1.QueryRawContractStateRequest.address)
  return _internal_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryRawContractStateRequest::set_address(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.address_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmwasm.wasm.v1.QueryRawContractStateRequest.address)
}
inline std::string* QueryRawContractStateRequest::mutable_address() {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:cosmwasm.wasm.v1.QueryRawContractStateRequest.address)
  return _s;
}
inline const std::string& QueryRawContractStateRequest::_internal_address() const {
  return _impl_.address_.Get();
}
inline void QueryRawContractStateRequest::_internal_set_address(const std::string& value) {
  ;


  _impl_.address_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryRawContractStateRequest::_internal_mutable_address() {
  ;
  return _impl_.address_.Mutable( GetArenaForAllocation());
}
inline std::string* QueryRawContractStateRequest::release_address() {
  // @@protoc_insertion_point(field_release:cosmwasm.wasm.v1.QueryRawContractStateRequest.address)
  return _impl_.address_.Release();
}
inline void QueryRawContractStateRequest::set_allocated_address(std::string* value) {
  _impl_.address_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.address_.IsDefault()) {
          _impl_.address_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmwasm.wasm.v1.QueryRawContractStateRequest.address)
}

// bytes query_data = 2 [json_name = "queryData"];
inline void QueryRawContractStateRequest::clear_query_data() {
  _impl_.query_data_.ClearToEmpty();
}
inline const std::string& QueryRawContractStateRequest::query_data() const {
  // @@protoc_insertion_point(field_get:cosmwasm.wasm.v1.QueryRawContractStateRequest.query_data)
  return _internal_query_data();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryRawContractStateRequest::set_query_data(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.query_data_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmwasm.wasm.v1.QueryRawContractStateRequest.query_data)
}
inline std::string* QueryRawContractStateRequest::mutable_query_data() {
  std::string* _s = _internal_mutable_query_data();
  // @@protoc_insertion_point(field_mutable:cosmwasm.wasm.v1.QueryRawContractStateRequest.query_data)
  return _s;
}
inline const std::string& QueryRawContractStateRequest::_internal_query_data() const {
  return _impl_.query_data_.Get();
}
inline void QueryRawContractStateRequest::_internal_set_query_data(const std::string& value) {
  ;


  _impl_.query_data_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryRawContractStateRequest::_internal_mutable_query_data() {
  ;
  return _impl_.query_data_.Mutable( GetArenaForAllocation());
}
inline std::string* QueryRawContractStateRequest::release_query_data() {
  // @@protoc_insertion_point(field_release:cosmwasm.wasm.v1.QueryRawContractStateRequest.query_data)
  return _impl_.query_data_.Release();
}
inline void QueryRawContractStateRequest::set_allocated_query_data(std::string* value) {
  _impl_.query_data_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.query_data_.IsDefault()) {
          _impl_.query_data_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmwasm.wasm.v1.QueryRawContractStateRequest.query_data)
}

// -------------------------------------------------------------------

// QueryRawContractStateResponse

// bytes data = 1 [json_name = "data"];
inline void QueryRawContractStateResponse::clear_data() {
  _impl_.data_.ClearToEmpty();
}
inline const std::string& QueryRawContractStateResponse::data() const {
  // @@protoc_insertion_point(field_get:cosmwasm.wasm.v1.QueryRawContractStateResponse.data)
  return _internal_data();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryRawContractStateResponse::set_data(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.data_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmwasm.wasm.v1.QueryRawContractStateResponse.data)
}
inline std::string* QueryRawContractStateResponse::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:cosmwasm.wasm.v1.QueryRawContractStateResponse.data)
  return _s;
}
inline const std::string& QueryRawContractStateResponse::_internal_data() const {
  return _impl_.data_.Get();
}
inline void QueryRawContractStateResponse::_internal_set_data(const std::string& value) {
  ;


  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryRawContractStateResponse::_internal_mutable_data() {
  ;
  return _impl_.data_.Mutable( GetArenaForAllocation());
}
inline std::string* QueryRawContractStateResponse::release_data() {
  // @@protoc_insertion_point(field_release:cosmwasm.wasm.v1.QueryRawContractStateResponse.data)
  return _impl_.data_.Release();
}
inline void QueryRawContractStateResponse::set_allocated_data(std::string* value) {
  _impl_.data_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.data_.IsDefault()) {
          _impl_.data_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmwasm.wasm.v1.QueryRawContractStateResponse.data)
}

// -------------------------------------------------------------------

// QuerySmartContractStateRequest

// string address = 1 [json_name = "address"];
inline void QuerySmartContractStateRequest::clear_address() {
  _impl_.address_.ClearToEmpty();
}
inline const std::string& QuerySmartContractStateRequest::address() const {
  // @@protoc_insertion_point(field_get:cosmwasm.wasm.v1.QuerySmartContractStateRequest.address)
  return _internal_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QuerySmartContractStateRequest::set_address(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.address_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmwasm.wasm.v1.QuerySmartContractStateRequest.address)
}
inline std::string* QuerySmartContractStateRequest::mutable_address() {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:cosmwasm.wasm.v1.QuerySmartContractStateRequest.address)
  return _s;
}
inline const std::string& QuerySmartContractStateRequest::_internal_address() const {
  return _impl_.address_.Get();
}
inline void QuerySmartContractStateRequest::_internal_set_address(const std::string& value) {
  ;


  _impl_.address_.Set(value, GetArenaForAllocation());
}
inline std::string* QuerySmartContractStateRequest::_internal_mutable_address() {
  ;
  return _impl_.address_.Mutable( GetArenaForAllocation());
}
inline std::string* QuerySmartContractStateRequest::release_address() {
  // @@protoc_insertion_point(field_release:cosmwasm.wasm.v1.QuerySmartContractStateRequest.address)
  return _impl_.address_.Release();
}
inline void QuerySmartContractStateRequest::set_allocated_address(std::string* value) {
  _impl_.address_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.address_.IsDefault()) {
          _impl_.address_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmwasm.wasm.v1.QuerySmartContractStateRequest.address)
}

// bytes query_data = 2 [json_name = "queryData", (.gogoproto.casttype) = "RawContractMessage"];
inline void QuerySmartContractStateRequest::clear_query_data() {
  _impl_.query_data_.ClearToEmpty();
}
inline const std::string& QuerySmartContractStateRequest::query_data() const {
  // @@protoc_insertion_point(field_get:cosmwasm.wasm.v1.QuerySmartContractStateRequest.query_data)
  return _internal_query_data();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QuerySmartContractStateRequest::set_query_data(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.query_data_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmwasm.wasm.v1.QuerySmartContractStateRequest.query_data)
}
inline std::string* QuerySmartContractStateRequest::mutable_query_data() {
  std::string* _s = _internal_mutable_query_data();
  // @@protoc_insertion_point(field_mutable:cosmwasm.wasm.v1.QuerySmartContractStateRequest.query_data)
  return _s;
}
inline const std::string& QuerySmartContractStateRequest::_internal_query_data() const {
  return _impl_.query_data_.Get();
}
inline void QuerySmartContractStateRequest::_internal_set_query_data(const std::string& value) {
  ;


  _impl_.query_data_.Set(value, GetArenaForAllocation());
}
inline std::string* QuerySmartContractStateRequest::_internal_mutable_query_data() {
  ;
  return _impl_.query_data_.Mutable( GetArenaForAllocation());
}
inline std::string* QuerySmartContractStateRequest::release_query_data() {
  // @@protoc_insertion_point(field_release:cosmwasm.wasm.v1.QuerySmartContractStateRequest.query_data)
  return _impl_.query_data_.Release();
}
inline void QuerySmartContractStateRequest::set_allocated_query_data(std::string* value) {
  _impl_.query_data_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.query_data_.IsDefault()) {
          _impl_.query_data_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmwasm.wasm.v1.QuerySmartContractStateRequest.query_data)
}

// -------------------------------------------------------------------

// QuerySmartContractStateResponse

// bytes data = 1 [json_name = "data", (.gogoproto.casttype) = "RawContractMessage"];
inline void QuerySmartContractStateResponse::clear_data() {
  _impl_.data_.ClearToEmpty();
}
inline const std::string& QuerySmartContractStateResponse::data() const {
  // @@protoc_insertion_point(field_get:cosmwasm.wasm.v1.QuerySmartContractStateResponse.data)
  return _internal_data();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QuerySmartContractStateResponse::set_data(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.data_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmwasm.wasm.v1.QuerySmartContractStateResponse.data)
}
inline std::string* QuerySmartContractStateResponse::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:cosmwasm.wasm.v1.QuerySmartContractStateResponse.data)
  return _s;
}
inline const std::string& QuerySmartContractStateResponse::_internal_data() const {
  return _impl_.data_.Get();
}
inline void QuerySmartContractStateResponse::_internal_set_data(const std::string& value) {
  ;


  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* QuerySmartContractStateResponse::_internal_mutable_data() {
  ;
  return _impl_.data_.Mutable( GetArenaForAllocation());
}
inline std::string* QuerySmartContractStateResponse::release_data() {
  // @@protoc_insertion_point(field_release:cosmwasm.wasm.v1.QuerySmartContractStateResponse.data)
  return _impl_.data_.Release();
}
inline void QuerySmartContractStateResponse::set_allocated_data(std::string* value) {
  _impl_.data_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.data_.IsDefault()) {
          _impl_.data_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmwasm.wasm.v1.QuerySmartContractStateResponse.data)
}

// -------------------------------------------------------------------

// QueryCodeRequest

// uint64 code_id = 1 [json_name = "codeId"];
inline void QueryCodeRequest::clear_code_id() {
  _impl_.code_id_ = ::uint64_t{0u};
}
inline ::uint64_t QueryCodeRequest::code_id() const {
  // @@protoc_insertion_point(field_get:cosmwasm.wasm.v1.QueryCodeRequest.code_id)
  return _internal_code_id();
}
inline void QueryCodeRequest::set_code_id(::uint64_t value) {
  _internal_set_code_id(value);
  // @@protoc_insertion_point(field_set:cosmwasm.wasm.v1.QueryCodeRequest.code_id)
}
inline ::uint64_t QueryCodeRequest::_internal_code_id() const {
  return _impl_.code_id_;
}
inline void QueryCodeRequest::_internal_set_code_id(::uint64_t value) {
  ;
  _impl_.code_id_ = value;
}

// -------------------------------------------------------------------

// CodeInfoResponse

// uint64 code_id = 1 [json_name = "codeId", (.gogoproto.customname) = "CodeID", (.gogoproto.jsontag) = "id"];
inline void CodeInfoResponse::clear_code_id() {
  _impl_.code_id_ = ::uint64_t{0u};
}
inline ::uint64_t CodeInfoResponse::code_id() const {
  // @@protoc_insertion_point(field_get:cosmwasm.wasm.v1.CodeInfoResponse.code_id)
  return _internal_code_id();
}
inline void CodeInfoResponse::set_code_id(::uint64_t value) {
  _internal_set_code_id(value);
  // @@protoc_insertion_point(field_set:cosmwasm.wasm.v1.CodeInfoResponse.code_id)
}
inline ::uint64_t CodeInfoResponse::_internal_code_id() const {
  return _impl_.code_id_;
}
inline void CodeInfoResponse::_internal_set_code_id(::uint64_t value) {
  ;
  _impl_.code_id_ = value;
}

// string creator = 2 [json_name = "creator"];
inline void CodeInfoResponse::clear_creator() {
  _impl_.creator_.ClearToEmpty();
}
inline const std::string& CodeInfoResponse::creator() const {
  // @@protoc_insertion_point(field_get:cosmwasm.wasm.v1.CodeInfoResponse.creator)
  return _internal_creator();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CodeInfoResponse::set_creator(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.creator_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmwasm.wasm.v1.CodeInfoResponse.creator)
}
inline std::string* CodeInfoResponse::mutable_creator() {
  std::string* _s = _internal_mutable_creator();
  // @@protoc_insertion_point(field_mutable:cosmwasm.wasm.v1.CodeInfoResponse.creator)
  return _s;
}
inline const std::string& CodeInfoResponse::_internal_creator() const {
  return _impl_.creator_.Get();
}
inline void CodeInfoResponse::_internal_set_creator(const std::string& value) {
  ;


  _impl_.creator_.Set(value, GetArenaForAllocation());
}
inline std::string* CodeInfoResponse::_internal_mutable_creator() {
  ;
  return _impl_.creator_.Mutable( GetArenaForAllocation());
}
inline std::string* CodeInfoResponse::release_creator() {
  // @@protoc_insertion_point(field_release:cosmwasm.wasm.v1.CodeInfoResponse.creator)
  return _impl_.creator_.Release();
}
inline void CodeInfoResponse::set_allocated_creator(std::string* value) {
  _impl_.creator_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.creator_.IsDefault()) {
          _impl_.creator_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmwasm.wasm.v1.CodeInfoResponse.creator)
}

// bytes data_hash = 3 [json_name = "dataHash", (.gogoproto.casttype) = "github.com/cometbft/cometbft/libs/bytes.HexBytes"];
inline void CodeInfoResponse::clear_data_hash() {
  _impl_.data_hash_.ClearToEmpty();
}
inline const std::string& CodeInfoResponse::data_hash() const {
  // @@protoc_insertion_point(field_get:cosmwasm.wasm.v1.CodeInfoResponse.data_hash)
  return _internal_data_hash();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CodeInfoResponse::set_data_hash(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.data_hash_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmwasm.wasm.v1.CodeInfoResponse.data_hash)
}
inline std::string* CodeInfoResponse::mutable_data_hash() {
  std::string* _s = _internal_mutable_data_hash();
  // @@protoc_insertion_point(field_mutable:cosmwasm.wasm.v1.CodeInfoResponse.data_hash)
  return _s;
}
inline const std::string& CodeInfoResponse::_internal_data_hash() const {
  return _impl_.data_hash_.Get();
}
inline void CodeInfoResponse::_internal_set_data_hash(const std::string& value) {
  ;


  _impl_.data_hash_.Set(value, GetArenaForAllocation());
}
inline std::string* CodeInfoResponse::_internal_mutable_data_hash() {
  ;
  return _impl_.data_hash_.Mutable( GetArenaForAllocation());
}
inline std::string* CodeInfoResponse::release_data_hash() {
  // @@protoc_insertion_point(field_release:cosmwasm.wasm.v1.CodeInfoResponse.data_hash)
  return _impl_.data_hash_.Release();
}
inline void CodeInfoResponse::set_allocated_data_hash(std::string* value) {
  _impl_.data_hash_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.data_hash_.IsDefault()) {
          _impl_.data_hash_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmwasm.wasm.v1.CodeInfoResponse.data_hash)
}

// .cosmwasm.wasm.v1.AccessConfig instantiate_permission = 6 [json_name = "instantiatePermission", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
inline bool CodeInfoResponse::has_instantiate_permission() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.instantiate_permission_ != nullptr);
  return value;
}
inline const ::cosmwasm::wasm::v1::AccessConfig& CodeInfoResponse::_internal_instantiate_permission() const {
  const ::cosmwasm::wasm::v1::AccessConfig* p = _impl_.instantiate_permission_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmwasm::wasm::v1::AccessConfig&>(
      ::cosmwasm::wasm::v1::_AccessConfig_default_instance_);
}
inline const ::cosmwasm::wasm::v1::AccessConfig& CodeInfoResponse::instantiate_permission() const {
  // @@protoc_insertion_point(field_get:cosmwasm.wasm.v1.CodeInfoResponse.instantiate_permission)
  return _internal_instantiate_permission();
}
inline void CodeInfoResponse::unsafe_arena_set_allocated_instantiate_permission(
    ::cosmwasm::wasm::v1::AccessConfig* instantiate_permission) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.instantiate_permission_);
  }
  _impl_.instantiate_permission_ = instantiate_permission;
  if (instantiate_permission) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmwasm.wasm.v1.CodeInfoResponse.instantiate_permission)
}
inline ::cosmwasm::wasm::v1::AccessConfig* CodeInfoResponse::release_instantiate_permission() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmwasm::wasm::v1::AccessConfig* temp = _impl_.instantiate_permission_;
  _impl_.instantiate_permission_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmwasm::wasm::v1::AccessConfig* CodeInfoResponse::unsafe_arena_release_instantiate_permission() {
  // @@protoc_insertion_point(field_release:cosmwasm.wasm.v1.CodeInfoResponse.instantiate_permission)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmwasm::wasm::v1::AccessConfig* temp = _impl_.instantiate_permission_;
  _impl_.instantiate_permission_ = nullptr;
  return temp;
}
inline ::cosmwasm::wasm::v1::AccessConfig* CodeInfoResponse::_internal_mutable_instantiate_permission() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.instantiate_permission_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmwasm::wasm::v1::AccessConfig>(GetArenaForAllocation());
    _impl_.instantiate_permission_ = p;
  }
  return _impl_.instantiate_permission_;
}
inline ::cosmwasm::wasm::v1::AccessConfig* CodeInfoResponse::mutable_instantiate_permission() {
  ::cosmwasm::wasm::v1::AccessConfig* _msg = _internal_mutable_instantiate_permission();
  // @@protoc_insertion_point(field_mutable:cosmwasm.wasm.v1.CodeInfoResponse.instantiate_permission)
  return _msg;
}
inline void CodeInfoResponse::set_allocated_instantiate_permission(::cosmwasm::wasm::v1::AccessConfig* instantiate_permission) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.instantiate_permission_);
  }
  if (instantiate_permission) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(instantiate_permission));
    if (message_arena != submessage_arena) {
      instantiate_permission = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, instantiate_permission, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.instantiate_permission_ = instantiate_permission;
  // @@protoc_insertion_point(field_set_allocated:cosmwasm.wasm.v1.CodeInfoResponse.instantiate_permission)
}

// -------------------------------------------------------------------

// QueryCodeResponse

// .cosmwasm.wasm.v1.CodeInfoResponse code_info = 1 [json_name = "codeInfo", (.gogoproto.embed) = true, (.gogoproto.jsontag) = ""];
inline bool QueryCodeResponse::has_code_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.code_info_ != nullptr);
  return value;
}
inline void QueryCodeResponse::clear_code_info() {
  if (_impl_.code_info_ != nullptr) _impl_.code_info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::cosmwasm::wasm::v1::CodeInfoResponse& QueryCodeResponse::_internal_code_info() const {
  const ::cosmwasm::wasm::v1::CodeInfoResponse* p = _impl_.code_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmwasm::wasm::v1::CodeInfoResponse&>(
      ::cosmwasm::wasm::v1::_CodeInfoResponse_default_instance_);
}
inline const ::cosmwasm::wasm::v1::CodeInfoResponse& QueryCodeResponse::code_info() const {
  // @@protoc_insertion_point(field_get:cosmwasm.wasm.v1.QueryCodeResponse.code_info)
  return _internal_code_info();
}
inline void QueryCodeResponse::unsafe_arena_set_allocated_code_info(
    ::cosmwasm::wasm::v1::CodeInfoResponse* code_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.code_info_);
  }
  _impl_.code_info_ = code_info;
  if (code_info) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmwasm.wasm.v1.QueryCodeResponse.code_info)
}
inline ::cosmwasm::wasm::v1::CodeInfoResponse* QueryCodeResponse::release_code_info() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmwasm::wasm::v1::CodeInfoResponse* temp = _impl_.code_info_;
  _impl_.code_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmwasm::wasm::v1::CodeInfoResponse* QueryCodeResponse::unsafe_arena_release_code_info() {
  // @@protoc_insertion_point(field_release:cosmwasm.wasm.v1.QueryCodeResponse.code_info)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmwasm::wasm::v1::CodeInfoResponse* temp = _impl_.code_info_;
  _impl_.code_info_ = nullptr;
  return temp;
}
inline ::cosmwasm::wasm::v1::CodeInfoResponse* QueryCodeResponse::_internal_mutable_code_info() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.code_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmwasm::wasm::v1::CodeInfoResponse>(GetArenaForAllocation());
    _impl_.code_info_ = p;
  }
  return _impl_.code_info_;
}
inline ::cosmwasm::wasm::v1::CodeInfoResponse* QueryCodeResponse::mutable_code_info() {
  ::cosmwasm::wasm::v1::CodeInfoResponse* _msg = _internal_mutable_code_info();
  // @@protoc_insertion_point(field_mutable:cosmwasm.wasm.v1.QueryCodeResponse.code_info)
  return _msg;
}
inline void QueryCodeResponse::set_allocated_code_info(::cosmwasm::wasm::v1::CodeInfoResponse* code_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.code_info_;
  }
  if (code_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(code_info);
    if (message_arena != submessage_arena) {
      code_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, code_info, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.code_info_ = code_info;
  // @@protoc_insertion_point(field_set_allocated:cosmwasm.wasm.v1.QueryCodeResponse.code_info)
}

// bytes data = 2 [json_name = "data", (.gogoproto.jsontag) = "data"];
inline void QueryCodeResponse::clear_data() {
  _impl_.data_.ClearToEmpty();
}
inline const std::string& QueryCodeResponse::data() const {
  // @@protoc_insertion_point(field_get:cosmwasm.wasm.v1.QueryCodeResponse.data)
  return _internal_data();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryCodeResponse::set_data(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.data_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmwasm.wasm.v1.QueryCodeResponse.data)
}
inline std::string* QueryCodeResponse::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:cosmwasm.wasm.v1.QueryCodeResponse.data)
  return _s;
}
inline const std::string& QueryCodeResponse::_internal_data() const {
  return _impl_.data_.Get();
}
inline void QueryCodeResponse::_internal_set_data(const std::string& value) {
  ;


  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryCodeResponse::_internal_mutable_data() {
  ;
  return _impl_.data_.Mutable( GetArenaForAllocation());
}
inline std::string* QueryCodeResponse::release_data() {
  // @@protoc_insertion_point(field_release:cosmwasm.wasm.v1.QueryCodeResponse.data)
  return _impl_.data_.Release();
}
inline void QueryCodeResponse::set_allocated_data(std::string* value) {
  _impl_.data_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.data_.IsDefault()) {
          _impl_.data_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmwasm.wasm.v1.QueryCodeResponse.data)
}

// -------------------------------------------------------------------

// QueryCodesRequest

// .cosmos.base.query.v1beta1.PageRequest pagination = 1 [json_name = "pagination"];
inline bool QueryCodesRequest::has_pagination() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pagination_ != nullptr);
  return value;
}
inline const ::cosmos::base::query::v1beta1::PageRequest& QueryCodesRequest::_internal_pagination() const {
  const ::cosmos::base::query::v1beta1::PageRequest* p = _impl_.pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::query::v1beta1::PageRequest&>(
      ::cosmos::base::query::v1beta1::_PageRequest_default_instance_);
}
inline const ::cosmos::base::query::v1beta1::PageRequest& QueryCodesRequest::pagination() const {
  // @@protoc_insertion_point(field_get:cosmwasm.wasm.v1.QueryCodesRequest.pagination)
  return _internal_pagination();
}
inline void QueryCodesRequest::unsafe_arena_set_allocated_pagination(
    ::cosmos::base::query::v1beta1::PageRequest* pagination) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  _impl_.pagination_ = pagination;
  if (pagination) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmwasm.wasm.v1.QueryCodesRequest.pagination)
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryCodesRequest::release_pagination() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageRequest* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryCodesRequest::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:cosmwasm.wasm.v1.QueryCodesRequest.pagination)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageRequest* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryCodesRequest::_internal_mutable_pagination() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::base::query::v1beta1::PageRequest>(GetArenaForAllocation());
    _impl_.pagination_ = p;
  }
  return _impl_.pagination_;
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryCodesRequest::mutable_pagination() {
  ::cosmos::base::query::v1beta1::PageRequest* _msg = _internal_mutable_pagination();
  // @@protoc_insertion_point(field_mutable:cosmwasm.wasm.v1.QueryCodesRequest.pagination)
  return _msg;
}
inline void QueryCodesRequest::set_allocated_pagination(::cosmos::base::query::v1beta1::PageRequest* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination));
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:cosmwasm.wasm.v1.QueryCodesRequest.pagination)
}

// -------------------------------------------------------------------

// QueryCodesResponse

// repeated .cosmwasm.wasm.v1.CodeInfoResponse code_infos = 1 [json_name = "codeInfos", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
inline int QueryCodesResponse::_internal_code_infos_size() const {
  return _impl_.code_infos_.size();
}
inline int QueryCodesResponse::code_infos_size() const {
  return _internal_code_infos_size();
}
inline void QueryCodesResponse::clear_code_infos() {
  _internal_mutable_code_infos()->Clear();
}
inline ::cosmwasm::wasm::v1::CodeInfoResponse* QueryCodesResponse::mutable_code_infos(int index) {
  // @@protoc_insertion_point(field_mutable:cosmwasm.wasm.v1.QueryCodesResponse.code_infos)
  return _internal_mutable_code_infos()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmwasm::wasm::v1::CodeInfoResponse >*
QueryCodesResponse::mutable_code_infos() {
  // @@protoc_insertion_point(field_mutable_list:cosmwasm.wasm.v1.QueryCodesResponse.code_infos)
  return _internal_mutable_code_infos();
}
inline const ::cosmwasm::wasm::v1::CodeInfoResponse& QueryCodesResponse::_internal_code_infos(int index) const {
  return _internal_code_infos().Get(index);
}
inline const ::cosmwasm::wasm::v1::CodeInfoResponse& QueryCodesResponse::code_infos(int index) const {
  // @@protoc_insertion_point(field_get:cosmwasm.wasm.v1.QueryCodesResponse.code_infos)
  return _internal_code_infos(index);
}
inline ::cosmwasm::wasm::v1::CodeInfoResponse* QueryCodesResponse::_internal_add_code_infos() {
  return _internal_mutable_code_infos()->Add();
}
inline ::cosmwasm::wasm::v1::CodeInfoResponse* QueryCodesResponse::add_code_infos() {
  ::cosmwasm::wasm::v1::CodeInfoResponse* _add = _internal_add_code_infos();
  // @@protoc_insertion_point(field_add:cosmwasm.wasm.v1.QueryCodesResponse.code_infos)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmwasm::wasm::v1::CodeInfoResponse >&
QueryCodesResponse::code_infos() const {
  // @@protoc_insertion_point(field_list:cosmwasm.wasm.v1.QueryCodesResponse.code_infos)
  return _internal_code_infos();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmwasm::wasm::v1::CodeInfoResponse>&
QueryCodesResponse::_internal_code_infos() const {
  return _impl_.code_infos_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmwasm::wasm::v1::CodeInfoResponse>*
QueryCodesResponse::_internal_mutable_code_infos() {
  return &_impl_.code_infos_;
}

// .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
inline bool QueryCodesResponse::has_pagination() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pagination_ != nullptr);
  return value;
}
inline const ::cosmos::base::query::v1beta1::PageResponse& QueryCodesResponse::_internal_pagination() const {
  const ::cosmos::base::query::v1beta1::PageResponse* p = _impl_.pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::query::v1beta1::PageResponse&>(
      ::cosmos::base::query::v1beta1::_PageResponse_default_instance_);
}
inline const ::cosmos::base::query::v1beta1::PageResponse& QueryCodesResponse::pagination() const {
  // @@protoc_insertion_point(field_get:cosmwasm.wasm.v1.QueryCodesResponse.pagination)
  return _internal_pagination();
}
inline void QueryCodesResponse::unsafe_arena_set_allocated_pagination(
    ::cosmos::base::query::v1beta1::PageResponse* pagination) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  _impl_.pagination_ = pagination;
  if (pagination) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmwasm.wasm.v1.QueryCodesResponse.pagination)
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryCodesResponse::release_pagination() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageResponse* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryCodesResponse::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:cosmwasm.wasm.v1.QueryCodesResponse.pagination)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageResponse* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryCodesResponse::_internal_mutable_pagination() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::base::query::v1beta1::PageResponse>(GetArenaForAllocation());
    _impl_.pagination_ = p;
  }
  return _impl_.pagination_;
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryCodesResponse::mutable_pagination() {
  ::cosmos::base::query::v1beta1::PageResponse* _msg = _internal_mutable_pagination();
  // @@protoc_insertion_point(field_mutable:cosmwasm.wasm.v1.QueryCodesResponse.pagination)
  return _msg;
}
inline void QueryCodesResponse::set_allocated_pagination(::cosmos::base::query::v1beta1::PageResponse* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination));
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:cosmwasm.wasm.v1.QueryCodesResponse.pagination)
}

// -------------------------------------------------------------------

// QueryPinnedCodesRequest

// .cosmos.base.query.v1beta1.PageRequest pagination = 2 [json_name = "pagination"];
inline bool QueryPinnedCodesRequest::has_pagination() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pagination_ != nullptr);
  return value;
}
inline const ::cosmos::base::query::v1beta1::PageRequest& QueryPinnedCodesRequest::_internal_pagination() const {
  const ::cosmos::base::query::v1beta1::PageRequest* p = _impl_.pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::query::v1beta1::PageRequest&>(
      ::cosmos::base::query::v1beta1::_PageRequest_default_instance_);
}
inline const ::cosmos::base::query::v1beta1::PageRequest& QueryPinnedCodesRequest::pagination() const {
  // @@protoc_insertion_point(field_get:cosmwasm.wasm.v1.QueryPinnedCodesRequest.pagination)
  return _internal_pagination();
}
inline void QueryPinnedCodesRequest::unsafe_arena_set_allocated_pagination(
    ::cosmos::base::query::v1beta1::PageRequest* pagination) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  _impl_.pagination_ = pagination;
  if (pagination) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmwasm.wasm.v1.QueryPinnedCodesRequest.pagination)
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryPinnedCodesRequest::release_pagination() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageRequest* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryPinnedCodesRequest::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:cosmwasm.wasm.v1.QueryPinnedCodesRequest.pagination)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageRequest* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryPinnedCodesRequest::_internal_mutable_pagination() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::base::query::v1beta1::PageRequest>(GetArenaForAllocation());
    _impl_.pagination_ = p;
  }
  return _impl_.pagination_;
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryPinnedCodesRequest::mutable_pagination() {
  ::cosmos::base::query::v1beta1::PageRequest* _msg = _internal_mutable_pagination();
  // @@protoc_insertion_point(field_mutable:cosmwasm.wasm.v1.QueryPinnedCodesRequest.pagination)
  return _msg;
}
inline void QueryPinnedCodesRequest::set_allocated_pagination(::cosmos::base::query::v1beta1::PageRequest* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination));
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:cosmwasm.wasm.v1.QueryPinnedCodesRequest.pagination)
}

// -------------------------------------------------------------------

// QueryPinnedCodesResponse

// repeated uint64 code_ids = 1 [json_name = "codeIds", (.gogoproto.customname) = "CodeIDs"];
inline int QueryPinnedCodesResponse::_internal_code_ids_size() const {
  return _impl_.code_ids_.size();
}
inline int QueryPinnedCodesResponse::code_ids_size() const {
  return _internal_code_ids_size();
}
inline void QueryPinnedCodesResponse::clear_code_ids() {
  _internal_mutable_code_ids()->Clear();
}
inline ::uint64_t QueryPinnedCodesResponse::code_ids(int index) const {
  // @@protoc_insertion_point(field_get:cosmwasm.wasm.v1.QueryPinnedCodesResponse.code_ids)
  return _internal_code_ids(index);
}
inline void QueryPinnedCodesResponse::set_code_ids(int index, ::uint64_t value) {
  _internal_mutable_code_ids()->Set(index, value);
  // @@protoc_insertion_point(field_set:cosmwasm.wasm.v1.QueryPinnedCodesResponse.code_ids)
}
inline void QueryPinnedCodesResponse::add_code_ids(::uint64_t value) {
  _internal_add_code_ids(value);
  // @@protoc_insertion_point(field_add:cosmwasm.wasm.v1.QueryPinnedCodesResponse.code_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>& QueryPinnedCodesResponse::code_ids() const {
  // @@protoc_insertion_point(field_list:cosmwasm.wasm.v1.QueryPinnedCodesResponse.code_ids)
  return _internal_code_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>* QueryPinnedCodesResponse::mutable_code_ids() {
  // @@protoc_insertion_point(field_mutable_list:cosmwasm.wasm.v1.QueryPinnedCodesResponse.code_ids)
  return _internal_mutable_code_ids();
}

inline ::uint64_t QueryPinnedCodesResponse::_internal_code_ids(int index) const {
  return _internal_code_ids().Get(index);
}
inline void QueryPinnedCodesResponse::_internal_add_code_ids(::uint64_t value) {
  _internal_mutable_code_ids()->Add(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>& QueryPinnedCodesResponse::_internal_code_ids() const {
  return _impl_.code_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>* QueryPinnedCodesResponse::_internal_mutable_code_ids() {
  return &_impl_.code_ids_;
}

// .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
inline bool QueryPinnedCodesResponse::has_pagination() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pagination_ != nullptr);
  return value;
}
inline const ::cosmos::base::query::v1beta1::PageResponse& QueryPinnedCodesResponse::_internal_pagination() const {
  const ::cosmos::base::query::v1beta1::PageResponse* p = _impl_.pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::query::v1beta1::PageResponse&>(
      ::cosmos::base::query::v1beta1::_PageResponse_default_instance_);
}
inline const ::cosmos::base::query::v1beta1::PageResponse& QueryPinnedCodesResponse::pagination() const {
  // @@protoc_insertion_point(field_get:cosmwasm.wasm.v1.QueryPinnedCodesResponse.pagination)
  return _internal_pagination();
}
inline void QueryPinnedCodesResponse::unsafe_arena_set_allocated_pagination(
    ::cosmos::base::query::v1beta1::PageResponse* pagination) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  _impl_.pagination_ = pagination;
  if (pagination) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmwasm.wasm.v1.QueryPinnedCodesResponse.pagination)
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryPinnedCodesResponse::release_pagination() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageResponse* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryPinnedCodesResponse::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:cosmwasm.wasm.v1.QueryPinnedCodesResponse.pagination)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageResponse* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryPinnedCodesResponse::_internal_mutable_pagination() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::base::query::v1beta1::PageResponse>(GetArenaForAllocation());
    _impl_.pagination_ = p;
  }
  return _impl_.pagination_;
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryPinnedCodesResponse::mutable_pagination() {
  ::cosmos::base::query::v1beta1::PageResponse* _msg = _internal_mutable_pagination();
  // @@protoc_insertion_point(field_mutable:cosmwasm.wasm.v1.QueryPinnedCodesResponse.pagination)
  return _msg;
}
inline void QueryPinnedCodesResponse::set_allocated_pagination(::cosmos::base::query::v1beta1::PageResponse* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination));
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:cosmwasm.wasm.v1.QueryPinnedCodesResponse.pagination)
}

// -------------------------------------------------------------------

// QueryParamsRequest

// -------------------------------------------------------------------

// QueryParamsResponse

// .cosmwasm.wasm.v1.Params params = 1 [json_name = "params", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
inline bool QueryParamsResponse::has_params() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.params_ != nullptr);
  return value;
}
inline const ::cosmwasm::wasm::v1::Params& QueryParamsResponse::_internal_params() const {
  const ::cosmwasm::wasm::v1::Params* p = _impl_.params_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmwasm::wasm::v1::Params&>(
      ::cosmwasm::wasm::v1::_Params_default_instance_);
}
inline const ::cosmwasm::wasm::v1::Params& QueryParamsResponse::params() const {
  // @@protoc_insertion_point(field_get:cosmwasm.wasm.v1.QueryParamsResponse.params)
  return _internal_params();
}
inline void QueryParamsResponse::unsafe_arena_set_allocated_params(
    ::cosmwasm::wasm::v1::Params* params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.params_);
  }
  _impl_.params_ = params;
  if (params) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmwasm.wasm.v1.QueryParamsResponse.params)
}
inline ::cosmwasm::wasm::v1::Params* QueryParamsResponse::release_params() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmwasm::wasm::v1::Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmwasm::wasm::v1::Params* QueryParamsResponse::unsafe_arena_release_params() {
  // @@protoc_insertion_point(field_release:cosmwasm.wasm.v1.QueryParamsResponse.params)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmwasm::wasm::v1::Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
  return temp;
}
inline ::cosmwasm::wasm::v1::Params* QueryParamsResponse::_internal_mutable_params() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.params_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmwasm::wasm::v1::Params>(GetArenaForAllocation());
    _impl_.params_ = p;
  }
  return _impl_.params_;
}
inline ::cosmwasm::wasm::v1::Params* QueryParamsResponse::mutable_params() {
  ::cosmwasm::wasm::v1::Params* _msg = _internal_mutable_params();
  // @@protoc_insertion_point(field_mutable:cosmwasm.wasm.v1.QueryParamsResponse.params)
  return _msg;
}
inline void QueryParamsResponse::set_allocated_params(::cosmwasm::wasm::v1::Params* params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.params_);
  }
  if (params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(params));
    if (message_arena != submessage_arena) {
      params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, params, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.params_ = params;
  // @@protoc_insertion_point(field_set_allocated:cosmwasm.wasm.v1.QueryParamsResponse.params)
}

// -------------------------------------------------------------------

// QueryContractsByCreatorRequest

// string creator_address = 1 [json_name = "creatorAddress"];
inline void QueryContractsByCreatorRequest::clear_creator_address() {
  _impl_.creator_address_.ClearToEmpty();
}
inline const std::string& QueryContractsByCreatorRequest::creator_address() const {
  // @@protoc_insertion_point(field_get:cosmwasm.wasm.v1.QueryContractsByCreatorRequest.creator_address)
  return _internal_creator_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryContractsByCreatorRequest::set_creator_address(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.creator_address_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmwasm.wasm.v1.QueryContractsByCreatorRequest.creator_address)
}
inline std::string* QueryContractsByCreatorRequest::mutable_creator_address() {
  std::string* _s = _internal_mutable_creator_address();
  // @@protoc_insertion_point(field_mutable:cosmwasm.wasm.v1.QueryContractsByCreatorRequest.creator_address)
  return _s;
}
inline const std::string& QueryContractsByCreatorRequest::_internal_creator_address() const {
  return _impl_.creator_address_.Get();
}
inline void QueryContractsByCreatorRequest::_internal_set_creator_address(const std::string& value) {
  ;


  _impl_.creator_address_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryContractsByCreatorRequest::_internal_mutable_creator_address() {
  ;
  return _impl_.creator_address_.Mutable( GetArenaForAllocation());
}
inline std::string* QueryContractsByCreatorRequest::release_creator_address() {
  // @@protoc_insertion_point(field_release:cosmwasm.wasm.v1.QueryContractsByCreatorRequest.creator_address)
  return _impl_.creator_address_.Release();
}
inline void QueryContractsByCreatorRequest::set_allocated_creator_address(std::string* value) {
  _impl_.creator_address_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.creator_address_.IsDefault()) {
          _impl_.creator_address_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmwasm.wasm.v1.QueryContractsByCreatorRequest.creator_address)
}

// .cosmos.base.query.v1beta1.PageRequest pagination = 2 [json_name = "pagination"];
inline bool QueryContractsByCreatorRequest::has_pagination() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pagination_ != nullptr);
  return value;
}
inline const ::cosmos::base::query::v1beta1::PageRequest& QueryContractsByCreatorRequest::_internal_pagination() const {
  const ::cosmos::base::query::v1beta1::PageRequest* p = _impl_.pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::query::v1beta1::PageRequest&>(
      ::cosmos::base::query::v1beta1::_PageRequest_default_instance_);
}
inline const ::cosmos::base::query::v1beta1::PageRequest& QueryContractsByCreatorRequest::pagination() const {
  // @@protoc_insertion_point(field_get:cosmwasm.wasm.v1.QueryContractsByCreatorRequest.pagination)
  return _internal_pagination();
}
inline void QueryContractsByCreatorRequest::unsafe_arena_set_allocated_pagination(
    ::cosmos::base::query::v1beta1::PageRequest* pagination) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  _impl_.pagination_ = pagination;
  if (pagination) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmwasm.wasm.v1.QueryContractsByCreatorRequest.pagination)
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryContractsByCreatorRequest::release_pagination() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageRequest* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryContractsByCreatorRequest::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:cosmwasm.wasm.v1.QueryContractsByCreatorRequest.pagination)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageRequest* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryContractsByCreatorRequest::_internal_mutable_pagination() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::base::query::v1beta1::PageRequest>(GetArenaForAllocation());
    _impl_.pagination_ = p;
  }
  return _impl_.pagination_;
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryContractsByCreatorRequest::mutable_pagination() {
  ::cosmos::base::query::v1beta1::PageRequest* _msg = _internal_mutable_pagination();
  // @@protoc_insertion_point(field_mutable:cosmwasm.wasm.v1.QueryContractsByCreatorRequest.pagination)
  return _msg;
}
inline void QueryContractsByCreatorRequest::set_allocated_pagination(::cosmos::base::query::v1beta1::PageRequest* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination));
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:cosmwasm.wasm.v1.QueryContractsByCreatorRequest.pagination)
}

// -------------------------------------------------------------------

// QueryContractsByCreatorResponse

// repeated string contract_addresses = 1 [json_name = "contractAddresses"];
inline int QueryContractsByCreatorResponse::_internal_contract_addresses_size() const {
  return _impl_.contract_addresses_.size();
}
inline int QueryContractsByCreatorResponse::contract_addresses_size() const {
  return _internal_contract_addresses_size();
}
inline void QueryContractsByCreatorResponse::clear_contract_addresses() {
  _internal_mutable_contract_addresses()->Clear();
}
inline std::string* QueryContractsByCreatorResponse::add_contract_addresses() {
  std::string* _s = _internal_add_contract_addresses();
  // @@protoc_insertion_point(field_add_mutable:cosmwasm.wasm.v1.QueryContractsByCreatorResponse.contract_addresses)
  return _s;
}
inline const std::string& QueryContractsByCreatorResponse::contract_addresses(int index) const {
  // @@protoc_insertion_point(field_get:cosmwasm.wasm.v1.QueryContractsByCreatorResponse.contract_addresses)
  return _internal_contract_addresses(index);
}
inline std::string* QueryContractsByCreatorResponse::mutable_contract_addresses(int index) {
  // @@protoc_insertion_point(field_mutable:cosmwasm.wasm.v1.QueryContractsByCreatorResponse.contract_addresses)
  return _internal_mutable_contract_addresses()->Mutable(index);
}
inline void QueryContractsByCreatorResponse::set_contract_addresses(int index, const std::string& value) {
  _internal_mutable_contract_addresses()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:cosmwasm.wasm.v1.QueryContractsByCreatorResponse.contract_addresses)
}
inline void QueryContractsByCreatorResponse::set_contract_addresses(int index, std::string&& value) {
  _internal_mutable_contract_addresses()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:cosmwasm.wasm.v1.QueryContractsByCreatorResponse.contract_addresses)
}
inline void QueryContractsByCreatorResponse::set_contract_addresses(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_contract_addresses()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:cosmwasm.wasm.v1.QueryContractsByCreatorResponse.contract_addresses)
}
inline void QueryContractsByCreatorResponse::set_contract_addresses(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_contract_addresses()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cosmwasm.wasm.v1.QueryContractsByCreatorResponse.contract_addresses)
}
inline void QueryContractsByCreatorResponse::set_contract_addresses(int index, absl::string_view value) {
  _internal_mutable_contract_addresses()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:cosmwasm.wasm.v1.QueryContractsByCreatorResponse.contract_addresses)
}
inline void QueryContractsByCreatorResponse::add_contract_addresses(const std::string& value) {
  _internal_mutable_contract_addresses()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:cosmwasm.wasm.v1.QueryContractsByCreatorResponse.contract_addresses)
}
inline void QueryContractsByCreatorResponse::add_contract_addresses(std::string&& value) {
  _internal_mutable_contract_addresses()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:cosmwasm.wasm.v1.QueryContractsByCreatorResponse.contract_addresses)
}
inline void QueryContractsByCreatorResponse::add_contract_addresses(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_contract_addresses()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:cosmwasm.wasm.v1.QueryContractsByCreatorResponse.contract_addresses)
}
inline void QueryContractsByCreatorResponse::add_contract_addresses(const char* value, std::size_t size) {
  _internal_mutable_contract_addresses()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:cosmwasm.wasm.v1.QueryContractsByCreatorResponse.contract_addresses)
}
inline void QueryContractsByCreatorResponse::add_contract_addresses(absl::string_view value) {
  _internal_mutable_contract_addresses()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:cosmwasm.wasm.v1.QueryContractsByCreatorResponse.contract_addresses)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
QueryContractsByCreatorResponse::contract_addresses() const {
  // @@protoc_insertion_point(field_list:cosmwasm.wasm.v1.QueryContractsByCreatorResponse.contract_addresses)
  return _internal_contract_addresses();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* QueryContractsByCreatorResponse::mutable_contract_addresses() {
  // @@protoc_insertion_point(field_mutable_list:cosmwasm.wasm.v1.QueryContractsByCreatorResponse.contract_addresses)
  return _internal_mutable_contract_addresses();
}
inline const std::string& QueryContractsByCreatorResponse::_internal_contract_addresses(int index) const {
  return _internal_contract_addresses().Get(index);
}
inline std::string* QueryContractsByCreatorResponse::_internal_add_contract_addresses() {
  return _internal_mutable_contract_addresses()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
QueryContractsByCreatorResponse::_internal_contract_addresses() const {
  return _impl_.contract_addresses_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
QueryContractsByCreatorResponse::_internal_mutable_contract_addresses() {
  return &_impl_.contract_addresses_;
}

// .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
inline bool QueryContractsByCreatorResponse::has_pagination() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pagination_ != nullptr);
  return value;
}
inline const ::cosmos::base::query::v1beta1::PageResponse& QueryContractsByCreatorResponse::_internal_pagination() const {
  const ::cosmos::base::query::v1beta1::PageResponse* p = _impl_.pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::query::v1beta1::PageResponse&>(
      ::cosmos::base::query::v1beta1::_PageResponse_default_instance_);
}
inline const ::cosmos::base::query::v1beta1::PageResponse& QueryContractsByCreatorResponse::pagination() const {
  // @@protoc_insertion_point(field_get:cosmwasm.wasm.v1.QueryContractsByCreatorResponse.pagination)
  return _internal_pagination();
}
inline void QueryContractsByCreatorResponse::unsafe_arena_set_allocated_pagination(
    ::cosmos::base::query::v1beta1::PageResponse* pagination) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  _impl_.pagination_ = pagination;
  if (pagination) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmwasm.wasm.v1.QueryContractsByCreatorResponse.pagination)
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryContractsByCreatorResponse::release_pagination() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageResponse* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryContractsByCreatorResponse::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:cosmwasm.wasm.v1.QueryContractsByCreatorResponse.pagination)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageResponse* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryContractsByCreatorResponse::_internal_mutable_pagination() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::base::query::v1beta1::PageResponse>(GetArenaForAllocation());
    _impl_.pagination_ = p;
  }
  return _impl_.pagination_;
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryContractsByCreatorResponse::mutable_pagination() {
  ::cosmos::base::query::v1beta1::PageResponse* _msg = _internal_mutable_pagination();
  // @@protoc_insertion_point(field_mutable:cosmwasm.wasm.v1.QueryContractsByCreatorResponse.pagination)
  return _msg;
}
inline void QueryContractsByCreatorResponse::set_allocated_pagination(::cosmos::base::query::v1beta1::PageResponse* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination));
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:cosmwasm.wasm.v1.QueryContractsByCreatorResponse.pagination)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace wasm
}  // namespace cosmwasm


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_cosmwasm_2fwasm_2fv1_2fquery_2eproto_2epb_2eh

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cosmwasm/wasm/v1/genesis.proto

#include "cosmwasm/wasm/v1/genesis.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace cosmwasm {
namespace wasm {
namespace v1 {
template <typename>
PROTOBUF_CONSTEXPR GenesisState::GenesisState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.codes_)*/{}
  , /*decltype(_impl_.contracts_)*/{}
  , /*decltype(_impl_.sequences_)*/{}
  , /*decltype(_impl_.params_)*/nullptr} {}
struct GenesisStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GenesisStateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GenesisStateDefaultTypeInternal() {}
  union {
    GenesisState _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GenesisStateDefaultTypeInternal _GenesisState_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Code::Code(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.code_bytes_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.code_info_)*/nullptr
  , /*decltype(_impl_.code_id_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.pinned_)*/ false
} {}
struct CodeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CodeDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CodeDefaultTypeInternal() {}
  union {
    Code _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CodeDefaultTypeInternal _Code_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Contract::Contract(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.contract_state_)*/{}
  , /*decltype(_impl_.contract_code_history_)*/{}
  , /*decltype(_impl_.contract_address_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.contract_info_)*/nullptr} {}
struct ContractDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ContractDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ContractDefaultTypeInternal() {}
  union {
    Contract _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ContractDefaultTypeInternal _Contract_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Sequence::Sequence(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_key_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.value_)*/ ::uint64_t{0u}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SequenceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SequenceDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SequenceDefaultTypeInternal() {}
  union {
    Sequence _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SequenceDefaultTypeInternal _Sequence_default_instance_;
}  // namespace v1
}  // namespace wasm
}  // namespace cosmwasm
static ::_pb::Metadata file_level_metadata_cosmwasm_2fwasm_2fv1_2fgenesis_2eproto[4];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_cosmwasm_2fwasm_2fv1_2fgenesis_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_cosmwasm_2fwasm_2fv1_2fgenesis_2eproto = nullptr;
const ::uint32_t TableStruct_cosmwasm_2fwasm_2fv1_2fgenesis_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::GenesisState, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::GenesisState, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::GenesisState, _impl_.params_),
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::GenesisState, _impl_.codes_),
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::GenesisState, _impl_.contracts_),
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::GenesisState, _impl_.sequences_),
    0,
    ~0u,
    ~0u,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::Code, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::Code, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::Code, _impl_.code_id_),
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::Code, _impl_.code_info_),
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::Code, _impl_.code_bytes_),
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::Code, _impl_.pinned_),
    ~0u,
    0,
    ~0u,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::Contract, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::Contract, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::Contract, _impl_.contract_address_),
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::Contract, _impl_.contract_info_),
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::Contract, _impl_.contract_state_),
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::Contract, _impl_.contract_code_history_),
    ~0u,
    0,
    ~0u,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::Sequence, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::Sequence, _impl_.id_key_),
    PROTOBUF_FIELD_OFFSET(::cosmwasm::wasm::v1::Sequence, _impl_.value_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 12, -1, sizeof(::cosmwasm::wasm::v1::GenesisState)},
        { 16, 28, -1, sizeof(::cosmwasm::wasm::v1::Code)},
        { 32, 44, -1, sizeof(::cosmwasm::wasm::v1::Contract)},
        { 48, -1, -1, sizeof(::cosmwasm::wasm::v1::Sequence)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::cosmwasm::wasm::v1::_GenesisState_default_instance_._instance,
    &::cosmwasm::wasm::v1::_Code_default_instance_._instance,
    &::cosmwasm::wasm::v1::_Contract_default_instance_._instance,
    &::cosmwasm::wasm::v1::_Sequence_default_instance_._instance,
};
const char descriptor_table_protodef_cosmwasm_2fwasm_2fv1_2fgenesis_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\036cosmwasm/wasm/v1/genesis.proto\022\020cosmwa"
    "sm.wasm.v1\032\024gogoproto/gogo.proto\032\034cosmwa"
    "sm/wasm/v1/types.proto\032\021amino/amino.prot"
    "o\"\317\002\n\014GenesisState\022;\n\006params\030\001 \001(\0132\030.cos"
    "mwasm.wasm.v1.ParamsB\t\310\336\037\000\250\347\260*\001R\006params\022"
    "J\n\005codes\030\002 \003(\0132\026.cosmwasm.wasm.v1.CodeB\034"
    "\310\336\037\000\352\336\037\017codes,omitempty\250\347\260*\001R\005codes\022Z\n\tc"
    "ontracts\030\003 \003(\0132\032.cosmwasm.wasm.v1.Contra"
    "ctB \310\336\037\000\352\336\037\023contracts,omitempty\250\347\260*\001R\tco"
    "ntracts\022Z\n\tsequences\030\004 \003(\0132\032.cosmwasm.wa"
    "sm.v1.SequenceB \310\336\037\000\352\336\037\023sequences,omitem"
    "pty\250\347\260*\001R\tsequences\"\246\001\n\004Code\022#\n\007code_id\030"
    "\001 \001(\004B\n\342\336\037\006CodeIDR\006codeId\022B\n\tcode_info\030\002"
    " \001(\0132\032.cosmwasm.wasm.v1.CodeInfoB\t\310\336\037\000\250\347"
    "\260*\001R\010codeInfo\022\035\n\ncode_bytes\030\003 \001(\014R\tcodeB"
    "ytes\022\026\n\006pinned\030\004 \001(\010R\006pinned\"\273\002\n\010Contrac"
    "t\022)\n\020contract_address\030\001 \001(\tR\017contractAdd"
    "ress\022N\n\rcontract_info\030\002 \001(\0132\036.cosmwasm.w"
    "asm.v1.ContractInfoB\t\310\336\037\000\250\347\260*\001R\014contract"
    "Info\022I\n\016contract_state\030\003 \003(\0132\027.cosmwasm."
    "wasm.v1.ModelB\t\310\336\037\000\250\347\260*\001R\rcontractState\022"
    "i\n\025contract_code_history\030\004 \003(\0132*.cosmwas"
    "m.wasm.v1.ContractCodeHistoryEntryB\t\310\336\037\000"
    "\250\347\260*\001R\023contractCodeHistory\"B\n\010Sequence\022 "
    "\n\006id_key\030\001 \001(\014B\t\342\336\037\005IDKeyR\005idKey\022\024\n\005valu"
    "e\030\002 \001(\004R\005valueB\256\001\n\024com.cosmwasm.wasm.v1B"
    "\014GenesisProtoP\001Z&github.com/CosmWasm/was"
    "md/x/wasm/types\242\002\003CWX\252\002\020Cosmwasm.Wasm.V1"
    "\312\002\020Cosmwasm\\Wasm\\V1\342\002\034Cosmwasm\\Wasm\\V1\\G"
    "PBMetadata\352\002\022Cosmwasm::Wasm::V1b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_cosmwasm_2fwasm_2fv1_2fgenesis_2eproto_deps[3] =
    {
        &::descriptor_table_amino_2famino_2eproto,
        &::descriptor_table_cosmwasm_2fwasm_2fv1_2ftypes_2eproto,
        &::descriptor_table_gogoproto_2fgogo_2eproto,
};
static ::absl::once_flag descriptor_table_cosmwasm_2fwasm_2fv1_2fgenesis_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_cosmwasm_2fwasm_2fv1_2fgenesis_2eproto = {
    false,
    false,
    1199,
    descriptor_table_protodef_cosmwasm_2fwasm_2fv1_2fgenesis_2eproto,
    "cosmwasm/wasm/v1/genesis.proto",
    &descriptor_table_cosmwasm_2fwasm_2fv1_2fgenesis_2eproto_once,
    descriptor_table_cosmwasm_2fwasm_2fv1_2fgenesis_2eproto_deps,
    3,
    4,
    schemas,
    file_default_instances,
    TableStruct_cosmwasm_2fwasm_2fv1_2fgenesis_2eproto::offsets,
    file_level_metadata_cosmwasm_2fwasm_2fv1_2fgenesis_2eproto,
    file_level_enum_descriptors_cosmwasm_2fwasm_2fv1_2fgenesis_2eproto,
    file_level_service_descriptors_cosmwasm_2fwasm_2fv1_2fgenesis_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_cosmwasm_2fwasm_2fv1_2fgenesis_2eproto_getter() {
  return &descriptor_table_cosmwasm_2fwasm_2fv1_2fgenesis_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_cosmwasm_2fwasm_2fv1_2fgenesis_2eproto(&descriptor_table_cosmwasm_2fwasm_2fv1_2fgenesis_2eproto);
namespace cosmwasm {
namespace wasm {
namespace v1 {
// ===================================================================

class GenesisState::_Internal {
 public:
  using HasBits = decltype(std::declval<GenesisState>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GenesisState, _impl_._has_bits_);
  static const ::cosmwasm::wasm::v1::Params& params(const GenesisState* msg);
  static void set_has_params(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::cosmwasm::wasm::v1::Params&
GenesisState::_Internal::params(const GenesisState* msg) {
  return *msg->_impl_.params_;
}
void GenesisState::clear_params() {
  if (_impl_.params_ != nullptr) _impl_.params_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
GenesisState::GenesisState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmwasm.wasm.v1.GenesisState)
}
GenesisState::GenesisState(const GenesisState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GenesisState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.codes_){from._impl_.codes_}
    , decltype(_impl_.contracts_){from._impl_.contracts_}
    , decltype(_impl_.sequences_){from._impl_.sequences_}
    , decltype(_impl_.params_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.params_ = new ::cosmwasm::wasm::v1::Params(*from._impl_.params_);
  }
  // @@protoc_insertion_point(copy_constructor:cosmwasm.wasm.v1.GenesisState)
}

inline void GenesisState::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.codes_){arena}
    , decltype(_impl_.contracts_){arena}
    , decltype(_impl_.sequences_){arena}
    , decltype(_impl_.params_){nullptr}
  };
}

GenesisState::~GenesisState() {
  // @@protoc_insertion_point(destructor:cosmwasm.wasm.v1.GenesisState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GenesisState::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_codes()->~RepeatedPtrField();
  _internal_mutable_contracts()->~RepeatedPtrField();
  _internal_mutable_sequences()->~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.params_;
}

void GenesisState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GenesisState::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmwasm.wasm.v1.GenesisState)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_codes()->Clear();
  _internal_mutable_contracts()->Clear();
  _internal_mutable_sequences()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.params_ != nullptr);
    _impl_.params_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GenesisState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cosmwasm.wasm.v1.Params params = 1 [json_name = "params", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_params(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .cosmwasm.wasm.v1.Code codes = 2 [json_name = "codes", (.gogoproto.nullable) = false, (.gogoproto.jsontag) = "codes,omitempty", (.amino.dont_omitempty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_codes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .cosmwasm.wasm.v1.Contract contracts = 3 [json_name = "contracts", (.gogoproto.nullable) = false, (.gogoproto.jsontag) = "contracts,omitempty", (.amino.dont_omitempty) = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_contracts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .cosmwasm.wasm.v1.Sequence sequences = 4 [json_name = "sequences", (.gogoproto.nullable) = false, (.gogoproto.jsontag) = "sequences,omitempty", (.amino.dont_omitempty) = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sequences(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GenesisState::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmwasm.wasm.v1.GenesisState)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .cosmwasm.wasm.v1.Params params = 1 [json_name = "params", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::params(this),
        _Internal::params(this).GetCachedSize(), target, stream);
  }

  // repeated .cosmwasm.wasm.v1.Code codes = 2 [json_name = "codes", (.gogoproto.nullable) = false, (.gogoproto.jsontag) = "codes,omitempty", (.amino.dont_omitempty) = true];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_codes_size()); i < n; i++) {
    const auto& repfield = this->_internal_codes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .cosmwasm.wasm.v1.Contract contracts = 3 [json_name = "contracts", (.gogoproto.nullable) = false, (.gogoproto.jsontag) = "contracts,omitempty", (.amino.dont_omitempty) = true];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_contracts_size()); i < n; i++) {
    const auto& repfield = this->_internal_contracts(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .cosmwasm.wasm.v1.Sequence sequences = 4 [json_name = "sequences", (.gogoproto.nullable) = false, (.gogoproto.jsontag) = "sequences,omitempty", (.amino.dont_omitempty) = true];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_sequences_size()); i < n; i++) {
    const auto& repfield = this->_internal_sequences(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmwasm.wasm.v1.GenesisState)
  return target;
}

::size_t GenesisState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmwasm.wasm.v1.GenesisState)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cosmwasm.wasm.v1.Code codes = 2 [json_name = "codes", (.gogoproto.nullable) = false, (.gogoproto.jsontag) = "codes,omitempty", (.amino.dont_omitempty) = true];
  total_size += 1UL * this->_internal_codes_size();
  for (const auto& msg : this->_internal_codes()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .cosmwasm.wasm.v1.Contract contracts = 3 [json_name = "contracts", (.gogoproto.nullable) = false, (.gogoproto.jsontag) = "contracts,omitempty", (.amino.dont_omitempty) = true];
  total_size += 1UL * this->_internal_contracts_size();
  for (const auto& msg : this->_internal_contracts()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .cosmwasm.wasm.v1.Sequence sequences = 4 [json_name = "sequences", (.gogoproto.nullable) = false, (.gogoproto.jsontag) = "sequences,omitempty", (.amino.dont_omitempty) = true];
  total_size += 1UL * this->_internal_sequences_size();
  for (const auto& msg : this->_internal_sequences()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .cosmwasm.wasm.v1.Params params = 1 [json_name = "params", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.params_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GenesisState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GenesisState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GenesisState::GetClassData() const { return &_class_data_; }


void GenesisState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GenesisState*>(&to_msg);
  auto& from = static_cast<const GenesisState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmwasm.wasm.v1.GenesisState)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_codes()->MergeFrom(from._internal_codes());
  _this->_internal_mutable_contracts()->MergeFrom(from._internal_contracts());
  _this->_internal_mutable_sequences()->MergeFrom(from._internal_sequences());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_params()->::cosmwasm::wasm::v1::Params::MergeFrom(
        from._internal_params());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GenesisState::CopyFrom(const GenesisState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmwasm.wasm.v1.GenesisState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenesisState::IsInitialized() const {
  return true;
}

void GenesisState::InternalSwap(GenesisState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_codes()->InternalSwap(other->_internal_mutable_codes());
  _internal_mutable_contracts()->InternalSwap(other->_internal_mutable_contracts());
  _internal_mutable_sequences()->InternalSwap(other->_internal_mutable_sequences());
  swap(_impl_.params_, other->_impl_.params_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GenesisState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmwasm_2fwasm_2fv1_2fgenesis_2eproto_getter, &descriptor_table_cosmwasm_2fwasm_2fv1_2fgenesis_2eproto_once,
      file_level_metadata_cosmwasm_2fwasm_2fv1_2fgenesis_2eproto[0]);
}
// ===================================================================

class Code::_Internal {
 public:
  using HasBits = decltype(std::declval<Code>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Code, _impl_._has_bits_);
  static const ::cosmwasm::wasm::v1::CodeInfo& code_info(const Code* msg);
  static void set_has_code_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::cosmwasm::wasm::v1::CodeInfo&
Code::_Internal::code_info(const Code* msg) {
  return *msg->_impl_.code_info_;
}
void Code::clear_code_info() {
  if (_impl_.code_info_ != nullptr) _impl_.code_info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
Code::Code(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmwasm.wasm.v1.Code)
}
Code::Code(const Code& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Code* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.code_bytes_) {}

    , decltype(_impl_.code_info_){nullptr}
    , decltype(_impl_.code_id_) {}

    , decltype(_impl_.pinned_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.code_bytes_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.code_bytes_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_code_bytes().empty()) {
    _this->_impl_.code_bytes_.Set(from._internal_code_bytes(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.code_info_ = new ::cosmwasm::wasm::v1::CodeInfo(*from._impl_.code_info_);
  }
  ::memcpy(&_impl_.code_id_, &from._impl_.code_id_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.pinned_) -
    reinterpret_cast<char*>(&_impl_.code_id_)) + sizeof(_impl_.pinned_));
  // @@protoc_insertion_point(copy_constructor:cosmwasm.wasm.v1.Code)
}

inline void Code::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.code_bytes_) {}

    , decltype(_impl_.code_info_){nullptr}
    , decltype(_impl_.code_id_) { ::uint64_t{0u} }

    , decltype(_impl_.pinned_) { false }

  };
  _impl_.code_bytes_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.code_bytes_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Code::~Code() {
  // @@protoc_insertion_point(destructor:cosmwasm.wasm.v1.Code)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Code::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.code_bytes_.Destroy();
  if (this != internal_default_instance()) delete _impl_.code_info_;
}

void Code::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Code::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmwasm.wasm.v1.Code)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.code_bytes_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.code_info_ != nullptr);
    _impl_.code_info_->Clear();
  }
  ::memset(&_impl_.code_id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.pinned_) -
      reinterpret_cast<char*>(&_impl_.code_id_)) + sizeof(_impl_.pinned_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Code::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 code_id = 1 [json_name = "codeId", (.gogoproto.customname) = "CodeID"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.code_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .cosmwasm.wasm.v1.CodeInfo code_info = 2 [json_name = "codeInfo", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_code_info(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes code_bytes = 3 [json_name = "codeBytes"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_code_bytes();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bool pinned = 4 [json_name = "pinned"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _impl_.pinned_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Code::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmwasm.wasm.v1.Code)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 code_id = 1 [json_name = "codeId", (.gogoproto.customname) = "CodeID"];
  if (this->_internal_code_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_code_id(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .cosmwasm.wasm.v1.CodeInfo code_info = 2 [json_name = "codeInfo", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::code_info(this),
        _Internal::code_info(this).GetCachedSize(), target, stream);
  }

  // bytes code_bytes = 3 [json_name = "codeBytes"];
  if (!this->_internal_code_bytes().empty()) {
    const std::string& _s = this->_internal_code_bytes();
    target = stream->WriteBytesMaybeAliased(3, _s, target);
  }

  // bool pinned = 4 [json_name = "pinned"];
  if (this->_internal_pinned() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        4, this->_internal_pinned(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmwasm.wasm.v1.Code)
  return target;
}

::size_t Code::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmwasm.wasm.v1.Code)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes code_bytes = 3 [json_name = "codeBytes"];
  if (!this->_internal_code_bytes().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_code_bytes());
  }

  // .cosmwasm.wasm.v1.CodeInfo code_info = 2 [json_name = "codeInfo", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.code_info_);
  }

  // uint64 code_id = 1 [json_name = "codeId", (.gogoproto.customname) = "CodeID"];
  if (this->_internal_code_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_code_id());
  }

  // bool pinned = 4 [json_name = "pinned"];
  if (this->_internal_pinned() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Code::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Code::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Code::GetClassData() const { return &_class_data_; }


void Code::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Code*>(&to_msg);
  auto& from = static_cast<const Code&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmwasm.wasm.v1.Code)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_code_bytes().empty()) {
    _this->_internal_set_code_bytes(from._internal_code_bytes());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_code_info()->::cosmwasm::wasm::v1::CodeInfo::MergeFrom(
        from._internal_code_info());
  }
  if (from._internal_code_id() != 0) {
    _this->_internal_set_code_id(from._internal_code_id());
  }
  if (from._internal_pinned() != 0) {
    _this->_internal_set_pinned(from._internal_pinned());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Code::CopyFrom(const Code& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmwasm.wasm.v1.Code)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Code::IsInitialized() const {
  return true;
}

void Code::InternalSwap(Code* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.code_bytes_, lhs_arena,
                                       &other->_impl_.code_bytes_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Code, _impl_.pinned_)
      + sizeof(Code::_impl_.pinned_)
      - PROTOBUF_FIELD_OFFSET(Code, _impl_.code_info_)>(
          reinterpret_cast<char*>(&_impl_.code_info_),
          reinterpret_cast<char*>(&other->_impl_.code_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Code::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmwasm_2fwasm_2fv1_2fgenesis_2eproto_getter, &descriptor_table_cosmwasm_2fwasm_2fv1_2fgenesis_2eproto_once,
      file_level_metadata_cosmwasm_2fwasm_2fv1_2fgenesis_2eproto[1]);
}
// ===================================================================

class Contract::_Internal {
 public:
  using HasBits = decltype(std::declval<Contract>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Contract, _impl_._has_bits_);
  static const ::cosmwasm::wasm::v1::ContractInfo& contract_info(const Contract* msg);
  static void set_has_contract_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::cosmwasm::wasm::v1::ContractInfo&
Contract::_Internal::contract_info(const Contract* msg) {
  return *msg->_impl_.contract_info_;
}
void Contract::clear_contract_info() {
  if (_impl_.contract_info_ != nullptr) _impl_.contract_info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void Contract::clear_contract_state() {
  _internal_mutable_contract_state()->Clear();
}
void Contract::clear_contract_code_history() {
  _internal_mutable_contract_code_history()->Clear();
}
Contract::Contract(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmwasm.wasm.v1.Contract)
}
Contract::Contract(const Contract& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Contract* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.contract_state_){from._impl_.contract_state_}
    , decltype(_impl_.contract_code_history_){from._impl_.contract_code_history_}
    , decltype(_impl_.contract_address_) {}

    , decltype(_impl_.contract_info_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.contract_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.contract_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_contract_address().empty()) {
    _this->_impl_.contract_address_.Set(from._internal_contract_address(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.contract_info_ = new ::cosmwasm::wasm::v1::ContractInfo(*from._impl_.contract_info_);
  }
  // @@protoc_insertion_point(copy_constructor:cosmwasm.wasm.v1.Contract)
}

inline void Contract::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.contract_state_){arena}
    , decltype(_impl_.contract_code_history_){arena}
    , decltype(_impl_.contract_address_) {}

    , decltype(_impl_.contract_info_){nullptr}
  };
  _impl_.contract_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.contract_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Contract::~Contract() {
  // @@protoc_insertion_point(destructor:cosmwasm.wasm.v1.Contract)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Contract::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_contract_state()->~RepeatedPtrField();
  _internal_mutable_contract_code_history()->~RepeatedPtrField();
  _impl_.contract_address_.Destroy();
  if (this != internal_default_instance()) delete _impl_.contract_info_;
}

void Contract::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Contract::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmwasm.wasm.v1.Contract)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_contract_state()->Clear();
  _internal_mutable_contract_code_history()->Clear();
  _impl_.contract_address_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.contract_info_ != nullptr);
    _impl_.contract_info_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Contract::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string contract_address = 1 [json_name = "contractAddress"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_contract_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmwasm.wasm.v1.Contract.contract_address"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .cosmwasm.wasm.v1.ContractInfo contract_info = 2 [json_name = "contractInfo", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_contract_info(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .cosmwasm.wasm.v1.Model contract_state = 3 [json_name = "contractState", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_contract_state(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .cosmwasm.wasm.v1.ContractCodeHistoryEntry contract_code_history = 4 [json_name = "contractCodeHistory", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_contract_code_history(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Contract::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmwasm.wasm.v1.Contract)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string contract_address = 1 [json_name = "contractAddress"];
  if (!this->_internal_contract_address().empty()) {
    const std::string& _s = this->_internal_contract_address();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmwasm.wasm.v1.Contract.contract_address");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .cosmwasm.wasm.v1.ContractInfo contract_info = 2 [json_name = "contractInfo", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::contract_info(this),
        _Internal::contract_info(this).GetCachedSize(), target, stream);
  }

  // repeated .cosmwasm.wasm.v1.Model contract_state = 3 [json_name = "contractState", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_contract_state_size()); i < n; i++) {
    const auto& repfield = this->_internal_contract_state(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .cosmwasm.wasm.v1.ContractCodeHistoryEntry contract_code_history = 4 [json_name = "contractCodeHistory", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_contract_code_history_size()); i < n; i++) {
    const auto& repfield = this->_internal_contract_code_history(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmwasm.wasm.v1.Contract)
  return target;
}

::size_t Contract::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmwasm.wasm.v1.Contract)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cosmwasm.wasm.v1.Model contract_state = 3 [json_name = "contractState", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  total_size += 1UL * this->_internal_contract_state_size();
  for (const auto& msg : this->_internal_contract_state()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .cosmwasm.wasm.v1.ContractCodeHistoryEntry contract_code_history = 4 [json_name = "contractCodeHistory", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  total_size += 1UL * this->_internal_contract_code_history_size();
  for (const auto& msg : this->_internal_contract_code_history()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string contract_address = 1 [json_name = "contractAddress"];
  if (!this->_internal_contract_address().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_contract_address());
  }

  // .cosmwasm.wasm.v1.ContractInfo contract_info = 2 [json_name = "contractInfo", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.contract_info_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Contract::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Contract::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Contract::GetClassData() const { return &_class_data_; }


void Contract::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Contract*>(&to_msg);
  auto& from = static_cast<const Contract&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmwasm.wasm.v1.Contract)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_contract_state()->MergeFrom(from._internal_contract_state());
  _this->_internal_mutable_contract_code_history()->MergeFrom(from._internal_contract_code_history());
  if (!from._internal_contract_address().empty()) {
    _this->_internal_set_contract_address(from._internal_contract_address());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_contract_info()->::cosmwasm::wasm::v1::ContractInfo::MergeFrom(
        from._internal_contract_info());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Contract::CopyFrom(const Contract& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmwasm.wasm.v1.Contract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Contract::IsInitialized() const {
  return true;
}

void Contract::InternalSwap(Contract* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_contract_state()->InternalSwap(other->_internal_mutable_contract_state());
  _internal_mutable_contract_code_history()->InternalSwap(other->_internal_mutable_contract_code_history());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.contract_address_, lhs_arena,
                                       &other->_impl_.contract_address_, rhs_arena);
  swap(_impl_.contract_info_, other->_impl_.contract_info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Contract::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmwasm_2fwasm_2fv1_2fgenesis_2eproto_getter, &descriptor_table_cosmwasm_2fwasm_2fv1_2fgenesis_2eproto_once,
      file_level_metadata_cosmwasm_2fwasm_2fv1_2fgenesis_2eproto[2]);
}
// ===================================================================

class Sequence::_Internal {
 public:
};

Sequence::Sequence(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmwasm.wasm.v1.Sequence)
}
Sequence::Sequence(const Sequence& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Sequence* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_key_) {}

    , decltype(_impl_.value_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.id_key_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id_key().empty()) {
    _this->_impl_.id_key_.Set(from._internal_id_key(), _this->GetArenaForAllocation());
  }
  _this->_impl_.value_ = from._impl_.value_;
  // @@protoc_insertion_point(copy_constructor:cosmwasm.wasm.v1.Sequence)
}

inline void Sequence::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.id_key_) {}

    , decltype(_impl_.value_) { ::uint64_t{0u} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.id_key_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Sequence::~Sequence() {
  // @@protoc_insertion_point(destructor:cosmwasm.wasm.v1.Sequence)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Sequence::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_key_.Destroy();
}

void Sequence::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Sequence::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmwasm.wasm.v1.Sequence)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_key_.ClearToEmpty();
  _impl_.value_ = ::uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Sequence::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes id_key = 1 [json_name = "idKey", (.gogoproto.customname) = "IDKey"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 value = 2 [json_name = "value"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Sequence::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmwasm.wasm.v1.Sequence)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes id_key = 1 [json_name = "idKey", (.gogoproto.customname) = "IDKey"];
  if (!this->_internal_id_key().empty()) {
    const std::string& _s = this->_internal_id_key();
    target = stream->WriteBytesMaybeAliased(1, _s, target);
  }

  // uint64 value = 2 [json_name = "value"];
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmwasm.wasm.v1.Sequence)
  return target;
}

::size_t Sequence::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmwasm.wasm.v1.Sequence)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes id_key = 1 [json_name = "idKey", (.gogoproto.customname) = "IDKey"];
  if (!this->_internal_id_key().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_id_key());
  }

  // uint64 value = 2 [json_name = "value"];
  if (this->_internal_value() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Sequence::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Sequence::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Sequence::GetClassData() const { return &_class_data_; }


void Sequence::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Sequence*>(&to_msg);
  auto& from = static_cast<const Sequence&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmwasm.wasm.v1.Sequence)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id_key().empty()) {
    _this->_internal_set_id_key(from._internal_id_key());
  }
  if (from._internal_value() != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Sequence::CopyFrom(const Sequence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmwasm.wasm.v1.Sequence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sequence::IsInitialized() const {
  return true;
}

void Sequence::InternalSwap(Sequence* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.id_key_, lhs_arena,
                                       &other->_impl_.id_key_, rhs_arena);

  swap(_impl_.value_, other->_impl_.value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Sequence::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmwasm_2fwasm_2fv1_2fgenesis_2eproto_getter, &descriptor_table_cosmwasm_2fwasm_2fv1_2fgenesis_2eproto_once,
      file_level_metadata_cosmwasm_2fwasm_2fv1_2fgenesis_2eproto[3]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace wasm
}  // namespace cosmwasm
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cosmwasm::wasm::v1::GenesisState*
Arena::CreateMaybeMessage< ::cosmwasm::wasm::v1::GenesisState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmwasm::wasm::v1::GenesisState >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmwasm::wasm::v1::Code*
Arena::CreateMaybeMessage< ::cosmwasm::wasm::v1::Code >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmwasm::wasm::v1::Code >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmwasm::wasm::v1::Contract*
Arena::CreateMaybeMessage< ::cosmwasm::wasm::v1::Contract >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmwasm::wasm::v1::Contract >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmwasm::wasm::v1::Sequence*
Arena::CreateMaybeMessage< ::cosmwasm::wasm::v1::Sequence >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmwasm::wasm::v1::Sequence >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

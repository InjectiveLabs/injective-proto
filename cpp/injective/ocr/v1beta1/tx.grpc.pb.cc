// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: injective/ocr/v1beta1/tx.proto

#include "injective/ocr/v1beta1/tx.pb.h"
#include "injective/ocr/v1beta1/tx.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace injective {
namespace ocr {
namespace v1beta1 {

static const char* Msg_method_names[] = {
  "/injective.ocr.v1beta1.Msg/CreateFeed",
  "/injective.ocr.v1beta1.Msg/UpdateFeed",
  "/injective.ocr.v1beta1.Msg/Transmit",
  "/injective.ocr.v1beta1.Msg/FundFeedRewardPool",
  "/injective.ocr.v1beta1.Msg/WithdrawFeedRewardPool",
  "/injective.ocr.v1beta1.Msg/SetPayees",
  "/injective.ocr.v1beta1.Msg/TransferPayeeship",
  "/injective.ocr.v1beta1.Msg/AcceptPayeeship",
  "/injective.ocr.v1beta1.Msg/UpdateParams",
};

std::unique_ptr< Msg::Stub> Msg::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Msg::Stub> stub(new Msg::Stub(channel, options));
  return stub;
}

Msg::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_CreateFeed_(Msg_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateFeed_(Msg_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Transmit_(Msg_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_FundFeedRewardPool_(Msg_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_WithdrawFeedRewardPool_(Msg_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetPayees_(Msg_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_TransferPayeeship_(Msg_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AcceptPayeeship_(Msg_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateParams_(Msg_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Msg::Stub::CreateFeed(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgCreateFeed& request, ::injective::ocr::v1beta1::MsgCreateFeedResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::ocr::v1beta1::MsgCreateFeed, ::injective::ocr::v1beta1::MsgCreateFeedResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateFeed_, context, request, response);
}

void Msg::Stub::async::CreateFeed(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgCreateFeed* request, ::injective::ocr::v1beta1::MsgCreateFeedResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::ocr::v1beta1::MsgCreateFeed, ::injective::ocr::v1beta1::MsgCreateFeedResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateFeed_, context, request, response, std::move(f));
}

void Msg::Stub::async::CreateFeed(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgCreateFeed* request, ::injective::ocr::v1beta1::MsgCreateFeedResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateFeed_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::ocr::v1beta1::MsgCreateFeedResponse>* Msg::Stub::PrepareAsyncCreateFeedRaw(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgCreateFeed& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::ocr::v1beta1::MsgCreateFeedResponse, ::injective::ocr::v1beta1::MsgCreateFeed, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateFeed_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::ocr::v1beta1::MsgCreateFeedResponse>* Msg::Stub::AsyncCreateFeedRaw(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgCreateFeed& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateFeedRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Msg::Stub::UpdateFeed(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgUpdateFeed& request, ::injective::ocr::v1beta1::MsgUpdateFeedResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::ocr::v1beta1::MsgUpdateFeed, ::injective::ocr::v1beta1::MsgUpdateFeedResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateFeed_, context, request, response);
}

void Msg::Stub::async::UpdateFeed(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgUpdateFeed* request, ::injective::ocr::v1beta1::MsgUpdateFeedResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::ocr::v1beta1::MsgUpdateFeed, ::injective::ocr::v1beta1::MsgUpdateFeedResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateFeed_, context, request, response, std::move(f));
}

void Msg::Stub::async::UpdateFeed(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgUpdateFeed* request, ::injective::ocr::v1beta1::MsgUpdateFeedResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateFeed_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::ocr::v1beta1::MsgUpdateFeedResponse>* Msg::Stub::PrepareAsyncUpdateFeedRaw(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgUpdateFeed& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::ocr::v1beta1::MsgUpdateFeedResponse, ::injective::ocr::v1beta1::MsgUpdateFeed, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateFeed_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::ocr::v1beta1::MsgUpdateFeedResponse>* Msg::Stub::AsyncUpdateFeedRaw(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgUpdateFeed& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateFeedRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Msg::Stub::Transmit(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgTransmit& request, ::injective::ocr::v1beta1::MsgTransmitResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::ocr::v1beta1::MsgTransmit, ::injective::ocr::v1beta1::MsgTransmitResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Transmit_, context, request, response);
}

void Msg::Stub::async::Transmit(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgTransmit* request, ::injective::ocr::v1beta1::MsgTransmitResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::ocr::v1beta1::MsgTransmit, ::injective::ocr::v1beta1::MsgTransmitResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Transmit_, context, request, response, std::move(f));
}

void Msg::Stub::async::Transmit(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgTransmit* request, ::injective::ocr::v1beta1::MsgTransmitResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Transmit_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::ocr::v1beta1::MsgTransmitResponse>* Msg::Stub::PrepareAsyncTransmitRaw(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgTransmit& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::ocr::v1beta1::MsgTransmitResponse, ::injective::ocr::v1beta1::MsgTransmit, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Transmit_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::ocr::v1beta1::MsgTransmitResponse>* Msg::Stub::AsyncTransmitRaw(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgTransmit& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncTransmitRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Msg::Stub::FundFeedRewardPool(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgFundFeedRewardPool& request, ::injective::ocr::v1beta1::MsgFundFeedRewardPoolResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::ocr::v1beta1::MsgFundFeedRewardPool, ::injective::ocr::v1beta1::MsgFundFeedRewardPoolResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_FundFeedRewardPool_, context, request, response);
}

void Msg::Stub::async::FundFeedRewardPool(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgFundFeedRewardPool* request, ::injective::ocr::v1beta1::MsgFundFeedRewardPoolResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::ocr::v1beta1::MsgFundFeedRewardPool, ::injective::ocr::v1beta1::MsgFundFeedRewardPoolResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FundFeedRewardPool_, context, request, response, std::move(f));
}

void Msg::Stub::async::FundFeedRewardPool(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgFundFeedRewardPool* request, ::injective::ocr::v1beta1::MsgFundFeedRewardPoolResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FundFeedRewardPool_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::ocr::v1beta1::MsgFundFeedRewardPoolResponse>* Msg::Stub::PrepareAsyncFundFeedRewardPoolRaw(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgFundFeedRewardPool& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::ocr::v1beta1::MsgFundFeedRewardPoolResponse, ::injective::ocr::v1beta1::MsgFundFeedRewardPool, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_FundFeedRewardPool_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::ocr::v1beta1::MsgFundFeedRewardPoolResponse>* Msg::Stub::AsyncFundFeedRewardPoolRaw(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgFundFeedRewardPool& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncFundFeedRewardPoolRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Msg::Stub::WithdrawFeedRewardPool(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgWithdrawFeedRewardPool& request, ::injective::ocr::v1beta1::MsgWithdrawFeedRewardPoolResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::ocr::v1beta1::MsgWithdrawFeedRewardPool, ::injective::ocr::v1beta1::MsgWithdrawFeedRewardPoolResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_WithdrawFeedRewardPool_, context, request, response);
}

void Msg::Stub::async::WithdrawFeedRewardPool(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgWithdrawFeedRewardPool* request, ::injective::ocr::v1beta1::MsgWithdrawFeedRewardPoolResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::ocr::v1beta1::MsgWithdrawFeedRewardPool, ::injective::ocr::v1beta1::MsgWithdrawFeedRewardPoolResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_WithdrawFeedRewardPool_, context, request, response, std::move(f));
}

void Msg::Stub::async::WithdrawFeedRewardPool(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgWithdrawFeedRewardPool* request, ::injective::ocr::v1beta1::MsgWithdrawFeedRewardPoolResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_WithdrawFeedRewardPool_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::ocr::v1beta1::MsgWithdrawFeedRewardPoolResponse>* Msg::Stub::PrepareAsyncWithdrawFeedRewardPoolRaw(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgWithdrawFeedRewardPool& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::ocr::v1beta1::MsgWithdrawFeedRewardPoolResponse, ::injective::ocr::v1beta1::MsgWithdrawFeedRewardPool, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_WithdrawFeedRewardPool_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::ocr::v1beta1::MsgWithdrawFeedRewardPoolResponse>* Msg::Stub::AsyncWithdrawFeedRewardPoolRaw(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgWithdrawFeedRewardPool& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncWithdrawFeedRewardPoolRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Msg::Stub::SetPayees(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgSetPayees& request, ::injective::ocr::v1beta1::MsgSetPayeesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::ocr::v1beta1::MsgSetPayees, ::injective::ocr::v1beta1::MsgSetPayeesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetPayees_, context, request, response);
}

void Msg::Stub::async::SetPayees(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgSetPayees* request, ::injective::ocr::v1beta1::MsgSetPayeesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::ocr::v1beta1::MsgSetPayees, ::injective::ocr::v1beta1::MsgSetPayeesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetPayees_, context, request, response, std::move(f));
}

void Msg::Stub::async::SetPayees(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgSetPayees* request, ::injective::ocr::v1beta1::MsgSetPayeesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetPayees_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::ocr::v1beta1::MsgSetPayeesResponse>* Msg::Stub::PrepareAsyncSetPayeesRaw(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgSetPayees& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::ocr::v1beta1::MsgSetPayeesResponse, ::injective::ocr::v1beta1::MsgSetPayees, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetPayees_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::ocr::v1beta1::MsgSetPayeesResponse>* Msg::Stub::AsyncSetPayeesRaw(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgSetPayees& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetPayeesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Msg::Stub::TransferPayeeship(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgTransferPayeeship& request, ::injective::ocr::v1beta1::MsgTransferPayeeshipResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::ocr::v1beta1::MsgTransferPayeeship, ::injective::ocr::v1beta1::MsgTransferPayeeshipResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_TransferPayeeship_, context, request, response);
}

void Msg::Stub::async::TransferPayeeship(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgTransferPayeeship* request, ::injective::ocr::v1beta1::MsgTransferPayeeshipResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::ocr::v1beta1::MsgTransferPayeeship, ::injective::ocr::v1beta1::MsgTransferPayeeshipResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TransferPayeeship_, context, request, response, std::move(f));
}

void Msg::Stub::async::TransferPayeeship(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgTransferPayeeship* request, ::injective::ocr::v1beta1::MsgTransferPayeeshipResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TransferPayeeship_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::ocr::v1beta1::MsgTransferPayeeshipResponse>* Msg::Stub::PrepareAsyncTransferPayeeshipRaw(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgTransferPayeeship& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::ocr::v1beta1::MsgTransferPayeeshipResponse, ::injective::ocr::v1beta1::MsgTransferPayeeship, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_TransferPayeeship_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::ocr::v1beta1::MsgTransferPayeeshipResponse>* Msg::Stub::AsyncTransferPayeeshipRaw(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgTransferPayeeship& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncTransferPayeeshipRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Msg::Stub::AcceptPayeeship(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgAcceptPayeeship& request, ::injective::ocr::v1beta1::MsgAcceptPayeeshipResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::ocr::v1beta1::MsgAcceptPayeeship, ::injective::ocr::v1beta1::MsgAcceptPayeeshipResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AcceptPayeeship_, context, request, response);
}

void Msg::Stub::async::AcceptPayeeship(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgAcceptPayeeship* request, ::injective::ocr::v1beta1::MsgAcceptPayeeshipResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::ocr::v1beta1::MsgAcceptPayeeship, ::injective::ocr::v1beta1::MsgAcceptPayeeshipResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AcceptPayeeship_, context, request, response, std::move(f));
}

void Msg::Stub::async::AcceptPayeeship(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgAcceptPayeeship* request, ::injective::ocr::v1beta1::MsgAcceptPayeeshipResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AcceptPayeeship_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::ocr::v1beta1::MsgAcceptPayeeshipResponse>* Msg::Stub::PrepareAsyncAcceptPayeeshipRaw(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgAcceptPayeeship& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::ocr::v1beta1::MsgAcceptPayeeshipResponse, ::injective::ocr::v1beta1::MsgAcceptPayeeship, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AcceptPayeeship_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::ocr::v1beta1::MsgAcceptPayeeshipResponse>* Msg::Stub::AsyncAcceptPayeeshipRaw(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgAcceptPayeeship& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAcceptPayeeshipRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Msg::Stub::UpdateParams(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgUpdateParams& request, ::injective::ocr::v1beta1::MsgUpdateParamsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::ocr::v1beta1::MsgUpdateParams, ::injective::ocr::v1beta1::MsgUpdateParamsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateParams_, context, request, response);
}

void Msg::Stub::async::UpdateParams(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgUpdateParams* request, ::injective::ocr::v1beta1::MsgUpdateParamsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::ocr::v1beta1::MsgUpdateParams, ::injective::ocr::v1beta1::MsgUpdateParamsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateParams_, context, request, response, std::move(f));
}

void Msg::Stub::async::UpdateParams(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgUpdateParams* request, ::injective::ocr::v1beta1::MsgUpdateParamsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateParams_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::ocr::v1beta1::MsgUpdateParamsResponse>* Msg::Stub::PrepareAsyncUpdateParamsRaw(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgUpdateParams& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::ocr::v1beta1::MsgUpdateParamsResponse, ::injective::ocr::v1beta1::MsgUpdateParams, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateParams_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::ocr::v1beta1::MsgUpdateParamsResponse>* Msg::Stub::AsyncUpdateParamsRaw(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgUpdateParams& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateParamsRaw(context, request, cq);
  result->StartCall();
  return result;
}

Msg::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Msg_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Msg::Service, ::injective::ocr::v1beta1::MsgCreateFeed, ::injective::ocr::v1beta1::MsgCreateFeedResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Msg::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::ocr::v1beta1::MsgCreateFeed* req,
             ::injective::ocr::v1beta1::MsgCreateFeedResponse* resp) {
               return service->CreateFeed(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Msg_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Msg::Service, ::injective::ocr::v1beta1::MsgUpdateFeed, ::injective::ocr::v1beta1::MsgUpdateFeedResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Msg::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::ocr::v1beta1::MsgUpdateFeed* req,
             ::injective::ocr::v1beta1::MsgUpdateFeedResponse* resp) {
               return service->UpdateFeed(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Msg_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Msg::Service, ::injective::ocr::v1beta1::MsgTransmit, ::injective::ocr::v1beta1::MsgTransmitResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Msg::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::ocr::v1beta1::MsgTransmit* req,
             ::injective::ocr::v1beta1::MsgTransmitResponse* resp) {
               return service->Transmit(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Msg_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Msg::Service, ::injective::ocr::v1beta1::MsgFundFeedRewardPool, ::injective::ocr::v1beta1::MsgFundFeedRewardPoolResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Msg::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::ocr::v1beta1::MsgFundFeedRewardPool* req,
             ::injective::ocr::v1beta1::MsgFundFeedRewardPoolResponse* resp) {
               return service->FundFeedRewardPool(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Msg_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Msg::Service, ::injective::ocr::v1beta1::MsgWithdrawFeedRewardPool, ::injective::ocr::v1beta1::MsgWithdrawFeedRewardPoolResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Msg::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::ocr::v1beta1::MsgWithdrawFeedRewardPool* req,
             ::injective::ocr::v1beta1::MsgWithdrawFeedRewardPoolResponse* resp) {
               return service->WithdrawFeedRewardPool(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Msg_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Msg::Service, ::injective::ocr::v1beta1::MsgSetPayees, ::injective::ocr::v1beta1::MsgSetPayeesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Msg::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::ocr::v1beta1::MsgSetPayees* req,
             ::injective::ocr::v1beta1::MsgSetPayeesResponse* resp) {
               return service->SetPayees(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Msg_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Msg::Service, ::injective::ocr::v1beta1::MsgTransferPayeeship, ::injective::ocr::v1beta1::MsgTransferPayeeshipResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Msg::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::ocr::v1beta1::MsgTransferPayeeship* req,
             ::injective::ocr::v1beta1::MsgTransferPayeeshipResponse* resp) {
               return service->TransferPayeeship(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Msg_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Msg::Service, ::injective::ocr::v1beta1::MsgAcceptPayeeship, ::injective::ocr::v1beta1::MsgAcceptPayeeshipResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Msg::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::ocr::v1beta1::MsgAcceptPayeeship* req,
             ::injective::ocr::v1beta1::MsgAcceptPayeeshipResponse* resp) {
               return service->AcceptPayeeship(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Msg_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Msg::Service, ::injective::ocr::v1beta1::MsgUpdateParams, ::injective::ocr::v1beta1::MsgUpdateParamsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Msg::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::ocr::v1beta1::MsgUpdateParams* req,
             ::injective::ocr::v1beta1::MsgUpdateParamsResponse* resp) {
               return service->UpdateParams(ctx, req, resp);
             }, this)));
}

Msg::Service::~Service() {
}

::grpc::Status Msg::Service::CreateFeed(::grpc::ServerContext* context, const ::injective::ocr::v1beta1::MsgCreateFeed* request, ::injective::ocr::v1beta1::MsgCreateFeedResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Msg::Service::UpdateFeed(::grpc::ServerContext* context, const ::injective::ocr::v1beta1::MsgUpdateFeed* request, ::injective::ocr::v1beta1::MsgUpdateFeedResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Msg::Service::Transmit(::grpc::ServerContext* context, const ::injective::ocr::v1beta1::MsgTransmit* request, ::injective::ocr::v1beta1::MsgTransmitResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Msg::Service::FundFeedRewardPool(::grpc::ServerContext* context, const ::injective::ocr::v1beta1::MsgFundFeedRewardPool* request, ::injective::ocr::v1beta1::MsgFundFeedRewardPoolResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Msg::Service::WithdrawFeedRewardPool(::grpc::ServerContext* context, const ::injective::ocr::v1beta1::MsgWithdrawFeedRewardPool* request, ::injective::ocr::v1beta1::MsgWithdrawFeedRewardPoolResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Msg::Service::SetPayees(::grpc::ServerContext* context, const ::injective::ocr::v1beta1::MsgSetPayees* request, ::injective::ocr::v1beta1::MsgSetPayeesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Msg::Service::TransferPayeeship(::grpc::ServerContext* context, const ::injective::ocr::v1beta1::MsgTransferPayeeship* request, ::injective::ocr::v1beta1::MsgTransferPayeeshipResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Msg::Service::AcceptPayeeship(::grpc::ServerContext* context, const ::injective::ocr::v1beta1::MsgAcceptPayeeship* request, ::injective::ocr::v1beta1::MsgAcceptPayeeshipResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Msg::Service::UpdateParams(::grpc::ServerContext* context, const ::injective::ocr::v1beta1::MsgUpdateParams* request, ::injective::ocr::v1beta1::MsgUpdateParamsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace injective
}  // namespace ocr
}  // namespace v1beta1


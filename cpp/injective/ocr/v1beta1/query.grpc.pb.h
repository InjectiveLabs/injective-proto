// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: injective/ocr/v1beta1/query.proto
#ifndef GRPC_injective_2focr_2fv1beta1_2fquery_2eproto__INCLUDED
#define GRPC_injective_2focr_2fv1beta1_2fquery_2eproto__INCLUDED

#include "injective/ocr/v1beta1/query.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace injective {
namespace ocr {
namespace v1beta1 {

// Query defines the gRPC querier service for OCR module.
class Query final {
 public:
  static constexpr char const* service_full_name() {
    return "injective.ocr.v1beta1.Query";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Params(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::QueryParamsRequest& request, ::injective::ocr::v1beta1::QueryParamsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::ocr::v1beta1::QueryParamsResponse>> AsyncParams(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::QueryParamsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::ocr::v1beta1::QueryParamsResponse>>(AsyncParamsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::ocr::v1beta1::QueryParamsResponse>> PrepareAsyncParams(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::QueryParamsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::ocr::v1beta1::QueryParamsResponse>>(PrepareAsyncParamsRaw(context, request, cq));
    }
    // Retrieves the OCR FeedConfig for a given FeedId
    virtual ::grpc::Status FeedConfig(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::QueryFeedConfigRequest& request, ::injective::ocr::v1beta1::QueryFeedConfigResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::ocr::v1beta1::QueryFeedConfigResponse>> AsyncFeedConfig(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::QueryFeedConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::ocr::v1beta1::QueryFeedConfigResponse>>(AsyncFeedConfigRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::ocr::v1beta1::QueryFeedConfigResponse>> PrepareAsyncFeedConfig(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::QueryFeedConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::ocr::v1beta1::QueryFeedConfigResponse>>(PrepareAsyncFeedConfigRaw(context, request, cq));
    }
    // Retrieves the OCR FeedConfigInfo for a given FeedId
    virtual ::grpc::Status FeedConfigInfo(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::QueryFeedConfigInfoRequest& request, ::injective::ocr::v1beta1::QueryFeedConfigInfoResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::ocr::v1beta1::QueryFeedConfigInfoResponse>> AsyncFeedConfigInfo(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::QueryFeedConfigInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::ocr::v1beta1::QueryFeedConfigInfoResponse>>(AsyncFeedConfigInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::ocr::v1beta1::QueryFeedConfigInfoResponse>> PrepareAsyncFeedConfigInfo(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::QueryFeedConfigInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::ocr::v1beta1::QueryFeedConfigInfoResponse>>(PrepareAsyncFeedConfigInfoRaw(context, request, cq));
    }
    // Retrieves latest round ID and data, including median answer for that round
    virtual ::grpc::Status LatestRound(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::QueryLatestRoundRequest& request, ::injective::ocr::v1beta1::QueryLatestRoundResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::ocr::v1beta1::QueryLatestRoundResponse>> AsyncLatestRound(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::QueryLatestRoundRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::ocr::v1beta1::QueryLatestRoundResponse>>(AsyncLatestRoundRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::ocr::v1beta1::QueryLatestRoundResponse>> PrepareAsyncLatestRound(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::QueryLatestRoundRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::ocr::v1beta1::QueryLatestRoundResponse>>(PrepareAsyncLatestRoundRaw(context, request, cq));
    }
    // LatestTransmissionDetails returns details about the latest trasmission
    // recorded on chain for the given feed ID.
    virtual ::grpc::Status LatestTransmissionDetails(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::QueryLatestTransmissionDetailsRequest& request, ::injective::ocr::v1beta1::QueryLatestTransmissionDetailsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::ocr::v1beta1::QueryLatestTransmissionDetailsResponse>> AsyncLatestTransmissionDetails(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::QueryLatestTransmissionDetailsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::ocr::v1beta1::QueryLatestTransmissionDetailsResponse>>(AsyncLatestTransmissionDetailsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::ocr::v1beta1::QueryLatestTransmissionDetailsResponse>> PrepareAsyncLatestTransmissionDetails(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::QueryLatestTransmissionDetailsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::ocr::v1beta1::QueryLatestTransmissionDetailsResponse>>(PrepareAsyncLatestTransmissionDetailsRaw(context, request, cq));
    }
    // Retrieves transmitter's owed amount
    virtual ::grpc::Status OwedAmount(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::QueryOwedAmountRequest& request, ::injective::ocr::v1beta1::QueryOwedAmountResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::ocr::v1beta1::QueryOwedAmountResponse>> AsyncOwedAmount(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::QueryOwedAmountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::ocr::v1beta1::QueryOwedAmountResponse>>(AsyncOwedAmountRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::ocr::v1beta1::QueryOwedAmountResponse>> PrepareAsyncOwedAmount(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::QueryOwedAmountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::ocr::v1beta1::QueryOwedAmountResponse>>(PrepareAsyncOwedAmountRaw(context, request, cq));
    }
    // Retrieves the entire OCR module's state
    virtual ::grpc::Status OcrModuleState(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::QueryModuleStateRequest& request, ::injective::ocr::v1beta1::QueryModuleStateResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::ocr::v1beta1::QueryModuleStateResponse>> AsyncOcrModuleState(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::QueryModuleStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::ocr::v1beta1::QueryModuleStateResponse>>(AsyncOcrModuleStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::ocr::v1beta1::QueryModuleStateResponse>> PrepareAsyncOcrModuleState(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::QueryModuleStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::ocr::v1beta1::QueryModuleStateResponse>>(PrepareAsyncOcrModuleStateRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void Params(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::QueryParamsRequest* request, ::injective::ocr::v1beta1::QueryParamsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Params(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::QueryParamsRequest* request, ::injective::ocr::v1beta1::QueryParamsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Retrieves the OCR FeedConfig for a given FeedId
      virtual void FeedConfig(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::QueryFeedConfigRequest* request, ::injective::ocr::v1beta1::QueryFeedConfigResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void FeedConfig(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::QueryFeedConfigRequest* request, ::injective::ocr::v1beta1::QueryFeedConfigResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Retrieves the OCR FeedConfigInfo for a given FeedId
      virtual void FeedConfigInfo(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::QueryFeedConfigInfoRequest* request, ::injective::ocr::v1beta1::QueryFeedConfigInfoResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void FeedConfigInfo(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::QueryFeedConfigInfoRequest* request, ::injective::ocr::v1beta1::QueryFeedConfigInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Retrieves latest round ID and data, including median answer for that round
      virtual void LatestRound(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::QueryLatestRoundRequest* request, ::injective::ocr::v1beta1::QueryLatestRoundResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void LatestRound(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::QueryLatestRoundRequest* request, ::injective::ocr::v1beta1::QueryLatestRoundResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // LatestTransmissionDetails returns details about the latest trasmission
      // recorded on chain for the given feed ID.
      virtual void LatestTransmissionDetails(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::QueryLatestTransmissionDetailsRequest* request, ::injective::ocr::v1beta1::QueryLatestTransmissionDetailsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void LatestTransmissionDetails(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::QueryLatestTransmissionDetailsRequest* request, ::injective::ocr::v1beta1::QueryLatestTransmissionDetailsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Retrieves transmitter's owed amount
      virtual void OwedAmount(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::QueryOwedAmountRequest* request, ::injective::ocr::v1beta1::QueryOwedAmountResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void OwedAmount(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::QueryOwedAmountRequest* request, ::injective::ocr::v1beta1::QueryOwedAmountResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Retrieves the entire OCR module's state
      virtual void OcrModuleState(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::QueryModuleStateRequest* request, ::injective::ocr::v1beta1::QueryModuleStateResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void OcrModuleState(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::QueryModuleStateRequest* request, ::injective::ocr::v1beta1::QueryModuleStateResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::ocr::v1beta1::QueryParamsResponse>* AsyncParamsRaw(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::QueryParamsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::ocr::v1beta1::QueryParamsResponse>* PrepareAsyncParamsRaw(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::QueryParamsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::ocr::v1beta1::QueryFeedConfigResponse>* AsyncFeedConfigRaw(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::QueryFeedConfigRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::ocr::v1beta1::QueryFeedConfigResponse>* PrepareAsyncFeedConfigRaw(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::QueryFeedConfigRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::ocr::v1beta1::QueryFeedConfigInfoResponse>* AsyncFeedConfigInfoRaw(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::QueryFeedConfigInfoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::ocr::v1beta1::QueryFeedConfigInfoResponse>* PrepareAsyncFeedConfigInfoRaw(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::QueryFeedConfigInfoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::ocr::v1beta1::QueryLatestRoundResponse>* AsyncLatestRoundRaw(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::QueryLatestRoundRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::ocr::v1beta1::QueryLatestRoundResponse>* PrepareAsyncLatestRoundRaw(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::QueryLatestRoundRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::ocr::v1beta1::QueryLatestTransmissionDetailsResponse>* AsyncLatestTransmissionDetailsRaw(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::QueryLatestTransmissionDetailsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::ocr::v1beta1::QueryLatestTransmissionDetailsResponse>* PrepareAsyncLatestTransmissionDetailsRaw(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::QueryLatestTransmissionDetailsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::ocr::v1beta1::QueryOwedAmountResponse>* AsyncOwedAmountRaw(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::QueryOwedAmountRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::ocr::v1beta1::QueryOwedAmountResponse>* PrepareAsyncOwedAmountRaw(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::QueryOwedAmountRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::ocr::v1beta1::QueryModuleStateResponse>* AsyncOcrModuleStateRaw(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::QueryModuleStateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::ocr::v1beta1::QueryModuleStateResponse>* PrepareAsyncOcrModuleStateRaw(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::QueryModuleStateRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status Params(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::QueryParamsRequest& request, ::injective::ocr::v1beta1::QueryParamsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::ocr::v1beta1::QueryParamsResponse>> AsyncParams(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::QueryParamsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::ocr::v1beta1::QueryParamsResponse>>(AsyncParamsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::ocr::v1beta1::QueryParamsResponse>> PrepareAsyncParams(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::QueryParamsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::ocr::v1beta1::QueryParamsResponse>>(PrepareAsyncParamsRaw(context, request, cq));
    }
    ::grpc::Status FeedConfig(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::QueryFeedConfigRequest& request, ::injective::ocr::v1beta1::QueryFeedConfigResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::ocr::v1beta1::QueryFeedConfigResponse>> AsyncFeedConfig(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::QueryFeedConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::ocr::v1beta1::QueryFeedConfigResponse>>(AsyncFeedConfigRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::ocr::v1beta1::QueryFeedConfigResponse>> PrepareAsyncFeedConfig(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::QueryFeedConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::ocr::v1beta1::QueryFeedConfigResponse>>(PrepareAsyncFeedConfigRaw(context, request, cq));
    }
    ::grpc::Status FeedConfigInfo(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::QueryFeedConfigInfoRequest& request, ::injective::ocr::v1beta1::QueryFeedConfigInfoResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::ocr::v1beta1::QueryFeedConfigInfoResponse>> AsyncFeedConfigInfo(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::QueryFeedConfigInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::ocr::v1beta1::QueryFeedConfigInfoResponse>>(AsyncFeedConfigInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::ocr::v1beta1::QueryFeedConfigInfoResponse>> PrepareAsyncFeedConfigInfo(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::QueryFeedConfigInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::ocr::v1beta1::QueryFeedConfigInfoResponse>>(PrepareAsyncFeedConfigInfoRaw(context, request, cq));
    }
    ::grpc::Status LatestRound(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::QueryLatestRoundRequest& request, ::injective::ocr::v1beta1::QueryLatestRoundResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::ocr::v1beta1::QueryLatestRoundResponse>> AsyncLatestRound(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::QueryLatestRoundRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::ocr::v1beta1::QueryLatestRoundResponse>>(AsyncLatestRoundRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::ocr::v1beta1::QueryLatestRoundResponse>> PrepareAsyncLatestRound(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::QueryLatestRoundRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::ocr::v1beta1::QueryLatestRoundResponse>>(PrepareAsyncLatestRoundRaw(context, request, cq));
    }
    ::grpc::Status LatestTransmissionDetails(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::QueryLatestTransmissionDetailsRequest& request, ::injective::ocr::v1beta1::QueryLatestTransmissionDetailsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::ocr::v1beta1::QueryLatestTransmissionDetailsResponse>> AsyncLatestTransmissionDetails(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::QueryLatestTransmissionDetailsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::ocr::v1beta1::QueryLatestTransmissionDetailsResponse>>(AsyncLatestTransmissionDetailsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::ocr::v1beta1::QueryLatestTransmissionDetailsResponse>> PrepareAsyncLatestTransmissionDetails(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::QueryLatestTransmissionDetailsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::ocr::v1beta1::QueryLatestTransmissionDetailsResponse>>(PrepareAsyncLatestTransmissionDetailsRaw(context, request, cq));
    }
    ::grpc::Status OwedAmount(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::QueryOwedAmountRequest& request, ::injective::ocr::v1beta1::QueryOwedAmountResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::ocr::v1beta1::QueryOwedAmountResponse>> AsyncOwedAmount(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::QueryOwedAmountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::ocr::v1beta1::QueryOwedAmountResponse>>(AsyncOwedAmountRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::ocr::v1beta1::QueryOwedAmountResponse>> PrepareAsyncOwedAmount(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::QueryOwedAmountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::ocr::v1beta1::QueryOwedAmountResponse>>(PrepareAsyncOwedAmountRaw(context, request, cq));
    }
    ::grpc::Status OcrModuleState(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::QueryModuleStateRequest& request, ::injective::ocr::v1beta1::QueryModuleStateResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::ocr::v1beta1::QueryModuleStateResponse>> AsyncOcrModuleState(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::QueryModuleStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::ocr::v1beta1::QueryModuleStateResponse>>(AsyncOcrModuleStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::ocr::v1beta1::QueryModuleStateResponse>> PrepareAsyncOcrModuleState(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::QueryModuleStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::ocr::v1beta1::QueryModuleStateResponse>>(PrepareAsyncOcrModuleStateRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Params(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::QueryParamsRequest* request, ::injective::ocr::v1beta1::QueryParamsResponse* response, std::function<void(::grpc::Status)>) override;
      void Params(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::QueryParamsRequest* request, ::injective::ocr::v1beta1::QueryParamsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void FeedConfig(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::QueryFeedConfigRequest* request, ::injective::ocr::v1beta1::QueryFeedConfigResponse* response, std::function<void(::grpc::Status)>) override;
      void FeedConfig(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::QueryFeedConfigRequest* request, ::injective::ocr::v1beta1::QueryFeedConfigResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void FeedConfigInfo(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::QueryFeedConfigInfoRequest* request, ::injective::ocr::v1beta1::QueryFeedConfigInfoResponse* response, std::function<void(::grpc::Status)>) override;
      void FeedConfigInfo(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::QueryFeedConfigInfoRequest* request, ::injective::ocr::v1beta1::QueryFeedConfigInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void LatestRound(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::QueryLatestRoundRequest* request, ::injective::ocr::v1beta1::QueryLatestRoundResponse* response, std::function<void(::grpc::Status)>) override;
      void LatestRound(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::QueryLatestRoundRequest* request, ::injective::ocr::v1beta1::QueryLatestRoundResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void LatestTransmissionDetails(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::QueryLatestTransmissionDetailsRequest* request, ::injective::ocr::v1beta1::QueryLatestTransmissionDetailsResponse* response, std::function<void(::grpc::Status)>) override;
      void LatestTransmissionDetails(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::QueryLatestTransmissionDetailsRequest* request, ::injective::ocr::v1beta1::QueryLatestTransmissionDetailsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void OwedAmount(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::QueryOwedAmountRequest* request, ::injective::ocr::v1beta1::QueryOwedAmountResponse* response, std::function<void(::grpc::Status)>) override;
      void OwedAmount(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::QueryOwedAmountRequest* request, ::injective::ocr::v1beta1::QueryOwedAmountResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void OcrModuleState(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::QueryModuleStateRequest* request, ::injective::ocr::v1beta1::QueryModuleStateResponse* response, std::function<void(::grpc::Status)>) override;
      void OcrModuleState(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::QueryModuleStateRequest* request, ::injective::ocr::v1beta1::QueryModuleStateResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::injective::ocr::v1beta1::QueryParamsResponse>* AsyncParamsRaw(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::QueryParamsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::ocr::v1beta1::QueryParamsResponse>* PrepareAsyncParamsRaw(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::QueryParamsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::ocr::v1beta1::QueryFeedConfigResponse>* AsyncFeedConfigRaw(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::QueryFeedConfigRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::ocr::v1beta1::QueryFeedConfigResponse>* PrepareAsyncFeedConfigRaw(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::QueryFeedConfigRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::ocr::v1beta1::QueryFeedConfigInfoResponse>* AsyncFeedConfigInfoRaw(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::QueryFeedConfigInfoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::ocr::v1beta1::QueryFeedConfigInfoResponse>* PrepareAsyncFeedConfigInfoRaw(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::QueryFeedConfigInfoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::ocr::v1beta1::QueryLatestRoundResponse>* AsyncLatestRoundRaw(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::QueryLatestRoundRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::ocr::v1beta1::QueryLatestRoundResponse>* PrepareAsyncLatestRoundRaw(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::QueryLatestRoundRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::ocr::v1beta1::QueryLatestTransmissionDetailsResponse>* AsyncLatestTransmissionDetailsRaw(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::QueryLatestTransmissionDetailsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::ocr::v1beta1::QueryLatestTransmissionDetailsResponse>* PrepareAsyncLatestTransmissionDetailsRaw(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::QueryLatestTransmissionDetailsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::ocr::v1beta1::QueryOwedAmountResponse>* AsyncOwedAmountRaw(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::QueryOwedAmountRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::ocr::v1beta1::QueryOwedAmountResponse>* PrepareAsyncOwedAmountRaw(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::QueryOwedAmountRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::ocr::v1beta1::QueryModuleStateResponse>* AsyncOcrModuleStateRaw(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::QueryModuleStateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::ocr::v1beta1::QueryModuleStateResponse>* PrepareAsyncOcrModuleStateRaw(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::QueryModuleStateRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Params_;
    const ::grpc::internal::RpcMethod rpcmethod_FeedConfig_;
    const ::grpc::internal::RpcMethod rpcmethod_FeedConfigInfo_;
    const ::grpc::internal::RpcMethod rpcmethod_LatestRound_;
    const ::grpc::internal::RpcMethod rpcmethod_LatestTransmissionDetails_;
    const ::grpc::internal::RpcMethod rpcmethod_OwedAmount_;
    const ::grpc::internal::RpcMethod rpcmethod_OcrModuleState_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Params(::grpc::ServerContext* context, const ::injective::ocr::v1beta1::QueryParamsRequest* request, ::injective::ocr::v1beta1::QueryParamsResponse* response);
    // Retrieves the OCR FeedConfig for a given FeedId
    virtual ::grpc::Status FeedConfig(::grpc::ServerContext* context, const ::injective::ocr::v1beta1::QueryFeedConfigRequest* request, ::injective::ocr::v1beta1::QueryFeedConfigResponse* response);
    // Retrieves the OCR FeedConfigInfo for a given FeedId
    virtual ::grpc::Status FeedConfigInfo(::grpc::ServerContext* context, const ::injective::ocr::v1beta1::QueryFeedConfigInfoRequest* request, ::injective::ocr::v1beta1::QueryFeedConfigInfoResponse* response);
    // Retrieves latest round ID and data, including median answer for that round
    virtual ::grpc::Status LatestRound(::grpc::ServerContext* context, const ::injective::ocr::v1beta1::QueryLatestRoundRequest* request, ::injective::ocr::v1beta1::QueryLatestRoundResponse* response);
    // LatestTransmissionDetails returns details about the latest trasmission
    // recorded on chain for the given feed ID.
    virtual ::grpc::Status LatestTransmissionDetails(::grpc::ServerContext* context, const ::injective::ocr::v1beta1::QueryLatestTransmissionDetailsRequest* request, ::injective::ocr::v1beta1::QueryLatestTransmissionDetailsResponse* response);
    // Retrieves transmitter's owed amount
    virtual ::grpc::Status OwedAmount(::grpc::ServerContext* context, const ::injective::ocr::v1beta1::QueryOwedAmountRequest* request, ::injective::ocr::v1beta1::QueryOwedAmountResponse* response);
    // Retrieves the entire OCR module's state
    virtual ::grpc::Status OcrModuleState(::grpc::ServerContext* context, const ::injective::ocr::v1beta1::QueryModuleStateRequest* request, ::injective::ocr::v1beta1::QueryModuleStateResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Params : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Params() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Params() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Params(::grpc::ServerContext* /*context*/, const ::injective::ocr::v1beta1::QueryParamsRequest* /*request*/, ::injective::ocr::v1beta1::QueryParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestParams(::grpc::ServerContext* context, ::injective::ocr::v1beta1::QueryParamsRequest* request, ::grpc::ServerAsyncResponseWriter< ::injective::ocr::v1beta1::QueryParamsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_FeedConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_FeedConfig() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_FeedConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FeedConfig(::grpc::ServerContext* /*context*/, const ::injective::ocr::v1beta1::QueryFeedConfigRequest* /*request*/, ::injective::ocr::v1beta1::QueryFeedConfigResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFeedConfig(::grpc::ServerContext* context, ::injective::ocr::v1beta1::QueryFeedConfigRequest* request, ::grpc::ServerAsyncResponseWriter< ::injective::ocr::v1beta1::QueryFeedConfigResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_FeedConfigInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_FeedConfigInfo() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_FeedConfigInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FeedConfigInfo(::grpc::ServerContext* /*context*/, const ::injective::ocr::v1beta1::QueryFeedConfigInfoRequest* /*request*/, ::injective::ocr::v1beta1::QueryFeedConfigInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFeedConfigInfo(::grpc::ServerContext* context, ::injective::ocr::v1beta1::QueryFeedConfigInfoRequest* request, ::grpc::ServerAsyncResponseWriter< ::injective::ocr::v1beta1::QueryFeedConfigInfoResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_LatestRound : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_LatestRound() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_LatestRound() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LatestRound(::grpc::ServerContext* /*context*/, const ::injective::ocr::v1beta1::QueryLatestRoundRequest* /*request*/, ::injective::ocr::v1beta1::QueryLatestRoundResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLatestRound(::grpc::ServerContext* context, ::injective::ocr::v1beta1::QueryLatestRoundRequest* request, ::grpc::ServerAsyncResponseWriter< ::injective::ocr::v1beta1::QueryLatestRoundResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_LatestTransmissionDetails : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_LatestTransmissionDetails() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_LatestTransmissionDetails() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LatestTransmissionDetails(::grpc::ServerContext* /*context*/, const ::injective::ocr::v1beta1::QueryLatestTransmissionDetailsRequest* /*request*/, ::injective::ocr::v1beta1::QueryLatestTransmissionDetailsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLatestTransmissionDetails(::grpc::ServerContext* context, ::injective::ocr::v1beta1::QueryLatestTransmissionDetailsRequest* request, ::grpc::ServerAsyncResponseWriter< ::injective::ocr::v1beta1::QueryLatestTransmissionDetailsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_OwedAmount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_OwedAmount() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_OwedAmount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OwedAmount(::grpc::ServerContext* /*context*/, const ::injective::ocr::v1beta1::QueryOwedAmountRequest* /*request*/, ::injective::ocr::v1beta1::QueryOwedAmountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOwedAmount(::grpc::ServerContext* context, ::injective::ocr::v1beta1::QueryOwedAmountRequest* request, ::grpc::ServerAsyncResponseWriter< ::injective::ocr::v1beta1::QueryOwedAmountResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_OcrModuleState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_OcrModuleState() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_OcrModuleState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OcrModuleState(::grpc::ServerContext* /*context*/, const ::injective::ocr::v1beta1::QueryModuleStateRequest* /*request*/, ::injective::ocr::v1beta1::QueryModuleStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOcrModuleState(::grpc::ServerContext* context, ::injective::ocr::v1beta1::QueryModuleStateRequest* request, ::grpc::ServerAsyncResponseWriter< ::injective::ocr::v1beta1::QueryModuleStateResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Params<WithAsyncMethod_FeedConfig<WithAsyncMethod_FeedConfigInfo<WithAsyncMethod_LatestRound<WithAsyncMethod_LatestTransmissionDetails<WithAsyncMethod_OwedAmount<WithAsyncMethod_OcrModuleState<Service > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Params : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Params() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::injective::ocr::v1beta1::QueryParamsRequest, ::injective::ocr::v1beta1::QueryParamsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::injective::ocr::v1beta1::QueryParamsRequest* request, ::injective::ocr::v1beta1::QueryParamsResponse* response) { return this->Params(context, request, response); }));}
    void SetMessageAllocatorFor_Params(
        ::grpc::MessageAllocator< ::injective::ocr::v1beta1::QueryParamsRequest, ::injective::ocr::v1beta1::QueryParamsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::injective::ocr::v1beta1::QueryParamsRequest, ::injective::ocr::v1beta1::QueryParamsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Params() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Params(::grpc::ServerContext* /*context*/, const ::injective::ocr::v1beta1::QueryParamsRequest* /*request*/, ::injective::ocr::v1beta1::QueryParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Params(
      ::grpc::CallbackServerContext* /*context*/, const ::injective::ocr::v1beta1::QueryParamsRequest* /*request*/, ::injective::ocr::v1beta1::QueryParamsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_FeedConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_FeedConfig() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::injective::ocr::v1beta1::QueryFeedConfigRequest, ::injective::ocr::v1beta1::QueryFeedConfigResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::injective::ocr::v1beta1::QueryFeedConfigRequest* request, ::injective::ocr::v1beta1::QueryFeedConfigResponse* response) { return this->FeedConfig(context, request, response); }));}
    void SetMessageAllocatorFor_FeedConfig(
        ::grpc::MessageAllocator< ::injective::ocr::v1beta1::QueryFeedConfigRequest, ::injective::ocr::v1beta1::QueryFeedConfigResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::injective::ocr::v1beta1::QueryFeedConfigRequest, ::injective::ocr::v1beta1::QueryFeedConfigResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_FeedConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FeedConfig(::grpc::ServerContext* /*context*/, const ::injective::ocr::v1beta1::QueryFeedConfigRequest* /*request*/, ::injective::ocr::v1beta1::QueryFeedConfigResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* FeedConfig(
      ::grpc::CallbackServerContext* /*context*/, const ::injective::ocr::v1beta1::QueryFeedConfigRequest* /*request*/, ::injective::ocr::v1beta1::QueryFeedConfigResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_FeedConfigInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_FeedConfigInfo() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::injective::ocr::v1beta1::QueryFeedConfigInfoRequest, ::injective::ocr::v1beta1::QueryFeedConfigInfoResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::injective::ocr::v1beta1::QueryFeedConfigInfoRequest* request, ::injective::ocr::v1beta1::QueryFeedConfigInfoResponse* response) { return this->FeedConfigInfo(context, request, response); }));}
    void SetMessageAllocatorFor_FeedConfigInfo(
        ::grpc::MessageAllocator< ::injective::ocr::v1beta1::QueryFeedConfigInfoRequest, ::injective::ocr::v1beta1::QueryFeedConfigInfoResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::injective::ocr::v1beta1::QueryFeedConfigInfoRequest, ::injective::ocr::v1beta1::QueryFeedConfigInfoResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_FeedConfigInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FeedConfigInfo(::grpc::ServerContext* /*context*/, const ::injective::ocr::v1beta1::QueryFeedConfigInfoRequest* /*request*/, ::injective::ocr::v1beta1::QueryFeedConfigInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* FeedConfigInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::injective::ocr::v1beta1::QueryFeedConfigInfoRequest* /*request*/, ::injective::ocr::v1beta1::QueryFeedConfigInfoResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_LatestRound : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_LatestRound() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::injective::ocr::v1beta1::QueryLatestRoundRequest, ::injective::ocr::v1beta1::QueryLatestRoundResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::injective::ocr::v1beta1::QueryLatestRoundRequest* request, ::injective::ocr::v1beta1::QueryLatestRoundResponse* response) { return this->LatestRound(context, request, response); }));}
    void SetMessageAllocatorFor_LatestRound(
        ::grpc::MessageAllocator< ::injective::ocr::v1beta1::QueryLatestRoundRequest, ::injective::ocr::v1beta1::QueryLatestRoundResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::injective::ocr::v1beta1::QueryLatestRoundRequest, ::injective::ocr::v1beta1::QueryLatestRoundResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_LatestRound() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LatestRound(::grpc::ServerContext* /*context*/, const ::injective::ocr::v1beta1::QueryLatestRoundRequest* /*request*/, ::injective::ocr::v1beta1::QueryLatestRoundResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* LatestRound(
      ::grpc::CallbackServerContext* /*context*/, const ::injective::ocr::v1beta1::QueryLatestRoundRequest* /*request*/, ::injective::ocr::v1beta1::QueryLatestRoundResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_LatestTransmissionDetails : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_LatestTransmissionDetails() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::injective::ocr::v1beta1::QueryLatestTransmissionDetailsRequest, ::injective::ocr::v1beta1::QueryLatestTransmissionDetailsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::injective::ocr::v1beta1::QueryLatestTransmissionDetailsRequest* request, ::injective::ocr::v1beta1::QueryLatestTransmissionDetailsResponse* response) { return this->LatestTransmissionDetails(context, request, response); }));}
    void SetMessageAllocatorFor_LatestTransmissionDetails(
        ::grpc::MessageAllocator< ::injective::ocr::v1beta1::QueryLatestTransmissionDetailsRequest, ::injective::ocr::v1beta1::QueryLatestTransmissionDetailsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::injective::ocr::v1beta1::QueryLatestTransmissionDetailsRequest, ::injective::ocr::v1beta1::QueryLatestTransmissionDetailsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_LatestTransmissionDetails() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LatestTransmissionDetails(::grpc::ServerContext* /*context*/, const ::injective::ocr::v1beta1::QueryLatestTransmissionDetailsRequest* /*request*/, ::injective::ocr::v1beta1::QueryLatestTransmissionDetailsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* LatestTransmissionDetails(
      ::grpc::CallbackServerContext* /*context*/, const ::injective::ocr::v1beta1::QueryLatestTransmissionDetailsRequest* /*request*/, ::injective::ocr::v1beta1::QueryLatestTransmissionDetailsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_OwedAmount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_OwedAmount() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::injective::ocr::v1beta1::QueryOwedAmountRequest, ::injective::ocr::v1beta1::QueryOwedAmountResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::injective::ocr::v1beta1::QueryOwedAmountRequest* request, ::injective::ocr::v1beta1::QueryOwedAmountResponse* response) { return this->OwedAmount(context, request, response); }));}
    void SetMessageAllocatorFor_OwedAmount(
        ::grpc::MessageAllocator< ::injective::ocr::v1beta1::QueryOwedAmountRequest, ::injective::ocr::v1beta1::QueryOwedAmountResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::injective::ocr::v1beta1::QueryOwedAmountRequest, ::injective::ocr::v1beta1::QueryOwedAmountResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_OwedAmount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OwedAmount(::grpc::ServerContext* /*context*/, const ::injective::ocr::v1beta1::QueryOwedAmountRequest* /*request*/, ::injective::ocr::v1beta1::QueryOwedAmountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* OwedAmount(
      ::grpc::CallbackServerContext* /*context*/, const ::injective::ocr::v1beta1::QueryOwedAmountRequest* /*request*/, ::injective::ocr::v1beta1::QueryOwedAmountResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_OcrModuleState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_OcrModuleState() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::injective::ocr::v1beta1::QueryModuleStateRequest, ::injective::ocr::v1beta1::QueryModuleStateResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::injective::ocr::v1beta1::QueryModuleStateRequest* request, ::injective::ocr::v1beta1::QueryModuleStateResponse* response) { return this->OcrModuleState(context, request, response); }));}
    void SetMessageAllocatorFor_OcrModuleState(
        ::grpc::MessageAllocator< ::injective::ocr::v1beta1::QueryModuleStateRequest, ::injective::ocr::v1beta1::QueryModuleStateResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::injective::ocr::v1beta1::QueryModuleStateRequest, ::injective::ocr::v1beta1::QueryModuleStateResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_OcrModuleState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OcrModuleState(::grpc::ServerContext* /*context*/, const ::injective::ocr::v1beta1::QueryModuleStateRequest* /*request*/, ::injective::ocr::v1beta1::QueryModuleStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* OcrModuleState(
      ::grpc::CallbackServerContext* /*context*/, const ::injective::ocr::v1beta1::QueryModuleStateRequest* /*request*/, ::injective::ocr::v1beta1::QueryModuleStateResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Params<WithCallbackMethod_FeedConfig<WithCallbackMethod_FeedConfigInfo<WithCallbackMethod_LatestRound<WithCallbackMethod_LatestTransmissionDetails<WithCallbackMethod_OwedAmount<WithCallbackMethod_OcrModuleState<Service > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Params : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Params() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Params() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Params(::grpc::ServerContext* /*context*/, const ::injective::ocr::v1beta1::QueryParamsRequest* /*request*/, ::injective::ocr::v1beta1::QueryParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_FeedConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_FeedConfig() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_FeedConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FeedConfig(::grpc::ServerContext* /*context*/, const ::injective::ocr::v1beta1::QueryFeedConfigRequest* /*request*/, ::injective::ocr::v1beta1::QueryFeedConfigResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_FeedConfigInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_FeedConfigInfo() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_FeedConfigInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FeedConfigInfo(::grpc::ServerContext* /*context*/, const ::injective::ocr::v1beta1::QueryFeedConfigInfoRequest* /*request*/, ::injective::ocr::v1beta1::QueryFeedConfigInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_LatestRound : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_LatestRound() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_LatestRound() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LatestRound(::grpc::ServerContext* /*context*/, const ::injective::ocr::v1beta1::QueryLatestRoundRequest* /*request*/, ::injective::ocr::v1beta1::QueryLatestRoundResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_LatestTransmissionDetails : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_LatestTransmissionDetails() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_LatestTransmissionDetails() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LatestTransmissionDetails(::grpc::ServerContext* /*context*/, const ::injective::ocr::v1beta1::QueryLatestTransmissionDetailsRequest* /*request*/, ::injective::ocr::v1beta1::QueryLatestTransmissionDetailsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_OwedAmount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_OwedAmount() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_OwedAmount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OwedAmount(::grpc::ServerContext* /*context*/, const ::injective::ocr::v1beta1::QueryOwedAmountRequest* /*request*/, ::injective::ocr::v1beta1::QueryOwedAmountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_OcrModuleState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_OcrModuleState() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_OcrModuleState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OcrModuleState(::grpc::ServerContext* /*context*/, const ::injective::ocr::v1beta1::QueryModuleStateRequest* /*request*/, ::injective::ocr::v1beta1::QueryModuleStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Params : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Params() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Params() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Params(::grpc::ServerContext* /*context*/, const ::injective::ocr::v1beta1::QueryParamsRequest* /*request*/, ::injective::ocr::v1beta1::QueryParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestParams(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_FeedConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_FeedConfig() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_FeedConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FeedConfig(::grpc::ServerContext* /*context*/, const ::injective::ocr::v1beta1::QueryFeedConfigRequest* /*request*/, ::injective::ocr::v1beta1::QueryFeedConfigResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFeedConfig(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_FeedConfigInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_FeedConfigInfo() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_FeedConfigInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FeedConfigInfo(::grpc::ServerContext* /*context*/, const ::injective::ocr::v1beta1::QueryFeedConfigInfoRequest* /*request*/, ::injective::ocr::v1beta1::QueryFeedConfigInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFeedConfigInfo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_LatestRound : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_LatestRound() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_LatestRound() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LatestRound(::grpc::ServerContext* /*context*/, const ::injective::ocr::v1beta1::QueryLatestRoundRequest* /*request*/, ::injective::ocr::v1beta1::QueryLatestRoundResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLatestRound(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_LatestTransmissionDetails : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_LatestTransmissionDetails() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_LatestTransmissionDetails() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LatestTransmissionDetails(::grpc::ServerContext* /*context*/, const ::injective::ocr::v1beta1::QueryLatestTransmissionDetailsRequest* /*request*/, ::injective::ocr::v1beta1::QueryLatestTransmissionDetailsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLatestTransmissionDetails(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_OwedAmount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_OwedAmount() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_OwedAmount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OwedAmount(::grpc::ServerContext* /*context*/, const ::injective::ocr::v1beta1::QueryOwedAmountRequest* /*request*/, ::injective::ocr::v1beta1::QueryOwedAmountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOwedAmount(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_OcrModuleState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_OcrModuleState() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_OcrModuleState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OcrModuleState(::grpc::ServerContext* /*context*/, const ::injective::ocr::v1beta1::QueryModuleStateRequest* /*request*/, ::injective::ocr::v1beta1::QueryModuleStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOcrModuleState(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Params : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Params() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Params(context, request, response); }));
    }
    ~WithRawCallbackMethod_Params() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Params(::grpc::ServerContext* /*context*/, const ::injective::ocr::v1beta1::QueryParamsRequest* /*request*/, ::injective::ocr::v1beta1::QueryParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Params(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_FeedConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_FeedConfig() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->FeedConfig(context, request, response); }));
    }
    ~WithRawCallbackMethod_FeedConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FeedConfig(::grpc::ServerContext* /*context*/, const ::injective::ocr::v1beta1::QueryFeedConfigRequest* /*request*/, ::injective::ocr::v1beta1::QueryFeedConfigResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* FeedConfig(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_FeedConfigInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_FeedConfigInfo() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->FeedConfigInfo(context, request, response); }));
    }
    ~WithRawCallbackMethod_FeedConfigInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FeedConfigInfo(::grpc::ServerContext* /*context*/, const ::injective::ocr::v1beta1::QueryFeedConfigInfoRequest* /*request*/, ::injective::ocr::v1beta1::QueryFeedConfigInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* FeedConfigInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_LatestRound : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_LatestRound() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->LatestRound(context, request, response); }));
    }
    ~WithRawCallbackMethod_LatestRound() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LatestRound(::grpc::ServerContext* /*context*/, const ::injective::ocr::v1beta1::QueryLatestRoundRequest* /*request*/, ::injective::ocr::v1beta1::QueryLatestRoundResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* LatestRound(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_LatestTransmissionDetails : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_LatestTransmissionDetails() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->LatestTransmissionDetails(context, request, response); }));
    }
    ~WithRawCallbackMethod_LatestTransmissionDetails() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LatestTransmissionDetails(::grpc::ServerContext* /*context*/, const ::injective::ocr::v1beta1::QueryLatestTransmissionDetailsRequest* /*request*/, ::injective::ocr::v1beta1::QueryLatestTransmissionDetailsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* LatestTransmissionDetails(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_OwedAmount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_OwedAmount() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->OwedAmount(context, request, response); }));
    }
    ~WithRawCallbackMethod_OwedAmount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OwedAmount(::grpc::ServerContext* /*context*/, const ::injective::ocr::v1beta1::QueryOwedAmountRequest* /*request*/, ::injective::ocr::v1beta1::QueryOwedAmountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* OwedAmount(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_OcrModuleState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_OcrModuleState() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->OcrModuleState(context, request, response); }));
    }
    ~WithRawCallbackMethod_OcrModuleState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OcrModuleState(::grpc::ServerContext* /*context*/, const ::injective::ocr::v1beta1::QueryModuleStateRequest* /*request*/, ::injective::ocr::v1beta1::QueryModuleStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* OcrModuleState(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Params : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Params() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::injective::ocr::v1beta1::QueryParamsRequest, ::injective::ocr::v1beta1::QueryParamsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::injective::ocr::v1beta1::QueryParamsRequest, ::injective::ocr::v1beta1::QueryParamsResponse>* streamer) {
                       return this->StreamedParams(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Params() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Params(::grpc::ServerContext* /*context*/, const ::injective::ocr::v1beta1::QueryParamsRequest* /*request*/, ::injective::ocr::v1beta1::QueryParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedParams(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::injective::ocr::v1beta1::QueryParamsRequest,::injective::ocr::v1beta1::QueryParamsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_FeedConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_FeedConfig() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::injective::ocr::v1beta1::QueryFeedConfigRequest, ::injective::ocr::v1beta1::QueryFeedConfigResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::injective::ocr::v1beta1::QueryFeedConfigRequest, ::injective::ocr::v1beta1::QueryFeedConfigResponse>* streamer) {
                       return this->StreamedFeedConfig(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_FeedConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status FeedConfig(::grpc::ServerContext* /*context*/, const ::injective::ocr::v1beta1::QueryFeedConfigRequest* /*request*/, ::injective::ocr::v1beta1::QueryFeedConfigResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedFeedConfig(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::injective::ocr::v1beta1::QueryFeedConfigRequest,::injective::ocr::v1beta1::QueryFeedConfigResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_FeedConfigInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_FeedConfigInfo() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::injective::ocr::v1beta1::QueryFeedConfigInfoRequest, ::injective::ocr::v1beta1::QueryFeedConfigInfoResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::injective::ocr::v1beta1::QueryFeedConfigInfoRequest, ::injective::ocr::v1beta1::QueryFeedConfigInfoResponse>* streamer) {
                       return this->StreamedFeedConfigInfo(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_FeedConfigInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status FeedConfigInfo(::grpc::ServerContext* /*context*/, const ::injective::ocr::v1beta1::QueryFeedConfigInfoRequest* /*request*/, ::injective::ocr::v1beta1::QueryFeedConfigInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedFeedConfigInfo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::injective::ocr::v1beta1::QueryFeedConfigInfoRequest,::injective::ocr::v1beta1::QueryFeedConfigInfoResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_LatestRound : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_LatestRound() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::injective::ocr::v1beta1::QueryLatestRoundRequest, ::injective::ocr::v1beta1::QueryLatestRoundResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::injective::ocr::v1beta1::QueryLatestRoundRequest, ::injective::ocr::v1beta1::QueryLatestRoundResponse>* streamer) {
                       return this->StreamedLatestRound(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_LatestRound() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status LatestRound(::grpc::ServerContext* /*context*/, const ::injective::ocr::v1beta1::QueryLatestRoundRequest* /*request*/, ::injective::ocr::v1beta1::QueryLatestRoundResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedLatestRound(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::injective::ocr::v1beta1::QueryLatestRoundRequest,::injective::ocr::v1beta1::QueryLatestRoundResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_LatestTransmissionDetails : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_LatestTransmissionDetails() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::injective::ocr::v1beta1::QueryLatestTransmissionDetailsRequest, ::injective::ocr::v1beta1::QueryLatestTransmissionDetailsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::injective::ocr::v1beta1::QueryLatestTransmissionDetailsRequest, ::injective::ocr::v1beta1::QueryLatestTransmissionDetailsResponse>* streamer) {
                       return this->StreamedLatestTransmissionDetails(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_LatestTransmissionDetails() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status LatestTransmissionDetails(::grpc::ServerContext* /*context*/, const ::injective::ocr::v1beta1::QueryLatestTransmissionDetailsRequest* /*request*/, ::injective::ocr::v1beta1::QueryLatestTransmissionDetailsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedLatestTransmissionDetails(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::injective::ocr::v1beta1::QueryLatestTransmissionDetailsRequest,::injective::ocr::v1beta1::QueryLatestTransmissionDetailsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_OwedAmount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_OwedAmount() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::injective::ocr::v1beta1::QueryOwedAmountRequest, ::injective::ocr::v1beta1::QueryOwedAmountResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::injective::ocr::v1beta1::QueryOwedAmountRequest, ::injective::ocr::v1beta1::QueryOwedAmountResponse>* streamer) {
                       return this->StreamedOwedAmount(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_OwedAmount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status OwedAmount(::grpc::ServerContext* /*context*/, const ::injective::ocr::v1beta1::QueryOwedAmountRequest* /*request*/, ::injective::ocr::v1beta1::QueryOwedAmountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedOwedAmount(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::injective::ocr::v1beta1::QueryOwedAmountRequest,::injective::ocr::v1beta1::QueryOwedAmountResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_OcrModuleState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_OcrModuleState() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::injective::ocr::v1beta1::QueryModuleStateRequest, ::injective::ocr::v1beta1::QueryModuleStateResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::injective::ocr::v1beta1::QueryModuleStateRequest, ::injective::ocr::v1beta1::QueryModuleStateResponse>* streamer) {
                       return this->StreamedOcrModuleState(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_OcrModuleState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status OcrModuleState(::grpc::ServerContext* /*context*/, const ::injective::ocr::v1beta1::QueryModuleStateRequest* /*request*/, ::injective::ocr::v1beta1::QueryModuleStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedOcrModuleState(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::injective::ocr::v1beta1::QueryModuleStateRequest,::injective::ocr::v1beta1::QueryModuleStateResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Params<WithStreamedUnaryMethod_FeedConfig<WithStreamedUnaryMethod_FeedConfigInfo<WithStreamedUnaryMethod_LatestRound<WithStreamedUnaryMethod_LatestTransmissionDetails<WithStreamedUnaryMethod_OwedAmount<WithStreamedUnaryMethod_OcrModuleState<Service > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Params<WithStreamedUnaryMethod_FeedConfig<WithStreamedUnaryMethod_FeedConfigInfo<WithStreamedUnaryMethod_LatestRound<WithStreamedUnaryMethod_LatestTransmissionDetails<WithStreamedUnaryMethod_OwedAmount<WithStreamedUnaryMethod_OcrModuleState<Service > > > > > > > StreamedService;
};

}  // namespace v1beta1
}  // namespace ocr
}  // namespace injective


#endif  // GRPC_injective_2focr_2fv1beta1_2fquery_2eproto__INCLUDED

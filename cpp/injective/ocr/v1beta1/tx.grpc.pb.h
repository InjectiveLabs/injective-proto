// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: injective/ocr/v1beta1/tx.proto
#ifndef GRPC_injective_2focr_2fv1beta1_2ftx_2eproto__INCLUDED
#define GRPC_injective_2focr_2fv1beta1_2ftx_2eproto__INCLUDED

#include "injective/ocr/v1beta1/tx.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace injective {
namespace ocr {
namespace v1beta1 {

// Msg defines the OCR Msg service.
class Msg final {
 public:
  static constexpr char const* service_full_name() {
    return "injective.ocr.v1beta1.Msg";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // CreateFeed defines a method for creating feed by module admin
    virtual ::grpc::Status CreateFeed(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgCreateFeed& request, ::injective::ocr::v1beta1::MsgCreateFeedResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::ocr::v1beta1::MsgCreateFeedResponse>> AsyncCreateFeed(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgCreateFeed& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::ocr::v1beta1::MsgCreateFeedResponse>>(AsyncCreateFeedRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::ocr::v1beta1::MsgCreateFeedResponse>> PrepareAsyncCreateFeed(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgCreateFeed& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::ocr::v1beta1::MsgCreateFeedResponse>>(PrepareAsyncCreateFeedRaw(context, request, cq));
    }
    // CreateFeed defines a method for creating feed by feed admin or feed billing
    // admin
    virtual ::grpc::Status UpdateFeed(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgUpdateFeed& request, ::injective::ocr::v1beta1::MsgUpdateFeedResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::ocr::v1beta1::MsgUpdateFeedResponse>> AsyncUpdateFeed(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgUpdateFeed& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::ocr::v1beta1::MsgUpdateFeedResponse>>(AsyncUpdateFeedRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::ocr::v1beta1::MsgUpdateFeedResponse>> PrepareAsyncUpdateFeed(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgUpdateFeed& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::ocr::v1beta1::MsgUpdateFeedResponse>>(PrepareAsyncUpdateFeedRaw(context, request, cq));
    }
    // Transmit defines a method for transmitting the feed info by transmitter
    virtual ::grpc::Status Transmit(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgTransmit& request, ::injective::ocr::v1beta1::MsgTransmitResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::ocr::v1beta1::MsgTransmitResponse>> AsyncTransmit(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgTransmit& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::ocr::v1beta1::MsgTransmitResponse>>(AsyncTransmitRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::ocr::v1beta1::MsgTransmitResponse>> PrepareAsyncTransmit(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgTransmit& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::ocr::v1beta1::MsgTransmitResponse>>(PrepareAsyncTransmitRaw(context, request, cq));
    }
    // FundFeedRewardPool defines a method to put funds into feed reward pool
    virtual ::grpc::Status FundFeedRewardPool(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgFundFeedRewardPool& request, ::injective::ocr::v1beta1::MsgFundFeedRewardPoolResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::ocr::v1beta1::MsgFundFeedRewardPoolResponse>> AsyncFundFeedRewardPool(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgFundFeedRewardPool& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::ocr::v1beta1::MsgFundFeedRewardPoolResponse>>(AsyncFundFeedRewardPoolRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::ocr::v1beta1::MsgFundFeedRewardPoolResponse>> PrepareAsyncFundFeedRewardPool(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgFundFeedRewardPool& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::ocr::v1beta1::MsgFundFeedRewardPoolResponse>>(PrepareAsyncFundFeedRewardPoolRaw(context, request, cq));
    }
    // WithdrawFeedRewardPool defines a method to witdhraw feed reward by feed
    // admin or billing admin
    virtual ::grpc::Status WithdrawFeedRewardPool(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgWithdrawFeedRewardPool& request, ::injective::ocr::v1beta1::MsgWithdrawFeedRewardPoolResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::ocr::v1beta1::MsgWithdrawFeedRewardPoolResponse>> AsyncWithdrawFeedRewardPool(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgWithdrawFeedRewardPool& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::ocr::v1beta1::MsgWithdrawFeedRewardPoolResponse>>(AsyncWithdrawFeedRewardPoolRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::ocr::v1beta1::MsgWithdrawFeedRewardPoolResponse>> PrepareAsyncWithdrawFeedRewardPool(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgWithdrawFeedRewardPool& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::ocr::v1beta1::MsgWithdrawFeedRewardPoolResponse>>(PrepareAsyncWithdrawFeedRewardPoolRaw(context, request, cq));
    }
    // SetPayees defines a method to set payees for transmitters (batch action)
    virtual ::grpc::Status SetPayees(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgSetPayees& request, ::injective::ocr::v1beta1::MsgSetPayeesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::ocr::v1beta1::MsgSetPayeesResponse>> AsyncSetPayees(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgSetPayees& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::ocr::v1beta1::MsgSetPayeesResponse>>(AsyncSetPayeesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::ocr::v1beta1::MsgSetPayeesResponse>> PrepareAsyncSetPayees(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgSetPayees& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::ocr::v1beta1::MsgSetPayeesResponse>>(PrepareAsyncSetPayeesRaw(context, request, cq));
    }
    // TransferPayeeship defines a method for a payee to transfer reward receive
    // ownership
    virtual ::grpc::Status TransferPayeeship(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgTransferPayeeship& request, ::injective::ocr::v1beta1::MsgTransferPayeeshipResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::ocr::v1beta1::MsgTransferPayeeshipResponse>> AsyncTransferPayeeship(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgTransferPayeeship& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::ocr::v1beta1::MsgTransferPayeeshipResponse>>(AsyncTransferPayeeshipRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::ocr::v1beta1::MsgTransferPayeeshipResponse>> PrepareAsyncTransferPayeeship(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgTransferPayeeship& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::ocr::v1beta1::MsgTransferPayeeshipResponse>>(PrepareAsyncTransferPayeeshipRaw(context, request, cq));
    }
    // AcceptPayeeship defines a method for a new payee to accept reward receive
    // ownership
    virtual ::grpc::Status AcceptPayeeship(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgAcceptPayeeship& request, ::injective::ocr::v1beta1::MsgAcceptPayeeshipResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::ocr::v1beta1::MsgAcceptPayeeshipResponse>> AsyncAcceptPayeeship(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgAcceptPayeeship& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::ocr::v1beta1::MsgAcceptPayeeshipResponse>>(AsyncAcceptPayeeshipRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::ocr::v1beta1::MsgAcceptPayeeshipResponse>> PrepareAsyncAcceptPayeeship(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgAcceptPayeeship& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::ocr::v1beta1::MsgAcceptPayeeshipResponse>>(PrepareAsyncAcceptPayeeshipRaw(context, request, cq));
    }
    virtual ::grpc::Status UpdateParams(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgUpdateParams& request, ::injective::ocr::v1beta1::MsgUpdateParamsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::ocr::v1beta1::MsgUpdateParamsResponse>> AsyncUpdateParams(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgUpdateParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::ocr::v1beta1::MsgUpdateParamsResponse>>(AsyncUpdateParamsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::ocr::v1beta1::MsgUpdateParamsResponse>> PrepareAsyncUpdateParams(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgUpdateParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::ocr::v1beta1::MsgUpdateParamsResponse>>(PrepareAsyncUpdateParamsRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // CreateFeed defines a method for creating feed by module admin
      virtual void CreateFeed(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgCreateFeed* request, ::injective::ocr::v1beta1::MsgCreateFeedResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateFeed(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgCreateFeed* request, ::injective::ocr::v1beta1::MsgCreateFeedResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // CreateFeed defines a method for creating feed by feed admin or feed billing
      // admin
      virtual void UpdateFeed(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgUpdateFeed* request, ::injective::ocr::v1beta1::MsgUpdateFeedResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateFeed(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgUpdateFeed* request, ::injective::ocr::v1beta1::MsgUpdateFeedResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Transmit defines a method for transmitting the feed info by transmitter
      virtual void Transmit(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgTransmit* request, ::injective::ocr::v1beta1::MsgTransmitResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Transmit(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgTransmit* request, ::injective::ocr::v1beta1::MsgTransmitResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // FundFeedRewardPool defines a method to put funds into feed reward pool
      virtual void FundFeedRewardPool(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgFundFeedRewardPool* request, ::injective::ocr::v1beta1::MsgFundFeedRewardPoolResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void FundFeedRewardPool(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgFundFeedRewardPool* request, ::injective::ocr::v1beta1::MsgFundFeedRewardPoolResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // WithdrawFeedRewardPool defines a method to witdhraw feed reward by feed
      // admin or billing admin
      virtual void WithdrawFeedRewardPool(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgWithdrawFeedRewardPool* request, ::injective::ocr::v1beta1::MsgWithdrawFeedRewardPoolResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void WithdrawFeedRewardPool(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgWithdrawFeedRewardPool* request, ::injective::ocr::v1beta1::MsgWithdrawFeedRewardPoolResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // SetPayees defines a method to set payees for transmitters (batch action)
      virtual void SetPayees(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgSetPayees* request, ::injective::ocr::v1beta1::MsgSetPayeesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetPayees(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgSetPayees* request, ::injective::ocr::v1beta1::MsgSetPayeesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // TransferPayeeship defines a method for a payee to transfer reward receive
      // ownership
      virtual void TransferPayeeship(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgTransferPayeeship* request, ::injective::ocr::v1beta1::MsgTransferPayeeshipResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void TransferPayeeship(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgTransferPayeeship* request, ::injective::ocr::v1beta1::MsgTransferPayeeshipResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // AcceptPayeeship defines a method for a new payee to accept reward receive
      // ownership
      virtual void AcceptPayeeship(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgAcceptPayeeship* request, ::injective::ocr::v1beta1::MsgAcceptPayeeshipResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AcceptPayeeship(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgAcceptPayeeship* request, ::injective::ocr::v1beta1::MsgAcceptPayeeshipResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void UpdateParams(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgUpdateParams* request, ::injective::ocr::v1beta1::MsgUpdateParamsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateParams(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgUpdateParams* request, ::injective::ocr::v1beta1::MsgUpdateParamsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::ocr::v1beta1::MsgCreateFeedResponse>* AsyncCreateFeedRaw(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgCreateFeed& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::ocr::v1beta1::MsgCreateFeedResponse>* PrepareAsyncCreateFeedRaw(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgCreateFeed& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::ocr::v1beta1::MsgUpdateFeedResponse>* AsyncUpdateFeedRaw(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgUpdateFeed& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::ocr::v1beta1::MsgUpdateFeedResponse>* PrepareAsyncUpdateFeedRaw(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgUpdateFeed& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::ocr::v1beta1::MsgTransmitResponse>* AsyncTransmitRaw(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgTransmit& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::ocr::v1beta1::MsgTransmitResponse>* PrepareAsyncTransmitRaw(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgTransmit& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::ocr::v1beta1::MsgFundFeedRewardPoolResponse>* AsyncFundFeedRewardPoolRaw(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgFundFeedRewardPool& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::ocr::v1beta1::MsgFundFeedRewardPoolResponse>* PrepareAsyncFundFeedRewardPoolRaw(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgFundFeedRewardPool& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::ocr::v1beta1::MsgWithdrawFeedRewardPoolResponse>* AsyncWithdrawFeedRewardPoolRaw(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgWithdrawFeedRewardPool& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::ocr::v1beta1::MsgWithdrawFeedRewardPoolResponse>* PrepareAsyncWithdrawFeedRewardPoolRaw(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgWithdrawFeedRewardPool& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::ocr::v1beta1::MsgSetPayeesResponse>* AsyncSetPayeesRaw(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgSetPayees& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::ocr::v1beta1::MsgSetPayeesResponse>* PrepareAsyncSetPayeesRaw(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgSetPayees& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::ocr::v1beta1::MsgTransferPayeeshipResponse>* AsyncTransferPayeeshipRaw(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgTransferPayeeship& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::ocr::v1beta1::MsgTransferPayeeshipResponse>* PrepareAsyncTransferPayeeshipRaw(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgTransferPayeeship& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::ocr::v1beta1::MsgAcceptPayeeshipResponse>* AsyncAcceptPayeeshipRaw(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgAcceptPayeeship& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::ocr::v1beta1::MsgAcceptPayeeshipResponse>* PrepareAsyncAcceptPayeeshipRaw(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgAcceptPayeeship& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::ocr::v1beta1::MsgUpdateParamsResponse>* AsyncUpdateParamsRaw(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgUpdateParams& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::ocr::v1beta1::MsgUpdateParamsResponse>* PrepareAsyncUpdateParamsRaw(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgUpdateParams& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status CreateFeed(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgCreateFeed& request, ::injective::ocr::v1beta1::MsgCreateFeedResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::ocr::v1beta1::MsgCreateFeedResponse>> AsyncCreateFeed(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgCreateFeed& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::ocr::v1beta1::MsgCreateFeedResponse>>(AsyncCreateFeedRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::ocr::v1beta1::MsgCreateFeedResponse>> PrepareAsyncCreateFeed(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgCreateFeed& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::ocr::v1beta1::MsgCreateFeedResponse>>(PrepareAsyncCreateFeedRaw(context, request, cq));
    }
    ::grpc::Status UpdateFeed(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgUpdateFeed& request, ::injective::ocr::v1beta1::MsgUpdateFeedResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::ocr::v1beta1::MsgUpdateFeedResponse>> AsyncUpdateFeed(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgUpdateFeed& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::ocr::v1beta1::MsgUpdateFeedResponse>>(AsyncUpdateFeedRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::ocr::v1beta1::MsgUpdateFeedResponse>> PrepareAsyncUpdateFeed(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgUpdateFeed& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::ocr::v1beta1::MsgUpdateFeedResponse>>(PrepareAsyncUpdateFeedRaw(context, request, cq));
    }
    ::grpc::Status Transmit(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgTransmit& request, ::injective::ocr::v1beta1::MsgTransmitResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::ocr::v1beta1::MsgTransmitResponse>> AsyncTransmit(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgTransmit& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::ocr::v1beta1::MsgTransmitResponse>>(AsyncTransmitRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::ocr::v1beta1::MsgTransmitResponse>> PrepareAsyncTransmit(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgTransmit& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::ocr::v1beta1::MsgTransmitResponse>>(PrepareAsyncTransmitRaw(context, request, cq));
    }
    ::grpc::Status FundFeedRewardPool(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgFundFeedRewardPool& request, ::injective::ocr::v1beta1::MsgFundFeedRewardPoolResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::ocr::v1beta1::MsgFundFeedRewardPoolResponse>> AsyncFundFeedRewardPool(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgFundFeedRewardPool& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::ocr::v1beta1::MsgFundFeedRewardPoolResponse>>(AsyncFundFeedRewardPoolRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::ocr::v1beta1::MsgFundFeedRewardPoolResponse>> PrepareAsyncFundFeedRewardPool(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgFundFeedRewardPool& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::ocr::v1beta1::MsgFundFeedRewardPoolResponse>>(PrepareAsyncFundFeedRewardPoolRaw(context, request, cq));
    }
    ::grpc::Status WithdrawFeedRewardPool(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgWithdrawFeedRewardPool& request, ::injective::ocr::v1beta1::MsgWithdrawFeedRewardPoolResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::ocr::v1beta1::MsgWithdrawFeedRewardPoolResponse>> AsyncWithdrawFeedRewardPool(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgWithdrawFeedRewardPool& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::ocr::v1beta1::MsgWithdrawFeedRewardPoolResponse>>(AsyncWithdrawFeedRewardPoolRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::ocr::v1beta1::MsgWithdrawFeedRewardPoolResponse>> PrepareAsyncWithdrawFeedRewardPool(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgWithdrawFeedRewardPool& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::ocr::v1beta1::MsgWithdrawFeedRewardPoolResponse>>(PrepareAsyncWithdrawFeedRewardPoolRaw(context, request, cq));
    }
    ::grpc::Status SetPayees(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgSetPayees& request, ::injective::ocr::v1beta1::MsgSetPayeesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::ocr::v1beta1::MsgSetPayeesResponse>> AsyncSetPayees(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgSetPayees& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::ocr::v1beta1::MsgSetPayeesResponse>>(AsyncSetPayeesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::ocr::v1beta1::MsgSetPayeesResponse>> PrepareAsyncSetPayees(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgSetPayees& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::ocr::v1beta1::MsgSetPayeesResponse>>(PrepareAsyncSetPayeesRaw(context, request, cq));
    }
    ::grpc::Status TransferPayeeship(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgTransferPayeeship& request, ::injective::ocr::v1beta1::MsgTransferPayeeshipResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::ocr::v1beta1::MsgTransferPayeeshipResponse>> AsyncTransferPayeeship(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgTransferPayeeship& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::ocr::v1beta1::MsgTransferPayeeshipResponse>>(AsyncTransferPayeeshipRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::ocr::v1beta1::MsgTransferPayeeshipResponse>> PrepareAsyncTransferPayeeship(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgTransferPayeeship& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::ocr::v1beta1::MsgTransferPayeeshipResponse>>(PrepareAsyncTransferPayeeshipRaw(context, request, cq));
    }
    ::grpc::Status AcceptPayeeship(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgAcceptPayeeship& request, ::injective::ocr::v1beta1::MsgAcceptPayeeshipResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::ocr::v1beta1::MsgAcceptPayeeshipResponse>> AsyncAcceptPayeeship(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgAcceptPayeeship& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::ocr::v1beta1::MsgAcceptPayeeshipResponse>>(AsyncAcceptPayeeshipRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::ocr::v1beta1::MsgAcceptPayeeshipResponse>> PrepareAsyncAcceptPayeeship(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgAcceptPayeeship& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::ocr::v1beta1::MsgAcceptPayeeshipResponse>>(PrepareAsyncAcceptPayeeshipRaw(context, request, cq));
    }
    ::grpc::Status UpdateParams(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgUpdateParams& request, ::injective::ocr::v1beta1::MsgUpdateParamsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::ocr::v1beta1::MsgUpdateParamsResponse>> AsyncUpdateParams(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgUpdateParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::ocr::v1beta1::MsgUpdateParamsResponse>>(AsyncUpdateParamsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::ocr::v1beta1::MsgUpdateParamsResponse>> PrepareAsyncUpdateParams(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgUpdateParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::ocr::v1beta1::MsgUpdateParamsResponse>>(PrepareAsyncUpdateParamsRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void CreateFeed(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgCreateFeed* request, ::injective::ocr::v1beta1::MsgCreateFeedResponse* response, std::function<void(::grpc::Status)>) override;
      void CreateFeed(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgCreateFeed* request, ::injective::ocr::v1beta1::MsgCreateFeedResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UpdateFeed(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgUpdateFeed* request, ::injective::ocr::v1beta1::MsgUpdateFeedResponse* response, std::function<void(::grpc::Status)>) override;
      void UpdateFeed(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgUpdateFeed* request, ::injective::ocr::v1beta1::MsgUpdateFeedResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Transmit(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgTransmit* request, ::injective::ocr::v1beta1::MsgTransmitResponse* response, std::function<void(::grpc::Status)>) override;
      void Transmit(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgTransmit* request, ::injective::ocr::v1beta1::MsgTransmitResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void FundFeedRewardPool(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgFundFeedRewardPool* request, ::injective::ocr::v1beta1::MsgFundFeedRewardPoolResponse* response, std::function<void(::grpc::Status)>) override;
      void FundFeedRewardPool(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgFundFeedRewardPool* request, ::injective::ocr::v1beta1::MsgFundFeedRewardPoolResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void WithdrawFeedRewardPool(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgWithdrawFeedRewardPool* request, ::injective::ocr::v1beta1::MsgWithdrawFeedRewardPoolResponse* response, std::function<void(::grpc::Status)>) override;
      void WithdrawFeedRewardPool(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgWithdrawFeedRewardPool* request, ::injective::ocr::v1beta1::MsgWithdrawFeedRewardPoolResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SetPayees(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgSetPayees* request, ::injective::ocr::v1beta1::MsgSetPayeesResponse* response, std::function<void(::grpc::Status)>) override;
      void SetPayees(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgSetPayees* request, ::injective::ocr::v1beta1::MsgSetPayeesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void TransferPayeeship(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgTransferPayeeship* request, ::injective::ocr::v1beta1::MsgTransferPayeeshipResponse* response, std::function<void(::grpc::Status)>) override;
      void TransferPayeeship(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgTransferPayeeship* request, ::injective::ocr::v1beta1::MsgTransferPayeeshipResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void AcceptPayeeship(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgAcceptPayeeship* request, ::injective::ocr::v1beta1::MsgAcceptPayeeshipResponse* response, std::function<void(::grpc::Status)>) override;
      void AcceptPayeeship(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgAcceptPayeeship* request, ::injective::ocr::v1beta1::MsgAcceptPayeeshipResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UpdateParams(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgUpdateParams* request, ::injective::ocr::v1beta1::MsgUpdateParamsResponse* response, std::function<void(::grpc::Status)>) override;
      void UpdateParams(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgUpdateParams* request, ::injective::ocr::v1beta1::MsgUpdateParamsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::injective::ocr::v1beta1::MsgCreateFeedResponse>* AsyncCreateFeedRaw(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgCreateFeed& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::ocr::v1beta1::MsgCreateFeedResponse>* PrepareAsyncCreateFeedRaw(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgCreateFeed& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::ocr::v1beta1::MsgUpdateFeedResponse>* AsyncUpdateFeedRaw(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgUpdateFeed& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::ocr::v1beta1::MsgUpdateFeedResponse>* PrepareAsyncUpdateFeedRaw(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgUpdateFeed& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::ocr::v1beta1::MsgTransmitResponse>* AsyncTransmitRaw(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgTransmit& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::ocr::v1beta1::MsgTransmitResponse>* PrepareAsyncTransmitRaw(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgTransmit& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::ocr::v1beta1::MsgFundFeedRewardPoolResponse>* AsyncFundFeedRewardPoolRaw(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgFundFeedRewardPool& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::ocr::v1beta1::MsgFundFeedRewardPoolResponse>* PrepareAsyncFundFeedRewardPoolRaw(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgFundFeedRewardPool& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::ocr::v1beta1::MsgWithdrawFeedRewardPoolResponse>* AsyncWithdrawFeedRewardPoolRaw(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgWithdrawFeedRewardPool& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::ocr::v1beta1::MsgWithdrawFeedRewardPoolResponse>* PrepareAsyncWithdrawFeedRewardPoolRaw(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgWithdrawFeedRewardPool& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::ocr::v1beta1::MsgSetPayeesResponse>* AsyncSetPayeesRaw(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgSetPayees& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::ocr::v1beta1::MsgSetPayeesResponse>* PrepareAsyncSetPayeesRaw(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgSetPayees& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::ocr::v1beta1::MsgTransferPayeeshipResponse>* AsyncTransferPayeeshipRaw(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgTransferPayeeship& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::ocr::v1beta1::MsgTransferPayeeshipResponse>* PrepareAsyncTransferPayeeshipRaw(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgTransferPayeeship& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::ocr::v1beta1::MsgAcceptPayeeshipResponse>* AsyncAcceptPayeeshipRaw(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgAcceptPayeeship& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::ocr::v1beta1::MsgAcceptPayeeshipResponse>* PrepareAsyncAcceptPayeeshipRaw(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgAcceptPayeeship& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::ocr::v1beta1::MsgUpdateParamsResponse>* AsyncUpdateParamsRaw(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgUpdateParams& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::ocr::v1beta1::MsgUpdateParamsResponse>* PrepareAsyncUpdateParamsRaw(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::MsgUpdateParams& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_CreateFeed_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateFeed_;
    const ::grpc::internal::RpcMethod rpcmethod_Transmit_;
    const ::grpc::internal::RpcMethod rpcmethod_FundFeedRewardPool_;
    const ::grpc::internal::RpcMethod rpcmethod_WithdrawFeedRewardPool_;
    const ::grpc::internal::RpcMethod rpcmethod_SetPayees_;
    const ::grpc::internal::RpcMethod rpcmethod_TransferPayeeship_;
    const ::grpc::internal::RpcMethod rpcmethod_AcceptPayeeship_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateParams_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // CreateFeed defines a method for creating feed by module admin
    virtual ::grpc::Status CreateFeed(::grpc::ServerContext* context, const ::injective::ocr::v1beta1::MsgCreateFeed* request, ::injective::ocr::v1beta1::MsgCreateFeedResponse* response);
    // CreateFeed defines a method for creating feed by feed admin or feed billing
    // admin
    virtual ::grpc::Status UpdateFeed(::grpc::ServerContext* context, const ::injective::ocr::v1beta1::MsgUpdateFeed* request, ::injective::ocr::v1beta1::MsgUpdateFeedResponse* response);
    // Transmit defines a method for transmitting the feed info by transmitter
    virtual ::grpc::Status Transmit(::grpc::ServerContext* context, const ::injective::ocr::v1beta1::MsgTransmit* request, ::injective::ocr::v1beta1::MsgTransmitResponse* response);
    // FundFeedRewardPool defines a method to put funds into feed reward pool
    virtual ::grpc::Status FundFeedRewardPool(::grpc::ServerContext* context, const ::injective::ocr::v1beta1::MsgFundFeedRewardPool* request, ::injective::ocr::v1beta1::MsgFundFeedRewardPoolResponse* response);
    // WithdrawFeedRewardPool defines a method to witdhraw feed reward by feed
    // admin or billing admin
    virtual ::grpc::Status WithdrawFeedRewardPool(::grpc::ServerContext* context, const ::injective::ocr::v1beta1::MsgWithdrawFeedRewardPool* request, ::injective::ocr::v1beta1::MsgWithdrawFeedRewardPoolResponse* response);
    // SetPayees defines a method to set payees for transmitters (batch action)
    virtual ::grpc::Status SetPayees(::grpc::ServerContext* context, const ::injective::ocr::v1beta1::MsgSetPayees* request, ::injective::ocr::v1beta1::MsgSetPayeesResponse* response);
    // TransferPayeeship defines a method for a payee to transfer reward receive
    // ownership
    virtual ::grpc::Status TransferPayeeship(::grpc::ServerContext* context, const ::injective::ocr::v1beta1::MsgTransferPayeeship* request, ::injective::ocr::v1beta1::MsgTransferPayeeshipResponse* response);
    // AcceptPayeeship defines a method for a new payee to accept reward receive
    // ownership
    virtual ::grpc::Status AcceptPayeeship(::grpc::ServerContext* context, const ::injective::ocr::v1beta1::MsgAcceptPayeeship* request, ::injective::ocr::v1beta1::MsgAcceptPayeeshipResponse* response);
    virtual ::grpc::Status UpdateParams(::grpc::ServerContext* context, const ::injective::ocr::v1beta1::MsgUpdateParams* request, ::injective::ocr::v1beta1::MsgUpdateParamsResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateFeed : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateFeed() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_CreateFeed() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateFeed(::grpc::ServerContext* /*context*/, const ::injective::ocr::v1beta1::MsgCreateFeed* /*request*/, ::injective::ocr::v1beta1::MsgCreateFeedResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateFeed(::grpc::ServerContext* context, ::injective::ocr::v1beta1::MsgCreateFeed* request, ::grpc::ServerAsyncResponseWriter< ::injective::ocr::v1beta1::MsgCreateFeedResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateFeed : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateFeed() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_UpdateFeed() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateFeed(::grpc::ServerContext* /*context*/, const ::injective::ocr::v1beta1::MsgUpdateFeed* /*request*/, ::injective::ocr::v1beta1::MsgUpdateFeedResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateFeed(::grpc::ServerContext* context, ::injective::ocr::v1beta1::MsgUpdateFeed* request, ::grpc::ServerAsyncResponseWriter< ::injective::ocr::v1beta1::MsgUpdateFeedResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Transmit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Transmit() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Transmit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Transmit(::grpc::ServerContext* /*context*/, const ::injective::ocr::v1beta1::MsgTransmit* /*request*/, ::injective::ocr::v1beta1::MsgTransmitResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTransmit(::grpc::ServerContext* context, ::injective::ocr::v1beta1::MsgTransmit* request, ::grpc::ServerAsyncResponseWriter< ::injective::ocr::v1beta1::MsgTransmitResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_FundFeedRewardPool : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_FundFeedRewardPool() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_FundFeedRewardPool() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FundFeedRewardPool(::grpc::ServerContext* /*context*/, const ::injective::ocr::v1beta1::MsgFundFeedRewardPool* /*request*/, ::injective::ocr::v1beta1::MsgFundFeedRewardPoolResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFundFeedRewardPool(::grpc::ServerContext* context, ::injective::ocr::v1beta1::MsgFundFeedRewardPool* request, ::grpc::ServerAsyncResponseWriter< ::injective::ocr::v1beta1::MsgFundFeedRewardPoolResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_WithdrawFeedRewardPool : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_WithdrawFeedRewardPool() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_WithdrawFeedRewardPool() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WithdrawFeedRewardPool(::grpc::ServerContext* /*context*/, const ::injective::ocr::v1beta1::MsgWithdrawFeedRewardPool* /*request*/, ::injective::ocr::v1beta1::MsgWithdrawFeedRewardPoolResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestWithdrawFeedRewardPool(::grpc::ServerContext* context, ::injective::ocr::v1beta1::MsgWithdrawFeedRewardPool* request, ::grpc::ServerAsyncResponseWriter< ::injective::ocr::v1beta1::MsgWithdrawFeedRewardPoolResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetPayees : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetPayees() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_SetPayees() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPayees(::grpc::ServerContext* /*context*/, const ::injective::ocr::v1beta1::MsgSetPayees* /*request*/, ::injective::ocr::v1beta1::MsgSetPayeesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetPayees(::grpc::ServerContext* context, ::injective::ocr::v1beta1::MsgSetPayees* request, ::grpc::ServerAsyncResponseWriter< ::injective::ocr::v1beta1::MsgSetPayeesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_TransferPayeeship : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_TransferPayeeship() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_TransferPayeeship() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TransferPayeeship(::grpc::ServerContext* /*context*/, const ::injective::ocr::v1beta1::MsgTransferPayeeship* /*request*/, ::injective::ocr::v1beta1::MsgTransferPayeeshipResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTransferPayeeship(::grpc::ServerContext* context, ::injective::ocr::v1beta1::MsgTransferPayeeship* request, ::grpc::ServerAsyncResponseWriter< ::injective::ocr::v1beta1::MsgTransferPayeeshipResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AcceptPayeeship : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AcceptPayeeship() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_AcceptPayeeship() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AcceptPayeeship(::grpc::ServerContext* /*context*/, const ::injective::ocr::v1beta1::MsgAcceptPayeeship* /*request*/, ::injective::ocr::v1beta1::MsgAcceptPayeeshipResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAcceptPayeeship(::grpc::ServerContext* context, ::injective::ocr::v1beta1::MsgAcceptPayeeship* request, ::grpc::ServerAsyncResponseWriter< ::injective::ocr::v1beta1::MsgAcceptPayeeshipResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateParams : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateParams() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_UpdateParams() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateParams(::grpc::ServerContext* /*context*/, const ::injective::ocr::v1beta1::MsgUpdateParams* /*request*/, ::injective::ocr::v1beta1::MsgUpdateParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateParams(::grpc::ServerContext* context, ::injective::ocr::v1beta1::MsgUpdateParams* request, ::grpc::ServerAsyncResponseWriter< ::injective::ocr::v1beta1::MsgUpdateParamsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_CreateFeed<WithAsyncMethod_UpdateFeed<WithAsyncMethod_Transmit<WithAsyncMethod_FundFeedRewardPool<WithAsyncMethod_WithdrawFeedRewardPool<WithAsyncMethod_SetPayees<WithAsyncMethod_TransferPayeeship<WithAsyncMethod_AcceptPayeeship<WithAsyncMethod_UpdateParams<Service > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_CreateFeed : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateFeed() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::injective::ocr::v1beta1::MsgCreateFeed, ::injective::ocr::v1beta1::MsgCreateFeedResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::injective::ocr::v1beta1::MsgCreateFeed* request, ::injective::ocr::v1beta1::MsgCreateFeedResponse* response) { return this->CreateFeed(context, request, response); }));}
    void SetMessageAllocatorFor_CreateFeed(
        ::grpc::MessageAllocator< ::injective::ocr::v1beta1::MsgCreateFeed, ::injective::ocr::v1beta1::MsgCreateFeedResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::injective::ocr::v1beta1::MsgCreateFeed, ::injective::ocr::v1beta1::MsgCreateFeedResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateFeed() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateFeed(::grpc::ServerContext* /*context*/, const ::injective::ocr::v1beta1::MsgCreateFeed* /*request*/, ::injective::ocr::v1beta1::MsgCreateFeedResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateFeed(
      ::grpc::CallbackServerContext* /*context*/, const ::injective::ocr::v1beta1::MsgCreateFeed* /*request*/, ::injective::ocr::v1beta1::MsgCreateFeedResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdateFeed : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdateFeed() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::injective::ocr::v1beta1::MsgUpdateFeed, ::injective::ocr::v1beta1::MsgUpdateFeedResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::injective::ocr::v1beta1::MsgUpdateFeed* request, ::injective::ocr::v1beta1::MsgUpdateFeedResponse* response) { return this->UpdateFeed(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateFeed(
        ::grpc::MessageAllocator< ::injective::ocr::v1beta1::MsgUpdateFeed, ::injective::ocr::v1beta1::MsgUpdateFeedResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::injective::ocr::v1beta1::MsgUpdateFeed, ::injective::ocr::v1beta1::MsgUpdateFeedResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdateFeed() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateFeed(::grpc::ServerContext* /*context*/, const ::injective::ocr::v1beta1::MsgUpdateFeed* /*request*/, ::injective::ocr::v1beta1::MsgUpdateFeedResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateFeed(
      ::grpc::CallbackServerContext* /*context*/, const ::injective::ocr::v1beta1::MsgUpdateFeed* /*request*/, ::injective::ocr::v1beta1::MsgUpdateFeedResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Transmit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Transmit() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::injective::ocr::v1beta1::MsgTransmit, ::injective::ocr::v1beta1::MsgTransmitResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::injective::ocr::v1beta1::MsgTransmit* request, ::injective::ocr::v1beta1::MsgTransmitResponse* response) { return this->Transmit(context, request, response); }));}
    void SetMessageAllocatorFor_Transmit(
        ::grpc::MessageAllocator< ::injective::ocr::v1beta1::MsgTransmit, ::injective::ocr::v1beta1::MsgTransmitResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::injective::ocr::v1beta1::MsgTransmit, ::injective::ocr::v1beta1::MsgTransmitResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Transmit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Transmit(::grpc::ServerContext* /*context*/, const ::injective::ocr::v1beta1::MsgTransmit* /*request*/, ::injective::ocr::v1beta1::MsgTransmitResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Transmit(
      ::grpc::CallbackServerContext* /*context*/, const ::injective::ocr::v1beta1::MsgTransmit* /*request*/, ::injective::ocr::v1beta1::MsgTransmitResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_FundFeedRewardPool : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_FundFeedRewardPool() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::injective::ocr::v1beta1::MsgFundFeedRewardPool, ::injective::ocr::v1beta1::MsgFundFeedRewardPoolResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::injective::ocr::v1beta1::MsgFundFeedRewardPool* request, ::injective::ocr::v1beta1::MsgFundFeedRewardPoolResponse* response) { return this->FundFeedRewardPool(context, request, response); }));}
    void SetMessageAllocatorFor_FundFeedRewardPool(
        ::grpc::MessageAllocator< ::injective::ocr::v1beta1::MsgFundFeedRewardPool, ::injective::ocr::v1beta1::MsgFundFeedRewardPoolResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::injective::ocr::v1beta1::MsgFundFeedRewardPool, ::injective::ocr::v1beta1::MsgFundFeedRewardPoolResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_FundFeedRewardPool() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FundFeedRewardPool(::grpc::ServerContext* /*context*/, const ::injective::ocr::v1beta1::MsgFundFeedRewardPool* /*request*/, ::injective::ocr::v1beta1::MsgFundFeedRewardPoolResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* FundFeedRewardPool(
      ::grpc::CallbackServerContext* /*context*/, const ::injective::ocr::v1beta1::MsgFundFeedRewardPool* /*request*/, ::injective::ocr::v1beta1::MsgFundFeedRewardPoolResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_WithdrawFeedRewardPool : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_WithdrawFeedRewardPool() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::injective::ocr::v1beta1::MsgWithdrawFeedRewardPool, ::injective::ocr::v1beta1::MsgWithdrawFeedRewardPoolResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::injective::ocr::v1beta1::MsgWithdrawFeedRewardPool* request, ::injective::ocr::v1beta1::MsgWithdrawFeedRewardPoolResponse* response) { return this->WithdrawFeedRewardPool(context, request, response); }));}
    void SetMessageAllocatorFor_WithdrawFeedRewardPool(
        ::grpc::MessageAllocator< ::injective::ocr::v1beta1::MsgWithdrawFeedRewardPool, ::injective::ocr::v1beta1::MsgWithdrawFeedRewardPoolResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::injective::ocr::v1beta1::MsgWithdrawFeedRewardPool, ::injective::ocr::v1beta1::MsgWithdrawFeedRewardPoolResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_WithdrawFeedRewardPool() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WithdrawFeedRewardPool(::grpc::ServerContext* /*context*/, const ::injective::ocr::v1beta1::MsgWithdrawFeedRewardPool* /*request*/, ::injective::ocr::v1beta1::MsgWithdrawFeedRewardPoolResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* WithdrawFeedRewardPool(
      ::grpc::CallbackServerContext* /*context*/, const ::injective::ocr::v1beta1::MsgWithdrawFeedRewardPool* /*request*/, ::injective::ocr::v1beta1::MsgWithdrawFeedRewardPoolResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SetPayees : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SetPayees() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::injective::ocr::v1beta1::MsgSetPayees, ::injective::ocr::v1beta1::MsgSetPayeesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::injective::ocr::v1beta1::MsgSetPayees* request, ::injective::ocr::v1beta1::MsgSetPayeesResponse* response) { return this->SetPayees(context, request, response); }));}
    void SetMessageAllocatorFor_SetPayees(
        ::grpc::MessageAllocator< ::injective::ocr::v1beta1::MsgSetPayees, ::injective::ocr::v1beta1::MsgSetPayeesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::injective::ocr::v1beta1::MsgSetPayees, ::injective::ocr::v1beta1::MsgSetPayeesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SetPayees() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPayees(::grpc::ServerContext* /*context*/, const ::injective::ocr::v1beta1::MsgSetPayees* /*request*/, ::injective::ocr::v1beta1::MsgSetPayeesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetPayees(
      ::grpc::CallbackServerContext* /*context*/, const ::injective::ocr::v1beta1::MsgSetPayees* /*request*/, ::injective::ocr::v1beta1::MsgSetPayeesResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_TransferPayeeship : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_TransferPayeeship() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::injective::ocr::v1beta1::MsgTransferPayeeship, ::injective::ocr::v1beta1::MsgTransferPayeeshipResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::injective::ocr::v1beta1::MsgTransferPayeeship* request, ::injective::ocr::v1beta1::MsgTransferPayeeshipResponse* response) { return this->TransferPayeeship(context, request, response); }));}
    void SetMessageAllocatorFor_TransferPayeeship(
        ::grpc::MessageAllocator< ::injective::ocr::v1beta1::MsgTransferPayeeship, ::injective::ocr::v1beta1::MsgTransferPayeeshipResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::injective::ocr::v1beta1::MsgTransferPayeeship, ::injective::ocr::v1beta1::MsgTransferPayeeshipResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_TransferPayeeship() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TransferPayeeship(::grpc::ServerContext* /*context*/, const ::injective::ocr::v1beta1::MsgTransferPayeeship* /*request*/, ::injective::ocr::v1beta1::MsgTransferPayeeshipResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* TransferPayeeship(
      ::grpc::CallbackServerContext* /*context*/, const ::injective::ocr::v1beta1::MsgTransferPayeeship* /*request*/, ::injective::ocr::v1beta1::MsgTransferPayeeshipResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_AcceptPayeeship : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_AcceptPayeeship() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::injective::ocr::v1beta1::MsgAcceptPayeeship, ::injective::ocr::v1beta1::MsgAcceptPayeeshipResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::injective::ocr::v1beta1::MsgAcceptPayeeship* request, ::injective::ocr::v1beta1::MsgAcceptPayeeshipResponse* response) { return this->AcceptPayeeship(context, request, response); }));}
    void SetMessageAllocatorFor_AcceptPayeeship(
        ::grpc::MessageAllocator< ::injective::ocr::v1beta1::MsgAcceptPayeeship, ::injective::ocr::v1beta1::MsgAcceptPayeeshipResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::injective::ocr::v1beta1::MsgAcceptPayeeship, ::injective::ocr::v1beta1::MsgAcceptPayeeshipResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_AcceptPayeeship() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AcceptPayeeship(::grpc::ServerContext* /*context*/, const ::injective::ocr::v1beta1::MsgAcceptPayeeship* /*request*/, ::injective::ocr::v1beta1::MsgAcceptPayeeshipResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AcceptPayeeship(
      ::grpc::CallbackServerContext* /*context*/, const ::injective::ocr::v1beta1::MsgAcceptPayeeship* /*request*/, ::injective::ocr::v1beta1::MsgAcceptPayeeshipResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdateParams : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdateParams() {
      ::grpc::Service::MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::injective::ocr::v1beta1::MsgUpdateParams, ::injective::ocr::v1beta1::MsgUpdateParamsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::injective::ocr::v1beta1::MsgUpdateParams* request, ::injective::ocr::v1beta1::MsgUpdateParamsResponse* response) { return this->UpdateParams(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateParams(
        ::grpc::MessageAllocator< ::injective::ocr::v1beta1::MsgUpdateParams, ::injective::ocr::v1beta1::MsgUpdateParamsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::injective::ocr::v1beta1::MsgUpdateParams, ::injective::ocr::v1beta1::MsgUpdateParamsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdateParams() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateParams(::grpc::ServerContext* /*context*/, const ::injective::ocr::v1beta1::MsgUpdateParams* /*request*/, ::injective::ocr::v1beta1::MsgUpdateParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateParams(
      ::grpc::CallbackServerContext* /*context*/, const ::injective::ocr::v1beta1::MsgUpdateParams* /*request*/, ::injective::ocr::v1beta1::MsgUpdateParamsResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_CreateFeed<WithCallbackMethod_UpdateFeed<WithCallbackMethod_Transmit<WithCallbackMethod_FundFeedRewardPool<WithCallbackMethod_WithdrawFeedRewardPool<WithCallbackMethod_SetPayees<WithCallbackMethod_TransferPayeeship<WithCallbackMethod_AcceptPayeeship<WithCallbackMethod_UpdateParams<Service > > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_CreateFeed : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateFeed() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_CreateFeed() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateFeed(::grpc::ServerContext* /*context*/, const ::injective::ocr::v1beta1::MsgCreateFeed* /*request*/, ::injective::ocr::v1beta1::MsgCreateFeedResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateFeed : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateFeed() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_UpdateFeed() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateFeed(::grpc::ServerContext* /*context*/, const ::injective::ocr::v1beta1::MsgUpdateFeed* /*request*/, ::injective::ocr::v1beta1::MsgUpdateFeedResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Transmit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Transmit() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Transmit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Transmit(::grpc::ServerContext* /*context*/, const ::injective::ocr::v1beta1::MsgTransmit* /*request*/, ::injective::ocr::v1beta1::MsgTransmitResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_FundFeedRewardPool : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_FundFeedRewardPool() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_FundFeedRewardPool() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FundFeedRewardPool(::grpc::ServerContext* /*context*/, const ::injective::ocr::v1beta1::MsgFundFeedRewardPool* /*request*/, ::injective::ocr::v1beta1::MsgFundFeedRewardPoolResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_WithdrawFeedRewardPool : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_WithdrawFeedRewardPool() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_WithdrawFeedRewardPool() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WithdrawFeedRewardPool(::grpc::ServerContext* /*context*/, const ::injective::ocr::v1beta1::MsgWithdrawFeedRewardPool* /*request*/, ::injective::ocr::v1beta1::MsgWithdrawFeedRewardPoolResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetPayees : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetPayees() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_SetPayees() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPayees(::grpc::ServerContext* /*context*/, const ::injective::ocr::v1beta1::MsgSetPayees* /*request*/, ::injective::ocr::v1beta1::MsgSetPayeesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_TransferPayeeship : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_TransferPayeeship() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_TransferPayeeship() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TransferPayeeship(::grpc::ServerContext* /*context*/, const ::injective::ocr::v1beta1::MsgTransferPayeeship* /*request*/, ::injective::ocr::v1beta1::MsgTransferPayeeshipResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AcceptPayeeship : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AcceptPayeeship() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_AcceptPayeeship() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AcceptPayeeship(::grpc::ServerContext* /*context*/, const ::injective::ocr::v1beta1::MsgAcceptPayeeship* /*request*/, ::injective::ocr::v1beta1::MsgAcceptPayeeshipResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateParams : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateParams() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_UpdateParams() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateParams(::grpc::ServerContext* /*context*/, const ::injective::ocr::v1beta1::MsgUpdateParams* /*request*/, ::injective::ocr::v1beta1::MsgUpdateParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateFeed : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateFeed() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_CreateFeed() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateFeed(::grpc::ServerContext* /*context*/, const ::injective::ocr::v1beta1::MsgCreateFeed* /*request*/, ::injective::ocr::v1beta1::MsgCreateFeedResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateFeed(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateFeed : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateFeed() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_UpdateFeed() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateFeed(::grpc::ServerContext* /*context*/, const ::injective::ocr::v1beta1::MsgUpdateFeed* /*request*/, ::injective::ocr::v1beta1::MsgUpdateFeedResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateFeed(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Transmit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Transmit() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_Transmit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Transmit(::grpc::ServerContext* /*context*/, const ::injective::ocr::v1beta1::MsgTransmit* /*request*/, ::injective::ocr::v1beta1::MsgTransmitResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTransmit(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_FundFeedRewardPool : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_FundFeedRewardPool() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_FundFeedRewardPool() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FundFeedRewardPool(::grpc::ServerContext* /*context*/, const ::injective::ocr::v1beta1::MsgFundFeedRewardPool* /*request*/, ::injective::ocr::v1beta1::MsgFundFeedRewardPoolResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFundFeedRewardPool(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_WithdrawFeedRewardPool : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_WithdrawFeedRewardPool() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_WithdrawFeedRewardPool() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WithdrawFeedRewardPool(::grpc::ServerContext* /*context*/, const ::injective::ocr::v1beta1::MsgWithdrawFeedRewardPool* /*request*/, ::injective::ocr::v1beta1::MsgWithdrawFeedRewardPoolResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestWithdrawFeedRewardPool(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetPayees : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetPayees() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_SetPayees() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPayees(::grpc::ServerContext* /*context*/, const ::injective::ocr::v1beta1::MsgSetPayees* /*request*/, ::injective::ocr::v1beta1::MsgSetPayeesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetPayees(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_TransferPayeeship : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_TransferPayeeship() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_TransferPayeeship() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TransferPayeeship(::grpc::ServerContext* /*context*/, const ::injective::ocr::v1beta1::MsgTransferPayeeship* /*request*/, ::injective::ocr::v1beta1::MsgTransferPayeeshipResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTransferPayeeship(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AcceptPayeeship : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AcceptPayeeship() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_AcceptPayeeship() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AcceptPayeeship(::grpc::ServerContext* /*context*/, const ::injective::ocr::v1beta1::MsgAcceptPayeeship* /*request*/, ::injective::ocr::v1beta1::MsgAcceptPayeeshipResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAcceptPayeeship(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateParams : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateParams() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_UpdateParams() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateParams(::grpc::ServerContext* /*context*/, const ::injective::ocr::v1beta1::MsgUpdateParams* /*request*/, ::injective::ocr::v1beta1::MsgUpdateParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateParams(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateFeed : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateFeed() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateFeed(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateFeed() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateFeed(::grpc::ServerContext* /*context*/, const ::injective::ocr::v1beta1::MsgCreateFeed* /*request*/, ::injective::ocr::v1beta1::MsgCreateFeedResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateFeed(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdateFeed : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdateFeed() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateFeed(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdateFeed() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateFeed(::grpc::ServerContext* /*context*/, const ::injective::ocr::v1beta1::MsgUpdateFeed* /*request*/, ::injective::ocr::v1beta1::MsgUpdateFeedResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateFeed(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Transmit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Transmit() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Transmit(context, request, response); }));
    }
    ~WithRawCallbackMethod_Transmit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Transmit(::grpc::ServerContext* /*context*/, const ::injective::ocr::v1beta1::MsgTransmit* /*request*/, ::injective::ocr::v1beta1::MsgTransmitResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Transmit(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_FundFeedRewardPool : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_FundFeedRewardPool() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->FundFeedRewardPool(context, request, response); }));
    }
    ~WithRawCallbackMethod_FundFeedRewardPool() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FundFeedRewardPool(::grpc::ServerContext* /*context*/, const ::injective::ocr::v1beta1::MsgFundFeedRewardPool* /*request*/, ::injective::ocr::v1beta1::MsgFundFeedRewardPoolResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* FundFeedRewardPool(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_WithdrawFeedRewardPool : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_WithdrawFeedRewardPool() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->WithdrawFeedRewardPool(context, request, response); }));
    }
    ~WithRawCallbackMethod_WithdrawFeedRewardPool() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WithdrawFeedRewardPool(::grpc::ServerContext* /*context*/, const ::injective::ocr::v1beta1::MsgWithdrawFeedRewardPool* /*request*/, ::injective::ocr::v1beta1::MsgWithdrawFeedRewardPoolResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* WithdrawFeedRewardPool(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SetPayees : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SetPayees() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetPayees(context, request, response); }));
    }
    ~WithRawCallbackMethod_SetPayees() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPayees(::grpc::ServerContext* /*context*/, const ::injective::ocr::v1beta1::MsgSetPayees* /*request*/, ::injective::ocr::v1beta1::MsgSetPayeesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetPayees(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_TransferPayeeship : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_TransferPayeeship() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->TransferPayeeship(context, request, response); }));
    }
    ~WithRawCallbackMethod_TransferPayeeship() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TransferPayeeship(::grpc::ServerContext* /*context*/, const ::injective::ocr::v1beta1::MsgTransferPayeeship* /*request*/, ::injective::ocr::v1beta1::MsgTransferPayeeshipResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* TransferPayeeship(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_AcceptPayeeship : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_AcceptPayeeship() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AcceptPayeeship(context, request, response); }));
    }
    ~WithRawCallbackMethod_AcceptPayeeship() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AcceptPayeeship(::grpc::ServerContext* /*context*/, const ::injective::ocr::v1beta1::MsgAcceptPayeeship* /*request*/, ::injective::ocr::v1beta1::MsgAcceptPayeeshipResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AcceptPayeeship(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdateParams : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdateParams() {
      ::grpc::Service::MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateParams(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdateParams() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateParams(::grpc::ServerContext* /*context*/, const ::injective::ocr::v1beta1::MsgUpdateParams* /*request*/, ::injective::ocr::v1beta1::MsgUpdateParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateParams(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateFeed : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateFeed() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::injective::ocr::v1beta1::MsgCreateFeed, ::injective::ocr::v1beta1::MsgCreateFeedResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::injective::ocr::v1beta1::MsgCreateFeed, ::injective::ocr::v1beta1::MsgCreateFeedResponse>* streamer) {
                       return this->StreamedCreateFeed(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateFeed() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateFeed(::grpc::ServerContext* /*context*/, const ::injective::ocr::v1beta1::MsgCreateFeed* /*request*/, ::injective::ocr::v1beta1::MsgCreateFeedResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateFeed(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::injective::ocr::v1beta1::MsgCreateFeed,::injective::ocr::v1beta1::MsgCreateFeedResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateFeed : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateFeed() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::injective::ocr::v1beta1::MsgUpdateFeed, ::injective::ocr::v1beta1::MsgUpdateFeedResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::injective::ocr::v1beta1::MsgUpdateFeed, ::injective::ocr::v1beta1::MsgUpdateFeedResponse>* streamer) {
                       return this->StreamedUpdateFeed(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateFeed() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateFeed(::grpc::ServerContext* /*context*/, const ::injective::ocr::v1beta1::MsgUpdateFeed* /*request*/, ::injective::ocr::v1beta1::MsgUpdateFeedResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateFeed(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::injective::ocr::v1beta1::MsgUpdateFeed,::injective::ocr::v1beta1::MsgUpdateFeedResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Transmit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Transmit() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::injective::ocr::v1beta1::MsgTransmit, ::injective::ocr::v1beta1::MsgTransmitResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::injective::ocr::v1beta1::MsgTransmit, ::injective::ocr::v1beta1::MsgTransmitResponse>* streamer) {
                       return this->StreamedTransmit(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Transmit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Transmit(::grpc::ServerContext* /*context*/, const ::injective::ocr::v1beta1::MsgTransmit* /*request*/, ::injective::ocr::v1beta1::MsgTransmitResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedTransmit(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::injective::ocr::v1beta1::MsgTransmit,::injective::ocr::v1beta1::MsgTransmitResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_FundFeedRewardPool : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_FundFeedRewardPool() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::injective::ocr::v1beta1::MsgFundFeedRewardPool, ::injective::ocr::v1beta1::MsgFundFeedRewardPoolResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::injective::ocr::v1beta1::MsgFundFeedRewardPool, ::injective::ocr::v1beta1::MsgFundFeedRewardPoolResponse>* streamer) {
                       return this->StreamedFundFeedRewardPool(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_FundFeedRewardPool() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status FundFeedRewardPool(::grpc::ServerContext* /*context*/, const ::injective::ocr::v1beta1::MsgFundFeedRewardPool* /*request*/, ::injective::ocr::v1beta1::MsgFundFeedRewardPoolResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedFundFeedRewardPool(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::injective::ocr::v1beta1::MsgFundFeedRewardPool,::injective::ocr::v1beta1::MsgFundFeedRewardPoolResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_WithdrawFeedRewardPool : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_WithdrawFeedRewardPool() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::injective::ocr::v1beta1::MsgWithdrawFeedRewardPool, ::injective::ocr::v1beta1::MsgWithdrawFeedRewardPoolResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::injective::ocr::v1beta1::MsgWithdrawFeedRewardPool, ::injective::ocr::v1beta1::MsgWithdrawFeedRewardPoolResponse>* streamer) {
                       return this->StreamedWithdrawFeedRewardPool(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_WithdrawFeedRewardPool() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status WithdrawFeedRewardPool(::grpc::ServerContext* /*context*/, const ::injective::ocr::v1beta1::MsgWithdrawFeedRewardPool* /*request*/, ::injective::ocr::v1beta1::MsgWithdrawFeedRewardPoolResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedWithdrawFeedRewardPool(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::injective::ocr::v1beta1::MsgWithdrawFeedRewardPool,::injective::ocr::v1beta1::MsgWithdrawFeedRewardPoolResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetPayees : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetPayees() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::injective::ocr::v1beta1::MsgSetPayees, ::injective::ocr::v1beta1::MsgSetPayeesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::injective::ocr::v1beta1::MsgSetPayees, ::injective::ocr::v1beta1::MsgSetPayeesResponse>* streamer) {
                       return this->StreamedSetPayees(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetPayees() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetPayees(::grpc::ServerContext* /*context*/, const ::injective::ocr::v1beta1::MsgSetPayees* /*request*/, ::injective::ocr::v1beta1::MsgSetPayeesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetPayees(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::injective::ocr::v1beta1::MsgSetPayees,::injective::ocr::v1beta1::MsgSetPayeesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_TransferPayeeship : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_TransferPayeeship() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::injective::ocr::v1beta1::MsgTransferPayeeship, ::injective::ocr::v1beta1::MsgTransferPayeeshipResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::injective::ocr::v1beta1::MsgTransferPayeeship, ::injective::ocr::v1beta1::MsgTransferPayeeshipResponse>* streamer) {
                       return this->StreamedTransferPayeeship(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_TransferPayeeship() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status TransferPayeeship(::grpc::ServerContext* /*context*/, const ::injective::ocr::v1beta1::MsgTransferPayeeship* /*request*/, ::injective::ocr::v1beta1::MsgTransferPayeeshipResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedTransferPayeeship(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::injective::ocr::v1beta1::MsgTransferPayeeship,::injective::ocr::v1beta1::MsgTransferPayeeshipResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AcceptPayeeship : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AcceptPayeeship() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::injective::ocr::v1beta1::MsgAcceptPayeeship, ::injective::ocr::v1beta1::MsgAcceptPayeeshipResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::injective::ocr::v1beta1::MsgAcceptPayeeship, ::injective::ocr::v1beta1::MsgAcceptPayeeshipResponse>* streamer) {
                       return this->StreamedAcceptPayeeship(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AcceptPayeeship() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AcceptPayeeship(::grpc::ServerContext* /*context*/, const ::injective::ocr::v1beta1::MsgAcceptPayeeship* /*request*/, ::injective::ocr::v1beta1::MsgAcceptPayeeshipResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAcceptPayeeship(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::injective::ocr::v1beta1::MsgAcceptPayeeship,::injective::ocr::v1beta1::MsgAcceptPayeeshipResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateParams : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateParams() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::injective::ocr::v1beta1::MsgUpdateParams, ::injective::ocr::v1beta1::MsgUpdateParamsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::injective::ocr::v1beta1::MsgUpdateParams, ::injective::ocr::v1beta1::MsgUpdateParamsResponse>* streamer) {
                       return this->StreamedUpdateParams(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateParams() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateParams(::grpc::ServerContext* /*context*/, const ::injective::ocr::v1beta1::MsgUpdateParams* /*request*/, ::injective::ocr::v1beta1::MsgUpdateParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateParams(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::injective::ocr::v1beta1::MsgUpdateParams,::injective::ocr::v1beta1::MsgUpdateParamsResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_CreateFeed<WithStreamedUnaryMethod_UpdateFeed<WithStreamedUnaryMethod_Transmit<WithStreamedUnaryMethod_FundFeedRewardPool<WithStreamedUnaryMethod_WithdrawFeedRewardPool<WithStreamedUnaryMethod_SetPayees<WithStreamedUnaryMethod_TransferPayeeship<WithStreamedUnaryMethod_AcceptPayeeship<WithStreamedUnaryMethod_UpdateParams<Service > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_CreateFeed<WithStreamedUnaryMethod_UpdateFeed<WithStreamedUnaryMethod_Transmit<WithStreamedUnaryMethod_FundFeedRewardPool<WithStreamedUnaryMethod_WithdrawFeedRewardPool<WithStreamedUnaryMethod_SetPayees<WithStreamedUnaryMethod_TransferPayeeship<WithStreamedUnaryMethod_AcceptPayeeship<WithStreamedUnaryMethod_UpdateParams<Service > > > > > > > > > StreamedService;
};

}  // namespace v1beta1
}  // namespace ocr
}  // namespace injective


#endif  // GRPC_injective_2focr_2fv1beta1_2ftx_2eproto__INCLUDED

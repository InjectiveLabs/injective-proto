// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: injective/ocr/v1beta1/query.proto

#include "injective/ocr/v1beta1/query.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace injective {
namespace ocr {
namespace v1beta1 {
template <typename>
PROTOBUF_CONSTEXPR QueryParamsRequest::QueryParamsRequest(
    ::_pbi::ConstantInitialized) {}
struct QueryParamsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryParamsRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryParamsRequestDefaultTypeInternal() {}
  union {
    QueryParamsRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryParamsRequestDefaultTypeInternal _QueryParamsRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryParamsResponse::QueryParamsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.params_)*/nullptr} {}
struct QueryParamsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryParamsResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryParamsResponseDefaultTypeInternal() {}
  union {
    QueryParamsResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryParamsResponseDefaultTypeInternal _QueryParamsResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryFeedConfigRequest::QueryFeedConfigRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.feed_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QueryFeedConfigRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryFeedConfigRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryFeedConfigRequestDefaultTypeInternal() {}
  union {
    QueryFeedConfigRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryFeedConfigRequestDefaultTypeInternal _QueryFeedConfigRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryFeedConfigResponse::QueryFeedConfigResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.feed_config_info_)*/nullptr
  , /*decltype(_impl_.feed_config_)*/nullptr} {}
struct QueryFeedConfigResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryFeedConfigResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryFeedConfigResponseDefaultTypeInternal() {}
  union {
    QueryFeedConfigResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryFeedConfigResponseDefaultTypeInternal _QueryFeedConfigResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryFeedConfigInfoRequest::QueryFeedConfigInfoRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.feed_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QueryFeedConfigInfoRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryFeedConfigInfoRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryFeedConfigInfoRequestDefaultTypeInternal() {}
  union {
    QueryFeedConfigInfoRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryFeedConfigInfoRequestDefaultTypeInternal _QueryFeedConfigInfoRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryFeedConfigInfoResponse::QueryFeedConfigInfoResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.feed_config_info_)*/nullptr
  , /*decltype(_impl_.epoch_and_round_)*/nullptr} {}
struct QueryFeedConfigInfoResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryFeedConfigInfoResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryFeedConfigInfoResponseDefaultTypeInternal() {}
  union {
    QueryFeedConfigInfoResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryFeedConfigInfoResponseDefaultTypeInternal _QueryFeedConfigInfoResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryLatestRoundRequest::QueryLatestRoundRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.feed_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QueryLatestRoundRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryLatestRoundRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryLatestRoundRequestDefaultTypeInternal() {}
  union {
    QueryLatestRoundRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryLatestRoundRequestDefaultTypeInternal _QueryLatestRoundRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryLatestRoundResponse::QueryLatestRoundResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.data_)*/nullptr
  , /*decltype(_impl_.latest_round_id_)*/ ::uint64_t{0u}
} {}
struct QueryLatestRoundResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryLatestRoundResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryLatestRoundResponseDefaultTypeInternal() {}
  union {
    QueryLatestRoundResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryLatestRoundResponseDefaultTypeInternal _QueryLatestRoundResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryLatestTransmissionDetailsRequest::QueryLatestTransmissionDetailsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.feed_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QueryLatestTransmissionDetailsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryLatestTransmissionDetailsRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryLatestTransmissionDetailsRequestDefaultTypeInternal() {}
  union {
    QueryLatestTransmissionDetailsRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryLatestTransmissionDetailsRequestDefaultTypeInternal _QueryLatestTransmissionDetailsRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryLatestTransmissionDetailsResponse::QueryLatestTransmissionDetailsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.config_digest_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.epoch_and_round_)*/nullptr
  , /*decltype(_impl_.data_)*/nullptr} {}
struct QueryLatestTransmissionDetailsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryLatestTransmissionDetailsResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryLatestTransmissionDetailsResponseDefaultTypeInternal() {}
  union {
    QueryLatestTransmissionDetailsResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryLatestTransmissionDetailsResponseDefaultTypeInternal _QueryLatestTransmissionDetailsResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryOwedAmountRequest::QueryOwedAmountRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.transmitter_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QueryOwedAmountRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryOwedAmountRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryOwedAmountRequestDefaultTypeInternal() {}
  union {
    QueryOwedAmountRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryOwedAmountRequestDefaultTypeInternal _QueryOwedAmountRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryOwedAmountResponse::QueryOwedAmountResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.amount_)*/nullptr} {}
struct QueryOwedAmountResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryOwedAmountResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryOwedAmountResponseDefaultTypeInternal() {}
  union {
    QueryOwedAmountResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryOwedAmountResponseDefaultTypeInternal _QueryOwedAmountResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryModuleStateRequest::QueryModuleStateRequest(
    ::_pbi::ConstantInitialized) {}
struct QueryModuleStateRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryModuleStateRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryModuleStateRequestDefaultTypeInternal() {}
  union {
    QueryModuleStateRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryModuleStateRequestDefaultTypeInternal _QueryModuleStateRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryModuleStateResponse::QueryModuleStateResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.state_)*/nullptr} {}
struct QueryModuleStateResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryModuleStateResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryModuleStateResponseDefaultTypeInternal() {}
  union {
    QueryModuleStateResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryModuleStateResponseDefaultTypeInternal _QueryModuleStateResponse_default_instance_;
}  // namespace v1beta1
}  // namespace ocr
}  // namespace injective
static ::_pb::Metadata file_level_metadata_injective_2focr_2fv1beta1_2fquery_2eproto[14];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_injective_2focr_2fv1beta1_2fquery_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_injective_2focr_2fv1beta1_2fquery_2eproto = nullptr;
const ::uint32_t TableStruct_injective_2focr_2fv1beta1_2fquery_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::ocr::v1beta1::QueryParamsRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::ocr::v1beta1::QueryParamsResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::injective::ocr::v1beta1::QueryParamsResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::ocr::v1beta1::QueryParamsResponse, _impl_.params_),
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::ocr::v1beta1::QueryFeedConfigRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::ocr::v1beta1::QueryFeedConfigRequest, _impl_.feed_id_),
    PROTOBUF_FIELD_OFFSET(::injective::ocr::v1beta1::QueryFeedConfigResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::injective::ocr::v1beta1::QueryFeedConfigResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::ocr::v1beta1::QueryFeedConfigResponse, _impl_.feed_config_info_),
    PROTOBUF_FIELD_OFFSET(::injective::ocr::v1beta1::QueryFeedConfigResponse, _impl_.feed_config_),
    0,
    1,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::ocr::v1beta1::QueryFeedConfigInfoRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::ocr::v1beta1::QueryFeedConfigInfoRequest, _impl_.feed_id_),
    PROTOBUF_FIELD_OFFSET(::injective::ocr::v1beta1::QueryFeedConfigInfoResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::injective::ocr::v1beta1::QueryFeedConfigInfoResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::ocr::v1beta1::QueryFeedConfigInfoResponse, _impl_.feed_config_info_),
    PROTOBUF_FIELD_OFFSET(::injective::ocr::v1beta1::QueryFeedConfigInfoResponse, _impl_.epoch_and_round_),
    0,
    1,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::ocr::v1beta1::QueryLatestRoundRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::ocr::v1beta1::QueryLatestRoundRequest, _impl_.feed_id_),
    PROTOBUF_FIELD_OFFSET(::injective::ocr::v1beta1::QueryLatestRoundResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::injective::ocr::v1beta1::QueryLatestRoundResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::ocr::v1beta1::QueryLatestRoundResponse, _impl_.latest_round_id_),
    PROTOBUF_FIELD_OFFSET(::injective::ocr::v1beta1::QueryLatestRoundResponse, _impl_.data_),
    ~0u,
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::ocr::v1beta1::QueryLatestTransmissionDetailsRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::ocr::v1beta1::QueryLatestTransmissionDetailsRequest, _impl_.feed_id_),
    PROTOBUF_FIELD_OFFSET(::injective::ocr::v1beta1::QueryLatestTransmissionDetailsResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::injective::ocr::v1beta1::QueryLatestTransmissionDetailsResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::ocr::v1beta1::QueryLatestTransmissionDetailsResponse, _impl_.config_digest_),
    PROTOBUF_FIELD_OFFSET(::injective::ocr::v1beta1::QueryLatestTransmissionDetailsResponse, _impl_.epoch_and_round_),
    PROTOBUF_FIELD_OFFSET(::injective::ocr::v1beta1::QueryLatestTransmissionDetailsResponse, _impl_.data_),
    ~0u,
    0,
    1,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::ocr::v1beta1::QueryOwedAmountRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::ocr::v1beta1::QueryOwedAmountRequest, _impl_.transmitter_),
    PROTOBUF_FIELD_OFFSET(::injective::ocr::v1beta1::QueryOwedAmountResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::injective::ocr::v1beta1::QueryOwedAmountResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::ocr::v1beta1::QueryOwedAmountResponse, _impl_.amount_),
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::ocr::v1beta1::QueryModuleStateRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::ocr::v1beta1::QueryModuleStateResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::injective::ocr::v1beta1::QueryModuleStateResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::ocr::v1beta1::QueryModuleStateResponse, _impl_.state_),
    0,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::injective::ocr::v1beta1::QueryParamsRequest)},
        { 8, 17, -1, sizeof(::injective::ocr::v1beta1::QueryParamsResponse)},
        { 18, -1, -1, sizeof(::injective::ocr::v1beta1::QueryFeedConfigRequest)},
        { 27, 37, -1, sizeof(::injective::ocr::v1beta1::QueryFeedConfigResponse)},
        { 39, -1, -1, sizeof(::injective::ocr::v1beta1::QueryFeedConfigInfoRequest)},
        { 48, 58, -1, sizeof(::injective::ocr::v1beta1::QueryFeedConfigInfoResponse)},
        { 60, -1, -1, sizeof(::injective::ocr::v1beta1::QueryLatestRoundRequest)},
        { 69, 79, -1, sizeof(::injective::ocr::v1beta1::QueryLatestRoundResponse)},
        { 81, -1, -1, sizeof(::injective::ocr::v1beta1::QueryLatestTransmissionDetailsRequest)},
        { 90, 101, -1, sizeof(::injective::ocr::v1beta1::QueryLatestTransmissionDetailsResponse)},
        { 104, -1, -1, sizeof(::injective::ocr::v1beta1::QueryOwedAmountRequest)},
        { 113, 122, -1, sizeof(::injective::ocr::v1beta1::QueryOwedAmountResponse)},
        { 123, -1, -1, sizeof(::injective::ocr::v1beta1::QueryModuleStateRequest)},
        { 131, 140, -1, sizeof(::injective::ocr::v1beta1::QueryModuleStateResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::injective::ocr::v1beta1::_QueryParamsRequest_default_instance_._instance,
    &::injective::ocr::v1beta1::_QueryParamsResponse_default_instance_._instance,
    &::injective::ocr::v1beta1::_QueryFeedConfigRequest_default_instance_._instance,
    &::injective::ocr::v1beta1::_QueryFeedConfigResponse_default_instance_._instance,
    &::injective::ocr::v1beta1::_QueryFeedConfigInfoRequest_default_instance_._instance,
    &::injective::ocr::v1beta1::_QueryFeedConfigInfoResponse_default_instance_._instance,
    &::injective::ocr::v1beta1::_QueryLatestRoundRequest_default_instance_._instance,
    &::injective::ocr::v1beta1::_QueryLatestRoundResponse_default_instance_._instance,
    &::injective::ocr::v1beta1::_QueryLatestTransmissionDetailsRequest_default_instance_._instance,
    &::injective::ocr::v1beta1::_QueryLatestTransmissionDetailsResponse_default_instance_._instance,
    &::injective::ocr::v1beta1::_QueryOwedAmountRequest_default_instance_._instance,
    &::injective::ocr::v1beta1::_QueryOwedAmountResponse_default_instance_._instance,
    &::injective::ocr::v1beta1::_QueryModuleStateRequest_default_instance_._instance,
    &::injective::ocr::v1beta1::_QueryModuleStateResponse_default_instance_._instance,
};
const char descriptor_table_protodef_injective_2focr_2fv1beta1_2fquery_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n!injective/ocr/v1beta1/query.proto\022\025inj"
    "ective.ocr.v1beta1\032\034google/api/annotatio"
    "ns.proto\032\037injective/ocr/v1beta1/ocr.prot"
    "o\032\024gogoproto/gogo.proto\032\036cosmos/base/v1b"
    "eta1/coin.proto\032#injective/ocr/v1beta1/g"
    "enesis.proto\"\024\n\022QueryParamsRequest\"R\n\023Qu"
    "eryParamsResponse\022;\n\006params\030\001 \001(\0132\035.inje"
    "ctive.ocr.v1beta1.ParamsB\004\310\336\037\000R\006params\"1"
    "\n\026QueryFeedConfigRequest\022\027\n\007feed_id\030\001 \001("
    "\tR\006feedId\"\256\001\n\027QueryFeedConfigResponse\022O\n"
    "\020feed_config_info\030\001 \001(\0132%.injective.ocr."
    "v1beta1.FeedConfigInfoR\016feedConfigInfo\022B"
    "\n\013feed_config\030\002 \001(\0132!.injective.ocr.v1be"
    "ta1.FeedConfigR\nfeedConfig\"5\n\032QueryFeedC"
    "onfigInfoRequest\022\027\n\007feed_id\030\001 \001(\tR\006feedI"
    "d\"\274\001\n\033QueryFeedConfigInfoResponse\022O\n\020fee"
    "d_config_info\030\001 \001(\0132%.injective.ocr.v1be"
    "ta1.FeedConfigInfoR\016feedConfigInfo\022L\n\017ep"
    "och_and_round\030\002 \001(\0132$.injective.ocr.v1be"
    "ta1.EpochAndRoundR\repochAndRound\"2\n\027Quer"
    "yLatestRoundRequest\022\027\n\007feed_id\030\001 \001(\tR\006fe"
    "edId\"{\n\030QueryLatestRoundResponse\022&\n\017late"
    "st_round_id\030\001 \001(\004R\rlatestRoundId\0227\n\004data"
    "\030\002 \001(\0132#.injective.ocr.v1beta1.Transmiss"
    "ionR\004data\"@\n%QueryLatestTransmissionDeta"
    "ilsRequest\022\027\n\007feed_id\030\001 \001(\tR\006feedId\"\324\001\n&"
    "QueryLatestTransmissionDetailsResponse\022#"
    "\n\rconfig_digest\030\001 \001(\014R\014configDigest\022L\n\017e"
    "poch_and_round\030\002 \001(\0132$.injective.ocr.v1b"
    "eta1.EpochAndRoundR\repochAndRound\0227\n\004dat"
    "a\030\003 \001(\0132#.injective.ocr.v1beta1.Transmis"
    "sionR\004data\":\n\026QueryOwedAmountRequest\022 \n\013"
    "transmitter\030\001 \001(\tR\013transmitter\"R\n\027QueryO"
    "wedAmountResponse\0227\n\006amount\030\001 \001(\0132\031.cosm"
    "os.base.v1beta1.CoinB\004\310\336\037\000R\006amount\"\031\n\027Qu"
    "eryModuleStateRequest\"U\n\030QueryModuleStat"
    "eResponse\0229\n\005state\030\001 \001(\0132#.injective.ocr"
    ".v1beta1.GenesisStateR\005state2\273\t\n\005Query\022\206"
    "\001\n\006Params\022).injective.ocr.v1beta1.QueryP"
    "aramsRequest\032*.injective.ocr.v1beta1.Que"
    "ryParamsResponse\"%\202\323\344\223\002\037\022\035/chainlink/ocr"
    "/v1beta1/params\022\241\001\n\nFeedConfig\022-.injecti"
    "ve.ocr.v1beta1.QueryFeedConfigRequest\032.."
    "injective.ocr.v1beta1.QueryFeedConfigRes"
    "ponse\"4\202\323\344\223\002.\022,/chainlink/ocr/v1beta1/fe"
    "ed_config/{feed_id}\022\262\001\n\016FeedConfigInfo\0221"
    ".injective.ocr.v1beta1.QueryFeedConfigIn"
    "foRequest\0322.injective.ocr.v1beta1.QueryF"
    "eedConfigInfoResponse\"9\202\323\344\223\0023\0221/chainlin"
    "k/ocr/v1beta1/feed_config_info/{feed_id}"
    "\022\245\001\n\013LatestRound\022..injective.ocr.v1beta1"
    ".QueryLatestRoundRequest\032/.injective.ocr"
    ".v1beta1.QueryLatestRoundResponse\"5\202\323\344\223\002"
    "/\022-/chainlink/ocr/v1beta1/latest_round/{"
    "feed_id}\022\336\001\n\031LatestTransmissionDetails\022<"
    ".injective.ocr.v1beta1.QueryLatestTransm"
    "issionDetailsRequest\032=.injective.ocr.v1b"
    "eta1.QueryLatestTransmissionDetailsRespo"
    "nse\"D\202\323\344\223\002>\022</chainlink/ocr/v1beta1/late"
    "st_transmission_details/{feed_id}\022\245\001\n\nOw"
    "edAmount\022-.injective.ocr.v1beta1.QueryOw"
    "edAmountRequest\032..injective.ocr.v1beta1."
    "QueryOwedAmountResponse\"8\202\323\344\223\0022\0220/chainl"
    "ink/ocr/v1beta1/owed_amount/{transmitter"
    "}\022\236\001\n\016OcrModuleState\022..injective.ocr.v1b"
    "eta1.QueryModuleStateRequest\032/.injective"
    ".ocr.v1beta1.QueryModuleStateResponse\"+\202"
    "\323\344\223\002%\022#/chainlink/ocr/v1beta1/module_sta"
    "teB\350\001\n\031com.injective.ocr.v1beta1B\nQueryP"
    "rotoP\001ZIgithub.com/InjectiveLabs/injecti"
    "ve-core/injective-chain/modules/ocr/type"
    "s\242\002\003IOX\252\002\025Injective.Ocr.V1beta1\312\002\025Inject"
    "ive\\Ocr\\V1beta1\342\002!Injective\\Ocr\\V1beta1\\"
    "GPBMetadata\352\002\027Injective::Ocr::V1beta1b\006p"
    "roto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_injective_2focr_2fv1beta1_2fquery_2eproto_deps[5] =
    {
        &::descriptor_table_cosmos_2fbase_2fv1beta1_2fcoin_2eproto,
        &::descriptor_table_gogoproto_2fgogo_2eproto,
        &::descriptor_table_google_2fapi_2fannotations_2eproto,
        &::descriptor_table_injective_2focr_2fv1beta1_2fgenesis_2eproto,
        &::descriptor_table_injective_2focr_2fv1beta1_2focr_2eproto,
};
static ::absl::once_flag descriptor_table_injective_2focr_2fv1beta1_2fquery_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_injective_2focr_2fv1beta1_2fquery_2eproto = {
    false,
    false,
    2965,
    descriptor_table_protodef_injective_2focr_2fv1beta1_2fquery_2eproto,
    "injective/ocr/v1beta1/query.proto",
    &descriptor_table_injective_2focr_2fv1beta1_2fquery_2eproto_once,
    descriptor_table_injective_2focr_2fv1beta1_2fquery_2eproto_deps,
    5,
    14,
    schemas,
    file_default_instances,
    TableStruct_injective_2focr_2fv1beta1_2fquery_2eproto::offsets,
    file_level_metadata_injective_2focr_2fv1beta1_2fquery_2eproto,
    file_level_enum_descriptors_injective_2focr_2fv1beta1_2fquery_2eproto,
    file_level_service_descriptors_injective_2focr_2fv1beta1_2fquery_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_injective_2focr_2fv1beta1_2fquery_2eproto_getter() {
  return &descriptor_table_injective_2focr_2fv1beta1_2fquery_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_injective_2focr_2fv1beta1_2fquery_2eproto(&descriptor_table_injective_2focr_2fv1beta1_2fquery_2eproto);
namespace injective {
namespace ocr {
namespace v1beta1 {
// ===================================================================

class QueryParamsRequest::_Internal {
 public:
};

QueryParamsRequest::QueryParamsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:injective.ocr.v1beta1.QueryParamsRequest)
}
QueryParamsRequest::QueryParamsRequest(const QueryParamsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  QueryParamsRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:injective.ocr.v1beta1.QueryParamsRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryParamsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryParamsRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata QueryParamsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2focr_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2focr_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2focr_2fv1beta1_2fquery_2eproto[0]);
}
// ===================================================================

class QueryParamsResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<QueryParamsResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(QueryParamsResponse, _impl_._has_bits_);
  static const ::injective::ocr::v1beta1::Params& params(const QueryParamsResponse* msg);
  static void set_has_params(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::injective::ocr::v1beta1::Params&
QueryParamsResponse::_Internal::params(const QueryParamsResponse* msg) {
  return *msg->_impl_.params_;
}
void QueryParamsResponse::clear_params() {
  if (_impl_.params_ != nullptr) _impl_.params_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
QueryParamsResponse::QueryParamsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.ocr.v1beta1.QueryParamsResponse)
}
QueryParamsResponse::QueryParamsResponse(const QueryParamsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryParamsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.params_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.params_ = new ::injective::ocr::v1beta1::Params(*from._impl_.params_);
  }
  // @@protoc_insertion_point(copy_constructor:injective.ocr.v1beta1.QueryParamsResponse)
}

inline void QueryParamsResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.params_){nullptr}
  };
}

QueryParamsResponse::~QueryParamsResponse() {
  // @@protoc_insertion_point(destructor:injective.ocr.v1beta1.QueryParamsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryParamsResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.params_;
}

void QueryParamsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryParamsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.ocr.v1beta1.QueryParamsResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.params_ != nullptr);
    _impl_.params_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryParamsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .injective.ocr.v1beta1.Params params = 1 [json_name = "params", (.gogoproto.nullable) = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_params(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryParamsResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.ocr.v1beta1.QueryParamsResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .injective.ocr.v1beta1.Params params = 1 [json_name = "params", (.gogoproto.nullable) = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::params(this),
        _Internal::params(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.ocr.v1beta1.QueryParamsResponse)
  return target;
}

::size_t QueryParamsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.ocr.v1beta1.QueryParamsResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .injective.ocr.v1beta1.Params params = 1 [json_name = "params", (.gogoproto.nullable) = false];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.params_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryParamsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryParamsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryParamsResponse::GetClassData() const { return &_class_data_; }


void QueryParamsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryParamsResponse*>(&to_msg);
  auto& from = static_cast<const QueryParamsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.ocr.v1beta1.QueryParamsResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_params()->::injective::ocr::v1beta1::Params::MergeFrom(
        from._internal_params());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryParamsResponse::CopyFrom(const QueryParamsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.ocr.v1beta1.QueryParamsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryParamsResponse::IsInitialized() const {
  return true;
}

void QueryParamsResponse::InternalSwap(QueryParamsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.params_, other->_impl_.params_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryParamsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2focr_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2focr_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2focr_2fv1beta1_2fquery_2eproto[1]);
}
// ===================================================================

class QueryFeedConfigRequest::_Internal {
 public:
};

QueryFeedConfigRequest::QueryFeedConfigRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.ocr.v1beta1.QueryFeedConfigRequest)
}
QueryFeedConfigRequest::QueryFeedConfigRequest(const QueryFeedConfigRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryFeedConfigRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.feed_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.feed_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.feed_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_feed_id().empty()) {
    _this->_impl_.feed_id_.Set(from._internal_feed_id(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:injective.ocr.v1beta1.QueryFeedConfigRequest)
}

inline void QueryFeedConfigRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.feed_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.feed_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.feed_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

QueryFeedConfigRequest::~QueryFeedConfigRequest() {
  // @@protoc_insertion_point(destructor:injective.ocr.v1beta1.QueryFeedConfigRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryFeedConfigRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.feed_id_.Destroy();
}

void QueryFeedConfigRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryFeedConfigRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.ocr.v1beta1.QueryFeedConfigRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.feed_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryFeedConfigRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string feed_id = 1 [json_name = "feedId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_feed_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.ocr.v1beta1.QueryFeedConfigRequest.feed_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryFeedConfigRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.ocr.v1beta1.QueryFeedConfigRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string feed_id = 1 [json_name = "feedId"];
  if (!this->_internal_feed_id().empty()) {
    const std::string& _s = this->_internal_feed_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.ocr.v1beta1.QueryFeedConfigRequest.feed_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.ocr.v1beta1.QueryFeedConfigRequest)
  return target;
}

::size_t QueryFeedConfigRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.ocr.v1beta1.QueryFeedConfigRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string feed_id = 1 [json_name = "feedId"];
  if (!this->_internal_feed_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_feed_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryFeedConfigRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryFeedConfigRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryFeedConfigRequest::GetClassData() const { return &_class_data_; }


void QueryFeedConfigRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryFeedConfigRequest*>(&to_msg);
  auto& from = static_cast<const QueryFeedConfigRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.ocr.v1beta1.QueryFeedConfigRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_feed_id().empty()) {
    _this->_internal_set_feed_id(from._internal_feed_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryFeedConfigRequest::CopyFrom(const QueryFeedConfigRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.ocr.v1beta1.QueryFeedConfigRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryFeedConfigRequest::IsInitialized() const {
  return true;
}

void QueryFeedConfigRequest::InternalSwap(QueryFeedConfigRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.feed_id_, lhs_arena,
                                       &other->_impl_.feed_id_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryFeedConfigRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2focr_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2focr_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2focr_2fv1beta1_2fquery_2eproto[2]);
}
// ===================================================================

class QueryFeedConfigResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<QueryFeedConfigResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(QueryFeedConfigResponse, _impl_._has_bits_);
  static const ::injective::ocr::v1beta1::FeedConfigInfo& feed_config_info(const QueryFeedConfigResponse* msg);
  static void set_has_feed_config_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::injective::ocr::v1beta1::FeedConfig& feed_config(const QueryFeedConfigResponse* msg);
  static void set_has_feed_config(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::injective::ocr::v1beta1::FeedConfigInfo&
QueryFeedConfigResponse::_Internal::feed_config_info(const QueryFeedConfigResponse* msg) {
  return *msg->_impl_.feed_config_info_;
}
const ::injective::ocr::v1beta1::FeedConfig&
QueryFeedConfigResponse::_Internal::feed_config(const QueryFeedConfigResponse* msg) {
  return *msg->_impl_.feed_config_;
}
void QueryFeedConfigResponse::clear_feed_config_info() {
  if (_impl_.feed_config_info_ != nullptr) _impl_.feed_config_info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void QueryFeedConfigResponse::clear_feed_config() {
  if (_impl_.feed_config_ != nullptr) _impl_.feed_config_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
QueryFeedConfigResponse::QueryFeedConfigResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.ocr.v1beta1.QueryFeedConfigResponse)
}
QueryFeedConfigResponse::QueryFeedConfigResponse(const QueryFeedConfigResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryFeedConfigResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.feed_config_info_){nullptr}
    , decltype(_impl_.feed_config_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.feed_config_info_ = new ::injective::ocr::v1beta1::FeedConfigInfo(*from._impl_.feed_config_info_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.feed_config_ = new ::injective::ocr::v1beta1::FeedConfig(*from._impl_.feed_config_);
  }
  // @@protoc_insertion_point(copy_constructor:injective.ocr.v1beta1.QueryFeedConfigResponse)
}

inline void QueryFeedConfigResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.feed_config_info_){nullptr}
    , decltype(_impl_.feed_config_){nullptr}
  };
}

QueryFeedConfigResponse::~QueryFeedConfigResponse() {
  // @@protoc_insertion_point(destructor:injective.ocr.v1beta1.QueryFeedConfigResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryFeedConfigResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.feed_config_info_;
  if (this != internal_default_instance()) delete _impl_.feed_config_;
}

void QueryFeedConfigResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryFeedConfigResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.ocr.v1beta1.QueryFeedConfigResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.feed_config_info_ != nullptr);
      _impl_.feed_config_info_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.feed_config_ != nullptr);
      _impl_.feed_config_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryFeedConfigResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .injective.ocr.v1beta1.FeedConfigInfo feed_config_info = 1 [json_name = "feedConfigInfo"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_feed_config_info(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .injective.ocr.v1beta1.FeedConfig feed_config = 2 [json_name = "feedConfig"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_feed_config(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryFeedConfigResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.ocr.v1beta1.QueryFeedConfigResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .injective.ocr.v1beta1.FeedConfigInfo feed_config_info = 1 [json_name = "feedConfigInfo"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::feed_config_info(this),
        _Internal::feed_config_info(this).GetCachedSize(), target, stream);
  }

  // .injective.ocr.v1beta1.FeedConfig feed_config = 2 [json_name = "feedConfig"];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::feed_config(this),
        _Internal::feed_config(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.ocr.v1beta1.QueryFeedConfigResponse)
  return target;
}

::size_t QueryFeedConfigResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.ocr.v1beta1.QueryFeedConfigResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .injective.ocr.v1beta1.FeedConfigInfo feed_config_info = 1 [json_name = "feedConfigInfo"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.feed_config_info_);
    }

    // .injective.ocr.v1beta1.FeedConfig feed_config = 2 [json_name = "feedConfig"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.feed_config_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryFeedConfigResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryFeedConfigResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryFeedConfigResponse::GetClassData() const { return &_class_data_; }


void QueryFeedConfigResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryFeedConfigResponse*>(&to_msg);
  auto& from = static_cast<const QueryFeedConfigResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.ocr.v1beta1.QueryFeedConfigResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_feed_config_info()->::injective::ocr::v1beta1::FeedConfigInfo::MergeFrom(
          from._internal_feed_config_info());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_feed_config()->::injective::ocr::v1beta1::FeedConfig::MergeFrom(
          from._internal_feed_config());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryFeedConfigResponse::CopyFrom(const QueryFeedConfigResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.ocr.v1beta1.QueryFeedConfigResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryFeedConfigResponse::IsInitialized() const {
  return true;
}

void QueryFeedConfigResponse::InternalSwap(QueryFeedConfigResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(QueryFeedConfigResponse, _impl_.feed_config_)
      + sizeof(QueryFeedConfigResponse::_impl_.feed_config_)
      - PROTOBUF_FIELD_OFFSET(QueryFeedConfigResponse, _impl_.feed_config_info_)>(
          reinterpret_cast<char*>(&_impl_.feed_config_info_),
          reinterpret_cast<char*>(&other->_impl_.feed_config_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryFeedConfigResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2focr_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2focr_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2focr_2fv1beta1_2fquery_2eproto[3]);
}
// ===================================================================

class QueryFeedConfigInfoRequest::_Internal {
 public:
};

QueryFeedConfigInfoRequest::QueryFeedConfigInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.ocr.v1beta1.QueryFeedConfigInfoRequest)
}
QueryFeedConfigInfoRequest::QueryFeedConfigInfoRequest(const QueryFeedConfigInfoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryFeedConfigInfoRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.feed_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.feed_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.feed_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_feed_id().empty()) {
    _this->_impl_.feed_id_.Set(from._internal_feed_id(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:injective.ocr.v1beta1.QueryFeedConfigInfoRequest)
}

inline void QueryFeedConfigInfoRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.feed_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.feed_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.feed_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

QueryFeedConfigInfoRequest::~QueryFeedConfigInfoRequest() {
  // @@protoc_insertion_point(destructor:injective.ocr.v1beta1.QueryFeedConfigInfoRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryFeedConfigInfoRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.feed_id_.Destroy();
}

void QueryFeedConfigInfoRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryFeedConfigInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.ocr.v1beta1.QueryFeedConfigInfoRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.feed_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryFeedConfigInfoRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string feed_id = 1 [json_name = "feedId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_feed_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.ocr.v1beta1.QueryFeedConfigInfoRequest.feed_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryFeedConfigInfoRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.ocr.v1beta1.QueryFeedConfigInfoRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string feed_id = 1 [json_name = "feedId"];
  if (!this->_internal_feed_id().empty()) {
    const std::string& _s = this->_internal_feed_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.ocr.v1beta1.QueryFeedConfigInfoRequest.feed_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.ocr.v1beta1.QueryFeedConfigInfoRequest)
  return target;
}

::size_t QueryFeedConfigInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.ocr.v1beta1.QueryFeedConfigInfoRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string feed_id = 1 [json_name = "feedId"];
  if (!this->_internal_feed_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_feed_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryFeedConfigInfoRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryFeedConfigInfoRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryFeedConfigInfoRequest::GetClassData() const { return &_class_data_; }


void QueryFeedConfigInfoRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryFeedConfigInfoRequest*>(&to_msg);
  auto& from = static_cast<const QueryFeedConfigInfoRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.ocr.v1beta1.QueryFeedConfigInfoRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_feed_id().empty()) {
    _this->_internal_set_feed_id(from._internal_feed_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryFeedConfigInfoRequest::CopyFrom(const QueryFeedConfigInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.ocr.v1beta1.QueryFeedConfigInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryFeedConfigInfoRequest::IsInitialized() const {
  return true;
}

void QueryFeedConfigInfoRequest::InternalSwap(QueryFeedConfigInfoRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.feed_id_, lhs_arena,
                                       &other->_impl_.feed_id_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryFeedConfigInfoRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2focr_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2focr_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2focr_2fv1beta1_2fquery_2eproto[4]);
}
// ===================================================================

class QueryFeedConfigInfoResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<QueryFeedConfigInfoResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(QueryFeedConfigInfoResponse, _impl_._has_bits_);
  static const ::injective::ocr::v1beta1::FeedConfigInfo& feed_config_info(const QueryFeedConfigInfoResponse* msg);
  static void set_has_feed_config_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::injective::ocr::v1beta1::EpochAndRound& epoch_and_round(const QueryFeedConfigInfoResponse* msg);
  static void set_has_epoch_and_round(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::injective::ocr::v1beta1::FeedConfigInfo&
QueryFeedConfigInfoResponse::_Internal::feed_config_info(const QueryFeedConfigInfoResponse* msg) {
  return *msg->_impl_.feed_config_info_;
}
const ::injective::ocr::v1beta1::EpochAndRound&
QueryFeedConfigInfoResponse::_Internal::epoch_and_round(const QueryFeedConfigInfoResponse* msg) {
  return *msg->_impl_.epoch_and_round_;
}
void QueryFeedConfigInfoResponse::clear_feed_config_info() {
  if (_impl_.feed_config_info_ != nullptr) _impl_.feed_config_info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void QueryFeedConfigInfoResponse::clear_epoch_and_round() {
  if (_impl_.epoch_and_round_ != nullptr) _impl_.epoch_and_round_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
QueryFeedConfigInfoResponse::QueryFeedConfigInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.ocr.v1beta1.QueryFeedConfigInfoResponse)
}
QueryFeedConfigInfoResponse::QueryFeedConfigInfoResponse(const QueryFeedConfigInfoResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryFeedConfigInfoResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.feed_config_info_){nullptr}
    , decltype(_impl_.epoch_and_round_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.feed_config_info_ = new ::injective::ocr::v1beta1::FeedConfigInfo(*from._impl_.feed_config_info_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.epoch_and_round_ = new ::injective::ocr::v1beta1::EpochAndRound(*from._impl_.epoch_and_round_);
  }
  // @@protoc_insertion_point(copy_constructor:injective.ocr.v1beta1.QueryFeedConfigInfoResponse)
}

inline void QueryFeedConfigInfoResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.feed_config_info_){nullptr}
    , decltype(_impl_.epoch_and_round_){nullptr}
  };
}

QueryFeedConfigInfoResponse::~QueryFeedConfigInfoResponse() {
  // @@protoc_insertion_point(destructor:injective.ocr.v1beta1.QueryFeedConfigInfoResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryFeedConfigInfoResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.feed_config_info_;
  if (this != internal_default_instance()) delete _impl_.epoch_and_round_;
}

void QueryFeedConfigInfoResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryFeedConfigInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.ocr.v1beta1.QueryFeedConfigInfoResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.feed_config_info_ != nullptr);
      _impl_.feed_config_info_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.epoch_and_round_ != nullptr);
      _impl_.epoch_and_round_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryFeedConfigInfoResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .injective.ocr.v1beta1.FeedConfigInfo feed_config_info = 1 [json_name = "feedConfigInfo"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_feed_config_info(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .injective.ocr.v1beta1.EpochAndRound epoch_and_round = 2 [json_name = "epochAndRound"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_epoch_and_round(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryFeedConfigInfoResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.ocr.v1beta1.QueryFeedConfigInfoResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .injective.ocr.v1beta1.FeedConfigInfo feed_config_info = 1 [json_name = "feedConfigInfo"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::feed_config_info(this),
        _Internal::feed_config_info(this).GetCachedSize(), target, stream);
  }

  // .injective.ocr.v1beta1.EpochAndRound epoch_and_round = 2 [json_name = "epochAndRound"];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::epoch_and_round(this),
        _Internal::epoch_and_round(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.ocr.v1beta1.QueryFeedConfigInfoResponse)
  return target;
}

::size_t QueryFeedConfigInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.ocr.v1beta1.QueryFeedConfigInfoResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .injective.ocr.v1beta1.FeedConfigInfo feed_config_info = 1 [json_name = "feedConfigInfo"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.feed_config_info_);
    }

    // .injective.ocr.v1beta1.EpochAndRound epoch_and_round = 2 [json_name = "epochAndRound"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.epoch_and_round_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryFeedConfigInfoResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryFeedConfigInfoResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryFeedConfigInfoResponse::GetClassData() const { return &_class_data_; }


void QueryFeedConfigInfoResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryFeedConfigInfoResponse*>(&to_msg);
  auto& from = static_cast<const QueryFeedConfigInfoResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.ocr.v1beta1.QueryFeedConfigInfoResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_feed_config_info()->::injective::ocr::v1beta1::FeedConfigInfo::MergeFrom(
          from._internal_feed_config_info());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_epoch_and_round()->::injective::ocr::v1beta1::EpochAndRound::MergeFrom(
          from._internal_epoch_and_round());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryFeedConfigInfoResponse::CopyFrom(const QueryFeedConfigInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.ocr.v1beta1.QueryFeedConfigInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryFeedConfigInfoResponse::IsInitialized() const {
  return true;
}

void QueryFeedConfigInfoResponse::InternalSwap(QueryFeedConfigInfoResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(QueryFeedConfigInfoResponse, _impl_.epoch_and_round_)
      + sizeof(QueryFeedConfigInfoResponse::_impl_.epoch_and_round_)
      - PROTOBUF_FIELD_OFFSET(QueryFeedConfigInfoResponse, _impl_.feed_config_info_)>(
          reinterpret_cast<char*>(&_impl_.feed_config_info_),
          reinterpret_cast<char*>(&other->_impl_.feed_config_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryFeedConfigInfoResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2focr_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2focr_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2focr_2fv1beta1_2fquery_2eproto[5]);
}
// ===================================================================

class QueryLatestRoundRequest::_Internal {
 public:
};

QueryLatestRoundRequest::QueryLatestRoundRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.ocr.v1beta1.QueryLatestRoundRequest)
}
QueryLatestRoundRequest::QueryLatestRoundRequest(const QueryLatestRoundRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryLatestRoundRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.feed_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.feed_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.feed_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_feed_id().empty()) {
    _this->_impl_.feed_id_.Set(from._internal_feed_id(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:injective.ocr.v1beta1.QueryLatestRoundRequest)
}

inline void QueryLatestRoundRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.feed_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.feed_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.feed_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

QueryLatestRoundRequest::~QueryLatestRoundRequest() {
  // @@protoc_insertion_point(destructor:injective.ocr.v1beta1.QueryLatestRoundRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryLatestRoundRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.feed_id_.Destroy();
}

void QueryLatestRoundRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryLatestRoundRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.ocr.v1beta1.QueryLatestRoundRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.feed_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryLatestRoundRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string feed_id = 1 [json_name = "feedId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_feed_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.ocr.v1beta1.QueryLatestRoundRequest.feed_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryLatestRoundRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.ocr.v1beta1.QueryLatestRoundRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string feed_id = 1 [json_name = "feedId"];
  if (!this->_internal_feed_id().empty()) {
    const std::string& _s = this->_internal_feed_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.ocr.v1beta1.QueryLatestRoundRequest.feed_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.ocr.v1beta1.QueryLatestRoundRequest)
  return target;
}

::size_t QueryLatestRoundRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.ocr.v1beta1.QueryLatestRoundRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string feed_id = 1 [json_name = "feedId"];
  if (!this->_internal_feed_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_feed_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryLatestRoundRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryLatestRoundRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryLatestRoundRequest::GetClassData() const { return &_class_data_; }


void QueryLatestRoundRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryLatestRoundRequest*>(&to_msg);
  auto& from = static_cast<const QueryLatestRoundRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.ocr.v1beta1.QueryLatestRoundRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_feed_id().empty()) {
    _this->_internal_set_feed_id(from._internal_feed_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryLatestRoundRequest::CopyFrom(const QueryLatestRoundRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.ocr.v1beta1.QueryLatestRoundRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryLatestRoundRequest::IsInitialized() const {
  return true;
}

void QueryLatestRoundRequest::InternalSwap(QueryLatestRoundRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.feed_id_, lhs_arena,
                                       &other->_impl_.feed_id_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryLatestRoundRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2focr_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2focr_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2focr_2fv1beta1_2fquery_2eproto[6]);
}
// ===================================================================

class QueryLatestRoundResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<QueryLatestRoundResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(QueryLatestRoundResponse, _impl_._has_bits_);
  static const ::injective::ocr::v1beta1::Transmission& data(const QueryLatestRoundResponse* msg);
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::injective::ocr::v1beta1::Transmission&
QueryLatestRoundResponse::_Internal::data(const QueryLatestRoundResponse* msg) {
  return *msg->_impl_.data_;
}
void QueryLatestRoundResponse::clear_data() {
  if (_impl_.data_ != nullptr) _impl_.data_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
QueryLatestRoundResponse::QueryLatestRoundResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.ocr.v1beta1.QueryLatestRoundResponse)
}
QueryLatestRoundResponse::QueryLatestRoundResponse(const QueryLatestRoundResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryLatestRoundResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.data_){nullptr}
    , decltype(_impl_.latest_round_id_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.data_ = new ::injective::ocr::v1beta1::Transmission(*from._impl_.data_);
  }
  _this->_impl_.latest_round_id_ = from._impl_.latest_round_id_;
  // @@protoc_insertion_point(copy_constructor:injective.ocr.v1beta1.QueryLatestRoundResponse)
}

inline void QueryLatestRoundResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.data_){nullptr}
    , decltype(_impl_.latest_round_id_) { ::uint64_t{0u} }

  };
}

QueryLatestRoundResponse::~QueryLatestRoundResponse() {
  // @@protoc_insertion_point(destructor:injective.ocr.v1beta1.QueryLatestRoundResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryLatestRoundResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.data_;
}

void QueryLatestRoundResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryLatestRoundResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.ocr.v1beta1.QueryLatestRoundResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.data_ != nullptr);
    _impl_.data_->Clear();
  }
  _impl_.latest_round_id_ = ::uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryLatestRoundResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 latest_round_id = 1 [json_name = "latestRoundId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.latest_round_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .injective.ocr.v1beta1.Transmission data = 2 [json_name = "data"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryLatestRoundResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.ocr.v1beta1.QueryLatestRoundResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 latest_round_id = 1 [json_name = "latestRoundId"];
  if (this->_internal_latest_round_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_latest_round_id(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .injective.ocr.v1beta1.Transmission data = 2 [json_name = "data"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::data(this),
        _Internal::data(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.ocr.v1beta1.QueryLatestRoundResponse)
  return target;
}

::size_t QueryLatestRoundResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.ocr.v1beta1.QueryLatestRoundResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .injective.ocr.v1beta1.Transmission data = 2 [json_name = "data"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.data_);
  }

  // uint64 latest_round_id = 1 [json_name = "latestRoundId"];
  if (this->_internal_latest_round_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_latest_round_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryLatestRoundResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryLatestRoundResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryLatestRoundResponse::GetClassData() const { return &_class_data_; }


void QueryLatestRoundResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryLatestRoundResponse*>(&to_msg);
  auto& from = static_cast<const QueryLatestRoundResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.ocr.v1beta1.QueryLatestRoundResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_data()->::injective::ocr::v1beta1::Transmission::MergeFrom(
        from._internal_data());
  }
  if (from._internal_latest_round_id() != 0) {
    _this->_internal_set_latest_round_id(from._internal_latest_round_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryLatestRoundResponse::CopyFrom(const QueryLatestRoundResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.ocr.v1beta1.QueryLatestRoundResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryLatestRoundResponse::IsInitialized() const {
  return true;
}

void QueryLatestRoundResponse::InternalSwap(QueryLatestRoundResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(QueryLatestRoundResponse, _impl_.latest_round_id_)
      + sizeof(QueryLatestRoundResponse::_impl_.latest_round_id_)
      - PROTOBUF_FIELD_OFFSET(QueryLatestRoundResponse, _impl_.data_)>(
          reinterpret_cast<char*>(&_impl_.data_),
          reinterpret_cast<char*>(&other->_impl_.data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryLatestRoundResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2focr_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2focr_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2focr_2fv1beta1_2fquery_2eproto[7]);
}
// ===================================================================

class QueryLatestTransmissionDetailsRequest::_Internal {
 public:
};

QueryLatestTransmissionDetailsRequest::QueryLatestTransmissionDetailsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.ocr.v1beta1.QueryLatestTransmissionDetailsRequest)
}
QueryLatestTransmissionDetailsRequest::QueryLatestTransmissionDetailsRequest(const QueryLatestTransmissionDetailsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryLatestTransmissionDetailsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.feed_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.feed_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.feed_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_feed_id().empty()) {
    _this->_impl_.feed_id_.Set(from._internal_feed_id(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:injective.ocr.v1beta1.QueryLatestTransmissionDetailsRequest)
}

inline void QueryLatestTransmissionDetailsRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.feed_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.feed_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.feed_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

QueryLatestTransmissionDetailsRequest::~QueryLatestTransmissionDetailsRequest() {
  // @@protoc_insertion_point(destructor:injective.ocr.v1beta1.QueryLatestTransmissionDetailsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryLatestTransmissionDetailsRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.feed_id_.Destroy();
}

void QueryLatestTransmissionDetailsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryLatestTransmissionDetailsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.ocr.v1beta1.QueryLatestTransmissionDetailsRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.feed_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryLatestTransmissionDetailsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string feed_id = 1 [json_name = "feedId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_feed_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.ocr.v1beta1.QueryLatestTransmissionDetailsRequest.feed_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryLatestTransmissionDetailsRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.ocr.v1beta1.QueryLatestTransmissionDetailsRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string feed_id = 1 [json_name = "feedId"];
  if (!this->_internal_feed_id().empty()) {
    const std::string& _s = this->_internal_feed_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.ocr.v1beta1.QueryLatestTransmissionDetailsRequest.feed_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.ocr.v1beta1.QueryLatestTransmissionDetailsRequest)
  return target;
}

::size_t QueryLatestTransmissionDetailsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.ocr.v1beta1.QueryLatestTransmissionDetailsRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string feed_id = 1 [json_name = "feedId"];
  if (!this->_internal_feed_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_feed_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryLatestTransmissionDetailsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryLatestTransmissionDetailsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryLatestTransmissionDetailsRequest::GetClassData() const { return &_class_data_; }


void QueryLatestTransmissionDetailsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryLatestTransmissionDetailsRequest*>(&to_msg);
  auto& from = static_cast<const QueryLatestTransmissionDetailsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.ocr.v1beta1.QueryLatestTransmissionDetailsRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_feed_id().empty()) {
    _this->_internal_set_feed_id(from._internal_feed_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryLatestTransmissionDetailsRequest::CopyFrom(const QueryLatestTransmissionDetailsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.ocr.v1beta1.QueryLatestTransmissionDetailsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryLatestTransmissionDetailsRequest::IsInitialized() const {
  return true;
}

void QueryLatestTransmissionDetailsRequest::InternalSwap(QueryLatestTransmissionDetailsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.feed_id_, lhs_arena,
                                       &other->_impl_.feed_id_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryLatestTransmissionDetailsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2focr_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2focr_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2focr_2fv1beta1_2fquery_2eproto[8]);
}
// ===================================================================

class QueryLatestTransmissionDetailsResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<QueryLatestTransmissionDetailsResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(QueryLatestTransmissionDetailsResponse, _impl_._has_bits_);
  static const ::injective::ocr::v1beta1::EpochAndRound& epoch_and_round(const QueryLatestTransmissionDetailsResponse* msg);
  static void set_has_epoch_and_round(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::injective::ocr::v1beta1::Transmission& data(const QueryLatestTransmissionDetailsResponse* msg);
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::injective::ocr::v1beta1::EpochAndRound&
QueryLatestTransmissionDetailsResponse::_Internal::epoch_and_round(const QueryLatestTransmissionDetailsResponse* msg) {
  return *msg->_impl_.epoch_and_round_;
}
const ::injective::ocr::v1beta1::Transmission&
QueryLatestTransmissionDetailsResponse::_Internal::data(const QueryLatestTransmissionDetailsResponse* msg) {
  return *msg->_impl_.data_;
}
void QueryLatestTransmissionDetailsResponse::clear_epoch_and_round() {
  if (_impl_.epoch_and_round_ != nullptr) _impl_.epoch_and_round_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void QueryLatestTransmissionDetailsResponse::clear_data() {
  if (_impl_.data_ != nullptr) _impl_.data_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
QueryLatestTransmissionDetailsResponse::QueryLatestTransmissionDetailsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.ocr.v1beta1.QueryLatestTransmissionDetailsResponse)
}
QueryLatestTransmissionDetailsResponse::QueryLatestTransmissionDetailsResponse(const QueryLatestTransmissionDetailsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryLatestTransmissionDetailsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.config_digest_) {}

    , decltype(_impl_.epoch_and_round_){nullptr}
    , decltype(_impl_.data_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.config_digest_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.config_digest_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_config_digest().empty()) {
    _this->_impl_.config_digest_.Set(from._internal_config_digest(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.epoch_and_round_ = new ::injective::ocr::v1beta1::EpochAndRound(*from._impl_.epoch_and_round_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.data_ = new ::injective::ocr::v1beta1::Transmission(*from._impl_.data_);
  }
  // @@protoc_insertion_point(copy_constructor:injective.ocr.v1beta1.QueryLatestTransmissionDetailsResponse)
}

inline void QueryLatestTransmissionDetailsResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.config_digest_) {}

    , decltype(_impl_.epoch_and_round_){nullptr}
    , decltype(_impl_.data_){nullptr}
  };
  _impl_.config_digest_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.config_digest_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

QueryLatestTransmissionDetailsResponse::~QueryLatestTransmissionDetailsResponse() {
  // @@protoc_insertion_point(destructor:injective.ocr.v1beta1.QueryLatestTransmissionDetailsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryLatestTransmissionDetailsResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.config_digest_.Destroy();
  if (this != internal_default_instance()) delete _impl_.epoch_and_round_;
  if (this != internal_default_instance()) delete _impl_.data_;
}

void QueryLatestTransmissionDetailsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryLatestTransmissionDetailsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.ocr.v1beta1.QueryLatestTransmissionDetailsResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.config_digest_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.epoch_and_round_ != nullptr);
      _impl_.epoch_and_round_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.data_ != nullptr);
      _impl_.data_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryLatestTransmissionDetailsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes config_digest = 1 [json_name = "configDigest"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_config_digest();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .injective.ocr.v1beta1.EpochAndRound epoch_and_round = 2 [json_name = "epochAndRound"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_epoch_and_round(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .injective.ocr.v1beta1.Transmission data = 3 [json_name = "data"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryLatestTransmissionDetailsResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.ocr.v1beta1.QueryLatestTransmissionDetailsResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes config_digest = 1 [json_name = "configDigest"];
  if (!this->_internal_config_digest().empty()) {
    const std::string& _s = this->_internal_config_digest();
    target = stream->WriteBytesMaybeAliased(1, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .injective.ocr.v1beta1.EpochAndRound epoch_and_round = 2 [json_name = "epochAndRound"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::epoch_and_round(this),
        _Internal::epoch_and_round(this).GetCachedSize(), target, stream);
  }

  // .injective.ocr.v1beta1.Transmission data = 3 [json_name = "data"];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::data(this),
        _Internal::data(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.ocr.v1beta1.QueryLatestTransmissionDetailsResponse)
  return target;
}

::size_t QueryLatestTransmissionDetailsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.ocr.v1beta1.QueryLatestTransmissionDetailsResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes config_digest = 1 [json_name = "configDigest"];
  if (!this->_internal_config_digest().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_config_digest());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .injective.ocr.v1beta1.EpochAndRound epoch_and_round = 2 [json_name = "epochAndRound"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.epoch_and_round_);
    }

    // .injective.ocr.v1beta1.Transmission data = 3 [json_name = "data"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryLatestTransmissionDetailsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryLatestTransmissionDetailsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryLatestTransmissionDetailsResponse::GetClassData() const { return &_class_data_; }


void QueryLatestTransmissionDetailsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryLatestTransmissionDetailsResponse*>(&to_msg);
  auto& from = static_cast<const QueryLatestTransmissionDetailsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.ocr.v1beta1.QueryLatestTransmissionDetailsResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_config_digest().empty()) {
    _this->_internal_set_config_digest(from._internal_config_digest());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_epoch_and_round()->::injective::ocr::v1beta1::EpochAndRound::MergeFrom(
          from._internal_epoch_and_round());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_data()->::injective::ocr::v1beta1::Transmission::MergeFrom(
          from._internal_data());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryLatestTransmissionDetailsResponse::CopyFrom(const QueryLatestTransmissionDetailsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.ocr.v1beta1.QueryLatestTransmissionDetailsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryLatestTransmissionDetailsResponse::IsInitialized() const {
  return true;
}

void QueryLatestTransmissionDetailsResponse::InternalSwap(QueryLatestTransmissionDetailsResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.config_digest_, lhs_arena,
                                       &other->_impl_.config_digest_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(QueryLatestTransmissionDetailsResponse, _impl_.data_)
      + sizeof(QueryLatestTransmissionDetailsResponse::_impl_.data_)
      - PROTOBUF_FIELD_OFFSET(QueryLatestTransmissionDetailsResponse, _impl_.epoch_and_round_)>(
          reinterpret_cast<char*>(&_impl_.epoch_and_round_),
          reinterpret_cast<char*>(&other->_impl_.epoch_and_round_));
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryLatestTransmissionDetailsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2focr_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2focr_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2focr_2fv1beta1_2fquery_2eproto[9]);
}
// ===================================================================

class QueryOwedAmountRequest::_Internal {
 public:
};

QueryOwedAmountRequest::QueryOwedAmountRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.ocr.v1beta1.QueryOwedAmountRequest)
}
QueryOwedAmountRequest::QueryOwedAmountRequest(const QueryOwedAmountRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryOwedAmountRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.transmitter_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.transmitter_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.transmitter_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_transmitter().empty()) {
    _this->_impl_.transmitter_.Set(from._internal_transmitter(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:injective.ocr.v1beta1.QueryOwedAmountRequest)
}

inline void QueryOwedAmountRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.transmitter_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.transmitter_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.transmitter_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

QueryOwedAmountRequest::~QueryOwedAmountRequest() {
  // @@protoc_insertion_point(destructor:injective.ocr.v1beta1.QueryOwedAmountRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryOwedAmountRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.transmitter_.Destroy();
}

void QueryOwedAmountRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryOwedAmountRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.ocr.v1beta1.QueryOwedAmountRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.transmitter_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryOwedAmountRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string transmitter = 1 [json_name = "transmitter"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_transmitter();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.ocr.v1beta1.QueryOwedAmountRequest.transmitter"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryOwedAmountRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.ocr.v1beta1.QueryOwedAmountRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string transmitter = 1 [json_name = "transmitter"];
  if (!this->_internal_transmitter().empty()) {
    const std::string& _s = this->_internal_transmitter();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.ocr.v1beta1.QueryOwedAmountRequest.transmitter");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.ocr.v1beta1.QueryOwedAmountRequest)
  return target;
}

::size_t QueryOwedAmountRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.ocr.v1beta1.QueryOwedAmountRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string transmitter = 1 [json_name = "transmitter"];
  if (!this->_internal_transmitter().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_transmitter());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryOwedAmountRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryOwedAmountRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryOwedAmountRequest::GetClassData() const { return &_class_data_; }


void QueryOwedAmountRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryOwedAmountRequest*>(&to_msg);
  auto& from = static_cast<const QueryOwedAmountRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.ocr.v1beta1.QueryOwedAmountRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_transmitter().empty()) {
    _this->_internal_set_transmitter(from._internal_transmitter());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryOwedAmountRequest::CopyFrom(const QueryOwedAmountRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.ocr.v1beta1.QueryOwedAmountRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryOwedAmountRequest::IsInitialized() const {
  return true;
}

void QueryOwedAmountRequest::InternalSwap(QueryOwedAmountRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.transmitter_, lhs_arena,
                                       &other->_impl_.transmitter_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryOwedAmountRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2focr_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2focr_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2focr_2fv1beta1_2fquery_2eproto[10]);
}
// ===================================================================

class QueryOwedAmountResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<QueryOwedAmountResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(QueryOwedAmountResponse, _impl_._has_bits_);
  static const ::cosmos::base::v1beta1::Coin& amount(const QueryOwedAmountResponse* msg);
  static void set_has_amount(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::cosmos::base::v1beta1::Coin&
QueryOwedAmountResponse::_Internal::amount(const QueryOwedAmountResponse* msg) {
  return *msg->_impl_.amount_;
}
void QueryOwedAmountResponse::clear_amount() {
  if (_impl_.amount_ != nullptr) _impl_.amount_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
QueryOwedAmountResponse::QueryOwedAmountResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.ocr.v1beta1.QueryOwedAmountResponse)
}
QueryOwedAmountResponse::QueryOwedAmountResponse(const QueryOwedAmountResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryOwedAmountResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.amount_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.amount_ = new ::cosmos::base::v1beta1::Coin(*from._impl_.amount_);
  }
  // @@protoc_insertion_point(copy_constructor:injective.ocr.v1beta1.QueryOwedAmountResponse)
}

inline void QueryOwedAmountResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.amount_){nullptr}
  };
}

QueryOwedAmountResponse::~QueryOwedAmountResponse() {
  // @@protoc_insertion_point(destructor:injective.ocr.v1beta1.QueryOwedAmountResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryOwedAmountResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.amount_;
}

void QueryOwedAmountResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryOwedAmountResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.ocr.v1beta1.QueryOwedAmountResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.amount_ != nullptr);
    _impl_.amount_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryOwedAmountResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cosmos.base.v1beta1.Coin amount = 1 [json_name = "amount", (.gogoproto.nullable) = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_amount(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryOwedAmountResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.ocr.v1beta1.QueryOwedAmountResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .cosmos.base.v1beta1.Coin amount = 1 [json_name = "amount", (.gogoproto.nullable) = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::amount(this),
        _Internal::amount(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.ocr.v1beta1.QueryOwedAmountResponse)
  return target;
}

::size_t QueryOwedAmountResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.ocr.v1beta1.QueryOwedAmountResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cosmos.base.v1beta1.Coin amount = 1 [json_name = "amount", (.gogoproto.nullable) = false];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.amount_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryOwedAmountResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryOwedAmountResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryOwedAmountResponse::GetClassData() const { return &_class_data_; }


void QueryOwedAmountResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryOwedAmountResponse*>(&to_msg);
  auto& from = static_cast<const QueryOwedAmountResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.ocr.v1beta1.QueryOwedAmountResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_amount()->::cosmos::base::v1beta1::Coin::MergeFrom(
        from._internal_amount());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryOwedAmountResponse::CopyFrom(const QueryOwedAmountResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.ocr.v1beta1.QueryOwedAmountResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryOwedAmountResponse::IsInitialized() const {
  return true;
}

void QueryOwedAmountResponse::InternalSwap(QueryOwedAmountResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.amount_, other->_impl_.amount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryOwedAmountResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2focr_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2focr_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2focr_2fv1beta1_2fquery_2eproto[11]);
}
// ===================================================================

class QueryModuleStateRequest::_Internal {
 public:
};

QueryModuleStateRequest::QueryModuleStateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:injective.ocr.v1beta1.QueryModuleStateRequest)
}
QueryModuleStateRequest::QueryModuleStateRequest(const QueryModuleStateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  QueryModuleStateRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:injective.ocr.v1beta1.QueryModuleStateRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryModuleStateRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryModuleStateRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata QueryModuleStateRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2focr_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2focr_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2focr_2fv1beta1_2fquery_2eproto[12]);
}
// ===================================================================

class QueryModuleStateResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<QueryModuleStateResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(QueryModuleStateResponse, _impl_._has_bits_);
  static const ::injective::ocr::v1beta1::GenesisState& state(const QueryModuleStateResponse* msg);
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::injective::ocr::v1beta1::GenesisState&
QueryModuleStateResponse::_Internal::state(const QueryModuleStateResponse* msg) {
  return *msg->_impl_.state_;
}
void QueryModuleStateResponse::clear_state() {
  if (_impl_.state_ != nullptr) _impl_.state_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
QueryModuleStateResponse::QueryModuleStateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.ocr.v1beta1.QueryModuleStateResponse)
}
QueryModuleStateResponse::QueryModuleStateResponse(const QueryModuleStateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryModuleStateResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.state_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.state_ = new ::injective::ocr::v1beta1::GenesisState(*from._impl_.state_);
  }
  // @@protoc_insertion_point(copy_constructor:injective.ocr.v1beta1.QueryModuleStateResponse)
}

inline void QueryModuleStateResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.state_){nullptr}
  };
}

QueryModuleStateResponse::~QueryModuleStateResponse() {
  // @@protoc_insertion_point(destructor:injective.ocr.v1beta1.QueryModuleStateResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryModuleStateResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.state_;
}

void QueryModuleStateResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryModuleStateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.ocr.v1beta1.QueryModuleStateResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.state_ != nullptr);
    _impl_.state_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryModuleStateResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .injective.ocr.v1beta1.GenesisState state = 1 [json_name = "state"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_state(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryModuleStateResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.ocr.v1beta1.QueryModuleStateResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .injective.ocr.v1beta1.GenesisState state = 1 [json_name = "state"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::state(this),
        _Internal::state(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.ocr.v1beta1.QueryModuleStateResponse)
  return target;
}

::size_t QueryModuleStateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.ocr.v1beta1.QueryModuleStateResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .injective.ocr.v1beta1.GenesisState state = 1 [json_name = "state"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.state_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryModuleStateResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryModuleStateResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryModuleStateResponse::GetClassData() const { return &_class_data_; }


void QueryModuleStateResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryModuleStateResponse*>(&to_msg);
  auto& from = static_cast<const QueryModuleStateResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.ocr.v1beta1.QueryModuleStateResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_state()->::injective::ocr::v1beta1::GenesisState::MergeFrom(
        from._internal_state());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryModuleStateResponse::CopyFrom(const QueryModuleStateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.ocr.v1beta1.QueryModuleStateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryModuleStateResponse::IsInitialized() const {
  return true;
}

void QueryModuleStateResponse::InternalSwap(QueryModuleStateResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.state_, other->_impl_.state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryModuleStateResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2focr_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2focr_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2focr_2fv1beta1_2fquery_2eproto[13]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1beta1
}  // namespace ocr
}  // namespace injective
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::injective::ocr::v1beta1::QueryParamsRequest*
Arena::CreateMaybeMessage< ::injective::ocr::v1beta1::QueryParamsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::ocr::v1beta1::QueryParamsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::ocr::v1beta1::QueryParamsResponse*
Arena::CreateMaybeMessage< ::injective::ocr::v1beta1::QueryParamsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::ocr::v1beta1::QueryParamsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::ocr::v1beta1::QueryFeedConfigRequest*
Arena::CreateMaybeMessage< ::injective::ocr::v1beta1::QueryFeedConfigRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::ocr::v1beta1::QueryFeedConfigRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::ocr::v1beta1::QueryFeedConfigResponse*
Arena::CreateMaybeMessage< ::injective::ocr::v1beta1::QueryFeedConfigResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::ocr::v1beta1::QueryFeedConfigResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::ocr::v1beta1::QueryFeedConfigInfoRequest*
Arena::CreateMaybeMessage< ::injective::ocr::v1beta1::QueryFeedConfigInfoRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::ocr::v1beta1::QueryFeedConfigInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::ocr::v1beta1::QueryFeedConfigInfoResponse*
Arena::CreateMaybeMessage< ::injective::ocr::v1beta1::QueryFeedConfigInfoResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::ocr::v1beta1::QueryFeedConfigInfoResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::ocr::v1beta1::QueryLatestRoundRequest*
Arena::CreateMaybeMessage< ::injective::ocr::v1beta1::QueryLatestRoundRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::ocr::v1beta1::QueryLatestRoundRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::ocr::v1beta1::QueryLatestRoundResponse*
Arena::CreateMaybeMessage< ::injective::ocr::v1beta1::QueryLatestRoundResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::ocr::v1beta1::QueryLatestRoundResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::ocr::v1beta1::QueryLatestTransmissionDetailsRequest*
Arena::CreateMaybeMessage< ::injective::ocr::v1beta1::QueryLatestTransmissionDetailsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::ocr::v1beta1::QueryLatestTransmissionDetailsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::ocr::v1beta1::QueryLatestTransmissionDetailsResponse*
Arena::CreateMaybeMessage< ::injective::ocr::v1beta1::QueryLatestTransmissionDetailsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::ocr::v1beta1::QueryLatestTransmissionDetailsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::ocr::v1beta1::QueryOwedAmountRequest*
Arena::CreateMaybeMessage< ::injective::ocr::v1beta1::QueryOwedAmountRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::ocr::v1beta1::QueryOwedAmountRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::ocr::v1beta1::QueryOwedAmountResponse*
Arena::CreateMaybeMessage< ::injective::ocr::v1beta1::QueryOwedAmountResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::ocr::v1beta1::QueryOwedAmountResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::ocr::v1beta1::QueryModuleStateRequest*
Arena::CreateMaybeMessage< ::injective::ocr::v1beta1::QueryModuleStateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::ocr::v1beta1::QueryModuleStateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::ocr::v1beta1::QueryModuleStateResponse*
Arena::CreateMaybeMessage< ::injective::ocr::v1beta1::QueryModuleStateResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::ocr::v1beta1::QueryModuleStateResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

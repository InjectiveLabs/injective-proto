// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: injective/ocr/v1beta1/genesis.proto

#include "injective/ocr/v1beta1/genesis.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace injective {
namespace ocr {
namespace v1beta1 {
template <typename>
PROTOBUF_CONSTEXPR GenesisState::GenesisState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.feed_configs_)*/{}
  , /*decltype(_impl_.latest_epoch_and_rounds_)*/{}
  , /*decltype(_impl_.feed_transmissions_)*/{}
  , /*decltype(_impl_.latest_aggregator_round_ids_)*/{}
  , /*decltype(_impl_.reward_pools_)*/{}
  , /*decltype(_impl_.feed_observation_counts_)*/{}
  , /*decltype(_impl_.feed_transmission_counts_)*/{}
  , /*decltype(_impl_.pending_payeeships_)*/{}
  , /*decltype(_impl_.params_)*/nullptr} {}
struct GenesisStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GenesisStateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GenesisStateDefaultTypeInternal() {}
  union {
    GenesisState _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GenesisStateDefaultTypeInternal _GenesisState_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR FeedTransmission::FeedTransmission(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.feed_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.transmission_)*/nullptr} {}
struct FeedTransmissionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FeedTransmissionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FeedTransmissionDefaultTypeInternal() {}
  union {
    FeedTransmission _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FeedTransmissionDefaultTypeInternal _FeedTransmission_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR FeedEpochAndRound::FeedEpochAndRound(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.feed_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.epoch_and_round_)*/nullptr} {}
struct FeedEpochAndRoundDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FeedEpochAndRoundDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FeedEpochAndRoundDefaultTypeInternal() {}
  union {
    FeedEpochAndRound _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FeedEpochAndRoundDefaultTypeInternal _FeedEpochAndRound_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR FeedLatestAggregatorRoundIDs::FeedLatestAggregatorRoundIDs(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.feed_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.aggregator_round_id_)*/ ::uint64_t{0u}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FeedLatestAggregatorRoundIDsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FeedLatestAggregatorRoundIDsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FeedLatestAggregatorRoundIDsDefaultTypeInternal() {}
  union {
    FeedLatestAggregatorRoundIDs _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FeedLatestAggregatorRoundIDsDefaultTypeInternal _FeedLatestAggregatorRoundIDs_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR RewardPool::RewardPool(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.feed_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.amount_)*/nullptr} {}
struct RewardPoolDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RewardPoolDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RewardPoolDefaultTypeInternal() {}
  union {
    RewardPool _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RewardPoolDefaultTypeInternal _RewardPool_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR FeedCounts::FeedCounts(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.counts_)*/{}
  , /*decltype(_impl_.feed_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FeedCountsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FeedCountsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FeedCountsDefaultTypeInternal() {}
  union {
    FeedCounts _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FeedCountsDefaultTypeInternal _FeedCounts_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Count::Count(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.address_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.count_)*/ ::uint64_t{0u}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CountDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CountDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CountDefaultTypeInternal() {}
  union {
    Count _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CountDefaultTypeInternal _Count_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR PendingPayeeship::PendingPayeeship(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.feed_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.transmitter_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.proposed_payee_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PendingPayeeshipDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PendingPayeeshipDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PendingPayeeshipDefaultTypeInternal() {}
  union {
    PendingPayeeship _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PendingPayeeshipDefaultTypeInternal _PendingPayeeship_default_instance_;
}  // namespace v1beta1
}  // namespace ocr
}  // namespace injective
static ::_pb::Metadata file_level_metadata_injective_2focr_2fv1beta1_2fgenesis_2eproto[8];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_injective_2focr_2fv1beta1_2fgenesis_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_injective_2focr_2fv1beta1_2fgenesis_2eproto = nullptr;
const ::uint32_t TableStruct_injective_2focr_2fv1beta1_2fgenesis_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::injective::ocr::v1beta1::GenesisState, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::injective::ocr::v1beta1::GenesisState, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::ocr::v1beta1::GenesisState, _impl_.params_),
    PROTOBUF_FIELD_OFFSET(::injective::ocr::v1beta1::GenesisState, _impl_.feed_configs_),
    PROTOBUF_FIELD_OFFSET(::injective::ocr::v1beta1::GenesisState, _impl_.latest_epoch_and_rounds_),
    PROTOBUF_FIELD_OFFSET(::injective::ocr::v1beta1::GenesisState, _impl_.feed_transmissions_),
    PROTOBUF_FIELD_OFFSET(::injective::ocr::v1beta1::GenesisState, _impl_.latest_aggregator_round_ids_),
    PROTOBUF_FIELD_OFFSET(::injective::ocr::v1beta1::GenesisState, _impl_.reward_pools_),
    PROTOBUF_FIELD_OFFSET(::injective::ocr::v1beta1::GenesisState, _impl_.feed_observation_counts_),
    PROTOBUF_FIELD_OFFSET(::injective::ocr::v1beta1::GenesisState, _impl_.feed_transmission_counts_),
    PROTOBUF_FIELD_OFFSET(::injective::ocr::v1beta1::GenesisState, _impl_.pending_payeeships_),
    0,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::injective::ocr::v1beta1::FeedTransmission, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::injective::ocr::v1beta1::FeedTransmission, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::ocr::v1beta1::FeedTransmission, _impl_.feed_id_),
    PROTOBUF_FIELD_OFFSET(::injective::ocr::v1beta1::FeedTransmission, _impl_.transmission_),
    ~0u,
    0,
    PROTOBUF_FIELD_OFFSET(::injective::ocr::v1beta1::FeedEpochAndRound, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::injective::ocr::v1beta1::FeedEpochAndRound, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::ocr::v1beta1::FeedEpochAndRound, _impl_.feed_id_),
    PROTOBUF_FIELD_OFFSET(::injective::ocr::v1beta1::FeedEpochAndRound, _impl_.epoch_and_round_),
    ~0u,
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::ocr::v1beta1::FeedLatestAggregatorRoundIDs, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::ocr::v1beta1::FeedLatestAggregatorRoundIDs, _impl_.feed_id_),
    PROTOBUF_FIELD_OFFSET(::injective::ocr::v1beta1::FeedLatestAggregatorRoundIDs, _impl_.aggregator_round_id_),
    PROTOBUF_FIELD_OFFSET(::injective::ocr::v1beta1::RewardPool, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::injective::ocr::v1beta1::RewardPool, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::ocr::v1beta1::RewardPool, _impl_.feed_id_),
    PROTOBUF_FIELD_OFFSET(::injective::ocr::v1beta1::RewardPool, _impl_.amount_),
    ~0u,
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::ocr::v1beta1::FeedCounts, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::ocr::v1beta1::FeedCounts, _impl_.feed_id_),
    PROTOBUF_FIELD_OFFSET(::injective::ocr::v1beta1::FeedCounts, _impl_.counts_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::ocr::v1beta1::Count, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::ocr::v1beta1::Count, _impl_.address_),
    PROTOBUF_FIELD_OFFSET(::injective::ocr::v1beta1::Count, _impl_.count_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::ocr::v1beta1::PendingPayeeship, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::ocr::v1beta1::PendingPayeeship, _impl_.feed_id_),
    PROTOBUF_FIELD_OFFSET(::injective::ocr::v1beta1::PendingPayeeship, _impl_.transmitter_),
    PROTOBUF_FIELD_OFFSET(::injective::ocr::v1beta1::PendingPayeeship, _impl_.proposed_payee_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 17, -1, sizeof(::injective::ocr::v1beta1::GenesisState)},
        { 26, 36, -1, sizeof(::injective::ocr::v1beta1::FeedTransmission)},
        { 38, 48, -1, sizeof(::injective::ocr::v1beta1::FeedEpochAndRound)},
        { 50, -1, -1, sizeof(::injective::ocr::v1beta1::FeedLatestAggregatorRoundIDs)},
        { 60, 70, -1, sizeof(::injective::ocr::v1beta1::RewardPool)},
        { 72, -1, -1, sizeof(::injective::ocr::v1beta1::FeedCounts)},
        { 82, -1, -1, sizeof(::injective::ocr::v1beta1::Count)},
        { 92, -1, -1, sizeof(::injective::ocr::v1beta1::PendingPayeeship)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::injective::ocr::v1beta1::_GenesisState_default_instance_._instance,
    &::injective::ocr::v1beta1::_FeedTransmission_default_instance_._instance,
    &::injective::ocr::v1beta1::_FeedEpochAndRound_default_instance_._instance,
    &::injective::ocr::v1beta1::_FeedLatestAggregatorRoundIDs_default_instance_._instance,
    &::injective::ocr::v1beta1::_RewardPool_default_instance_._instance,
    &::injective::ocr::v1beta1::_FeedCounts_default_instance_._instance,
    &::injective::ocr::v1beta1::_Count_default_instance_._instance,
    &::injective::ocr::v1beta1::_PendingPayeeship_default_instance_._instance,
};
const char descriptor_table_protodef_injective_2focr_2fv1beta1_2fgenesis_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n#injective/ocr/v1beta1/genesis.proto\022\025i"
    "njective.ocr.v1beta1\032\037injective/ocr/v1be"
    "ta1/ocr.proto\032\024gogoproto/gogo.proto\032\036cos"
    "mos/base/v1beta1/coin.proto\"\224\006\n\014GenesisS"
    "tate\022;\n\006params\030\001 \001(\0132\035.injective.ocr.v1b"
    "eta1.ParamsB\004\310\336\037\000R\006params\022D\n\014feed_config"
    "s\030\002 \003(\0132!.injective.ocr.v1beta1.FeedConf"
    "igR\013feedConfigs\022_\n\027latest_epoch_and_roun"
    "ds\030\003 \003(\0132(.injective.ocr.v1beta1.FeedEpo"
    "chAndRoundR\024latestEpochAndRounds\022V\n\022feed"
    "_transmissions\030\004 \003(\0132\'.injective.ocr.v1b"
    "eta1.FeedTransmissionR\021feedTransmissions"
    "\022r\n\033latest_aggregator_round_ids\030\005 \003(\01323."
    "injective.ocr.v1beta1.FeedLatestAggregat"
    "orRoundIDsR\030latestAggregatorRoundIds\022D\n\014"
    "reward_pools\030\006 \003(\0132!.injective.ocr.v1bet"
    "a1.RewardPoolR\013rewardPools\022Y\n\027feed_obser"
    "vation_counts\030\007 \003(\0132!.injective.ocr.v1be"
    "ta1.FeedCountsR\025feedObservationCounts\022[\n"
    "\030feed_transmission_counts\030\010 \003(\0132!.inject"
    "ive.ocr.v1beta1.FeedCountsR\026feedTransmis"
    "sionCounts\022V\n\022pending_payeeships\030\t \003(\0132\'"
    ".injective.ocr.v1beta1.PendingPayeeshipR"
    "\021pendingPayeeships\"t\n\020FeedTransmission\022\027"
    "\n\007feed_id\030\001 \001(\tR\006feedId\022G\n\014transmission\030"
    "\002 \001(\0132#.injective.ocr.v1beta1.Transmissi"
    "onR\014transmission\"z\n\021FeedEpochAndRound\022\027\n"
    "\007feed_id\030\001 \001(\tR\006feedId\022L\n\017epoch_and_roun"
    "d\030\002 \001(\0132$.injective.ocr.v1beta1.EpochAnd"
    "RoundR\repochAndRound\"g\n\034FeedLatestAggreg"
    "atorRoundIDs\022\027\n\007feed_id\030\001 \001(\tR\006feedId\022.\n"
    "\023aggregator_round_id\030\002 \001(\004R\021aggregatorRo"
    "undId\"^\n\nRewardPool\022\027\n\007feed_id\030\001 \001(\tR\006fe"
    "edId\0227\n\006amount\030\002 \001(\0132\031.cosmos.base.v1bet"
    "a1.CoinB\004\310\336\037\000R\006amount\"[\n\nFeedCounts\022\027\n\007f"
    "eed_id\030\001 \001(\tR\006feedId\0224\n\006counts\030\002 \003(\0132\034.i"
    "njective.ocr.v1beta1.CountR\006counts\"7\n\005Co"
    "unt\022\030\n\007address\030\001 \001(\tR\007address\022\024\n\005count\030\002"
    " \001(\004R\005count\"t\n\020PendingPayeeship\022\027\n\007feed_"
    "id\030\001 \001(\tR\006feedId\022 \n\013transmitter\030\002 \001(\tR\013t"
    "ransmitter\022%\n\016proposed_payee\030\003 \001(\tR\rprop"
    "osedPayeeB\352\001\n\031com.injective.ocr.v1beta1B"
    "\014GenesisProtoP\001ZIgithub.com/InjectiveLab"
    "s/injective-core/injective-chain/modules"
    "/ocr/types\242\002\003IOX\252\002\025Injective.Ocr.V1beta1"
    "\312\002\025Injective\\Ocr\\V1beta1\342\002!Injective\\Ocr"
    "\\V1beta1\\GPBMetadata\352\002\027Injective::Ocr::V"
    "1beta1b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_injective_2focr_2fv1beta1_2fgenesis_2eproto_deps[3] =
    {
        &::descriptor_table_cosmos_2fbase_2fv1beta1_2fcoin_2eproto,
        &::descriptor_table_gogoproto_2fgogo_2eproto,
        &::descriptor_table_injective_2focr_2fv1beta1_2focr_2eproto,
};
static ::absl::once_flag descriptor_table_injective_2focr_2fv1beta1_2fgenesis_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_injective_2focr_2fv1beta1_2fgenesis_2eproto = {
    false,
    false,
    1894,
    descriptor_table_protodef_injective_2focr_2fv1beta1_2fgenesis_2eproto,
    "injective/ocr/v1beta1/genesis.proto",
    &descriptor_table_injective_2focr_2fv1beta1_2fgenesis_2eproto_once,
    descriptor_table_injective_2focr_2fv1beta1_2fgenesis_2eproto_deps,
    3,
    8,
    schemas,
    file_default_instances,
    TableStruct_injective_2focr_2fv1beta1_2fgenesis_2eproto::offsets,
    file_level_metadata_injective_2focr_2fv1beta1_2fgenesis_2eproto,
    file_level_enum_descriptors_injective_2focr_2fv1beta1_2fgenesis_2eproto,
    file_level_service_descriptors_injective_2focr_2fv1beta1_2fgenesis_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_injective_2focr_2fv1beta1_2fgenesis_2eproto_getter() {
  return &descriptor_table_injective_2focr_2fv1beta1_2fgenesis_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_injective_2focr_2fv1beta1_2fgenesis_2eproto(&descriptor_table_injective_2focr_2fv1beta1_2fgenesis_2eproto);
namespace injective {
namespace ocr {
namespace v1beta1 {
// ===================================================================

class GenesisState::_Internal {
 public:
  using HasBits = decltype(std::declval<GenesisState>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GenesisState, _impl_._has_bits_);
  static const ::injective::ocr::v1beta1::Params& params(const GenesisState* msg);
  static void set_has_params(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::injective::ocr::v1beta1::Params&
GenesisState::_Internal::params(const GenesisState* msg) {
  return *msg->_impl_.params_;
}
void GenesisState::clear_params() {
  if (_impl_.params_ != nullptr) _impl_.params_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void GenesisState::clear_feed_configs() {
  _internal_mutable_feed_configs()->Clear();
}
GenesisState::GenesisState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.ocr.v1beta1.GenesisState)
}
GenesisState::GenesisState(const GenesisState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GenesisState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.feed_configs_){from._impl_.feed_configs_}
    , decltype(_impl_.latest_epoch_and_rounds_){from._impl_.latest_epoch_and_rounds_}
    , decltype(_impl_.feed_transmissions_){from._impl_.feed_transmissions_}
    , decltype(_impl_.latest_aggregator_round_ids_){from._impl_.latest_aggregator_round_ids_}
    , decltype(_impl_.reward_pools_){from._impl_.reward_pools_}
    , decltype(_impl_.feed_observation_counts_){from._impl_.feed_observation_counts_}
    , decltype(_impl_.feed_transmission_counts_){from._impl_.feed_transmission_counts_}
    , decltype(_impl_.pending_payeeships_){from._impl_.pending_payeeships_}
    , decltype(_impl_.params_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.params_ = new ::injective::ocr::v1beta1::Params(*from._impl_.params_);
  }
  // @@protoc_insertion_point(copy_constructor:injective.ocr.v1beta1.GenesisState)
}

inline void GenesisState::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.feed_configs_){arena}
    , decltype(_impl_.latest_epoch_and_rounds_){arena}
    , decltype(_impl_.feed_transmissions_){arena}
    , decltype(_impl_.latest_aggregator_round_ids_){arena}
    , decltype(_impl_.reward_pools_){arena}
    , decltype(_impl_.feed_observation_counts_){arena}
    , decltype(_impl_.feed_transmission_counts_){arena}
    , decltype(_impl_.pending_payeeships_){arena}
    , decltype(_impl_.params_){nullptr}
  };
}

GenesisState::~GenesisState() {
  // @@protoc_insertion_point(destructor:injective.ocr.v1beta1.GenesisState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GenesisState::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_feed_configs()->~RepeatedPtrField();
  _internal_mutable_latest_epoch_and_rounds()->~RepeatedPtrField();
  _internal_mutable_feed_transmissions()->~RepeatedPtrField();
  _internal_mutable_latest_aggregator_round_ids()->~RepeatedPtrField();
  _internal_mutable_reward_pools()->~RepeatedPtrField();
  _internal_mutable_feed_observation_counts()->~RepeatedPtrField();
  _internal_mutable_feed_transmission_counts()->~RepeatedPtrField();
  _internal_mutable_pending_payeeships()->~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.params_;
}

void GenesisState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GenesisState::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.ocr.v1beta1.GenesisState)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_feed_configs()->Clear();
  _internal_mutable_latest_epoch_and_rounds()->Clear();
  _internal_mutable_feed_transmissions()->Clear();
  _internal_mutable_latest_aggregator_round_ids()->Clear();
  _internal_mutable_reward_pools()->Clear();
  _internal_mutable_feed_observation_counts()->Clear();
  _internal_mutable_feed_transmission_counts()->Clear();
  _internal_mutable_pending_payeeships()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.params_ != nullptr);
    _impl_.params_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GenesisState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .injective.ocr.v1beta1.Params params = 1 [json_name = "params", (.gogoproto.nullable) = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_params(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .injective.ocr.v1beta1.FeedConfig feed_configs = 2 [json_name = "feedConfigs"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_feed_configs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .injective.ocr.v1beta1.FeedEpochAndRound latest_epoch_and_rounds = 3 [json_name = "latestEpochAndRounds"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_latest_epoch_and_rounds(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .injective.ocr.v1beta1.FeedTransmission feed_transmissions = 4 [json_name = "feedTransmissions"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_feed_transmissions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .injective.ocr.v1beta1.FeedLatestAggregatorRoundIDs latest_aggregator_round_ids = 5 [json_name = "latestAggregatorRoundIds"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_latest_aggregator_round_ids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .injective.ocr.v1beta1.RewardPool reward_pools = 6 [json_name = "rewardPools"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_reward_pools(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .injective.ocr.v1beta1.FeedCounts feed_observation_counts = 7 [json_name = "feedObservationCounts"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_feed_observation_counts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .injective.ocr.v1beta1.FeedCounts feed_transmission_counts = 8 [json_name = "feedTransmissionCounts"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_feed_transmission_counts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .injective.ocr.v1beta1.PendingPayeeship pending_payeeships = 9 [json_name = "pendingPayeeships"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pending_payeeships(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GenesisState::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.ocr.v1beta1.GenesisState)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .injective.ocr.v1beta1.Params params = 1 [json_name = "params", (.gogoproto.nullable) = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::params(this),
        _Internal::params(this).GetCachedSize(), target, stream);
  }

  // repeated .injective.ocr.v1beta1.FeedConfig feed_configs = 2 [json_name = "feedConfigs"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_feed_configs_size()); i < n; i++) {
    const auto& repfield = this->_internal_feed_configs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .injective.ocr.v1beta1.FeedEpochAndRound latest_epoch_and_rounds = 3 [json_name = "latestEpochAndRounds"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_latest_epoch_and_rounds_size()); i < n; i++) {
    const auto& repfield = this->_internal_latest_epoch_and_rounds(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .injective.ocr.v1beta1.FeedTransmission feed_transmissions = 4 [json_name = "feedTransmissions"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_feed_transmissions_size()); i < n; i++) {
    const auto& repfield = this->_internal_feed_transmissions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .injective.ocr.v1beta1.FeedLatestAggregatorRoundIDs latest_aggregator_round_ids = 5 [json_name = "latestAggregatorRoundIds"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_latest_aggregator_round_ids_size()); i < n; i++) {
    const auto& repfield = this->_internal_latest_aggregator_round_ids(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .injective.ocr.v1beta1.RewardPool reward_pools = 6 [json_name = "rewardPools"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_reward_pools_size()); i < n; i++) {
    const auto& repfield = this->_internal_reward_pools(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .injective.ocr.v1beta1.FeedCounts feed_observation_counts = 7 [json_name = "feedObservationCounts"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_feed_observation_counts_size()); i < n; i++) {
    const auto& repfield = this->_internal_feed_observation_counts(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .injective.ocr.v1beta1.FeedCounts feed_transmission_counts = 8 [json_name = "feedTransmissionCounts"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_feed_transmission_counts_size()); i < n; i++) {
    const auto& repfield = this->_internal_feed_transmission_counts(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .injective.ocr.v1beta1.PendingPayeeship pending_payeeships = 9 [json_name = "pendingPayeeships"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_pending_payeeships_size()); i < n; i++) {
    const auto& repfield = this->_internal_pending_payeeships(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.ocr.v1beta1.GenesisState)
  return target;
}

::size_t GenesisState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.ocr.v1beta1.GenesisState)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .injective.ocr.v1beta1.FeedConfig feed_configs = 2 [json_name = "feedConfigs"];
  total_size += 1UL * this->_internal_feed_configs_size();
  for (const auto& msg : this->_internal_feed_configs()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .injective.ocr.v1beta1.FeedEpochAndRound latest_epoch_and_rounds = 3 [json_name = "latestEpochAndRounds"];
  total_size += 1UL * this->_internal_latest_epoch_and_rounds_size();
  for (const auto& msg : this->_internal_latest_epoch_and_rounds()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .injective.ocr.v1beta1.FeedTransmission feed_transmissions = 4 [json_name = "feedTransmissions"];
  total_size += 1UL * this->_internal_feed_transmissions_size();
  for (const auto& msg : this->_internal_feed_transmissions()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .injective.ocr.v1beta1.FeedLatestAggregatorRoundIDs latest_aggregator_round_ids = 5 [json_name = "latestAggregatorRoundIds"];
  total_size += 1UL * this->_internal_latest_aggregator_round_ids_size();
  for (const auto& msg : this->_internal_latest_aggregator_round_ids()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .injective.ocr.v1beta1.RewardPool reward_pools = 6 [json_name = "rewardPools"];
  total_size += 1UL * this->_internal_reward_pools_size();
  for (const auto& msg : this->_internal_reward_pools()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .injective.ocr.v1beta1.FeedCounts feed_observation_counts = 7 [json_name = "feedObservationCounts"];
  total_size += 1UL * this->_internal_feed_observation_counts_size();
  for (const auto& msg : this->_internal_feed_observation_counts()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .injective.ocr.v1beta1.FeedCounts feed_transmission_counts = 8 [json_name = "feedTransmissionCounts"];
  total_size += 1UL * this->_internal_feed_transmission_counts_size();
  for (const auto& msg : this->_internal_feed_transmission_counts()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .injective.ocr.v1beta1.PendingPayeeship pending_payeeships = 9 [json_name = "pendingPayeeships"];
  total_size += 1UL * this->_internal_pending_payeeships_size();
  for (const auto& msg : this->_internal_pending_payeeships()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .injective.ocr.v1beta1.Params params = 1 [json_name = "params", (.gogoproto.nullable) = false];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.params_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GenesisState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GenesisState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GenesisState::GetClassData() const { return &_class_data_; }


void GenesisState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GenesisState*>(&to_msg);
  auto& from = static_cast<const GenesisState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.ocr.v1beta1.GenesisState)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_feed_configs()->MergeFrom(from._internal_feed_configs());
  _this->_internal_mutable_latest_epoch_and_rounds()->MergeFrom(from._internal_latest_epoch_and_rounds());
  _this->_internal_mutable_feed_transmissions()->MergeFrom(from._internal_feed_transmissions());
  _this->_internal_mutable_latest_aggregator_round_ids()->MergeFrom(from._internal_latest_aggregator_round_ids());
  _this->_internal_mutable_reward_pools()->MergeFrom(from._internal_reward_pools());
  _this->_internal_mutable_feed_observation_counts()->MergeFrom(from._internal_feed_observation_counts());
  _this->_internal_mutable_feed_transmission_counts()->MergeFrom(from._internal_feed_transmission_counts());
  _this->_internal_mutable_pending_payeeships()->MergeFrom(from._internal_pending_payeeships());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_params()->::injective::ocr::v1beta1::Params::MergeFrom(
        from._internal_params());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GenesisState::CopyFrom(const GenesisState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.ocr.v1beta1.GenesisState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenesisState::IsInitialized() const {
  return true;
}

void GenesisState::InternalSwap(GenesisState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_feed_configs()->InternalSwap(other->_internal_mutable_feed_configs());
  _internal_mutable_latest_epoch_and_rounds()->InternalSwap(other->_internal_mutable_latest_epoch_and_rounds());
  _internal_mutable_feed_transmissions()->InternalSwap(other->_internal_mutable_feed_transmissions());
  _internal_mutable_latest_aggregator_round_ids()->InternalSwap(other->_internal_mutable_latest_aggregator_round_ids());
  _internal_mutable_reward_pools()->InternalSwap(other->_internal_mutable_reward_pools());
  _internal_mutable_feed_observation_counts()->InternalSwap(other->_internal_mutable_feed_observation_counts());
  _internal_mutable_feed_transmission_counts()->InternalSwap(other->_internal_mutable_feed_transmission_counts());
  _internal_mutable_pending_payeeships()->InternalSwap(other->_internal_mutable_pending_payeeships());
  swap(_impl_.params_, other->_impl_.params_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GenesisState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2focr_2fv1beta1_2fgenesis_2eproto_getter, &descriptor_table_injective_2focr_2fv1beta1_2fgenesis_2eproto_once,
      file_level_metadata_injective_2focr_2fv1beta1_2fgenesis_2eproto[0]);
}
// ===================================================================

class FeedTransmission::_Internal {
 public:
  using HasBits = decltype(std::declval<FeedTransmission>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(FeedTransmission, _impl_._has_bits_);
  static const ::injective::ocr::v1beta1::Transmission& transmission(const FeedTransmission* msg);
  static void set_has_transmission(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::injective::ocr::v1beta1::Transmission&
FeedTransmission::_Internal::transmission(const FeedTransmission* msg) {
  return *msg->_impl_.transmission_;
}
void FeedTransmission::clear_transmission() {
  if (_impl_.transmission_ != nullptr) _impl_.transmission_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
FeedTransmission::FeedTransmission(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.ocr.v1beta1.FeedTransmission)
}
FeedTransmission::FeedTransmission(const FeedTransmission& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FeedTransmission* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.feed_id_) {}

    , decltype(_impl_.transmission_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.feed_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.feed_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_feed_id().empty()) {
    _this->_impl_.feed_id_.Set(from._internal_feed_id(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.transmission_ = new ::injective::ocr::v1beta1::Transmission(*from._impl_.transmission_);
  }
  // @@protoc_insertion_point(copy_constructor:injective.ocr.v1beta1.FeedTransmission)
}

inline void FeedTransmission::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.feed_id_) {}

    , decltype(_impl_.transmission_){nullptr}
  };
  _impl_.feed_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.feed_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FeedTransmission::~FeedTransmission() {
  // @@protoc_insertion_point(destructor:injective.ocr.v1beta1.FeedTransmission)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FeedTransmission::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.feed_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.transmission_;
}

void FeedTransmission::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FeedTransmission::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.ocr.v1beta1.FeedTransmission)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.feed_id_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.transmission_ != nullptr);
    _impl_.transmission_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FeedTransmission::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string feed_id = 1 [json_name = "feedId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_feed_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.ocr.v1beta1.FeedTransmission.feed_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .injective.ocr.v1beta1.Transmission transmission = 2 [json_name = "transmission"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_transmission(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* FeedTransmission::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.ocr.v1beta1.FeedTransmission)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string feed_id = 1 [json_name = "feedId"];
  if (!this->_internal_feed_id().empty()) {
    const std::string& _s = this->_internal_feed_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.ocr.v1beta1.FeedTransmission.feed_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .injective.ocr.v1beta1.Transmission transmission = 2 [json_name = "transmission"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::transmission(this),
        _Internal::transmission(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.ocr.v1beta1.FeedTransmission)
  return target;
}

::size_t FeedTransmission::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.ocr.v1beta1.FeedTransmission)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string feed_id = 1 [json_name = "feedId"];
  if (!this->_internal_feed_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_feed_id());
  }

  // .injective.ocr.v1beta1.Transmission transmission = 2 [json_name = "transmission"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.transmission_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FeedTransmission::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FeedTransmission::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FeedTransmission::GetClassData() const { return &_class_data_; }


void FeedTransmission::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FeedTransmission*>(&to_msg);
  auto& from = static_cast<const FeedTransmission&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.ocr.v1beta1.FeedTransmission)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_feed_id().empty()) {
    _this->_internal_set_feed_id(from._internal_feed_id());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_transmission()->::injective::ocr::v1beta1::Transmission::MergeFrom(
        from._internal_transmission());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FeedTransmission::CopyFrom(const FeedTransmission& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.ocr.v1beta1.FeedTransmission)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeedTransmission::IsInitialized() const {
  return true;
}

void FeedTransmission::InternalSwap(FeedTransmission* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.feed_id_, lhs_arena,
                                       &other->_impl_.feed_id_, rhs_arena);
  swap(_impl_.transmission_, other->_impl_.transmission_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FeedTransmission::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2focr_2fv1beta1_2fgenesis_2eproto_getter, &descriptor_table_injective_2focr_2fv1beta1_2fgenesis_2eproto_once,
      file_level_metadata_injective_2focr_2fv1beta1_2fgenesis_2eproto[1]);
}
// ===================================================================

class FeedEpochAndRound::_Internal {
 public:
  using HasBits = decltype(std::declval<FeedEpochAndRound>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(FeedEpochAndRound, _impl_._has_bits_);
  static const ::injective::ocr::v1beta1::EpochAndRound& epoch_and_round(const FeedEpochAndRound* msg);
  static void set_has_epoch_and_round(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::injective::ocr::v1beta1::EpochAndRound&
FeedEpochAndRound::_Internal::epoch_and_round(const FeedEpochAndRound* msg) {
  return *msg->_impl_.epoch_and_round_;
}
void FeedEpochAndRound::clear_epoch_and_round() {
  if (_impl_.epoch_and_round_ != nullptr) _impl_.epoch_and_round_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
FeedEpochAndRound::FeedEpochAndRound(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.ocr.v1beta1.FeedEpochAndRound)
}
FeedEpochAndRound::FeedEpochAndRound(const FeedEpochAndRound& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FeedEpochAndRound* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.feed_id_) {}

    , decltype(_impl_.epoch_and_round_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.feed_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.feed_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_feed_id().empty()) {
    _this->_impl_.feed_id_.Set(from._internal_feed_id(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.epoch_and_round_ = new ::injective::ocr::v1beta1::EpochAndRound(*from._impl_.epoch_and_round_);
  }
  // @@protoc_insertion_point(copy_constructor:injective.ocr.v1beta1.FeedEpochAndRound)
}

inline void FeedEpochAndRound::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.feed_id_) {}

    , decltype(_impl_.epoch_and_round_){nullptr}
  };
  _impl_.feed_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.feed_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FeedEpochAndRound::~FeedEpochAndRound() {
  // @@protoc_insertion_point(destructor:injective.ocr.v1beta1.FeedEpochAndRound)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FeedEpochAndRound::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.feed_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.epoch_and_round_;
}

void FeedEpochAndRound::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FeedEpochAndRound::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.ocr.v1beta1.FeedEpochAndRound)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.feed_id_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.epoch_and_round_ != nullptr);
    _impl_.epoch_and_round_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FeedEpochAndRound::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string feed_id = 1 [json_name = "feedId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_feed_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.ocr.v1beta1.FeedEpochAndRound.feed_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .injective.ocr.v1beta1.EpochAndRound epoch_and_round = 2 [json_name = "epochAndRound"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_epoch_and_round(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* FeedEpochAndRound::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.ocr.v1beta1.FeedEpochAndRound)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string feed_id = 1 [json_name = "feedId"];
  if (!this->_internal_feed_id().empty()) {
    const std::string& _s = this->_internal_feed_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.ocr.v1beta1.FeedEpochAndRound.feed_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .injective.ocr.v1beta1.EpochAndRound epoch_and_round = 2 [json_name = "epochAndRound"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::epoch_and_round(this),
        _Internal::epoch_and_round(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.ocr.v1beta1.FeedEpochAndRound)
  return target;
}

::size_t FeedEpochAndRound::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.ocr.v1beta1.FeedEpochAndRound)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string feed_id = 1 [json_name = "feedId"];
  if (!this->_internal_feed_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_feed_id());
  }

  // .injective.ocr.v1beta1.EpochAndRound epoch_and_round = 2 [json_name = "epochAndRound"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.epoch_and_round_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FeedEpochAndRound::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FeedEpochAndRound::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FeedEpochAndRound::GetClassData() const { return &_class_data_; }


void FeedEpochAndRound::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FeedEpochAndRound*>(&to_msg);
  auto& from = static_cast<const FeedEpochAndRound&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.ocr.v1beta1.FeedEpochAndRound)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_feed_id().empty()) {
    _this->_internal_set_feed_id(from._internal_feed_id());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_epoch_and_round()->::injective::ocr::v1beta1::EpochAndRound::MergeFrom(
        from._internal_epoch_and_round());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FeedEpochAndRound::CopyFrom(const FeedEpochAndRound& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.ocr.v1beta1.FeedEpochAndRound)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeedEpochAndRound::IsInitialized() const {
  return true;
}

void FeedEpochAndRound::InternalSwap(FeedEpochAndRound* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.feed_id_, lhs_arena,
                                       &other->_impl_.feed_id_, rhs_arena);
  swap(_impl_.epoch_and_round_, other->_impl_.epoch_and_round_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FeedEpochAndRound::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2focr_2fv1beta1_2fgenesis_2eproto_getter, &descriptor_table_injective_2focr_2fv1beta1_2fgenesis_2eproto_once,
      file_level_metadata_injective_2focr_2fv1beta1_2fgenesis_2eproto[2]);
}
// ===================================================================

class FeedLatestAggregatorRoundIDs::_Internal {
 public:
};

FeedLatestAggregatorRoundIDs::FeedLatestAggregatorRoundIDs(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.ocr.v1beta1.FeedLatestAggregatorRoundIDs)
}
FeedLatestAggregatorRoundIDs::FeedLatestAggregatorRoundIDs(const FeedLatestAggregatorRoundIDs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FeedLatestAggregatorRoundIDs* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.feed_id_) {}

    , decltype(_impl_.aggregator_round_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.feed_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.feed_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_feed_id().empty()) {
    _this->_impl_.feed_id_.Set(from._internal_feed_id(), _this->GetArenaForAllocation());
  }
  _this->_impl_.aggregator_round_id_ = from._impl_.aggregator_round_id_;
  // @@protoc_insertion_point(copy_constructor:injective.ocr.v1beta1.FeedLatestAggregatorRoundIDs)
}

inline void FeedLatestAggregatorRoundIDs::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.feed_id_) {}

    , decltype(_impl_.aggregator_round_id_) { ::uint64_t{0u} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.feed_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.feed_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FeedLatestAggregatorRoundIDs::~FeedLatestAggregatorRoundIDs() {
  // @@protoc_insertion_point(destructor:injective.ocr.v1beta1.FeedLatestAggregatorRoundIDs)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FeedLatestAggregatorRoundIDs::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.feed_id_.Destroy();
}

void FeedLatestAggregatorRoundIDs::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FeedLatestAggregatorRoundIDs::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.ocr.v1beta1.FeedLatestAggregatorRoundIDs)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.feed_id_.ClearToEmpty();
  _impl_.aggregator_round_id_ = ::uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FeedLatestAggregatorRoundIDs::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string feed_id = 1 [json_name = "feedId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_feed_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.ocr.v1beta1.FeedLatestAggregatorRoundIDs.feed_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 aggregator_round_id = 2 [json_name = "aggregatorRoundId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.aggregator_round_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* FeedLatestAggregatorRoundIDs::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.ocr.v1beta1.FeedLatestAggregatorRoundIDs)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string feed_id = 1 [json_name = "feedId"];
  if (!this->_internal_feed_id().empty()) {
    const std::string& _s = this->_internal_feed_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.ocr.v1beta1.FeedLatestAggregatorRoundIDs.feed_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // uint64 aggregator_round_id = 2 [json_name = "aggregatorRoundId"];
  if (this->_internal_aggregator_round_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_aggregator_round_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.ocr.v1beta1.FeedLatestAggregatorRoundIDs)
  return target;
}

::size_t FeedLatestAggregatorRoundIDs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.ocr.v1beta1.FeedLatestAggregatorRoundIDs)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string feed_id = 1 [json_name = "feedId"];
  if (!this->_internal_feed_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_feed_id());
  }

  // uint64 aggregator_round_id = 2 [json_name = "aggregatorRoundId"];
  if (this->_internal_aggregator_round_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_aggregator_round_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FeedLatestAggregatorRoundIDs::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FeedLatestAggregatorRoundIDs::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FeedLatestAggregatorRoundIDs::GetClassData() const { return &_class_data_; }


void FeedLatestAggregatorRoundIDs::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FeedLatestAggregatorRoundIDs*>(&to_msg);
  auto& from = static_cast<const FeedLatestAggregatorRoundIDs&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.ocr.v1beta1.FeedLatestAggregatorRoundIDs)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_feed_id().empty()) {
    _this->_internal_set_feed_id(from._internal_feed_id());
  }
  if (from._internal_aggregator_round_id() != 0) {
    _this->_internal_set_aggregator_round_id(from._internal_aggregator_round_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FeedLatestAggregatorRoundIDs::CopyFrom(const FeedLatestAggregatorRoundIDs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.ocr.v1beta1.FeedLatestAggregatorRoundIDs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeedLatestAggregatorRoundIDs::IsInitialized() const {
  return true;
}

void FeedLatestAggregatorRoundIDs::InternalSwap(FeedLatestAggregatorRoundIDs* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.feed_id_, lhs_arena,
                                       &other->_impl_.feed_id_, rhs_arena);

  swap(_impl_.aggregator_round_id_, other->_impl_.aggregator_round_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FeedLatestAggregatorRoundIDs::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2focr_2fv1beta1_2fgenesis_2eproto_getter, &descriptor_table_injective_2focr_2fv1beta1_2fgenesis_2eproto_once,
      file_level_metadata_injective_2focr_2fv1beta1_2fgenesis_2eproto[3]);
}
// ===================================================================

class RewardPool::_Internal {
 public:
  using HasBits = decltype(std::declval<RewardPool>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(RewardPool, _impl_._has_bits_);
  static const ::cosmos::base::v1beta1::Coin& amount(const RewardPool* msg);
  static void set_has_amount(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::cosmos::base::v1beta1::Coin&
RewardPool::_Internal::amount(const RewardPool* msg) {
  return *msg->_impl_.amount_;
}
void RewardPool::clear_amount() {
  if (_impl_.amount_ != nullptr) _impl_.amount_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
RewardPool::RewardPool(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.ocr.v1beta1.RewardPool)
}
RewardPool::RewardPool(const RewardPool& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RewardPool* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.feed_id_) {}

    , decltype(_impl_.amount_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.feed_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.feed_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_feed_id().empty()) {
    _this->_impl_.feed_id_.Set(from._internal_feed_id(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.amount_ = new ::cosmos::base::v1beta1::Coin(*from._impl_.amount_);
  }
  // @@protoc_insertion_point(copy_constructor:injective.ocr.v1beta1.RewardPool)
}

inline void RewardPool::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.feed_id_) {}

    , decltype(_impl_.amount_){nullptr}
  };
  _impl_.feed_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.feed_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RewardPool::~RewardPool() {
  // @@protoc_insertion_point(destructor:injective.ocr.v1beta1.RewardPool)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RewardPool::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.feed_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.amount_;
}

void RewardPool::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RewardPool::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.ocr.v1beta1.RewardPool)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.feed_id_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.amount_ != nullptr);
    _impl_.amount_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RewardPool::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string feed_id = 1 [json_name = "feedId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_feed_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.ocr.v1beta1.RewardPool.feed_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .cosmos.base.v1beta1.Coin amount = 2 [json_name = "amount", (.gogoproto.nullable) = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_amount(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* RewardPool::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.ocr.v1beta1.RewardPool)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string feed_id = 1 [json_name = "feedId"];
  if (!this->_internal_feed_id().empty()) {
    const std::string& _s = this->_internal_feed_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.ocr.v1beta1.RewardPool.feed_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .cosmos.base.v1beta1.Coin amount = 2 [json_name = "amount", (.gogoproto.nullable) = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::amount(this),
        _Internal::amount(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.ocr.v1beta1.RewardPool)
  return target;
}

::size_t RewardPool::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.ocr.v1beta1.RewardPool)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string feed_id = 1 [json_name = "feedId"];
  if (!this->_internal_feed_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_feed_id());
  }

  // .cosmos.base.v1beta1.Coin amount = 2 [json_name = "amount", (.gogoproto.nullable) = false];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.amount_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RewardPool::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RewardPool::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RewardPool::GetClassData() const { return &_class_data_; }


void RewardPool::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RewardPool*>(&to_msg);
  auto& from = static_cast<const RewardPool&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.ocr.v1beta1.RewardPool)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_feed_id().empty()) {
    _this->_internal_set_feed_id(from._internal_feed_id());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_amount()->::cosmos::base::v1beta1::Coin::MergeFrom(
        from._internal_amount());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RewardPool::CopyFrom(const RewardPool& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.ocr.v1beta1.RewardPool)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RewardPool::IsInitialized() const {
  return true;
}

void RewardPool::InternalSwap(RewardPool* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.feed_id_, lhs_arena,
                                       &other->_impl_.feed_id_, rhs_arena);
  swap(_impl_.amount_, other->_impl_.amount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RewardPool::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2focr_2fv1beta1_2fgenesis_2eproto_getter, &descriptor_table_injective_2focr_2fv1beta1_2fgenesis_2eproto_once,
      file_level_metadata_injective_2focr_2fv1beta1_2fgenesis_2eproto[4]);
}
// ===================================================================

class FeedCounts::_Internal {
 public:
};

FeedCounts::FeedCounts(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.ocr.v1beta1.FeedCounts)
}
FeedCounts::FeedCounts(const FeedCounts& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FeedCounts* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.counts_){from._impl_.counts_}
    , decltype(_impl_.feed_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.feed_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.feed_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_feed_id().empty()) {
    _this->_impl_.feed_id_.Set(from._internal_feed_id(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:injective.ocr.v1beta1.FeedCounts)
}

inline void FeedCounts::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.counts_){arena}
    , decltype(_impl_.feed_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.feed_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.feed_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FeedCounts::~FeedCounts() {
  // @@protoc_insertion_point(destructor:injective.ocr.v1beta1.FeedCounts)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FeedCounts::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_counts()->~RepeatedPtrField();
  _impl_.feed_id_.Destroy();
}

void FeedCounts::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FeedCounts::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.ocr.v1beta1.FeedCounts)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_counts()->Clear();
  _impl_.feed_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FeedCounts::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string feed_id = 1 [json_name = "feedId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_feed_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.ocr.v1beta1.FeedCounts.feed_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .injective.ocr.v1beta1.Count counts = 2 [json_name = "counts"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_counts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* FeedCounts::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.ocr.v1beta1.FeedCounts)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string feed_id = 1 [json_name = "feedId"];
  if (!this->_internal_feed_id().empty()) {
    const std::string& _s = this->_internal_feed_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.ocr.v1beta1.FeedCounts.feed_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // repeated .injective.ocr.v1beta1.Count counts = 2 [json_name = "counts"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_counts_size()); i < n; i++) {
    const auto& repfield = this->_internal_counts(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.ocr.v1beta1.FeedCounts)
  return target;
}

::size_t FeedCounts::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.ocr.v1beta1.FeedCounts)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .injective.ocr.v1beta1.Count counts = 2 [json_name = "counts"];
  total_size += 1UL * this->_internal_counts_size();
  for (const auto& msg : this->_internal_counts()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string feed_id = 1 [json_name = "feedId"];
  if (!this->_internal_feed_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_feed_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FeedCounts::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FeedCounts::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FeedCounts::GetClassData() const { return &_class_data_; }


void FeedCounts::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FeedCounts*>(&to_msg);
  auto& from = static_cast<const FeedCounts&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.ocr.v1beta1.FeedCounts)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_counts()->MergeFrom(from._internal_counts());
  if (!from._internal_feed_id().empty()) {
    _this->_internal_set_feed_id(from._internal_feed_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FeedCounts::CopyFrom(const FeedCounts& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.ocr.v1beta1.FeedCounts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeedCounts::IsInitialized() const {
  return true;
}

void FeedCounts::InternalSwap(FeedCounts* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_counts()->InternalSwap(other->_internal_mutable_counts());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.feed_id_, lhs_arena,
                                       &other->_impl_.feed_id_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata FeedCounts::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2focr_2fv1beta1_2fgenesis_2eproto_getter, &descriptor_table_injective_2focr_2fv1beta1_2fgenesis_2eproto_once,
      file_level_metadata_injective_2focr_2fv1beta1_2fgenesis_2eproto[5]);
}
// ===================================================================

class Count::_Internal {
 public:
};

Count::Count(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.ocr.v1beta1.Count)
}
Count::Count(const Count& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Count* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.address_) {}

    , decltype(_impl_.count_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_address().empty()) {
    _this->_impl_.address_.Set(from._internal_address(), _this->GetArenaForAllocation());
  }
  _this->_impl_.count_ = from._impl_.count_;
  // @@protoc_insertion_point(copy_constructor:injective.ocr.v1beta1.Count)
}

inline void Count::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.address_) {}

    , decltype(_impl_.count_) { ::uint64_t{0u} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Count::~Count() {
  // @@protoc_insertion_point(destructor:injective.ocr.v1beta1.Count)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Count::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.address_.Destroy();
}

void Count::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Count::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.ocr.v1beta1.Count)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.address_.ClearToEmpty();
  _impl_.count_ = ::uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Count::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string address = 1 [json_name = "address"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.ocr.v1beta1.Count.address"));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 count = 2 [json_name = "count"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Count::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.ocr.v1beta1.Count)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1 [json_name = "address"];
  if (!this->_internal_address().empty()) {
    const std::string& _s = this->_internal_address();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.ocr.v1beta1.Count.address");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // uint64 count = 2 [json_name = "count"];
  if (this->_internal_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.ocr.v1beta1.Count)
  return target;
}

::size_t Count::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.ocr.v1beta1.Count)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 1 [json_name = "address"];
  if (!this->_internal_address().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_address());
  }

  // uint64 count = 2 [json_name = "count"];
  if (this->_internal_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Count::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Count::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Count::GetClassData() const { return &_class_data_; }


void Count::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Count*>(&to_msg);
  auto& from = static_cast<const Count&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.ocr.v1beta1.Count)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_address().empty()) {
    _this->_internal_set_address(from._internal_address());
  }
  if (from._internal_count() != 0) {
    _this->_internal_set_count(from._internal_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Count::CopyFrom(const Count& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.ocr.v1beta1.Count)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Count::IsInitialized() const {
  return true;
}

void Count::InternalSwap(Count* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.address_, lhs_arena,
                                       &other->_impl_.address_, rhs_arena);

  swap(_impl_.count_, other->_impl_.count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Count::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2focr_2fv1beta1_2fgenesis_2eproto_getter, &descriptor_table_injective_2focr_2fv1beta1_2fgenesis_2eproto_once,
      file_level_metadata_injective_2focr_2fv1beta1_2fgenesis_2eproto[6]);
}
// ===================================================================

class PendingPayeeship::_Internal {
 public:
};

PendingPayeeship::PendingPayeeship(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.ocr.v1beta1.PendingPayeeship)
}
PendingPayeeship::PendingPayeeship(const PendingPayeeship& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PendingPayeeship* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.feed_id_) {}

    , decltype(_impl_.transmitter_) {}

    , decltype(_impl_.proposed_payee_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.feed_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.feed_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_feed_id().empty()) {
    _this->_impl_.feed_id_.Set(from._internal_feed_id(), _this->GetArenaForAllocation());
  }
  _impl_.transmitter_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.transmitter_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_transmitter().empty()) {
    _this->_impl_.transmitter_.Set(from._internal_transmitter(), _this->GetArenaForAllocation());
  }
  _impl_.proposed_payee_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.proposed_payee_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_proposed_payee().empty()) {
    _this->_impl_.proposed_payee_.Set(from._internal_proposed_payee(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:injective.ocr.v1beta1.PendingPayeeship)
}

inline void PendingPayeeship::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.feed_id_) {}

    , decltype(_impl_.transmitter_) {}

    , decltype(_impl_.proposed_payee_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.feed_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.feed_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.transmitter_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.transmitter_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.proposed_payee_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.proposed_payee_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PendingPayeeship::~PendingPayeeship() {
  // @@protoc_insertion_point(destructor:injective.ocr.v1beta1.PendingPayeeship)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PendingPayeeship::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.feed_id_.Destroy();
  _impl_.transmitter_.Destroy();
  _impl_.proposed_payee_.Destroy();
}

void PendingPayeeship::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PendingPayeeship::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.ocr.v1beta1.PendingPayeeship)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.feed_id_.ClearToEmpty();
  _impl_.transmitter_.ClearToEmpty();
  _impl_.proposed_payee_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PendingPayeeship::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string feed_id = 1 [json_name = "feedId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_feed_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.ocr.v1beta1.PendingPayeeship.feed_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string transmitter = 2 [json_name = "transmitter"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_transmitter();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.ocr.v1beta1.PendingPayeeship.transmitter"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string proposed_payee = 3 [json_name = "proposedPayee"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_proposed_payee();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.ocr.v1beta1.PendingPayeeship.proposed_payee"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* PendingPayeeship::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.ocr.v1beta1.PendingPayeeship)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string feed_id = 1 [json_name = "feedId"];
  if (!this->_internal_feed_id().empty()) {
    const std::string& _s = this->_internal_feed_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.ocr.v1beta1.PendingPayeeship.feed_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string transmitter = 2 [json_name = "transmitter"];
  if (!this->_internal_transmitter().empty()) {
    const std::string& _s = this->_internal_transmitter();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.ocr.v1beta1.PendingPayeeship.transmitter");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string proposed_payee = 3 [json_name = "proposedPayee"];
  if (!this->_internal_proposed_payee().empty()) {
    const std::string& _s = this->_internal_proposed_payee();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.ocr.v1beta1.PendingPayeeship.proposed_payee");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.ocr.v1beta1.PendingPayeeship)
  return target;
}

::size_t PendingPayeeship::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.ocr.v1beta1.PendingPayeeship)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string feed_id = 1 [json_name = "feedId"];
  if (!this->_internal_feed_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_feed_id());
  }

  // string transmitter = 2 [json_name = "transmitter"];
  if (!this->_internal_transmitter().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_transmitter());
  }

  // string proposed_payee = 3 [json_name = "proposedPayee"];
  if (!this->_internal_proposed_payee().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_proposed_payee());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PendingPayeeship::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PendingPayeeship::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PendingPayeeship::GetClassData() const { return &_class_data_; }


void PendingPayeeship::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PendingPayeeship*>(&to_msg);
  auto& from = static_cast<const PendingPayeeship&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.ocr.v1beta1.PendingPayeeship)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_feed_id().empty()) {
    _this->_internal_set_feed_id(from._internal_feed_id());
  }
  if (!from._internal_transmitter().empty()) {
    _this->_internal_set_transmitter(from._internal_transmitter());
  }
  if (!from._internal_proposed_payee().empty()) {
    _this->_internal_set_proposed_payee(from._internal_proposed_payee());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PendingPayeeship::CopyFrom(const PendingPayeeship& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.ocr.v1beta1.PendingPayeeship)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PendingPayeeship::IsInitialized() const {
  return true;
}

void PendingPayeeship::InternalSwap(PendingPayeeship* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.feed_id_, lhs_arena,
                                       &other->_impl_.feed_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.transmitter_, lhs_arena,
                                       &other->_impl_.transmitter_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.proposed_payee_, lhs_arena,
                                       &other->_impl_.proposed_payee_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata PendingPayeeship::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2focr_2fv1beta1_2fgenesis_2eproto_getter, &descriptor_table_injective_2focr_2fv1beta1_2fgenesis_2eproto_once,
      file_level_metadata_injective_2focr_2fv1beta1_2fgenesis_2eproto[7]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1beta1
}  // namespace ocr
}  // namespace injective
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::injective::ocr::v1beta1::GenesisState*
Arena::CreateMaybeMessage< ::injective::ocr::v1beta1::GenesisState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::ocr::v1beta1::GenesisState >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::ocr::v1beta1::FeedTransmission*
Arena::CreateMaybeMessage< ::injective::ocr::v1beta1::FeedTransmission >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::ocr::v1beta1::FeedTransmission >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::ocr::v1beta1::FeedEpochAndRound*
Arena::CreateMaybeMessage< ::injective::ocr::v1beta1::FeedEpochAndRound >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::ocr::v1beta1::FeedEpochAndRound >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::ocr::v1beta1::FeedLatestAggregatorRoundIDs*
Arena::CreateMaybeMessage< ::injective::ocr::v1beta1::FeedLatestAggregatorRoundIDs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::ocr::v1beta1::FeedLatestAggregatorRoundIDs >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::ocr::v1beta1::RewardPool*
Arena::CreateMaybeMessage< ::injective::ocr::v1beta1::RewardPool >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::ocr::v1beta1::RewardPool >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::ocr::v1beta1::FeedCounts*
Arena::CreateMaybeMessage< ::injective::ocr::v1beta1::FeedCounts >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::ocr::v1beta1::FeedCounts >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::ocr::v1beta1::Count*
Arena::CreateMaybeMessage< ::injective::ocr::v1beta1::Count >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::ocr::v1beta1::Count >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::ocr::v1beta1::PendingPayeeship*
Arena::CreateMaybeMessage< ::injective::ocr::v1beta1::PendingPayeeship >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::ocr::v1beta1::PendingPayeeship >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

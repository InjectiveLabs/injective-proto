// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: injective/ocr/v1beta1/genesis.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_injective_2focr_2fv1beta1_2fgenesis_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_injective_2focr_2fv1beta1_2fgenesis_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "injective/ocr/v1beta1/ocr.pb.h"
#include "gogoproto/gogo.pb.h"
#include "cosmos/base/v1beta1/coin.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_injective_2focr_2fv1beta1_2fgenesis_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_injective_2focr_2fv1beta1_2fgenesis_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_injective_2focr_2fv1beta1_2fgenesis_2eproto;
namespace injective {
namespace ocr {
namespace v1beta1 {
class Count;
struct CountDefaultTypeInternal;
extern CountDefaultTypeInternal _Count_default_instance_;
class FeedCounts;
struct FeedCountsDefaultTypeInternal;
extern FeedCountsDefaultTypeInternal _FeedCounts_default_instance_;
class FeedEpochAndRound;
struct FeedEpochAndRoundDefaultTypeInternal;
extern FeedEpochAndRoundDefaultTypeInternal _FeedEpochAndRound_default_instance_;
class FeedLatestAggregatorRoundIDs;
struct FeedLatestAggregatorRoundIDsDefaultTypeInternal;
extern FeedLatestAggregatorRoundIDsDefaultTypeInternal _FeedLatestAggregatorRoundIDs_default_instance_;
class FeedTransmission;
struct FeedTransmissionDefaultTypeInternal;
extern FeedTransmissionDefaultTypeInternal _FeedTransmission_default_instance_;
class GenesisState;
struct GenesisStateDefaultTypeInternal;
extern GenesisStateDefaultTypeInternal _GenesisState_default_instance_;
class PendingPayeeship;
struct PendingPayeeshipDefaultTypeInternal;
extern PendingPayeeshipDefaultTypeInternal _PendingPayeeship_default_instance_;
class RewardPool;
struct RewardPoolDefaultTypeInternal;
extern RewardPoolDefaultTypeInternal _RewardPool_default_instance_;
}  // namespace v1beta1
}  // namespace ocr
}  // namespace injective
PROTOBUF_NAMESPACE_OPEN
template <>
::injective::ocr::v1beta1::Count* Arena::CreateMaybeMessage<::injective::ocr::v1beta1::Count>(Arena*);
template <>
::injective::ocr::v1beta1::FeedCounts* Arena::CreateMaybeMessage<::injective::ocr::v1beta1::FeedCounts>(Arena*);
template <>
::injective::ocr::v1beta1::FeedEpochAndRound* Arena::CreateMaybeMessage<::injective::ocr::v1beta1::FeedEpochAndRound>(Arena*);
template <>
::injective::ocr::v1beta1::FeedLatestAggregatorRoundIDs* Arena::CreateMaybeMessage<::injective::ocr::v1beta1::FeedLatestAggregatorRoundIDs>(Arena*);
template <>
::injective::ocr::v1beta1::FeedTransmission* Arena::CreateMaybeMessage<::injective::ocr::v1beta1::FeedTransmission>(Arena*);
template <>
::injective::ocr::v1beta1::GenesisState* Arena::CreateMaybeMessage<::injective::ocr::v1beta1::GenesisState>(Arena*);
template <>
::injective::ocr::v1beta1::PendingPayeeship* Arena::CreateMaybeMessage<::injective::ocr::v1beta1::PendingPayeeship>(Arena*);
template <>
::injective::ocr::v1beta1::RewardPool* Arena::CreateMaybeMessage<::injective::ocr::v1beta1::RewardPool>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace injective {
namespace ocr {
namespace v1beta1 {

// ===================================================================


// -------------------------------------------------------------------

class GenesisState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.ocr.v1beta1.GenesisState) */ {
 public:
  inline GenesisState() : GenesisState(nullptr) {}
  ~GenesisState() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GenesisState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GenesisState(const GenesisState& from);
  GenesisState(GenesisState&& from) noexcept
    : GenesisState() {
    *this = ::std::move(from);
  }

  inline GenesisState& operator=(const GenesisState& from) {
    CopyFrom(from);
    return *this;
  }
  inline GenesisState& operator=(GenesisState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GenesisState& default_instance() {
    return *internal_default_instance();
  }
  static inline const GenesisState* internal_default_instance() {
    return reinterpret_cast<const GenesisState*>(
               &_GenesisState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GenesisState& a, GenesisState& b) {
    a.Swap(&b);
  }
  inline void Swap(GenesisState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GenesisState* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GenesisState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GenesisState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GenesisState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GenesisState& from) {
    GenesisState::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GenesisState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.ocr.v1beta1.GenesisState";
  }
  protected:
  explicit GenesisState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFeedConfigsFieldNumber = 2,
    kLatestEpochAndRoundsFieldNumber = 3,
    kFeedTransmissionsFieldNumber = 4,
    kLatestAggregatorRoundIdsFieldNumber = 5,
    kRewardPoolsFieldNumber = 6,
    kFeedObservationCountsFieldNumber = 7,
    kFeedTransmissionCountsFieldNumber = 8,
    kPendingPayeeshipsFieldNumber = 9,
    kParamsFieldNumber = 1,
  };
  // repeated .injective.ocr.v1beta1.FeedConfig feed_configs = 2 [json_name = "feedConfigs"];
  int feed_configs_size() const;
  private:
  int _internal_feed_configs_size() const;

  public:
  void clear_feed_configs() ;
  ::injective::ocr::v1beta1::FeedConfig* mutable_feed_configs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::ocr::v1beta1::FeedConfig >*
      mutable_feed_configs();
  private:
  const ::injective::ocr::v1beta1::FeedConfig& _internal_feed_configs(int index) const;
  ::injective::ocr::v1beta1::FeedConfig* _internal_add_feed_configs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::ocr::v1beta1::FeedConfig>& _internal_feed_configs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::ocr::v1beta1::FeedConfig>* _internal_mutable_feed_configs();
  public:
  const ::injective::ocr::v1beta1::FeedConfig& feed_configs(int index) const;
  ::injective::ocr::v1beta1::FeedConfig* add_feed_configs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::ocr::v1beta1::FeedConfig >&
      feed_configs() const;
  // repeated .injective.ocr.v1beta1.FeedEpochAndRound latest_epoch_and_rounds = 3 [json_name = "latestEpochAndRounds"];
  int latest_epoch_and_rounds_size() const;
  private:
  int _internal_latest_epoch_and_rounds_size() const;

  public:
  void clear_latest_epoch_and_rounds() ;
  ::injective::ocr::v1beta1::FeedEpochAndRound* mutable_latest_epoch_and_rounds(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::ocr::v1beta1::FeedEpochAndRound >*
      mutable_latest_epoch_and_rounds();
  private:
  const ::injective::ocr::v1beta1::FeedEpochAndRound& _internal_latest_epoch_and_rounds(int index) const;
  ::injective::ocr::v1beta1::FeedEpochAndRound* _internal_add_latest_epoch_and_rounds();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::ocr::v1beta1::FeedEpochAndRound>& _internal_latest_epoch_and_rounds() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::ocr::v1beta1::FeedEpochAndRound>* _internal_mutable_latest_epoch_and_rounds();
  public:
  const ::injective::ocr::v1beta1::FeedEpochAndRound& latest_epoch_and_rounds(int index) const;
  ::injective::ocr::v1beta1::FeedEpochAndRound* add_latest_epoch_and_rounds();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::ocr::v1beta1::FeedEpochAndRound >&
      latest_epoch_and_rounds() const;
  // repeated .injective.ocr.v1beta1.FeedTransmission feed_transmissions = 4 [json_name = "feedTransmissions"];
  int feed_transmissions_size() const;
  private:
  int _internal_feed_transmissions_size() const;

  public:
  void clear_feed_transmissions() ;
  ::injective::ocr::v1beta1::FeedTransmission* mutable_feed_transmissions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::ocr::v1beta1::FeedTransmission >*
      mutable_feed_transmissions();
  private:
  const ::injective::ocr::v1beta1::FeedTransmission& _internal_feed_transmissions(int index) const;
  ::injective::ocr::v1beta1::FeedTransmission* _internal_add_feed_transmissions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::ocr::v1beta1::FeedTransmission>& _internal_feed_transmissions() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::ocr::v1beta1::FeedTransmission>* _internal_mutable_feed_transmissions();
  public:
  const ::injective::ocr::v1beta1::FeedTransmission& feed_transmissions(int index) const;
  ::injective::ocr::v1beta1::FeedTransmission* add_feed_transmissions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::ocr::v1beta1::FeedTransmission >&
      feed_transmissions() const;
  // repeated .injective.ocr.v1beta1.FeedLatestAggregatorRoundIDs latest_aggregator_round_ids = 5 [json_name = "latestAggregatorRoundIds"];
  int latest_aggregator_round_ids_size() const;
  private:
  int _internal_latest_aggregator_round_ids_size() const;

  public:
  void clear_latest_aggregator_round_ids() ;
  ::injective::ocr::v1beta1::FeedLatestAggregatorRoundIDs* mutable_latest_aggregator_round_ids(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::ocr::v1beta1::FeedLatestAggregatorRoundIDs >*
      mutable_latest_aggregator_round_ids();
  private:
  const ::injective::ocr::v1beta1::FeedLatestAggregatorRoundIDs& _internal_latest_aggregator_round_ids(int index) const;
  ::injective::ocr::v1beta1::FeedLatestAggregatorRoundIDs* _internal_add_latest_aggregator_round_ids();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::ocr::v1beta1::FeedLatestAggregatorRoundIDs>& _internal_latest_aggregator_round_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::ocr::v1beta1::FeedLatestAggregatorRoundIDs>* _internal_mutable_latest_aggregator_round_ids();
  public:
  const ::injective::ocr::v1beta1::FeedLatestAggregatorRoundIDs& latest_aggregator_round_ids(int index) const;
  ::injective::ocr::v1beta1::FeedLatestAggregatorRoundIDs* add_latest_aggregator_round_ids();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::ocr::v1beta1::FeedLatestAggregatorRoundIDs >&
      latest_aggregator_round_ids() const;
  // repeated .injective.ocr.v1beta1.RewardPool reward_pools = 6 [json_name = "rewardPools"];
  int reward_pools_size() const;
  private:
  int _internal_reward_pools_size() const;

  public:
  void clear_reward_pools() ;
  ::injective::ocr::v1beta1::RewardPool* mutable_reward_pools(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::ocr::v1beta1::RewardPool >*
      mutable_reward_pools();
  private:
  const ::injective::ocr::v1beta1::RewardPool& _internal_reward_pools(int index) const;
  ::injective::ocr::v1beta1::RewardPool* _internal_add_reward_pools();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::ocr::v1beta1::RewardPool>& _internal_reward_pools() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::ocr::v1beta1::RewardPool>* _internal_mutable_reward_pools();
  public:
  const ::injective::ocr::v1beta1::RewardPool& reward_pools(int index) const;
  ::injective::ocr::v1beta1::RewardPool* add_reward_pools();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::ocr::v1beta1::RewardPool >&
      reward_pools() const;
  // repeated .injective.ocr.v1beta1.FeedCounts feed_observation_counts = 7 [json_name = "feedObservationCounts"];
  int feed_observation_counts_size() const;
  private:
  int _internal_feed_observation_counts_size() const;

  public:
  void clear_feed_observation_counts() ;
  ::injective::ocr::v1beta1::FeedCounts* mutable_feed_observation_counts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::ocr::v1beta1::FeedCounts >*
      mutable_feed_observation_counts();
  private:
  const ::injective::ocr::v1beta1::FeedCounts& _internal_feed_observation_counts(int index) const;
  ::injective::ocr::v1beta1::FeedCounts* _internal_add_feed_observation_counts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::ocr::v1beta1::FeedCounts>& _internal_feed_observation_counts() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::ocr::v1beta1::FeedCounts>* _internal_mutable_feed_observation_counts();
  public:
  const ::injective::ocr::v1beta1::FeedCounts& feed_observation_counts(int index) const;
  ::injective::ocr::v1beta1::FeedCounts* add_feed_observation_counts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::ocr::v1beta1::FeedCounts >&
      feed_observation_counts() const;
  // repeated .injective.ocr.v1beta1.FeedCounts feed_transmission_counts = 8 [json_name = "feedTransmissionCounts"];
  int feed_transmission_counts_size() const;
  private:
  int _internal_feed_transmission_counts_size() const;

  public:
  void clear_feed_transmission_counts() ;
  ::injective::ocr::v1beta1::FeedCounts* mutable_feed_transmission_counts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::ocr::v1beta1::FeedCounts >*
      mutable_feed_transmission_counts();
  private:
  const ::injective::ocr::v1beta1::FeedCounts& _internal_feed_transmission_counts(int index) const;
  ::injective::ocr::v1beta1::FeedCounts* _internal_add_feed_transmission_counts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::ocr::v1beta1::FeedCounts>& _internal_feed_transmission_counts() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::ocr::v1beta1::FeedCounts>* _internal_mutable_feed_transmission_counts();
  public:
  const ::injective::ocr::v1beta1::FeedCounts& feed_transmission_counts(int index) const;
  ::injective::ocr::v1beta1::FeedCounts* add_feed_transmission_counts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::ocr::v1beta1::FeedCounts >&
      feed_transmission_counts() const;
  // repeated .injective.ocr.v1beta1.PendingPayeeship pending_payeeships = 9 [json_name = "pendingPayeeships"];
  int pending_payeeships_size() const;
  private:
  int _internal_pending_payeeships_size() const;

  public:
  void clear_pending_payeeships() ;
  ::injective::ocr::v1beta1::PendingPayeeship* mutable_pending_payeeships(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::ocr::v1beta1::PendingPayeeship >*
      mutable_pending_payeeships();
  private:
  const ::injective::ocr::v1beta1::PendingPayeeship& _internal_pending_payeeships(int index) const;
  ::injective::ocr::v1beta1::PendingPayeeship* _internal_add_pending_payeeships();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::ocr::v1beta1::PendingPayeeship>& _internal_pending_payeeships() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::ocr::v1beta1::PendingPayeeship>* _internal_mutable_pending_payeeships();
  public:
  const ::injective::ocr::v1beta1::PendingPayeeship& pending_payeeships(int index) const;
  ::injective::ocr::v1beta1::PendingPayeeship* add_pending_payeeships();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::ocr::v1beta1::PendingPayeeship >&
      pending_payeeships() const;
  // .injective.ocr.v1beta1.Params params = 1 [json_name = "params", (.gogoproto.nullable) = false];
  bool has_params() const;
  void clear_params() ;
  const ::injective::ocr::v1beta1::Params& params() const;
  PROTOBUF_NODISCARD ::injective::ocr::v1beta1::Params* release_params();
  ::injective::ocr::v1beta1::Params* mutable_params();
  void set_allocated_params(::injective::ocr::v1beta1::Params* params);
  private:
  const ::injective::ocr::v1beta1::Params& _internal_params() const;
  ::injective::ocr::v1beta1::Params* _internal_mutable_params();
  public:
  void unsafe_arena_set_allocated_params(
      ::injective::ocr::v1beta1::Params* params);
  ::injective::ocr::v1beta1::Params* unsafe_arena_release_params();
  // @@protoc_insertion_point(class_scope:injective.ocr.v1beta1.GenesisState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::ocr::v1beta1::FeedConfig > feed_configs_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::ocr::v1beta1::FeedEpochAndRound > latest_epoch_and_rounds_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::ocr::v1beta1::FeedTransmission > feed_transmissions_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::ocr::v1beta1::FeedLatestAggregatorRoundIDs > latest_aggregator_round_ids_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::ocr::v1beta1::RewardPool > reward_pools_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::ocr::v1beta1::FeedCounts > feed_observation_counts_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::ocr::v1beta1::FeedCounts > feed_transmission_counts_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::ocr::v1beta1::PendingPayeeship > pending_payeeships_;
    ::injective::ocr::v1beta1::Params* params_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2focr_2fv1beta1_2fgenesis_2eproto;
};// -------------------------------------------------------------------

class FeedTransmission final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.ocr.v1beta1.FeedTransmission) */ {
 public:
  inline FeedTransmission() : FeedTransmission(nullptr) {}
  ~FeedTransmission() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR FeedTransmission(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FeedTransmission(const FeedTransmission& from);
  FeedTransmission(FeedTransmission&& from) noexcept
    : FeedTransmission() {
    *this = ::std::move(from);
  }

  inline FeedTransmission& operator=(const FeedTransmission& from) {
    CopyFrom(from);
    return *this;
  }
  inline FeedTransmission& operator=(FeedTransmission&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FeedTransmission& default_instance() {
    return *internal_default_instance();
  }
  static inline const FeedTransmission* internal_default_instance() {
    return reinterpret_cast<const FeedTransmission*>(
               &_FeedTransmission_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FeedTransmission& a, FeedTransmission& b) {
    a.Swap(&b);
  }
  inline void Swap(FeedTransmission* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FeedTransmission* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FeedTransmission* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FeedTransmission>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FeedTransmission& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FeedTransmission& from) {
    FeedTransmission::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FeedTransmission* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.ocr.v1beta1.FeedTransmission";
  }
  protected:
  explicit FeedTransmission(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFeedIdFieldNumber = 1,
    kTransmissionFieldNumber = 2,
  };
  // string feed_id = 1 [json_name = "feedId"];
  void clear_feed_id() ;
  const std::string& feed_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_feed_id(Arg_&& arg, Args_... args);
  std::string* mutable_feed_id();
  PROTOBUF_NODISCARD std::string* release_feed_id();
  void set_allocated_feed_id(std::string* ptr);

  private:
  const std::string& _internal_feed_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_feed_id(
      const std::string& value);
  std::string* _internal_mutable_feed_id();

  public:
  // .injective.ocr.v1beta1.Transmission transmission = 2 [json_name = "transmission"];
  bool has_transmission() const;
  void clear_transmission() ;
  const ::injective::ocr::v1beta1::Transmission& transmission() const;
  PROTOBUF_NODISCARD ::injective::ocr::v1beta1::Transmission* release_transmission();
  ::injective::ocr::v1beta1::Transmission* mutable_transmission();
  void set_allocated_transmission(::injective::ocr::v1beta1::Transmission* transmission);
  private:
  const ::injective::ocr::v1beta1::Transmission& _internal_transmission() const;
  ::injective::ocr::v1beta1::Transmission* _internal_mutable_transmission();
  public:
  void unsafe_arena_set_allocated_transmission(
      ::injective::ocr::v1beta1::Transmission* transmission);
  ::injective::ocr::v1beta1::Transmission* unsafe_arena_release_transmission();
  // @@protoc_insertion_point(class_scope:injective.ocr.v1beta1.FeedTransmission)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr feed_id_;
    ::injective::ocr::v1beta1::Transmission* transmission_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2focr_2fv1beta1_2fgenesis_2eproto;
};// -------------------------------------------------------------------

class FeedEpochAndRound final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.ocr.v1beta1.FeedEpochAndRound) */ {
 public:
  inline FeedEpochAndRound() : FeedEpochAndRound(nullptr) {}
  ~FeedEpochAndRound() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR FeedEpochAndRound(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FeedEpochAndRound(const FeedEpochAndRound& from);
  FeedEpochAndRound(FeedEpochAndRound&& from) noexcept
    : FeedEpochAndRound() {
    *this = ::std::move(from);
  }

  inline FeedEpochAndRound& operator=(const FeedEpochAndRound& from) {
    CopyFrom(from);
    return *this;
  }
  inline FeedEpochAndRound& operator=(FeedEpochAndRound&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FeedEpochAndRound& default_instance() {
    return *internal_default_instance();
  }
  static inline const FeedEpochAndRound* internal_default_instance() {
    return reinterpret_cast<const FeedEpochAndRound*>(
               &_FeedEpochAndRound_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(FeedEpochAndRound& a, FeedEpochAndRound& b) {
    a.Swap(&b);
  }
  inline void Swap(FeedEpochAndRound* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FeedEpochAndRound* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FeedEpochAndRound* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FeedEpochAndRound>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FeedEpochAndRound& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FeedEpochAndRound& from) {
    FeedEpochAndRound::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FeedEpochAndRound* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.ocr.v1beta1.FeedEpochAndRound";
  }
  protected:
  explicit FeedEpochAndRound(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFeedIdFieldNumber = 1,
    kEpochAndRoundFieldNumber = 2,
  };
  // string feed_id = 1 [json_name = "feedId"];
  void clear_feed_id() ;
  const std::string& feed_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_feed_id(Arg_&& arg, Args_... args);
  std::string* mutable_feed_id();
  PROTOBUF_NODISCARD std::string* release_feed_id();
  void set_allocated_feed_id(std::string* ptr);

  private:
  const std::string& _internal_feed_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_feed_id(
      const std::string& value);
  std::string* _internal_mutable_feed_id();

  public:
  // .injective.ocr.v1beta1.EpochAndRound epoch_and_round = 2 [json_name = "epochAndRound"];
  bool has_epoch_and_round() const;
  void clear_epoch_and_round() ;
  const ::injective::ocr::v1beta1::EpochAndRound& epoch_and_round() const;
  PROTOBUF_NODISCARD ::injective::ocr::v1beta1::EpochAndRound* release_epoch_and_round();
  ::injective::ocr::v1beta1::EpochAndRound* mutable_epoch_and_round();
  void set_allocated_epoch_and_round(::injective::ocr::v1beta1::EpochAndRound* epoch_and_round);
  private:
  const ::injective::ocr::v1beta1::EpochAndRound& _internal_epoch_and_round() const;
  ::injective::ocr::v1beta1::EpochAndRound* _internal_mutable_epoch_and_round();
  public:
  void unsafe_arena_set_allocated_epoch_and_round(
      ::injective::ocr::v1beta1::EpochAndRound* epoch_and_round);
  ::injective::ocr::v1beta1::EpochAndRound* unsafe_arena_release_epoch_and_round();
  // @@protoc_insertion_point(class_scope:injective.ocr.v1beta1.FeedEpochAndRound)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr feed_id_;
    ::injective::ocr::v1beta1::EpochAndRound* epoch_and_round_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2focr_2fv1beta1_2fgenesis_2eproto;
};// -------------------------------------------------------------------

class FeedLatestAggregatorRoundIDs final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.ocr.v1beta1.FeedLatestAggregatorRoundIDs) */ {
 public:
  inline FeedLatestAggregatorRoundIDs() : FeedLatestAggregatorRoundIDs(nullptr) {}
  ~FeedLatestAggregatorRoundIDs() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR FeedLatestAggregatorRoundIDs(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FeedLatestAggregatorRoundIDs(const FeedLatestAggregatorRoundIDs& from);
  FeedLatestAggregatorRoundIDs(FeedLatestAggregatorRoundIDs&& from) noexcept
    : FeedLatestAggregatorRoundIDs() {
    *this = ::std::move(from);
  }

  inline FeedLatestAggregatorRoundIDs& operator=(const FeedLatestAggregatorRoundIDs& from) {
    CopyFrom(from);
    return *this;
  }
  inline FeedLatestAggregatorRoundIDs& operator=(FeedLatestAggregatorRoundIDs&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FeedLatestAggregatorRoundIDs& default_instance() {
    return *internal_default_instance();
  }
  static inline const FeedLatestAggregatorRoundIDs* internal_default_instance() {
    return reinterpret_cast<const FeedLatestAggregatorRoundIDs*>(
               &_FeedLatestAggregatorRoundIDs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(FeedLatestAggregatorRoundIDs& a, FeedLatestAggregatorRoundIDs& b) {
    a.Swap(&b);
  }
  inline void Swap(FeedLatestAggregatorRoundIDs* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FeedLatestAggregatorRoundIDs* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FeedLatestAggregatorRoundIDs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FeedLatestAggregatorRoundIDs>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FeedLatestAggregatorRoundIDs& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FeedLatestAggregatorRoundIDs& from) {
    FeedLatestAggregatorRoundIDs::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FeedLatestAggregatorRoundIDs* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.ocr.v1beta1.FeedLatestAggregatorRoundIDs";
  }
  protected:
  explicit FeedLatestAggregatorRoundIDs(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFeedIdFieldNumber = 1,
    kAggregatorRoundIdFieldNumber = 2,
  };
  // string feed_id = 1 [json_name = "feedId"];
  void clear_feed_id() ;
  const std::string& feed_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_feed_id(Arg_&& arg, Args_... args);
  std::string* mutable_feed_id();
  PROTOBUF_NODISCARD std::string* release_feed_id();
  void set_allocated_feed_id(std::string* ptr);

  private:
  const std::string& _internal_feed_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_feed_id(
      const std::string& value);
  std::string* _internal_mutable_feed_id();

  public:
  // uint64 aggregator_round_id = 2 [json_name = "aggregatorRoundId"];
  void clear_aggregator_round_id() ;
  ::uint64_t aggregator_round_id() const;
  void set_aggregator_round_id(::uint64_t value);

  private:
  ::uint64_t _internal_aggregator_round_id() const;
  void _internal_set_aggregator_round_id(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:injective.ocr.v1beta1.FeedLatestAggregatorRoundIDs)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr feed_id_;
    ::uint64_t aggregator_round_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2focr_2fv1beta1_2fgenesis_2eproto;
};// -------------------------------------------------------------------

class RewardPool final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.ocr.v1beta1.RewardPool) */ {
 public:
  inline RewardPool() : RewardPool(nullptr) {}
  ~RewardPool() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR RewardPool(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RewardPool(const RewardPool& from);
  RewardPool(RewardPool&& from) noexcept
    : RewardPool() {
    *this = ::std::move(from);
  }

  inline RewardPool& operator=(const RewardPool& from) {
    CopyFrom(from);
    return *this;
  }
  inline RewardPool& operator=(RewardPool&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RewardPool& default_instance() {
    return *internal_default_instance();
  }
  static inline const RewardPool* internal_default_instance() {
    return reinterpret_cast<const RewardPool*>(
               &_RewardPool_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(RewardPool& a, RewardPool& b) {
    a.Swap(&b);
  }
  inline void Swap(RewardPool* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RewardPool* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RewardPool* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RewardPool>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RewardPool& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RewardPool& from) {
    RewardPool::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RewardPool* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.ocr.v1beta1.RewardPool";
  }
  protected:
  explicit RewardPool(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFeedIdFieldNumber = 1,
    kAmountFieldNumber = 2,
  };
  // string feed_id = 1 [json_name = "feedId"];
  void clear_feed_id() ;
  const std::string& feed_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_feed_id(Arg_&& arg, Args_... args);
  std::string* mutable_feed_id();
  PROTOBUF_NODISCARD std::string* release_feed_id();
  void set_allocated_feed_id(std::string* ptr);

  private:
  const std::string& _internal_feed_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_feed_id(
      const std::string& value);
  std::string* _internal_mutable_feed_id();

  public:
  // .cosmos.base.v1beta1.Coin amount = 2 [json_name = "amount", (.gogoproto.nullable) = false];
  bool has_amount() const;
  void clear_amount() ;
  const ::cosmos::base::v1beta1::Coin& amount() const;
  PROTOBUF_NODISCARD ::cosmos::base::v1beta1::Coin* release_amount();
  ::cosmos::base::v1beta1::Coin* mutable_amount();
  void set_allocated_amount(::cosmos::base::v1beta1::Coin* amount);
  private:
  const ::cosmos::base::v1beta1::Coin& _internal_amount() const;
  ::cosmos::base::v1beta1::Coin* _internal_mutable_amount();
  public:
  void unsafe_arena_set_allocated_amount(
      ::cosmos::base::v1beta1::Coin* amount);
  ::cosmos::base::v1beta1::Coin* unsafe_arena_release_amount();
  // @@protoc_insertion_point(class_scope:injective.ocr.v1beta1.RewardPool)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr feed_id_;
    ::cosmos::base::v1beta1::Coin* amount_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2focr_2fv1beta1_2fgenesis_2eproto;
};// -------------------------------------------------------------------

class FeedCounts final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.ocr.v1beta1.FeedCounts) */ {
 public:
  inline FeedCounts() : FeedCounts(nullptr) {}
  ~FeedCounts() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR FeedCounts(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FeedCounts(const FeedCounts& from);
  FeedCounts(FeedCounts&& from) noexcept
    : FeedCounts() {
    *this = ::std::move(from);
  }

  inline FeedCounts& operator=(const FeedCounts& from) {
    CopyFrom(from);
    return *this;
  }
  inline FeedCounts& operator=(FeedCounts&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FeedCounts& default_instance() {
    return *internal_default_instance();
  }
  static inline const FeedCounts* internal_default_instance() {
    return reinterpret_cast<const FeedCounts*>(
               &_FeedCounts_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(FeedCounts& a, FeedCounts& b) {
    a.Swap(&b);
  }
  inline void Swap(FeedCounts* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FeedCounts* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FeedCounts* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FeedCounts>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FeedCounts& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FeedCounts& from) {
    FeedCounts::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FeedCounts* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.ocr.v1beta1.FeedCounts";
  }
  protected:
  explicit FeedCounts(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCountsFieldNumber = 2,
    kFeedIdFieldNumber = 1,
  };
  // repeated .injective.ocr.v1beta1.Count counts = 2 [json_name = "counts"];
  int counts_size() const;
  private:
  int _internal_counts_size() const;

  public:
  void clear_counts() ;
  ::injective::ocr::v1beta1::Count* mutable_counts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::ocr::v1beta1::Count >*
      mutable_counts();
  private:
  const ::injective::ocr::v1beta1::Count& _internal_counts(int index) const;
  ::injective::ocr::v1beta1::Count* _internal_add_counts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::ocr::v1beta1::Count>& _internal_counts() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::ocr::v1beta1::Count>* _internal_mutable_counts();
  public:
  const ::injective::ocr::v1beta1::Count& counts(int index) const;
  ::injective::ocr::v1beta1::Count* add_counts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::ocr::v1beta1::Count >&
      counts() const;
  // string feed_id = 1 [json_name = "feedId"];
  void clear_feed_id() ;
  const std::string& feed_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_feed_id(Arg_&& arg, Args_... args);
  std::string* mutable_feed_id();
  PROTOBUF_NODISCARD std::string* release_feed_id();
  void set_allocated_feed_id(std::string* ptr);

  private:
  const std::string& _internal_feed_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_feed_id(
      const std::string& value);
  std::string* _internal_mutable_feed_id();

  public:
  // @@protoc_insertion_point(class_scope:injective.ocr.v1beta1.FeedCounts)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::ocr::v1beta1::Count > counts_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr feed_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2focr_2fv1beta1_2fgenesis_2eproto;
};// -------------------------------------------------------------------

class Count final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.ocr.v1beta1.Count) */ {
 public:
  inline Count() : Count(nullptr) {}
  ~Count() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Count(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Count(const Count& from);
  Count(Count&& from) noexcept
    : Count() {
    *this = ::std::move(from);
  }

  inline Count& operator=(const Count& from) {
    CopyFrom(from);
    return *this;
  }
  inline Count& operator=(Count&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Count& default_instance() {
    return *internal_default_instance();
  }
  static inline const Count* internal_default_instance() {
    return reinterpret_cast<const Count*>(
               &_Count_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Count& a, Count& b) {
    a.Swap(&b);
  }
  inline void Swap(Count* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Count* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Count* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Count>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Count& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Count& from) {
    Count::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Count* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.ocr.v1beta1.Count";
  }
  protected:
  explicit Count(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
    kCountFieldNumber = 2,
  };
  // string address = 1 [json_name = "address"];
  void clear_address() ;
  const std::string& address() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_address(Arg_&& arg, Args_... args);
  std::string* mutable_address();
  PROTOBUF_NODISCARD std::string* release_address();
  void set_allocated_address(std::string* ptr);

  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(
      const std::string& value);
  std::string* _internal_mutable_address();

  public:
  // uint64 count = 2 [json_name = "count"];
  void clear_count() ;
  ::uint64_t count() const;
  void set_count(::uint64_t value);

  private:
  ::uint64_t _internal_count() const;
  void _internal_set_count(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:injective.ocr.v1beta1.Count)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
    ::uint64_t count_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2focr_2fv1beta1_2fgenesis_2eproto;
};// -------------------------------------------------------------------

class PendingPayeeship final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.ocr.v1beta1.PendingPayeeship) */ {
 public:
  inline PendingPayeeship() : PendingPayeeship(nullptr) {}
  ~PendingPayeeship() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PendingPayeeship(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PendingPayeeship(const PendingPayeeship& from);
  PendingPayeeship(PendingPayeeship&& from) noexcept
    : PendingPayeeship() {
    *this = ::std::move(from);
  }

  inline PendingPayeeship& operator=(const PendingPayeeship& from) {
    CopyFrom(from);
    return *this;
  }
  inline PendingPayeeship& operator=(PendingPayeeship&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PendingPayeeship& default_instance() {
    return *internal_default_instance();
  }
  static inline const PendingPayeeship* internal_default_instance() {
    return reinterpret_cast<const PendingPayeeship*>(
               &_PendingPayeeship_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(PendingPayeeship& a, PendingPayeeship& b) {
    a.Swap(&b);
  }
  inline void Swap(PendingPayeeship* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PendingPayeeship* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PendingPayeeship* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PendingPayeeship>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PendingPayeeship& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PendingPayeeship& from) {
    PendingPayeeship::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PendingPayeeship* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.ocr.v1beta1.PendingPayeeship";
  }
  protected:
  explicit PendingPayeeship(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFeedIdFieldNumber = 1,
    kTransmitterFieldNumber = 2,
    kProposedPayeeFieldNumber = 3,
  };
  // string feed_id = 1 [json_name = "feedId"];
  void clear_feed_id() ;
  const std::string& feed_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_feed_id(Arg_&& arg, Args_... args);
  std::string* mutable_feed_id();
  PROTOBUF_NODISCARD std::string* release_feed_id();
  void set_allocated_feed_id(std::string* ptr);

  private:
  const std::string& _internal_feed_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_feed_id(
      const std::string& value);
  std::string* _internal_mutable_feed_id();

  public:
  // string transmitter = 2 [json_name = "transmitter"];
  void clear_transmitter() ;
  const std::string& transmitter() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_transmitter(Arg_&& arg, Args_... args);
  std::string* mutable_transmitter();
  PROTOBUF_NODISCARD std::string* release_transmitter();
  void set_allocated_transmitter(std::string* ptr);

  private:
  const std::string& _internal_transmitter() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_transmitter(
      const std::string& value);
  std::string* _internal_mutable_transmitter();

  public:
  // string proposed_payee = 3 [json_name = "proposedPayee"];
  void clear_proposed_payee() ;
  const std::string& proposed_payee() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_proposed_payee(Arg_&& arg, Args_... args);
  std::string* mutable_proposed_payee();
  PROTOBUF_NODISCARD std::string* release_proposed_payee();
  void set_allocated_proposed_payee(std::string* ptr);

  private:
  const std::string& _internal_proposed_payee() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_proposed_payee(
      const std::string& value);
  std::string* _internal_mutable_proposed_payee();

  public:
  // @@protoc_insertion_point(class_scope:injective.ocr.v1beta1.PendingPayeeship)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr feed_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr transmitter_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr proposed_payee_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2focr_2fv1beta1_2fgenesis_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// GenesisState

// .injective.ocr.v1beta1.Params params = 1 [json_name = "params", (.gogoproto.nullable) = false];
inline bool GenesisState::has_params() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.params_ != nullptr);
  return value;
}
inline const ::injective::ocr::v1beta1::Params& GenesisState::_internal_params() const {
  const ::injective::ocr::v1beta1::Params* p = _impl_.params_;
  return p != nullptr ? *p : reinterpret_cast<const ::injective::ocr::v1beta1::Params&>(
      ::injective::ocr::v1beta1::_Params_default_instance_);
}
inline const ::injective::ocr::v1beta1::Params& GenesisState::params() const {
  // @@protoc_insertion_point(field_get:injective.ocr.v1beta1.GenesisState.params)
  return _internal_params();
}
inline void GenesisState::unsafe_arena_set_allocated_params(
    ::injective::ocr::v1beta1::Params* params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.params_);
  }
  _impl_.params_ = params;
  if (params) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:injective.ocr.v1beta1.GenesisState.params)
}
inline ::injective::ocr::v1beta1::Params* GenesisState::release_params() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::injective::ocr::v1beta1::Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::injective::ocr::v1beta1::Params* GenesisState::unsafe_arena_release_params() {
  // @@protoc_insertion_point(field_release:injective.ocr.v1beta1.GenesisState.params)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::injective::ocr::v1beta1::Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
  return temp;
}
inline ::injective::ocr::v1beta1::Params* GenesisState::_internal_mutable_params() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.params_ == nullptr) {
    auto* p = CreateMaybeMessage<::injective::ocr::v1beta1::Params>(GetArenaForAllocation());
    _impl_.params_ = p;
  }
  return _impl_.params_;
}
inline ::injective::ocr::v1beta1::Params* GenesisState::mutable_params() {
  ::injective::ocr::v1beta1::Params* _msg = _internal_mutable_params();
  // @@protoc_insertion_point(field_mutable:injective.ocr.v1beta1.GenesisState.params)
  return _msg;
}
inline void GenesisState::set_allocated_params(::injective::ocr::v1beta1::Params* params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.params_);
  }
  if (params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(params));
    if (message_arena != submessage_arena) {
      params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, params, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.params_ = params;
  // @@protoc_insertion_point(field_set_allocated:injective.ocr.v1beta1.GenesisState.params)
}

// repeated .injective.ocr.v1beta1.FeedConfig feed_configs = 2 [json_name = "feedConfigs"];
inline int GenesisState::_internal_feed_configs_size() const {
  return _impl_.feed_configs_.size();
}
inline int GenesisState::feed_configs_size() const {
  return _internal_feed_configs_size();
}
inline ::injective::ocr::v1beta1::FeedConfig* GenesisState::mutable_feed_configs(int index) {
  // @@protoc_insertion_point(field_mutable:injective.ocr.v1beta1.GenesisState.feed_configs)
  return _internal_mutable_feed_configs()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::ocr::v1beta1::FeedConfig >*
GenesisState::mutable_feed_configs() {
  // @@protoc_insertion_point(field_mutable_list:injective.ocr.v1beta1.GenesisState.feed_configs)
  return _internal_mutable_feed_configs();
}
inline const ::injective::ocr::v1beta1::FeedConfig& GenesisState::_internal_feed_configs(int index) const {
  return _internal_feed_configs().Get(index);
}
inline const ::injective::ocr::v1beta1::FeedConfig& GenesisState::feed_configs(int index) const {
  // @@protoc_insertion_point(field_get:injective.ocr.v1beta1.GenesisState.feed_configs)
  return _internal_feed_configs(index);
}
inline ::injective::ocr::v1beta1::FeedConfig* GenesisState::_internal_add_feed_configs() {
  return _internal_mutable_feed_configs()->Add();
}
inline ::injective::ocr::v1beta1::FeedConfig* GenesisState::add_feed_configs() {
  ::injective::ocr::v1beta1::FeedConfig* _add = _internal_add_feed_configs();
  // @@protoc_insertion_point(field_add:injective.ocr.v1beta1.GenesisState.feed_configs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::ocr::v1beta1::FeedConfig >&
GenesisState::feed_configs() const {
  // @@protoc_insertion_point(field_list:injective.ocr.v1beta1.GenesisState.feed_configs)
  return _internal_feed_configs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::ocr::v1beta1::FeedConfig>&
GenesisState::_internal_feed_configs() const {
  return _impl_.feed_configs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::ocr::v1beta1::FeedConfig>*
GenesisState::_internal_mutable_feed_configs() {
  return &_impl_.feed_configs_;
}

// repeated .injective.ocr.v1beta1.FeedEpochAndRound latest_epoch_and_rounds = 3 [json_name = "latestEpochAndRounds"];
inline int GenesisState::_internal_latest_epoch_and_rounds_size() const {
  return _impl_.latest_epoch_and_rounds_.size();
}
inline int GenesisState::latest_epoch_and_rounds_size() const {
  return _internal_latest_epoch_and_rounds_size();
}
inline void GenesisState::clear_latest_epoch_and_rounds() {
  _internal_mutable_latest_epoch_and_rounds()->Clear();
}
inline ::injective::ocr::v1beta1::FeedEpochAndRound* GenesisState::mutable_latest_epoch_and_rounds(int index) {
  // @@protoc_insertion_point(field_mutable:injective.ocr.v1beta1.GenesisState.latest_epoch_and_rounds)
  return _internal_mutable_latest_epoch_and_rounds()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::ocr::v1beta1::FeedEpochAndRound >*
GenesisState::mutable_latest_epoch_and_rounds() {
  // @@protoc_insertion_point(field_mutable_list:injective.ocr.v1beta1.GenesisState.latest_epoch_and_rounds)
  return _internal_mutable_latest_epoch_and_rounds();
}
inline const ::injective::ocr::v1beta1::FeedEpochAndRound& GenesisState::_internal_latest_epoch_and_rounds(int index) const {
  return _internal_latest_epoch_and_rounds().Get(index);
}
inline const ::injective::ocr::v1beta1::FeedEpochAndRound& GenesisState::latest_epoch_and_rounds(int index) const {
  // @@protoc_insertion_point(field_get:injective.ocr.v1beta1.GenesisState.latest_epoch_and_rounds)
  return _internal_latest_epoch_and_rounds(index);
}
inline ::injective::ocr::v1beta1::FeedEpochAndRound* GenesisState::_internal_add_latest_epoch_and_rounds() {
  return _internal_mutable_latest_epoch_and_rounds()->Add();
}
inline ::injective::ocr::v1beta1::FeedEpochAndRound* GenesisState::add_latest_epoch_and_rounds() {
  ::injective::ocr::v1beta1::FeedEpochAndRound* _add = _internal_add_latest_epoch_and_rounds();
  // @@protoc_insertion_point(field_add:injective.ocr.v1beta1.GenesisState.latest_epoch_and_rounds)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::ocr::v1beta1::FeedEpochAndRound >&
GenesisState::latest_epoch_and_rounds() const {
  // @@protoc_insertion_point(field_list:injective.ocr.v1beta1.GenesisState.latest_epoch_and_rounds)
  return _internal_latest_epoch_and_rounds();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::ocr::v1beta1::FeedEpochAndRound>&
GenesisState::_internal_latest_epoch_and_rounds() const {
  return _impl_.latest_epoch_and_rounds_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::ocr::v1beta1::FeedEpochAndRound>*
GenesisState::_internal_mutable_latest_epoch_and_rounds() {
  return &_impl_.latest_epoch_and_rounds_;
}

// repeated .injective.ocr.v1beta1.FeedTransmission feed_transmissions = 4 [json_name = "feedTransmissions"];
inline int GenesisState::_internal_feed_transmissions_size() const {
  return _impl_.feed_transmissions_.size();
}
inline int GenesisState::feed_transmissions_size() const {
  return _internal_feed_transmissions_size();
}
inline void GenesisState::clear_feed_transmissions() {
  _internal_mutable_feed_transmissions()->Clear();
}
inline ::injective::ocr::v1beta1::FeedTransmission* GenesisState::mutable_feed_transmissions(int index) {
  // @@protoc_insertion_point(field_mutable:injective.ocr.v1beta1.GenesisState.feed_transmissions)
  return _internal_mutable_feed_transmissions()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::ocr::v1beta1::FeedTransmission >*
GenesisState::mutable_feed_transmissions() {
  // @@protoc_insertion_point(field_mutable_list:injective.ocr.v1beta1.GenesisState.feed_transmissions)
  return _internal_mutable_feed_transmissions();
}
inline const ::injective::ocr::v1beta1::FeedTransmission& GenesisState::_internal_feed_transmissions(int index) const {
  return _internal_feed_transmissions().Get(index);
}
inline const ::injective::ocr::v1beta1::FeedTransmission& GenesisState::feed_transmissions(int index) const {
  // @@protoc_insertion_point(field_get:injective.ocr.v1beta1.GenesisState.feed_transmissions)
  return _internal_feed_transmissions(index);
}
inline ::injective::ocr::v1beta1::FeedTransmission* GenesisState::_internal_add_feed_transmissions() {
  return _internal_mutable_feed_transmissions()->Add();
}
inline ::injective::ocr::v1beta1::FeedTransmission* GenesisState::add_feed_transmissions() {
  ::injective::ocr::v1beta1::FeedTransmission* _add = _internal_add_feed_transmissions();
  // @@protoc_insertion_point(field_add:injective.ocr.v1beta1.GenesisState.feed_transmissions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::ocr::v1beta1::FeedTransmission >&
GenesisState::feed_transmissions() const {
  // @@protoc_insertion_point(field_list:injective.ocr.v1beta1.GenesisState.feed_transmissions)
  return _internal_feed_transmissions();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::ocr::v1beta1::FeedTransmission>&
GenesisState::_internal_feed_transmissions() const {
  return _impl_.feed_transmissions_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::ocr::v1beta1::FeedTransmission>*
GenesisState::_internal_mutable_feed_transmissions() {
  return &_impl_.feed_transmissions_;
}

// repeated .injective.ocr.v1beta1.FeedLatestAggregatorRoundIDs latest_aggregator_round_ids = 5 [json_name = "latestAggregatorRoundIds"];
inline int GenesisState::_internal_latest_aggregator_round_ids_size() const {
  return _impl_.latest_aggregator_round_ids_.size();
}
inline int GenesisState::latest_aggregator_round_ids_size() const {
  return _internal_latest_aggregator_round_ids_size();
}
inline void GenesisState::clear_latest_aggregator_round_ids() {
  _internal_mutable_latest_aggregator_round_ids()->Clear();
}
inline ::injective::ocr::v1beta1::FeedLatestAggregatorRoundIDs* GenesisState::mutable_latest_aggregator_round_ids(int index) {
  // @@protoc_insertion_point(field_mutable:injective.ocr.v1beta1.GenesisState.latest_aggregator_round_ids)
  return _internal_mutable_latest_aggregator_round_ids()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::ocr::v1beta1::FeedLatestAggregatorRoundIDs >*
GenesisState::mutable_latest_aggregator_round_ids() {
  // @@protoc_insertion_point(field_mutable_list:injective.ocr.v1beta1.GenesisState.latest_aggregator_round_ids)
  return _internal_mutable_latest_aggregator_round_ids();
}
inline const ::injective::ocr::v1beta1::FeedLatestAggregatorRoundIDs& GenesisState::_internal_latest_aggregator_round_ids(int index) const {
  return _internal_latest_aggregator_round_ids().Get(index);
}
inline const ::injective::ocr::v1beta1::FeedLatestAggregatorRoundIDs& GenesisState::latest_aggregator_round_ids(int index) const {
  // @@protoc_insertion_point(field_get:injective.ocr.v1beta1.GenesisState.latest_aggregator_round_ids)
  return _internal_latest_aggregator_round_ids(index);
}
inline ::injective::ocr::v1beta1::FeedLatestAggregatorRoundIDs* GenesisState::_internal_add_latest_aggregator_round_ids() {
  return _internal_mutable_latest_aggregator_round_ids()->Add();
}
inline ::injective::ocr::v1beta1::FeedLatestAggregatorRoundIDs* GenesisState::add_latest_aggregator_round_ids() {
  ::injective::ocr::v1beta1::FeedLatestAggregatorRoundIDs* _add = _internal_add_latest_aggregator_round_ids();
  // @@protoc_insertion_point(field_add:injective.ocr.v1beta1.GenesisState.latest_aggregator_round_ids)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::ocr::v1beta1::FeedLatestAggregatorRoundIDs >&
GenesisState::latest_aggregator_round_ids() const {
  // @@protoc_insertion_point(field_list:injective.ocr.v1beta1.GenesisState.latest_aggregator_round_ids)
  return _internal_latest_aggregator_round_ids();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::ocr::v1beta1::FeedLatestAggregatorRoundIDs>&
GenesisState::_internal_latest_aggregator_round_ids() const {
  return _impl_.latest_aggregator_round_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::ocr::v1beta1::FeedLatestAggregatorRoundIDs>*
GenesisState::_internal_mutable_latest_aggregator_round_ids() {
  return &_impl_.latest_aggregator_round_ids_;
}

// repeated .injective.ocr.v1beta1.RewardPool reward_pools = 6 [json_name = "rewardPools"];
inline int GenesisState::_internal_reward_pools_size() const {
  return _impl_.reward_pools_.size();
}
inline int GenesisState::reward_pools_size() const {
  return _internal_reward_pools_size();
}
inline void GenesisState::clear_reward_pools() {
  _internal_mutable_reward_pools()->Clear();
}
inline ::injective::ocr::v1beta1::RewardPool* GenesisState::mutable_reward_pools(int index) {
  // @@protoc_insertion_point(field_mutable:injective.ocr.v1beta1.GenesisState.reward_pools)
  return _internal_mutable_reward_pools()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::ocr::v1beta1::RewardPool >*
GenesisState::mutable_reward_pools() {
  // @@protoc_insertion_point(field_mutable_list:injective.ocr.v1beta1.GenesisState.reward_pools)
  return _internal_mutable_reward_pools();
}
inline const ::injective::ocr::v1beta1::RewardPool& GenesisState::_internal_reward_pools(int index) const {
  return _internal_reward_pools().Get(index);
}
inline const ::injective::ocr::v1beta1::RewardPool& GenesisState::reward_pools(int index) const {
  // @@protoc_insertion_point(field_get:injective.ocr.v1beta1.GenesisState.reward_pools)
  return _internal_reward_pools(index);
}
inline ::injective::ocr::v1beta1::RewardPool* GenesisState::_internal_add_reward_pools() {
  return _internal_mutable_reward_pools()->Add();
}
inline ::injective::ocr::v1beta1::RewardPool* GenesisState::add_reward_pools() {
  ::injective::ocr::v1beta1::RewardPool* _add = _internal_add_reward_pools();
  // @@protoc_insertion_point(field_add:injective.ocr.v1beta1.GenesisState.reward_pools)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::ocr::v1beta1::RewardPool >&
GenesisState::reward_pools() const {
  // @@protoc_insertion_point(field_list:injective.ocr.v1beta1.GenesisState.reward_pools)
  return _internal_reward_pools();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::ocr::v1beta1::RewardPool>&
GenesisState::_internal_reward_pools() const {
  return _impl_.reward_pools_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::ocr::v1beta1::RewardPool>*
GenesisState::_internal_mutable_reward_pools() {
  return &_impl_.reward_pools_;
}

// repeated .injective.ocr.v1beta1.FeedCounts feed_observation_counts = 7 [json_name = "feedObservationCounts"];
inline int GenesisState::_internal_feed_observation_counts_size() const {
  return _impl_.feed_observation_counts_.size();
}
inline int GenesisState::feed_observation_counts_size() const {
  return _internal_feed_observation_counts_size();
}
inline void GenesisState::clear_feed_observation_counts() {
  _internal_mutable_feed_observation_counts()->Clear();
}
inline ::injective::ocr::v1beta1::FeedCounts* GenesisState::mutable_feed_observation_counts(int index) {
  // @@protoc_insertion_point(field_mutable:injective.ocr.v1beta1.GenesisState.feed_observation_counts)
  return _internal_mutable_feed_observation_counts()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::ocr::v1beta1::FeedCounts >*
GenesisState::mutable_feed_observation_counts() {
  // @@protoc_insertion_point(field_mutable_list:injective.ocr.v1beta1.GenesisState.feed_observation_counts)
  return _internal_mutable_feed_observation_counts();
}
inline const ::injective::ocr::v1beta1::FeedCounts& GenesisState::_internal_feed_observation_counts(int index) const {
  return _internal_feed_observation_counts().Get(index);
}
inline const ::injective::ocr::v1beta1::FeedCounts& GenesisState::feed_observation_counts(int index) const {
  // @@protoc_insertion_point(field_get:injective.ocr.v1beta1.GenesisState.feed_observation_counts)
  return _internal_feed_observation_counts(index);
}
inline ::injective::ocr::v1beta1::FeedCounts* GenesisState::_internal_add_feed_observation_counts() {
  return _internal_mutable_feed_observation_counts()->Add();
}
inline ::injective::ocr::v1beta1::FeedCounts* GenesisState::add_feed_observation_counts() {
  ::injective::ocr::v1beta1::FeedCounts* _add = _internal_add_feed_observation_counts();
  // @@protoc_insertion_point(field_add:injective.ocr.v1beta1.GenesisState.feed_observation_counts)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::ocr::v1beta1::FeedCounts >&
GenesisState::feed_observation_counts() const {
  // @@protoc_insertion_point(field_list:injective.ocr.v1beta1.GenesisState.feed_observation_counts)
  return _internal_feed_observation_counts();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::ocr::v1beta1::FeedCounts>&
GenesisState::_internal_feed_observation_counts() const {
  return _impl_.feed_observation_counts_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::ocr::v1beta1::FeedCounts>*
GenesisState::_internal_mutable_feed_observation_counts() {
  return &_impl_.feed_observation_counts_;
}

// repeated .injective.ocr.v1beta1.FeedCounts feed_transmission_counts = 8 [json_name = "feedTransmissionCounts"];
inline int GenesisState::_internal_feed_transmission_counts_size() const {
  return _impl_.feed_transmission_counts_.size();
}
inline int GenesisState::feed_transmission_counts_size() const {
  return _internal_feed_transmission_counts_size();
}
inline void GenesisState::clear_feed_transmission_counts() {
  _internal_mutable_feed_transmission_counts()->Clear();
}
inline ::injective::ocr::v1beta1::FeedCounts* GenesisState::mutable_feed_transmission_counts(int index) {
  // @@protoc_insertion_point(field_mutable:injective.ocr.v1beta1.GenesisState.feed_transmission_counts)
  return _internal_mutable_feed_transmission_counts()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::ocr::v1beta1::FeedCounts >*
GenesisState::mutable_feed_transmission_counts() {
  // @@protoc_insertion_point(field_mutable_list:injective.ocr.v1beta1.GenesisState.feed_transmission_counts)
  return _internal_mutable_feed_transmission_counts();
}
inline const ::injective::ocr::v1beta1::FeedCounts& GenesisState::_internal_feed_transmission_counts(int index) const {
  return _internal_feed_transmission_counts().Get(index);
}
inline const ::injective::ocr::v1beta1::FeedCounts& GenesisState::feed_transmission_counts(int index) const {
  // @@protoc_insertion_point(field_get:injective.ocr.v1beta1.GenesisState.feed_transmission_counts)
  return _internal_feed_transmission_counts(index);
}
inline ::injective::ocr::v1beta1::FeedCounts* GenesisState::_internal_add_feed_transmission_counts() {
  return _internal_mutable_feed_transmission_counts()->Add();
}
inline ::injective::ocr::v1beta1::FeedCounts* GenesisState::add_feed_transmission_counts() {
  ::injective::ocr::v1beta1::FeedCounts* _add = _internal_add_feed_transmission_counts();
  // @@protoc_insertion_point(field_add:injective.ocr.v1beta1.GenesisState.feed_transmission_counts)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::ocr::v1beta1::FeedCounts >&
GenesisState::feed_transmission_counts() const {
  // @@protoc_insertion_point(field_list:injective.ocr.v1beta1.GenesisState.feed_transmission_counts)
  return _internal_feed_transmission_counts();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::ocr::v1beta1::FeedCounts>&
GenesisState::_internal_feed_transmission_counts() const {
  return _impl_.feed_transmission_counts_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::ocr::v1beta1::FeedCounts>*
GenesisState::_internal_mutable_feed_transmission_counts() {
  return &_impl_.feed_transmission_counts_;
}

// repeated .injective.ocr.v1beta1.PendingPayeeship pending_payeeships = 9 [json_name = "pendingPayeeships"];
inline int GenesisState::_internal_pending_payeeships_size() const {
  return _impl_.pending_payeeships_.size();
}
inline int GenesisState::pending_payeeships_size() const {
  return _internal_pending_payeeships_size();
}
inline void GenesisState::clear_pending_payeeships() {
  _internal_mutable_pending_payeeships()->Clear();
}
inline ::injective::ocr::v1beta1::PendingPayeeship* GenesisState::mutable_pending_payeeships(int index) {
  // @@protoc_insertion_point(field_mutable:injective.ocr.v1beta1.GenesisState.pending_payeeships)
  return _internal_mutable_pending_payeeships()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::ocr::v1beta1::PendingPayeeship >*
GenesisState::mutable_pending_payeeships() {
  // @@protoc_insertion_point(field_mutable_list:injective.ocr.v1beta1.GenesisState.pending_payeeships)
  return _internal_mutable_pending_payeeships();
}
inline const ::injective::ocr::v1beta1::PendingPayeeship& GenesisState::_internal_pending_payeeships(int index) const {
  return _internal_pending_payeeships().Get(index);
}
inline const ::injective::ocr::v1beta1::PendingPayeeship& GenesisState::pending_payeeships(int index) const {
  // @@protoc_insertion_point(field_get:injective.ocr.v1beta1.GenesisState.pending_payeeships)
  return _internal_pending_payeeships(index);
}
inline ::injective::ocr::v1beta1::PendingPayeeship* GenesisState::_internal_add_pending_payeeships() {
  return _internal_mutable_pending_payeeships()->Add();
}
inline ::injective::ocr::v1beta1::PendingPayeeship* GenesisState::add_pending_payeeships() {
  ::injective::ocr::v1beta1::PendingPayeeship* _add = _internal_add_pending_payeeships();
  // @@protoc_insertion_point(field_add:injective.ocr.v1beta1.GenesisState.pending_payeeships)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::ocr::v1beta1::PendingPayeeship >&
GenesisState::pending_payeeships() const {
  // @@protoc_insertion_point(field_list:injective.ocr.v1beta1.GenesisState.pending_payeeships)
  return _internal_pending_payeeships();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::ocr::v1beta1::PendingPayeeship>&
GenesisState::_internal_pending_payeeships() const {
  return _impl_.pending_payeeships_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::ocr::v1beta1::PendingPayeeship>*
GenesisState::_internal_mutable_pending_payeeships() {
  return &_impl_.pending_payeeships_;
}

// -------------------------------------------------------------------

// FeedTransmission

// string feed_id = 1 [json_name = "feedId"];
inline void FeedTransmission::clear_feed_id() {
  _impl_.feed_id_.ClearToEmpty();
}
inline const std::string& FeedTransmission::feed_id() const {
  // @@protoc_insertion_point(field_get:injective.ocr.v1beta1.FeedTransmission.feed_id)
  return _internal_feed_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FeedTransmission::set_feed_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.feed_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.ocr.v1beta1.FeedTransmission.feed_id)
}
inline std::string* FeedTransmission::mutable_feed_id() {
  std::string* _s = _internal_mutable_feed_id();
  // @@protoc_insertion_point(field_mutable:injective.ocr.v1beta1.FeedTransmission.feed_id)
  return _s;
}
inline const std::string& FeedTransmission::_internal_feed_id() const {
  return _impl_.feed_id_.Get();
}
inline void FeedTransmission::_internal_set_feed_id(const std::string& value) {
  ;


  _impl_.feed_id_.Set(value, GetArenaForAllocation());
}
inline std::string* FeedTransmission::_internal_mutable_feed_id() {
  ;
  return _impl_.feed_id_.Mutable( GetArenaForAllocation());
}
inline std::string* FeedTransmission::release_feed_id() {
  // @@protoc_insertion_point(field_release:injective.ocr.v1beta1.FeedTransmission.feed_id)
  return _impl_.feed_id_.Release();
}
inline void FeedTransmission::set_allocated_feed_id(std::string* value) {
  _impl_.feed_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.feed_id_.IsDefault()) {
          _impl_.feed_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.ocr.v1beta1.FeedTransmission.feed_id)
}

// .injective.ocr.v1beta1.Transmission transmission = 2 [json_name = "transmission"];
inline bool FeedTransmission::has_transmission() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.transmission_ != nullptr);
  return value;
}
inline const ::injective::ocr::v1beta1::Transmission& FeedTransmission::_internal_transmission() const {
  const ::injective::ocr::v1beta1::Transmission* p = _impl_.transmission_;
  return p != nullptr ? *p : reinterpret_cast<const ::injective::ocr::v1beta1::Transmission&>(
      ::injective::ocr::v1beta1::_Transmission_default_instance_);
}
inline const ::injective::ocr::v1beta1::Transmission& FeedTransmission::transmission() const {
  // @@protoc_insertion_point(field_get:injective.ocr.v1beta1.FeedTransmission.transmission)
  return _internal_transmission();
}
inline void FeedTransmission::unsafe_arena_set_allocated_transmission(
    ::injective::ocr::v1beta1::Transmission* transmission) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.transmission_);
  }
  _impl_.transmission_ = transmission;
  if (transmission) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:injective.ocr.v1beta1.FeedTransmission.transmission)
}
inline ::injective::ocr::v1beta1::Transmission* FeedTransmission::release_transmission() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::injective::ocr::v1beta1::Transmission* temp = _impl_.transmission_;
  _impl_.transmission_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::injective::ocr::v1beta1::Transmission* FeedTransmission::unsafe_arena_release_transmission() {
  // @@protoc_insertion_point(field_release:injective.ocr.v1beta1.FeedTransmission.transmission)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::injective::ocr::v1beta1::Transmission* temp = _impl_.transmission_;
  _impl_.transmission_ = nullptr;
  return temp;
}
inline ::injective::ocr::v1beta1::Transmission* FeedTransmission::_internal_mutable_transmission() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.transmission_ == nullptr) {
    auto* p = CreateMaybeMessage<::injective::ocr::v1beta1::Transmission>(GetArenaForAllocation());
    _impl_.transmission_ = p;
  }
  return _impl_.transmission_;
}
inline ::injective::ocr::v1beta1::Transmission* FeedTransmission::mutable_transmission() {
  ::injective::ocr::v1beta1::Transmission* _msg = _internal_mutable_transmission();
  // @@protoc_insertion_point(field_mutable:injective.ocr.v1beta1.FeedTransmission.transmission)
  return _msg;
}
inline void FeedTransmission::set_allocated_transmission(::injective::ocr::v1beta1::Transmission* transmission) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.transmission_);
  }
  if (transmission) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transmission));
    if (message_arena != submessage_arena) {
      transmission = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transmission, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.transmission_ = transmission;
  // @@protoc_insertion_point(field_set_allocated:injective.ocr.v1beta1.FeedTransmission.transmission)
}

// -------------------------------------------------------------------

// FeedEpochAndRound

// string feed_id = 1 [json_name = "feedId"];
inline void FeedEpochAndRound::clear_feed_id() {
  _impl_.feed_id_.ClearToEmpty();
}
inline const std::string& FeedEpochAndRound::feed_id() const {
  // @@protoc_insertion_point(field_get:injective.ocr.v1beta1.FeedEpochAndRound.feed_id)
  return _internal_feed_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FeedEpochAndRound::set_feed_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.feed_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.ocr.v1beta1.FeedEpochAndRound.feed_id)
}
inline std::string* FeedEpochAndRound::mutable_feed_id() {
  std::string* _s = _internal_mutable_feed_id();
  // @@protoc_insertion_point(field_mutable:injective.ocr.v1beta1.FeedEpochAndRound.feed_id)
  return _s;
}
inline const std::string& FeedEpochAndRound::_internal_feed_id() const {
  return _impl_.feed_id_.Get();
}
inline void FeedEpochAndRound::_internal_set_feed_id(const std::string& value) {
  ;


  _impl_.feed_id_.Set(value, GetArenaForAllocation());
}
inline std::string* FeedEpochAndRound::_internal_mutable_feed_id() {
  ;
  return _impl_.feed_id_.Mutable( GetArenaForAllocation());
}
inline std::string* FeedEpochAndRound::release_feed_id() {
  // @@protoc_insertion_point(field_release:injective.ocr.v1beta1.FeedEpochAndRound.feed_id)
  return _impl_.feed_id_.Release();
}
inline void FeedEpochAndRound::set_allocated_feed_id(std::string* value) {
  _impl_.feed_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.feed_id_.IsDefault()) {
          _impl_.feed_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.ocr.v1beta1.FeedEpochAndRound.feed_id)
}

// .injective.ocr.v1beta1.EpochAndRound epoch_and_round = 2 [json_name = "epochAndRound"];
inline bool FeedEpochAndRound::has_epoch_and_round() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.epoch_and_round_ != nullptr);
  return value;
}
inline const ::injective::ocr::v1beta1::EpochAndRound& FeedEpochAndRound::_internal_epoch_and_round() const {
  const ::injective::ocr::v1beta1::EpochAndRound* p = _impl_.epoch_and_round_;
  return p != nullptr ? *p : reinterpret_cast<const ::injective::ocr::v1beta1::EpochAndRound&>(
      ::injective::ocr::v1beta1::_EpochAndRound_default_instance_);
}
inline const ::injective::ocr::v1beta1::EpochAndRound& FeedEpochAndRound::epoch_and_round() const {
  // @@protoc_insertion_point(field_get:injective.ocr.v1beta1.FeedEpochAndRound.epoch_and_round)
  return _internal_epoch_and_round();
}
inline void FeedEpochAndRound::unsafe_arena_set_allocated_epoch_and_round(
    ::injective::ocr::v1beta1::EpochAndRound* epoch_and_round) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.epoch_and_round_);
  }
  _impl_.epoch_and_round_ = epoch_and_round;
  if (epoch_and_round) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:injective.ocr.v1beta1.FeedEpochAndRound.epoch_and_round)
}
inline ::injective::ocr::v1beta1::EpochAndRound* FeedEpochAndRound::release_epoch_and_round() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::injective::ocr::v1beta1::EpochAndRound* temp = _impl_.epoch_and_round_;
  _impl_.epoch_and_round_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::injective::ocr::v1beta1::EpochAndRound* FeedEpochAndRound::unsafe_arena_release_epoch_and_round() {
  // @@protoc_insertion_point(field_release:injective.ocr.v1beta1.FeedEpochAndRound.epoch_and_round)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::injective::ocr::v1beta1::EpochAndRound* temp = _impl_.epoch_and_round_;
  _impl_.epoch_and_round_ = nullptr;
  return temp;
}
inline ::injective::ocr::v1beta1::EpochAndRound* FeedEpochAndRound::_internal_mutable_epoch_and_round() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.epoch_and_round_ == nullptr) {
    auto* p = CreateMaybeMessage<::injective::ocr::v1beta1::EpochAndRound>(GetArenaForAllocation());
    _impl_.epoch_and_round_ = p;
  }
  return _impl_.epoch_and_round_;
}
inline ::injective::ocr::v1beta1::EpochAndRound* FeedEpochAndRound::mutable_epoch_and_round() {
  ::injective::ocr::v1beta1::EpochAndRound* _msg = _internal_mutable_epoch_and_round();
  // @@protoc_insertion_point(field_mutable:injective.ocr.v1beta1.FeedEpochAndRound.epoch_and_round)
  return _msg;
}
inline void FeedEpochAndRound::set_allocated_epoch_and_round(::injective::ocr::v1beta1::EpochAndRound* epoch_and_round) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.epoch_and_round_);
  }
  if (epoch_and_round) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(epoch_and_round));
    if (message_arena != submessage_arena) {
      epoch_and_round = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, epoch_and_round, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.epoch_and_round_ = epoch_and_round;
  // @@protoc_insertion_point(field_set_allocated:injective.ocr.v1beta1.FeedEpochAndRound.epoch_and_round)
}

// -------------------------------------------------------------------

// FeedLatestAggregatorRoundIDs

// string feed_id = 1 [json_name = "feedId"];
inline void FeedLatestAggregatorRoundIDs::clear_feed_id() {
  _impl_.feed_id_.ClearToEmpty();
}
inline const std::string& FeedLatestAggregatorRoundIDs::feed_id() const {
  // @@protoc_insertion_point(field_get:injective.ocr.v1beta1.FeedLatestAggregatorRoundIDs.feed_id)
  return _internal_feed_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FeedLatestAggregatorRoundIDs::set_feed_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.feed_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.ocr.v1beta1.FeedLatestAggregatorRoundIDs.feed_id)
}
inline std::string* FeedLatestAggregatorRoundIDs::mutable_feed_id() {
  std::string* _s = _internal_mutable_feed_id();
  // @@protoc_insertion_point(field_mutable:injective.ocr.v1beta1.FeedLatestAggregatorRoundIDs.feed_id)
  return _s;
}
inline const std::string& FeedLatestAggregatorRoundIDs::_internal_feed_id() const {
  return _impl_.feed_id_.Get();
}
inline void FeedLatestAggregatorRoundIDs::_internal_set_feed_id(const std::string& value) {
  ;


  _impl_.feed_id_.Set(value, GetArenaForAllocation());
}
inline std::string* FeedLatestAggregatorRoundIDs::_internal_mutable_feed_id() {
  ;
  return _impl_.feed_id_.Mutable( GetArenaForAllocation());
}
inline std::string* FeedLatestAggregatorRoundIDs::release_feed_id() {
  // @@protoc_insertion_point(field_release:injective.ocr.v1beta1.FeedLatestAggregatorRoundIDs.feed_id)
  return _impl_.feed_id_.Release();
}
inline void FeedLatestAggregatorRoundIDs::set_allocated_feed_id(std::string* value) {
  _impl_.feed_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.feed_id_.IsDefault()) {
          _impl_.feed_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.ocr.v1beta1.FeedLatestAggregatorRoundIDs.feed_id)
}

// uint64 aggregator_round_id = 2 [json_name = "aggregatorRoundId"];
inline void FeedLatestAggregatorRoundIDs::clear_aggregator_round_id() {
  _impl_.aggregator_round_id_ = ::uint64_t{0u};
}
inline ::uint64_t FeedLatestAggregatorRoundIDs::aggregator_round_id() const {
  // @@protoc_insertion_point(field_get:injective.ocr.v1beta1.FeedLatestAggregatorRoundIDs.aggregator_round_id)
  return _internal_aggregator_round_id();
}
inline void FeedLatestAggregatorRoundIDs::set_aggregator_round_id(::uint64_t value) {
  _internal_set_aggregator_round_id(value);
  // @@protoc_insertion_point(field_set:injective.ocr.v1beta1.FeedLatestAggregatorRoundIDs.aggregator_round_id)
}
inline ::uint64_t FeedLatestAggregatorRoundIDs::_internal_aggregator_round_id() const {
  return _impl_.aggregator_round_id_;
}
inline void FeedLatestAggregatorRoundIDs::_internal_set_aggregator_round_id(::uint64_t value) {
  ;
  _impl_.aggregator_round_id_ = value;
}

// -------------------------------------------------------------------

// RewardPool

// string feed_id = 1 [json_name = "feedId"];
inline void RewardPool::clear_feed_id() {
  _impl_.feed_id_.ClearToEmpty();
}
inline const std::string& RewardPool::feed_id() const {
  // @@protoc_insertion_point(field_get:injective.ocr.v1beta1.RewardPool.feed_id)
  return _internal_feed_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RewardPool::set_feed_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.feed_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.ocr.v1beta1.RewardPool.feed_id)
}
inline std::string* RewardPool::mutable_feed_id() {
  std::string* _s = _internal_mutable_feed_id();
  // @@protoc_insertion_point(field_mutable:injective.ocr.v1beta1.RewardPool.feed_id)
  return _s;
}
inline const std::string& RewardPool::_internal_feed_id() const {
  return _impl_.feed_id_.Get();
}
inline void RewardPool::_internal_set_feed_id(const std::string& value) {
  ;


  _impl_.feed_id_.Set(value, GetArenaForAllocation());
}
inline std::string* RewardPool::_internal_mutable_feed_id() {
  ;
  return _impl_.feed_id_.Mutable( GetArenaForAllocation());
}
inline std::string* RewardPool::release_feed_id() {
  // @@protoc_insertion_point(field_release:injective.ocr.v1beta1.RewardPool.feed_id)
  return _impl_.feed_id_.Release();
}
inline void RewardPool::set_allocated_feed_id(std::string* value) {
  _impl_.feed_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.feed_id_.IsDefault()) {
          _impl_.feed_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.ocr.v1beta1.RewardPool.feed_id)
}

// .cosmos.base.v1beta1.Coin amount = 2 [json_name = "amount", (.gogoproto.nullable) = false];
inline bool RewardPool::has_amount() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.amount_ != nullptr);
  return value;
}
inline const ::cosmos::base::v1beta1::Coin& RewardPool::_internal_amount() const {
  const ::cosmos::base::v1beta1::Coin* p = _impl_.amount_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::v1beta1::Coin&>(
      ::cosmos::base::v1beta1::_Coin_default_instance_);
}
inline const ::cosmos::base::v1beta1::Coin& RewardPool::amount() const {
  // @@protoc_insertion_point(field_get:injective.ocr.v1beta1.RewardPool.amount)
  return _internal_amount();
}
inline void RewardPool::unsafe_arena_set_allocated_amount(
    ::cosmos::base::v1beta1::Coin* amount) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.amount_);
  }
  _impl_.amount_ = amount;
  if (amount) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:injective.ocr.v1beta1.RewardPool.amount)
}
inline ::cosmos::base::v1beta1::Coin* RewardPool::release_amount() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::v1beta1::Coin* temp = _impl_.amount_;
  _impl_.amount_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::base::v1beta1::Coin* RewardPool::unsafe_arena_release_amount() {
  // @@protoc_insertion_point(field_release:injective.ocr.v1beta1.RewardPool.amount)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::v1beta1::Coin* temp = _impl_.amount_;
  _impl_.amount_ = nullptr;
  return temp;
}
inline ::cosmos::base::v1beta1::Coin* RewardPool::_internal_mutable_amount() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.amount_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::base::v1beta1::Coin>(GetArenaForAllocation());
    _impl_.amount_ = p;
  }
  return _impl_.amount_;
}
inline ::cosmos::base::v1beta1::Coin* RewardPool::mutable_amount() {
  ::cosmos::base::v1beta1::Coin* _msg = _internal_mutable_amount();
  // @@protoc_insertion_point(field_mutable:injective.ocr.v1beta1.RewardPool.amount)
  return _msg;
}
inline void RewardPool::set_allocated_amount(::cosmos::base::v1beta1::Coin* amount) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.amount_);
  }
  if (amount) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(amount));
    if (message_arena != submessage_arena) {
      amount = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, amount, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.amount_ = amount;
  // @@protoc_insertion_point(field_set_allocated:injective.ocr.v1beta1.RewardPool.amount)
}

// -------------------------------------------------------------------

// FeedCounts

// string feed_id = 1 [json_name = "feedId"];
inline void FeedCounts::clear_feed_id() {
  _impl_.feed_id_.ClearToEmpty();
}
inline const std::string& FeedCounts::feed_id() const {
  // @@protoc_insertion_point(field_get:injective.ocr.v1beta1.FeedCounts.feed_id)
  return _internal_feed_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FeedCounts::set_feed_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.feed_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.ocr.v1beta1.FeedCounts.feed_id)
}
inline std::string* FeedCounts::mutable_feed_id() {
  std::string* _s = _internal_mutable_feed_id();
  // @@protoc_insertion_point(field_mutable:injective.ocr.v1beta1.FeedCounts.feed_id)
  return _s;
}
inline const std::string& FeedCounts::_internal_feed_id() const {
  return _impl_.feed_id_.Get();
}
inline void FeedCounts::_internal_set_feed_id(const std::string& value) {
  ;


  _impl_.feed_id_.Set(value, GetArenaForAllocation());
}
inline std::string* FeedCounts::_internal_mutable_feed_id() {
  ;
  return _impl_.feed_id_.Mutable( GetArenaForAllocation());
}
inline std::string* FeedCounts::release_feed_id() {
  // @@protoc_insertion_point(field_release:injective.ocr.v1beta1.FeedCounts.feed_id)
  return _impl_.feed_id_.Release();
}
inline void FeedCounts::set_allocated_feed_id(std::string* value) {
  _impl_.feed_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.feed_id_.IsDefault()) {
          _impl_.feed_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.ocr.v1beta1.FeedCounts.feed_id)
}

// repeated .injective.ocr.v1beta1.Count counts = 2 [json_name = "counts"];
inline int FeedCounts::_internal_counts_size() const {
  return _impl_.counts_.size();
}
inline int FeedCounts::counts_size() const {
  return _internal_counts_size();
}
inline void FeedCounts::clear_counts() {
  _internal_mutable_counts()->Clear();
}
inline ::injective::ocr::v1beta1::Count* FeedCounts::mutable_counts(int index) {
  // @@protoc_insertion_point(field_mutable:injective.ocr.v1beta1.FeedCounts.counts)
  return _internal_mutable_counts()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::ocr::v1beta1::Count >*
FeedCounts::mutable_counts() {
  // @@protoc_insertion_point(field_mutable_list:injective.ocr.v1beta1.FeedCounts.counts)
  return _internal_mutable_counts();
}
inline const ::injective::ocr::v1beta1::Count& FeedCounts::_internal_counts(int index) const {
  return _internal_counts().Get(index);
}
inline const ::injective::ocr::v1beta1::Count& FeedCounts::counts(int index) const {
  // @@protoc_insertion_point(field_get:injective.ocr.v1beta1.FeedCounts.counts)
  return _internal_counts(index);
}
inline ::injective::ocr::v1beta1::Count* FeedCounts::_internal_add_counts() {
  return _internal_mutable_counts()->Add();
}
inline ::injective::ocr::v1beta1::Count* FeedCounts::add_counts() {
  ::injective::ocr::v1beta1::Count* _add = _internal_add_counts();
  // @@protoc_insertion_point(field_add:injective.ocr.v1beta1.FeedCounts.counts)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::ocr::v1beta1::Count >&
FeedCounts::counts() const {
  // @@protoc_insertion_point(field_list:injective.ocr.v1beta1.FeedCounts.counts)
  return _internal_counts();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::ocr::v1beta1::Count>&
FeedCounts::_internal_counts() const {
  return _impl_.counts_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::ocr::v1beta1::Count>*
FeedCounts::_internal_mutable_counts() {
  return &_impl_.counts_;
}

// -------------------------------------------------------------------

// Count

// string address = 1 [json_name = "address"];
inline void Count::clear_address() {
  _impl_.address_.ClearToEmpty();
}
inline const std::string& Count::address() const {
  // @@protoc_insertion_point(field_get:injective.ocr.v1beta1.Count.address)
  return _internal_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Count::set_address(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.address_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.ocr.v1beta1.Count.address)
}
inline std::string* Count::mutable_address() {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:injective.ocr.v1beta1.Count.address)
  return _s;
}
inline const std::string& Count::_internal_address() const {
  return _impl_.address_.Get();
}
inline void Count::_internal_set_address(const std::string& value) {
  ;


  _impl_.address_.Set(value, GetArenaForAllocation());
}
inline std::string* Count::_internal_mutable_address() {
  ;
  return _impl_.address_.Mutable( GetArenaForAllocation());
}
inline std::string* Count::release_address() {
  // @@protoc_insertion_point(field_release:injective.ocr.v1beta1.Count.address)
  return _impl_.address_.Release();
}
inline void Count::set_allocated_address(std::string* value) {
  _impl_.address_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.address_.IsDefault()) {
          _impl_.address_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.ocr.v1beta1.Count.address)
}

// uint64 count = 2 [json_name = "count"];
inline void Count::clear_count() {
  _impl_.count_ = ::uint64_t{0u};
}
inline ::uint64_t Count::count() const {
  // @@protoc_insertion_point(field_get:injective.ocr.v1beta1.Count.count)
  return _internal_count();
}
inline void Count::set_count(::uint64_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:injective.ocr.v1beta1.Count.count)
}
inline ::uint64_t Count::_internal_count() const {
  return _impl_.count_;
}
inline void Count::_internal_set_count(::uint64_t value) {
  ;
  _impl_.count_ = value;
}

// -------------------------------------------------------------------

// PendingPayeeship

// string feed_id = 1 [json_name = "feedId"];
inline void PendingPayeeship::clear_feed_id() {
  _impl_.feed_id_.ClearToEmpty();
}
inline const std::string& PendingPayeeship::feed_id() const {
  // @@protoc_insertion_point(field_get:injective.ocr.v1beta1.PendingPayeeship.feed_id)
  return _internal_feed_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PendingPayeeship::set_feed_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.feed_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.ocr.v1beta1.PendingPayeeship.feed_id)
}
inline std::string* PendingPayeeship::mutable_feed_id() {
  std::string* _s = _internal_mutable_feed_id();
  // @@protoc_insertion_point(field_mutable:injective.ocr.v1beta1.PendingPayeeship.feed_id)
  return _s;
}
inline const std::string& PendingPayeeship::_internal_feed_id() const {
  return _impl_.feed_id_.Get();
}
inline void PendingPayeeship::_internal_set_feed_id(const std::string& value) {
  ;


  _impl_.feed_id_.Set(value, GetArenaForAllocation());
}
inline std::string* PendingPayeeship::_internal_mutable_feed_id() {
  ;
  return _impl_.feed_id_.Mutable( GetArenaForAllocation());
}
inline std::string* PendingPayeeship::release_feed_id() {
  // @@protoc_insertion_point(field_release:injective.ocr.v1beta1.PendingPayeeship.feed_id)
  return _impl_.feed_id_.Release();
}
inline void PendingPayeeship::set_allocated_feed_id(std::string* value) {
  _impl_.feed_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.feed_id_.IsDefault()) {
          _impl_.feed_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.ocr.v1beta1.PendingPayeeship.feed_id)
}

// string transmitter = 2 [json_name = "transmitter"];
inline void PendingPayeeship::clear_transmitter() {
  _impl_.transmitter_.ClearToEmpty();
}
inline const std::string& PendingPayeeship::transmitter() const {
  // @@protoc_insertion_point(field_get:injective.ocr.v1beta1.PendingPayeeship.transmitter)
  return _internal_transmitter();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PendingPayeeship::set_transmitter(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.transmitter_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.ocr.v1beta1.PendingPayeeship.transmitter)
}
inline std::string* PendingPayeeship::mutable_transmitter() {
  std::string* _s = _internal_mutable_transmitter();
  // @@protoc_insertion_point(field_mutable:injective.ocr.v1beta1.PendingPayeeship.transmitter)
  return _s;
}
inline const std::string& PendingPayeeship::_internal_transmitter() const {
  return _impl_.transmitter_.Get();
}
inline void PendingPayeeship::_internal_set_transmitter(const std::string& value) {
  ;


  _impl_.transmitter_.Set(value, GetArenaForAllocation());
}
inline std::string* PendingPayeeship::_internal_mutable_transmitter() {
  ;
  return _impl_.transmitter_.Mutable( GetArenaForAllocation());
}
inline std::string* PendingPayeeship::release_transmitter() {
  // @@protoc_insertion_point(field_release:injective.ocr.v1beta1.PendingPayeeship.transmitter)
  return _impl_.transmitter_.Release();
}
inline void PendingPayeeship::set_allocated_transmitter(std::string* value) {
  _impl_.transmitter_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.transmitter_.IsDefault()) {
          _impl_.transmitter_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.ocr.v1beta1.PendingPayeeship.transmitter)
}

// string proposed_payee = 3 [json_name = "proposedPayee"];
inline void PendingPayeeship::clear_proposed_payee() {
  _impl_.proposed_payee_.ClearToEmpty();
}
inline const std::string& PendingPayeeship::proposed_payee() const {
  // @@protoc_insertion_point(field_get:injective.ocr.v1beta1.PendingPayeeship.proposed_payee)
  return _internal_proposed_payee();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PendingPayeeship::set_proposed_payee(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.proposed_payee_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.ocr.v1beta1.PendingPayeeship.proposed_payee)
}
inline std::string* PendingPayeeship::mutable_proposed_payee() {
  std::string* _s = _internal_mutable_proposed_payee();
  // @@protoc_insertion_point(field_mutable:injective.ocr.v1beta1.PendingPayeeship.proposed_payee)
  return _s;
}
inline const std::string& PendingPayeeship::_internal_proposed_payee() const {
  return _impl_.proposed_payee_.Get();
}
inline void PendingPayeeship::_internal_set_proposed_payee(const std::string& value) {
  ;


  _impl_.proposed_payee_.Set(value, GetArenaForAllocation());
}
inline std::string* PendingPayeeship::_internal_mutable_proposed_payee() {
  ;
  return _impl_.proposed_payee_.Mutable( GetArenaForAllocation());
}
inline std::string* PendingPayeeship::release_proposed_payee() {
  // @@protoc_insertion_point(field_release:injective.ocr.v1beta1.PendingPayeeship.proposed_payee)
  return _impl_.proposed_payee_.Release();
}
inline void PendingPayeeship::set_allocated_proposed_payee(std::string* value) {
  _impl_.proposed_payee_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.proposed_payee_.IsDefault()) {
          _impl_.proposed_payee_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.ocr.v1beta1.PendingPayeeship.proposed_payee)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1beta1
}  // namespace ocr
}  // namespace injective


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_injective_2focr_2fv1beta1_2fgenesis_2eproto_2epb_2eh

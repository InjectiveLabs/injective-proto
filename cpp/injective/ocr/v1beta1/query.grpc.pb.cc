// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: injective/ocr/v1beta1/query.proto

#include "injective/ocr/v1beta1/query.pb.h"
#include "injective/ocr/v1beta1/query.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace injective {
namespace ocr {
namespace v1beta1 {

static const char* Query_method_names[] = {
  "/injective.ocr.v1beta1.Query/Params",
  "/injective.ocr.v1beta1.Query/FeedConfig",
  "/injective.ocr.v1beta1.Query/FeedConfigInfo",
  "/injective.ocr.v1beta1.Query/LatestRound",
  "/injective.ocr.v1beta1.Query/LatestTransmissionDetails",
  "/injective.ocr.v1beta1.Query/OwedAmount",
  "/injective.ocr.v1beta1.Query/OcrModuleState",
};

std::unique_ptr< Query::Stub> Query::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Query::Stub> stub(new Query::Stub(channel, options));
  return stub;
}

Query::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Params_(Query_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_FeedConfig_(Query_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_FeedConfigInfo_(Query_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_LatestRound_(Query_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_LatestTransmissionDetails_(Query_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_OwedAmount_(Query_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_OcrModuleState_(Query_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Query::Stub::Params(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::QueryParamsRequest& request, ::injective::ocr::v1beta1::QueryParamsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::ocr::v1beta1::QueryParamsRequest, ::injective::ocr::v1beta1::QueryParamsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Params_, context, request, response);
}

void Query::Stub::async::Params(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::QueryParamsRequest* request, ::injective::ocr::v1beta1::QueryParamsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::ocr::v1beta1::QueryParamsRequest, ::injective::ocr::v1beta1::QueryParamsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Params_, context, request, response, std::move(f));
}

void Query::Stub::async::Params(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::QueryParamsRequest* request, ::injective::ocr::v1beta1::QueryParamsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Params_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::ocr::v1beta1::QueryParamsResponse>* Query::Stub::PrepareAsyncParamsRaw(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::QueryParamsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::ocr::v1beta1::QueryParamsResponse, ::injective::ocr::v1beta1::QueryParamsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Params_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::ocr::v1beta1::QueryParamsResponse>* Query::Stub::AsyncParamsRaw(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::QueryParamsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncParamsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::FeedConfig(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::QueryFeedConfigRequest& request, ::injective::ocr::v1beta1::QueryFeedConfigResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::ocr::v1beta1::QueryFeedConfigRequest, ::injective::ocr::v1beta1::QueryFeedConfigResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_FeedConfig_, context, request, response);
}

void Query::Stub::async::FeedConfig(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::QueryFeedConfigRequest* request, ::injective::ocr::v1beta1::QueryFeedConfigResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::ocr::v1beta1::QueryFeedConfigRequest, ::injective::ocr::v1beta1::QueryFeedConfigResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FeedConfig_, context, request, response, std::move(f));
}

void Query::Stub::async::FeedConfig(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::QueryFeedConfigRequest* request, ::injective::ocr::v1beta1::QueryFeedConfigResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FeedConfig_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::ocr::v1beta1::QueryFeedConfigResponse>* Query::Stub::PrepareAsyncFeedConfigRaw(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::QueryFeedConfigRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::ocr::v1beta1::QueryFeedConfigResponse, ::injective::ocr::v1beta1::QueryFeedConfigRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_FeedConfig_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::ocr::v1beta1::QueryFeedConfigResponse>* Query::Stub::AsyncFeedConfigRaw(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::QueryFeedConfigRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncFeedConfigRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::FeedConfigInfo(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::QueryFeedConfigInfoRequest& request, ::injective::ocr::v1beta1::QueryFeedConfigInfoResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::ocr::v1beta1::QueryFeedConfigInfoRequest, ::injective::ocr::v1beta1::QueryFeedConfigInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_FeedConfigInfo_, context, request, response);
}

void Query::Stub::async::FeedConfigInfo(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::QueryFeedConfigInfoRequest* request, ::injective::ocr::v1beta1::QueryFeedConfigInfoResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::ocr::v1beta1::QueryFeedConfigInfoRequest, ::injective::ocr::v1beta1::QueryFeedConfigInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FeedConfigInfo_, context, request, response, std::move(f));
}

void Query::Stub::async::FeedConfigInfo(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::QueryFeedConfigInfoRequest* request, ::injective::ocr::v1beta1::QueryFeedConfigInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FeedConfigInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::ocr::v1beta1::QueryFeedConfigInfoResponse>* Query::Stub::PrepareAsyncFeedConfigInfoRaw(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::QueryFeedConfigInfoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::ocr::v1beta1::QueryFeedConfigInfoResponse, ::injective::ocr::v1beta1::QueryFeedConfigInfoRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_FeedConfigInfo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::ocr::v1beta1::QueryFeedConfigInfoResponse>* Query::Stub::AsyncFeedConfigInfoRaw(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::QueryFeedConfigInfoRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncFeedConfigInfoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::LatestRound(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::QueryLatestRoundRequest& request, ::injective::ocr::v1beta1::QueryLatestRoundResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::ocr::v1beta1::QueryLatestRoundRequest, ::injective::ocr::v1beta1::QueryLatestRoundResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_LatestRound_, context, request, response);
}

void Query::Stub::async::LatestRound(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::QueryLatestRoundRequest* request, ::injective::ocr::v1beta1::QueryLatestRoundResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::ocr::v1beta1::QueryLatestRoundRequest, ::injective::ocr::v1beta1::QueryLatestRoundResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_LatestRound_, context, request, response, std::move(f));
}

void Query::Stub::async::LatestRound(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::QueryLatestRoundRequest* request, ::injective::ocr::v1beta1::QueryLatestRoundResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_LatestRound_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::ocr::v1beta1::QueryLatestRoundResponse>* Query::Stub::PrepareAsyncLatestRoundRaw(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::QueryLatestRoundRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::ocr::v1beta1::QueryLatestRoundResponse, ::injective::ocr::v1beta1::QueryLatestRoundRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_LatestRound_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::ocr::v1beta1::QueryLatestRoundResponse>* Query::Stub::AsyncLatestRoundRaw(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::QueryLatestRoundRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncLatestRoundRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::LatestTransmissionDetails(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::QueryLatestTransmissionDetailsRequest& request, ::injective::ocr::v1beta1::QueryLatestTransmissionDetailsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::ocr::v1beta1::QueryLatestTransmissionDetailsRequest, ::injective::ocr::v1beta1::QueryLatestTransmissionDetailsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_LatestTransmissionDetails_, context, request, response);
}

void Query::Stub::async::LatestTransmissionDetails(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::QueryLatestTransmissionDetailsRequest* request, ::injective::ocr::v1beta1::QueryLatestTransmissionDetailsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::ocr::v1beta1::QueryLatestTransmissionDetailsRequest, ::injective::ocr::v1beta1::QueryLatestTransmissionDetailsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_LatestTransmissionDetails_, context, request, response, std::move(f));
}

void Query::Stub::async::LatestTransmissionDetails(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::QueryLatestTransmissionDetailsRequest* request, ::injective::ocr::v1beta1::QueryLatestTransmissionDetailsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_LatestTransmissionDetails_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::ocr::v1beta1::QueryLatestTransmissionDetailsResponse>* Query::Stub::PrepareAsyncLatestTransmissionDetailsRaw(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::QueryLatestTransmissionDetailsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::ocr::v1beta1::QueryLatestTransmissionDetailsResponse, ::injective::ocr::v1beta1::QueryLatestTransmissionDetailsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_LatestTransmissionDetails_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::ocr::v1beta1::QueryLatestTransmissionDetailsResponse>* Query::Stub::AsyncLatestTransmissionDetailsRaw(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::QueryLatestTransmissionDetailsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncLatestTransmissionDetailsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::OwedAmount(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::QueryOwedAmountRequest& request, ::injective::ocr::v1beta1::QueryOwedAmountResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::ocr::v1beta1::QueryOwedAmountRequest, ::injective::ocr::v1beta1::QueryOwedAmountResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_OwedAmount_, context, request, response);
}

void Query::Stub::async::OwedAmount(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::QueryOwedAmountRequest* request, ::injective::ocr::v1beta1::QueryOwedAmountResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::ocr::v1beta1::QueryOwedAmountRequest, ::injective::ocr::v1beta1::QueryOwedAmountResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_OwedAmount_, context, request, response, std::move(f));
}

void Query::Stub::async::OwedAmount(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::QueryOwedAmountRequest* request, ::injective::ocr::v1beta1::QueryOwedAmountResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_OwedAmount_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::ocr::v1beta1::QueryOwedAmountResponse>* Query::Stub::PrepareAsyncOwedAmountRaw(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::QueryOwedAmountRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::ocr::v1beta1::QueryOwedAmountResponse, ::injective::ocr::v1beta1::QueryOwedAmountRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_OwedAmount_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::ocr::v1beta1::QueryOwedAmountResponse>* Query::Stub::AsyncOwedAmountRaw(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::QueryOwedAmountRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncOwedAmountRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::OcrModuleState(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::QueryModuleStateRequest& request, ::injective::ocr::v1beta1::QueryModuleStateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::ocr::v1beta1::QueryModuleStateRequest, ::injective::ocr::v1beta1::QueryModuleStateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_OcrModuleState_, context, request, response);
}

void Query::Stub::async::OcrModuleState(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::QueryModuleStateRequest* request, ::injective::ocr::v1beta1::QueryModuleStateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::ocr::v1beta1::QueryModuleStateRequest, ::injective::ocr::v1beta1::QueryModuleStateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_OcrModuleState_, context, request, response, std::move(f));
}

void Query::Stub::async::OcrModuleState(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::QueryModuleStateRequest* request, ::injective::ocr::v1beta1::QueryModuleStateResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_OcrModuleState_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::ocr::v1beta1::QueryModuleStateResponse>* Query::Stub::PrepareAsyncOcrModuleStateRaw(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::QueryModuleStateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::ocr::v1beta1::QueryModuleStateResponse, ::injective::ocr::v1beta1::QueryModuleStateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_OcrModuleState_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::ocr::v1beta1::QueryModuleStateResponse>* Query::Stub::AsyncOcrModuleStateRaw(::grpc::ClientContext* context, const ::injective::ocr::v1beta1::QueryModuleStateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncOcrModuleStateRaw(context, request, cq);
  result->StartCall();
  return result;
}

Query::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::injective::ocr::v1beta1::QueryParamsRequest, ::injective::ocr::v1beta1::QueryParamsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::ocr::v1beta1::QueryParamsRequest* req,
             ::injective::ocr::v1beta1::QueryParamsResponse* resp) {
               return service->Params(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::injective::ocr::v1beta1::QueryFeedConfigRequest, ::injective::ocr::v1beta1::QueryFeedConfigResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::ocr::v1beta1::QueryFeedConfigRequest* req,
             ::injective::ocr::v1beta1::QueryFeedConfigResponse* resp) {
               return service->FeedConfig(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::injective::ocr::v1beta1::QueryFeedConfigInfoRequest, ::injective::ocr::v1beta1::QueryFeedConfigInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::ocr::v1beta1::QueryFeedConfigInfoRequest* req,
             ::injective::ocr::v1beta1::QueryFeedConfigInfoResponse* resp) {
               return service->FeedConfigInfo(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::injective::ocr::v1beta1::QueryLatestRoundRequest, ::injective::ocr::v1beta1::QueryLatestRoundResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::ocr::v1beta1::QueryLatestRoundRequest* req,
             ::injective::ocr::v1beta1::QueryLatestRoundResponse* resp) {
               return service->LatestRound(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::injective::ocr::v1beta1::QueryLatestTransmissionDetailsRequest, ::injective::ocr::v1beta1::QueryLatestTransmissionDetailsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::ocr::v1beta1::QueryLatestTransmissionDetailsRequest* req,
             ::injective::ocr::v1beta1::QueryLatestTransmissionDetailsResponse* resp) {
               return service->LatestTransmissionDetails(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::injective::ocr::v1beta1::QueryOwedAmountRequest, ::injective::ocr::v1beta1::QueryOwedAmountResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::ocr::v1beta1::QueryOwedAmountRequest* req,
             ::injective::ocr::v1beta1::QueryOwedAmountResponse* resp) {
               return service->OwedAmount(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::injective::ocr::v1beta1::QueryModuleStateRequest, ::injective::ocr::v1beta1::QueryModuleStateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::ocr::v1beta1::QueryModuleStateRequest* req,
             ::injective::ocr::v1beta1::QueryModuleStateResponse* resp) {
               return service->OcrModuleState(ctx, req, resp);
             }, this)));
}

Query::Service::~Service() {
}

::grpc::Status Query::Service::Params(::grpc::ServerContext* context, const ::injective::ocr::v1beta1::QueryParamsRequest* request, ::injective::ocr::v1beta1::QueryParamsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::FeedConfig(::grpc::ServerContext* context, const ::injective::ocr::v1beta1::QueryFeedConfigRequest* request, ::injective::ocr::v1beta1::QueryFeedConfigResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::FeedConfigInfo(::grpc::ServerContext* context, const ::injective::ocr::v1beta1::QueryFeedConfigInfoRequest* request, ::injective::ocr::v1beta1::QueryFeedConfigInfoResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::LatestRound(::grpc::ServerContext* context, const ::injective::ocr::v1beta1::QueryLatestRoundRequest* request, ::injective::ocr::v1beta1::QueryLatestRoundResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::LatestTransmissionDetails(::grpc::ServerContext* context, const ::injective::ocr::v1beta1::QueryLatestTransmissionDetailsRequest* request, ::injective::ocr::v1beta1::QueryLatestTransmissionDetailsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::OwedAmount(::grpc::ServerContext* context, const ::injective::ocr::v1beta1::QueryOwedAmountRequest* request, ::injective::ocr::v1beta1::QueryOwedAmountResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::OcrModuleState(::grpc::ServerContext* context, const ::injective::ocr::v1beta1::QueryModuleStateRequest* request, ::injective::ocr::v1beta1::QueryModuleStateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace injective
}  // namespace ocr
}  // namespace v1beta1


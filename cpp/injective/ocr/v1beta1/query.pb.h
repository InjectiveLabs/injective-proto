// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: injective/ocr/v1beta1/query.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_injective_2focr_2fv1beta1_2fquery_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_injective_2focr_2fv1beta1_2fquery_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "google/api/annotations.pb.h"
#include "injective/ocr/v1beta1/ocr.pb.h"
#include "gogoproto/gogo.pb.h"
#include "cosmos/base/v1beta1/coin.pb.h"
#include "injective/ocr/v1beta1/genesis.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_injective_2focr_2fv1beta1_2fquery_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_injective_2focr_2fv1beta1_2fquery_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_injective_2focr_2fv1beta1_2fquery_2eproto;
namespace injective {
namespace ocr {
namespace v1beta1 {
class QueryFeedConfigInfoRequest;
struct QueryFeedConfigInfoRequestDefaultTypeInternal;
extern QueryFeedConfigInfoRequestDefaultTypeInternal _QueryFeedConfigInfoRequest_default_instance_;
class QueryFeedConfigInfoResponse;
struct QueryFeedConfigInfoResponseDefaultTypeInternal;
extern QueryFeedConfigInfoResponseDefaultTypeInternal _QueryFeedConfigInfoResponse_default_instance_;
class QueryFeedConfigRequest;
struct QueryFeedConfigRequestDefaultTypeInternal;
extern QueryFeedConfigRequestDefaultTypeInternal _QueryFeedConfigRequest_default_instance_;
class QueryFeedConfigResponse;
struct QueryFeedConfigResponseDefaultTypeInternal;
extern QueryFeedConfigResponseDefaultTypeInternal _QueryFeedConfigResponse_default_instance_;
class QueryLatestRoundRequest;
struct QueryLatestRoundRequestDefaultTypeInternal;
extern QueryLatestRoundRequestDefaultTypeInternal _QueryLatestRoundRequest_default_instance_;
class QueryLatestRoundResponse;
struct QueryLatestRoundResponseDefaultTypeInternal;
extern QueryLatestRoundResponseDefaultTypeInternal _QueryLatestRoundResponse_default_instance_;
class QueryLatestTransmissionDetailsRequest;
struct QueryLatestTransmissionDetailsRequestDefaultTypeInternal;
extern QueryLatestTransmissionDetailsRequestDefaultTypeInternal _QueryLatestTransmissionDetailsRequest_default_instance_;
class QueryLatestTransmissionDetailsResponse;
struct QueryLatestTransmissionDetailsResponseDefaultTypeInternal;
extern QueryLatestTransmissionDetailsResponseDefaultTypeInternal _QueryLatestTransmissionDetailsResponse_default_instance_;
class QueryModuleStateRequest;
struct QueryModuleStateRequestDefaultTypeInternal;
extern QueryModuleStateRequestDefaultTypeInternal _QueryModuleStateRequest_default_instance_;
class QueryModuleStateResponse;
struct QueryModuleStateResponseDefaultTypeInternal;
extern QueryModuleStateResponseDefaultTypeInternal _QueryModuleStateResponse_default_instance_;
class QueryOwedAmountRequest;
struct QueryOwedAmountRequestDefaultTypeInternal;
extern QueryOwedAmountRequestDefaultTypeInternal _QueryOwedAmountRequest_default_instance_;
class QueryOwedAmountResponse;
struct QueryOwedAmountResponseDefaultTypeInternal;
extern QueryOwedAmountResponseDefaultTypeInternal _QueryOwedAmountResponse_default_instance_;
class QueryParamsRequest;
struct QueryParamsRequestDefaultTypeInternal;
extern QueryParamsRequestDefaultTypeInternal _QueryParamsRequest_default_instance_;
class QueryParamsResponse;
struct QueryParamsResponseDefaultTypeInternal;
extern QueryParamsResponseDefaultTypeInternal _QueryParamsResponse_default_instance_;
}  // namespace v1beta1
}  // namespace ocr
}  // namespace injective
PROTOBUF_NAMESPACE_OPEN
template <>
::injective::ocr::v1beta1::QueryFeedConfigInfoRequest* Arena::CreateMaybeMessage<::injective::ocr::v1beta1::QueryFeedConfigInfoRequest>(Arena*);
template <>
::injective::ocr::v1beta1::QueryFeedConfigInfoResponse* Arena::CreateMaybeMessage<::injective::ocr::v1beta1::QueryFeedConfigInfoResponse>(Arena*);
template <>
::injective::ocr::v1beta1::QueryFeedConfigRequest* Arena::CreateMaybeMessage<::injective::ocr::v1beta1::QueryFeedConfigRequest>(Arena*);
template <>
::injective::ocr::v1beta1::QueryFeedConfigResponse* Arena::CreateMaybeMessage<::injective::ocr::v1beta1::QueryFeedConfigResponse>(Arena*);
template <>
::injective::ocr::v1beta1::QueryLatestRoundRequest* Arena::CreateMaybeMessage<::injective::ocr::v1beta1::QueryLatestRoundRequest>(Arena*);
template <>
::injective::ocr::v1beta1::QueryLatestRoundResponse* Arena::CreateMaybeMessage<::injective::ocr::v1beta1::QueryLatestRoundResponse>(Arena*);
template <>
::injective::ocr::v1beta1::QueryLatestTransmissionDetailsRequest* Arena::CreateMaybeMessage<::injective::ocr::v1beta1::QueryLatestTransmissionDetailsRequest>(Arena*);
template <>
::injective::ocr::v1beta1::QueryLatestTransmissionDetailsResponse* Arena::CreateMaybeMessage<::injective::ocr::v1beta1::QueryLatestTransmissionDetailsResponse>(Arena*);
template <>
::injective::ocr::v1beta1::QueryModuleStateRequest* Arena::CreateMaybeMessage<::injective::ocr::v1beta1::QueryModuleStateRequest>(Arena*);
template <>
::injective::ocr::v1beta1::QueryModuleStateResponse* Arena::CreateMaybeMessage<::injective::ocr::v1beta1::QueryModuleStateResponse>(Arena*);
template <>
::injective::ocr::v1beta1::QueryOwedAmountRequest* Arena::CreateMaybeMessage<::injective::ocr::v1beta1::QueryOwedAmountRequest>(Arena*);
template <>
::injective::ocr::v1beta1::QueryOwedAmountResponse* Arena::CreateMaybeMessage<::injective::ocr::v1beta1::QueryOwedAmountResponse>(Arena*);
template <>
::injective::ocr::v1beta1::QueryParamsRequest* Arena::CreateMaybeMessage<::injective::ocr::v1beta1::QueryParamsRequest>(Arena*);
template <>
::injective::ocr::v1beta1::QueryParamsResponse* Arena::CreateMaybeMessage<::injective::ocr::v1beta1::QueryParamsResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace injective {
namespace ocr {
namespace v1beta1 {

// ===================================================================


// -------------------------------------------------------------------

class QueryParamsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:injective.ocr.v1beta1.QueryParamsRequest) */ {
 public:
  inline QueryParamsRequest() : QueryParamsRequest(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryParamsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryParamsRequest(const QueryParamsRequest& from);
  QueryParamsRequest(QueryParamsRequest&& from) noexcept
    : QueryParamsRequest() {
    *this = ::std::move(from);
  }

  inline QueryParamsRequest& operator=(const QueryParamsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryParamsRequest& operator=(QueryParamsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryParamsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryParamsRequest* internal_default_instance() {
    return reinterpret_cast<const QueryParamsRequest*>(
               &_QueryParamsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(QueryParamsRequest& a, QueryParamsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryParamsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryParamsRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryParamsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryParamsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const QueryParamsRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const QueryParamsRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.ocr.v1beta1.QueryParamsRequest";
  }
  protected:
  explicit QueryParamsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:injective.ocr.v1beta1.QueryParamsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_injective_2focr_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryParamsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.ocr.v1beta1.QueryParamsResponse) */ {
 public:
  inline QueryParamsResponse() : QueryParamsResponse(nullptr) {}
  ~QueryParamsResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryParamsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryParamsResponse(const QueryParamsResponse& from);
  QueryParamsResponse(QueryParamsResponse&& from) noexcept
    : QueryParamsResponse() {
    *this = ::std::move(from);
  }

  inline QueryParamsResponse& operator=(const QueryParamsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryParamsResponse& operator=(QueryParamsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryParamsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryParamsResponse* internal_default_instance() {
    return reinterpret_cast<const QueryParamsResponse*>(
               &_QueryParamsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(QueryParamsResponse& a, QueryParamsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryParamsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryParamsResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryParamsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryParamsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryParamsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryParamsResponse& from) {
    QueryParamsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryParamsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.ocr.v1beta1.QueryParamsResponse";
  }
  protected:
  explicit QueryParamsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParamsFieldNumber = 1,
  };
  // .injective.ocr.v1beta1.Params params = 1 [json_name = "params", (.gogoproto.nullable) = false];
  bool has_params() const;
  void clear_params() ;
  const ::injective::ocr::v1beta1::Params& params() const;
  PROTOBUF_NODISCARD ::injective::ocr::v1beta1::Params* release_params();
  ::injective::ocr::v1beta1::Params* mutable_params();
  void set_allocated_params(::injective::ocr::v1beta1::Params* params);
  private:
  const ::injective::ocr::v1beta1::Params& _internal_params() const;
  ::injective::ocr::v1beta1::Params* _internal_mutable_params();
  public:
  void unsafe_arena_set_allocated_params(
      ::injective::ocr::v1beta1::Params* params);
  ::injective::ocr::v1beta1::Params* unsafe_arena_release_params();
  // @@protoc_insertion_point(class_scope:injective.ocr.v1beta1.QueryParamsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::injective::ocr::v1beta1::Params* params_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2focr_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryFeedConfigRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.ocr.v1beta1.QueryFeedConfigRequest) */ {
 public:
  inline QueryFeedConfigRequest() : QueryFeedConfigRequest(nullptr) {}
  ~QueryFeedConfigRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryFeedConfigRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryFeedConfigRequest(const QueryFeedConfigRequest& from);
  QueryFeedConfigRequest(QueryFeedConfigRequest&& from) noexcept
    : QueryFeedConfigRequest() {
    *this = ::std::move(from);
  }

  inline QueryFeedConfigRequest& operator=(const QueryFeedConfigRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryFeedConfigRequest& operator=(QueryFeedConfigRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryFeedConfigRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryFeedConfigRequest* internal_default_instance() {
    return reinterpret_cast<const QueryFeedConfigRequest*>(
               &_QueryFeedConfigRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(QueryFeedConfigRequest& a, QueryFeedConfigRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryFeedConfigRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryFeedConfigRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryFeedConfigRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryFeedConfigRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryFeedConfigRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryFeedConfigRequest& from) {
    QueryFeedConfigRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryFeedConfigRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.ocr.v1beta1.QueryFeedConfigRequest";
  }
  protected:
  explicit QueryFeedConfigRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFeedIdFieldNumber = 1,
  };
  // string feed_id = 1 [json_name = "feedId"];
  void clear_feed_id() ;
  const std::string& feed_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_feed_id(Arg_&& arg, Args_... args);
  std::string* mutable_feed_id();
  PROTOBUF_NODISCARD std::string* release_feed_id();
  void set_allocated_feed_id(std::string* ptr);

  private:
  const std::string& _internal_feed_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_feed_id(
      const std::string& value);
  std::string* _internal_mutable_feed_id();

  public:
  // @@protoc_insertion_point(class_scope:injective.ocr.v1beta1.QueryFeedConfigRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr feed_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2focr_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryFeedConfigResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.ocr.v1beta1.QueryFeedConfigResponse) */ {
 public:
  inline QueryFeedConfigResponse() : QueryFeedConfigResponse(nullptr) {}
  ~QueryFeedConfigResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryFeedConfigResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryFeedConfigResponse(const QueryFeedConfigResponse& from);
  QueryFeedConfigResponse(QueryFeedConfigResponse&& from) noexcept
    : QueryFeedConfigResponse() {
    *this = ::std::move(from);
  }

  inline QueryFeedConfigResponse& operator=(const QueryFeedConfigResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryFeedConfigResponse& operator=(QueryFeedConfigResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryFeedConfigResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryFeedConfigResponse* internal_default_instance() {
    return reinterpret_cast<const QueryFeedConfigResponse*>(
               &_QueryFeedConfigResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(QueryFeedConfigResponse& a, QueryFeedConfigResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryFeedConfigResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryFeedConfigResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryFeedConfigResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryFeedConfigResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryFeedConfigResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryFeedConfigResponse& from) {
    QueryFeedConfigResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryFeedConfigResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.ocr.v1beta1.QueryFeedConfigResponse";
  }
  protected:
  explicit QueryFeedConfigResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFeedConfigInfoFieldNumber = 1,
    kFeedConfigFieldNumber = 2,
  };
  // .injective.ocr.v1beta1.FeedConfigInfo feed_config_info = 1 [json_name = "feedConfigInfo"];
  bool has_feed_config_info() const;
  void clear_feed_config_info() ;
  const ::injective::ocr::v1beta1::FeedConfigInfo& feed_config_info() const;
  PROTOBUF_NODISCARD ::injective::ocr::v1beta1::FeedConfigInfo* release_feed_config_info();
  ::injective::ocr::v1beta1::FeedConfigInfo* mutable_feed_config_info();
  void set_allocated_feed_config_info(::injective::ocr::v1beta1::FeedConfigInfo* feed_config_info);
  private:
  const ::injective::ocr::v1beta1::FeedConfigInfo& _internal_feed_config_info() const;
  ::injective::ocr::v1beta1::FeedConfigInfo* _internal_mutable_feed_config_info();
  public:
  void unsafe_arena_set_allocated_feed_config_info(
      ::injective::ocr::v1beta1::FeedConfigInfo* feed_config_info);
  ::injective::ocr::v1beta1::FeedConfigInfo* unsafe_arena_release_feed_config_info();
  // .injective.ocr.v1beta1.FeedConfig feed_config = 2 [json_name = "feedConfig"];
  bool has_feed_config() const;
  void clear_feed_config() ;
  const ::injective::ocr::v1beta1::FeedConfig& feed_config() const;
  PROTOBUF_NODISCARD ::injective::ocr::v1beta1::FeedConfig* release_feed_config();
  ::injective::ocr::v1beta1::FeedConfig* mutable_feed_config();
  void set_allocated_feed_config(::injective::ocr::v1beta1::FeedConfig* feed_config);
  private:
  const ::injective::ocr::v1beta1::FeedConfig& _internal_feed_config() const;
  ::injective::ocr::v1beta1::FeedConfig* _internal_mutable_feed_config();
  public:
  void unsafe_arena_set_allocated_feed_config(
      ::injective::ocr::v1beta1::FeedConfig* feed_config);
  ::injective::ocr::v1beta1::FeedConfig* unsafe_arena_release_feed_config();
  // @@protoc_insertion_point(class_scope:injective.ocr.v1beta1.QueryFeedConfigResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::injective::ocr::v1beta1::FeedConfigInfo* feed_config_info_;
    ::injective::ocr::v1beta1::FeedConfig* feed_config_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2focr_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryFeedConfigInfoRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.ocr.v1beta1.QueryFeedConfigInfoRequest) */ {
 public:
  inline QueryFeedConfigInfoRequest() : QueryFeedConfigInfoRequest(nullptr) {}
  ~QueryFeedConfigInfoRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryFeedConfigInfoRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryFeedConfigInfoRequest(const QueryFeedConfigInfoRequest& from);
  QueryFeedConfigInfoRequest(QueryFeedConfigInfoRequest&& from) noexcept
    : QueryFeedConfigInfoRequest() {
    *this = ::std::move(from);
  }

  inline QueryFeedConfigInfoRequest& operator=(const QueryFeedConfigInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryFeedConfigInfoRequest& operator=(QueryFeedConfigInfoRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryFeedConfigInfoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryFeedConfigInfoRequest* internal_default_instance() {
    return reinterpret_cast<const QueryFeedConfigInfoRequest*>(
               &_QueryFeedConfigInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(QueryFeedConfigInfoRequest& a, QueryFeedConfigInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryFeedConfigInfoRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryFeedConfigInfoRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryFeedConfigInfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryFeedConfigInfoRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryFeedConfigInfoRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryFeedConfigInfoRequest& from) {
    QueryFeedConfigInfoRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryFeedConfigInfoRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.ocr.v1beta1.QueryFeedConfigInfoRequest";
  }
  protected:
  explicit QueryFeedConfigInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFeedIdFieldNumber = 1,
  };
  // string feed_id = 1 [json_name = "feedId"];
  void clear_feed_id() ;
  const std::string& feed_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_feed_id(Arg_&& arg, Args_... args);
  std::string* mutable_feed_id();
  PROTOBUF_NODISCARD std::string* release_feed_id();
  void set_allocated_feed_id(std::string* ptr);

  private:
  const std::string& _internal_feed_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_feed_id(
      const std::string& value);
  std::string* _internal_mutable_feed_id();

  public:
  // @@protoc_insertion_point(class_scope:injective.ocr.v1beta1.QueryFeedConfigInfoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr feed_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2focr_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryFeedConfigInfoResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.ocr.v1beta1.QueryFeedConfigInfoResponse) */ {
 public:
  inline QueryFeedConfigInfoResponse() : QueryFeedConfigInfoResponse(nullptr) {}
  ~QueryFeedConfigInfoResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryFeedConfigInfoResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryFeedConfigInfoResponse(const QueryFeedConfigInfoResponse& from);
  QueryFeedConfigInfoResponse(QueryFeedConfigInfoResponse&& from) noexcept
    : QueryFeedConfigInfoResponse() {
    *this = ::std::move(from);
  }

  inline QueryFeedConfigInfoResponse& operator=(const QueryFeedConfigInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryFeedConfigInfoResponse& operator=(QueryFeedConfigInfoResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryFeedConfigInfoResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryFeedConfigInfoResponse* internal_default_instance() {
    return reinterpret_cast<const QueryFeedConfigInfoResponse*>(
               &_QueryFeedConfigInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(QueryFeedConfigInfoResponse& a, QueryFeedConfigInfoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryFeedConfigInfoResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryFeedConfigInfoResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryFeedConfigInfoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryFeedConfigInfoResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryFeedConfigInfoResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryFeedConfigInfoResponse& from) {
    QueryFeedConfigInfoResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryFeedConfigInfoResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.ocr.v1beta1.QueryFeedConfigInfoResponse";
  }
  protected:
  explicit QueryFeedConfigInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFeedConfigInfoFieldNumber = 1,
    kEpochAndRoundFieldNumber = 2,
  };
  // .injective.ocr.v1beta1.FeedConfigInfo feed_config_info = 1 [json_name = "feedConfigInfo"];
  bool has_feed_config_info() const;
  void clear_feed_config_info() ;
  const ::injective::ocr::v1beta1::FeedConfigInfo& feed_config_info() const;
  PROTOBUF_NODISCARD ::injective::ocr::v1beta1::FeedConfigInfo* release_feed_config_info();
  ::injective::ocr::v1beta1::FeedConfigInfo* mutable_feed_config_info();
  void set_allocated_feed_config_info(::injective::ocr::v1beta1::FeedConfigInfo* feed_config_info);
  private:
  const ::injective::ocr::v1beta1::FeedConfigInfo& _internal_feed_config_info() const;
  ::injective::ocr::v1beta1::FeedConfigInfo* _internal_mutable_feed_config_info();
  public:
  void unsafe_arena_set_allocated_feed_config_info(
      ::injective::ocr::v1beta1::FeedConfigInfo* feed_config_info);
  ::injective::ocr::v1beta1::FeedConfigInfo* unsafe_arena_release_feed_config_info();
  // .injective.ocr.v1beta1.EpochAndRound epoch_and_round = 2 [json_name = "epochAndRound"];
  bool has_epoch_and_round() const;
  void clear_epoch_and_round() ;
  const ::injective::ocr::v1beta1::EpochAndRound& epoch_and_round() const;
  PROTOBUF_NODISCARD ::injective::ocr::v1beta1::EpochAndRound* release_epoch_and_round();
  ::injective::ocr::v1beta1::EpochAndRound* mutable_epoch_and_round();
  void set_allocated_epoch_and_round(::injective::ocr::v1beta1::EpochAndRound* epoch_and_round);
  private:
  const ::injective::ocr::v1beta1::EpochAndRound& _internal_epoch_and_round() const;
  ::injective::ocr::v1beta1::EpochAndRound* _internal_mutable_epoch_and_round();
  public:
  void unsafe_arena_set_allocated_epoch_and_round(
      ::injective::ocr::v1beta1::EpochAndRound* epoch_and_round);
  ::injective::ocr::v1beta1::EpochAndRound* unsafe_arena_release_epoch_and_round();
  // @@protoc_insertion_point(class_scope:injective.ocr.v1beta1.QueryFeedConfigInfoResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::injective::ocr::v1beta1::FeedConfigInfo* feed_config_info_;
    ::injective::ocr::v1beta1::EpochAndRound* epoch_and_round_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2focr_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryLatestRoundRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.ocr.v1beta1.QueryLatestRoundRequest) */ {
 public:
  inline QueryLatestRoundRequest() : QueryLatestRoundRequest(nullptr) {}
  ~QueryLatestRoundRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryLatestRoundRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryLatestRoundRequest(const QueryLatestRoundRequest& from);
  QueryLatestRoundRequest(QueryLatestRoundRequest&& from) noexcept
    : QueryLatestRoundRequest() {
    *this = ::std::move(from);
  }

  inline QueryLatestRoundRequest& operator=(const QueryLatestRoundRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryLatestRoundRequest& operator=(QueryLatestRoundRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryLatestRoundRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryLatestRoundRequest* internal_default_instance() {
    return reinterpret_cast<const QueryLatestRoundRequest*>(
               &_QueryLatestRoundRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(QueryLatestRoundRequest& a, QueryLatestRoundRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryLatestRoundRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryLatestRoundRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryLatestRoundRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryLatestRoundRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryLatestRoundRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryLatestRoundRequest& from) {
    QueryLatestRoundRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryLatestRoundRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.ocr.v1beta1.QueryLatestRoundRequest";
  }
  protected:
  explicit QueryLatestRoundRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFeedIdFieldNumber = 1,
  };
  // string feed_id = 1 [json_name = "feedId"];
  void clear_feed_id() ;
  const std::string& feed_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_feed_id(Arg_&& arg, Args_... args);
  std::string* mutable_feed_id();
  PROTOBUF_NODISCARD std::string* release_feed_id();
  void set_allocated_feed_id(std::string* ptr);

  private:
  const std::string& _internal_feed_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_feed_id(
      const std::string& value);
  std::string* _internal_mutable_feed_id();

  public:
  // @@protoc_insertion_point(class_scope:injective.ocr.v1beta1.QueryLatestRoundRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr feed_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2focr_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryLatestRoundResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.ocr.v1beta1.QueryLatestRoundResponse) */ {
 public:
  inline QueryLatestRoundResponse() : QueryLatestRoundResponse(nullptr) {}
  ~QueryLatestRoundResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryLatestRoundResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryLatestRoundResponse(const QueryLatestRoundResponse& from);
  QueryLatestRoundResponse(QueryLatestRoundResponse&& from) noexcept
    : QueryLatestRoundResponse() {
    *this = ::std::move(from);
  }

  inline QueryLatestRoundResponse& operator=(const QueryLatestRoundResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryLatestRoundResponse& operator=(QueryLatestRoundResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryLatestRoundResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryLatestRoundResponse* internal_default_instance() {
    return reinterpret_cast<const QueryLatestRoundResponse*>(
               &_QueryLatestRoundResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(QueryLatestRoundResponse& a, QueryLatestRoundResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryLatestRoundResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryLatestRoundResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryLatestRoundResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryLatestRoundResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryLatestRoundResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryLatestRoundResponse& from) {
    QueryLatestRoundResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryLatestRoundResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.ocr.v1beta1.QueryLatestRoundResponse";
  }
  protected:
  explicit QueryLatestRoundResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kLatestRoundIdFieldNumber = 1,
  };
  // .injective.ocr.v1beta1.Transmission data = 2 [json_name = "data"];
  bool has_data() const;
  void clear_data() ;
  const ::injective::ocr::v1beta1::Transmission& data() const;
  PROTOBUF_NODISCARD ::injective::ocr::v1beta1::Transmission* release_data();
  ::injective::ocr::v1beta1::Transmission* mutable_data();
  void set_allocated_data(::injective::ocr::v1beta1::Transmission* data);
  private:
  const ::injective::ocr::v1beta1::Transmission& _internal_data() const;
  ::injective::ocr::v1beta1::Transmission* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::injective::ocr::v1beta1::Transmission* data);
  ::injective::ocr::v1beta1::Transmission* unsafe_arena_release_data();
  // uint64 latest_round_id = 1 [json_name = "latestRoundId"];
  void clear_latest_round_id() ;
  ::uint64_t latest_round_id() const;
  void set_latest_round_id(::uint64_t value);

  private:
  ::uint64_t _internal_latest_round_id() const;
  void _internal_set_latest_round_id(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:injective.ocr.v1beta1.QueryLatestRoundResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::injective::ocr::v1beta1::Transmission* data_;
    ::uint64_t latest_round_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2focr_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryLatestTransmissionDetailsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.ocr.v1beta1.QueryLatestTransmissionDetailsRequest) */ {
 public:
  inline QueryLatestTransmissionDetailsRequest() : QueryLatestTransmissionDetailsRequest(nullptr) {}
  ~QueryLatestTransmissionDetailsRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryLatestTransmissionDetailsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryLatestTransmissionDetailsRequest(const QueryLatestTransmissionDetailsRequest& from);
  QueryLatestTransmissionDetailsRequest(QueryLatestTransmissionDetailsRequest&& from) noexcept
    : QueryLatestTransmissionDetailsRequest() {
    *this = ::std::move(from);
  }

  inline QueryLatestTransmissionDetailsRequest& operator=(const QueryLatestTransmissionDetailsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryLatestTransmissionDetailsRequest& operator=(QueryLatestTransmissionDetailsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryLatestTransmissionDetailsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryLatestTransmissionDetailsRequest* internal_default_instance() {
    return reinterpret_cast<const QueryLatestTransmissionDetailsRequest*>(
               &_QueryLatestTransmissionDetailsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(QueryLatestTransmissionDetailsRequest& a, QueryLatestTransmissionDetailsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryLatestTransmissionDetailsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryLatestTransmissionDetailsRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryLatestTransmissionDetailsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryLatestTransmissionDetailsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryLatestTransmissionDetailsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryLatestTransmissionDetailsRequest& from) {
    QueryLatestTransmissionDetailsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryLatestTransmissionDetailsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.ocr.v1beta1.QueryLatestTransmissionDetailsRequest";
  }
  protected:
  explicit QueryLatestTransmissionDetailsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFeedIdFieldNumber = 1,
  };
  // string feed_id = 1 [json_name = "feedId"];
  void clear_feed_id() ;
  const std::string& feed_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_feed_id(Arg_&& arg, Args_... args);
  std::string* mutable_feed_id();
  PROTOBUF_NODISCARD std::string* release_feed_id();
  void set_allocated_feed_id(std::string* ptr);

  private:
  const std::string& _internal_feed_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_feed_id(
      const std::string& value);
  std::string* _internal_mutable_feed_id();

  public:
  // @@protoc_insertion_point(class_scope:injective.ocr.v1beta1.QueryLatestTransmissionDetailsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr feed_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2focr_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryLatestTransmissionDetailsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.ocr.v1beta1.QueryLatestTransmissionDetailsResponse) */ {
 public:
  inline QueryLatestTransmissionDetailsResponse() : QueryLatestTransmissionDetailsResponse(nullptr) {}
  ~QueryLatestTransmissionDetailsResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryLatestTransmissionDetailsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryLatestTransmissionDetailsResponse(const QueryLatestTransmissionDetailsResponse& from);
  QueryLatestTransmissionDetailsResponse(QueryLatestTransmissionDetailsResponse&& from) noexcept
    : QueryLatestTransmissionDetailsResponse() {
    *this = ::std::move(from);
  }

  inline QueryLatestTransmissionDetailsResponse& operator=(const QueryLatestTransmissionDetailsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryLatestTransmissionDetailsResponse& operator=(QueryLatestTransmissionDetailsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryLatestTransmissionDetailsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryLatestTransmissionDetailsResponse* internal_default_instance() {
    return reinterpret_cast<const QueryLatestTransmissionDetailsResponse*>(
               &_QueryLatestTransmissionDetailsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(QueryLatestTransmissionDetailsResponse& a, QueryLatestTransmissionDetailsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryLatestTransmissionDetailsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryLatestTransmissionDetailsResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryLatestTransmissionDetailsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryLatestTransmissionDetailsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryLatestTransmissionDetailsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryLatestTransmissionDetailsResponse& from) {
    QueryLatestTransmissionDetailsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryLatestTransmissionDetailsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.ocr.v1beta1.QueryLatestTransmissionDetailsResponse";
  }
  protected:
  explicit QueryLatestTransmissionDetailsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfigDigestFieldNumber = 1,
    kEpochAndRoundFieldNumber = 2,
    kDataFieldNumber = 3,
  };
  // bytes config_digest = 1 [json_name = "configDigest"];
  void clear_config_digest() ;
  const std::string& config_digest() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_config_digest(Arg_&& arg, Args_... args);
  std::string* mutable_config_digest();
  PROTOBUF_NODISCARD std::string* release_config_digest();
  void set_allocated_config_digest(std::string* ptr);

  private:
  const std::string& _internal_config_digest() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_config_digest(
      const std::string& value);
  std::string* _internal_mutable_config_digest();

  public:
  // .injective.ocr.v1beta1.EpochAndRound epoch_and_round = 2 [json_name = "epochAndRound"];
  bool has_epoch_and_round() const;
  void clear_epoch_and_round() ;
  const ::injective::ocr::v1beta1::EpochAndRound& epoch_and_round() const;
  PROTOBUF_NODISCARD ::injective::ocr::v1beta1::EpochAndRound* release_epoch_and_round();
  ::injective::ocr::v1beta1::EpochAndRound* mutable_epoch_and_round();
  void set_allocated_epoch_and_round(::injective::ocr::v1beta1::EpochAndRound* epoch_and_round);
  private:
  const ::injective::ocr::v1beta1::EpochAndRound& _internal_epoch_and_round() const;
  ::injective::ocr::v1beta1::EpochAndRound* _internal_mutable_epoch_and_round();
  public:
  void unsafe_arena_set_allocated_epoch_and_round(
      ::injective::ocr::v1beta1::EpochAndRound* epoch_and_round);
  ::injective::ocr::v1beta1::EpochAndRound* unsafe_arena_release_epoch_and_round();
  // .injective.ocr.v1beta1.Transmission data = 3 [json_name = "data"];
  bool has_data() const;
  void clear_data() ;
  const ::injective::ocr::v1beta1::Transmission& data() const;
  PROTOBUF_NODISCARD ::injective::ocr::v1beta1::Transmission* release_data();
  ::injective::ocr::v1beta1::Transmission* mutable_data();
  void set_allocated_data(::injective::ocr::v1beta1::Transmission* data);
  private:
  const ::injective::ocr::v1beta1::Transmission& _internal_data() const;
  ::injective::ocr::v1beta1::Transmission* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::injective::ocr::v1beta1::Transmission* data);
  ::injective::ocr::v1beta1::Transmission* unsafe_arena_release_data();
  // @@protoc_insertion_point(class_scope:injective.ocr.v1beta1.QueryLatestTransmissionDetailsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr config_digest_;
    ::injective::ocr::v1beta1::EpochAndRound* epoch_and_round_;
    ::injective::ocr::v1beta1::Transmission* data_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2focr_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryOwedAmountRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.ocr.v1beta1.QueryOwedAmountRequest) */ {
 public:
  inline QueryOwedAmountRequest() : QueryOwedAmountRequest(nullptr) {}
  ~QueryOwedAmountRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryOwedAmountRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryOwedAmountRequest(const QueryOwedAmountRequest& from);
  QueryOwedAmountRequest(QueryOwedAmountRequest&& from) noexcept
    : QueryOwedAmountRequest() {
    *this = ::std::move(from);
  }

  inline QueryOwedAmountRequest& operator=(const QueryOwedAmountRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryOwedAmountRequest& operator=(QueryOwedAmountRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryOwedAmountRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryOwedAmountRequest* internal_default_instance() {
    return reinterpret_cast<const QueryOwedAmountRequest*>(
               &_QueryOwedAmountRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(QueryOwedAmountRequest& a, QueryOwedAmountRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryOwedAmountRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryOwedAmountRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryOwedAmountRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryOwedAmountRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryOwedAmountRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryOwedAmountRequest& from) {
    QueryOwedAmountRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryOwedAmountRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.ocr.v1beta1.QueryOwedAmountRequest";
  }
  protected:
  explicit QueryOwedAmountRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransmitterFieldNumber = 1,
  };
  // string transmitter = 1 [json_name = "transmitter"];
  void clear_transmitter() ;
  const std::string& transmitter() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_transmitter(Arg_&& arg, Args_... args);
  std::string* mutable_transmitter();
  PROTOBUF_NODISCARD std::string* release_transmitter();
  void set_allocated_transmitter(std::string* ptr);

  private:
  const std::string& _internal_transmitter() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_transmitter(
      const std::string& value);
  std::string* _internal_mutable_transmitter();

  public:
  // @@protoc_insertion_point(class_scope:injective.ocr.v1beta1.QueryOwedAmountRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr transmitter_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2focr_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryOwedAmountResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.ocr.v1beta1.QueryOwedAmountResponse) */ {
 public:
  inline QueryOwedAmountResponse() : QueryOwedAmountResponse(nullptr) {}
  ~QueryOwedAmountResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryOwedAmountResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryOwedAmountResponse(const QueryOwedAmountResponse& from);
  QueryOwedAmountResponse(QueryOwedAmountResponse&& from) noexcept
    : QueryOwedAmountResponse() {
    *this = ::std::move(from);
  }

  inline QueryOwedAmountResponse& operator=(const QueryOwedAmountResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryOwedAmountResponse& operator=(QueryOwedAmountResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryOwedAmountResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryOwedAmountResponse* internal_default_instance() {
    return reinterpret_cast<const QueryOwedAmountResponse*>(
               &_QueryOwedAmountResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(QueryOwedAmountResponse& a, QueryOwedAmountResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryOwedAmountResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryOwedAmountResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryOwedAmountResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryOwedAmountResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryOwedAmountResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryOwedAmountResponse& from) {
    QueryOwedAmountResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryOwedAmountResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.ocr.v1beta1.QueryOwedAmountResponse";
  }
  protected:
  explicit QueryOwedAmountResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAmountFieldNumber = 1,
  };
  // .cosmos.base.v1beta1.Coin amount = 1 [json_name = "amount", (.gogoproto.nullable) = false];
  bool has_amount() const;
  void clear_amount() ;
  const ::cosmos::base::v1beta1::Coin& amount() const;
  PROTOBUF_NODISCARD ::cosmos::base::v1beta1::Coin* release_amount();
  ::cosmos::base::v1beta1::Coin* mutable_amount();
  void set_allocated_amount(::cosmos::base::v1beta1::Coin* amount);
  private:
  const ::cosmos::base::v1beta1::Coin& _internal_amount() const;
  ::cosmos::base::v1beta1::Coin* _internal_mutable_amount();
  public:
  void unsafe_arena_set_allocated_amount(
      ::cosmos::base::v1beta1::Coin* amount);
  ::cosmos::base::v1beta1::Coin* unsafe_arena_release_amount();
  // @@protoc_insertion_point(class_scope:injective.ocr.v1beta1.QueryOwedAmountResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::cosmos::base::v1beta1::Coin* amount_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2focr_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryModuleStateRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:injective.ocr.v1beta1.QueryModuleStateRequest) */ {
 public:
  inline QueryModuleStateRequest() : QueryModuleStateRequest(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryModuleStateRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryModuleStateRequest(const QueryModuleStateRequest& from);
  QueryModuleStateRequest(QueryModuleStateRequest&& from) noexcept
    : QueryModuleStateRequest() {
    *this = ::std::move(from);
  }

  inline QueryModuleStateRequest& operator=(const QueryModuleStateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryModuleStateRequest& operator=(QueryModuleStateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryModuleStateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryModuleStateRequest* internal_default_instance() {
    return reinterpret_cast<const QueryModuleStateRequest*>(
               &_QueryModuleStateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(QueryModuleStateRequest& a, QueryModuleStateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryModuleStateRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryModuleStateRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryModuleStateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryModuleStateRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const QueryModuleStateRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const QueryModuleStateRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.ocr.v1beta1.QueryModuleStateRequest";
  }
  protected:
  explicit QueryModuleStateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:injective.ocr.v1beta1.QueryModuleStateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_injective_2focr_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryModuleStateResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.ocr.v1beta1.QueryModuleStateResponse) */ {
 public:
  inline QueryModuleStateResponse() : QueryModuleStateResponse(nullptr) {}
  ~QueryModuleStateResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryModuleStateResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryModuleStateResponse(const QueryModuleStateResponse& from);
  QueryModuleStateResponse(QueryModuleStateResponse&& from) noexcept
    : QueryModuleStateResponse() {
    *this = ::std::move(from);
  }

  inline QueryModuleStateResponse& operator=(const QueryModuleStateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryModuleStateResponse& operator=(QueryModuleStateResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryModuleStateResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryModuleStateResponse* internal_default_instance() {
    return reinterpret_cast<const QueryModuleStateResponse*>(
               &_QueryModuleStateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(QueryModuleStateResponse& a, QueryModuleStateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryModuleStateResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryModuleStateResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryModuleStateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryModuleStateResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryModuleStateResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryModuleStateResponse& from) {
    QueryModuleStateResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryModuleStateResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.ocr.v1beta1.QueryModuleStateResponse";
  }
  protected:
  explicit QueryModuleStateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStateFieldNumber = 1,
  };
  // .injective.ocr.v1beta1.GenesisState state = 1 [json_name = "state"];
  bool has_state() const;
  void clear_state() ;
  const ::injective::ocr::v1beta1::GenesisState& state() const;
  PROTOBUF_NODISCARD ::injective::ocr::v1beta1::GenesisState* release_state();
  ::injective::ocr::v1beta1::GenesisState* mutable_state();
  void set_allocated_state(::injective::ocr::v1beta1::GenesisState* state);
  private:
  const ::injective::ocr::v1beta1::GenesisState& _internal_state() const;
  ::injective::ocr::v1beta1::GenesisState* _internal_mutable_state();
  public:
  void unsafe_arena_set_allocated_state(
      ::injective::ocr::v1beta1::GenesisState* state);
  ::injective::ocr::v1beta1::GenesisState* unsafe_arena_release_state();
  // @@protoc_insertion_point(class_scope:injective.ocr.v1beta1.QueryModuleStateResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::injective::ocr::v1beta1::GenesisState* state_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2focr_2fv1beta1_2fquery_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// QueryParamsRequest

// -------------------------------------------------------------------

// QueryParamsResponse

// .injective.ocr.v1beta1.Params params = 1 [json_name = "params", (.gogoproto.nullable) = false];
inline bool QueryParamsResponse::has_params() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.params_ != nullptr);
  return value;
}
inline const ::injective::ocr::v1beta1::Params& QueryParamsResponse::_internal_params() const {
  const ::injective::ocr::v1beta1::Params* p = _impl_.params_;
  return p != nullptr ? *p : reinterpret_cast<const ::injective::ocr::v1beta1::Params&>(
      ::injective::ocr::v1beta1::_Params_default_instance_);
}
inline const ::injective::ocr::v1beta1::Params& QueryParamsResponse::params() const {
  // @@protoc_insertion_point(field_get:injective.ocr.v1beta1.QueryParamsResponse.params)
  return _internal_params();
}
inline void QueryParamsResponse::unsafe_arena_set_allocated_params(
    ::injective::ocr::v1beta1::Params* params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.params_);
  }
  _impl_.params_ = params;
  if (params) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:injective.ocr.v1beta1.QueryParamsResponse.params)
}
inline ::injective::ocr::v1beta1::Params* QueryParamsResponse::release_params() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::injective::ocr::v1beta1::Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::injective::ocr::v1beta1::Params* QueryParamsResponse::unsafe_arena_release_params() {
  // @@protoc_insertion_point(field_release:injective.ocr.v1beta1.QueryParamsResponse.params)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::injective::ocr::v1beta1::Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
  return temp;
}
inline ::injective::ocr::v1beta1::Params* QueryParamsResponse::_internal_mutable_params() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.params_ == nullptr) {
    auto* p = CreateMaybeMessage<::injective::ocr::v1beta1::Params>(GetArenaForAllocation());
    _impl_.params_ = p;
  }
  return _impl_.params_;
}
inline ::injective::ocr::v1beta1::Params* QueryParamsResponse::mutable_params() {
  ::injective::ocr::v1beta1::Params* _msg = _internal_mutable_params();
  // @@protoc_insertion_point(field_mutable:injective.ocr.v1beta1.QueryParamsResponse.params)
  return _msg;
}
inline void QueryParamsResponse::set_allocated_params(::injective::ocr::v1beta1::Params* params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.params_);
  }
  if (params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(params));
    if (message_arena != submessage_arena) {
      params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, params, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.params_ = params;
  // @@protoc_insertion_point(field_set_allocated:injective.ocr.v1beta1.QueryParamsResponse.params)
}

// -------------------------------------------------------------------

// QueryFeedConfigRequest

// string feed_id = 1 [json_name = "feedId"];
inline void QueryFeedConfigRequest::clear_feed_id() {
  _impl_.feed_id_.ClearToEmpty();
}
inline const std::string& QueryFeedConfigRequest::feed_id() const {
  // @@protoc_insertion_point(field_get:injective.ocr.v1beta1.QueryFeedConfigRequest.feed_id)
  return _internal_feed_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryFeedConfigRequest::set_feed_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.feed_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.ocr.v1beta1.QueryFeedConfigRequest.feed_id)
}
inline std::string* QueryFeedConfigRequest::mutable_feed_id() {
  std::string* _s = _internal_mutable_feed_id();
  // @@protoc_insertion_point(field_mutable:injective.ocr.v1beta1.QueryFeedConfigRequest.feed_id)
  return _s;
}
inline const std::string& QueryFeedConfigRequest::_internal_feed_id() const {
  return _impl_.feed_id_.Get();
}
inline void QueryFeedConfigRequest::_internal_set_feed_id(const std::string& value) {
  ;


  _impl_.feed_id_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryFeedConfigRequest::_internal_mutable_feed_id() {
  ;
  return _impl_.feed_id_.Mutable( GetArenaForAllocation());
}
inline std::string* QueryFeedConfigRequest::release_feed_id() {
  // @@protoc_insertion_point(field_release:injective.ocr.v1beta1.QueryFeedConfigRequest.feed_id)
  return _impl_.feed_id_.Release();
}
inline void QueryFeedConfigRequest::set_allocated_feed_id(std::string* value) {
  _impl_.feed_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.feed_id_.IsDefault()) {
          _impl_.feed_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.ocr.v1beta1.QueryFeedConfigRequest.feed_id)
}

// -------------------------------------------------------------------

// QueryFeedConfigResponse

// .injective.ocr.v1beta1.FeedConfigInfo feed_config_info = 1 [json_name = "feedConfigInfo"];
inline bool QueryFeedConfigResponse::has_feed_config_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.feed_config_info_ != nullptr);
  return value;
}
inline const ::injective::ocr::v1beta1::FeedConfigInfo& QueryFeedConfigResponse::_internal_feed_config_info() const {
  const ::injective::ocr::v1beta1::FeedConfigInfo* p = _impl_.feed_config_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::injective::ocr::v1beta1::FeedConfigInfo&>(
      ::injective::ocr::v1beta1::_FeedConfigInfo_default_instance_);
}
inline const ::injective::ocr::v1beta1::FeedConfigInfo& QueryFeedConfigResponse::feed_config_info() const {
  // @@protoc_insertion_point(field_get:injective.ocr.v1beta1.QueryFeedConfigResponse.feed_config_info)
  return _internal_feed_config_info();
}
inline void QueryFeedConfigResponse::unsafe_arena_set_allocated_feed_config_info(
    ::injective::ocr::v1beta1::FeedConfigInfo* feed_config_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.feed_config_info_);
  }
  _impl_.feed_config_info_ = feed_config_info;
  if (feed_config_info) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:injective.ocr.v1beta1.QueryFeedConfigResponse.feed_config_info)
}
inline ::injective::ocr::v1beta1::FeedConfigInfo* QueryFeedConfigResponse::release_feed_config_info() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::injective::ocr::v1beta1::FeedConfigInfo* temp = _impl_.feed_config_info_;
  _impl_.feed_config_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::injective::ocr::v1beta1::FeedConfigInfo* QueryFeedConfigResponse::unsafe_arena_release_feed_config_info() {
  // @@protoc_insertion_point(field_release:injective.ocr.v1beta1.QueryFeedConfigResponse.feed_config_info)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::injective::ocr::v1beta1::FeedConfigInfo* temp = _impl_.feed_config_info_;
  _impl_.feed_config_info_ = nullptr;
  return temp;
}
inline ::injective::ocr::v1beta1::FeedConfigInfo* QueryFeedConfigResponse::_internal_mutable_feed_config_info() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.feed_config_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::injective::ocr::v1beta1::FeedConfigInfo>(GetArenaForAllocation());
    _impl_.feed_config_info_ = p;
  }
  return _impl_.feed_config_info_;
}
inline ::injective::ocr::v1beta1::FeedConfigInfo* QueryFeedConfigResponse::mutable_feed_config_info() {
  ::injective::ocr::v1beta1::FeedConfigInfo* _msg = _internal_mutable_feed_config_info();
  // @@protoc_insertion_point(field_mutable:injective.ocr.v1beta1.QueryFeedConfigResponse.feed_config_info)
  return _msg;
}
inline void QueryFeedConfigResponse::set_allocated_feed_config_info(::injective::ocr::v1beta1::FeedConfigInfo* feed_config_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.feed_config_info_);
  }
  if (feed_config_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(feed_config_info));
    if (message_arena != submessage_arena) {
      feed_config_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, feed_config_info, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.feed_config_info_ = feed_config_info;
  // @@protoc_insertion_point(field_set_allocated:injective.ocr.v1beta1.QueryFeedConfigResponse.feed_config_info)
}

// .injective.ocr.v1beta1.FeedConfig feed_config = 2 [json_name = "feedConfig"];
inline bool QueryFeedConfigResponse::has_feed_config() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.feed_config_ != nullptr);
  return value;
}
inline const ::injective::ocr::v1beta1::FeedConfig& QueryFeedConfigResponse::_internal_feed_config() const {
  const ::injective::ocr::v1beta1::FeedConfig* p = _impl_.feed_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::injective::ocr::v1beta1::FeedConfig&>(
      ::injective::ocr::v1beta1::_FeedConfig_default_instance_);
}
inline const ::injective::ocr::v1beta1::FeedConfig& QueryFeedConfigResponse::feed_config() const {
  // @@protoc_insertion_point(field_get:injective.ocr.v1beta1.QueryFeedConfigResponse.feed_config)
  return _internal_feed_config();
}
inline void QueryFeedConfigResponse::unsafe_arena_set_allocated_feed_config(
    ::injective::ocr::v1beta1::FeedConfig* feed_config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.feed_config_);
  }
  _impl_.feed_config_ = feed_config;
  if (feed_config) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:injective.ocr.v1beta1.QueryFeedConfigResponse.feed_config)
}
inline ::injective::ocr::v1beta1::FeedConfig* QueryFeedConfigResponse::release_feed_config() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::injective::ocr::v1beta1::FeedConfig* temp = _impl_.feed_config_;
  _impl_.feed_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::injective::ocr::v1beta1::FeedConfig* QueryFeedConfigResponse::unsafe_arena_release_feed_config() {
  // @@protoc_insertion_point(field_release:injective.ocr.v1beta1.QueryFeedConfigResponse.feed_config)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::injective::ocr::v1beta1::FeedConfig* temp = _impl_.feed_config_;
  _impl_.feed_config_ = nullptr;
  return temp;
}
inline ::injective::ocr::v1beta1::FeedConfig* QueryFeedConfigResponse::_internal_mutable_feed_config() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.feed_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::injective::ocr::v1beta1::FeedConfig>(GetArenaForAllocation());
    _impl_.feed_config_ = p;
  }
  return _impl_.feed_config_;
}
inline ::injective::ocr::v1beta1::FeedConfig* QueryFeedConfigResponse::mutable_feed_config() {
  ::injective::ocr::v1beta1::FeedConfig* _msg = _internal_mutable_feed_config();
  // @@protoc_insertion_point(field_mutable:injective.ocr.v1beta1.QueryFeedConfigResponse.feed_config)
  return _msg;
}
inline void QueryFeedConfigResponse::set_allocated_feed_config(::injective::ocr::v1beta1::FeedConfig* feed_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.feed_config_);
  }
  if (feed_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(feed_config));
    if (message_arena != submessage_arena) {
      feed_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, feed_config, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.feed_config_ = feed_config;
  // @@protoc_insertion_point(field_set_allocated:injective.ocr.v1beta1.QueryFeedConfigResponse.feed_config)
}

// -------------------------------------------------------------------

// QueryFeedConfigInfoRequest

// string feed_id = 1 [json_name = "feedId"];
inline void QueryFeedConfigInfoRequest::clear_feed_id() {
  _impl_.feed_id_.ClearToEmpty();
}
inline const std::string& QueryFeedConfigInfoRequest::feed_id() const {
  // @@protoc_insertion_point(field_get:injective.ocr.v1beta1.QueryFeedConfigInfoRequest.feed_id)
  return _internal_feed_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryFeedConfigInfoRequest::set_feed_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.feed_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.ocr.v1beta1.QueryFeedConfigInfoRequest.feed_id)
}
inline std::string* QueryFeedConfigInfoRequest::mutable_feed_id() {
  std::string* _s = _internal_mutable_feed_id();
  // @@protoc_insertion_point(field_mutable:injective.ocr.v1beta1.QueryFeedConfigInfoRequest.feed_id)
  return _s;
}
inline const std::string& QueryFeedConfigInfoRequest::_internal_feed_id() const {
  return _impl_.feed_id_.Get();
}
inline void QueryFeedConfigInfoRequest::_internal_set_feed_id(const std::string& value) {
  ;


  _impl_.feed_id_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryFeedConfigInfoRequest::_internal_mutable_feed_id() {
  ;
  return _impl_.feed_id_.Mutable( GetArenaForAllocation());
}
inline std::string* QueryFeedConfigInfoRequest::release_feed_id() {
  // @@protoc_insertion_point(field_release:injective.ocr.v1beta1.QueryFeedConfigInfoRequest.feed_id)
  return _impl_.feed_id_.Release();
}
inline void QueryFeedConfigInfoRequest::set_allocated_feed_id(std::string* value) {
  _impl_.feed_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.feed_id_.IsDefault()) {
          _impl_.feed_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.ocr.v1beta1.QueryFeedConfigInfoRequest.feed_id)
}

// -------------------------------------------------------------------

// QueryFeedConfigInfoResponse

// .injective.ocr.v1beta1.FeedConfigInfo feed_config_info = 1 [json_name = "feedConfigInfo"];
inline bool QueryFeedConfigInfoResponse::has_feed_config_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.feed_config_info_ != nullptr);
  return value;
}
inline const ::injective::ocr::v1beta1::FeedConfigInfo& QueryFeedConfigInfoResponse::_internal_feed_config_info() const {
  const ::injective::ocr::v1beta1::FeedConfigInfo* p = _impl_.feed_config_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::injective::ocr::v1beta1::FeedConfigInfo&>(
      ::injective::ocr::v1beta1::_FeedConfigInfo_default_instance_);
}
inline const ::injective::ocr::v1beta1::FeedConfigInfo& QueryFeedConfigInfoResponse::feed_config_info() const {
  // @@protoc_insertion_point(field_get:injective.ocr.v1beta1.QueryFeedConfigInfoResponse.feed_config_info)
  return _internal_feed_config_info();
}
inline void QueryFeedConfigInfoResponse::unsafe_arena_set_allocated_feed_config_info(
    ::injective::ocr::v1beta1::FeedConfigInfo* feed_config_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.feed_config_info_);
  }
  _impl_.feed_config_info_ = feed_config_info;
  if (feed_config_info) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:injective.ocr.v1beta1.QueryFeedConfigInfoResponse.feed_config_info)
}
inline ::injective::ocr::v1beta1::FeedConfigInfo* QueryFeedConfigInfoResponse::release_feed_config_info() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::injective::ocr::v1beta1::FeedConfigInfo* temp = _impl_.feed_config_info_;
  _impl_.feed_config_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::injective::ocr::v1beta1::FeedConfigInfo* QueryFeedConfigInfoResponse::unsafe_arena_release_feed_config_info() {
  // @@protoc_insertion_point(field_release:injective.ocr.v1beta1.QueryFeedConfigInfoResponse.feed_config_info)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::injective::ocr::v1beta1::FeedConfigInfo* temp = _impl_.feed_config_info_;
  _impl_.feed_config_info_ = nullptr;
  return temp;
}
inline ::injective::ocr::v1beta1::FeedConfigInfo* QueryFeedConfigInfoResponse::_internal_mutable_feed_config_info() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.feed_config_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::injective::ocr::v1beta1::FeedConfigInfo>(GetArenaForAllocation());
    _impl_.feed_config_info_ = p;
  }
  return _impl_.feed_config_info_;
}
inline ::injective::ocr::v1beta1::FeedConfigInfo* QueryFeedConfigInfoResponse::mutable_feed_config_info() {
  ::injective::ocr::v1beta1::FeedConfigInfo* _msg = _internal_mutable_feed_config_info();
  // @@protoc_insertion_point(field_mutable:injective.ocr.v1beta1.QueryFeedConfigInfoResponse.feed_config_info)
  return _msg;
}
inline void QueryFeedConfigInfoResponse::set_allocated_feed_config_info(::injective::ocr::v1beta1::FeedConfigInfo* feed_config_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.feed_config_info_);
  }
  if (feed_config_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(feed_config_info));
    if (message_arena != submessage_arena) {
      feed_config_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, feed_config_info, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.feed_config_info_ = feed_config_info;
  // @@protoc_insertion_point(field_set_allocated:injective.ocr.v1beta1.QueryFeedConfigInfoResponse.feed_config_info)
}

// .injective.ocr.v1beta1.EpochAndRound epoch_and_round = 2 [json_name = "epochAndRound"];
inline bool QueryFeedConfigInfoResponse::has_epoch_and_round() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.epoch_and_round_ != nullptr);
  return value;
}
inline const ::injective::ocr::v1beta1::EpochAndRound& QueryFeedConfigInfoResponse::_internal_epoch_and_round() const {
  const ::injective::ocr::v1beta1::EpochAndRound* p = _impl_.epoch_and_round_;
  return p != nullptr ? *p : reinterpret_cast<const ::injective::ocr::v1beta1::EpochAndRound&>(
      ::injective::ocr::v1beta1::_EpochAndRound_default_instance_);
}
inline const ::injective::ocr::v1beta1::EpochAndRound& QueryFeedConfigInfoResponse::epoch_and_round() const {
  // @@protoc_insertion_point(field_get:injective.ocr.v1beta1.QueryFeedConfigInfoResponse.epoch_and_round)
  return _internal_epoch_and_round();
}
inline void QueryFeedConfigInfoResponse::unsafe_arena_set_allocated_epoch_and_round(
    ::injective::ocr::v1beta1::EpochAndRound* epoch_and_round) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.epoch_and_round_);
  }
  _impl_.epoch_and_round_ = epoch_and_round;
  if (epoch_and_round) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:injective.ocr.v1beta1.QueryFeedConfigInfoResponse.epoch_and_round)
}
inline ::injective::ocr::v1beta1::EpochAndRound* QueryFeedConfigInfoResponse::release_epoch_and_round() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::injective::ocr::v1beta1::EpochAndRound* temp = _impl_.epoch_and_round_;
  _impl_.epoch_and_round_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::injective::ocr::v1beta1::EpochAndRound* QueryFeedConfigInfoResponse::unsafe_arena_release_epoch_and_round() {
  // @@protoc_insertion_point(field_release:injective.ocr.v1beta1.QueryFeedConfigInfoResponse.epoch_and_round)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::injective::ocr::v1beta1::EpochAndRound* temp = _impl_.epoch_and_round_;
  _impl_.epoch_and_round_ = nullptr;
  return temp;
}
inline ::injective::ocr::v1beta1::EpochAndRound* QueryFeedConfigInfoResponse::_internal_mutable_epoch_and_round() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.epoch_and_round_ == nullptr) {
    auto* p = CreateMaybeMessage<::injective::ocr::v1beta1::EpochAndRound>(GetArenaForAllocation());
    _impl_.epoch_and_round_ = p;
  }
  return _impl_.epoch_and_round_;
}
inline ::injective::ocr::v1beta1::EpochAndRound* QueryFeedConfigInfoResponse::mutable_epoch_and_round() {
  ::injective::ocr::v1beta1::EpochAndRound* _msg = _internal_mutable_epoch_and_round();
  // @@protoc_insertion_point(field_mutable:injective.ocr.v1beta1.QueryFeedConfigInfoResponse.epoch_and_round)
  return _msg;
}
inline void QueryFeedConfigInfoResponse::set_allocated_epoch_and_round(::injective::ocr::v1beta1::EpochAndRound* epoch_and_round) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.epoch_and_round_);
  }
  if (epoch_and_round) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(epoch_and_round));
    if (message_arena != submessage_arena) {
      epoch_and_round = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, epoch_and_round, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.epoch_and_round_ = epoch_and_round;
  // @@protoc_insertion_point(field_set_allocated:injective.ocr.v1beta1.QueryFeedConfigInfoResponse.epoch_and_round)
}

// -------------------------------------------------------------------

// QueryLatestRoundRequest

// string feed_id = 1 [json_name = "feedId"];
inline void QueryLatestRoundRequest::clear_feed_id() {
  _impl_.feed_id_.ClearToEmpty();
}
inline const std::string& QueryLatestRoundRequest::feed_id() const {
  // @@protoc_insertion_point(field_get:injective.ocr.v1beta1.QueryLatestRoundRequest.feed_id)
  return _internal_feed_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryLatestRoundRequest::set_feed_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.feed_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.ocr.v1beta1.QueryLatestRoundRequest.feed_id)
}
inline std::string* QueryLatestRoundRequest::mutable_feed_id() {
  std::string* _s = _internal_mutable_feed_id();
  // @@protoc_insertion_point(field_mutable:injective.ocr.v1beta1.QueryLatestRoundRequest.feed_id)
  return _s;
}
inline const std::string& QueryLatestRoundRequest::_internal_feed_id() const {
  return _impl_.feed_id_.Get();
}
inline void QueryLatestRoundRequest::_internal_set_feed_id(const std::string& value) {
  ;


  _impl_.feed_id_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryLatestRoundRequest::_internal_mutable_feed_id() {
  ;
  return _impl_.feed_id_.Mutable( GetArenaForAllocation());
}
inline std::string* QueryLatestRoundRequest::release_feed_id() {
  // @@protoc_insertion_point(field_release:injective.ocr.v1beta1.QueryLatestRoundRequest.feed_id)
  return _impl_.feed_id_.Release();
}
inline void QueryLatestRoundRequest::set_allocated_feed_id(std::string* value) {
  _impl_.feed_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.feed_id_.IsDefault()) {
          _impl_.feed_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.ocr.v1beta1.QueryLatestRoundRequest.feed_id)
}

// -------------------------------------------------------------------

// QueryLatestRoundResponse

// uint64 latest_round_id = 1 [json_name = "latestRoundId"];
inline void QueryLatestRoundResponse::clear_latest_round_id() {
  _impl_.latest_round_id_ = ::uint64_t{0u};
}
inline ::uint64_t QueryLatestRoundResponse::latest_round_id() const {
  // @@protoc_insertion_point(field_get:injective.ocr.v1beta1.QueryLatestRoundResponse.latest_round_id)
  return _internal_latest_round_id();
}
inline void QueryLatestRoundResponse::set_latest_round_id(::uint64_t value) {
  _internal_set_latest_round_id(value);
  // @@protoc_insertion_point(field_set:injective.ocr.v1beta1.QueryLatestRoundResponse.latest_round_id)
}
inline ::uint64_t QueryLatestRoundResponse::_internal_latest_round_id() const {
  return _impl_.latest_round_id_;
}
inline void QueryLatestRoundResponse::_internal_set_latest_round_id(::uint64_t value) {
  ;
  _impl_.latest_round_id_ = value;
}

// .injective.ocr.v1beta1.Transmission data = 2 [json_name = "data"];
inline bool QueryLatestRoundResponse::has_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.data_ != nullptr);
  return value;
}
inline const ::injective::ocr::v1beta1::Transmission& QueryLatestRoundResponse::_internal_data() const {
  const ::injective::ocr::v1beta1::Transmission* p = _impl_.data_;
  return p != nullptr ? *p : reinterpret_cast<const ::injective::ocr::v1beta1::Transmission&>(
      ::injective::ocr::v1beta1::_Transmission_default_instance_);
}
inline const ::injective::ocr::v1beta1::Transmission& QueryLatestRoundResponse::data() const {
  // @@protoc_insertion_point(field_get:injective.ocr.v1beta1.QueryLatestRoundResponse.data)
  return _internal_data();
}
inline void QueryLatestRoundResponse::unsafe_arena_set_allocated_data(
    ::injective::ocr::v1beta1::Transmission* data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.data_);
  }
  _impl_.data_ = data;
  if (data) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:injective.ocr.v1beta1.QueryLatestRoundResponse.data)
}
inline ::injective::ocr::v1beta1::Transmission* QueryLatestRoundResponse::release_data() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::injective::ocr::v1beta1::Transmission* temp = _impl_.data_;
  _impl_.data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::injective::ocr::v1beta1::Transmission* QueryLatestRoundResponse::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:injective.ocr.v1beta1.QueryLatestRoundResponse.data)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::injective::ocr::v1beta1::Transmission* temp = _impl_.data_;
  _impl_.data_ = nullptr;
  return temp;
}
inline ::injective::ocr::v1beta1::Transmission* QueryLatestRoundResponse::_internal_mutable_data() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.data_ == nullptr) {
    auto* p = CreateMaybeMessage<::injective::ocr::v1beta1::Transmission>(GetArenaForAllocation());
    _impl_.data_ = p;
  }
  return _impl_.data_;
}
inline ::injective::ocr::v1beta1::Transmission* QueryLatestRoundResponse::mutable_data() {
  ::injective::ocr::v1beta1::Transmission* _msg = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:injective.ocr.v1beta1.QueryLatestRoundResponse.data)
  return _msg;
}
inline void QueryLatestRoundResponse::set_allocated_data(::injective::ocr::v1beta1::Transmission* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.data_);
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data));
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.data_ = data;
  // @@protoc_insertion_point(field_set_allocated:injective.ocr.v1beta1.QueryLatestRoundResponse.data)
}

// -------------------------------------------------------------------

// QueryLatestTransmissionDetailsRequest

// string feed_id = 1 [json_name = "feedId"];
inline void QueryLatestTransmissionDetailsRequest::clear_feed_id() {
  _impl_.feed_id_.ClearToEmpty();
}
inline const std::string& QueryLatestTransmissionDetailsRequest::feed_id() const {
  // @@protoc_insertion_point(field_get:injective.ocr.v1beta1.QueryLatestTransmissionDetailsRequest.feed_id)
  return _internal_feed_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryLatestTransmissionDetailsRequest::set_feed_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.feed_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.ocr.v1beta1.QueryLatestTransmissionDetailsRequest.feed_id)
}
inline std::string* QueryLatestTransmissionDetailsRequest::mutable_feed_id() {
  std::string* _s = _internal_mutable_feed_id();
  // @@protoc_insertion_point(field_mutable:injective.ocr.v1beta1.QueryLatestTransmissionDetailsRequest.feed_id)
  return _s;
}
inline const std::string& QueryLatestTransmissionDetailsRequest::_internal_feed_id() const {
  return _impl_.feed_id_.Get();
}
inline void QueryLatestTransmissionDetailsRequest::_internal_set_feed_id(const std::string& value) {
  ;


  _impl_.feed_id_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryLatestTransmissionDetailsRequest::_internal_mutable_feed_id() {
  ;
  return _impl_.feed_id_.Mutable( GetArenaForAllocation());
}
inline std::string* QueryLatestTransmissionDetailsRequest::release_feed_id() {
  // @@protoc_insertion_point(field_release:injective.ocr.v1beta1.QueryLatestTransmissionDetailsRequest.feed_id)
  return _impl_.feed_id_.Release();
}
inline void QueryLatestTransmissionDetailsRequest::set_allocated_feed_id(std::string* value) {
  _impl_.feed_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.feed_id_.IsDefault()) {
          _impl_.feed_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.ocr.v1beta1.QueryLatestTransmissionDetailsRequest.feed_id)
}

// -------------------------------------------------------------------

// QueryLatestTransmissionDetailsResponse

// bytes config_digest = 1 [json_name = "configDigest"];
inline void QueryLatestTransmissionDetailsResponse::clear_config_digest() {
  _impl_.config_digest_.ClearToEmpty();
}
inline const std::string& QueryLatestTransmissionDetailsResponse::config_digest() const {
  // @@protoc_insertion_point(field_get:injective.ocr.v1beta1.QueryLatestTransmissionDetailsResponse.config_digest)
  return _internal_config_digest();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryLatestTransmissionDetailsResponse::set_config_digest(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.config_digest_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.ocr.v1beta1.QueryLatestTransmissionDetailsResponse.config_digest)
}
inline std::string* QueryLatestTransmissionDetailsResponse::mutable_config_digest() {
  std::string* _s = _internal_mutable_config_digest();
  // @@protoc_insertion_point(field_mutable:injective.ocr.v1beta1.QueryLatestTransmissionDetailsResponse.config_digest)
  return _s;
}
inline const std::string& QueryLatestTransmissionDetailsResponse::_internal_config_digest() const {
  return _impl_.config_digest_.Get();
}
inline void QueryLatestTransmissionDetailsResponse::_internal_set_config_digest(const std::string& value) {
  ;


  _impl_.config_digest_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryLatestTransmissionDetailsResponse::_internal_mutable_config_digest() {
  ;
  return _impl_.config_digest_.Mutable( GetArenaForAllocation());
}
inline std::string* QueryLatestTransmissionDetailsResponse::release_config_digest() {
  // @@protoc_insertion_point(field_release:injective.ocr.v1beta1.QueryLatestTransmissionDetailsResponse.config_digest)
  return _impl_.config_digest_.Release();
}
inline void QueryLatestTransmissionDetailsResponse::set_allocated_config_digest(std::string* value) {
  _impl_.config_digest_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.config_digest_.IsDefault()) {
          _impl_.config_digest_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.ocr.v1beta1.QueryLatestTransmissionDetailsResponse.config_digest)
}

// .injective.ocr.v1beta1.EpochAndRound epoch_and_round = 2 [json_name = "epochAndRound"];
inline bool QueryLatestTransmissionDetailsResponse::has_epoch_and_round() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.epoch_and_round_ != nullptr);
  return value;
}
inline const ::injective::ocr::v1beta1::EpochAndRound& QueryLatestTransmissionDetailsResponse::_internal_epoch_and_round() const {
  const ::injective::ocr::v1beta1::EpochAndRound* p = _impl_.epoch_and_round_;
  return p != nullptr ? *p : reinterpret_cast<const ::injective::ocr::v1beta1::EpochAndRound&>(
      ::injective::ocr::v1beta1::_EpochAndRound_default_instance_);
}
inline const ::injective::ocr::v1beta1::EpochAndRound& QueryLatestTransmissionDetailsResponse::epoch_and_round() const {
  // @@protoc_insertion_point(field_get:injective.ocr.v1beta1.QueryLatestTransmissionDetailsResponse.epoch_and_round)
  return _internal_epoch_and_round();
}
inline void QueryLatestTransmissionDetailsResponse::unsafe_arena_set_allocated_epoch_and_round(
    ::injective::ocr::v1beta1::EpochAndRound* epoch_and_round) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.epoch_and_round_);
  }
  _impl_.epoch_and_round_ = epoch_and_round;
  if (epoch_and_round) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:injective.ocr.v1beta1.QueryLatestTransmissionDetailsResponse.epoch_and_round)
}
inline ::injective::ocr::v1beta1::EpochAndRound* QueryLatestTransmissionDetailsResponse::release_epoch_and_round() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::injective::ocr::v1beta1::EpochAndRound* temp = _impl_.epoch_and_round_;
  _impl_.epoch_and_round_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::injective::ocr::v1beta1::EpochAndRound* QueryLatestTransmissionDetailsResponse::unsafe_arena_release_epoch_and_round() {
  // @@protoc_insertion_point(field_release:injective.ocr.v1beta1.QueryLatestTransmissionDetailsResponse.epoch_and_round)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::injective::ocr::v1beta1::EpochAndRound* temp = _impl_.epoch_and_round_;
  _impl_.epoch_and_round_ = nullptr;
  return temp;
}
inline ::injective::ocr::v1beta1::EpochAndRound* QueryLatestTransmissionDetailsResponse::_internal_mutable_epoch_and_round() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.epoch_and_round_ == nullptr) {
    auto* p = CreateMaybeMessage<::injective::ocr::v1beta1::EpochAndRound>(GetArenaForAllocation());
    _impl_.epoch_and_round_ = p;
  }
  return _impl_.epoch_and_round_;
}
inline ::injective::ocr::v1beta1::EpochAndRound* QueryLatestTransmissionDetailsResponse::mutable_epoch_and_round() {
  ::injective::ocr::v1beta1::EpochAndRound* _msg = _internal_mutable_epoch_and_round();
  // @@protoc_insertion_point(field_mutable:injective.ocr.v1beta1.QueryLatestTransmissionDetailsResponse.epoch_and_round)
  return _msg;
}
inline void QueryLatestTransmissionDetailsResponse::set_allocated_epoch_and_round(::injective::ocr::v1beta1::EpochAndRound* epoch_and_round) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.epoch_and_round_);
  }
  if (epoch_and_round) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(epoch_and_round));
    if (message_arena != submessage_arena) {
      epoch_and_round = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, epoch_and_round, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.epoch_and_round_ = epoch_and_round;
  // @@protoc_insertion_point(field_set_allocated:injective.ocr.v1beta1.QueryLatestTransmissionDetailsResponse.epoch_and_round)
}

// .injective.ocr.v1beta1.Transmission data = 3 [json_name = "data"];
inline bool QueryLatestTransmissionDetailsResponse::has_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.data_ != nullptr);
  return value;
}
inline const ::injective::ocr::v1beta1::Transmission& QueryLatestTransmissionDetailsResponse::_internal_data() const {
  const ::injective::ocr::v1beta1::Transmission* p = _impl_.data_;
  return p != nullptr ? *p : reinterpret_cast<const ::injective::ocr::v1beta1::Transmission&>(
      ::injective::ocr::v1beta1::_Transmission_default_instance_);
}
inline const ::injective::ocr::v1beta1::Transmission& QueryLatestTransmissionDetailsResponse::data() const {
  // @@protoc_insertion_point(field_get:injective.ocr.v1beta1.QueryLatestTransmissionDetailsResponse.data)
  return _internal_data();
}
inline void QueryLatestTransmissionDetailsResponse::unsafe_arena_set_allocated_data(
    ::injective::ocr::v1beta1::Transmission* data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.data_);
  }
  _impl_.data_ = data;
  if (data) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:injective.ocr.v1beta1.QueryLatestTransmissionDetailsResponse.data)
}
inline ::injective::ocr::v1beta1::Transmission* QueryLatestTransmissionDetailsResponse::release_data() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::injective::ocr::v1beta1::Transmission* temp = _impl_.data_;
  _impl_.data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::injective::ocr::v1beta1::Transmission* QueryLatestTransmissionDetailsResponse::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:injective.ocr.v1beta1.QueryLatestTransmissionDetailsResponse.data)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::injective::ocr::v1beta1::Transmission* temp = _impl_.data_;
  _impl_.data_ = nullptr;
  return temp;
}
inline ::injective::ocr::v1beta1::Transmission* QueryLatestTransmissionDetailsResponse::_internal_mutable_data() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.data_ == nullptr) {
    auto* p = CreateMaybeMessage<::injective::ocr::v1beta1::Transmission>(GetArenaForAllocation());
    _impl_.data_ = p;
  }
  return _impl_.data_;
}
inline ::injective::ocr::v1beta1::Transmission* QueryLatestTransmissionDetailsResponse::mutable_data() {
  ::injective::ocr::v1beta1::Transmission* _msg = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:injective.ocr.v1beta1.QueryLatestTransmissionDetailsResponse.data)
  return _msg;
}
inline void QueryLatestTransmissionDetailsResponse::set_allocated_data(::injective::ocr::v1beta1::Transmission* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.data_);
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data));
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.data_ = data;
  // @@protoc_insertion_point(field_set_allocated:injective.ocr.v1beta1.QueryLatestTransmissionDetailsResponse.data)
}

// -------------------------------------------------------------------

// QueryOwedAmountRequest

// string transmitter = 1 [json_name = "transmitter"];
inline void QueryOwedAmountRequest::clear_transmitter() {
  _impl_.transmitter_.ClearToEmpty();
}
inline const std::string& QueryOwedAmountRequest::transmitter() const {
  // @@protoc_insertion_point(field_get:injective.ocr.v1beta1.QueryOwedAmountRequest.transmitter)
  return _internal_transmitter();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryOwedAmountRequest::set_transmitter(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.transmitter_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.ocr.v1beta1.QueryOwedAmountRequest.transmitter)
}
inline std::string* QueryOwedAmountRequest::mutable_transmitter() {
  std::string* _s = _internal_mutable_transmitter();
  // @@protoc_insertion_point(field_mutable:injective.ocr.v1beta1.QueryOwedAmountRequest.transmitter)
  return _s;
}
inline const std::string& QueryOwedAmountRequest::_internal_transmitter() const {
  return _impl_.transmitter_.Get();
}
inline void QueryOwedAmountRequest::_internal_set_transmitter(const std::string& value) {
  ;


  _impl_.transmitter_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryOwedAmountRequest::_internal_mutable_transmitter() {
  ;
  return _impl_.transmitter_.Mutable( GetArenaForAllocation());
}
inline std::string* QueryOwedAmountRequest::release_transmitter() {
  // @@protoc_insertion_point(field_release:injective.ocr.v1beta1.QueryOwedAmountRequest.transmitter)
  return _impl_.transmitter_.Release();
}
inline void QueryOwedAmountRequest::set_allocated_transmitter(std::string* value) {
  _impl_.transmitter_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.transmitter_.IsDefault()) {
          _impl_.transmitter_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.ocr.v1beta1.QueryOwedAmountRequest.transmitter)
}

// -------------------------------------------------------------------

// QueryOwedAmountResponse

// .cosmos.base.v1beta1.Coin amount = 1 [json_name = "amount", (.gogoproto.nullable) = false];
inline bool QueryOwedAmountResponse::has_amount() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.amount_ != nullptr);
  return value;
}
inline const ::cosmos::base::v1beta1::Coin& QueryOwedAmountResponse::_internal_amount() const {
  const ::cosmos::base::v1beta1::Coin* p = _impl_.amount_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::v1beta1::Coin&>(
      ::cosmos::base::v1beta1::_Coin_default_instance_);
}
inline const ::cosmos::base::v1beta1::Coin& QueryOwedAmountResponse::amount() const {
  // @@protoc_insertion_point(field_get:injective.ocr.v1beta1.QueryOwedAmountResponse.amount)
  return _internal_amount();
}
inline void QueryOwedAmountResponse::unsafe_arena_set_allocated_amount(
    ::cosmos::base::v1beta1::Coin* amount) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.amount_);
  }
  _impl_.amount_ = amount;
  if (amount) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:injective.ocr.v1beta1.QueryOwedAmountResponse.amount)
}
inline ::cosmos::base::v1beta1::Coin* QueryOwedAmountResponse::release_amount() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::v1beta1::Coin* temp = _impl_.amount_;
  _impl_.amount_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::base::v1beta1::Coin* QueryOwedAmountResponse::unsafe_arena_release_amount() {
  // @@protoc_insertion_point(field_release:injective.ocr.v1beta1.QueryOwedAmountResponse.amount)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::v1beta1::Coin* temp = _impl_.amount_;
  _impl_.amount_ = nullptr;
  return temp;
}
inline ::cosmos::base::v1beta1::Coin* QueryOwedAmountResponse::_internal_mutable_amount() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.amount_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::base::v1beta1::Coin>(GetArenaForAllocation());
    _impl_.amount_ = p;
  }
  return _impl_.amount_;
}
inline ::cosmos::base::v1beta1::Coin* QueryOwedAmountResponse::mutable_amount() {
  ::cosmos::base::v1beta1::Coin* _msg = _internal_mutable_amount();
  // @@protoc_insertion_point(field_mutable:injective.ocr.v1beta1.QueryOwedAmountResponse.amount)
  return _msg;
}
inline void QueryOwedAmountResponse::set_allocated_amount(::cosmos::base::v1beta1::Coin* amount) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.amount_);
  }
  if (amount) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(amount));
    if (message_arena != submessage_arena) {
      amount = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, amount, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.amount_ = amount;
  // @@protoc_insertion_point(field_set_allocated:injective.ocr.v1beta1.QueryOwedAmountResponse.amount)
}

// -------------------------------------------------------------------

// QueryModuleStateRequest

// -------------------------------------------------------------------

// QueryModuleStateResponse

// .injective.ocr.v1beta1.GenesisState state = 1 [json_name = "state"];
inline bool QueryModuleStateResponse::has_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.state_ != nullptr);
  return value;
}
inline const ::injective::ocr::v1beta1::GenesisState& QueryModuleStateResponse::_internal_state() const {
  const ::injective::ocr::v1beta1::GenesisState* p = _impl_.state_;
  return p != nullptr ? *p : reinterpret_cast<const ::injective::ocr::v1beta1::GenesisState&>(
      ::injective::ocr::v1beta1::_GenesisState_default_instance_);
}
inline const ::injective::ocr::v1beta1::GenesisState& QueryModuleStateResponse::state() const {
  // @@protoc_insertion_point(field_get:injective.ocr.v1beta1.QueryModuleStateResponse.state)
  return _internal_state();
}
inline void QueryModuleStateResponse::unsafe_arena_set_allocated_state(
    ::injective::ocr::v1beta1::GenesisState* state) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.state_);
  }
  _impl_.state_ = state;
  if (state) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:injective.ocr.v1beta1.QueryModuleStateResponse.state)
}
inline ::injective::ocr::v1beta1::GenesisState* QueryModuleStateResponse::release_state() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::injective::ocr::v1beta1::GenesisState* temp = _impl_.state_;
  _impl_.state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::injective::ocr::v1beta1::GenesisState* QueryModuleStateResponse::unsafe_arena_release_state() {
  // @@protoc_insertion_point(field_release:injective.ocr.v1beta1.QueryModuleStateResponse.state)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::injective::ocr::v1beta1::GenesisState* temp = _impl_.state_;
  _impl_.state_ = nullptr;
  return temp;
}
inline ::injective::ocr::v1beta1::GenesisState* QueryModuleStateResponse::_internal_mutable_state() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.state_ == nullptr) {
    auto* p = CreateMaybeMessage<::injective::ocr::v1beta1::GenesisState>(GetArenaForAllocation());
    _impl_.state_ = p;
  }
  return _impl_.state_;
}
inline ::injective::ocr::v1beta1::GenesisState* QueryModuleStateResponse::mutable_state() {
  ::injective::ocr::v1beta1::GenesisState* _msg = _internal_mutable_state();
  // @@protoc_insertion_point(field_mutable:injective.ocr.v1beta1.QueryModuleStateResponse.state)
  return _msg;
}
inline void QueryModuleStateResponse::set_allocated_state(::injective::ocr::v1beta1::GenesisState* state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.state_);
  }
  if (state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(state));
    if (message_arena != submessage_arena) {
      state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.state_ = state;
  // @@protoc_insertion_point(field_set_allocated:injective.ocr.v1beta1.QueryModuleStateResponse.state)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1beta1
}  // namespace ocr
}  // namespace injective


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_injective_2focr_2fv1beta1_2fquery_2eproto_2epb_2eh

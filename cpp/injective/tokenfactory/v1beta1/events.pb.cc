// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: injective/tokenfactory/v1beta1/events.proto

#include "injective/tokenfactory/v1beta1/events.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace injective {
namespace tokenfactory {
namespace v1beta1 {
template <typename>
PROTOBUF_CONSTEXPR EventCreateTFDenom::EventCreateTFDenom(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.account_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.denom_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EventCreateTFDenomDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EventCreateTFDenomDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EventCreateTFDenomDefaultTypeInternal() {}
  union {
    EventCreateTFDenom _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EventCreateTFDenomDefaultTypeInternal _EventCreateTFDenom_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR EventMintTFDenom::EventMintTFDenom(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.recipient_address_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.amount_)*/nullptr} {}
struct EventMintTFDenomDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EventMintTFDenomDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EventMintTFDenomDefaultTypeInternal() {}
  union {
    EventMintTFDenom _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EventMintTFDenomDefaultTypeInternal _EventMintTFDenom_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR EventBurnTFDenom::EventBurnTFDenom(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.burner_address_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.amount_)*/nullptr} {}
struct EventBurnTFDenomDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EventBurnTFDenomDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EventBurnTFDenomDefaultTypeInternal() {}
  union {
    EventBurnTFDenom _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EventBurnTFDenomDefaultTypeInternal _EventBurnTFDenom_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR EventChangeTFAdmin::EventChangeTFAdmin(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.denom_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.new_admin_address_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EventChangeTFAdminDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EventChangeTFAdminDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EventChangeTFAdminDefaultTypeInternal() {}
  union {
    EventChangeTFAdmin _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EventChangeTFAdminDefaultTypeInternal _EventChangeTFAdmin_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR EventSetTFDenomMetadata::EventSetTFDenomMetadata(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.denom_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.metadata_)*/nullptr} {}
struct EventSetTFDenomMetadataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EventSetTFDenomMetadataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EventSetTFDenomMetadataDefaultTypeInternal() {}
  union {
    EventSetTFDenomMetadata _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EventSetTFDenomMetadataDefaultTypeInternal _EventSetTFDenomMetadata_default_instance_;
}  // namespace v1beta1
}  // namespace tokenfactory
}  // namespace injective
static ::_pb::Metadata file_level_metadata_injective_2ftokenfactory_2fv1beta1_2fevents_2eproto[5];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_injective_2ftokenfactory_2fv1beta1_2fevents_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_injective_2ftokenfactory_2fv1beta1_2fevents_2eproto = nullptr;
const ::uint32_t TableStruct_injective_2ftokenfactory_2fv1beta1_2fevents_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::tokenfactory::v1beta1::EventCreateTFDenom, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::tokenfactory::v1beta1::EventCreateTFDenom, _impl_.account_),
    PROTOBUF_FIELD_OFFSET(::injective::tokenfactory::v1beta1::EventCreateTFDenom, _impl_.denom_),
    PROTOBUF_FIELD_OFFSET(::injective::tokenfactory::v1beta1::EventMintTFDenom, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::injective::tokenfactory::v1beta1::EventMintTFDenom, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::tokenfactory::v1beta1::EventMintTFDenom, _impl_.recipient_address_),
    PROTOBUF_FIELD_OFFSET(::injective::tokenfactory::v1beta1::EventMintTFDenom, _impl_.amount_),
    ~0u,
    0,
    PROTOBUF_FIELD_OFFSET(::injective::tokenfactory::v1beta1::EventBurnTFDenom, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::injective::tokenfactory::v1beta1::EventBurnTFDenom, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::tokenfactory::v1beta1::EventBurnTFDenom, _impl_.burner_address_),
    PROTOBUF_FIELD_OFFSET(::injective::tokenfactory::v1beta1::EventBurnTFDenom, _impl_.amount_),
    ~0u,
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::tokenfactory::v1beta1::EventChangeTFAdmin, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::tokenfactory::v1beta1::EventChangeTFAdmin, _impl_.denom_),
    PROTOBUF_FIELD_OFFSET(::injective::tokenfactory::v1beta1::EventChangeTFAdmin, _impl_.new_admin_address_),
    PROTOBUF_FIELD_OFFSET(::injective::tokenfactory::v1beta1::EventSetTFDenomMetadata, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::injective::tokenfactory::v1beta1::EventSetTFDenomMetadata, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::tokenfactory::v1beta1::EventSetTFDenomMetadata, _impl_.denom_),
    PROTOBUF_FIELD_OFFSET(::injective::tokenfactory::v1beta1::EventSetTFDenomMetadata, _impl_.metadata_),
    ~0u,
    0,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::injective::tokenfactory::v1beta1::EventCreateTFDenom)},
        { 10, 20, -1, sizeof(::injective::tokenfactory::v1beta1::EventMintTFDenom)},
        { 22, 32, -1, sizeof(::injective::tokenfactory::v1beta1::EventBurnTFDenom)},
        { 34, -1, -1, sizeof(::injective::tokenfactory::v1beta1::EventChangeTFAdmin)},
        { 44, 54, -1, sizeof(::injective::tokenfactory::v1beta1::EventSetTFDenomMetadata)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::injective::tokenfactory::v1beta1::_EventCreateTFDenom_default_instance_._instance,
    &::injective::tokenfactory::v1beta1::_EventMintTFDenom_default_instance_._instance,
    &::injective::tokenfactory::v1beta1::_EventBurnTFDenom_default_instance_._instance,
    &::injective::tokenfactory::v1beta1::_EventChangeTFAdmin_default_instance_._instance,
    &::injective::tokenfactory::v1beta1::_EventSetTFDenomMetadata_default_instance_._instance,
};
const char descriptor_table_protodef_injective_2ftokenfactory_2fv1beta1_2fevents_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n+injective/tokenfactory/v1beta1/events."
    "proto\022\036injective.tokenfactory.v1beta1\032\024g"
    "ogoproto/gogo.proto\032\036cosmos/base/v1beta1"
    "/coin.proto\032\036cosmos/bank/v1beta1/bank.pr"
    "oto\0326injective/tokenfactory/v1beta1/auth"
    "orityMetadata.proto\"D\n\022EventCreateTFDeno"
    "m\022\030\n\007account\030\001 \001(\tR\007account\022\024\n\005denom\030\002 \001"
    "(\tR\005denom\"x\n\020EventMintTFDenom\022+\n\021recipie"
    "nt_address\030\001 \001(\tR\020recipientAddress\0227\n\006am"
    "ount\030\002 \001(\0132\031.cosmos.base.v1beta1.CoinB\004\310"
    "\336\037\000R\006amount\"r\n\020EventBurnTFDenom\022%\n\016burne"
    "r_address\030\001 \001(\tR\rburnerAddress\0227\n\006amount"
    "\030\002 \001(\0132\031.cosmos.base.v1beta1.CoinB\004\310\336\037\000R"
    "\006amount\"V\n\022EventChangeTFAdmin\022\024\n\005denom\030\001"
    " \001(\tR\005denom\022*\n\021new_admin_address\030\002 \001(\tR\017"
    "newAdminAddress\"p\n\027EventSetTFDenomMetada"
    "ta\022\024\n\005denom\030\001 \001(\tR\005denom\022\?\n\010metadata\030\002 \001"
    "(\0132\035.cosmos.bank.v1beta1.MetadataB\004\310\336\037\000R"
    "\010metadataB\237\002\n\"com.injective.tokenfactory"
    ".v1beta1B\013EventsProtoP\001ZRgithub.com/Inje"
    "ctiveLabs/injective-core/injective-chain"
    "/modules/tokenfactory/types\242\002\003ITX\252\002\036Inje"
    "ctive.Tokenfactory.V1beta1\312\002\036Injective\\T"
    "okenfactory\\V1beta1\342\002*Injective\\Tokenfac"
    "tory\\V1beta1\\GPBMetadata\352\002 Injective::To"
    "kenfactory::V1beta1b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_injective_2ftokenfactory_2fv1beta1_2fevents_2eproto_deps[4] =
    {
        &::descriptor_table_cosmos_2fbank_2fv1beta1_2fbank_2eproto,
        &::descriptor_table_cosmos_2fbase_2fv1beta1_2fcoin_2eproto,
        &::descriptor_table_gogoproto_2fgogo_2eproto,
        &::descriptor_table_injective_2ftokenfactory_2fv1beta1_2fauthorityMetadata_2eproto,
};
static ::absl::once_flag descriptor_table_injective_2ftokenfactory_2fv1beta1_2fevents_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_injective_2ftokenfactory_2fv1beta1_2fevents_2eproto = {
    false,
    false,
    1027,
    descriptor_table_protodef_injective_2ftokenfactory_2fv1beta1_2fevents_2eproto,
    "injective/tokenfactory/v1beta1/events.proto",
    &descriptor_table_injective_2ftokenfactory_2fv1beta1_2fevents_2eproto_once,
    descriptor_table_injective_2ftokenfactory_2fv1beta1_2fevents_2eproto_deps,
    4,
    5,
    schemas,
    file_default_instances,
    TableStruct_injective_2ftokenfactory_2fv1beta1_2fevents_2eproto::offsets,
    file_level_metadata_injective_2ftokenfactory_2fv1beta1_2fevents_2eproto,
    file_level_enum_descriptors_injective_2ftokenfactory_2fv1beta1_2fevents_2eproto,
    file_level_service_descriptors_injective_2ftokenfactory_2fv1beta1_2fevents_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_injective_2ftokenfactory_2fv1beta1_2fevents_2eproto_getter() {
  return &descriptor_table_injective_2ftokenfactory_2fv1beta1_2fevents_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_injective_2ftokenfactory_2fv1beta1_2fevents_2eproto(&descriptor_table_injective_2ftokenfactory_2fv1beta1_2fevents_2eproto);
namespace injective {
namespace tokenfactory {
namespace v1beta1 {
// ===================================================================

class EventCreateTFDenom::_Internal {
 public:
};

EventCreateTFDenom::EventCreateTFDenom(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.tokenfactory.v1beta1.EventCreateTFDenom)
}
EventCreateTFDenom::EventCreateTFDenom(const EventCreateTFDenom& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EventCreateTFDenom* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.account_) {}

    , decltype(_impl_.denom_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.account_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.account_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_account().empty()) {
    _this->_impl_.account_.Set(from._internal_account(), _this->GetArenaForAllocation());
  }
  _impl_.denom_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.denom_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_denom().empty()) {
    _this->_impl_.denom_.Set(from._internal_denom(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:injective.tokenfactory.v1beta1.EventCreateTFDenom)
}

inline void EventCreateTFDenom::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.account_) {}

    , decltype(_impl_.denom_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.account_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.account_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.denom_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.denom_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

EventCreateTFDenom::~EventCreateTFDenom() {
  // @@protoc_insertion_point(destructor:injective.tokenfactory.v1beta1.EventCreateTFDenom)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EventCreateTFDenom::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.account_.Destroy();
  _impl_.denom_.Destroy();
}

void EventCreateTFDenom::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EventCreateTFDenom::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.tokenfactory.v1beta1.EventCreateTFDenom)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.account_.ClearToEmpty();
  _impl_.denom_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EventCreateTFDenom::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string account = 1 [json_name = "account"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_account();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.tokenfactory.v1beta1.EventCreateTFDenom.account"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string denom = 2 [json_name = "denom"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_denom();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.tokenfactory.v1beta1.EventCreateTFDenom.denom"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* EventCreateTFDenom::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.tokenfactory.v1beta1.EventCreateTFDenom)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string account = 1 [json_name = "account"];
  if (!this->_internal_account().empty()) {
    const std::string& _s = this->_internal_account();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.tokenfactory.v1beta1.EventCreateTFDenom.account");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string denom = 2 [json_name = "denom"];
  if (!this->_internal_denom().empty()) {
    const std::string& _s = this->_internal_denom();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.tokenfactory.v1beta1.EventCreateTFDenom.denom");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.tokenfactory.v1beta1.EventCreateTFDenom)
  return target;
}

::size_t EventCreateTFDenom::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.tokenfactory.v1beta1.EventCreateTFDenom)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string account = 1 [json_name = "account"];
  if (!this->_internal_account().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_account());
  }

  // string denom = 2 [json_name = "denom"];
  if (!this->_internal_denom().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_denom());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EventCreateTFDenom::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EventCreateTFDenom::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EventCreateTFDenom::GetClassData() const { return &_class_data_; }


void EventCreateTFDenom::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EventCreateTFDenom*>(&to_msg);
  auto& from = static_cast<const EventCreateTFDenom&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.tokenfactory.v1beta1.EventCreateTFDenom)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_account().empty()) {
    _this->_internal_set_account(from._internal_account());
  }
  if (!from._internal_denom().empty()) {
    _this->_internal_set_denom(from._internal_denom());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EventCreateTFDenom::CopyFrom(const EventCreateTFDenom& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.tokenfactory.v1beta1.EventCreateTFDenom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventCreateTFDenom::IsInitialized() const {
  return true;
}

void EventCreateTFDenom::InternalSwap(EventCreateTFDenom* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.account_, lhs_arena,
                                       &other->_impl_.account_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.denom_, lhs_arena,
                                       &other->_impl_.denom_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata EventCreateTFDenom::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2ftokenfactory_2fv1beta1_2fevents_2eproto_getter, &descriptor_table_injective_2ftokenfactory_2fv1beta1_2fevents_2eproto_once,
      file_level_metadata_injective_2ftokenfactory_2fv1beta1_2fevents_2eproto[0]);
}
// ===================================================================

class EventMintTFDenom::_Internal {
 public:
  using HasBits = decltype(std::declval<EventMintTFDenom>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(EventMintTFDenom, _impl_._has_bits_);
  static const ::cosmos::base::v1beta1::Coin& amount(const EventMintTFDenom* msg);
  static void set_has_amount(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::cosmos::base::v1beta1::Coin&
EventMintTFDenom::_Internal::amount(const EventMintTFDenom* msg) {
  return *msg->_impl_.amount_;
}
void EventMintTFDenom::clear_amount() {
  if (_impl_.amount_ != nullptr) _impl_.amount_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
EventMintTFDenom::EventMintTFDenom(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.tokenfactory.v1beta1.EventMintTFDenom)
}
EventMintTFDenom::EventMintTFDenom(const EventMintTFDenom& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EventMintTFDenom* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.recipient_address_) {}

    , decltype(_impl_.amount_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.recipient_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.recipient_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_recipient_address().empty()) {
    _this->_impl_.recipient_address_.Set(from._internal_recipient_address(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.amount_ = new ::cosmos::base::v1beta1::Coin(*from._impl_.amount_);
  }
  // @@protoc_insertion_point(copy_constructor:injective.tokenfactory.v1beta1.EventMintTFDenom)
}

inline void EventMintTFDenom::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.recipient_address_) {}

    , decltype(_impl_.amount_){nullptr}
  };
  _impl_.recipient_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.recipient_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

EventMintTFDenom::~EventMintTFDenom() {
  // @@protoc_insertion_point(destructor:injective.tokenfactory.v1beta1.EventMintTFDenom)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EventMintTFDenom::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.recipient_address_.Destroy();
  if (this != internal_default_instance()) delete _impl_.amount_;
}

void EventMintTFDenom::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EventMintTFDenom::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.tokenfactory.v1beta1.EventMintTFDenom)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.recipient_address_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.amount_ != nullptr);
    _impl_.amount_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EventMintTFDenom::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string recipient_address = 1 [json_name = "recipientAddress"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_recipient_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.tokenfactory.v1beta1.EventMintTFDenom.recipient_address"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .cosmos.base.v1beta1.Coin amount = 2 [json_name = "amount", (.gogoproto.nullable) = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_amount(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* EventMintTFDenom::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.tokenfactory.v1beta1.EventMintTFDenom)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string recipient_address = 1 [json_name = "recipientAddress"];
  if (!this->_internal_recipient_address().empty()) {
    const std::string& _s = this->_internal_recipient_address();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.tokenfactory.v1beta1.EventMintTFDenom.recipient_address");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .cosmos.base.v1beta1.Coin amount = 2 [json_name = "amount", (.gogoproto.nullable) = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::amount(this),
        _Internal::amount(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.tokenfactory.v1beta1.EventMintTFDenom)
  return target;
}

::size_t EventMintTFDenom::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.tokenfactory.v1beta1.EventMintTFDenom)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string recipient_address = 1 [json_name = "recipientAddress"];
  if (!this->_internal_recipient_address().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_recipient_address());
  }

  // .cosmos.base.v1beta1.Coin amount = 2 [json_name = "amount", (.gogoproto.nullable) = false];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.amount_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EventMintTFDenom::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EventMintTFDenom::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EventMintTFDenom::GetClassData() const { return &_class_data_; }


void EventMintTFDenom::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EventMintTFDenom*>(&to_msg);
  auto& from = static_cast<const EventMintTFDenom&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.tokenfactory.v1beta1.EventMintTFDenom)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_recipient_address().empty()) {
    _this->_internal_set_recipient_address(from._internal_recipient_address());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_amount()->::cosmos::base::v1beta1::Coin::MergeFrom(
        from._internal_amount());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EventMintTFDenom::CopyFrom(const EventMintTFDenom& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.tokenfactory.v1beta1.EventMintTFDenom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventMintTFDenom::IsInitialized() const {
  return true;
}

void EventMintTFDenom::InternalSwap(EventMintTFDenom* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.recipient_address_, lhs_arena,
                                       &other->_impl_.recipient_address_, rhs_arena);
  swap(_impl_.amount_, other->_impl_.amount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EventMintTFDenom::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2ftokenfactory_2fv1beta1_2fevents_2eproto_getter, &descriptor_table_injective_2ftokenfactory_2fv1beta1_2fevents_2eproto_once,
      file_level_metadata_injective_2ftokenfactory_2fv1beta1_2fevents_2eproto[1]);
}
// ===================================================================

class EventBurnTFDenom::_Internal {
 public:
  using HasBits = decltype(std::declval<EventBurnTFDenom>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(EventBurnTFDenom, _impl_._has_bits_);
  static const ::cosmos::base::v1beta1::Coin& amount(const EventBurnTFDenom* msg);
  static void set_has_amount(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::cosmos::base::v1beta1::Coin&
EventBurnTFDenom::_Internal::amount(const EventBurnTFDenom* msg) {
  return *msg->_impl_.amount_;
}
void EventBurnTFDenom::clear_amount() {
  if (_impl_.amount_ != nullptr) _impl_.amount_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
EventBurnTFDenom::EventBurnTFDenom(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.tokenfactory.v1beta1.EventBurnTFDenom)
}
EventBurnTFDenom::EventBurnTFDenom(const EventBurnTFDenom& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EventBurnTFDenom* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.burner_address_) {}

    , decltype(_impl_.amount_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.burner_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.burner_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_burner_address().empty()) {
    _this->_impl_.burner_address_.Set(from._internal_burner_address(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.amount_ = new ::cosmos::base::v1beta1::Coin(*from._impl_.amount_);
  }
  // @@protoc_insertion_point(copy_constructor:injective.tokenfactory.v1beta1.EventBurnTFDenom)
}

inline void EventBurnTFDenom::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.burner_address_) {}

    , decltype(_impl_.amount_){nullptr}
  };
  _impl_.burner_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.burner_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

EventBurnTFDenom::~EventBurnTFDenom() {
  // @@protoc_insertion_point(destructor:injective.tokenfactory.v1beta1.EventBurnTFDenom)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EventBurnTFDenom::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.burner_address_.Destroy();
  if (this != internal_default_instance()) delete _impl_.amount_;
}

void EventBurnTFDenom::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EventBurnTFDenom::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.tokenfactory.v1beta1.EventBurnTFDenom)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.burner_address_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.amount_ != nullptr);
    _impl_.amount_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EventBurnTFDenom::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string burner_address = 1 [json_name = "burnerAddress"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_burner_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.tokenfactory.v1beta1.EventBurnTFDenom.burner_address"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .cosmos.base.v1beta1.Coin amount = 2 [json_name = "amount", (.gogoproto.nullable) = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_amount(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* EventBurnTFDenom::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.tokenfactory.v1beta1.EventBurnTFDenom)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string burner_address = 1 [json_name = "burnerAddress"];
  if (!this->_internal_burner_address().empty()) {
    const std::string& _s = this->_internal_burner_address();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.tokenfactory.v1beta1.EventBurnTFDenom.burner_address");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .cosmos.base.v1beta1.Coin amount = 2 [json_name = "amount", (.gogoproto.nullable) = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::amount(this),
        _Internal::amount(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.tokenfactory.v1beta1.EventBurnTFDenom)
  return target;
}

::size_t EventBurnTFDenom::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.tokenfactory.v1beta1.EventBurnTFDenom)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string burner_address = 1 [json_name = "burnerAddress"];
  if (!this->_internal_burner_address().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_burner_address());
  }

  // .cosmos.base.v1beta1.Coin amount = 2 [json_name = "amount", (.gogoproto.nullable) = false];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.amount_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EventBurnTFDenom::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EventBurnTFDenom::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EventBurnTFDenom::GetClassData() const { return &_class_data_; }


void EventBurnTFDenom::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EventBurnTFDenom*>(&to_msg);
  auto& from = static_cast<const EventBurnTFDenom&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.tokenfactory.v1beta1.EventBurnTFDenom)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_burner_address().empty()) {
    _this->_internal_set_burner_address(from._internal_burner_address());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_amount()->::cosmos::base::v1beta1::Coin::MergeFrom(
        from._internal_amount());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EventBurnTFDenom::CopyFrom(const EventBurnTFDenom& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.tokenfactory.v1beta1.EventBurnTFDenom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventBurnTFDenom::IsInitialized() const {
  return true;
}

void EventBurnTFDenom::InternalSwap(EventBurnTFDenom* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.burner_address_, lhs_arena,
                                       &other->_impl_.burner_address_, rhs_arena);
  swap(_impl_.amount_, other->_impl_.amount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EventBurnTFDenom::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2ftokenfactory_2fv1beta1_2fevents_2eproto_getter, &descriptor_table_injective_2ftokenfactory_2fv1beta1_2fevents_2eproto_once,
      file_level_metadata_injective_2ftokenfactory_2fv1beta1_2fevents_2eproto[2]);
}
// ===================================================================

class EventChangeTFAdmin::_Internal {
 public:
};

EventChangeTFAdmin::EventChangeTFAdmin(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.tokenfactory.v1beta1.EventChangeTFAdmin)
}
EventChangeTFAdmin::EventChangeTFAdmin(const EventChangeTFAdmin& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EventChangeTFAdmin* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.denom_) {}

    , decltype(_impl_.new_admin_address_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.denom_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.denom_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_denom().empty()) {
    _this->_impl_.denom_.Set(from._internal_denom(), _this->GetArenaForAllocation());
  }
  _impl_.new_admin_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.new_admin_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_new_admin_address().empty()) {
    _this->_impl_.new_admin_address_.Set(from._internal_new_admin_address(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:injective.tokenfactory.v1beta1.EventChangeTFAdmin)
}

inline void EventChangeTFAdmin::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.denom_) {}

    , decltype(_impl_.new_admin_address_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.denom_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.denom_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.new_admin_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.new_admin_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

EventChangeTFAdmin::~EventChangeTFAdmin() {
  // @@protoc_insertion_point(destructor:injective.tokenfactory.v1beta1.EventChangeTFAdmin)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EventChangeTFAdmin::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.denom_.Destroy();
  _impl_.new_admin_address_.Destroy();
}

void EventChangeTFAdmin::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EventChangeTFAdmin::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.tokenfactory.v1beta1.EventChangeTFAdmin)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.denom_.ClearToEmpty();
  _impl_.new_admin_address_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EventChangeTFAdmin::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string denom = 1 [json_name = "denom"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_denom();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.tokenfactory.v1beta1.EventChangeTFAdmin.denom"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string new_admin_address = 2 [json_name = "newAdminAddress"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_new_admin_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.tokenfactory.v1beta1.EventChangeTFAdmin.new_admin_address"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* EventChangeTFAdmin::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.tokenfactory.v1beta1.EventChangeTFAdmin)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string denom = 1 [json_name = "denom"];
  if (!this->_internal_denom().empty()) {
    const std::string& _s = this->_internal_denom();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.tokenfactory.v1beta1.EventChangeTFAdmin.denom");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string new_admin_address = 2 [json_name = "newAdminAddress"];
  if (!this->_internal_new_admin_address().empty()) {
    const std::string& _s = this->_internal_new_admin_address();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.tokenfactory.v1beta1.EventChangeTFAdmin.new_admin_address");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.tokenfactory.v1beta1.EventChangeTFAdmin)
  return target;
}

::size_t EventChangeTFAdmin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.tokenfactory.v1beta1.EventChangeTFAdmin)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string denom = 1 [json_name = "denom"];
  if (!this->_internal_denom().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_denom());
  }

  // string new_admin_address = 2 [json_name = "newAdminAddress"];
  if (!this->_internal_new_admin_address().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_new_admin_address());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EventChangeTFAdmin::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EventChangeTFAdmin::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EventChangeTFAdmin::GetClassData() const { return &_class_data_; }


void EventChangeTFAdmin::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EventChangeTFAdmin*>(&to_msg);
  auto& from = static_cast<const EventChangeTFAdmin&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.tokenfactory.v1beta1.EventChangeTFAdmin)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_denom().empty()) {
    _this->_internal_set_denom(from._internal_denom());
  }
  if (!from._internal_new_admin_address().empty()) {
    _this->_internal_set_new_admin_address(from._internal_new_admin_address());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EventChangeTFAdmin::CopyFrom(const EventChangeTFAdmin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.tokenfactory.v1beta1.EventChangeTFAdmin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventChangeTFAdmin::IsInitialized() const {
  return true;
}

void EventChangeTFAdmin::InternalSwap(EventChangeTFAdmin* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.denom_, lhs_arena,
                                       &other->_impl_.denom_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.new_admin_address_, lhs_arena,
                                       &other->_impl_.new_admin_address_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata EventChangeTFAdmin::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2ftokenfactory_2fv1beta1_2fevents_2eproto_getter, &descriptor_table_injective_2ftokenfactory_2fv1beta1_2fevents_2eproto_once,
      file_level_metadata_injective_2ftokenfactory_2fv1beta1_2fevents_2eproto[3]);
}
// ===================================================================

class EventSetTFDenomMetadata::_Internal {
 public:
  using HasBits = decltype(std::declval<EventSetTFDenomMetadata>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(EventSetTFDenomMetadata, _impl_._has_bits_);
  static const ::cosmos::bank::v1beta1::Metadata& metadata(const EventSetTFDenomMetadata* msg);
  static void set_has_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::cosmos::bank::v1beta1::Metadata&
EventSetTFDenomMetadata::_Internal::metadata(const EventSetTFDenomMetadata* msg) {
  return *msg->_impl_.metadata_;
}
void EventSetTFDenomMetadata::clear_metadata() {
  if (_impl_.metadata_ != nullptr) _impl_.metadata_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
EventSetTFDenomMetadata::EventSetTFDenomMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.tokenfactory.v1beta1.EventSetTFDenomMetadata)
}
EventSetTFDenomMetadata::EventSetTFDenomMetadata(const EventSetTFDenomMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EventSetTFDenomMetadata* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.denom_) {}

    , decltype(_impl_.metadata_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.denom_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.denom_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_denom().empty()) {
    _this->_impl_.denom_.Set(from._internal_denom(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.metadata_ = new ::cosmos::bank::v1beta1::Metadata(*from._impl_.metadata_);
  }
  // @@protoc_insertion_point(copy_constructor:injective.tokenfactory.v1beta1.EventSetTFDenomMetadata)
}

inline void EventSetTFDenomMetadata::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.denom_) {}

    , decltype(_impl_.metadata_){nullptr}
  };
  _impl_.denom_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.denom_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

EventSetTFDenomMetadata::~EventSetTFDenomMetadata() {
  // @@protoc_insertion_point(destructor:injective.tokenfactory.v1beta1.EventSetTFDenomMetadata)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EventSetTFDenomMetadata::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.denom_.Destroy();
  if (this != internal_default_instance()) delete _impl_.metadata_;
}

void EventSetTFDenomMetadata::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EventSetTFDenomMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.tokenfactory.v1beta1.EventSetTFDenomMetadata)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.denom_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.metadata_ != nullptr);
    _impl_.metadata_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EventSetTFDenomMetadata::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string denom = 1 [json_name = "denom"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_denom();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.tokenfactory.v1beta1.EventSetTFDenomMetadata.denom"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .cosmos.bank.v1beta1.Metadata metadata = 2 [json_name = "metadata", (.gogoproto.nullable) = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* EventSetTFDenomMetadata::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.tokenfactory.v1beta1.EventSetTFDenomMetadata)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string denom = 1 [json_name = "denom"];
  if (!this->_internal_denom().empty()) {
    const std::string& _s = this->_internal_denom();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.tokenfactory.v1beta1.EventSetTFDenomMetadata.denom");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .cosmos.bank.v1beta1.Metadata metadata = 2 [json_name = "metadata", (.gogoproto.nullable) = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::metadata(this),
        _Internal::metadata(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.tokenfactory.v1beta1.EventSetTFDenomMetadata)
  return target;
}

::size_t EventSetTFDenomMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.tokenfactory.v1beta1.EventSetTFDenomMetadata)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string denom = 1 [json_name = "denom"];
  if (!this->_internal_denom().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_denom());
  }

  // .cosmos.bank.v1beta1.Metadata metadata = 2 [json_name = "metadata", (.gogoproto.nullable) = false];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.metadata_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EventSetTFDenomMetadata::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EventSetTFDenomMetadata::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EventSetTFDenomMetadata::GetClassData() const { return &_class_data_; }


void EventSetTFDenomMetadata::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EventSetTFDenomMetadata*>(&to_msg);
  auto& from = static_cast<const EventSetTFDenomMetadata&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.tokenfactory.v1beta1.EventSetTFDenomMetadata)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_denom().empty()) {
    _this->_internal_set_denom(from._internal_denom());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_metadata()->::cosmos::bank::v1beta1::Metadata::MergeFrom(
        from._internal_metadata());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EventSetTFDenomMetadata::CopyFrom(const EventSetTFDenomMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.tokenfactory.v1beta1.EventSetTFDenomMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventSetTFDenomMetadata::IsInitialized() const {
  return true;
}

void EventSetTFDenomMetadata::InternalSwap(EventSetTFDenomMetadata* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.denom_, lhs_arena,
                                       &other->_impl_.denom_, rhs_arena);
  swap(_impl_.metadata_, other->_impl_.metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EventSetTFDenomMetadata::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2ftokenfactory_2fv1beta1_2fevents_2eproto_getter, &descriptor_table_injective_2ftokenfactory_2fv1beta1_2fevents_2eproto_once,
      file_level_metadata_injective_2ftokenfactory_2fv1beta1_2fevents_2eproto[4]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1beta1
}  // namespace tokenfactory
}  // namespace injective
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::injective::tokenfactory::v1beta1::EventCreateTFDenom*
Arena::CreateMaybeMessage< ::injective::tokenfactory::v1beta1::EventCreateTFDenom >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::tokenfactory::v1beta1::EventCreateTFDenom >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::tokenfactory::v1beta1::EventMintTFDenom*
Arena::CreateMaybeMessage< ::injective::tokenfactory::v1beta1::EventMintTFDenom >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::tokenfactory::v1beta1::EventMintTFDenom >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::tokenfactory::v1beta1::EventBurnTFDenom*
Arena::CreateMaybeMessage< ::injective::tokenfactory::v1beta1::EventBurnTFDenom >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::tokenfactory::v1beta1::EventBurnTFDenom >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::tokenfactory::v1beta1::EventChangeTFAdmin*
Arena::CreateMaybeMessage< ::injective::tokenfactory::v1beta1::EventChangeTFAdmin >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::tokenfactory::v1beta1::EventChangeTFAdmin >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::tokenfactory::v1beta1::EventSetTFDenomMetadata*
Arena::CreateMaybeMessage< ::injective::tokenfactory::v1beta1::EventSetTFDenomMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::tokenfactory::v1beta1::EventSetTFDenomMetadata >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

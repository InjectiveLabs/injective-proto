// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: injective/tokenfactory/v1beta1/tx.proto

#include "injective/tokenfactory/v1beta1/tx.pb.h"
#include "injective/tokenfactory/v1beta1/tx.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace injective {
namespace tokenfactory {
namespace v1beta1 {

static const char* Msg_method_names[] = {
  "/injective.tokenfactory.v1beta1.Msg/CreateDenom",
  "/injective.tokenfactory.v1beta1.Msg/Mint",
  "/injective.tokenfactory.v1beta1.Msg/Burn",
  "/injective.tokenfactory.v1beta1.Msg/ChangeAdmin",
  "/injective.tokenfactory.v1beta1.Msg/SetDenomMetadata",
  "/injective.tokenfactory.v1beta1.Msg/UpdateParams",
};

std::unique_ptr< Msg::Stub> Msg::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Msg::Stub> stub(new Msg::Stub(channel, options));
  return stub;
}

Msg::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_CreateDenom_(Msg_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Mint_(Msg_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Burn_(Msg_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ChangeAdmin_(Msg_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetDenomMetadata_(Msg_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateParams_(Msg_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Msg::Stub::CreateDenom(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::MsgCreateDenom& request, ::injective::tokenfactory::v1beta1::MsgCreateDenomResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::tokenfactory::v1beta1::MsgCreateDenom, ::injective::tokenfactory::v1beta1::MsgCreateDenomResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateDenom_, context, request, response);
}

void Msg::Stub::async::CreateDenom(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::MsgCreateDenom* request, ::injective::tokenfactory::v1beta1::MsgCreateDenomResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::tokenfactory::v1beta1::MsgCreateDenom, ::injective::tokenfactory::v1beta1::MsgCreateDenomResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateDenom_, context, request, response, std::move(f));
}

void Msg::Stub::async::CreateDenom(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::MsgCreateDenom* request, ::injective::tokenfactory::v1beta1::MsgCreateDenomResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateDenom_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::tokenfactory::v1beta1::MsgCreateDenomResponse>* Msg::Stub::PrepareAsyncCreateDenomRaw(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::MsgCreateDenom& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::tokenfactory::v1beta1::MsgCreateDenomResponse, ::injective::tokenfactory::v1beta1::MsgCreateDenom, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateDenom_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::tokenfactory::v1beta1::MsgCreateDenomResponse>* Msg::Stub::AsyncCreateDenomRaw(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::MsgCreateDenom& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateDenomRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Msg::Stub::Mint(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::MsgMint& request, ::injective::tokenfactory::v1beta1::MsgMintResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::tokenfactory::v1beta1::MsgMint, ::injective::tokenfactory::v1beta1::MsgMintResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Mint_, context, request, response);
}

void Msg::Stub::async::Mint(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::MsgMint* request, ::injective::tokenfactory::v1beta1::MsgMintResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::tokenfactory::v1beta1::MsgMint, ::injective::tokenfactory::v1beta1::MsgMintResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Mint_, context, request, response, std::move(f));
}

void Msg::Stub::async::Mint(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::MsgMint* request, ::injective::tokenfactory::v1beta1::MsgMintResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Mint_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::tokenfactory::v1beta1::MsgMintResponse>* Msg::Stub::PrepareAsyncMintRaw(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::MsgMint& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::tokenfactory::v1beta1::MsgMintResponse, ::injective::tokenfactory::v1beta1::MsgMint, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Mint_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::tokenfactory::v1beta1::MsgMintResponse>* Msg::Stub::AsyncMintRaw(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::MsgMint& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncMintRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Msg::Stub::Burn(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::MsgBurn& request, ::injective::tokenfactory::v1beta1::MsgBurnResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::tokenfactory::v1beta1::MsgBurn, ::injective::tokenfactory::v1beta1::MsgBurnResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Burn_, context, request, response);
}

void Msg::Stub::async::Burn(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::MsgBurn* request, ::injective::tokenfactory::v1beta1::MsgBurnResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::tokenfactory::v1beta1::MsgBurn, ::injective::tokenfactory::v1beta1::MsgBurnResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Burn_, context, request, response, std::move(f));
}

void Msg::Stub::async::Burn(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::MsgBurn* request, ::injective::tokenfactory::v1beta1::MsgBurnResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Burn_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::tokenfactory::v1beta1::MsgBurnResponse>* Msg::Stub::PrepareAsyncBurnRaw(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::MsgBurn& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::tokenfactory::v1beta1::MsgBurnResponse, ::injective::tokenfactory::v1beta1::MsgBurn, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Burn_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::tokenfactory::v1beta1::MsgBurnResponse>* Msg::Stub::AsyncBurnRaw(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::MsgBurn& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncBurnRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Msg::Stub::ChangeAdmin(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::MsgChangeAdmin& request, ::injective::tokenfactory::v1beta1::MsgChangeAdminResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::tokenfactory::v1beta1::MsgChangeAdmin, ::injective::tokenfactory::v1beta1::MsgChangeAdminResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ChangeAdmin_, context, request, response);
}

void Msg::Stub::async::ChangeAdmin(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::MsgChangeAdmin* request, ::injective::tokenfactory::v1beta1::MsgChangeAdminResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::tokenfactory::v1beta1::MsgChangeAdmin, ::injective::tokenfactory::v1beta1::MsgChangeAdminResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ChangeAdmin_, context, request, response, std::move(f));
}

void Msg::Stub::async::ChangeAdmin(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::MsgChangeAdmin* request, ::injective::tokenfactory::v1beta1::MsgChangeAdminResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ChangeAdmin_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::tokenfactory::v1beta1::MsgChangeAdminResponse>* Msg::Stub::PrepareAsyncChangeAdminRaw(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::MsgChangeAdmin& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::tokenfactory::v1beta1::MsgChangeAdminResponse, ::injective::tokenfactory::v1beta1::MsgChangeAdmin, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ChangeAdmin_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::tokenfactory::v1beta1::MsgChangeAdminResponse>* Msg::Stub::AsyncChangeAdminRaw(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::MsgChangeAdmin& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncChangeAdminRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Msg::Stub::SetDenomMetadata(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::MsgSetDenomMetadata& request, ::injective::tokenfactory::v1beta1::MsgSetDenomMetadataResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::tokenfactory::v1beta1::MsgSetDenomMetadata, ::injective::tokenfactory::v1beta1::MsgSetDenomMetadataResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetDenomMetadata_, context, request, response);
}

void Msg::Stub::async::SetDenomMetadata(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::MsgSetDenomMetadata* request, ::injective::tokenfactory::v1beta1::MsgSetDenomMetadataResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::tokenfactory::v1beta1::MsgSetDenomMetadata, ::injective::tokenfactory::v1beta1::MsgSetDenomMetadataResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetDenomMetadata_, context, request, response, std::move(f));
}

void Msg::Stub::async::SetDenomMetadata(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::MsgSetDenomMetadata* request, ::injective::tokenfactory::v1beta1::MsgSetDenomMetadataResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetDenomMetadata_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::tokenfactory::v1beta1::MsgSetDenomMetadataResponse>* Msg::Stub::PrepareAsyncSetDenomMetadataRaw(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::MsgSetDenomMetadata& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::tokenfactory::v1beta1::MsgSetDenomMetadataResponse, ::injective::tokenfactory::v1beta1::MsgSetDenomMetadata, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetDenomMetadata_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::tokenfactory::v1beta1::MsgSetDenomMetadataResponse>* Msg::Stub::AsyncSetDenomMetadataRaw(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::MsgSetDenomMetadata& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetDenomMetadataRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Msg::Stub::UpdateParams(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::MsgUpdateParams& request, ::injective::tokenfactory::v1beta1::MsgUpdateParamsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::tokenfactory::v1beta1::MsgUpdateParams, ::injective::tokenfactory::v1beta1::MsgUpdateParamsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateParams_, context, request, response);
}

void Msg::Stub::async::UpdateParams(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::MsgUpdateParams* request, ::injective::tokenfactory::v1beta1::MsgUpdateParamsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::tokenfactory::v1beta1::MsgUpdateParams, ::injective::tokenfactory::v1beta1::MsgUpdateParamsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateParams_, context, request, response, std::move(f));
}

void Msg::Stub::async::UpdateParams(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::MsgUpdateParams* request, ::injective::tokenfactory::v1beta1::MsgUpdateParamsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateParams_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::tokenfactory::v1beta1::MsgUpdateParamsResponse>* Msg::Stub::PrepareAsyncUpdateParamsRaw(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::MsgUpdateParams& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::tokenfactory::v1beta1::MsgUpdateParamsResponse, ::injective::tokenfactory::v1beta1::MsgUpdateParams, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateParams_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::tokenfactory::v1beta1::MsgUpdateParamsResponse>* Msg::Stub::AsyncUpdateParamsRaw(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::MsgUpdateParams& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateParamsRaw(context, request, cq);
  result->StartCall();
  return result;
}

Msg::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Msg_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Msg::Service, ::injective::tokenfactory::v1beta1::MsgCreateDenom, ::injective::tokenfactory::v1beta1::MsgCreateDenomResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Msg::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::tokenfactory::v1beta1::MsgCreateDenom* req,
             ::injective::tokenfactory::v1beta1::MsgCreateDenomResponse* resp) {
               return service->CreateDenom(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Msg_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Msg::Service, ::injective::tokenfactory::v1beta1::MsgMint, ::injective::tokenfactory::v1beta1::MsgMintResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Msg::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::tokenfactory::v1beta1::MsgMint* req,
             ::injective::tokenfactory::v1beta1::MsgMintResponse* resp) {
               return service->Mint(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Msg_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Msg::Service, ::injective::tokenfactory::v1beta1::MsgBurn, ::injective::tokenfactory::v1beta1::MsgBurnResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Msg::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::tokenfactory::v1beta1::MsgBurn* req,
             ::injective::tokenfactory::v1beta1::MsgBurnResponse* resp) {
               return service->Burn(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Msg_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Msg::Service, ::injective::tokenfactory::v1beta1::MsgChangeAdmin, ::injective::tokenfactory::v1beta1::MsgChangeAdminResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Msg::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::tokenfactory::v1beta1::MsgChangeAdmin* req,
             ::injective::tokenfactory::v1beta1::MsgChangeAdminResponse* resp) {
               return service->ChangeAdmin(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Msg_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Msg::Service, ::injective::tokenfactory::v1beta1::MsgSetDenomMetadata, ::injective::tokenfactory::v1beta1::MsgSetDenomMetadataResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Msg::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::tokenfactory::v1beta1::MsgSetDenomMetadata* req,
             ::injective::tokenfactory::v1beta1::MsgSetDenomMetadataResponse* resp) {
               return service->SetDenomMetadata(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Msg_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Msg::Service, ::injective::tokenfactory::v1beta1::MsgUpdateParams, ::injective::tokenfactory::v1beta1::MsgUpdateParamsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Msg::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::tokenfactory::v1beta1::MsgUpdateParams* req,
             ::injective::tokenfactory::v1beta1::MsgUpdateParamsResponse* resp) {
               return service->UpdateParams(ctx, req, resp);
             }, this)));
}

Msg::Service::~Service() {
}

::grpc::Status Msg::Service::CreateDenom(::grpc::ServerContext* context, const ::injective::tokenfactory::v1beta1::MsgCreateDenom* request, ::injective::tokenfactory::v1beta1::MsgCreateDenomResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Msg::Service::Mint(::grpc::ServerContext* context, const ::injective::tokenfactory::v1beta1::MsgMint* request, ::injective::tokenfactory::v1beta1::MsgMintResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Msg::Service::Burn(::grpc::ServerContext* context, const ::injective::tokenfactory::v1beta1::MsgBurn* request, ::injective::tokenfactory::v1beta1::MsgBurnResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Msg::Service::ChangeAdmin(::grpc::ServerContext* context, const ::injective::tokenfactory::v1beta1::MsgChangeAdmin* request, ::injective::tokenfactory::v1beta1::MsgChangeAdminResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Msg::Service::SetDenomMetadata(::grpc::ServerContext* context, const ::injective::tokenfactory::v1beta1::MsgSetDenomMetadata* request, ::injective::tokenfactory::v1beta1::MsgSetDenomMetadataResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Msg::Service::UpdateParams(::grpc::ServerContext* context, const ::injective::tokenfactory::v1beta1::MsgUpdateParams* request, ::injective::tokenfactory::v1beta1::MsgUpdateParamsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace injective
}  // namespace tokenfactory
}  // namespace v1beta1


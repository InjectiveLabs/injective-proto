// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: injective/tokenfactory/v1beta1/events.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_injective_2ftokenfactory_2fv1beta1_2fevents_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_injective_2ftokenfactory_2fv1beta1_2fevents_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "gogoproto/gogo.pb.h"
#include "cosmos/base/v1beta1/coin.pb.h"
#include "cosmos/bank/v1beta1/bank.pb.h"
#include "injective/tokenfactory/v1beta1/authorityMetadata.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_injective_2ftokenfactory_2fv1beta1_2fevents_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_injective_2ftokenfactory_2fv1beta1_2fevents_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_injective_2ftokenfactory_2fv1beta1_2fevents_2eproto;
namespace injective {
namespace tokenfactory {
namespace v1beta1 {
class EventBurnTFDenom;
struct EventBurnTFDenomDefaultTypeInternal;
extern EventBurnTFDenomDefaultTypeInternal _EventBurnTFDenom_default_instance_;
class EventChangeTFAdmin;
struct EventChangeTFAdminDefaultTypeInternal;
extern EventChangeTFAdminDefaultTypeInternal _EventChangeTFAdmin_default_instance_;
class EventCreateTFDenom;
struct EventCreateTFDenomDefaultTypeInternal;
extern EventCreateTFDenomDefaultTypeInternal _EventCreateTFDenom_default_instance_;
class EventMintTFDenom;
struct EventMintTFDenomDefaultTypeInternal;
extern EventMintTFDenomDefaultTypeInternal _EventMintTFDenom_default_instance_;
class EventSetTFDenomMetadata;
struct EventSetTFDenomMetadataDefaultTypeInternal;
extern EventSetTFDenomMetadataDefaultTypeInternal _EventSetTFDenomMetadata_default_instance_;
}  // namespace v1beta1
}  // namespace tokenfactory
}  // namespace injective
PROTOBUF_NAMESPACE_OPEN
template <>
::injective::tokenfactory::v1beta1::EventBurnTFDenom* Arena::CreateMaybeMessage<::injective::tokenfactory::v1beta1::EventBurnTFDenom>(Arena*);
template <>
::injective::tokenfactory::v1beta1::EventChangeTFAdmin* Arena::CreateMaybeMessage<::injective::tokenfactory::v1beta1::EventChangeTFAdmin>(Arena*);
template <>
::injective::tokenfactory::v1beta1::EventCreateTFDenom* Arena::CreateMaybeMessage<::injective::tokenfactory::v1beta1::EventCreateTFDenom>(Arena*);
template <>
::injective::tokenfactory::v1beta1::EventMintTFDenom* Arena::CreateMaybeMessage<::injective::tokenfactory::v1beta1::EventMintTFDenom>(Arena*);
template <>
::injective::tokenfactory::v1beta1::EventSetTFDenomMetadata* Arena::CreateMaybeMessage<::injective::tokenfactory::v1beta1::EventSetTFDenomMetadata>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace injective {
namespace tokenfactory {
namespace v1beta1 {

// ===================================================================


// -------------------------------------------------------------------

class EventCreateTFDenom final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.tokenfactory.v1beta1.EventCreateTFDenom) */ {
 public:
  inline EventCreateTFDenom() : EventCreateTFDenom(nullptr) {}
  ~EventCreateTFDenom() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR EventCreateTFDenom(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EventCreateTFDenom(const EventCreateTFDenom& from);
  EventCreateTFDenom(EventCreateTFDenom&& from) noexcept
    : EventCreateTFDenom() {
    *this = ::std::move(from);
  }

  inline EventCreateTFDenom& operator=(const EventCreateTFDenom& from) {
    CopyFrom(from);
    return *this;
  }
  inline EventCreateTFDenom& operator=(EventCreateTFDenom&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EventCreateTFDenom& default_instance() {
    return *internal_default_instance();
  }
  static inline const EventCreateTFDenom* internal_default_instance() {
    return reinterpret_cast<const EventCreateTFDenom*>(
               &_EventCreateTFDenom_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(EventCreateTFDenom& a, EventCreateTFDenom& b) {
    a.Swap(&b);
  }
  inline void Swap(EventCreateTFDenom* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EventCreateTFDenom* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EventCreateTFDenom* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EventCreateTFDenom>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EventCreateTFDenom& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EventCreateTFDenom& from) {
    EventCreateTFDenom::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EventCreateTFDenom* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.tokenfactory.v1beta1.EventCreateTFDenom";
  }
  protected:
  explicit EventCreateTFDenom(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 1,
    kDenomFieldNumber = 2,
  };
  // string account = 1 [json_name = "account"];
  void clear_account() ;
  const std::string& account() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_account(Arg_&& arg, Args_... args);
  std::string* mutable_account();
  PROTOBUF_NODISCARD std::string* release_account();
  void set_allocated_account(std::string* ptr);

  private:
  const std::string& _internal_account() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account(
      const std::string& value);
  std::string* _internal_mutable_account();

  public:
  // string denom = 2 [json_name = "denom"];
  void clear_denom() ;
  const std::string& denom() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_denom(Arg_&& arg, Args_... args);
  std::string* mutable_denom();
  PROTOBUF_NODISCARD std::string* release_denom();
  void set_allocated_denom(std::string* ptr);

  private:
  const std::string& _internal_denom() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_denom(
      const std::string& value);
  std::string* _internal_mutable_denom();

  public:
  // @@protoc_insertion_point(class_scope:injective.tokenfactory.v1beta1.EventCreateTFDenom)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr denom_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2ftokenfactory_2fv1beta1_2fevents_2eproto;
};// -------------------------------------------------------------------

class EventMintTFDenom final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.tokenfactory.v1beta1.EventMintTFDenom) */ {
 public:
  inline EventMintTFDenom() : EventMintTFDenom(nullptr) {}
  ~EventMintTFDenom() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR EventMintTFDenom(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EventMintTFDenom(const EventMintTFDenom& from);
  EventMintTFDenom(EventMintTFDenom&& from) noexcept
    : EventMintTFDenom() {
    *this = ::std::move(from);
  }

  inline EventMintTFDenom& operator=(const EventMintTFDenom& from) {
    CopyFrom(from);
    return *this;
  }
  inline EventMintTFDenom& operator=(EventMintTFDenom&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EventMintTFDenom& default_instance() {
    return *internal_default_instance();
  }
  static inline const EventMintTFDenom* internal_default_instance() {
    return reinterpret_cast<const EventMintTFDenom*>(
               &_EventMintTFDenom_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(EventMintTFDenom& a, EventMintTFDenom& b) {
    a.Swap(&b);
  }
  inline void Swap(EventMintTFDenom* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EventMintTFDenom* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EventMintTFDenom* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EventMintTFDenom>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EventMintTFDenom& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EventMintTFDenom& from) {
    EventMintTFDenom::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EventMintTFDenom* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.tokenfactory.v1beta1.EventMintTFDenom";
  }
  protected:
  explicit EventMintTFDenom(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecipientAddressFieldNumber = 1,
    kAmountFieldNumber = 2,
  };
  // string recipient_address = 1 [json_name = "recipientAddress"];
  void clear_recipient_address() ;
  const std::string& recipient_address() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_recipient_address(Arg_&& arg, Args_... args);
  std::string* mutable_recipient_address();
  PROTOBUF_NODISCARD std::string* release_recipient_address();
  void set_allocated_recipient_address(std::string* ptr);

  private:
  const std::string& _internal_recipient_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_recipient_address(
      const std::string& value);
  std::string* _internal_mutable_recipient_address();

  public:
  // .cosmos.base.v1beta1.Coin amount = 2 [json_name = "amount", (.gogoproto.nullable) = false];
  bool has_amount() const;
  void clear_amount() ;
  const ::cosmos::base::v1beta1::Coin& amount() const;
  PROTOBUF_NODISCARD ::cosmos::base::v1beta1::Coin* release_amount();
  ::cosmos::base::v1beta1::Coin* mutable_amount();
  void set_allocated_amount(::cosmos::base::v1beta1::Coin* amount);
  private:
  const ::cosmos::base::v1beta1::Coin& _internal_amount() const;
  ::cosmos::base::v1beta1::Coin* _internal_mutable_amount();
  public:
  void unsafe_arena_set_allocated_amount(
      ::cosmos::base::v1beta1::Coin* amount);
  ::cosmos::base::v1beta1::Coin* unsafe_arena_release_amount();
  // @@protoc_insertion_point(class_scope:injective.tokenfactory.v1beta1.EventMintTFDenom)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr recipient_address_;
    ::cosmos::base::v1beta1::Coin* amount_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2ftokenfactory_2fv1beta1_2fevents_2eproto;
};// -------------------------------------------------------------------

class EventBurnTFDenom final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.tokenfactory.v1beta1.EventBurnTFDenom) */ {
 public:
  inline EventBurnTFDenom() : EventBurnTFDenom(nullptr) {}
  ~EventBurnTFDenom() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR EventBurnTFDenom(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EventBurnTFDenom(const EventBurnTFDenom& from);
  EventBurnTFDenom(EventBurnTFDenom&& from) noexcept
    : EventBurnTFDenom() {
    *this = ::std::move(from);
  }

  inline EventBurnTFDenom& operator=(const EventBurnTFDenom& from) {
    CopyFrom(from);
    return *this;
  }
  inline EventBurnTFDenom& operator=(EventBurnTFDenom&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EventBurnTFDenom& default_instance() {
    return *internal_default_instance();
  }
  static inline const EventBurnTFDenom* internal_default_instance() {
    return reinterpret_cast<const EventBurnTFDenom*>(
               &_EventBurnTFDenom_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(EventBurnTFDenom& a, EventBurnTFDenom& b) {
    a.Swap(&b);
  }
  inline void Swap(EventBurnTFDenom* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EventBurnTFDenom* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EventBurnTFDenom* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EventBurnTFDenom>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EventBurnTFDenom& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EventBurnTFDenom& from) {
    EventBurnTFDenom::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EventBurnTFDenom* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.tokenfactory.v1beta1.EventBurnTFDenom";
  }
  protected:
  explicit EventBurnTFDenom(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBurnerAddressFieldNumber = 1,
    kAmountFieldNumber = 2,
  };
  // string burner_address = 1 [json_name = "burnerAddress"];
  void clear_burner_address() ;
  const std::string& burner_address() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_burner_address(Arg_&& arg, Args_... args);
  std::string* mutable_burner_address();
  PROTOBUF_NODISCARD std::string* release_burner_address();
  void set_allocated_burner_address(std::string* ptr);

  private:
  const std::string& _internal_burner_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_burner_address(
      const std::string& value);
  std::string* _internal_mutable_burner_address();

  public:
  // .cosmos.base.v1beta1.Coin amount = 2 [json_name = "amount", (.gogoproto.nullable) = false];
  bool has_amount() const;
  void clear_amount() ;
  const ::cosmos::base::v1beta1::Coin& amount() const;
  PROTOBUF_NODISCARD ::cosmos::base::v1beta1::Coin* release_amount();
  ::cosmos::base::v1beta1::Coin* mutable_amount();
  void set_allocated_amount(::cosmos::base::v1beta1::Coin* amount);
  private:
  const ::cosmos::base::v1beta1::Coin& _internal_amount() const;
  ::cosmos::base::v1beta1::Coin* _internal_mutable_amount();
  public:
  void unsafe_arena_set_allocated_amount(
      ::cosmos::base::v1beta1::Coin* amount);
  ::cosmos::base::v1beta1::Coin* unsafe_arena_release_amount();
  // @@protoc_insertion_point(class_scope:injective.tokenfactory.v1beta1.EventBurnTFDenom)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr burner_address_;
    ::cosmos::base::v1beta1::Coin* amount_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2ftokenfactory_2fv1beta1_2fevents_2eproto;
};// -------------------------------------------------------------------

class EventChangeTFAdmin final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.tokenfactory.v1beta1.EventChangeTFAdmin) */ {
 public:
  inline EventChangeTFAdmin() : EventChangeTFAdmin(nullptr) {}
  ~EventChangeTFAdmin() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR EventChangeTFAdmin(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EventChangeTFAdmin(const EventChangeTFAdmin& from);
  EventChangeTFAdmin(EventChangeTFAdmin&& from) noexcept
    : EventChangeTFAdmin() {
    *this = ::std::move(from);
  }

  inline EventChangeTFAdmin& operator=(const EventChangeTFAdmin& from) {
    CopyFrom(from);
    return *this;
  }
  inline EventChangeTFAdmin& operator=(EventChangeTFAdmin&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EventChangeTFAdmin& default_instance() {
    return *internal_default_instance();
  }
  static inline const EventChangeTFAdmin* internal_default_instance() {
    return reinterpret_cast<const EventChangeTFAdmin*>(
               &_EventChangeTFAdmin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(EventChangeTFAdmin& a, EventChangeTFAdmin& b) {
    a.Swap(&b);
  }
  inline void Swap(EventChangeTFAdmin* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EventChangeTFAdmin* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EventChangeTFAdmin* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EventChangeTFAdmin>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EventChangeTFAdmin& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EventChangeTFAdmin& from) {
    EventChangeTFAdmin::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EventChangeTFAdmin* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.tokenfactory.v1beta1.EventChangeTFAdmin";
  }
  protected:
  explicit EventChangeTFAdmin(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDenomFieldNumber = 1,
    kNewAdminAddressFieldNumber = 2,
  };
  // string denom = 1 [json_name = "denom"];
  void clear_denom() ;
  const std::string& denom() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_denom(Arg_&& arg, Args_... args);
  std::string* mutable_denom();
  PROTOBUF_NODISCARD std::string* release_denom();
  void set_allocated_denom(std::string* ptr);

  private:
  const std::string& _internal_denom() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_denom(
      const std::string& value);
  std::string* _internal_mutable_denom();

  public:
  // string new_admin_address = 2 [json_name = "newAdminAddress"];
  void clear_new_admin_address() ;
  const std::string& new_admin_address() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_new_admin_address(Arg_&& arg, Args_... args);
  std::string* mutable_new_admin_address();
  PROTOBUF_NODISCARD std::string* release_new_admin_address();
  void set_allocated_new_admin_address(std::string* ptr);

  private:
  const std::string& _internal_new_admin_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_new_admin_address(
      const std::string& value);
  std::string* _internal_mutable_new_admin_address();

  public:
  // @@protoc_insertion_point(class_scope:injective.tokenfactory.v1beta1.EventChangeTFAdmin)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr denom_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr new_admin_address_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2ftokenfactory_2fv1beta1_2fevents_2eproto;
};// -------------------------------------------------------------------

class EventSetTFDenomMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.tokenfactory.v1beta1.EventSetTFDenomMetadata) */ {
 public:
  inline EventSetTFDenomMetadata() : EventSetTFDenomMetadata(nullptr) {}
  ~EventSetTFDenomMetadata() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR EventSetTFDenomMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EventSetTFDenomMetadata(const EventSetTFDenomMetadata& from);
  EventSetTFDenomMetadata(EventSetTFDenomMetadata&& from) noexcept
    : EventSetTFDenomMetadata() {
    *this = ::std::move(from);
  }

  inline EventSetTFDenomMetadata& operator=(const EventSetTFDenomMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline EventSetTFDenomMetadata& operator=(EventSetTFDenomMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EventSetTFDenomMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const EventSetTFDenomMetadata* internal_default_instance() {
    return reinterpret_cast<const EventSetTFDenomMetadata*>(
               &_EventSetTFDenomMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(EventSetTFDenomMetadata& a, EventSetTFDenomMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(EventSetTFDenomMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EventSetTFDenomMetadata* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EventSetTFDenomMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EventSetTFDenomMetadata>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EventSetTFDenomMetadata& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EventSetTFDenomMetadata& from) {
    EventSetTFDenomMetadata::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EventSetTFDenomMetadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.tokenfactory.v1beta1.EventSetTFDenomMetadata";
  }
  protected:
  explicit EventSetTFDenomMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDenomFieldNumber = 1,
    kMetadataFieldNumber = 2,
  };
  // string denom = 1 [json_name = "denom"];
  void clear_denom() ;
  const std::string& denom() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_denom(Arg_&& arg, Args_... args);
  std::string* mutable_denom();
  PROTOBUF_NODISCARD std::string* release_denom();
  void set_allocated_denom(std::string* ptr);

  private:
  const std::string& _internal_denom() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_denom(
      const std::string& value);
  std::string* _internal_mutable_denom();

  public:
  // .cosmos.bank.v1beta1.Metadata metadata = 2 [json_name = "metadata", (.gogoproto.nullable) = false];
  bool has_metadata() const;
  void clear_metadata() ;
  const ::cosmos::bank::v1beta1::Metadata& metadata() const;
  PROTOBUF_NODISCARD ::cosmos::bank::v1beta1::Metadata* release_metadata();
  ::cosmos::bank::v1beta1::Metadata* mutable_metadata();
  void set_allocated_metadata(::cosmos::bank::v1beta1::Metadata* metadata);
  private:
  const ::cosmos::bank::v1beta1::Metadata& _internal_metadata() const;
  ::cosmos::bank::v1beta1::Metadata* _internal_mutable_metadata();
  public:
  void unsafe_arena_set_allocated_metadata(
      ::cosmos::bank::v1beta1::Metadata* metadata);
  ::cosmos::bank::v1beta1::Metadata* unsafe_arena_release_metadata();
  // @@protoc_insertion_point(class_scope:injective.tokenfactory.v1beta1.EventSetTFDenomMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr denom_;
    ::cosmos::bank::v1beta1::Metadata* metadata_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2ftokenfactory_2fv1beta1_2fevents_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// EventCreateTFDenom

// string account = 1 [json_name = "account"];
inline void EventCreateTFDenom::clear_account() {
  _impl_.account_.ClearToEmpty();
}
inline const std::string& EventCreateTFDenom::account() const {
  // @@protoc_insertion_point(field_get:injective.tokenfactory.v1beta1.EventCreateTFDenom.account)
  return _internal_account();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EventCreateTFDenom::set_account(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.account_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.tokenfactory.v1beta1.EventCreateTFDenom.account)
}
inline std::string* EventCreateTFDenom::mutable_account() {
  std::string* _s = _internal_mutable_account();
  // @@protoc_insertion_point(field_mutable:injective.tokenfactory.v1beta1.EventCreateTFDenom.account)
  return _s;
}
inline const std::string& EventCreateTFDenom::_internal_account() const {
  return _impl_.account_.Get();
}
inline void EventCreateTFDenom::_internal_set_account(const std::string& value) {
  ;


  _impl_.account_.Set(value, GetArenaForAllocation());
}
inline std::string* EventCreateTFDenom::_internal_mutable_account() {
  ;
  return _impl_.account_.Mutable( GetArenaForAllocation());
}
inline std::string* EventCreateTFDenom::release_account() {
  // @@protoc_insertion_point(field_release:injective.tokenfactory.v1beta1.EventCreateTFDenom.account)
  return _impl_.account_.Release();
}
inline void EventCreateTFDenom::set_allocated_account(std::string* value) {
  _impl_.account_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.account_.IsDefault()) {
          _impl_.account_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.tokenfactory.v1beta1.EventCreateTFDenom.account)
}

// string denom = 2 [json_name = "denom"];
inline void EventCreateTFDenom::clear_denom() {
  _impl_.denom_.ClearToEmpty();
}
inline const std::string& EventCreateTFDenom::denom() const {
  // @@protoc_insertion_point(field_get:injective.tokenfactory.v1beta1.EventCreateTFDenom.denom)
  return _internal_denom();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EventCreateTFDenom::set_denom(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.denom_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.tokenfactory.v1beta1.EventCreateTFDenom.denom)
}
inline std::string* EventCreateTFDenom::mutable_denom() {
  std::string* _s = _internal_mutable_denom();
  // @@protoc_insertion_point(field_mutable:injective.tokenfactory.v1beta1.EventCreateTFDenom.denom)
  return _s;
}
inline const std::string& EventCreateTFDenom::_internal_denom() const {
  return _impl_.denom_.Get();
}
inline void EventCreateTFDenom::_internal_set_denom(const std::string& value) {
  ;


  _impl_.denom_.Set(value, GetArenaForAllocation());
}
inline std::string* EventCreateTFDenom::_internal_mutable_denom() {
  ;
  return _impl_.denom_.Mutable( GetArenaForAllocation());
}
inline std::string* EventCreateTFDenom::release_denom() {
  // @@protoc_insertion_point(field_release:injective.tokenfactory.v1beta1.EventCreateTFDenom.denom)
  return _impl_.denom_.Release();
}
inline void EventCreateTFDenom::set_allocated_denom(std::string* value) {
  _impl_.denom_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.denom_.IsDefault()) {
          _impl_.denom_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.tokenfactory.v1beta1.EventCreateTFDenom.denom)
}

// -------------------------------------------------------------------

// EventMintTFDenom

// string recipient_address = 1 [json_name = "recipientAddress"];
inline void EventMintTFDenom::clear_recipient_address() {
  _impl_.recipient_address_.ClearToEmpty();
}
inline const std::string& EventMintTFDenom::recipient_address() const {
  // @@protoc_insertion_point(field_get:injective.tokenfactory.v1beta1.EventMintTFDenom.recipient_address)
  return _internal_recipient_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EventMintTFDenom::set_recipient_address(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.recipient_address_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.tokenfactory.v1beta1.EventMintTFDenom.recipient_address)
}
inline std::string* EventMintTFDenom::mutable_recipient_address() {
  std::string* _s = _internal_mutable_recipient_address();
  // @@protoc_insertion_point(field_mutable:injective.tokenfactory.v1beta1.EventMintTFDenom.recipient_address)
  return _s;
}
inline const std::string& EventMintTFDenom::_internal_recipient_address() const {
  return _impl_.recipient_address_.Get();
}
inline void EventMintTFDenom::_internal_set_recipient_address(const std::string& value) {
  ;


  _impl_.recipient_address_.Set(value, GetArenaForAllocation());
}
inline std::string* EventMintTFDenom::_internal_mutable_recipient_address() {
  ;
  return _impl_.recipient_address_.Mutable( GetArenaForAllocation());
}
inline std::string* EventMintTFDenom::release_recipient_address() {
  // @@protoc_insertion_point(field_release:injective.tokenfactory.v1beta1.EventMintTFDenom.recipient_address)
  return _impl_.recipient_address_.Release();
}
inline void EventMintTFDenom::set_allocated_recipient_address(std::string* value) {
  _impl_.recipient_address_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.recipient_address_.IsDefault()) {
          _impl_.recipient_address_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.tokenfactory.v1beta1.EventMintTFDenom.recipient_address)
}

// .cosmos.base.v1beta1.Coin amount = 2 [json_name = "amount", (.gogoproto.nullable) = false];
inline bool EventMintTFDenom::has_amount() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.amount_ != nullptr);
  return value;
}
inline const ::cosmos::base::v1beta1::Coin& EventMintTFDenom::_internal_amount() const {
  const ::cosmos::base::v1beta1::Coin* p = _impl_.amount_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::v1beta1::Coin&>(
      ::cosmos::base::v1beta1::_Coin_default_instance_);
}
inline const ::cosmos::base::v1beta1::Coin& EventMintTFDenom::amount() const {
  // @@protoc_insertion_point(field_get:injective.tokenfactory.v1beta1.EventMintTFDenom.amount)
  return _internal_amount();
}
inline void EventMintTFDenom::unsafe_arena_set_allocated_amount(
    ::cosmos::base::v1beta1::Coin* amount) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.amount_);
  }
  _impl_.amount_ = amount;
  if (amount) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:injective.tokenfactory.v1beta1.EventMintTFDenom.amount)
}
inline ::cosmos::base::v1beta1::Coin* EventMintTFDenom::release_amount() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::v1beta1::Coin* temp = _impl_.amount_;
  _impl_.amount_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::base::v1beta1::Coin* EventMintTFDenom::unsafe_arena_release_amount() {
  // @@protoc_insertion_point(field_release:injective.tokenfactory.v1beta1.EventMintTFDenom.amount)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::v1beta1::Coin* temp = _impl_.amount_;
  _impl_.amount_ = nullptr;
  return temp;
}
inline ::cosmos::base::v1beta1::Coin* EventMintTFDenom::_internal_mutable_amount() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.amount_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::base::v1beta1::Coin>(GetArenaForAllocation());
    _impl_.amount_ = p;
  }
  return _impl_.amount_;
}
inline ::cosmos::base::v1beta1::Coin* EventMintTFDenom::mutable_amount() {
  ::cosmos::base::v1beta1::Coin* _msg = _internal_mutable_amount();
  // @@protoc_insertion_point(field_mutable:injective.tokenfactory.v1beta1.EventMintTFDenom.amount)
  return _msg;
}
inline void EventMintTFDenom::set_allocated_amount(::cosmos::base::v1beta1::Coin* amount) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.amount_);
  }
  if (amount) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(amount));
    if (message_arena != submessage_arena) {
      amount = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, amount, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.amount_ = amount;
  // @@protoc_insertion_point(field_set_allocated:injective.tokenfactory.v1beta1.EventMintTFDenom.amount)
}

// -------------------------------------------------------------------

// EventBurnTFDenom

// string burner_address = 1 [json_name = "burnerAddress"];
inline void EventBurnTFDenom::clear_burner_address() {
  _impl_.burner_address_.ClearToEmpty();
}
inline const std::string& EventBurnTFDenom::burner_address() const {
  // @@protoc_insertion_point(field_get:injective.tokenfactory.v1beta1.EventBurnTFDenom.burner_address)
  return _internal_burner_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EventBurnTFDenom::set_burner_address(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.burner_address_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.tokenfactory.v1beta1.EventBurnTFDenom.burner_address)
}
inline std::string* EventBurnTFDenom::mutable_burner_address() {
  std::string* _s = _internal_mutable_burner_address();
  // @@protoc_insertion_point(field_mutable:injective.tokenfactory.v1beta1.EventBurnTFDenom.burner_address)
  return _s;
}
inline const std::string& EventBurnTFDenom::_internal_burner_address() const {
  return _impl_.burner_address_.Get();
}
inline void EventBurnTFDenom::_internal_set_burner_address(const std::string& value) {
  ;


  _impl_.burner_address_.Set(value, GetArenaForAllocation());
}
inline std::string* EventBurnTFDenom::_internal_mutable_burner_address() {
  ;
  return _impl_.burner_address_.Mutable( GetArenaForAllocation());
}
inline std::string* EventBurnTFDenom::release_burner_address() {
  // @@protoc_insertion_point(field_release:injective.tokenfactory.v1beta1.EventBurnTFDenom.burner_address)
  return _impl_.burner_address_.Release();
}
inline void EventBurnTFDenom::set_allocated_burner_address(std::string* value) {
  _impl_.burner_address_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.burner_address_.IsDefault()) {
          _impl_.burner_address_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.tokenfactory.v1beta1.EventBurnTFDenom.burner_address)
}

// .cosmos.base.v1beta1.Coin amount = 2 [json_name = "amount", (.gogoproto.nullable) = false];
inline bool EventBurnTFDenom::has_amount() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.amount_ != nullptr);
  return value;
}
inline const ::cosmos::base::v1beta1::Coin& EventBurnTFDenom::_internal_amount() const {
  const ::cosmos::base::v1beta1::Coin* p = _impl_.amount_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::v1beta1::Coin&>(
      ::cosmos::base::v1beta1::_Coin_default_instance_);
}
inline const ::cosmos::base::v1beta1::Coin& EventBurnTFDenom::amount() const {
  // @@protoc_insertion_point(field_get:injective.tokenfactory.v1beta1.EventBurnTFDenom.amount)
  return _internal_amount();
}
inline void EventBurnTFDenom::unsafe_arena_set_allocated_amount(
    ::cosmos::base::v1beta1::Coin* amount) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.amount_);
  }
  _impl_.amount_ = amount;
  if (amount) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:injective.tokenfactory.v1beta1.EventBurnTFDenom.amount)
}
inline ::cosmos::base::v1beta1::Coin* EventBurnTFDenom::release_amount() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::v1beta1::Coin* temp = _impl_.amount_;
  _impl_.amount_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::base::v1beta1::Coin* EventBurnTFDenom::unsafe_arena_release_amount() {
  // @@protoc_insertion_point(field_release:injective.tokenfactory.v1beta1.EventBurnTFDenom.amount)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::v1beta1::Coin* temp = _impl_.amount_;
  _impl_.amount_ = nullptr;
  return temp;
}
inline ::cosmos::base::v1beta1::Coin* EventBurnTFDenom::_internal_mutable_amount() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.amount_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::base::v1beta1::Coin>(GetArenaForAllocation());
    _impl_.amount_ = p;
  }
  return _impl_.amount_;
}
inline ::cosmos::base::v1beta1::Coin* EventBurnTFDenom::mutable_amount() {
  ::cosmos::base::v1beta1::Coin* _msg = _internal_mutable_amount();
  // @@protoc_insertion_point(field_mutable:injective.tokenfactory.v1beta1.EventBurnTFDenom.amount)
  return _msg;
}
inline void EventBurnTFDenom::set_allocated_amount(::cosmos::base::v1beta1::Coin* amount) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.amount_);
  }
  if (amount) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(amount));
    if (message_arena != submessage_arena) {
      amount = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, amount, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.amount_ = amount;
  // @@protoc_insertion_point(field_set_allocated:injective.tokenfactory.v1beta1.EventBurnTFDenom.amount)
}

// -------------------------------------------------------------------

// EventChangeTFAdmin

// string denom = 1 [json_name = "denom"];
inline void EventChangeTFAdmin::clear_denom() {
  _impl_.denom_.ClearToEmpty();
}
inline const std::string& EventChangeTFAdmin::denom() const {
  // @@protoc_insertion_point(field_get:injective.tokenfactory.v1beta1.EventChangeTFAdmin.denom)
  return _internal_denom();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EventChangeTFAdmin::set_denom(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.denom_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.tokenfactory.v1beta1.EventChangeTFAdmin.denom)
}
inline std::string* EventChangeTFAdmin::mutable_denom() {
  std::string* _s = _internal_mutable_denom();
  // @@protoc_insertion_point(field_mutable:injective.tokenfactory.v1beta1.EventChangeTFAdmin.denom)
  return _s;
}
inline const std::string& EventChangeTFAdmin::_internal_denom() const {
  return _impl_.denom_.Get();
}
inline void EventChangeTFAdmin::_internal_set_denom(const std::string& value) {
  ;


  _impl_.denom_.Set(value, GetArenaForAllocation());
}
inline std::string* EventChangeTFAdmin::_internal_mutable_denom() {
  ;
  return _impl_.denom_.Mutable( GetArenaForAllocation());
}
inline std::string* EventChangeTFAdmin::release_denom() {
  // @@protoc_insertion_point(field_release:injective.tokenfactory.v1beta1.EventChangeTFAdmin.denom)
  return _impl_.denom_.Release();
}
inline void EventChangeTFAdmin::set_allocated_denom(std::string* value) {
  _impl_.denom_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.denom_.IsDefault()) {
          _impl_.denom_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.tokenfactory.v1beta1.EventChangeTFAdmin.denom)
}

// string new_admin_address = 2 [json_name = "newAdminAddress"];
inline void EventChangeTFAdmin::clear_new_admin_address() {
  _impl_.new_admin_address_.ClearToEmpty();
}
inline const std::string& EventChangeTFAdmin::new_admin_address() const {
  // @@protoc_insertion_point(field_get:injective.tokenfactory.v1beta1.EventChangeTFAdmin.new_admin_address)
  return _internal_new_admin_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EventChangeTFAdmin::set_new_admin_address(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.new_admin_address_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.tokenfactory.v1beta1.EventChangeTFAdmin.new_admin_address)
}
inline std::string* EventChangeTFAdmin::mutable_new_admin_address() {
  std::string* _s = _internal_mutable_new_admin_address();
  // @@protoc_insertion_point(field_mutable:injective.tokenfactory.v1beta1.EventChangeTFAdmin.new_admin_address)
  return _s;
}
inline const std::string& EventChangeTFAdmin::_internal_new_admin_address() const {
  return _impl_.new_admin_address_.Get();
}
inline void EventChangeTFAdmin::_internal_set_new_admin_address(const std::string& value) {
  ;


  _impl_.new_admin_address_.Set(value, GetArenaForAllocation());
}
inline std::string* EventChangeTFAdmin::_internal_mutable_new_admin_address() {
  ;
  return _impl_.new_admin_address_.Mutable( GetArenaForAllocation());
}
inline std::string* EventChangeTFAdmin::release_new_admin_address() {
  // @@protoc_insertion_point(field_release:injective.tokenfactory.v1beta1.EventChangeTFAdmin.new_admin_address)
  return _impl_.new_admin_address_.Release();
}
inline void EventChangeTFAdmin::set_allocated_new_admin_address(std::string* value) {
  _impl_.new_admin_address_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.new_admin_address_.IsDefault()) {
          _impl_.new_admin_address_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.tokenfactory.v1beta1.EventChangeTFAdmin.new_admin_address)
}

// -------------------------------------------------------------------

// EventSetTFDenomMetadata

// string denom = 1 [json_name = "denom"];
inline void EventSetTFDenomMetadata::clear_denom() {
  _impl_.denom_.ClearToEmpty();
}
inline const std::string& EventSetTFDenomMetadata::denom() const {
  // @@protoc_insertion_point(field_get:injective.tokenfactory.v1beta1.EventSetTFDenomMetadata.denom)
  return _internal_denom();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EventSetTFDenomMetadata::set_denom(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.denom_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.tokenfactory.v1beta1.EventSetTFDenomMetadata.denom)
}
inline std::string* EventSetTFDenomMetadata::mutable_denom() {
  std::string* _s = _internal_mutable_denom();
  // @@protoc_insertion_point(field_mutable:injective.tokenfactory.v1beta1.EventSetTFDenomMetadata.denom)
  return _s;
}
inline const std::string& EventSetTFDenomMetadata::_internal_denom() const {
  return _impl_.denom_.Get();
}
inline void EventSetTFDenomMetadata::_internal_set_denom(const std::string& value) {
  ;


  _impl_.denom_.Set(value, GetArenaForAllocation());
}
inline std::string* EventSetTFDenomMetadata::_internal_mutable_denom() {
  ;
  return _impl_.denom_.Mutable( GetArenaForAllocation());
}
inline std::string* EventSetTFDenomMetadata::release_denom() {
  // @@protoc_insertion_point(field_release:injective.tokenfactory.v1beta1.EventSetTFDenomMetadata.denom)
  return _impl_.denom_.Release();
}
inline void EventSetTFDenomMetadata::set_allocated_denom(std::string* value) {
  _impl_.denom_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.denom_.IsDefault()) {
          _impl_.denom_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.tokenfactory.v1beta1.EventSetTFDenomMetadata.denom)
}

// .cosmos.bank.v1beta1.Metadata metadata = 2 [json_name = "metadata", (.gogoproto.nullable) = false];
inline bool EventSetTFDenomMetadata::has_metadata() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.metadata_ != nullptr);
  return value;
}
inline const ::cosmos::bank::v1beta1::Metadata& EventSetTFDenomMetadata::_internal_metadata() const {
  const ::cosmos::bank::v1beta1::Metadata* p = _impl_.metadata_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::bank::v1beta1::Metadata&>(
      ::cosmos::bank::v1beta1::_Metadata_default_instance_);
}
inline const ::cosmos::bank::v1beta1::Metadata& EventSetTFDenomMetadata::metadata() const {
  // @@protoc_insertion_point(field_get:injective.tokenfactory.v1beta1.EventSetTFDenomMetadata.metadata)
  return _internal_metadata();
}
inline void EventSetTFDenomMetadata::unsafe_arena_set_allocated_metadata(
    ::cosmos::bank::v1beta1::Metadata* metadata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metadata_);
  }
  _impl_.metadata_ = metadata;
  if (metadata) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:injective.tokenfactory.v1beta1.EventSetTFDenomMetadata.metadata)
}
inline ::cosmos::bank::v1beta1::Metadata* EventSetTFDenomMetadata::release_metadata() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::bank::v1beta1::Metadata* temp = _impl_.metadata_;
  _impl_.metadata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::bank::v1beta1::Metadata* EventSetTFDenomMetadata::unsafe_arena_release_metadata() {
  // @@protoc_insertion_point(field_release:injective.tokenfactory.v1beta1.EventSetTFDenomMetadata.metadata)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::bank::v1beta1::Metadata* temp = _impl_.metadata_;
  _impl_.metadata_ = nullptr;
  return temp;
}
inline ::cosmos::bank::v1beta1::Metadata* EventSetTFDenomMetadata::_internal_mutable_metadata() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::bank::v1beta1::Metadata>(GetArenaForAllocation());
    _impl_.metadata_ = p;
  }
  return _impl_.metadata_;
}
inline ::cosmos::bank::v1beta1::Metadata* EventSetTFDenomMetadata::mutable_metadata() {
  ::cosmos::bank::v1beta1::Metadata* _msg = _internal_mutable_metadata();
  // @@protoc_insertion_point(field_mutable:injective.tokenfactory.v1beta1.EventSetTFDenomMetadata.metadata)
  return _msg;
}
inline void EventSetTFDenomMetadata::set_allocated_metadata(::cosmos::bank::v1beta1::Metadata* metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metadata_);
  }
  if (metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata));
    if (message_arena != submessage_arena) {
      metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:injective.tokenfactory.v1beta1.EventSetTFDenomMetadata.metadata)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1beta1
}  // namespace tokenfactory
}  // namespace injective


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_injective_2ftokenfactory_2fv1beta1_2fevents_2eproto_2epb_2eh

// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: injective/tokenfactory/v1beta1/query.proto
#ifndef GRPC_injective_2ftokenfactory_2fv1beta1_2fquery_2eproto__INCLUDED
#define GRPC_injective_2ftokenfactory_2fv1beta1_2fquery_2eproto__INCLUDED

#include "injective/tokenfactory/v1beta1/query.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace injective {
namespace tokenfactory {
namespace v1beta1 {

// Query defines the gRPC querier service.
class Query final {
 public:
  static constexpr char const* service_full_name() {
    return "injective.tokenfactory.v1beta1.Query";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Params defines a gRPC query method that returns the tokenfactory module's
    // parameters.
    virtual ::grpc::Status Params(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::QueryParamsRequest& request, ::injective::tokenfactory::v1beta1::QueryParamsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::tokenfactory::v1beta1::QueryParamsResponse>> AsyncParams(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::QueryParamsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::tokenfactory::v1beta1::QueryParamsResponse>>(AsyncParamsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::tokenfactory::v1beta1::QueryParamsResponse>> PrepareAsyncParams(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::QueryParamsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::tokenfactory::v1beta1::QueryParamsResponse>>(PrepareAsyncParamsRaw(context, request, cq));
    }
    // DenomAuthorityMetadata defines a gRPC query method for fetching
    // DenomAuthorityMetadata for a particular denom.
    virtual ::grpc::Status DenomAuthorityMetadata(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::QueryDenomAuthorityMetadataRequest& request, ::injective::tokenfactory::v1beta1::QueryDenomAuthorityMetadataResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::tokenfactory::v1beta1::QueryDenomAuthorityMetadataResponse>> AsyncDenomAuthorityMetadata(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::QueryDenomAuthorityMetadataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::tokenfactory::v1beta1::QueryDenomAuthorityMetadataResponse>>(AsyncDenomAuthorityMetadataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::tokenfactory::v1beta1::QueryDenomAuthorityMetadataResponse>> PrepareAsyncDenomAuthorityMetadata(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::QueryDenomAuthorityMetadataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::tokenfactory::v1beta1::QueryDenomAuthorityMetadataResponse>>(PrepareAsyncDenomAuthorityMetadataRaw(context, request, cq));
    }
    // DenomsFromCreator defines a gRPC query method for fetching all
    // denominations created by a specific admin/creator.
    virtual ::grpc::Status DenomsFromCreator(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::QueryDenomsFromCreatorRequest& request, ::injective::tokenfactory::v1beta1::QueryDenomsFromCreatorResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::tokenfactory::v1beta1::QueryDenomsFromCreatorResponse>> AsyncDenomsFromCreator(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::QueryDenomsFromCreatorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::tokenfactory::v1beta1::QueryDenomsFromCreatorResponse>>(AsyncDenomsFromCreatorRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::tokenfactory::v1beta1::QueryDenomsFromCreatorResponse>> PrepareAsyncDenomsFromCreator(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::QueryDenomsFromCreatorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::tokenfactory::v1beta1::QueryDenomsFromCreatorResponse>>(PrepareAsyncDenomsFromCreatorRaw(context, request, cq));
    }
    // Retrieves the entire auction module's state
    virtual ::grpc::Status TokenfactoryModuleState(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::QueryModuleStateRequest& request, ::injective::tokenfactory::v1beta1::QueryModuleStateResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::tokenfactory::v1beta1::QueryModuleStateResponse>> AsyncTokenfactoryModuleState(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::QueryModuleStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::tokenfactory::v1beta1::QueryModuleStateResponse>>(AsyncTokenfactoryModuleStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::tokenfactory::v1beta1::QueryModuleStateResponse>> PrepareAsyncTokenfactoryModuleState(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::QueryModuleStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::tokenfactory::v1beta1::QueryModuleStateResponse>>(PrepareAsyncTokenfactoryModuleStateRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Params defines a gRPC query method that returns the tokenfactory module's
      // parameters.
      virtual void Params(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::QueryParamsRequest* request, ::injective::tokenfactory::v1beta1::QueryParamsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Params(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::QueryParamsRequest* request, ::injective::tokenfactory::v1beta1::QueryParamsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // DenomAuthorityMetadata defines a gRPC query method for fetching
      // DenomAuthorityMetadata for a particular denom.
      virtual void DenomAuthorityMetadata(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::QueryDenomAuthorityMetadataRequest* request, ::injective::tokenfactory::v1beta1::QueryDenomAuthorityMetadataResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DenomAuthorityMetadata(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::QueryDenomAuthorityMetadataRequest* request, ::injective::tokenfactory::v1beta1::QueryDenomAuthorityMetadataResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // DenomsFromCreator defines a gRPC query method for fetching all
      // denominations created by a specific admin/creator.
      virtual void DenomsFromCreator(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::QueryDenomsFromCreatorRequest* request, ::injective::tokenfactory::v1beta1::QueryDenomsFromCreatorResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DenomsFromCreator(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::QueryDenomsFromCreatorRequest* request, ::injective::tokenfactory::v1beta1::QueryDenomsFromCreatorResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Retrieves the entire auction module's state
      virtual void TokenfactoryModuleState(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::QueryModuleStateRequest* request, ::injective::tokenfactory::v1beta1::QueryModuleStateResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void TokenfactoryModuleState(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::QueryModuleStateRequest* request, ::injective::tokenfactory::v1beta1::QueryModuleStateResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::tokenfactory::v1beta1::QueryParamsResponse>* AsyncParamsRaw(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::QueryParamsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::tokenfactory::v1beta1::QueryParamsResponse>* PrepareAsyncParamsRaw(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::QueryParamsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::tokenfactory::v1beta1::QueryDenomAuthorityMetadataResponse>* AsyncDenomAuthorityMetadataRaw(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::QueryDenomAuthorityMetadataRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::tokenfactory::v1beta1::QueryDenomAuthorityMetadataResponse>* PrepareAsyncDenomAuthorityMetadataRaw(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::QueryDenomAuthorityMetadataRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::tokenfactory::v1beta1::QueryDenomsFromCreatorResponse>* AsyncDenomsFromCreatorRaw(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::QueryDenomsFromCreatorRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::tokenfactory::v1beta1::QueryDenomsFromCreatorResponse>* PrepareAsyncDenomsFromCreatorRaw(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::QueryDenomsFromCreatorRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::tokenfactory::v1beta1::QueryModuleStateResponse>* AsyncTokenfactoryModuleStateRaw(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::QueryModuleStateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::tokenfactory::v1beta1::QueryModuleStateResponse>* PrepareAsyncTokenfactoryModuleStateRaw(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::QueryModuleStateRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status Params(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::QueryParamsRequest& request, ::injective::tokenfactory::v1beta1::QueryParamsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::tokenfactory::v1beta1::QueryParamsResponse>> AsyncParams(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::QueryParamsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::tokenfactory::v1beta1::QueryParamsResponse>>(AsyncParamsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::tokenfactory::v1beta1::QueryParamsResponse>> PrepareAsyncParams(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::QueryParamsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::tokenfactory::v1beta1::QueryParamsResponse>>(PrepareAsyncParamsRaw(context, request, cq));
    }
    ::grpc::Status DenomAuthorityMetadata(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::QueryDenomAuthorityMetadataRequest& request, ::injective::tokenfactory::v1beta1::QueryDenomAuthorityMetadataResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::tokenfactory::v1beta1::QueryDenomAuthorityMetadataResponse>> AsyncDenomAuthorityMetadata(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::QueryDenomAuthorityMetadataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::tokenfactory::v1beta1::QueryDenomAuthorityMetadataResponse>>(AsyncDenomAuthorityMetadataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::tokenfactory::v1beta1::QueryDenomAuthorityMetadataResponse>> PrepareAsyncDenomAuthorityMetadata(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::QueryDenomAuthorityMetadataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::tokenfactory::v1beta1::QueryDenomAuthorityMetadataResponse>>(PrepareAsyncDenomAuthorityMetadataRaw(context, request, cq));
    }
    ::grpc::Status DenomsFromCreator(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::QueryDenomsFromCreatorRequest& request, ::injective::tokenfactory::v1beta1::QueryDenomsFromCreatorResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::tokenfactory::v1beta1::QueryDenomsFromCreatorResponse>> AsyncDenomsFromCreator(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::QueryDenomsFromCreatorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::tokenfactory::v1beta1::QueryDenomsFromCreatorResponse>>(AsyncDenomsFromCreatorRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::tokenfactory::v1beta1::QueryDenomsFromCreatorResponse>> PrepareAsyncDenomsFromCreator(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::QueryDenomsFromCreatorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::tokenfactory::v1beta1::QueryDenomsFromCreatorResponse>>(PrepareAsyncDenomsFromCreatorRaw(context, request, cq));
    }
    ::grpc::Status TokenfactoryModuleState(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::QueryModuleStateRequest& request, ::injective::tokenfactory::v1beta1::QueryModuleStateResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::tokenfactory::v1beta1::QueryModuleStateResponse>> AsyncTokenfactoryModuleState(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::QueryModuleStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::tokenfactory::v1beta1::QueryModuleStateResponse>>(AsyncTokenfactoryModuleStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::tokenfactory::v1beta1::QueryModuleStateResponse>> PrepareAsyncTokenfactoryModuleState(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::QueryModuleStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::tokenfactory::v1beta1::QueryModuleStateResponse>>(PrepareAsyncTokenfactoryModuleStateRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Params(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::QueryParamsRequest* request, ::injective::tokenfactory::v1beta1::QueryParamsResponse* response, std::function<void(::grpc::Status)>) override;
      void Params(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::QueryParamsRequest* request, ::injective::tokenfactory::v1beta1::QueryParamsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DenomAuthorityMetadata(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::QueryDenomAuthorityMetadataRequest* request, ::injective::tokenfactory::v1beta1::QueryDenomAuthorityMetadataResponse* response, std::function<void(::grpc::Status)>) override;
      void DenomAuthorityMetadata(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::QueryDenomAuthorityMetadataRequest* request, ::injective::tokenfactory::v1beta1::QueryDenomAuthorityMetadataResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DenomsFromCreator(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::QueryDenomsFromCreatorRequest* request, ::injective::tokenfactory::v1beta1::QueryDenomsFromCreatorResponse* response, std::function<void(::grpc::Status)>) override;
      void DenomsFromCreator(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::QueryDenomsFromCreatorRequest* request, ::injective::tokenfactory::v1beta1::QueryDenomsFromCreatorResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void TokenfactoryModuleState(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::QueryModuleStateRequest* request, ::injective::tokenfactory::v1beta1::QueryModuleStateResponse* response, std::function<void(::grpc::Status)>) override;
      void TokenfactoryModuleState(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::QueryModuleStateRequest* request, ::injective::tokenfactory::v1beta1::QueryModuleStateResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::injective::tokenfactory::v1beta1::QueryParamsResponse>* AsyncParamsRaw(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::QueryParamsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::tokenfactory::v1beta1::QueryParamsResponse>* PrepareAsyncParamsRaw(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::QueryParamsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::tokenfactory::v1beta1::QueryDenomAuthorityMetadataResponse>* AsyncDenomAuthorityMetadataRaw(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::QueryDenomAuthorityMetadataRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::tokenfactory::v1beta1::QueryDenomAuthorityMetadataResponse>* PrepareAsyncDenomAuthorityMetadataRaw(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::QueryDenomAuthorityMetadataRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::tokenfactory::v1beta1::QueryDenomsFromCreatorResponse>* AsyncDenomsFromCreatorRaw(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::QueryDenomsFromCreatorRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::tokenfactory::v1beta1::QueryDenomsFromCreatorResponse>* PrepareAsyncDenomsFromCreatorRaw(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::QueryDenomsFromCreatorRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::tokenfactory::v1beta1::QueryModuleStateResponse>* AsyncTokenfactoryModuleStateRaw(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::QueryModuleStateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::tokenfactory::v1beta1::QueryModuleStateResponse>* PrepareAsyncTokenfactoryModuleStateRaw(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::QueryModuleStateRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Params_;
    const ::grpc::internal::RpcMethod rpcmethod_DenomAuthorityMetadata_;
    const ::grpc::internal::RpcMethod rpcmethod_DenomsFromCreator_;
    const ::grpc::internal::RpcMethod rpcmethod_TokenfactoryModuleState_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Params defines a gRPC query method that returns the tokenfactory module's
    // parameters.
    virtual ::grpc::Status Params(::grpc::ServerContext* context, const ::injective::tokenfactory::v1beta1::QueryParamsRequest* request, ::injective::tokenfactory::v1beta1::QueryParamsResponse* response);
    // DenomAuthorityMetadata defines a gRPC query method for fetching
    // DenomAuthorityMetadata for a particular denom.
    virtual ::grpc::Status DenomAuthorityMetadata(::grpc::ServerContext* context, const ::injective::tokenfactory::v1beta1::QueryDenomAuthorityMetadataRequest* request, ::injective::tokenfactory::v1beta1::QueryDenomAuthorityMetadataResponse* response);
    // DenomsFromCreator defines a gRPC query method for fetching all
    // denominations created by a specific admin/creator.
    virtual ::grpc::Status DenomsFromCreator(::grpc::ServerContext* context, const ::injective::tokenfactory::v1beta1::QueryDenomsFromCreatorRequest* request, ::injective::tokenfactory::v1beta1::QueryDenomsFromCreatorResponse* response);
    // Retrieves the entire auction module's state
    virtual ::grpc::Status TokenfactoryModuleState(::grpc::ServerContext* context, const ::injective::tokenfactory::v1beta1::QueryModuleStateRequest* request, ::injective::tokenfactory::v1beta1::QueryModuleStateResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Params : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Params() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Params() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Params(::grpc::ServerContext* /*context*/, const ::injective::tokenfactory::v1beta1::QueryParamsRequest* /*request*/, ::injective::tokenfactory::v1beta1::QueryParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestParams(::grpc::ServerContext* context, ::injective::tokenfactory::v1beta1::QueryParamsRequest* request, ::grpc::ServerAsyncResponseWriter< ::injective::tokenfactory::v1beta1::QueryParamsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DenomAuthorityMetadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DenomAuthorityMetadata() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_DenomAuthorityMetadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DenomAuthorityMetadata(::grpc::ServerContext* /*context*/, const ::injective::tokenfactory::v1beta1::QueryDenomAuthorityMetadataRequest* /*request*/, ::injective::tokenfactory::v1beta1::QueryDenomAuthorityMetadataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDenomAuthorityMetadata(::grpc::ServerContext* context, ::injective::tokenfactory::v1beta1::QueryDenomAuthorityMetadataRequest* request, ::grpc::ServerAsyncResponseWriter< ::injective::tokenfactory::v1beta1::QueryDenomAuthorityMetadataResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DenomsFromCreator : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DenomsFromCreator() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_DenomsFromCreator() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DenomsFromCreator(::grpc::ServerContext* /*context*/, const ::injective::tokenfactory::v1beta1::QueryDenomsFromCreatorRequest* /*request*/, ::injective::tokenfactory::v1beta1::QueryDenomsFromCreatorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDenomsFromCreator(::grpc::ServerContext* context, ::injective::tokenfactory::v1beta1::QueryDenomsFromCreatorRequest* request, ::grpc::ServerAsyncResponseWriter< ::injective::tokenfactory::v1beta1::QueryDenomsFromCreatorResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_TokenfactoryModuleState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_TokenfactoryModuleState() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_TokenfactoryModuleState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TokenfactoryModuleState(::grpc::ServerContext* /*context*/, const ::injective::tokenfactory::v1beta1::QueryModuleStateRequest* /*request*/, ::injective::tokenfactory::v1beta1::QueryModuleStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTokenfactoryModuleState(::grpc::ServerContext* context, ::injective::tokenfactory::v1beta1::QueryModuleStateRequest* request, ::grpc::ServerAsyncResponseWriter< ::injective::tokenfactory::v1beta1::QueryModuleStateResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Params<WithAsyncMethod_DenomAuthorityMetadata<WithAsyncMethod_DenomsFromCreator<WithAsyncMethod_TokenfactoryModuleState<Service > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Params : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Params() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::injective::tokenfactory::v1beta1::QueryParamsRequest, ::injective::tokenfactory::v1beta1::QueryParamsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::injective::tokenfactory::v1beta1::QueryParamsRequest* request, ::injective::tokenfactory::v1beta1::QueryParamsResponse* response) { return this->Params(context, request, response); }));}
    void SetMessageAllocatorFor_Params(
        ::grpc::MessageAllocator< ::injective::tokenfactory::v1beta1::QueryParamsRequest, ::injective::tokenfactory::v1beta1::QueryParamsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::injective::tokenfactory::v1beta1::QueryParamsRequest, ::injective::tokenfactory::v1beta1::QueryParamsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Params() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Params(::grpc::ServerContext* /*context*/, const ::injective::tokenfactory::v1beta1::QueryParamsRequest* /*request*/, ::injective::tokenfactory::v1beta1::QueryParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Params(
      ::grpc::CallbackServerContext* /*context*/, const ::injective::tokenfactory::v1beta1::QueryParamsRequest* /*request*/, ::injective::tokenfactory::v1beta1::QueryParamsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DenomAuthorityMetadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DenomAuthorityMetadata() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::injective::tokenfactory::v1beta1::QueryDenomAuthorityMetadataRequest, ::injective::tokenfactory::v1beta1::QueryDenomAuthorityMetadataResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::injective::tokenfactory::v1beta1::QueryDenomAuthorityMetadataRequest* request, ::injective::tokenfactory::v1beta1::QueryDenomAuthorityMetadataResponse* response) { return this->DenomAuthorityMetadata(context, request, response); }));}
    void SetMessageAllocatorFor_DenomAuthorityMetadata(
        ::grpc::MessageAllocator< ::injective::tokenfactory::v1beta1::QueryDenomAuthorityMetadataRequest, ::injective::tokenfactory::v1beta1::QueryDenomAuthorityMetadataResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::injective::tokenfactory::v1beta1::QueryDenomAuthorityMetadataRequest, ::injective::tokenfactory::v1beta1::QueryDenomAuthorityMetadataResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DenomAuthorityMetadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DenomAuthorityMetadata(::grpc::ServerContext* /*context*/, const ::injective::tokenfactory::v1beta1::QueryDenomAuthorityMetadataRequest* /*request*/, ::injective::tokenfactory::v1beta1::QueryDenomAuthorityMetadataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DenomAuthorityMetadata(
      ::grpc::CallbackServerContext* /*context*/, const ::injective::tokenfactory::v1beta1::QueryDenomAuthorityMetadataRequest* /*request*/, ::injective::tokenfactory::v1beta1::QueryDenomAuthorityMetadataResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DenomsFromCreator : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DenomsFromCreator() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::injective::tokenfactory::v1beta1::QueryDenomsFromCreatorRequest, ::injective::tokenfactory::v1beta1::QueryDenomsFromCreatorResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::injective::tokenfactory::v1beta1::QueryDenomsFromCreatorRequest* request, ::injective::tokenfactory::v1beta1::QueryDenomsFromCreatorResponse* response) { return this->DenomsFromCreator(context, request, response); }));}
    void SetMessageAllocatorFor_DenomsFromCreator(
        ::grpc::MessageAllocator< ::injective::tokenfactory::v1beta1::QueryDenomsFromCreatorRequest, ::injective::tokenfactory::v1beta1::QueryDenomsFromCreatorResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::injective::tokenfactory::v1beta1::QueryDenomsFromCreatorRequest, ::injective::tokenfactory::v1beta1::QueryDenomsFromCreatorResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DenomsFromCreator() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DenomsFromCreator(::grpc::ServerContext* /*context*/, const ::injective::tokenfactory::v1beta1::QueryDenomsFromCreatorRequest* /*request*/, ::injective::tokenfactory::v1beta1::QueryDenomsFromCreatorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DenomsFromCreator(
      ::grpc::CallbackServerContext* /*context*/, const ::injective::tokenfactory::v1beta1::QueryDenomsFromCreatorRequest* /*request*/, ::injective::tokenfactory::v1beta1::QueryDenomsFromCreatorResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_TokenfactoryModuleState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_TokenfactoryModuleState() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::injective::tokenfactory::v1beta1::QueryModuleStateRequest, ::injective::tokenfactory::v1beta1::QueryModuleStateResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::injective::tokenfactory::v1beta1::QueryModuleStateRequest* request, ::injective::tokenfactory::v1beta1::QueryModuleStateResponse* response) { return this->TokenfactoryModuleState(context, request, response); }));}
    void SetMessageAllocatorFor_TokenfactoryModuleState(
        ::grpc::MessageAllocator< ::injective::tokenfactory::v1beta1::QueryModuleStateRequest, ::injective::tokenfactory::v1beta1::QueryModuleStateResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::injective::tokenfactory::v1beta1::QueryModuleStateRequest, ::injective::tokenfactory::v1beta1::QueryModuleStateResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_TokenfactoryModuleState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TokenfactoryModuleState(::grpc::ServerContext* /*context*/, const ::injective::tokenfactory::v1beta1::QueryModuleStateRequest* /*request*/, ::injective::tokenfactory::v1beta1::QueryModuleStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* TokenfactoryModuleState(
      ::grpc::CallbackServerContext* /*context*/, const ::injective::tokenfactory::v1beta1::QueryModuleStateRequest* /*request*/, ::injective::tokenfactory::v1beta1::QueryModuleStateResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Params<WithCallbackMethod_DenomAuthorityMetadata<WithCallbackMethod_DenomsFromCreator<WithCallbackMethod_TokenfactoryModuleState<Service > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Params : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Params() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Params() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Params(::grpc::ServerContext* /*context*/, const ::injective::tokenfactory::v1beta1::QueryParamsRequest* /*request*/, ::injective::tokenfactory::v1beta1::QueryParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DenomAuthorityMetadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DenomAuthorityMetadata() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_DenomAuthorityMetadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DenomAuthorityMetadata(::grpc::ServerContext* /*context*/, const ::injective::tokenfactory::v1beta1::QueryDenomAuthorityMetadataRequest* /*request*/, ::injective::tokenfactory::v1beta1::QueryDenomAuthorityMetadataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DenomsFromCreator : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DenomsFromCreator() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_DenomsFromCreator() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DenomsFromCreator(::grpc::ServerContext* /*context*/, const ::injective::tokenfactory::v1beta1::QueryDenomsFromCreatorRequest* /*request*/, ::injective::tokenfactory::v1beta1::QueryDenomsFromCreatorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_TokenfactoryModuleState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_TokenfactoryModuleState() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_TokenfactoryModuleState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TokenfactoryModuleState(::grpc::ServerContext* /*context*/, const ::injective::tokenfactory::v1beta1::QueryModuleStateRequest* /*request*/, ::injective::tokenfactory::v1beta1::QueryModuleStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Params : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Params() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Params() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Params(::grpc::ServerContext* /*context*/, const ::injective::tokenfactory::v1beta1::QueryParamsRequest* /*request*/, ::injective::tokenfactory::v1beta1::QueryParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestParams(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DenomAuthorityMetadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DenomAuthorityMetadata() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_DenomAuthorityMetadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DenomAuthorityMetadata(::grpc::ServerContext* /*context*/, const ::injective::tokenfactory::v1beta1::QueryDenomAuthorityMetadataRequest* /*request*/, ::injective::tokenfactory::v1beta1::QueryDenomAuthorityMetadataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDenomAuthorityMetadata(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DenomsFromCreator : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DenomsFromCreator() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_DenomsFromCreator() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DenomsFromCreator(::grpc::ServerContext* /*context*/, const ::injective::tokenfactory::v1beta1::QueryDenomsFromCreatorRequest* /*request*/, ::injective::tokenfactory::v1beta1::QueryDenomsFromCreatorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDenomsFromCreator(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_TokenfactoryModuleState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_TokenfactoryModuleState() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_TokenfactoryModuleState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TokenfactoryModuleState(::grpc::ServerContext* /*context*/, const ::injective::tokenfactory::v1beta1::QueryModuleStateRequest* /*request*/, ::injective::tokenfactory::v1beta1::QueryModuleStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTokenfactoryModuleState(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Params : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Params() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Params(context, request, response); }));
    }
    ~WithRawCallbackMethod_Params() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Params(::grpc::ServerContext* /*context*/, const ::injective::tokenfactory::v1beta1::QueryParamsRequest* /*request*/, ::injective::tokenfactory::v1beta1::QueryParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Params(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DenomAuthorityMetadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DenomAuthorityMetadata() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DenomAuthorityMetadata(context, request, response); }));
    }
    ~WithRawCallbackMethod_DenomAuthorityMetadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DenomAuthorityMetadata(::grpc::ServerContext* /*context*/, const ::injective::tokenfactory::v1beta1::QueryDenomAuthorityMetadataRequest* /*request*/, ::injective::tokenfactory::v1beta1::QueryDenomAuthorityMetadataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DenomAuthorityMetadata(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DenomsFromCreator : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DenomsFromCreator() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DenomsFromCreator(context, request, response); }));
    }
    ~WithRawCallbackMethod_DenomsFromCreator() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DenomsFromCreator(::grpc::ServerContext* /*context*/, const ::injective::tokenfactory::v1beta1::QueryDenomsFromCreatorRequest* /*request*/, ::injective::tokenfactory::v1beta1::QueryDenomsFromCreatorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DenomsFromCreator(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_TokenfactoryModuleState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_TokenfactoryModuleState() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->TokenfactoryModuleState(context, request, response); }));
    }
    ~WithRawCallbackMethod_TokenfactoryModuleState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TokenfactoryModuleState(::grpc::ServerContext* /*context*/, const ::injective::tokenfactory::v1beta1::QueryModuleStateRequest* /*request*/, ::injective::tokenfactory::v1beta1::QueryModuleStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* TokenfactoryModuleState(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Params : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Params() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::injective::tokenfactory::v1beta1::QueryParamsRequest, ::injective::tokenfactory::v1beta1::QueryParamsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::injective::tokenfactory::v1beta1::QueryParamsRequest, ::injective::tokenfactory::v1beta1::QueryParamsResponse>* streamer) {
                       return this->StreamedParams(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Params() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Params(::grpc::ServerContext* /*context*/, const ::injective::tokenfactory::v1beta1::QueryParamsRequest* /*request*/, ::injective::tokenfactory::v1beta1::QueryParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedParams(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::injective::tokenfactory::v1beta1::QueryParamsRequest,::injective::tokenfactory::v1beta1::QueryParamsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DenomAuthorityMetadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DenomAuthorityMetadata() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::injective::tokenfactory::v1beta1::QueryDenomAuthorityMetadataRequest, ::injective::tokenfactory::v1beta1::QueryDenomAuthorityMetadataResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::injective::tokenfactory::v1beta1::QueryDenomAuthorityMetadataRequest, ::injective::tokenfactory::v1beta1::QueryDenomAuthorityMetadataResponse>* streamer) {
                       return this->StreamedDenomAuthorityMetadata(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DenomAuthorityMetadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DenomAuthorityMetadata(::grpc::ServerContext* /*context*/, const ::injective::tokenfactory::v1beta1::QueryDenomAuthorityMetadataRequest* /*request*/, ::injective::tokenfactory::v1beta1::QueryDenomAuthorityMetadataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDenomAuthorityMetadata(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::injective::tokenfactory::v1beta1::QueryDenomAuthorityMetadataRequest,::injective::tokenfactory::v1beta1::QueryDenomAuthorityMetadataResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DenomsFromCreator : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DenomsFromCreator() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::injective::tokenfactory::v1beta1::QueryDenomsFromCreatorRequest, ::injective::tokenfactory::v1beta1::QueryDenomsFromCreatorResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::injective::tokenfactory::v1beta1::QueryDenomsFromCreatorRequest, ::injective::tokenfactory::v1beta1::QueryDenomsFromCreatorResponse>* streamer) {
                       return this->StreamedDenomsFromCreator(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DenomsFromCreator() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DenomsFromCreator(::grpc::ServerContext* /*context*/, const ::injective::tokenfactory::v1beta1::QueryDenomsFromCreatorRequest* /*request*/, ::injective::tokenfactory::v1beta1::QueryDenomsFromCreatorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDenomsFromCreator(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::injective::tokenfactory::v1beta1::QueryDenomsFromCreatorRequest,::injective::tokenfactory::v1beta1::QueryDenomsFromCreatorResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_TokenfactoryModuleState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_TokenfactoryModuleState() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::injective::tokenfactory::v1beta1::QueryModuleStateRequest, ::injective::tokenfactory::v1beta1::QueryModuleStateResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::injective::tokenfactory::v1beta1::QueryModuleStateRequest, ::injective::tokenfactory::v1beta1::QueryModuleStateResponse>* streamer) {
                       return this->StreamedTokenfactoryModuleState(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_TokenfactoryModuleState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status TokenfactoryModuleState(::grpc::ServerContext* /*context*/, const ::injective::tokenfactory::v1beta1::QueryModuleStateRequest* /*request*/, ::injective::tokenfactory::v1beta1::QueryModuleStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedTokenfactoryModuleState(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::injective::tokenfactory::v1beta1::QueryModuleStateRequest,::injective::tokenfactory::v1beta1::QueryModuleStateResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Params<WithStreamedUnaryMethod_DenomAuthorityMetadata<WithStreamedUnaryMethod_DenomsFromCreator<WithStreamedUnaryMethod_TokenfactoryModuleState<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Params<WithStreamedUnaryMethod_DenomAuthorityMetadata<WithStreamedUnaryMethod_DenomsFromCreator<WithStreamedUnaryMethod_TokenfactoryModuleState<Service > > > > StreamedService;
};

}  // namespace v1beta1
}  // namespace tokenfactory
}  // namespace injective


#endif  // GRPC_injective_2ftokenfactory_2fv1beta1_2fquery_2eproto__INCLUDED

// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: injective/tokenfactory/v1beta1/tx.proto
#ifndef GRPC_injective_2ftokenfactory_2fv1beta1_2ftx_2eproto__INCLUDED
#define GRPC_injective_2ftokenfactory_2fv1beta1_2ftx_2eproto__INCLUDED

#include "injective/tokenfactory/v1beta1/tx.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace injective {
namespace tokenfactory {
namespace v1beta1 {

// Msg defines the tokefactory module's gRPC message service.
class Msg final {
 public:
  static constexpr char const* service_full_name() {
    return "injective.tokenfactory.v1beta1.Msg";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status CreateDenom(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::MsgCreateDenom& request, ::injective::tokenfactory::v1beta1::MsgCreateDenomResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::tokenfactory::v1beta1::MsgCreateDenomResponse>> AsyncCreateDenom(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::MsgCreateDenom& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::tokenfactory::v1beta1::MsgCreateDenomResponse>>(AsyncCreateDenomRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::tokenfactory::v1beta1::MsgCreateDenomResponse>> PrepareAsyncCreateDenom(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::MsgCreateDenom& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::tokenfactory::v1beta1::MsgCreateDenomResponse>>(PrepareAsyncCreateDenomRaw(context, request, cq));
    }
    virtual ::grpc::Status Mint(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::MsgMint& request, ::injective::tokenfactory::v1beta1::MsgMintResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::tokenfactory::v1beta1::MsgMintResponse>> AsyncMint(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::MsgMint& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::tokenfactory::v1beta1::MsgMintResponse>>(AsyncMintRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::tokenfactory::v1beta1::MsgMintResponse>> PrepareAsyncMint(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::MsgMint& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::tokenfactory::v1beta1::MsgMintResponse>>(PrepareAsyncMintRaw(context, request, cq));
    }
    virtual ::grpc::Status Burn(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::MsgBurn& request, ::injective::tokenfactory::v1beta1::MsgBurnResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::tokenfactory::v1beta1::MsgBurnResponse>> AsyncBurn(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::MsgBurn& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::tokenfactory::v1beta1::MsgBurnResponse>>(AsyncBurnRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::tokenfactory::v1beta1::MsgBurnResponse>> PrepareAsyncBurn(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::MsgBurn& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::tokenfactory::v1beta1::MsgBurnResponse>>(PrepareAsyncBurnRaw(context, request, cq));
    }
    virtual ::grpc::Status ChangeAdmin(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::MsgChangeAdmin& request, ::injective::tokenfactory::v1beta1::MsgChangeAdminResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::tokenfactory::v1beta1::MsgChangeAdminResponse>> AsyncChangeAdmin(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::MsgChangeAdmin& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::tokenfactory::v1beta1::MsgChangeAdminResponse>>(AsyncChangeAdminRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::tokenfactory::v1beta1::MsgChangeAdminResponse>> PrepareAsyncChangeAdmin(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::MsgChangeAdmin& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::tokenfactory::v1beta1::MsgChangeAdminResponse>>(PrepareAsyncChangeAdminRaw(context, request, cq));
    }
    virtual ::grpc::Status SetDenomMetadata(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::MsgSetDenomMetadata& request, ::injective::tokenfactory::v1beta1::MsgSetDenomMetadataResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::tokenfactory::v1beta1::MsgSetDenomMetadataResponse>> AsyncSetDenomMetadata(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::MsgSetDenomMetadata& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::tokenfactory::v1beta1::MsgSetDenomMetadataResponse>>(AsyncSetDenomMetadataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::tokenfactory::v1beta1::MsgSetDenomMetadataResponse>> PrepareAsyncSetDenomMetadata(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::MsgSetDenomMetadata& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::tokenfactory::v1beta1::MsgSetDenomMetadataResponse>>(PrepareAsyncSetDenomMetadataRaw(context, request, cq));
    }
    virtual ::grpc::Status UpdateParams(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::MsgUpdateParams& request, ::injective::tokenfactory::v1beta1::MsgUpdateParamsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::tokenfactory::v1beta1::MsgUpdateParamsResponse>> AsyncUpdateParams(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::MsgUpdateParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::tokenfactory::v1beta1::MsgUpdateParamsResponse>>(AsyncUpdateParamsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::tokenfactory::v1beta1::MsgUpdateParamsResponse>> PrepareAsyncUpdateParams(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::MsgUpdateParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::tokenfactory::v1beta1::MsgUpdateParamsResponse>>(PrepareAsyncUpdateParamsRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void CreateDenom(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::MsgCreateDenom* request, ::injective::tokenfactory::v1beta1::MsgCreateDenomResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateDenom(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::MsgCreateDenom* request, ::injective::tokenfactory::v1beta1::MsgCreateDenomResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Mint(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::MsgMint* request, ::injective::tokenfactory::v1beta1::MsgMintResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Mint(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::MsgMint* request, ::injective::tokenfactory::v1beta1::MsgMintResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Burn(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::MsgBurn* request, ::injective::tokenfactory::v1beta1::MsgBurnResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Burn(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::MsgBurn* request, ::injective::tokenfactory::v1beta1::MsgBurnResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ChangeAdmin(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::MsgChangeAdmin* request, ::injective::tokenfactory::v1beta1::MsgChangeAdminResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ChangeAdmin(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::MsgChangeAdmin* request, ::injective::tokenfactory::v1beta1::MsgChangeAdminResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void SetDenomMetadata(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::MsgSetDenomMetadata* request, ::injective::tokenfactory::v1beta1::MsgSetDenomMetadataResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetDenomMetadata(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::MsgSetDenomMetadata* request, ::injective::tokenfactory::v1beta1::MsgSetDenomMetadataResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void UpdateParams(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::MsgUpdateParams* request, ::injective::tokenfactory::v1beta1::MsgUpdateParamsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateParams(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::MsgUpdateParams* request, ::injective::tokenfactory::v1beta1::MsgUpdateParamsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::tokenfactory::v1beta1::MsgCreateDenomResponse>* AsyncCreateDenomRaw(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::MsgCreateDenom& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::tokenfactory::v1beta1::MsgCreateDenomResponse>* PrepareAsyncCreateDenomRaw(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::MsgCreateDenom& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::tokenfactory::v1beta1::MsgMintResponse>* AsyncMintRaw(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::MsgMint& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::tokenfactory::v1beta1::MsgMintResponse>* PrepareAsyncMintRaw(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::MsgMint& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::tokenfactory::v1beta1::MsgBurnResponse>* AsyncBurnRaw(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::MsgBurn& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::tokenfactory::v1beta1::MsgBurnResponse>* PrepareAsyncBurnRaw(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::MsgBurn& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::tokenfactory::v1beta1::MsgChangeAdminResponse>* AsyncChangeAdminRaw(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::MsgChangeAdmin& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::tokenfactory::v1beta1::MsgChangeAdminResponse>* PrepareAsyncChangeAdminRaw(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::MsgChangeAdmin& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::tokenfactory::v1beta1::MsgSetDenomMetadataResponse>* AsyncSetDenomMetadataRaw(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::MsgSetDenomMetadata& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::tokenfactory::v1beta1::MsgSetDenomMetadataResponse>* PrepareAsyncSetDenomMetadataRaw(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::MsgSetDenomMetadata& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::tokenfactory::v1beta1::MsgUpdateParamsResponse>* AsyncUpdateParamsRaw(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::MsgUpdateParams& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::tokenfactory::v1beta1::MsgUpdateParamsResponse>* PrepareAsyncUpdateParamsRaw(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::MsgUpdateParams& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status CreateDenom(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::MsgCreateDenom& request, ::injective::tokenfactory::v1beta1::MsgCreateDenomResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::tokenfactory::v1beta1::MsgCreateDenomResponse>> AsyncCreateDenom(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::MsgCreateDenom& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::tokenfactory::v1beta1::MsgCreateDenomResponse>>(AsyncCreateDenomRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::tokenfactory::v1beta1::MsgCreateDenomResponse>> PrepareAsyncCreateDenom(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::MsgCreateDenom& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::tokenfactory::v1beta1::MsgCreateDenomResponse>>(PrepareAsyncCreateDenomRaw(context, request, cq));
    }
    ::grpc::Status Mint(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::MsgMint& request, ::injective::tokenfactory::v1beta1::MsgMintResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::tokenfactory::v1beta1::MsgMintResponse>> AsyncMint(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::MsgMint& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::tokenfactory::v1beta1::MsgMintResponse>>(AsyncMintRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::tokenfactory::v1beta1::MsgMintResponse>> PrepareAsyncMint(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::MsgMint& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::tokenfactory::v1beta1::MsgMintResponse>>(PrepareAsyncMintRaw(context, request, cq));
    }
    ::grpc::Status Burn(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::MsgBurn& request, ::injective::tokenfactory::v1beta1::MsgBurnResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::tokenfactory::v1beta1::MsgBurnResponse>> AsyncBurn(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::MsgBurn& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::tokenfactory::v1beta1::MsgBurnResponse>>(AsyncBurnRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::tokenfactory::v1beta1::MsgBurnResponse>> PrepareAsyncBurn(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::MsgBurn& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::tokenfactory::v1beta1::MsgBurnResponse>>(PrepareAsyncBurnRaw(context, request, cq));
    }
    ::grpc::Status ChangeAdmin(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::MsgChangeAdmin& request, ::injective::tokenfactory::v1beta1::MsgChangeAdminResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::tokenfactory::v1beta1::MsgChangeAdminResponse>> AsyncChangeAdmin(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::MsgChangeAdmin& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::tokenfactory::v1beta1::MsgChangeAdminResponse>>(AsyncChangeAdminRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::tokenfactory::v1beta1::MsgChangeAdminResponse>> PrepareAsyncChangeAdmin(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::MsgChangeAdmin& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::tokenfactory::v1beta1::MsgChangeAdminResponse>>(PrepareAsyncChangeAdminRaw(context, request, cq));
    }
    ::grpc::Status SetDenomMetadata(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::MsgSetDenomMetadata& request, ::injective::tokenfactory::v1beta1::MsgSetDenomMetadataResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::tokenfactory::v1beta1::MsgSetDenomMetadataResponse>> AsyncSetDenomMetadata(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::MsgSetDenomMetadata& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::tokenfactory::v1beta1::MsgSetDenomMetadataResponse>>(AsyncSetDenomMetadataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::tokenfactory::v1beta1::MsgSetDenomMetadataResponse>> PrepareAsyncSetDenomMetadata(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::MsgSetDenomMetadata& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::tokenfactory::v1beta1::MsgSetDenomMetadataResponse>>(PrepareAsyncSetDenomMetadataRaw(context, request, cq));
    }
    ::grpc::Status UpdateParams(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::MsgUpdateParams& request, ::injective::tokenfactory::v1beta1::MsgUpdateParamsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::tokenfactory::v1beta1::MsgUpdateParamsResponse>> AsyncUpdateParams(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::MsgUpdateParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::tokenfactory::v1beta1::MsgUpdateParamsResponse>>(AsyncUpdateParamsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::tokenfactory::v1beta1::MsgUpdateParamsResponse>> PrepareAsyncUpdateParams(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::MsgUpdateParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::tokenfactory::v1beta1::MsgUpdateParamsResponse>>(PrepareAsyncUpdateParamsRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void CreateDenom(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::MsgCreateDenom* request, ::injective::tokenfactory::v1beta1::MsgCreateDenomResponse* response, std::function<void(::grpc::Status)>) override;
      void CreateDenom(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::MsgCreateDenom* request, ::injective::tokenfactory::v1beta1::MsgCreateDenomResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Mint(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::MsgMint* request, ::injective::tokenfactory::v1beta1::MsgMintResponse* response, std::function<void(::grpc::Status)>) override;
      void Mint(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::MsgMint* request, ::injective::tokenfactory::v1beta1::MsgMintResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Burn(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::MsgBurn* request, ::injective::tokenfactory::v1beta1::MsgBurnResponse* response, std::function<void(::grpc::Status)>) override;
      void Burn(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::MsgBurn* request, ::injective::tokenfactory::v1beta1::MsgBurnResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ChangeAdmin(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::MsgChangeAdmin* request, ::injective::tokenfactory::v1beta1::MsgChangeAdminResponse* response, std::function<void(::grpc::Status)>) override;
      void ChangeAdmin(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::MsgChangeAdmin* request, ::injective::tokenfactory::v1beta1::MsgChangeAdminResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SetDenomMetadata(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::MsgSetDenomMetadata* request, ::injective::tokenfactory::v1beta1::MsgSetDenomMetadataResponse* response, std::function<void(::grpc::Status)>) override;
      void SetDenomMetadata(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::MsgSetDenomMetadata* request, ::injective::tokenfactory::v1beta1::MsgSetDenomMetadataResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UpdateParams(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::MsgUpdateParams* request, ::injective::tokenfactory::v1beta1::MsgUpdateParamsResponse* response, std::function<void(::grpc::Status)>) override;
      void UpdateParams(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::MsgUpdateParams* request, ::injective::tokenfactory::v1beta1::MsgUpdateParamsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::injective::tokenfactory::v1beta1::MsgCreateDenomResponse>* AsyncCreateDenomRaw(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::MsgCreateDenom& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::tokenfactory::v1beta1::MsgCreateDenomResponse>* PrepareAsyncCreateDenomRaw(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::MsgCreateDenom& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::tokenfactory::v1beta1::MsgMintResponse>* AsyncMintRaw(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::MsgMint& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::tokenfactory::v1beta1::MsgMintResponse>* PrepareAsyncMintRaw(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::MsgMint& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::tokenfactory::v1beta1::MsgBurnResponse>* AsyncBurnRaw(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::MsgBurn& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::tokenfactory::v1beta1::MsgBurnResponse>* PrepareAsyncBurnRaw(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::MsgBurn& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::tokenfactory::v1beta1::MsgChangeAdminResponse>* AsyncChangeAdminRaw(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::MsgChangeAdmin& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::tokenfactory::v1beta1::MsgChangeAdminResponse>* PrepareAsyncChangeAdminRaw(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::MsgChangeAdmin& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::tokenfactory::v1beta1::MsgSetDenomMetadataResponse>* AsyncSetDenomMetadataRaw(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::MsgSetDenomMetadata& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::tokenfactory::v1beta1::MsgSetDenomMetadataResponse>* PrepareAsyncSetDenomMetadataRaw(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::MsgSetDenomMetadata& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::tokenfactory::v1beta1::MsgUpdateParamsResponse>* AsyncUpdateParamsRaw(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::MsgUpdateParams& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::tokenfactory::v1beta1::MsgUpdateParamsResponse>* PrepareAsyncUpdateParamsRaw(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::MsgUpdateParams& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_CreateDenom_;
    const ::grpc::internal::RpcMethod rpcmethod_Mint_;
    const ::grpc::internal::RpcMethod rpcmethod_Burn_;
    const ::grpc::internal::RpcMethod rpcmethod_ChangeAdmin_;
    const ::grpc::internal::RpcMethod rpcmethod_SetDenomMetadata_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateParams_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status CreateDenom(::grpc::ServerContext* context, const ::injective::tokenfactory::v1beta1::MsgCreateDenom* request, ::injective::tokenfactory::v1beta1::MsgCreateDenomResponse* response);
    virtual ::grpc::Status Mint(::grpc::ServerContext* context, const ::injective::tokenfactory::v1beta1::MsgMint* request, ::injective::tokenfactory::v1beta1::MsgMintResponse* response);
    virtual ::grpc::Status Burn(::grpc::ServerContext* context, const ::injective::tokenfactory::v1beta1::MsgBurn* request, ::injective::tokenfactory::v1beta1::MsgBurnResponse* response);
    virtual ::grpc::Status ChangeAdmin(::grpc::ServerContext* context, const ::injective::tokenfactory::v1beta1::MsgChangeAdmin* request, ::injective::tokenfactory::v1beta1::MsgChangeAdminResponse* response);
    virtual ::grpc::Status SetDenomMetadata(::grpc::ServerContext* context, const ::injective::tokenfactory::v1beta1::MsgSetDenomMetadata* request, ::injective::tokenfactory::v1beta1::MsgSetDenomMetadataResponse* response);
    virtual ::grpc::Status UpdateParams(::grpc::ServerContext* context, const ::injective::tokenfactory::v1beta1::MsgUpdateParams* request, ::injective::tokenfactory::v1beta1::MsgUpdateParamsResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateDenom : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateDenom() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_CreateDenom() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateDenom(::grpc::ServerContext* /*context*/, const ::injective::tokenfactory::v1beta1::MsgCreateDenom* /*request*/, ::injective::tokenfactory::v1beta1::MsgCreateDenomResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateDenom(::grpc::ServerContext* context, ::injective::tokenfactory::v1beta1::MsgCreateDenom* request, ::grpc::ServerAsyncResponseWriter< ::injective::tokenfactory::v1beta1::MsgCreateDenomResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Mint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Mint() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Mint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Mint(::grpc::ServerContext* /*context*/, const ::injective::tokenfactory::v1beta1::MsgMint* /*request*/, ::injective::tokenfactory::v1beta1::MsgMintResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMint(::grpc::ServerContext* context, ::injective::tokenfactory::v1beta1::MsgMint* request, ::grpc::ServerAsyncResponseWriter< ::injective::tokenfactory::v1beta1::MsgMintResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Burn : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Burn() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Burn() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Burn(::grpc::ServerContext* /*context*/, const ::injective::tokenfactory::v1beta1::MsgBurn* /*request*/, ::injective::tokenfactory::v1beta1::MsgBurnResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBurn(::grpc::ServerContext* context, ::injective::tokenfactory::v1beta1::MsgBurn* request, ::grpc::ServerAsyncResponseWriter< ::injective::tokenfactory::v1beta1::MsgBurnResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ChangeAdmin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ChangeAdmin() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_ChangeAdmin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ChangeAdmin(::grpc::ServerContext* /*context*/, const ::injective::tokenfactory::v1beta1::MsgChangeAdmin* /*request*/, ::injective::tokenfactory::v1beta1::MsgChangeAdminResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestChangeAdmin(::grpc::ServerContext* context, ::injective::tokenfactory::v1beta1::MsgChangeAdmin* request, ::grpc::ServerAsyncResponseWriter< ::injective::tokenfactory::v1beta1::MsgChangeAdminResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetDenomMetadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetDenomMetadata() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_SetDenomMetadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetDenomMetadata(::grpc::ServerContext* /*context*/, const ::injective::tokenfactory::v1beta1::MsgSetDenomMetadata* /*request*/, ::injective::tokenfactory::v1beta1::MsgSetDenomMetadataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetDenomMetadata(::grpc::ServerContext* context, ::injective::tokenfactory::v1beta1::MsgSetDenomMetadata* request, ::grpc::ServerAsyncResponseWriter< ::injective::tokenfactory::v1beta1::MsgSetDenomMetadataResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateParams : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateParams() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_UpdateParams() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateParams(::grpc::ServerContext* /*context*/, const ::injective::tokenfactory::v1beta1::MsgUpdateParams* /*request*/, ::injective::tokenfactory::v1beta1::MsgUpdateParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateParams(::grpc::ServerContext* context, ::injective::tokenfactory::v1beta1::MsgUpdateParams* request, ::grpc::ServerAsyncResponseWriter< ::injective::tokenfactory::v1beta1::MsgUpdateParamsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_CreateDenom<WithAsyncMethod_Mint<WithAsyncMethod_Burn<WithAsyncMethod_ChangeAdmin<WithAsyncMethod_SetDenomMetadata<WithAsyncMethod_UpdateParams<Service > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_CreateDenom : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateDenom() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::injective::tokenfactory::v1beta1::MsgCreateDenom, ::injective::tokenfactory::v1beta1::MsgCreateDenomResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::injective::tokenfactory::v1beta1::MsgCreateDenom* request, ::injective::tokenfactory::v1beta1::MsgCreateDenomResponse* response) { return this->CreateDenom(context, request, response); }));}
    void SetMessageAllocatorFor_CreateDenom(
        ::grpc::MessageAllocator< ::injective::tokenfactory::v1beta1::MsgCreateDenom, ::injective::tokenfactory::v1beta1::MsgCreateDenomResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::injective::tokenfactory::v1beta1::MsgCreateDenom, ::injective::tokenfactory::v1beta1::MsgCreateDenomResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateDenom() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateDenom(::grpc::ServerContext* /*context*/, const ::injective::tokenfactory::v1beta1::MsgCreateDenom* /*request*/, ::injective::tokenfactory::v1beta1::MsgCreateDenomResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateDenom(
      ::grpc::CallbackServerContext* /*context*/, const ::injective::tokenfactory::v1beta1::MsgCreateDenom* /*request*/, ::injective::tokenfactory::v1beta1::MsgCreateDenomResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Mint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Mint() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::injective::tokenfactory::v1beta1::MsgMint, ::injective::tokenfactory::v1beta1::MsgMintResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::injective::tokenfactory::v1beta1::MsgMint* request, ::injective::tokenfactory::v1beta1::MsgMintResponse* response) { return this->Mint(context, request, response); }));}
    void SetMessageAllocatorFor_Mint(
        ::grpc::MessageAllocator< ::injective::tokenfactory::v1beta1::MsgMint, ::injective::tokenfactory::v1beta1::MsgMintResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::injective::tokenfactory::v1beta1::MsgMint, ::injective::tokenfactory::v1beta1::MsgMintResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Mint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Mint(::grpc::ServerContext* /*context*/, const ::injective::tokenfactory::v1beta1::MsgMint* /*request*/, ::injective::tokenfactory::v1beta1::MsgMintResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Mint(
      ::grpc::CallbackServerContext* /*context*/, const ::injective::tokenfactory::v1beta1::MsgMint* /*request*/, ::injective::tokenfactory::v1beta1::MsgMintResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Burn : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Burn() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::injective::tokenfactory::v1beta1::MsgBurn, ::injective::tokenfactory::v1beta1::MsgBurnResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::injective::tokenfactory::v1beta1::MsgBurn* request, ::injective::tokenfactory::v1beta1::MsgBurnResponse* response) { return this->Burn(context, request, response); }));}
    void SetMessageAllocatorFor_Burn(
        ::grpc::MessageAllocator< ::injective::tokenfactory::v1beta1::MsgBurn, ::injective::tokenfactory::v1beta1::MsgBurnResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::injective::tokenfactory::v1beta1::MsgBurn, ::injective::tokenfactory::v1beta1::MsgBurnResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Burn() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Burn(::grpc::ServerContext* /*context*/, const ::injective::tokenfactory::v1beta1::MsgBurn* /*request*/, ::injective::tokenfactory::v1beta1::MsgBurnResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Burn(
      ::grpc::CallbackServerContext* /*context*/, const ::injective::tokenfactory::v1beta1::MsgBurn* /*request*/, ::injective::tokenfactory::v1beta1::MsgBurnResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ChangeAdmin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ChangeAdmin() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::injective::tokenfactory::v1beta1::MsgChangeAdmin, ::injective::tokenfactory::v1beta1::MsgChangeAdminResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::injective::tokenfactory::v1beta1::MsgChangeAdmin* request, ::injective::tokenfactory::v1beta1::MsgChangeAdminResponse* response) { return this->ChangeAdmin(context, request, response); }));}
    void SetMessageAllocatorFor_ChangeAdmin(
        ::grpc::MessageAllocator< ::injective::tokenfactory::v1beta1::MsgChangeAdmin, ::injective::tokenfactory::v1beta1::MsgChangeAdminResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::injective::tokenfactory::v1beta1::MsgChangeAdmin, ::injective::tokenfactory::v1beta1::MsgChangeAdminResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ChangeAdmin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ChangeAdmin(::grpc::ServerContext* /*context*/, const ::injective::tokenfactory::v1beta1::MsgChangeAdmin* /*request*/, ::injective::tokenfactory::v1beta1::MsgChangeAdminResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ChangeAdmin(
      ::grpc::CallbackServerContext* /*context*/, const ::injective::tokenfactory::v1beta1::MsgChangeAdmin* /*request*/, ::injective::tokenfactory::v1beta1::MsgChangeAdminResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SetDenomMetadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SetDenomMetadata() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::injective::tokenfactory::v1beta1::MsgSetDenomMetadata, ::injective::tokenfactory::v1beta1::MsgSetDenomMetadataResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::injective::tokenfactory::v1beta1::MsgSetDenomMetadata* request, ::injective::tokenfactory::v1beta1::MsgSetDenomMetadataResponse* response) { return this->SetDenomMetadata(context, request, response); }));}
    void SetMessageAllocatorFor_SetDenomMetadata(
        ::grpc::MessageAllocator< ::injective::tokenfactory::v1beta1::MsgSetDenomMetadata, ::injective::tokenfactory::v1beta1::MsgSetDenomMetadataResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::injective::tokenfactory::v1beta1::MsgSetDenomMetadata, ::injective::tokenfactory::v1beta1::MsgSetDenomMetadataResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SetDenomMetadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetDenomMetadata(::grpc::ServerContext* /*context*/, const ::injective::tokenfactory::v1beta1::MsgSetDenomMetadata* /*request*/, ::injective::tokenfactory::v1beta1::MsgSetDenomMetadataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetDenomMetadata(
      ::grpc::CallbackServerContext* /*context*/, const ::injective::tokenfactory::v1beta1::MsgSetDenomMetadata* /*request*/, ::injective::tokenfactory::v1beta1::MsgSetDenomMetadataResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdateParams : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdateParams() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::injective::tokenfactory::v1beta1::MsgUpdateParams, ::injective::tokenfactory::v1beta1::MsgUpdateParamsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::injective::tokenfactory::v1beta1::MsgUpdateParams* request, ::injective::tokenfactory::v1beta1::MsgUpdateParamsResponse* response) { return this->UpdateParams(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateParams(
        ::grpc::MessageAllocator< ::injective::tokenfactory::v1beta1::MsgUpdateParams, ::injective::tokenfactory::v1beta1::MsgUpdateParamsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::injective::tokenfactory::v1beta1::MsgUpdateParams, ::injective::tokenfactory::v1beta1::MsgUpdateParamsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdateParams() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateParams(::grpc::ServerContext* /*context*/, const ::injective::tokenfactory::v1beta1::MsgUpdateParams* /*request*/, ::injective::tokenfactory::v1beta1::MsgUpdateParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateParams(
      ::grpc::CallbackServerContext* /*context*/, const ::injective::tokenfactory::v1beta1::MsgUpdateParams* /*request*/, ::injective::tokenfactory::v1beta1::MsgUpdateParamsResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_CreateDenom<WithCallbackMethod_Mint<WithCallbackMethod_Burn<WithCallbackMethod_ChangeAdmin<WithCallbackMethod_SetDenomMetadata<WithCallbackMethod_UpdateParams<Service > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_CreateDenom : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateDenom() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_CreateDenom() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateDenom(::grpc::ServerContext* /*context*/, const ::injective::tokenfactory::v1beta1::MsgCreateDenom* /*request*/, ::injective::tokenfactory::v1beta1::MsgCreateDenomResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Mint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Mint() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Mint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Mint(::grpc::ServerContext* /*context*/, const ::injective::tokenfactory::v1beta1::MsgMint* /*request*/, ::injective::tokenfactory::v1beta1::MsgMintResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Burn : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Burn() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Burn() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Burn(::grpc::ServerContext* /*context*/, const ::injective::tokenfactory::v1beta1::MsgBurn* /*request*/, ::injective::tokenfactory::v1beta1::MsgBurnResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ChangeAdmin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ChangeAdmin() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_ChangeAdmin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ChangeAdmin(::grpc::ServerContext* /*context*/, const ::injective::tokenfactory::v1beta1::MsgChangeAdmin* /*request*/, ::injective::tokenfactory::v1beta1::MsgChangeAdminResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetDenomMetadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetDenomMetadata() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_SetDenomMetadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetDenomMetadata(::grpc::ServerContext* /*context*/, const ::injective::tokenfactory::v1beta1::MsgSetDenomMetadata* /*request*/, ::injective::tokenfactory::v1beta1::MsgSetDenomMetadataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateParams : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateParams() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_UpdateParams() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateParams(::grpc::ServerContext* /*context*/, const ::injective::tokenfactory::v1beta1::MsgUpdateParams* /*request*/, ::injective::tokenfactory::v1beta1::MsgUpdateParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateDenom : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateDenom() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_CreateDenom() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateDenom(::grpc::ServerContext* /*context*/, const ::injective::tokenfactory::v1beta1::MsgCreateDenom* /*request*/, ::injective::tokenfactory::v1beta1::MsgCreateDenomResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateDenom(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Mint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Mint() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Mint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Mint(::grpc::ServerContext* /*context*/, const ::injective::tokenfactory::v1beta1::MsgMint* /*request*/, ::injective::tokenfactory::v1beta1::MsgMintResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMint(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Burn : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Burn() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_Burn() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Burn(::grpc::ServerContext* /*context*/, const ::injective::tokenfactory::v1beta1::MsgBurn* /*request*/, ::injective::tokenfactory::v1beta1::MsgBurnResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBurn(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ChangeAdmin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ChangeAdmin() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_ChangeAdmin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ChangeAdmin(::grpc::ServerContext* /*context*/, const ::injective::tokenfactory::v1beta1::MsgChangeAdmin* /*request*/, ::injective::tokenfactory::v1beta1::MsgChangeAdminResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestChangeAdmin(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetDenomMetadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetDenomMetadata() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_SetDenomMetadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetDenomMetadata(::grpc::ServerContext* /*context*/, const ::injective::tokenfactory::v1beta1::MsgSetDenomMetadata* /*request*/, ::injective::tokenfactory::v1beta1::MsgSetDenomMetadataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetDenomMetadata(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateParams : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateParams() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_UpdateParams() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateParams(::grpc::ServerContext* /*context*/, const ::injective::tokenfactory::v1beta1::MsgUpdateParams* /*request*/, ::injective::tokenfactory::v1beta1::MsgUpdateParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateParams(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateDenom : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateDenom() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateDenom(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateDenom() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateDenom(::grpc::ServerContext* /*context*/, const ::injective::tokenfactory::v1beta1::MsgCreateDenom* /*request*/, ::injective::tokenfactory::v1beta1::MsgCreateDenomResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateDenom(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Mint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Mint() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Mint(context, request, response); }));
    }
    ~WithRawCallbackMethod_Mint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Mint(::grpc::ServerContext* /*context*/, const ::injective::tokenfactory::v1beta1::MsgMint* /*request*/, ::injective::tokenfactory::v1beta1::MsgMintResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Mint(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Burn : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Burn() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Burn(context, request, response); }));
    }
    ~WithRawCallbackMethod_Burn() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Burn(::grpc::ServerContext* /*context*/, const ::injective::tokenfactory::v1beta1::MsgBurn* /*request*/, ::injective::tokenfactory::v1beta1::MsgBurnResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Burn(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ChangeAdmin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ChangeAdmin() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ChangeAdmin(context, request, response); }));
    }
    ~WithRawCallbackMethod_ChangeAdmin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ChangeAdmin(::grpc::ServerContext* /*context*/, const ::injective::tokenfactory::v1beta1::MsgChangeAdmin* /*request*/, ::injective::tokenfactory::v1beta1::MsgChangeAdminResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ChangeAdmin(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SetDenomMetadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SetDenomMetadata() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetDenomMetadata(context, request, response); }));
    }
    ~WithRawCallbackMethod_SetDenomMetadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetDenomMetadata(::grpc::ServerContext* /*context*/, const ::injective::tokenfactory::v1beta1::MsgSetDenomMetadata* /*request*/, ::injective::tokenfactory::v1beta1::MsgSetDenomMetadataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetDenomMetadata(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdateParams : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdateParams() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateParams(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdateParams() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateParams(::grpc::ServerContext* /*context*/, const ::injective::tokenfactory::v1beta1::MsgUpdateParams* /*request*/, ::injective::tokenfactory::v1beta1::MsgUpdateParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateParams(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateDenom : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateDenom() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::injective::tokenfactory::v1beta1::MsgCreateDenom, ::injective::tokenfactory::v1beta1::MsgCreateDenomResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::injective::tokenfactory::v1beta1::MsgCreateDenom, ::injective::tokenfactory::v1beta1::MsgCreateDenomResponse>* streamer) {
                       return this->StreamedCreateDenom(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateDenom() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateDenom(::grpc::ServerContext* /*context*/, const ::injective::tokenfactory::v1beta1::MsgCreateDenom* /*request*/, ::injective::tokenfactory::v1beta1::MsgCreateDenomResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateDenom(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::injective::tokenfactory::v1beta1::MsgCreateDenom,::injective::tokenfactory::v1beta1::MsgCreateDenomResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Mint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Mint() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::injective::tokenfactory::v1beta1::MsgMint, ::injective::tokenfactory::v1beta1::MsgMintResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::injective::tokenfactory::v1beta1::MsgMint, ::injective::tokenfactory::v1beta1::MsgMintResponse>* streamer) {
                       return this->StreamedMint(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Mint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Mint(::grpc::ServerContext* /*context*/, const ::injective::tokenfactory::v1beta1::MsgMint* /*request*/, ::injective::tokenfactory::v1beta1::MsgMintResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedMint(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::injective::tokenfactory::v1beta1::MsgMint,::injective::tokenfactory::v1beta1::MsgMintResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Burn : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Burn() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::injective::tokenfactory::v1beta1::MsgBurn, ::injective::tokenfactory::v1beta1::MsgBurnResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::injective::tokenfactory::v1beta1::MsgBurn, ::injective::tokenfactory::v1beta1::MsgBurnResponse>* streamer) {
                       return this->StreamedBurn(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Burn() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Burn(::grpc::ServerContext* /*context*/, const ::injective::tokenfactory::v1beta1::MsgBurn* /*request*/, ::injective::tokenfactory::v1beta1::MsgBurnResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedBurn(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::injective::tokenfactory::v1beta1::MsgBurn,::injective::tokenfactory::v1beta1::MsgBurnResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ChangeAdmin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ChangeAdmin() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::injective::tokenfactory::v1beta1::MsgChangeAdmin, ::injective::tokenfactory::v1beta1::MsgChangeAdminResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::injective::tokenfactory::v1beta1::MsgChangeAdmin, ::injective::tokenfactory::v1beta1::MsgChangeAdminResponse>* streamer) {
                       return this->StreamedChangeAdmin(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ChangeAdmin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ChangeAdmin(::grpc::ServerContext* /*context*/, const ::injective::tokenfactory::v1beta1::MsgChangeAdmin* /*request*/, ::injective::tokenfactory::v1beta1::MsgChangeAdminResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedChangeAdmin(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::injective::tokenfactory::v1beta1::MsgChangeAdmin,::injective::tokenfactory::v1beta1::MsgChangeAdminResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetDenomMetadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetDenomMetadata() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::injective::tokenfactory::v1beta1::MsgSetDenomMetadata, ::injective::tokenfactory::v1beta1::MsgSetDenomMetadataResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::injective::tokenfactory::v1beta1::MsgSetDenomMetadata, ::injective::tokenfactory::v1beta1::MsgSetDenomMetadataResponse>* streamer) {
                       return this->StreamedSetDenomMetadata(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetDenomMetadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetDenomMetadata(::grpc::ServerContext* /*context*/, const ::injective::tokenfactory::v1beta1::MsgSetDenomMetadata* /*request*/, ::injective::tokenfactory::v1beta1::MsgSetDenomMetadataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetDenomMetadata(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::injective::tokenfactory::v1beta1::MsgSetDenomMetadata,::injective::tokenfactory::v1beta1::MsgSetDenomMetadataResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateParams : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateParams() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::injective::tokenfactory::v1beta1::MsgUpdateParams, ::injective::tokenfactory::v1beta1::MsgUpdateParamsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::injective::tokenfactory::v1beta1::MsgUpdateParams, ::injective::tokenfactory::v1beta1::MsgUpdateParamsResponse>* streamer) {
                       return this->StreamedUpdateParams(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateParams() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateParams(::grpc::ServerContext* /*context*/, const ::injective::tokenfactory::v1beta1::MsgUpdateParams* /*request*/, ::injective::tokenfactory::v1beta1::MsgUpdateParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateParams(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::injective::tokenfactory::v1beta1::MsgUpdateParams,::injective::tokenfactory::v1beta1::MsgUpdateParamsResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_CreateDenom<WithStreamedUnaryMethod_Mint<WithStreamedUnaryMethod_Burn<WithStreamedUnaryMethod_ChangeAdmin<WithStreamedUnaryMethod_SetDenomMetadata<WithStreamedUnaryMethod_UpdateParams<Service > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_CreateDenom<WithStreamedUnaryMethod_Mint<WithStreamedUnaryMethod_Burn<WithStreamedUnaryMethod_ChangeAdmin<WithStreamedUnaryMethod_SetDenomMetadata<WithStreamedUnaryMethod_UpdateParams<Service > > > > > > StreamedService;
};

}  // namespace v1beta1
}  // namespace tokenfactory
}  // namespace injective


#endif  // GRPC_injective_2ftokenfactory_2fv1beta1_2ftx_2eproto__INCLUDED

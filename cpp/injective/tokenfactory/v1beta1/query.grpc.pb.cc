// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: injective/tokenfactory/v1beta1/query.proto

#include "injective/tokenfactory/v1beta1/query.pb.h"
#include "injective/tokenfactory/v1beta1/query.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace injective {
namespace tokenfactory {
namespace v1beta1 {

static const char* Query_method_names[] = {
  "/injective.tokenfactory.v1beta1.Query/Params",
  "/injective.tokenfactory.v1beta1.Query/DenomAuthorityMetadata",
  "/injective.tokenfactory.v1beta1.Query/DenomsFromCreator",
  "/injective.tokenfactory.v1beta1.Query/TokenfactoryModuleState",
};

std::unique_ptr< Query::Stub> Query::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Query::Stub> stub(new Query::Stub(channel, options));
  return stub;
}

Query::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Params_(Query_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DenomAuthorityMetadata_(Query_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DenomsFromCreator_(Query_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_TokenfactoryModuleState_(Query_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Query::Stub::Params(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::QueryParamsRequest& request, ::injective::tokenfactory::v1beta1::QueryParamsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::tokenfactory::v1beta1::QueryParamsRequest, ::injective::tokenfactory::v1beta1::QueryParamsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Params_, context, request, response);
}

void Query::Stub::async::Params(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::QueryParamsRequest* request, ::injective::tokenfactory::v1beta1::QueryParamsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::tokenfactory::v1beta1::QueryParamsRequest, ::injective::tokenfactory::v1beta1::QueryParamsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Params_, context, request, response, std::move(f));
}

void Query::Stub::async::Params(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::QueryParamsRequest* request, ::injective::tokenfactory::v1beta1::QueryParamsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Params_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::tokenfactory::v1beta1::QueryParamsResponse>* Query::Stub::PrepareAsyncParamsRaw(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::QueryParamsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::tokenfactory::v1beta1::QueryParamsResponse, ::injective::tokenfactory::v1beta1::QueryParamsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Params_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::tokenfactory::v1beta1::QueryParamsResponse>* Query::Stub::AsyncParamsRaw(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::QueryParamsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncParamsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::DenomAuthorityMetadata(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::QueryDenomAuthorityMetadataRequest& request, ::injective::tokenfactory::v1beta1::QueryDenomAuthorityMetadataResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::tokenfactory::v1beta1::QueryDenomAuthorityMetadataRequest, ::injective::tokenfactory::v1beta1::QueryDenomAuthorityMetadataResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DenomAuthorityMetadata_, context, request, response);
}

void Query::Stub::async::DenomAuthorityMetadata(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::QueryDenomAuthorityMetadataRequest* request, ::injective::tokenfactory::v1beta1::QueryDenomAuthorityMetadataResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::tokenfactory::v1beta1::QueryDenomAuthorityMetadataRequest, ::injective::tokenfactory::v1beta1::QueryDenomAuthorityMetadataResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DenomAuthorityMetadata_, context, request, response, std::move(f));
}

void Query::Stub::async::DenomAuthorityMetadata(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::QueryDenomAuthorityMetadataRequest* request, ::injective::tokenfactory::v1beta1::QueryDenomAuthorityMetadataResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DenomAuthorityMetadata_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::tokenfactory::v1beta1::QueryDenomAuthorityMetadataResponse>* Query::Stub::PrepareAsyncDenomAuthorityMetadataRaw(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::QueryDenomAuthorityMetadataRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::tokenfactory::v1beta1::QueryDenomAuthorityMetadataResponse, ::injective::tokenfactory::v1beta1::QueryDenomAuthorityMetadataRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DenomAuthorityMetadata_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::tokenfactory::v1beta1::QueryDenomAuthorityMetadataResponse>* Query::Stub::AsyncDenomAuthorityMetadataRaw(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::QueryDenomAuthorityMetadataRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDenomAuthorityMetadataRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::DenomsFromCreator(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::QueryDenomsFromCreatorRequest& request, ::injective::tokenfactory::v1beta1::QueryDenomsFromCreatorResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::tokenfactory::v1beta1::QueryDenomsFromCreatorRequest, ::injective::tokenfactory::v1beta1::QueryDenomsFromCreatorResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DenomsFromCreator_, context, request, response);
}

void Query::Stub::async::DenomsFromCreator(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::QueryDenomsFromCreatorRequest* request, ::injective::tokenfactory::v1beta1::QueryDenomsFromCreatorResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::tokenfactory::v1beta1::QueryDenomsFromCreatorRequest, ::injective::tokenfactory::v1beta1::QueryDenomsFromCreatorResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DenomsFromCreator_, context, request, response, std::move(f));
}

void Query::Stub::async::DenomsFromCreator(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::QueryDenomsFromCreatorRequest* request, ::injective::tokenfactory::v1beta1::QueryDenomsFromCreatorResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DenomsFromCreator_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::tokenfactory::v1beta1::QueryDenomsFromCreatorResponse>* Query::Stub::PrepareAsyncDenomsFromCreatorRaw(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::QueryDenomsFromCreatorRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::tokenfactory::v1beta1::QueryDenomsFromCreatorResponse, ::injective::tokenfactory::v1beta1::QueryDenomsFromCreatorRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DenomsFromCreator_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::tokenfactory::v1beta1::QueryDenomsFromCreatorResponse>* Query::Stub::AsyncDenomsFromCreatorRaw(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::QueryDenomsFromCreatorRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDenomsFromCreatorRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::TokenfactoryModuleState(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::QueryModuleStateRequest& request, ::injective::tokenfactory::v1beta1::QueryModuleStateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::tokenfactory::v1beta1::QueryModuleStateRequest, ::injective::tokenfactory::v1beta1::QueryModuleStateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_TokenfactoryModuleState_, context, request, response);
}

void Query::Stub::async::TokenfactoryModuleState(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::QueryModuleStateRequest* request, ::injective::tokenfactory::v1beta1::QueryModuleStateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::tokenfactory::v1beta1::QueryModuleStateRequest, ::injective::tokenfactory::v1beta1::QueryModuleStateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TokenfactoryModuleState_, context, request, response, std::move(f));
}

void Query::Stub::async::TokenfactoryModuleState(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::QueryModuleStateRequest* request, ::injective::tokenfactory::v1beta1::QueryModuleStateResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TokenfactoryModuleState_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::tokenfactory::v1beta1::QueryModuleStateResponse>* Query::Stub::PrepareAsyncTokenfactoryModuleStateRaw(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::QueryModuleStateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::tokenfactory::v1beta1::QueryModuleStateResponse, ::injective::tokenfactory::v1beta1::QueryModuleStateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_TokenfactoryModuleState_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::tokenfactory::v1beta1::QueryModuleStateResponse>* Query::Stub::AsyncTokenfactoryModuleStateRaw(::grpc::ClientContext* context, const ::injective::tokenfactory::v1beta1::QueryModuleStateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncTokenfactoryModuleStateRaw(context, request, cq);
  result->StartCall();
  return result;
}

Query::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::injective::tokenfactory::v1beta1::QueryParamsRequest, ::injective::tokenfactory::v1beta1::QueryParamsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::tokenfactory::v1beta1::QueryParamsRequest* req,
             ::injective::tokenfactory::v1beta1::QueryParamsResponse* resp) {
               return service->Params(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::injective::tokenfactory::v1beta1::QueryDenomAuthorityMetadataRequest, ::injective::tokenfactory::v1beta1::QueryDenomAuthorityMetadataResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::tokenfactory::v1beta1::QueryDenomAuthorityMetadataRequest* req,
             ::injective::tokenfactory::v1beta1::QueryDenomAuthorityMetadataResponse* resp) {
               return service->DenomAuthorityMetadata(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::injective::tokenfactory::v1beta1::QueryDenomsFromCreatorRequest, ::injective::tokenfactory::v1beta1::QueryDenomsFromCreatorResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::tokenfactory::v1beta1::QueryDenomsFromCreatorRequest* req,
             ::injective::tokenfactory::v1beta1::QueryDenomsFromCreatorResponse* resp) {
               return service->DenomsFromCreator(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::injective::tokenfactory::v1beta1::QueryModuleStateRequest, ::injective::tokenfactory::v1beta1::QueryModuleStateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::tokenfactory::v1beta1::QueryModuleStateRequest* req,
             ::injective::tokenfactory::v1beta1::QueryModuleStateResponse* resp) {
               return service->TokenfactoryModuleState(ctx, req, resp);
             }, this)));
}

Query::Service::~Service() {
}

::grpc::Status Query::Service::Params(::grpc::ServerContext* context, const ::injective::tokenfactory::v1beta1::QueryParamsRequest* request, ::injective::tokenfactory::v1beta1::QueryParamsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::DenomAuthorityMetadata(::grpc::ServerContext* context, const ::injective::tokenfactory::v1beta1::QueryDenomAuthorityMetadataRequest* request, ::injective::tokenfactory::v1beta1::QueryDenomAuthorityMetadataResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::DenomsFromCreator(::grpc::ServerContext* context, const ::injective::tokenfactory::v1beta1::QueryDenomsFromCreatorRequest* request, ::injective::tokenfactory::v1beta1::QueryDenomsFromCreatorResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::TokenfactoryModuleState(::grpc::ServerContext* context, const ::injective::tokenfactory::v1beta1::QueryModuleStateRequest* request, ::injective::tokenfactory::v1beta1::QueryModuleStateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace injective
}  // namespace tokenfactory
}  // namespace v1beta1


// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: injective/tokenfactory/v1beta1/query.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_injective_2ftokenfactory_2fv1beta1_2fquery_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_injective_2ftokenfactory_2fv1beta1_2fquery_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "gogoproto/gogo.pb.h"
#include "google/api/annotations.pb.h"
#include "cosmos/base/query/v1beta1/pagination.pb.h"
#include "injective/tokenfactory/v1beta1/authorityMetadata.pb.h"
#include "injective/tokenfactory/v1beta1/params.pb.h"
#include "injective/tokenfactory/v1beta1/genesis.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_injective_2ftokenfactory_2fv1beta1_2fquery_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_injective_2ftokenfactory_2fv1beta1_2fquery_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_injective_2ftokenfactory_2fv1beta1_2fquery_2eproto;
namespace injective {
namespace tokenfactory {
namespace v1beta1 {
class QueryDenomAuthorityMetadataRequest;
struct QueryDenomAuthorityMetadataRequestDefaultTypeInternal;
extern QueryDenomAuthorityMetadataRequestDefaultTypeInternal _QueryDenomAuthorityMetadataRequest_default_instance_;
class QueryDenomAuthorityMetadataResponse;
struct QueryDenomAuthorityMetadataResponseDefaultTypeInternal;
extern QueryDenomAuthorityMetadataResponseDefaultTypeInternal _QueryDenomAuthorityMetadataResponse_default_instance_;
class QueryDenomsFromCreatorRequest;
struct QueryDenomsFromCreatorRequestDefaultTypeInternal;
extern QueryDenomsFromCreatorRequestDefaultTypeInternal _QueryDenomsFromCreatorRequest_default_instance_;
class QueryDenomsFromCreatorResponse;
struct QueryDenomsFromCreatorResponseDefaultTypeInternal;
extern QueryDenomsFromCreatorResponseDefaultTypeInternal _QueryDenomsFromCreatorResponse_default_instance_;
class QueryModuleStateRequest;
struct QueryModuleStateRequestDefaultTypeInternal;
extern QueryModuleStateRequestDefaultTypeInternal _QueryModuleStateRequest_default_instance_;
class QueryModuleStateResponse;
struct QueryModuleStateResponseDefaultTypeInternal;
extern QueryModuleStateResponseDefaultTypeInternal _QueryModuleStateResponse_default_instance_;
class QueryParamsRequest;
struct QueryParamsRequestDefaultTypeInternal;
extern QueryParamsRequestDefaultTypeInternal _QueryParamsRequest_default_instance_;
class QueryParamsResponse;
struct QueryParamsResponseDefaultTypeInternal;
extern QueryParamsResponseDefaultTypeInternal _QueryParamsResponse_default_instance_;
}  // namespace v1beta1
}  // namespace tokenfactory
}  // namespace injective
PROTOBUF_NAMESPACE_OPEN
template <>
::injective::tokenfactory::v1beta1::QueryDenomAuthorityMetadataRequest* Arena::CreateMaybeMessage<::injective::tokenfactory::v1beta1::QueryDenomAuthorityMetadataRequest>(Arena*);
template <>
::injective::tokenfactory::v1beta1::QueryDenomAuthorityMetadataResponse* Arena::CreateMaybeMessage<::injective::tokenfactory::v1beta1::QueryDenomAuthorityMetadataResponse>(Arena*);
template <>
::injective::tokenfactory::v1beta1::QueryDenomsFromCreatorRequest* Arena::CreateMaybeMessage<::injective::tokenfactory::v1beta1::QueryDenomsFromCreatorRequest>(Arena*);
template <>
::injective::tokenfactory::v1beta1::QueryDenomsFromCreatorResponse* Arena::CreateMaybeMessage<::injective::tokenfactory::v1beta1::QueryDenomsFromCreatorResponse>(Arena*);
template <>
::injective::tokenfactory::v1beta1::QueryModuleStateRequest* Arena::CreateMaybeMessage<::injective::tokenfactory::v1beta1::QueryModuleStateRequest>(Arena*);
template <>
::injective::tokenfactory::v1beta1::QueryModuleStateResponse* Arena::CreateMaybeMessage<::injective::tokenfactory::v1beta1::QueryModuleStateResponse>(Arena*);
template <>
::injective::tokenfactory::v1beta1::QueryParamsRequest* Arena::CreateMaybeMessage<::injective::tokenfactory::v1beta1::QueryParamsRequest>(Arena*);
template <>
::injective::tokenfactory::v1beta1::QueryParamsResponse* Arena::CreateMaybeMessage<::injective::tokenfactory::v1beta1::QueryParamsResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace injective {
namespace tokenfactory {
namespace v1beta1 {

// ===================================================================


// -------------------------------------------------------------------

class QueryParamsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:injective.tokenfactory.v1beta1.QueryParamsRequest) */ {
 public:
  inline QueryParamsRequest() : QueryParamsRequest(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryParamsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryParamsRequest(const QueryParamsRequest& from);
  QueryParamsRequest(QueryParamsRequest&& from) noexcept
    : QueryParamsRequest() {
    *this = ::std::move(from);
  }

  inline QueryParamsRequest& operator=(const QueryParamsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryParamsRequest& operator=(QueryParamsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryParamsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryParamsRequest* internal_default_instance() {
    return reinterpret_cast<const QueryParamsRequest*>(
               &_QueryParamsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(QueryParamsRequest& a, QueryParamsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryParamsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryParamsRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryParamsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryParamsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const QueryParamsRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const QueryParamsRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.tokenfactory.v1beta1.QueryParamsRequest";
  }
  protected:
  explicit QueryParamsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:injective.tokenfactory.v1beta1.QueryParamsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_injective_2ftokenfactory_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryParamsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.tokenfactory.v1beta1.QueryParamsResponse) */ {
 public:
  inline QueryParamsResponse() : QueryParamsResponse(nullptr) {}
  ~QueryParamsResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryParamsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryParamsResponse(const QueryParamsResponse& from);
  QueryParamsResponse(QueryParamsResponse&& from) noexcept
    : QueryParamsResponse() {
    *this = ::std::move(from);
  }

  inline QueryParamsResponse& operator=(const QueryParamsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryParamsResponse& operator=(QueryParamsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryParamsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryParamsResponse* internal_default_instance() {
    return reinterpret_cast<const QueryParamsResponse*>(
               &_QueryParamsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(QueryParamsResponse& a, QueryParamsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryParamsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryParamsResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryParamsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryParamsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryParamsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryParamsResponse& from) {
    QueryParamsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryParamsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.tokenfactory.v1beta1.QueryParamsResponse";
  }
  protected:
  explicit QueryParamsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParamsFieldNumber = 1,
  };
  // .injective.tokenfactory.v1beta1.Params params = 1 [json_name = "params", (.gogoproto.nullable) = false];
  bool has_params() const;
  void clear_params() ;
  const ::injective::tokenfactory::v1beta1::Params& params() const;
  PROTOBUF_NODISCARD ::injective::tokenfactory::v1beta1::Params* release_params();
  ::injective::tokenfactory::v1beta1::Params* mutable_params();
  void set_allocated_params(::injective::tokenfactory::v1beta1::Params* params);
  private:
  const ::injective::tokenfactory::v1beta1::Params& _internal_params() const;
  ::injective::tokenfactory::v1beta1::Params* _internal_mutable_params();
  public:
  void unsafe_arena_set_allocated_params(
      ::injective::tokenfactory::v1beta1::Params* params);
  ::injective::tokenfactory::v1beta1::Params* unsafe_arena_release_params();
  // @@protoc_insertion_point(class_scope:injective.tokenfactory.v1beta1.QueryParamsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::injective::tokenfactory::v1beta1::Params* params_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2ftokenfactory_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryDenomAuthorityMetadataRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.tokenfactory.v1beta1.QueryDenomAuthorityMetadataRequest) */ {
 public:
  inline QueryDenomAuthorityMetadataRequest() : QueryDenomAuthorityMetadataRequest(nullptr) {}
  ~QueryDenomAuthorityMetadataRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryDenomAuthorityMetadataRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryDenomAuthorityMetadataRequest(const QueryDenomAuthorityMetadataRequest& from);
  QueryDenomAuthorityMetadataRequest(QueryDenomAuthorityMetadataRequest&& from) noexcept
    : QueryDenomAuthorityMetadataRequest() {
    *this = ::std::move(from);
  }

  inline QueryDenomAuthorityMetadataRequest& operator=(const QueryDenomAuthorityMetadataRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryDenomAuthorityMetadataRequest& operator=(QueryDenomAuthorityMetadataRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryDenomAuthorityMetadataRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryDenomAuthorityMetadataRequest* internal_default_instance() {
    return reinterpret_cast<const QueryDenomAuthorityMetadataRequest*>(
               &_QueryDenomAuthorityMetadataRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(QueryDenomAuthorityMetadataRequest& a, QueryDenomAuthorityMetadataRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryDenomAuthorityMetadataRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryDenomAuthorityMetadataRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryDenomAuthorityMetadataRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryDenomAuthorityMetadataRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryDenomAuthorityMetadataRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryDenomAuthorityMetadataRequest& from) {
    QueryDenomAuthorityMetadataRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryDenomAuthorityMetadataRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.tokenfactory.v1beta1.QueryDenomAuthorityMetadataRequest";
  }
  protected:
  explicit QueryDenomAuthorityMetadataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCreatorFieldNumber = 1,
    kSubDenomFieldNumber = 2,
  };
  // string creator = 1 [json_name = "creator", (.gogoproto.moretags) = "yaml:\"denom\""];
  void clear_creator() ;
  const std::string& creator() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_creator(Arg_&& arg, Args_... args);
  std::string* mutable_creator();
  PROTOBUF_NODISCARD std::string* release_creator();
  void set_allocated_creator(std::string* ptr);

  private:
  const std::string& _internal_creator() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_creator(
      const std::string& value);
  std::string* _internal_mutable_creator();

  public:
  // string sub_denom = 2 [json_name = "subDenom", (.gogoproto.moretags) = "yaml:\"sub_denom\""];
  void clear_sub_denom() ;
  const std::string& sub_denom() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_sub_denom(Arg_&& arg, Args_... args);
  std::string* mutable_sub_denom();
  PROTOBUF_NODISCARD std::string* release_sub_denom();
  void set_allocated_sub_denom(std::string* ptr);

  private:
  const std::string& _internal_sub_denom() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sub_denom(
      const std::string& value);
  std::string* _internal_mutable_sub_denom();

  public:
  // @@protoc_insertion_point(class_scope:injective.tokenfactory.v1beta1.QueryDenomAuthorityMetadataRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr creator_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sub_denom_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2ftokenfactory_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryDenomAuthorityMetadataResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.tokenfactory.v1beta1.QueryDenomAuthorityMetadataResponse) */ {
 public:
  inline QueryDenomAuthorityMetadataResponse() : QueryDenomAuthorityMetadataResponse(nullptr) {}
  ~QueryDenomAuthorityMetadataResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryDenomAuthorityMetadataResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryDenomAuthorityMetadataResponse(const QueryDenomAuthorityMetadataResponse& from);
  QueryDenomAuthorityMetadataResponse(QueryDenomAuthorityMetadataResponse&& from) noexcept
    : QueryDenomAuthorityMetadataResponse() {
    *this = ::std::move(from);
  }

  inline QueryDenomAuthorityMetadataResponse& operator=(const QueryDenomAuthorityMetadataResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryDenomAuthorityMetadataResponse& operator=(QueryDenomAuthorityMetadataResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryDenomAuthorityMetadataResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryDenomAuthorityMetadataResponse* internal_default_instance() {
    return reinterpret_cast<const QueryDenomAuthorityMetadataResponse*>(
               &_QueryDenomAuthorityMetadataResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(QueryDenomAuthorityMetadataResponse& a, QueryDenomAuthorityMetadataResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryDenomAuthorityMetadataResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryDenomAuthorityMetadataResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryDenomAuthorityMetadataResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryDenomAuthorityMetadataResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryDenomAuthorityMetadataResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryDenomAuthorityMetadataResponse& from) {
    QueryDenomAuthorityMetadataResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryDenomAuthorityMetadataResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.tokenfactory.v1beta1.QueryDenomAuthorityMetadataResponse";
  }
  protected:
  explicit QueryDenomAuthorityMetadataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAuthorityMetadataFieldNumber = 1,
  };
  // .injective.tokenfactory.v1beta1.DenomAuthorityMetadata authority_metadata = 1 [json_name = "authorityMetadata", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:\"authority_metadata\""];
  bool has_authority_metadata() const;
  void clear_authority_metadata() ;
  const ::injective::tokenfactory::v1beta1::DenomAuthorityMetadata& authority_metadata() const;
  PROTOBUF_NODISCARD ::injective::tokenfactory::v1beta1::DenomAuthorityMetadata* release_authority_metadata();
  ::injective::tokenfactory::v1beta1::DenomAuthorityMetadata* mutable_authority_metadata();
  void set_allocated_authority_metadata(::injective::tokenfactory::v1beta1::DenomAuthorityMetadata* authority_metadata);
  private:
  const ::injective::tokenfactory::v1beta1::DenomAuthorityMetadata& _internal_authority_metadata() const;
  ::injective::tokenfactory::v1beta1::DenomAuthorityMetadata* _internal_mutable_authority_metadata();
  public:
  void unsafe_arena_set_allocated_authority_metadata(
      ::injective::tokenfactory::v1beta1::DenomAuthorityMetadata* authority_metadata);
  ::injective::tokenfactory::v1beta1::DenomAuthorityMetadata* unsafe_arena_release_authority_metadata();
  // @@protoc_insertion_point(class_scope:injective.tokenfactory.v1beta1.QueryDenomAuthorityMetadataResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::injective::tokenfactory::v1beta1::DenomAuthorityMetadata* authority_metadata_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2ftokenfactory_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryDenomsFromCreatorRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.tokenfactory.v1beta1.QueryDenomsFromCreatorRequest) */ {
 public:
  inline QueryDenomsFromCreatorRequest() : QueryDenomsFromCreatorRequest(nullptr) {}
  ~QueryDenomsFromCreatorRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryDenomsFromCreatorRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryDenomsFromCreatorRequest(const QueryDenomsFromCreatorRequest& from);
  QueryDenomsFromCreatorRequest(QueryDenomsFromCreatorRequest&& from) noexcept
    : QueryDenomsFromCreatorRequest() {
    *this = ::std::move(from);
  }

  inline QueryDenomsFromCreatorRequest& operator=(const QueryDenomsFromCreatorRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryDenomsFromCreatorRequest& operator=(QueryDenomsFromCreatorRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryDenomsFromCreatorRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryDenomsFromCreatorRequest* internal_default_instance() {
    return reinterpret_cast<const QueryDenomsFromCreatorRequest*>(
               &_QueryDenomsFromCreatorRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(QueryDenomsFromCreatorRequest& a, QueryDenomsFromCreatorRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryDenomsFromCreatorRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryDenomsFromCreatorRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryDenomsFromCreatorRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryDenomsFromCreatorRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryDenomsFromCreatorRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryDenomsFromCreatorRequest& from) {
    QueryDenomsFromCreatorRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryDenomsFromCreatorRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.tokenfactory.v1beta1.QueryDenomsFromCreatorRequest";
  }
  protected:
  explicit QueryDenomsFromCreatorRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCreatorFieldNumber = 1,
  };
  // string creator = 1 [json_name = "creator", (.gogoproto.moretags) = "yaml:\"creator\""];
  void clear_creator() ;
  const std::string& creator() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_creator(Arg_&& arg, Args_... args);
  std::string* mutable_creator();
  PROTOBUF_NODISCARD std::string* release_creator();
  void set_allocated_creator(std::string* ptr);

  private:
  const std::string& _internal_creator() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_creator(
      const std::string& value);
  std::string* _internal_mutable_creator();

  public:
  // @@protoc_insertion_point(class_scope:injective.tokenfactory.v1beta1.QueryDenomsFromCreatorRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr creator_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2ftokenfactory_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryDenomsFromCreatorResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.tokenfactory.v1beta1.QueryDenomsFromCreatorResponse) */ {
 public:
  inline QueryDenomsFromCreatorResponse() : QueryDenomsFromCreatorResponse(nullptr) {}
  ~QueryDenomsFromCreatorResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryDenomsFromCreatorResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryDenomsFromCreatorResponse(const QueryDenomsFromCreatorResponse& from);
  QueryDenomsFromCreatorResponse(QueryDenomsFromCreatorResponse&& from) noexcept
    : QueryDenomsFromCreatorResponse() {
    *this = ::std::move(from);
  }

  inline QueryDenomsFromCreatorResponse& operator=(const QueryDenomsFromCreatorResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryDenomsFromCreatorResponse& operator=(QueryDenomsFromCreatorResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryDenomsFromCreatorResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryDenomsFromCreatorResponse* internal_default_instance() {
    return reinterpret_cast<const QueryDenomsFromCreatorResponse*>(
               &_QueryDenomsFromCreatorResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(QueryDenomsFromCreatorResponse& a, QueryDenomsFromCreatorResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryDenomsFromCreatorResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryDenomsFromCreatorResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryDenomsFromCreatorResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryDenomsFromCreatorResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryDenomsFromCreatorResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryDenomsFromCreatorResponse& from) {
    QueryDenomsFromCreatorResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryDenomsFromCreatorResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.tokenfactory.v1beta1.QueryDenomsFromCreatorResponse";
  }
  protected:
  explicit QueryDenomsFromCreatorResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDenomsFieldNumber = 1,
  };
  // repeated string denoms = 1 [json_name = "denoms", (.gogoproto.moretags) = "yaml:\"denoms\""];
  int denoms_size() const;
  private:
  int _internal_denoms_size() const;

  public:
  void clear_denoms() ;
  const std::string& denoms(int index) const;
  std::string* mutable_denoms(int index);
  void set_denoms(int index, const std::string& value);
  void set_denoms(int index, std::string&& value);
  void set_denoms(int index, const char* value);
  void set_denoms(int index, const char* value, std::size_t size);
  void set_denoms(int index, absl::string_view value);
  std::string* add_denoms();
  void add_denoms(const std::string& value);
  void add_denoms(std::string&& value);
  void add_denoms(const char* value);
  void add_denoms(const char* value, std::size_t size);
  void add_denoms(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& denoms() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_denoms();

  private:
  const std::string& _internal_denoms(int index) const;
  std::string* _internal_add_denoms();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_denoms() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_denoms();

  public:
  // @@protoc_insertion_point(class_scope:injective.tokenfactory.v1beta1.QueryDenomsFromCreatorResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> denoms_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2ftokenfactory_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryModuleStateRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:injective.tokenfactory.v1beta1.QueryModuleStateRequest) */ {
 public:
  inline QueryModuleStateRequest() : QueryModuleStateRequest(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryModuleStateRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryModuleStateRequest(const QueryModuleStateRequest& from);
  QueryModuleStateRequest(QueryModuleStateRequest&& from) noexcept
    : QueryModuleStateRequest() {
    *this = ::std::move(from);
  }

  inline QueryModuleStateRequest& operator=(const QueryModuleStateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryModuleStateRequest& operator=(QueryModuleStateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryModuleStateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryModuleStateRequest* internal_default_instance() {
    return reinterpret_cast<const QueryModuleStateRequest*>(
               &_QueryModuleStateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(QueryModuleStateRequest& a, QueryModuleStateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryModuleStateRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryModuleStateRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryModuleStateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryModuleStateRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const QueryModuleStateRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const QueryModuleStateRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.tokenfactory.v1beta1.QueryModuleStateRequest";
  }
  protected:
  explicit QueryModuleStateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:injective.tokenfactory.v1beta1.QueryModuleStateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_injective_2ftokenfactory_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryModuleStateResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.tokenfactory.v1beta1.QueryModuleStateResponse) */ {
 public:
  inline QueryModuleStateResponse() : QueryModuleStateResponse(nullptr) {}
  ~QueryModuleStateResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryModuleStateResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryModuleStateResponse(const QueryModuleStateResponse& from);
  QueryModuleStateResponse(QueryModuleStateResponse&& from) noexcept
    : QueryModuleStateResponse() {
    *this = ::std::move(from);
  }

  inline QueryModuleStateResponse& operator=(const QueryModuleStateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryModuleStateResponse& operator=(QueryModuleStateResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryModuleStateResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryModuleStateResponse* internal_default_instance() {
    return reinterpret_cast<const QueryModuleStateResponse*>(
               &_QueryModuleStateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(QueryModuleStateResponse& a, QueryModuleStateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryModuleStateResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryModuleStateResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryModuleStateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryModuleStateResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryModuleStateResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryModuleStateResponse& from) {
    QueryModuleStateResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryModuleStateResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.tokenfactory.v1beta1.QueryModuleStateResponse";
  }
  protected:
  explicit QueryModuleStateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStateFieldNumber = 1,
  };
  // .injective.tokenfactory.v1beta1.GenesisState state = 1 [json_name = "state"];
  bool has_state() const;
  void clear_state() ;
  const ::injective::tokenfactory::v1beta1::GenesisState& state() const;
  PROTOBUF_NODISCARD ::injective::tokenfactory::v1beta1::GenesisState* release_state();
  ::injective::tokenfactory::v1beta1::GenesisState* mutable_state();
  void set_allocated_state(::injective::tokenfactory::v1beta1::GenesisState* state);
  private:
  const ::injective::tokenfactory::v1beta1::GenesisState& _internal_state() const;
  ::injective::tokenfactory::v1beta1::GenesisState* _internal_mutable_state();
  public:
  void unsafe_arena_set_allocated_state(
      ::injective::tokenfactory::v1beta1::GenesisState* state);
  ::injective::tokenfactory::v1beta1::GenesisState* unsafe_arena_release_state();
  // @@protoc_insertion_point(class_scope:injective.tokenfactory.v1beta1.QueryModuleStateResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::injective::tokenfactory::v1beta1::GenesisState* state_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2ftokenfactory_2fv1beta1_2fquery_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// QueryParamsRequest

// -------------------------------------------------------------------

// QueryParamsResponse

// .injective.tokenfactory.v1beta1.Params params = 1 [json_name = "params", (.gogoproto.nullable) = false];
inline bool QueryParamsResponse::has_params() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.params_ != nullptr);
  return value;
}
inline const ::injective::tokenfactory::v1beta1::Params& QueryParamsResponse::_internal_params() const {
  const ::injective::tokenfactory::v1beta1::Params* p = _impl_.params_;
  return p != nullptr ? *p : reinterpret_cast<const ::injective::tokenfactory::v1beta1::Params&>(
      ::injective::tokenfactory::v1beta1::_Params_default_instance_);
}
inline const ::injective::tokenfactory::v1beta1::Params& QueryParamsResponse::params() const {
  // @@protoc_insertion_point(field_get:injective.tokenfactory.v1beta1.QueryParamsResponse.params)
  return _internal_params();
}
inline void QueryParamsResponse::unsafe_arena_set_allocated_params(
    ::injective::tokenfactory::v1beta1::Params* params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.params_);
  }
  _impl_.params_ = params;
  if (params) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:injective.tokenfactory.v1beta1.QueryParamsResponse.params)
}
inline ::injective::tokenfactory::v1beta1::Params* QueryParamsResponse::release_params() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::injective::tokenfactory::v1beta1::Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::injective::tokenfactory::v1beta1::Params* QueryParamsResponse::unsafe_arena_release_params() {
  // @@protoc_insertion_point(field_release:injective.tokenfactory.v1beta1.QueryParamsResponse.params)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::injective::tokenfactory::v1beta1::Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
  return temp;
}
inline ::injective::tokenfactory::v1beta1::Params* QueryParamsResponse::_internal_mutable_params() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.params_ == nullptr) {
    auto* p = CreateMaybeMessage<::injective::tokenfactory::v1beta1::Params>(GetArenaForAllocation());
    _impl_.params_ = p;
  }
  return _impl_.params_;
}
inline ::injective::tokenfactory::v1beta1::Params* QueryParamsResponse::mutable_params() {
  ::injective::tokenfactory::v1beta1::Params* _msg = _internal_mutable_params();
  // @@protoc_insertion_point(field_mutable:injective.tokenfactory.v1beta1.QueryParamsResponse.params)
  return _msg;
}
inline void QueryParamsResponse::set_allocated_params(::injective::tokenfactory::v1beta1::Params* params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.params_);
  }
  if (params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(params));
    if (message_arena != submessage_arena) {
      params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, params, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.params_ = params;
  // @@protoc_insertion_point(field_set_allocated:injective.tokenfactory.v1beta1.QueryParamsResponse.params)
}

// -------------------------------------------------------------------

// QueryDenomAuthorityMetadataRequest

// string creator = 1 [json_name = "creator", (.gogoproto.moretags) = "yaml:\"denom\""];
inline void QueryDenomAuthorityMetadataRequest::clear_creator() {
  _impl_.creator_.ClearToEmpty();
}
inline const std::string& QueryDenomAuthorityMetadataRequest::creator() const {
  // @@protoc_insertion_point(field_get:injective.tokenfactory.v1beta1.QueryDenomAuthorityMetadataRequest.creator)
  return _internal_creator();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryDenomAuthorityMetadataRequest::set_creator(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.creator_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.tokenfactory.v1beta1.QueryDenomAuthorityMetadataRequest.creator)
}
inline std::string* QueryDenomAuthorityMetadataRequest::mutable_creator() {
  std::string* _s = _internal_mutable_creator();
  // @@protoc_insertion_point(field_mutable:injective.tokenfactory.v1beta1.QueryDenomAuthorityMetadataRequest.creator)
  return _s;
}
inline const std::string& QueryDenomAuthorityMetadataRequest::_internal_creator() const {
  return _impl_.creator_.Get();
}
inline void QueryDenomAuthorityMetadataRequest::_internal_set_creator(const std::string& value) {
  ;


  _impl_.creator_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryDenomAuthorityMetadataRequest::_internal_mutable_creator() {
  ;
  return _impl_.creator_.Mutable( GetArenaForAllocation());
}
inline std::string* QueryDenomAuthorityMetadataRequest::release_creator() {
  // @@protoc_insertion_point(field_release:injective.tokenfactory.v1beta1.QueryDenomAuthorityMetadataRequest.creator)
  return _impl_.creator_.Release();
}
inline void QueryDenomAuthorityMetadataRequest::set_allocated_creator(std::string* value) {
  _impl_.creator_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.creator_.IsDefault()) {
          _impl_.creator_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.tokenfactory.v1beta1.QueryDenomAuthorityMetadataRequest.creator)
}

// string sub_denom = 2 [json_name = "subDenom", (.gogoproto.moretags) = "yaml:\"sub_denom\""];
inline void QueryDenomAuthorityMetadataRequest::clear_sub_denom() {
  _impl_.sub_denom_.ClearToEmpty();
}
inline const std::string& QueryDenomAuthorityMetadataRequest::sub_denom() const {
  // @@protoc_insertion_point(field_get:injective.tokenfactory.v1beta1.QueryDenomAuthorityMetadataRequest.sub_denom)
  return _internal_sub_denom();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryDenomAuthorityMetadataRequest::set_sub_denom(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.sub_denom_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.tokenfactory.v1beta1.QueryDenomAuthorityMetadataRequest.sub_denom)
}
inline std::string* QueryDenomAuthorityMetadataRequest::mutable_sub_denom() {
  std::string* _s = _internal_mutable_sub_denom();
  // @@protoc_insertion_point(field_mutable:injective.tokenfactory.v1beta1.QueryDenomAuthorityMetadataRequest.sub_denom)
  return _s;
}
inline const std::string& QueryDenomAuthorityMetadataRequest::_internal_sub_denom() const {
  return _impl_.sub_denom_.Get();
}
inline void QueryDenomAuthorityMetadataRequest::_internal_set_sub_denom(const std::string& value) {
  ;


  _impl_.sub_denom_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryDenomAuthorityMetadataRequest::_internal_mutable_sub_denom() {
  ;
  return _impl_.sub_denom_.Mutable( GetArenaForAllocation());
}
inline std::string* QueryDenomAuthorityMetadataRequest::release_sub_denom() {
  // @@protoc_insertion_point(field_release:injective.tokenfactory.v1beta1.QueryDenomAuthorityMetadataRequest.sub_denom)
  return _impl_.sub_denom_.Release();
}
inline void QueryDenomAuthorityMetadataRequest::set_allocated_sub_denom(std::string* value) {
  _impl_.sub_denom_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.sub_denom_.IsDefault()) {
          _impl_.sub_denom_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.tokenfactory.v1beta1.QueryDenomAuthorityMetadataRequest.sub_denom)
}

// -------------------------------------------------------------------

// QueryDenomAuthorityMetadataResponse

// .injective.tokenfactory.v1beta1.DenomAuthorityMetadata authority_metadata = 1 [json_name = "authorityMetadata", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:\"authority_metadata\""];
inline bool QueryDenomAuthorityMetadataResponse::has_authority_metadata() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.authority_metadata_ != nullptr);
  return value;
}
inline const ::injective::tokenfactory::v1beta1::DenomAuthorityMetadata& QueryDenomAuthorityMetadataResponse::_internal_authority_metadata() const {
  const ::injective::tokenfactory::v1beta1::DenomAuthorityMetadata* p = _impl_.authority_metadata_;
  return p != nullptr ? *p : reinterpret_cast<const ::injective::tokenfactory::v1beta1::DenomAuthorityMetadata&>(
      ::injective::tokenfactory::v1beta1::_DenomAuthorityMetadata_default_instance_);
}
inline const ::injective::tokenfactory::v1beta1::DenomAuthorityMetadata& QueryDenomAuthorityMetadataResponse::authority_metadata() const {
  // @@protoc_insertion_point(field_get:injective.tokenfactory.v1beta1.QueryDenomAuthorityMetadataResponse.authority_metadata)
  return _internal_authority_metadata();
}
inline void QueryDenomAuthorityMetadataResponse::unsafe_arena_set_allocated_authority_metadata(
    ::injective::tokenfactory::v1beta1::DenomAuthorityMetadata* authority_metadata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.authority_metadata_);
  }
  _impl_.authority_metadata_ = authority_metadata;
  if (authority_metadata) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:injective.tokenfactory.v1beta1.QueryDenomAuthorityMetadataResponse.authority_metadata)
}
inline ::injective::tokenfactory::v1beta1::DenomAuthorityMetadata* QueryDenomAuthorityMetadataResponse::release_authority_metadata() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::injective::tokenfactory::v1beta1::DenomAuthorityMetadata* temp = _impl_.authority_metadata_;
  _impl_.authority_metadata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::injective::tokenfactory::v1beta1::DenomAuthorityMetadata* QueryDenomAuthorityMetadataResponse::unsafe_arena_release_authority_metadata() {
  // @@protoc_insertion_point(field_release:injective.tokenfactory.v1beta1.QueryDenomAuthorityMetadataResponse.authority_metadata)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::injective::tokenfactory::v1beta1::DenomAuthorityMetadata* temp = _impl_.authority_metadata_;
  _impl_.authority_metadata_ = nullptr;
  return temp;
}
inline ::injective::tokenfactory::v1beta1::DenomAuthorityMetadata* QueryDenomAuthorityMetadataResponse::_internal_mutable_authority_metadata() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.authority_metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::injective::tokenfactory::v1beta1::DenomAuthorityMetadata>(GetArenaForAllocation());
    _impl_.authority_metadata_ = p;
  }
  return _impl_.authority_metadata_;
}
inline ::injective::tokenfactory::v1beta1::DenomAuthorityMetadata* QueryDenomAuthorityMetadataResponse::mutable_authority_metadata() {
  ::injective::tokenfactory::v1beta1::DenomAuthorityMetadata* _msg = _internal_mutable_authority_metadata();
  // @@protoc_insertion_point(field_mutable:injective.tokenfactory.v1beta1.QueryDenomAuthorityMetadataResponse.authority_metadata)
  return _msg;
}
inline void QueryDenomAuthorityMetadataResponse::set_allocated_authority_metadata(::injective::tokenfactory::v1beta1::DenomAuthorityMetadata* authority_metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.authority_metadata_);
  }
  if (authority_metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(authority_metadata));
    if (message_arena != submessage_arena) {
      authority_metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, authority_metadata, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.authority_metadata_ = authority_metadata;
  // @@protoc_insertion_point(field_set_allocated:injective.tokenfactory.v1beta1.QueryDenomAuthorityMetadataResponse.authority_metadata)
}

// -------------------------------------------------------------------

// QueryDenomsFromCreatorRequest

// string creator = 1 [json_name = "creator", (.gogoproto.moretags) = "yaml:\"creator\""];
inline void QueryDenomsFromCreatorRequest::clear_creator() {
  _impl_.creator_.ClearToEmpty();
}
inline const std::string& QueryDenomsFromCreatorRequest::creator() const {
  // @@protoc_insertion_point(field_get:injective.tokenfactory.v1beta1.QueryDenomsFromCreatorRequest.creator)
  return _internal_creator();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryDenomsFromCreatorRequest::set_creator(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.creator_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.tokenfactory.v1beta1.QueryDenomsFromCreatorRequest.creator)
}
inline std::string* QueryDenomsFromCreatorRequest::mutable_creator() {
  std::string* _s = _internal_mutable_creator();
  // @@protoc_insertion_point(field_mutable:injective.tokenfactory.v1beta1.QueryDenomsFromCreatorRequest.creator)
  return _s;
}
inline const std::string& QueryDenomsFromCreatorRequest::_internal_creator() const {
  return _impl_.creator_.Get();
}
inline void QueryDenomsFromCreatorRequest::_internal_set_creator(const std::string& value) {
  ;


  _impl_.creator_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryDenomsFromCreatorRequest::_internal_mutable_creator() {
  ;
  return _impl_.creator_.Mutable( GetArenaForAllocation());
}
inline std::string* QueryDenomsFromCreatorRequest::release_creator() {
  // @@protoc_insertion_point(field_release:injective.tokenfactory.v1beta1.QueryDenomsFromCreatorRequest.creator)
  return _impl_.creator_.Release();
}
inline void QueryDenomsFromCreatorRequest::set_allocated_creator(std::string* value) {
  _impl_.creator_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.creator_.IsDefault()) {
          _impl_.creator_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.tokenfactory.v1beta1.QueryDenomsFromCreatorRequest.creator)
}

// -------------------------------------------------------------------

// QueryDenomsFromCreatorResponse

// repeated string denoms = 1 [json_name = "denoms", (.gogoproto.moretags) = "yaml:\"denoms\""];
inline int QueryDenomsFromCreatorResponse::_internal_denoms_size() const {
  return _impl_.denoms_.size();
}
inline int QueryDenomsFromCreatorResponse::denoms_size() const {
  return _internal_denoms_size();
}
inline void QueryDenomsFromCreatorResponse::clear_denoms() {
  _internal_mutable_denoms()->Clear();
}
inline std::string* QueryDenomsFromCreatorResponse::add_denoms() {
  std::string* _s = _internal_add_denoms();
  // @@protoc_insertion_point(field_add_mutable:injective.tokenfactory.v1beta1.QueryDenomsFromCreatorResponse.denoms)
  return _s;
}
inline const std::string& QueryDenomsFromCreatorResponse::denoms(int index) const {
  // @@protoc_insertion_point(field_get:injective.tokenfactory.v1beta1.QueryDenomsFromCreatorResponse.denoms)
  return _internal_denoms(index);
}
inline std::string* QueryDenomsFromCreatorResponse::mutable_denoms(int index) {
  // @@protoc_insertion_point(field_mutable:injective.tokenfactory.v1beta1.QueryDenomsFromCreatorResponse.denoms)
  return _internal_mutable_denoms()->Mutable(index);
}
inline void QueryDenomsFromCreatorResponse::set_denoms(int index, const std::string& value) {
  _internal_mutable_denoms()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:injective.tokenfactory.v1beta1.QueryDenomsFromCreatorResponse.denoms)
}
inline void QueryDenomsFromCreatorResponse::set_denoms(int index, std::string&& value) {
  _internal_mutable_denoms()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:injective.tokenfactory.v1beta1.QueryDenomsFromCreatorResponse.denoms)
}
inline void QueryDenomsFromCreatorResponse::set_denoms(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_denoms()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:injective.tokenfactory.v1beta1.QueryDenomsFromCreatorResponse.denoms)
}
inline void QueryDenomsFromCreatorResponse::set_denoms(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_denoms()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:injective.tokenfactory.v1beta1.QueryDenomsFromCreatorResponse.denoms)
}
inline void QueryDenomsFromCreatorResponse::set_denoms(int index, absl::string_view value) {
  _internal_mutable_denoms()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:injective.tokenfactory.v1beta1.QueryDenomsFromCreatorResponse.denoms)
}
inline void QueryDenomsFromCreatorResponse::add_denoms(const std::string& value) {
  _internal_mutable_denoms()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:injective.tokenfactory.v1beta1.QueryDenomsFromCreatorResponse.denoms)
}
inline void QueryDenomsFromCreatorResponse::add_denoms(std::string&& value) {
  _internal_mutable_denoms()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:injective.tokenfactory.v1beta1.QueryDenomsFromCreatorResponse.denoms)
}
inline void QueryDenomsFromCreatorResponse::add_denoms(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_denoms()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:injective.tokenfactory.v1beta1.QueryDenomsFromCreatorResponse.denoms)
}
inline void QueryDenomsFromCreatorResponse::add_denoms(const char* value, std::size_t size) {
  _internal_mutable_denoms()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:injective.tokenfactory.v1beta1.QueryDenomsFromCreatorResponse.denoms)
}
inline void QueryDenomsFromCreatorResponse::add_denoms(absl::string_view value) {
  _internal_mutable_denoms()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:injective.tokenfactory.v1beta1.QueryDenomsFromCreatorResponse.denoms)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
QueryDenomsFromCreatorResponse::denoms() const {
  // @@protoc_insertion_point(field_list:injective.tokenfactory.v1beta1.QueryDenomsFromCreatorResponse.denoms)
  return _internal_denoms();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* QueryDenomsFromCreatorResponse::mutable_denoms() {
  // @@protoc_insertion_point(field_mutable_list:injective.tokenfactory.v1beta1.QueryDenomsFromCreatorResponse.denoms)
  return _internal_mutable_denoms();
}
inline const std::string& QueryDenomsFromCreatorResponse::_internal_denoms(int index) const {
  return _internal_denoms().Get(index);
}
inline std::string* QueryDenomsFromCreatorResponse::_internal_add_denoms() {
  return _internal_mutable_denoms()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
QueryDenomsFromCreatorResponse::_internal_denoms() const {
  return _impl_.denoms_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
QueryDenomsFromCreatorResponse::_internal_mutable_denoms() {
  return &_impl_.denoms_;
}

// -------------------------------------------------------------------

// QueryModuleStateRequest

// -------------------------------------------------------------------

// QueryModuleStateResponse

// .injective.tokenfactory.v1beta1.GenesisState state = 1 [json_name = "state"];
inline bool QueryModuleStateResponse::has_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.state_ != nullptr);
  return value;
}
inline const ::injective::tokenfactory::v1beta1::GenesisState& QueryModuleStateResponse::_internal_state() const {
  const ::injective::tokenfactory::v1beta1::GenesisState* p = _impl_.state_;
  return p != nullptr ? *p : reinterpret_cast<const ::injective::tokenfactory::v1beta1::GenesisState&>(
      ::injective::tokenfactory::v1beta1::_GenesisState_default_instance_);
}
inline const ::injective::tokenfactory::v1beta1::GenesisState& QueryModuleStateResponse::state() const {
  // @@protoc_insertion_point(field_get:injective.tokenfactory.v1beta1.QueryModuleStateResponse.state)
  return _internal_state();
}
inline void QueryModuleStateResponse::unsafe_arena_set_allocated_state(
    ::injective::tokenfactory::v1beta1::GenesisState* state) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.state_);
  }
  _impl_.state_ = state;
  if (state) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:injective.tokenfactory.v1beta1.QueryModuleStateResponse.state)
}
inline ::injective::tokenfactory::v1beta1::GenesisState* QueryModuleStateResponse::release_state() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::injective::tokenfactory::v1beta1::GenesisState* temp = _impl_.state_;
  _impl_.state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::injective::tokenfactory::v1beta1::GenesisState* QueryModuleStateResponse::unsafe_arena_release_state() {
  // @@protoc_insertion_point(field_release:injective.tokenfactory.v1beta1.QueryModuleStateResponse.state)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::injective::tokenfactory::v1beta1::GenesisState* temp = _impl_.state_;
  _impl_.state_ = nullptr;
  return temp;
}
inline ::injective::tokenfactory::v1beta1::GenesisState* QueryModuleStateResponse::_internal_mutable_state() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.state_ == nullptr) {
    auto* p = CreateMaybeMessage<::injective::tokenfactory::v1beta1::GenesisState>(GetArenaForAllocation());
    _impl_.state_ = p;
  }
  return _impl_.state_;
}
inline ::injective::tokenfactory::v1beta1::GenesisState* QueryModuleStateResponse::mutable_state() {
  ::injective::tokenfactory::v1beta1::GenesisState* _msg = _internal_mutable_state();
  // @@protoc_insertion_point(field_mutable:injective.tokenfactory.v1beta1.QueryModuleStateResponse.state)
  return _msg;
}
inline void QueryModuleStateResponse::set_allocated_state(::injective::tokenfactory::v1beta1::GenesisState* state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.state_);
  }
  if (state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(state));
    if (message_arena != submessage_arena) {
      state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.state_ = state;
  // @@protoc_insertion_point(field_set_allocated:injective.tokenfactory.v1beta1.QueryModuleStateResponse.state)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1beta1
}  // namespace tokenfactory
}  // namespace injective


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_injective_2ftokenfactory_2fv1beta1_2fquery_2eproto_2epb_2eh

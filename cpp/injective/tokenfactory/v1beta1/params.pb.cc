// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: injective/tokenfactory/v1beta1/params.proto

#include "injective/tokenfactory/v1beta1/params.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace injective {
namespace tokenfactory {
namespace v1beta1 {
template <typename>
PROTOBUF_CONSTEXPR Params::Params(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.denom_creation_fee_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ParamsDefaultTypeInternal() {}
  union {
    Params _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ParamsDefaultTypeInternal _Params_default_instance_;
}  // namespace v1beta1
}  // namespace tokenfactory
}  // namespace injective
static ::_pb::Metadata file_level_metadata_injective_2ftokenfactory_2fv1beta1_2fparams_2eproto[1];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_injective_2ftokenfactory_2fv1beta1_2fparams_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_injective_2ftokenfactory_2fv1beta1_2fparams_2eproto = nullptr;
const ::uint32_t TableStruct_injective_2ftokenfactory_2fv1beta1_2fparams_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::tokenfactory::v1beta1::Params, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::tokenfactory::v1beta1::Params, _impl_.denom_creation_fee_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::injective::tokenfactory::v1beta1::Params)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::injective::tokenfactory::v1beta1::_Params_default_instance_._instance,
};
const char descriptor_table_protodef_injective_2ftokenfactory_2fv1beta1_2fparams_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n+injective/tokenfactory/v1beta1/params."
    "proto\022\036injective.tokenfactory.v1beta1\032\024g"
    "ogoproto/gogo.proto\0326injective/tokenfact"
    "ory/v1beta1/authorityMetadata.proto\032\031cos"
    "mos_proto/cosmos.proto\032\036cosmos/base/v1be"
    "ta1/coin.proto\"\241\001\n\006Params\022\226\001\n\022denom_crea"
    "tion_fee\030\001 \003(\0132\031.cosmos.base.v1beta1.Coi"
    "nBM\310\336\037\000\362\336\037\031yaml:\"denom_creation_fee\"\252\337\037("
    "github.com/cosmos/cosmos-sdk/types.Coins"
    "R\020denomCreationFeeB\237\002\n\"com.injective.tok"
    "enfactory.v1beta1B\013ParamsProtoP\001ZRgithub"
    ".com/InjectiveLabs/injective-core/inject"
    "ive-chain/modules/tokenfactory/types\242\002\003I"
    "TX\252\002\036Injective.Tokenfactory.V1beta1\312\002\036In"
    "jective\\Tokenfactory\\V1beta1\342\002*Injective"
    "\\Tokenfactory\\V1beta1\\GPBMetadata\352\002 Inje"
    "ctive::Tokenfactory::V1beta1b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_injective_2ftokenfactory_2fv1beta1_2fparams_2eproto_deps[4] =
    {
        &::descriptor_table_cosmos_2fbase_2fv1beta1_2fcoin_2eproto,
        &::descriptor_table_cosmos_5fproto_2fcosmos_2eproto,
        &::descriptor_table_gogoproto_2fgogo_2eproto,
        &::descriptor_table_injective_2ftokenfactory_2fv1beta1_2fauthorityMetadata_2eproto,
};
static ::absl::once_flag descriptor_table_injective_2ftokenfactory_2fv1beta1_2fparams_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_injective_2ftokenfactory_2fv1beta1_2fparams_2eproto = {
    false,
    false,
    676,
    descriptor_table_protodef_injective_2ftokenfactory_2fv1beta1_2fparams_2eproto,
    "injective/tokenfactory/v1beta1/params.proto",
    &descriptor_table_injective_2ftokenfactory_2fv1beta1_2fparams_2eproto_once,
    descriptor_table_injective_2ftokenfactory_2fv1beta1_2fparams_2eproto_deps,
    4,
    1,
    schemas,
    file_default_instances,
    TableStruct_injective_2ftokenfactory_2fv1beta1_2fparams_2eproto::offsets,
    file_level_metadata_injective_2ftokenfactory_2fv1beta1_2fparams_2eproto,
    file_level_enum_descriptors_injective_2ftokenfactory_2fv1beta1_2fparams_2eproto,
    file_level_service_descriptors_injective_2ftokenfactory_2fv1beta1_2fparams_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_injective_2ftokenfactory_2fv1beta1_2fparams_2eproto_getter() {
  return &descriptor_table_injective_2ftokenfactory_2fv1beta1_2fparams_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_injective_2ftokenfactory_2fv1beta1_2fparams_2eproto(&descriptor_table_injective_2ftokenfactory_2fv1beta1_2fparams_2eproto);
namespace injective {
namespace tokenfactory {
namespace v1beta1 {
// ===================================================================

class Params::_Internal {
 public:
};

void Params::clear_denom_creation_fee() {
  _internal_mutable_denom_creation_fee()->Clear();
}
Params::Params(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.tokenfactory.v1beta1.Params)
}
Params::Params(const Params& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Params* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.denom_creation_fee_){from._impl_.denom_creation_fee_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:injective.tokenfactory.v1beta1.Params)
}

inline void Params::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.denom_creation_fee_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Params::~Params() {
  // @@protoc_insertion_point(destructor:injective.tokenfactory.v1beta1.Params)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Params::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_denom_creation_fee()->~RepeatedPtrField();
}

void Params::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Params::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.tokenfactory.v1beta1.Params)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_denom_creation_fee()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Params::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .cosmos.base.v1beta1.Coin denom_creation_fee = 1 [json_name = "denomCreationFee", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:\"denom_creation_fee\"", (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_denom_creation_fee(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Params::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.tokenfactory.v1beta1.Params)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cosmos.base.v1beta1.Coin denom_creation_fee = 1 [json_name = "denomCreationFee", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:\"denom_creation_fee\"", (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_denom_creation_fee_size()); i < n; i++) {
    const auto& repfield = this->_internal_denom_creation_fee(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.tokenfactory.v1beta1.Params)
  return target;
}

::size_t Params::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.tokenfactory.v1beta1.Params)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cosmos.base.v1beta1.Coin denom_creation_fee = 1 [json_name = "denomCreationFee", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:\"denom_creation_fee\"", (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];
  total_size += 1UL * this->_internal_denom_creation_fee_size();
  for (const auto& msg : this->_internal_denom_creation_fee()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Params::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Params::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Params::GetClassData() const { return &_class_data_; }


void Params::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Params*>(&to_msg);
  auto& from = static_cast<const Params&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.tokenfactory.v1beta1.Params)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_denom_creation_fee()->MergeFrom(from._internal_denom_creation_fee());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Params::CopyFrom(const Params& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.tokenfactory.v1beta1.Params)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Params::IsInitialized() const {
  return true;
}

void Params::InternalSwap(Params* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_denom_creation_fee()->InternalSwap(other->_internal_mutable_denom_creation_fee());
}

::PROTOBUF_NAMESPACE_ID::Metadata Params::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2ftokenfactory_2fv1beta1_2fparams_2eproto_getter, &descriptor_table_injective_2ftokenfactory_2fv1beta1_2fparams_2eproto_once,
      file_level_metadata_injective_2ftokenfactory_2fv1beta1_2fparams_2eproto[0]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1beta1
}  // namespace tokenfactory
}  // namespace injective
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::injective::tokenfactory::v1beta1::Params*
Arena::CreateMaybeMessage< ::injective::tokenfactory::v1beta1::Params >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::tokenfactory::v1beta1::Params >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

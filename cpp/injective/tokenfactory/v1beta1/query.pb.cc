// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: injective/tokenfactory/v1beta1/query.proto

#include "injective/tokenfactory/v1beta1/query.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace injective {
namespace tokenfactory {
namespace v1beta1 {
template <typename>
PROTOBUF_CONSTEXPR QueryParamsRequest::QueryParamsRequest(
    ::_pbi::ConstantInitialized) {}
struct QueryParamsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryParamsRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryParamsRequestDefaultTypeInternal() {}
  union {
    QueryParamsRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryParamsRequestDefaultTypeInternal _QueryParamsRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryParamsResponse::QueryParamsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.params_)*/nullptr} {}
struct QueryParamsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryParamsResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryParamsResponseDefaultTypeInternal() {}
  union {
    QueryParamsResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryParamsResponseDefaultTypeInternal _QueryParamsResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryDenomAuthorityMetadataRequest::QueryDenomAuthorityMetadataRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.creator_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.sub_denom_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QueryDenomAuthorityMetadataRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryDenomAuthorityMetadataRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryDenomAuthorityMetadataRequestDefaultTypeInternal() {}
  union {
    QueryDenomAuthorityMetadataRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryDenomAuthorityMetadataRequestDefaultTypeInternal _QueryDenomAuthorityMetadataRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryDenomAuthorityMetadataResponse::QueryDenomAuthorityMetadataResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.authority_metadata_)*/nullptr} {}
struct QueryDenomAuthorityMetadataResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryDenomAuthorityMetadataResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryDenomAuthorityMetadataResponseDefaultTypeInternal() {}
  union {
    QueryDenomAuthorityMetadataResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryDenomAuthorityMetadataResponseDefaultTypeInternal _QueryDenomAuthorityMetadataResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryDenomsFromCreatorRequest::QueryDenomsFromCreatorRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.creator_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QueryDenomsFromCreatorRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryDenomsFromCreatorRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryDenomsFromCreatorRequestDefaultTypeInternal() {}
  union {
    QueryDenomsFromCreatorRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryDenomsFromCreatorRequestDefaultTypeInternal _QueryDenomsFromCreatorRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryDenomsFromCreatorResponse::QueryDenomsFromCreatorResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.denoms_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QueryDenomsFromCreatorResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryDenomsFromCreatorResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryDenomsFromCreatorResponseDefaultTypeInternal() {}
  union {
    QueryDenomsFromCreatorResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryDenomsFromCreatorResponseDefaultTypeInternal _QueryDenomsFromCreatorResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryModuleStateRequest::QueryModuleStateRequest(
    ::_pbi::ConstantInitialized) {}
struct QueryModuleStateRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryModuleStateRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryModuleStateRequestDefaultTypeInternal() {}
  union {
    QueryModuleStateRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryModuleStateRequestDefaultTypeInternal _QueryModuleStateRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryModuleStateResponse::QueryModuleStateResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.state_)*/nullptr} {}
struct QueryModuleStateResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryModuleStateResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryModuleStateResponseDefaultTypeInternal() {}
  union {
    QueryModuleStateResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryModuleStateResponseDefaultTypeInternal _QueryModuleStateResponse_default_instance_;
}  // namespace v1beta1
}  // namespace tokenfactory
}  // namespace injective
static ::_pb::Metadata file_level_metadata_injective_2ftokenfactory_2fv1beta1_2fquery_2eproto[8];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_injective_2ftokenfactory_2fv1beta1_2fquery_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_injective_2ftokenfactory_2fv1beta1_2fquery_2eproto = nullptr;
const ::uint32_t TableStruct_injective_2ftokenfactory_2fv1beta1_2fquery_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::tokenfactory::v1beta1::QueryParamsRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::tokenfactory::v1beta1::QueryParamsResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::injective::tokenfactory::v1beta1::QueryParamsResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::tokenfactory::v1beta1::QueryParamsResponse, _impl_.params_),
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::tokenfactory::v1beta1::QueryDenomAuthorityMetadataRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::tokenfactory::v1beta1::QueryDenomAuthorityMetadataRequest, _impl_.creator_),
    PROTOBUF_FIELD_OFFSET(::injective::tokenfactory::v1beta1::QueryDenomAuthorityMetadataRequest, _impl_.sub_denom_),
    PROTOBUF_FIELD_OFFSET(::injective::tokenfactory::v1beta1::QueryDenomAuthorityMetadataResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::injective::tokenfactory::v1beta1::QueryDenomAuthorityMetadataResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::tokenfactory::v1beta1::QueryDenomAuthorityMetadataResponse, _impl_.authority_metadata_),
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::tokenfactory::v1beta1::QueryDenomsFromCreatorRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::tokenfactory::v1beta1::QueryDenomsFromCreatorRequest, _impl_.creator_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::tokenfactory::v1beta1::QueryDenomsFromCreatorResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::tokenfactory::v1beta1::QueryDenomsFromCreatorResponse, _impl_.denoms_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::tokenfactory::v1beta1::QueryModuleStateRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::tokenfactory::v1beta1::QueryModuleStateResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::injective::tokenfactory::v1beta1::QueryModuleStateResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::tokenfactory::v1beta1::QueryModuleStateResponse, _impl_.state_),
    0,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::injective::tokenfactory::v1beta1::QueryParamsRequest)},
        { 8, 17, -1, sizeof(::injective::tokenfactory::v1beta1::QueryParamsResponse)},
        { 18, -1, -1, sizeof(::injective::tokenfactory::v1beta1::QueryDenomAuthorityMetadataRequest)},
        { 28, 37, -1, sizeof(::injective::tokenfactory::v1beta1::QueryDenomAuthorityMetadataResponse)},
        { 38, -1, -1, sizeof(::injective::tokenfactory::v1beta1::QueryDenomsFromCreatorRequest)},
        { 47, -1, -1, sizeof(::injective::tokenfactory::v1beta1::QueryDenomsFromCreatorResponse)},
        { 56, -1, -1, sizeof(::injective::tokenfactory::v1beta1::QueryModuleStateRequest)},
        { 64, 73, -1, sizeof(::injective::tokenfactory::v1beta1::QueryModuleStateResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::injective::tokenfactory::v1beta1::_QueryParamsRequest_default_instance_._instance,
    &::injective::tokenfactory::v1beta1::_QueryParamsResponse_default_instance_._instance,
    &::injective::tokenfactory::v1beta1::_QueryDenomAuthorityMetadataRequest_default_instance_._instance,
    &::injective::tokenfactory::v1beta1::_QueryDenomAuthorityMetadataResponse_default_instance_._instance,
    &::injective::tokenfactory::v1beta1::_QueryDenomsFromCreatorRequest_default_instance_._instance,
    &::injective::tokenfactory::v1beta1::_QueryDenomsFromCreatorResponse_default_instance_._instance,
    &::injective::tokenfactory::v1beta1::_QueryModuleStateRequest_default_instance_._instance,
    &::injective::tokenfactory::v1beta1::_QueryModuleStateResponse_default_instance_._instance,
};
const char descriptor_table_protodef_injective_2ftokenfactory_2fv1beta1_2fquery_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n*injective/tokenfactory/v1beta1/query.p"
    "roto\022\036injective.tokenfactory.v1beta1\032\024go"
    "goproto/gogo.proto\032\034google/api/annotatio"
    "ns.proto\032*cosmos/base/query/v1beta1/pagi"
    "nation.proto\0326injective/tokenfactory/v1b"
    "eta1/authorityMetadata.proto\032+injective/"
    "tokenfactory/v1beta1/params.proto\032,injec"
    "tive/tokenfactory/v1beta1/genesis.proto\""
    "\024\n\022QueryParamsRequest\"[\n\023QueryParamsResp"
    "onse\022D\n\006params\030\001 \001(\0132&.injective.tokenfa"
    "ctory.v1beta1.ParamsB\004\310\336\037\000R\006params\"\203\001\n\"Q"
    "ueryDenomAuthorityMetadataRequest\022*\n\007cre"
    "ator\030\001 \001(\tB\020\362\336\037\014yaml:\"denom\"R\007creator\0221\n"
    "\tsub_denom\030\002 \001(\tB\024\362\336\037\020yaml:\"sub_denom\"R\010"
    "subDenom\"\260\001\n#QueryDenomAuthorityMetadata"
    "Response\022\210\001\n\022authority_metadata\030\001 \001(\01326."
    "injective.tokenfactory.v1beta1.DenomAuth"
    "orityMetadataB!\310\336\037\000\362\336\037\031yaml:\"authority_m"
    "etadata\"R\021authorityMetadata\"M\n\035QueryDeno"
    "msFromCreatorRequest\022,\n\007creator\030\001 \001(\tB\022\362"
    "\336\037\016yaml:\"creator\"R\007creator\"K\n\036QueryDenom"
    "sFromCreatorResponse\022)\n\006denoms\030\001 \003(\tB\021\362\336"
    "\037\ryaml:\"denoms\"R\006denoms\"\031\n\027QueryModuleSt"
    "ateRequest\"^\n\030QueryModuleStateResponse\022B"
    "\n\005state\030\001 \001(\0132,.injective.tokenfactory.v"
    "1beta1.GenesisStateR\005state2\311\006\n\005Query\022\241\001\n"
    "\006Params\0222.injective.tokenfactory.v1beta1"
    ".QueryParamsRequest\0323.injective.tokenfac"
    "tory.v1beta1.QueryParamsResponse\".\202\323\344\223\002("
    "\022&/injective/tokenfactory/v1beta1/params"
    "\022\372\001\n\026DenomAuthorityMetadata\022B.injective."
    "tokenfactory.v1beta1.QueryDenomAuthority"
    "MetadataRequest\032C.injective.tokenfactory"
    ".v1beta1.QueryDenomAuthorityMetadataResp"
    "onse\"W\202\323\344\223\002Q\022O/injective/tokenfactory/v1"
    "beta1/denoms/{creator}/{sub_denom}/autho"
    "rity_metadata\022\331\001\n\021DenomsFromCreator\022=.in"
    "jective.tokenfactory.v1beta1.QueryDenoms"
    "FromCreatorRequest\032>.injective.tokenfact"
    "ory.v1beta1.QueryDenomsFromCreatorRespon"
    "se\"E\202\323\344\223\002\?\022=/injective/tokenfactory/v1be"
    "ta1/denoms_from_creator/{creator}\022\302\001\n\027To"
    "kenfactoryModuleState\0227.injective.tokenf"
    "actory.v1beta1.QueryModuleStateRequest\0328"
    ".injective.tokenfactory.v1beta1.QueryMod"
    "uleStateResponse\"4\202\323\344\223\002.\022,/injective/tok"
    "enfactory/v1beta1/module_stateB\236\002\n\"com.i"
    "njective.tokenfactory.v1beta1B\nQueryProt"
    "oP\001ZRgithub.com/InjectiveLabs/injective-"
    "core/injective-chain/modules/tokenfactor"
    "y/types\242\002\003ITX\252\002\036Injective.Tokenfactory.V"
    "1beta1\312\002\036Injective\\Tokenfactory\\V1beta1\342"
    "\002*Injective\\Tokenfactory\\V1beta1\\GPBMeta"
    "data\352\002 Injective::Tokenfactory::V1beta1b"
    "\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_injective_2ftokenfactory_2fv1beta1_2fquery_2eproto_deps[6] =
    {
        &::descriptor_table_cosmos_2fbase_2fquery_2fv1beta1_2fpagination_2eproto,
        &::descriptor_table_gogoproto_2fgogo_2eproto,
        &::descriptor_table_google_2fapi_2fannotations_2eproto,
        &::descriptor_table_injective_2ftokenfactory_2fv1beta1_2fauthorityMetadata_2eproto,
        &::descriptor_table_injective_2ftokenfactory_2fv1beta1_2fgenesis_2eproto,
        &::descriptor_table_injective_2ftokenfactory_2fv1beta1_2fparams_2eproto,
};
static ::absl::once_flag descriptor_table_injective_2ftokenfactory_2fv1beta1_2fquery_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_injective_2ftokenfactory_2fv1beta1_2fquery_2eproto = {
    false,
    false,
    2167,
    descriptor_table_protodef_injective_2ftokenfactory_2fv1beta1_2fquery_2eproto,
    "injective/tokenfactory/v1beta1/query.proto",
    &descriptor_table_injective_2ftokenfactory_2fv1beta1_2fquery_2eproto_once,
    descriptor_table_injective_2ftokenfactory_2fv1beta1_2fquery_2eproto_deps,
    6,
    8,
    schemas,
    file_default_instances,
    TableStruct_injective_2ftokenfactory_2fv1beta1_2fquery_2eproto::offsets,
    file_level_metadata_injective_2ftokenfactory_2fv1beta1_2fquery_2eproto,
    file_level_enum_descriptors_injective_2ftokenfactory_2fv1beta1_2fquery_2eproto,
    file_level_service_descriptors_injective_2ftokenfactory_2fv1beta1_2fquery_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_injective_2ftokenfactory_2fv1beta1_2fquery_2eproto_getter() {
  return &descriptor_table_injective_2ftokenfactory_2fv1beta1_2fquery_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_injective_2ftokenfactory_2fv1beta1_2fquery_2eproto(&descriptor_table_injective_2ftokenfactory_2fv1beta1_2fquery_2eproto);
namespace injective {
namespace tokenfactory {
namespace v1beta1 {
// ===================================================================

class QueryParamsRequest::_Internal {
 public:
};

QueryParamsRequest::QueryParamsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:injective.tokenfactory.v1beta1.QueryParamsRequest)
}
QueryParamsRequest::QueryParamsRequest(const QueryParamsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  QueryParamsRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:injective.tokenfactory.v1beta1.QueryParamsRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryParamsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryParamsRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata QueryParamsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2ftokenfactory_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2ftokenfactory_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2ftokenfactory_2fv1beta1_2fquery_2eproto[0]);
}
// ===================================================================

class QueryParamsResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<QueryParamsResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(QueryParamsResponse, _impl_._has_bits_);
  static const ::injective::tokenfactory::v1beta1::Params& params(const QueryParamsResponse* msg);
  static void set_has_params(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::injective::tokenfactory::v1beta1::Params&
QueryParamsResponse::_Internal::params(const QueryParamsResponse* msg) {
  return *msg->_impl_.params_;
}
void QueryParamsResponse::clear_params() {
  if (_impl_.params_ != nullptr) _impl_.params_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
QueryParamsResponse::QueryParamsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.tokenfactory.v1beta1.QueryParamsResponse)
}
QueryParamsResponse::QueryParamsResponse(const QueryParamsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryParamsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.params_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.params_ = new ::injective::tokenfactory::v1beta1::Params(*from._impl_.params_);
  }
  // @@protoc_insertion_point(copy_constructor:injective.tokenfactory.v1beta1.QueryParamsResponse)
}

inline void QueryParamsResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.params_){nullptr}
  };
}

QueryParamsResponse::~QueryParamsResponse() {
  // @@protoc_insertion_point(destructor:injective.tokenfactory.v1beta1.QueryParamsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryParamsResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.params_;
}

void QueryParamsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryParamsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.tokenfactory.v1beta1.QueryParamsResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.params_ != nullptr);
    _impl_.params_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryParamsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .injective.tokenfactory.v1beta1.Params params = 1 [json_name = "params", (.gogoproto.nullable) = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_params(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryParamsResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.tokenfactory.v1beta1.QueryParamsResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .injective.tokenfactory.v1beta1.Params params = 1 [json_name = "params", (.gogoproto.nullable) = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::params(this),
        _Internal::params(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.tokenfactory.v1beta1.QueryParamsResponse)
  return target;
}

::size_t QueryParamsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.tokenfactory.v1beta1.QueryParamsResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .injective.tokenfactory.v1beta1.Params params = 1 [json_name = "params", (.gogoproto.nullable) = false];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.params_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryParamsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryParamsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryParamsResponse::GetClassData() const { return &_class_data_; }


void QueryParamsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryParamsResponse*>(&to_msg);
  auto& from = static_cast<const QueryParamsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.tokenfactory.v1beta1.QueryParamsResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_params()->::injective::tokenfactory::v1beta1::Params::MergeFrom(
        from._internal_params());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryParamsResponse::CopyFrom(const QueryParamsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.tokenfactory.v1beta1.QueryParamsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryParamsResponse::IsInitialized() const {
  return true;
}

void QueryParamsResponse::InternalSwap(QueryParamsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.params_, other->_impl_.params_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryParamsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2ftokenfactory_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2ftokenfactory_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2ftokenfactory_2fv1beta1_2fquery_2eproto[1]);
}
// ===================================================================

class QueryDenomAuthorityMetadataRequest::_Internal {
 public:
};

QueryDenomAuthorityMetadataRequest::QueryDenomAuthorityMetadataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.tokenfactory.v1beta1.QueryDenomAuthorityMetadataRequest)
}
QueryDenomAuthorityMetadataRequest::QueryDenomAuthorityMetadataRequest(const QueryDenomAuthorityMetadataRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryDenomAuthorityMetadataRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.creator_) {}

    , decltype(_impl_.sub_denom_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.creator_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.creator_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_creator().empty()) {
    _this->_impl_.creator_.Set(from._internal_creator(), _this->GetArenaForAllocation());
  }
  _impl_.sub_denom_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.sub_denom_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sub_denom().empty()) {
    _this->_impl_.sub_denom_.Set(from._internal_sub_denom(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:injective.tokenfactory.v1beta1.QueryDenomAuthorityMetadataRequest)
}

inline void QueryDenomAuthorityMetadataRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.creator_) {}

    , decltype(_impl_.sub_denom_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.creator_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.creator_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sub_denom_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.sub_denom_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

QueryDenomAuthorityMetadataRequest::~QueryDenomAuthorityMetadataRequest() {
  // @@protoc_insertion_point(destructor:injective.tokenfactory.v1beta1.QueryDenomAuthorityMetadataRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryDenomAuthorityMetadataRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.creator_.Destroy();
  _impl_.sub_denom_.Destroy();
}

void QueryDenomAuthorityMetadataRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryDenomAuthorityMetadataRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.tokenfactory.v1beta1.QueryDenomAuthorityMetadataRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.creator_.ClearToEmpty();
  _impl_.sub_denom_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryDenomAuthorityMetadataRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string creator = 1 [json_name = "creator", (.gogoproto.moretags) = "yaml:\"denom\""];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_creator();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.tokenfactory.v1beta1.QueryDenomAuthorityMetadataRequest.creator"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string sub_denom = 2 [json_name = "subDenom", (.gogoproto.moretags) = "yaml:\"sub_denom\""];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_sub_denom();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.tokenfactory.v1beta1.QueryDenomAuthorityMetadataRequest.sub_denom"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryDenomAuthorityMetadataRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.tokenfactory.v1beta1.QueryDenomAuthorityMetadataRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string creator = 1 [json_name = "creator", (.gogoproto.moretags) = "yaml:\"denom\""];
  if (!this->_internal_creator().empty()) {
    const std::string& _s = this->_internal_creator();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.tokenfactory.v1beta1.QueryDenomAuthorityMetadataRequest.creator");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string sub_denom = 2 [json_name = "subDenom", (.gogoproto.moretags) = "yaml:\"sub_denom\""];
  if (!this->_internal_sub_denom().empty()) {
    const std::string& _s = this->_internal_sub_denom();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.tokenfactory.v1beta1.QueryDenomAuthorityMetadataRequest.sub_denom");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.tokenfactory.v1beta1.QueryDenomAuthorityMetadataRequest)
  return target;
}

::size_t QueryDenomAuthorityMetadataRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.tokenfactory.v1beta1.QueryDenomAuthorityMetadataRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string creator = 1 [json_name = "creator", (.gogoproto.moretags) = "yaml:\"denom\""];
  if (!this->_internal_creator().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_creator());
  }

  // string sub_denom = 2 [json_name = "subDenom", (.gogoproto.moretags) = "yaml:\"sub_denom\""];
  if (!this->_internal_sub_denom().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_sub_denom());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryDenomAuthorityMetadataRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryDenomAuthorityMetadataRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryDenomAuthorityMetadataRequest::GetClassData() const { return &_class_data_; }


void QueryDenomAuthorityMetadataRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryDenomAuthorityMetadataRequest*>(&to_msg);
  auto& from = static_cast<const QueryDenomAuthorityMetadataRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.tokenfactory.v1beta1.QueryDenomAuthorityMetadataRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_creator().empty()) {
    _this->_internal_set_creator(from._internal_creator());
  }
  if (!from._internal_sub_denom().empty()) {
    _this->_internal_set_sub_denom(from._internal_sub_denom());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryDenomAuthorityMetadataRequest::CopyFrom(const QueryDenomAuthorityMetadataRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.tokenfactory.v1beta1.QueryDenomAuthorityMetadataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryDenomAuthorityMetadataRequest::IsInitialized() const {
  return true;
}

void QueryDenomAuthorityMetadataRequest::InternalSwap(QueryDenomAuthorityMetadataRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.creator_, lhs_arena,
                                       &other->_impl_.creator_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.sub_denom_, lhs_arena,
                                       &other->_impl_.sub_denom_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryDenomAuthorityMetadataRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2ftokenfactory_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2ftokenfactory_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2ftokenfactory_2fv1beta1_2fquery_2eproto[2]);
}
// ===================================================================

class QueryDenomAuthorityMetadataResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<QueryDenomAuthorityMetadataResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(QueryDenomAuthorityMetadataResponse, _impl_._has_bits_);
  static const ::injective::tokenfactory::v1beta1::DenomAuthorityMetadata& authority_metadata(const QueryDenomAuthorityMetadataResponse* msg);
  static void set_has_authority_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::injective::tokenfactory::v1beta1::DenomAuthorityMetadata&
QueryDenomAuthorityMetadataResponse::_Internal::authority_metadata(const QueryDenomAuthorityMetadataResponse* msg) {
  return *msg->_impl_.authority_metadata_;
}
void QueryDenomAuthorityMetadataResponse::clear_authority_metadata() {
  if (_impl_.authority_metadata_ != nullptr) _impl_.authority_metadata_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
QueryDenomAuthorityMetadataResponse::QueryDenomAuthorityMetadataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.tokenfactory.v1beta1.QueryDenomAuthorityMetadataResponse)
}
QueryDenomAuthorityMetadataResponse::QueryDenomAuthorityMetadataResponse(const QueryDenomAuthorityMetadataResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryDenomAuthorityMetadataResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.authority_metadata_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.authority_metadata_ = new ::injective::tokenfactory::v1beta1::DenomAuthorityMetadata(*from._impl_.authority_metadata_);
  }
  // @@protoc_insertion_point(copy_constructor:injective.tokenfactory.v1beta1.QueryDenomAuthorityMetadataResponse)
}

inline void QueryDenomAuthorityMetadataResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.authority_metadata_){nullptr}
  };
}

QueryDenomAuthorityMetadataResponse::~QueryDenomAuthorityMetadataResponse() {
  // @@protoc_insertion_point(destructor:injective.tokenfactory.v1beta1.QueryDenomAuthorityMetadataResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryDenomAuthorityMetadataResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.authority_metadata_;
}

void QueryDenomAuthorityMetadataResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryDenomAuthorityMetadataResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.tokenfactory.v1beta1.QueryDenomAuthorityMetadataResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.authority_metadata_ != nullptr);
    _impl_.authority_metadata_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryDenomAuthorityMetadataResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .injective.tokenfactory.v1beta1.DenomAuthorityMetadata authority_metadata = 1 [json_name = "authorityMetadata", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:\"authority_metadata\""];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_authority_metadata(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryDenomAuthorityMetadataResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.tokenfactory.v1beta1.QueryDenomAuthorityMetadataResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .injective.tokenfactory.v1beta1.DenomAuthorityMetadata authority_metadata = 1 [json_name = "authorityMetadata", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:\"authority_metadata\""];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::authority_metadata(this),
        _Internal::authority_metadata(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.tokenfactory.v1beta1.QueryDenomAuthorityMetadataResponse)
  return target;
}

::size_t QueryDenomAuthorityMetadataResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.tokenfactory.v1beta1.QueryDenomAuthorityMetadataResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .injective.tokenfactory.v1beta1.DenomAuthorityMetadata authority_metadata = 1 [json_name = "authorityMetadata", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:\"authority_metadata\""];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.authority_metadata_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryDenomAuthorityMetadataResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryDenomAuthorityMetadataResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryDenomAuthorityMetadataResponse::GetClassData() const { return &_class_data_; }


void QueryDenomAuthorityMetadataResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryDenomAuthorityMetadataResponse*>(&to_msg);
  auto& from = static_cast<const QueryDenomAuthorityMetadataResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.tokenfactory.v1beta1.QueryDenomAuthorityMetadataResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_authority_metadata()->::injective::tokenfactory::v1beta1::DenomAuthorityMetadata::MergeFrom(
        from._internal_authority_metadata());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryDenomAuthorityMetadataResponse::CopyFrom(const QueryDenomAuthorityMetadataResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.tokenfactory.v1beta1.QueryDenomAuthorityMetadataResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryDenomAuthorityMetadataResponse::IsInitialized() const {
  return true;
}

void QueryDenomAuthorityMetadataResponse::InternalSwap(QueryDenomAuthorityMetadataResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.authority_metadata_, other->_impl_.authority_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryDenomAuthorityMetadataResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2ftokenfactory_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2ftokenfactory_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2ftokenfactory_2fv1beta1_2fquery_2eproto[3]);
}
// ===================================================================

class QueryDenomsFromCreatorRequest::_Internal {
 public:
};

QueryDenomsFromCreatorRequest::QueryDenomsFromCreatorRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.tokenfactory.v1beta1.QueryDenomsFromCreatorRequest)
}
QueryDenomsFromCreatorRequest::QueryDenomsFromCreatorRequest(const QueryDenomsFromCreatorRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryDenomsFromCreatorRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.creator_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.creator_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.creator_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_creator().empty()) {
    _this->_impl_.creator_.Set(from._internal_creator(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:injective.tokenfactory.v1beta1.QueryDenomsFromCreatorRequest)
}

inline void QueryDenomsFromCreatorRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.creator_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.creator_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.creator_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

QueryDenomsFromCreatorRequest::~QueryDenomsFromCreatorRequest() {
  // @@protoc_insertion_point(destructor:injective.tokenfactory.v1beta1.QueryDenomsFromCreatorRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryDenomsFromCreatorRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.creator_.Destroy();
}

void QueryDenomsFromCreatorRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryDenomsFromCreatorRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.tokenfactory.v1beta1.QueryDenomsFromCreatorRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.creator_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryDenomsFromCreatorRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string creator = 1 [json_name = "creator", (.gogoproto.moretags) = "yaml:\"creator\""];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_creator();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.tokenfactory.v1beta1.QueryDenomsFromCreatorRequest.creator"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryDenomsFromCreatorRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.tokenfactory.v1beta1.QueryDenomsFromCreatorRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string creator = 1 [json_name = "creator", (.gogoproto.moretags) = "yaml:\"creator\""];
  if (!this->_internal_creator().empty()) {
    const std::string& _s = this->_internal_creator();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.tokenfactory.v1beta1.QueryDenomsFromCreatorRequest.creator");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.tokenfactory.v1beta1.QueryDenomsFromCreatorRequest)
  return target;
}

::size_t QueryDenomsFromCreatorRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.tokenfactory.v1beta1.QueryDenomsFromCreatorRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string creator = 1 [json_name = "creator", (.gogoproto.moretags) = "yaml:\"creator\""];
  if (!this->_internal_creator().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_creator());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryDenomsFromCreatorRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryDenomsFromCreatorRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryDenomsFromCreatorRequest::GetClassData() const { return &_class_data_; }


void QueryDenomsFromCreatorRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryDenomsFromCreatorRequest*>(&to_msg);
  auto& from = static_cast<const QueryDenomsFromCreatorRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.tokenfactory.v1beta1.QueryDenomsFromCreatorRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_creator().empty()) {
    _this->_internal_set_creator(from._internal_creator());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryDenomsFromCreatorRequest::CopyFrom(const QueryDenomsFromCreatorRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.tokenfactory.v1beta1.QueryDenomsFromCreatorRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryDenomsFromCreatorRequest::IsInitialized() const {
  return true;
}

void QueryDenomsFromCreatorRequest::InternalSwap(QueryDenomsFromCreatorRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.creator_, lhs_arena,
                                       &other->_impl_.creator_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryDenomsFromCreatorRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2ftokenfactory_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2ftokenfactory_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2ftokenfactory_2fv1beta1_2fquery_2eproto[4]);
}
// ===================================================================

class QueryDenomsFromCreatorResponse::_Internal {
 public:
};

QueryDenomsFromCreatorResponse::QueryDenomsFromCreatorResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.tokenfactory.v1beta1.QueryDenomsFromCreatorResponse)
}
QueryDenomsFromCreatorResponse::QueryDenomsFromCreatorResponse(const QueryDenomsFromCreatorResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryDenomsFromCreatorResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.denoms_){from._impl_.denoms_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:injective.tokenfactory.v1beta1.QueryDenomsFromCreatorResponse)
}

inline void QueryDenomsFromCreatorResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.denoms_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

QueryDenomsFromCreatorResponse::~QueryDenomsFromCreatorResponse() {
  // @@protoc_insertion_point(destructor:injective.tokenfactory.v1beta1.QueryDenomsFromCreatorResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryDenomsFromCreatorResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_denoms()->~RepeatedPtrField();
}

void QueryDenomsFromCreatorResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryDenomsFromCreatorResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.tokenfactory.v1beta1.QueryDenomsFromCreatorResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_denoms()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryDenomsFromCreatorResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string denoms = 1 [json_name = "denoms", (.gogoproto.moretags) = "yaml:\"denoms\""];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_denoms();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "injective.tokenfactory.v1beta1.QueryDenomsFromCreatorResponse.denoms"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryDenomsFromCreatorResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.tokenfactory.v1beta1.QueryDenomsFromCreatorResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string denoms = 1 [json_name = "denoms", (.gogoproto.moretags) = "yaml:\"denoms\""];
  for (int i = 0, n = this->_internal_denoms_size(); i < n; ++i) {
    const auto& s = this->_internal_denoms(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.tokenfactory.v1beta1.QueryDenomsFromCreatorResponse.denoms");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.tokenfactory.v1beta1.QueryDenomsFromCreatorResponse)
  return target;
}

::size_t QueryDenomsFromCreatorResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.tokenfactory.v1beta1.QueryDenomsFromCreatorResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string denoms = 1 [json_name = "denoms", (.gogoproto.moretags) = "yaml:\"denoms\""];
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_denoms().size());
  for (int i = 0, n = _internal_denoms().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_denoms().Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryDenomsFromCreatorResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryDenomsFromCreatorResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryDenomsFromCreatorResponse::GetClassData() const { return &_class_data_; }


void QueryDenomsFromCreatorResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryDenomsFromCreatorResponse*>(&to_msg);
  auto& from = static_cast<const QueryDenomsFromCreatorResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.tokenfactory.v1beta1.QueryDenomsFromCreatorResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_denoms()->MergeFrom(from._internal_denoms());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryDenomsFromCreatorResponse::CopyFrom(const QueryDenomsFromCreatorResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.tokenfactory.v1beta1.QueryDenomsFromCreatorResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryDenomsFromCreatorResponse::IsInitialized() const {
  return true;
}

void QueryDenomsFromCreatorResponse::InternalSwap(QueryDenomsFromCreatorResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_denoms()->InternalSwap(
      other->_internal_mutable_denoms());
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryDenomsFromCreatorResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2ftokenfactory_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2ftokenfactory_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2ftokenfactory_2fv1beta1_2fquery_2eproto[5]);
}
// ===================================================================

class QueryModuleStateRequest::_Internal {
 public:
};

QueryModuleStateRequest::QueryModuleStateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:injective.tokenfactory.v1beta1.QueryModuleStateRequest)
}
QueryModuleStateRequest::QueryModuleStateRequest(const QueryModuleStateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  QueryModuleStateRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:injective.tokenfactory.v1beta1.QueryModuleStateRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryModuleStateRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryModuleStateRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata QueryModuleStateRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2ftokenfactory_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2ftokenfactory_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2ftokenfactory_2fv1beta1_2fquery_2eproto[6]);
}
// ===================================================================

class QueryModuleStateResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<QueryModuleStateResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(QueryModuleStateResponse, _impl_._has_bits_);
  static const ::injective::tokenfactory::v1beta1::GenesisState& state(const QueryModuleStateResponse* msg);
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::injective::tokenfactory::v1beta1::GenesisState&
QueryModuleStateResponse::_Internal::state(const QueryModuleStateResponse* msg) {
  return *msg->_impl_.state_;
}
void QueryModuleStateResponse::clear_state() {
  if (_impl_.state_ != nullptr) _impl_.state_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
QueryModuleStateResponse::QueryModuleStateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.tokenfactory.v1beta1.QueryModuleStateResponse)
}
QueryModuleStateResponse::QueryModuleStateResponse(const QueryModuleStateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryModuleStateResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.state_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.state_ = new ::injective::tokenfactory::v1beta1::GenesisState(*from._impl_.state_);
  }
  // @@protoc_insertion_point(copy_constructor:injective.tokenfactory.v1beta1.QueryModuleStateResponse)
}

inline void QueryModuleStateResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.state_){nullptr}
  };
}

QueryModuleStateResponse::~QueryModuleStateResponse() {
  // @@protoc_insertion_point(destructor:injective.tokenfactory.v1beta1.QueryModuleStateResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryModuleStateResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.state_;
}

void QueryModuleStateResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryModuleStateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.tokenfactory.v1beta1.QueryModuleStateResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.state_ != nullptr);
    _impl_.state_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryModuleStateResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .injective.tokenfactory.v1beta1.GenesisState state = 1 [json_name = "state"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_state(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryModuleStateResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.tokenfactory.v1beta1.QueryModuleStateResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .injective.tokenfactory.v1beta1.GenesisState state = 1 [json_name = "state"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::state(this),
        _Internal::state(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.tokenfactory.v1beta1.QueryModuleStateResponse)
  return target;
}

::size_t QueryModuleStateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.tokenfactory.v1beta1.QueryModuleStateResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .injective.tokenfactory.v1beta1.GenesisState state = 1 [json_name = "state"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.state_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryModuleStateResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryModuleStateResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryModuleStateResponse::GetClassData() const { return &_class_data_; }


void QueryModuleStateResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryModuleStateResponse*>(&to_msg);
  auto& from = static_cast<const QueryModuleStateResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.tokenfactory.v1beta1.QueryModuleStateResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_state()->::injective::tokenfactory::v1beta1::GenesisState::MergeFrom(
        from._internal_state());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryModuleStateResponse::CopyFrom(const QueryModuleStateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.tokenfactory.v1beta1.QueryModuleStateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryModuleStateResponse::IsInitialized() const {
  return true;
}

void QueryModuleStateResponse::InternalSwap(QueryModuleStateResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.state_, other->_impl_.state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryModuleStateResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2ftokenfactory_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2ftokenfactory_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2ftokenfactory_2fv1beta1_2fquery_2eproto[7]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1beta1
}  // namespace tokenfactory
}  // namespace injective
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::injective::tokenfactory::v1beta1::QueryParamsRequest*
Arena::CreateMaybeMessage< ::injective::tokenfactory::v1beta1::QueryParamsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::tokenfactory::v1beta1::QueryParamsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::tokenfactory::v1beta1::QueryParamsResponse*
Arena::CreateMaybeMessage< ::injective::tokenfactory::v1beta1::QueryParamsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::tokenfactory::v1beta1::QueryParamsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::tokenfactory::v1beta1::QueryDenomAuthorityMetadataRequest*
Arena::CreateMaybeMessage< ::injective::tokenfactory::v1beta1::QueryDenomAuthorityMetadataRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::tokenfactory::v1beta1::QueryDenomAuthorityMetadataRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::tokenfactory::v1beta1::QueryDenomAuthorityMetadataResponse*
Arena::CreateMaybeMessage< ::injective::tokenfactory::v1beta1::QueryDenomAuthorityMetadataResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::tokenfactory::v1beta1::QueryDenomAuthorityMetadataResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::tokenfactory::v1beta1::QueryDenomsFromCreatorRequest*
Arena::CreateMaybeMessage< ::injective::tokenfactory::v1beta1::QueryDenomsFromCreatorRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::tokenfactory::v1beta1::QueryDenomsFromCreatorRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::tokenfactory::v1beta1::QueryDenomsFromCreatorResponse*
Arena::CreateMaybeMessage< ::injective::tokenfactory::v1beta1::QueryDenomsFromCreatorResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::tokenfactory::v1beta1::QueryDenomsFromCreatorResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::tokenfactory::v1beta1::QueryModuleStateRequest*
Arena::CreateMaybeMessage< ::injective::tokenfactory::v1beta1::QueryModuleStateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::tokenfactory::v1beta1::QueryModuleStateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::tokenfactory::v1beta1::QueryModuleStateResponse*
Arena::CreateMaybeMessage< ::injective::tokenfactory::v1beta1::QueryModuleStateResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::tokenfactory::v1beta1::QueryModuleStateResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

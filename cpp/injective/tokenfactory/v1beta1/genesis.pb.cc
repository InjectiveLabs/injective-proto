// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: injective/tokenfactory/v1beta1/genesis.proto

#include "injective/tokenfactory/v1beta1/genesis.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace injective {
namespace tokenfactory {
namespace v1beta1 {
template <typename>
PROTOBUF_CONSTEXPR GenesisState::GenesisState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.factory_denoms_)*/{}
  , /*decltype(_impl_.params_)*/nullptr} {}
struct GenesisStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GenesisStateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GenesisStateDefaultTypeInternal() {}
  union {
    GenesisState _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GenesisStateDefaultTypeInternal _GenesisState_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR GenesisDenom::GenesisDenom(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.denom_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.authority_metadata_)*/nullptr} {}
struct GenesisDenomDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GenesisDenomDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GenesisDenomDefaultTypeInternal() {}
  union {
    GenesisDenom _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GenesisDenomDefaultTypeInternal _GenesisDenom_default_instance_;
}  // namespace v1beta1
}  // namespace tokenfactory
}  // namespace injective
static ::_pb::Metadata file_level_metadata_injective_2ftokenfactory_2fv1beta1_2fgenesis_2eproto[2];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_injective_2ftokenfactory_2fv1beta1_2fgenesis_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_injective_2ftokenfactory_2fv1beta1_2fgenesis_2eproto = nullptr;
const ::uint32_t TableStruct_injective_2ftokenfactory_2fv1beta1_2fgenesis_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::injective::tokenfactory::v1beta1::GenesisState, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::injective::tokenfactory::v1beta1::GenesisState, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::tokenfactory::v1beta1::GenesisState, _impl_.params_),
    PROTOBUF_FIELD_OFFSET(::injective::tokenfactory::v1beta1::GenesisState, _impl_.factory_denoms_),
    0,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::injective::tokenfactory::v1beta1::GenesisDenom, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::injective::tokenfactory::v1beta1::GenesisDenom, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::tokenfactory::v1beta1::GenesisDenom, _impl_.denom_),
    PROTOBUF_FIELD_OFFSET(::injective::tokenfactory::v1beta1::GenesisDenom, _impl_.authority_metadata_),
    ~0u,
    0,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 10, -1, sizeof(::injective::tokenfactory::v1beta1::GenesisState)},
        { 12, 22, -1, sizeof(::injective::tokenfactory::v1beta1::GenesisDenom)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::injective::tokenfactory::v1beta1::_GenesisState_default_instance_._instance,
    &::injective::tokenfactory::v1beta1::_GenesisDenom_default_instance_._instance,
};
const char descriptor_table_protodef_injective_2ftokenfactory_2fv1beta1_2fgenesis_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n,injective/tokenfactory/v1beta1/genesis"
    ".proto\022\036injective.tokenfactory.v1beta1\032\024"
    "gogoproto/gogo.proto\0326injective/tokenfac"
    "tory/v1beta1/authorityMetadata.proto\032+in"
    "jective/tokenfactory/v1beta1/params.prot"
    "o\"\310\001\n\014GenesisState\022D\n\006params\030\001 \001(\0132&.inj"
    "ective.tokenfactory.v1beta1.ParamsB\004\310\336\037\000"
    "R\006params\022r\n\016factory_denoms\030\002 \003(\0132,.injec"
    "tive.tokenfactory.v1beta1.GenesisDenomB\035"
    "\310\336\037\000\362\336\037\025yaml:\"factory_denoms\"R\rfactoryDe"
    "noms\"\307\001\n\014GenesisDenom\022&\n\005denom\030\001 \001(\tB\020\362\336"
    "\037\014yaml:\"denom\"R\005denom\022\210\001\n\022authority_meta"
    "data\030\002 \001(\01326.injective.tokenfactory.v1be"
    "ta1.DenomAuthorityMetadataB!\310\336\037\000\362\336\037\031yaml"
    ":\"authority_metadata\"R\021authorityMetadata"
    ":\004\350\240\037\001B\240\002\n\"com.injective.tokenfactory.v1"
    "beta1B\014GenesisProtoP\001ZRgithub.com/Inject"
    "iveLabs/injective-core/injective-chain/m"
    "odules/tokenfactory/types\242\002\003ITX\252\002\036Inject"
    "ive.Tokenfactory.V1beta1\312\002\036Injective\\Tok"
    "enfactory\\V1beta1\342\002*Injective\\Tokenfacto"
    "ry\\V1beta1\\GPBMetadata\352\002 Injective::Toke"
    "nfactory::V1beta1b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_injective_2ftokenfactory_2fv1beta1_2fgenesis_2eproto_deps[3] =
    {
        &::descriptor_table_gogoproto_2fgogo_2eproto,
        &::descriptor_table_injective_2ftokenfactory_2fv1beta1_2fauthorityMetadata_2eproto,
        &::descriptor_table_injective_2ftokenfactory_2fv1beta1_2fparams_2eproto,
};
static ::absl::once_flag descriptor_table_injective_2ftokenfactory_2fv1beta1_2fgenesis_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_injective_2ftokenfactory_2fv1beta1_2fgenesis_2eproto = {
    false,
    false,
    905,
    descriptor_table_protodef_injective_2ftokenfactory_2fv1beta1_2fgenesis_2eproto,
    "injective/tokenfactory/v1beta1/genesis.proto",
    &descriptor_table_injective_2ftokenfactory_2fv1beta1_2fgenesis_2eproto_once,
    descriptor_table_injective_2ftokenfactory_2fv1beta1_2fgenesis_2eproto_deps,
    3,
    2,
    schemas,
    file_default_instances,
    TableStruct_injective_2ftokenfactory_2fv1beta1_2fgenesis_2eproto::offsets,
    file_level_metadata_injective_2ftokenfactory_2fv1beta1_2fgenesis_2eproto,
    file_level_enum_descriptors_injective_2ftokenfactory_2fv1beta1_2fgenesis_2eproto,
    file_level_service_descriptors_injective_2ftokenfactory_2fv1beta1_2fgenesis_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_injective_2ftokenfactory_2fv1beta1_2fgenesis_2eproto_getter() {
  return &descriptor_table_injective_2ftokenfactory_2fv1beta1_2fgenesis_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_injective_2ftokenfactory_2fv1beta1_2fgenesis_2eproto(&descriptor_table_injective_2ftokenfactory_2fv1beta1_2fgenesis_2eproto);
namespace injective {
namespace tokenfactory {
namespace v1beta1 {
// ===================================================================

class GenesisState::_Internal {
 public:
  using HasBits = decltype(std::declval<GenesisState>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GenesisState, _impl_._has_bits_);
  static const ::injective::tokenfactory::v1beta1::Params& params(const GenesisState* msg);
  static void set_has_params(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::injective::tokenfactory::v1beta1::Params&
GenesisState::_Internal::params(const GenesisState* msg) {
  return *msg->_impl_.params_;
}
void GenesisState::clear_params() {
  if (_impl_.params_ != nullptr) _impl_.params_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
GenesisState::GenesisState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.tokenfactory.v1beta1.GenesisState)
}
GenesisState::GenesisState(const GenesisState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GenesisState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.factory_denoms_){from._impl_.factory_denoms_}
    , decltype(_impl_.params_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.params_ = new ::injective::tokenfactory::v1beta1::Params(*from._impl_.params_);
  }
  // @@protoc_insertion_point(copy_constructor:injective.tokenfactory.v1beta1.GenesisState)
}

inline void GenesisState::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.factory_denoms_){arena}
    , decltype(_impl_.params_){nullptr}
  };
}

GenesisState::~GenesisState() {
  // @@protoc_insertion_point(destructor:injective.tokenfactory.v1beta1.GenesisState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GenesisState::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_factory_denoms()->~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.params_;
}

void GenesisState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GenesisState::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.tokenfactory.v1beta1.GenesisState)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_factory_denoms()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.params_ != nullptr);
    _impl_.params_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GenesisState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .injective.tokenfactory.v1beta1.Params params = 1 [json_name = "params", (.gogoproto.nullable) = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_params(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .injective.tokenfactory.v1beta1.GenesisDenom factory_denoms = 2 [json_name = "factoryDenoms", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:\"factory_denoms\""];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_factory_denoms(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GenesisState::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.tokenfactory.v1beta1.GenesisState)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .injective.tokenfactory.v1beta1.Params params = 1 [json_name = "params", (.gogoproto.nullable) = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::params(this),
        _Internal::params(this).GetCachedSize(), target, stream);
  }

  // repeated .injective.tokenfactory.v1beta1.GenesisDenom factory_denoms = 2 [json_name = "factoryDenoms", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:\"factory_denoms\""];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_factory_denoms_size()); i < n; i++) {
    const auto& repfield = this->_internal_factory_denoms(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.tokenfactory.v1beta1.GenesisState)
  return target;
}

::size_t GenesisState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.tokenfactory.v1beta1.GenesisState)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .injective.tokenfactory.v1beta1.GenesisDenom factory_denoms = 2 [json_name = "factoryDenoms", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:\"factory_denoms\""];
  total_size += 1UL * this->_internal_factory_denoms_size();
  for (const auto& msg : this->_internal_factory_denoms()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .injective.tokenfactory.v1beta1.Params params = 1 [json_name = "params", (.gogoproto.nullable) = false];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.params_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GenesisState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GenesisState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GenesisState::GetClassData() const { return &_class_data_; }


void GenesisState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GenesisState*>(&to_msg);
  auto& from = static_cast<const GenesisState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.tokenfactory.v1beta1.GenesisState)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_factory_denoms()->MergeFrom(from._internal_factory_denoms());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_params()->::injective::tokenfactory::v1beta1::Params::MergeFrom(
        from._internal_params());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GenesisState::CopyFrom(const GenesisState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.tokenfactory.v1beta1.GenesisState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenesisState::IsInitialized() const {
  return true;
}

void GenesisState::InternalSwap(GenesisState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_factory_denoms()->InternalSwap(other->_internal_mutable_factory_denoms());
  swap(_impl_.params_, other->_impl_.params_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GenesisState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2ftokenfactory_2fv1beta1_2fgenesis_2eproto_getter, &descriptor_table_injective_2ftokenfactory_2fv1beta1_2fgenesis_2eproto_once,
      file_level_metadata_injective_2ftokenfactory_2fv1beta1_2fgenesis_2eproto[0]);
}
// ===================================================================

class GenesisDenom::_Internal {
 public:
  using HasBits = decltype(std::declval<GenesisDenom>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GenesisDenom, _impl_._has_bits_);
  static const ::injective::tokenfactory::v1beta1::DenomAuthorityMetadata& authority_metadata(const GenesisDenom* msg);
  static void set_has_authority_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::injective::tokenfactory::v1beta1::DenomAuthorityMetadata&
GenesisDenom::_Internal::authority_metadata(const GenesisDenom* msg) {
  return *msg->_impl_.authority_metadata_;
}
void GenesisDenom::clear_authority_metadata() {
  if (_impl_.authority_metadata_ != nullptr) _impl_.authority_metadata_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
GenesisDenom::GenesisDenom(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.tokenfactory.v1beta1.GenesisDenom)
}
GenesisDenom::GenesisDenom(const GenesisDenom& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GenesisDenom* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.denom_) {}

    , decltype(_impl_.authority_metadata_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.denom_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.denom_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_denom().empty()) {
    _this->_impl_.denom_.Set(from._internal_denom(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.authority_metadata_ = new ::injective::tokenfactory::v1beta1::DenomAuthorityMetadata(*from._impl_.authority_metadata_);
  }
  // @@protoc_insertion_point(copy_constructor:injective.tokenfactory.v1beta1.GenesisDenom)
}

inline void GenesisDenom::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.denom_) {}

    , decltype(_impl_.authority_metadata_){nullptr}
  };
  _impl_.denom_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.denom_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GenesisDenom::~GenesisDenom() {
  // @@protoc_insertion_point(destructor:injective.tokenfactory.v1beta1.GenesisDenom)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GenesisDenom::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.denom_.Destroy();
  if (this != internal_default_instance()) delete _impl_.authority_metadata_;
}

void GenesisDenom::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GenesisDenom::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.tokenfactory.v1beta1.GenesisDenom)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.denom_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.authority_metadata_ != nullptr);
    _impl_.authority_metadata_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GenesisDenom::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string denom = 1 [json_name = "denom", (.gogoproto.moretags) = "yaml:\"denom\""];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_denom();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.tokenfactory.v1beta1.GenesisDenom.denom"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .injective.tokenfactory.v1beta1.DenomAuthorityMetadata authority_metadata = 2 [json_name = "authorityMetadata", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:\"authority_metadata\""];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_authority_metadata(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GenesisDenom::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.tokenfactory.v1beta1.GenesisDenom)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string denom = 1 [json_name = "denom", (.gogoproto.moretags) = "yaml:\"denom\""];
  if (!this->_internal_denom().empty()) {
    const std::string& _s = this->_internal_denom();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.tokenfactory.v1beta1.GenesisDenom.denom");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .injective.tokenfactory.v1beta1.DenomAuthorityMetadata authority_metadata = 2 [json_name = "authorityMetadata", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:\"authority_metadata\""];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::authority_metadata(this),
        _Internal::authority_metadata(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.tokenfactory.v1beta1.GenesisDenom)
  return target;
}

::size_t GenesisDenom::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.tokenfactory.v1beta1.GenesisDenom)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string denom = 1 [json_name = "denom", (.gogoproto.moretags) = "yaml:\"denom\""];
  if (!this->_internal_denom().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_denom());
  }

  // .injective.tokenfactory.v1beta1.DenomAuthorityMetadata authority_metadata = 2 [json_name = "authorityMetadata", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:\"authority_metadata\""];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.authority_metadata_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GenesisDenom::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GenesisDenom::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GenesisDenom::GetClassData() const { return &_class_data_; }


void GenesisDenom::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GenesisDenom*>(&to_msg);
  auto& from = static_cast<const GenesisDenom&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.tokenfactory.v1beta1.GenesisDenom)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_denom().empty()) {
    _this->_internal_set_denom(from._internal_denom());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_authority_metadata()->::injective::tokenfactory::v1beta1::DenomAuthorityMetadata::MergeFrom(
        from._internal_authority_metadata());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GenesisDenom::CopyFrom(const GenesisDenom& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.tokenfactory.v1beta1.GenesisDenom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenesisDenom::IsInitialized() const {
  return true;
}

void GenesisDenom::InternalSwap(GenesisDenom* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.denom_, lhs_arena,
                                       &other->_impl_.denom_, rhs_arena);
  swap(_impl_.authority_metadata_, other->_impl_.authority_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GenesisDenom::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2ftokenfactory_2fv1beta1_2fgenesis_2eproto_getter, &descriptor_table_injective_2ftokenfactory_2fv1beta1_2fgenesis_2eproto_once,
      file_level_metadata_injective_2ftokenfactory_2fv1beta1_2fgenesis_2eproto[1]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1beta1
}  // namespace tokenfactory
}  // namespace injective
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::injective::tokenfactory::v1beta1::GenesisState*
Arena::CreateMaybeMessage< ::injective::tokenfactory::v1beta1::GenesisState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::tokenfactory::v1beta1::GenesisState >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::tokenfactory::v1beta1::GenesisDenom*
Arena::CreateMaybeMessage< ::injective::tokenfactory::v1beta1::GenesisDenom >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::tokenfactory::v1beta1::GenesisDenom >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

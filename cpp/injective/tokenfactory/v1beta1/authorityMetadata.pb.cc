// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: injective/tokenfactory/v1beta1/authorityMetadata.proto

#include "injective/tokenfactory/v1beta1/authorityMetadata.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace injective {
namespace tokenfactory {
namespace v1beta1 {
template <typename>
PROTOBUF_CONSTEXPR DenomAuthorityMetadata::DenomAuthorityMetadata(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.admin_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DenomAuthorityMetadataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DenomAuthorityMetadataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DenomAuthorityMetadataDefaultTypeInternal() {}
  union {
    DenomAuthorityMetadata _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DenomAuthorityMetadataDefaultTypeInternal _DenomAuthorityMetadata_default_instance_;
}  // namespace v1beta1
}  // namespace tokenfactory
}  // namespace injective
static ::_pb::Metadata file_level_metadata_injective_2ftokenfactory_2fv1beta1_2fauthorityMetadata_2eproto[1];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_injective_2ftokenfactory_2fv1beta1_2fauthorityMetadata_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_injective_2ftokenfactory_2fv1beta1_2fauthorityMetadata_2eproto = nullptr;
const ::uint32_t TableStruct_injective_2ftokenfactory_2fv1beta1_2fauthorityMetadata_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::tokenfactory::v1beta1::DenomAuthorityMetadata, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::tokenfactory::v1beta1::DenomAuthorityMetadata, _impl_.admin_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::injective::tokenfactory::v1beta1::DenomAuthorityMetadata)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::injective::tokenfactory::v1beta1::_DenomAuthorityMetadata_default_instance_._instance,
};
const char descriptor_table_protodef_injective_2ftokenfactory_2fv1beta1_2fauthorityMetadata_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n6injective/tokenfactory/v1beta1/authori"
    "tyMetadata.proto\022\036injective.tokenfactory"
    ".v1beta1\032\024gogoproto/gogo.proto\032\036cosmos/b"
    "ase/v1beta1/coin.proto\"F\n\026DenomAuthority"
    "Metadata\022&\n\005admin\030\001 \001(\tB\020\362\336\037\014yaml:\"admin"
    "\"R\005admin:\004\350\240\037\001B\252\002\n\"com.injective.tokenfa"
    "ctory.v1beta1B\026AuthorityMetadataProtoP\001Z"
    "Rgithub.com/InjectiveLabs/injective-core"
    "/injective-chain/modules/tokenfactory/ty"
    "pes\242\002\003ITX\252\002\036Injective.Tokenfactory.V1bet"
    "a1\312\002\036Injective\\Tokenfactory\\V1beta1\342\002*In"
    "jective\\Tokenfactory\\V1beta1\\GPBMetadata"
    "\352\002 Injective::Tokenfactory::V1beta1b\006pro"
    "to3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_injective_2ftokenfactory_2fv1beta1_2fauthorityMetadata_2eproto_deps[2] =
    {
        &::descriptor_table_cosmos_2fbase_2fv1beta1_2fcoin_2eproto,
        &::descriptor_table_gogoproto_2fgogo_2eproto,
};
static ::absl::once_flag descriptor_table_injective_2ftokenfactory_2fv1beta1_2fauthorityMetadata_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_injective_2ftokenfactory_2fv1beta1_2fauthorityMetadata_2eproto = {
    false,
    false,
    523,
    descriptor_table_protodef_injective_2ftokenfactory_2fv1beta1_2fauthorityMetadata_2eproto,
    "injective/tokenfactory/v1beta1/authorityMetadata.proto",
    &descriptor_table_injective_2ftokenfactory_2fv1beta1_2fauthorityMetadata_2eproto_once,
    descriptor_table_injective_2ftokenfactory_2fv1beta1_2fauthorityMetadata_2eproto_deps,
    2,
    1,
    schemas,
    file_default_instances,
    TableStruct_injective_2ftokenfactory_2fv1beta1_2fauthorityMetadata_2eproto::offsets,
    file_level_metadata_injective_2ftokenfactory_2fv1beta1_2fauthorityMetadata_2eproto,
    file_level_enum_descriptors_injective_2ftokenfactory_2fv1beta1_2fauthorityMetadata_2eproto,
    file_level_service_descriptors_injective_2ftokenfactory_2fv1beta1_2fauthorityMetadata_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_injective_2ftokenfactory_2fv1beta1_2fauthorityMetadata_2eproto_getter() {
  return &descriptor_table_injective_2ftokenfactory_2fv1beta1_2fauthorityMetadata_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_injective_2ftokenfactory_2fv1beta1_2fauthorityMetadata_2eproto(&descriptor_table_injective_2ftokenfactory_2fv1beta1_2fauthorityMetadata_2eproto);
namespace injective {
namespace tokenfactory {
namespace v1beta1 {
// ===================================================================

class DenomAuthorityMetadata::_Internal {
 public:
};

DenomAuthorityMetadata::DenomAuthorityMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.tokenfactory.v1beta1.DenomAuthorityMetadata)
}
DenomAuthorityMetadata::DenomAuthorityMetadata(const DenomAuthorityMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DenomAuthorityMetadata* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.admin_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.admin_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.admin_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_admin().empty()) {
    _this->_impl_.admin_.Set(from._internal_admin(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:injective.tokenfactory.v1beta1.DenomAuthorityMetadata)
}

inline void DenomAuthorityMetadata::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.admin_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.admin_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.admin_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DenomAuthorityMetadata::~DenomAuthorityMetadata() {
  // @@protoc_insertion_point(destructor:injective.tokenfactory.v1beta1.DenomAuthorityMetadata)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DenomAuthorityMetadata::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.admin_.Destroy();
}

void DenomAuthorityMetadata::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DenomAuthorityMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.tokenfactory.v1beta1.DenomAuthorityMetadata)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.admin_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DenomAuthorityMetadata::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string admin = 1 [json_name = "admin", (.gogoproto.moretags) = "yaml:\"admin\""];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_admin();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.tokenfactory.v1beta1.DenomAuthorityMetadata.admin"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* DenomAuthorityMetadata::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.tokenfactory.v1beta1.DenomAuthorityMetadata)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string admin = 1 [json_name = "admin", (.gogoproto.moretags) = "yaml:\"admin\""];
  if (!this->_internal_admin().empty()) {
    const std::string& _s = this->_internal_admin();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.tokenfactory.v1beta1.DenomAuthorityMetadata.admin");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.tokenfactory.v1beta1.DenomAuthorityMetadata)
  return target;
}

::size_t DenomAuthorityMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.tokenfactory.v1beta1.DenomAuthorityMetadata)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string admin = 1 [json_name = "admin", (.gogoproto.moretags) = "yaml:\"admin\""];
  if (!this->_internal_admin().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_admin());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DenomAuthorityMetadata::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DenomAuthorityMetadata::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DenomAuthorityMetadata::GetClassData() const { return &_class_data_; }


void DenomAuthorityMetadata::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DenomAuthorityMetadata*>(&to_msg);
  auto& from = static_cast<const DenomAuthorityMetadata&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.tokenfactory.v1beta1.DenomAuthorityMetadata)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_admin().empty()) {
    _this->_internal_set_admin(from._internal_admin());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DenomAuthorityMetadata::CopyFrom(const DenomAuthorityMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.tokenfactory.v1beta1.DenomAuthorityMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DenomAuthorityMetadata::IsInitialized() const {
  return true;
}

void DenomAuthorityMetadata::InternalSwap(DenomAuthorityMetadata* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.admin_, lhs_arena,
                                       &other->_impl_.admin_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata DenomAuthorityMetadata::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2ftokenfactory_2fv1beta1_2fauthorityMetadata_2eproto_getter, &descriptor_table_injective_2ftokenfactory_2fv1beta1_2fauthorityMetadata_2eproto_once,
      file_level_metadata_injective_2ftokenfactory_2fv1beta1_2fauthorityMetadata_2eproto[0]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1beta1
}  // namespace tokenfactory
}  // namespace injective
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::injective::tokenfactory::v1beta1::DenomAuthorityMetadata*
Arena::CreateMaybeMessage< ::injective::tokenfactory::v1beta1::DenomAuthorityMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::tokenfactory::v1beta1::DenomAuthorityMetadata >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: injective/exchange/v1beta1/genesis.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_injective_2fexchange_2fv1beta1_2fgenesis_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_injective_2fexchange_2fv1beta1_2fgenesis_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "injective/exchange/v1beta1/exchange.pb.h"
#include "injective/exchange/v1beta1/tx.pb.h"
#include "gogoproto/gogo.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_injective_2fexchange_2fv1beta1_2fgenesis_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_injective_2fexchange_2fv1beta1_2fgenesis_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_injective_2fexchange_2fv1beta1_2fgenesis_2eproto;
namespace injective {
namespace exchange {
namespace v1beta1 {
class AccountVolume;
struct AccountVolumeDefaultTypeInternal;
extern AccountVolumeDefaultTypeInternal _AccountVolume_default_instance_;
class Balance;
struct BalanceDefaultTypeInternal;
extern BalanceDefaultTypeInternal _Balance_default_instance_;
class ConditionalDerivativeOrderBook;
struct ConditionalDerivativeOrderBookDefaultTypeInternal;
extern ConditionalDerivativeOrderBookDefaultTypeInternal _ConditionalDerivativeOrderBook_default_instance_;
class DerivativeOrderBook;
struct DerivativeOrderBookDefaultTypeInternal;
extern DerivativeOrderBookDefaultTypeInternal _DerivativeOrderBook_default_instance_;
class DerivativePosition;
struct DerivativePositionDefaultTypeInternal;
extern DerivativePositionDefaultTypeInternal _DerivativePosition_default_instance_;
class ExpiryFuturesMarketInfoState;
struct ExpiryFuturesMarketInfoStateDefaultTypeInternal;
extern ExpiryFuturesMarketInfoStateDefaultTypeInternal _ExpiryFuturesMarketInfoState_default_instance_;
class FeeDiscountAccountTierTTL;
struct FeeDiscountAccountTierTTLDefaultTypeInternal;
extern FeeDiscountAccountTierTTLDefaultTypeInternal _FeeDiscountAccountTierTTL_default_instance_;
class FeeDiscountBucketVolumeAccounts;
struct FeeDiscountBucketVolumeAccountsDefaultTypeInternal;
extern FeeDiscountBucketVolumeAccountsDefaultTypeInternal _FeeDiscountBucketVolumeAccounts_default_instance_;
class GenesisState;
struct GenesisStateDefaultTypeInternal;
extern GenesisStateDefaultTypeInternal _GenesisState_default_instance_;
class OrderbookSequence;
struct OrderbookSequenceDefaultTypeInternal;
extern OrderbookSequenceDefaultTypeInternal _OrderbookSequence_default_instance_;
class PerpetualMarketFundingState;
struct PerpetualMarketFundingStateDefaultTypeInternal;
extern PerpetualMarketFundingStateDefaultTypeInternal _PerpetualMarketFundingState_default_instance_;
class SpotOrderBook;
struct SpotOrderBookDefaultTypeInternal;
extern SpotOrderBookDefaultTypeInternal _SpotOrderBook_default_instance_;
class SubaccountNonce;
struct SubaccountNonceDefaultTypeInternal;
extern SubaccountNonceDefaultTypeInternal _SubaccountNonce_default_instance_;
class TradingRewardCampaignAccountPendingPoints;
struct TradingRewardCampaignAccountPendingPointsDefaultTypeInternal;
extern TradingRewardCampaignAccountPendingPointsDefaultTypeInternal _TradingRewardCampaignAccountPendingPoints_default_instance_;
class TradingRewardCampaignAccountPoints;
struct TradingRewardCampaignAccountPointsDefaultTypeInternal;
extern TradingRewardCampaignAccountPointsDefaultTypeInternal _TradingRewardCampaignAccountPoints_default_instance_;
}  // namespace v1beta1
}  // namespace exchange
}  // namespace injective
PROTOBUF_NAMESPACE_OPEN
template <>
::injective::exchange::v1beta1::AccountVolume* Arena::CreateMaybeMessage<::injective::exchange::v1beta1::AccountVolume>(Arena*);
template <>
::injective::exchange::v1beta1::Balance* Arena::CreateMaybeMessage<::injective::exchange::v1beta1::Balance>(Arena*);
template <>
::injective::exchange::v1beta1::ConditionalDerivativeOrderBook* Arena::CreateMaybeMessage<::injective::exchange::v1beta1::ConditionalDerivativeOrderBook>(Arena*);
template <>
::injective::exchange::v1beta1::DerivativeOrderBook* Arena::CreateMaybeMessage<::injective::exchange::v1beta1::DerivativeOrderBook>(Arena*);
template <>
::injective::exchange::v1beta1::DerivativePosition* Arena::CreateMaybeMessage<::injective::exchange::v1beta1::DerivativePosition>(Arena*);
template <>
::injective::exchange::v1beta1::ExpiryFuturesMarketInfoState* Arena::CreateMaybeMessage<::injective::exchange::v1beta1::ExpiryFuturesMarketInfoState>(Arena*);
template <>
::injective::exchange::v1beta1::FeeDiscountAccountTierTTL* Arena::CreateMaybeMessage<::injective::exchange::v1beta1::FeeDiscountAccountTierTTL>(Arena*);
template <>
::injective::exchange::v1beta1::FeeDiscountBucketVolumeAccounts* Arena::CreateMaybeMessage<::injective::exchange::v1beta1::FeeDiscountBucketVolumeAccounts>(Arena*);
template <>
::injective::exchange::v1beta1::GenesisState* Arena::CreateMaybeMessage<::injective::exchange::v1beta1::GenesisState>(Arena*);
template <>
::injective::exchange::v1beta1::OrderbookSequence* Arena::CreateMaybeMessage<::injective::exchange::v1beta1::OrderbookSequence>(Arena*);
template <>
::injective::exchange::v1beta1::PerpetualMarketFundingState* Arena::CreateMaybeMessage<::injective::exchange::v1beta1::PerpetualMarketFundingState>(Arena*);
template <>
::injective::exchange::v1beta1::SpotOrderBook* Arena::CreateMaybeMessage<::injective::exchange::v1beta1::SpotOrderBook>(Arena*);
template <>
::injective::exchange::v1beta1::SubaccountNonce* Arena::CreateMaybeMessage<::injective::exchange::v1beta1::SubaccountNonce>(Arena*);
template <>
::injective::exchange::v1beta1::TradingRewardCampaignAccountPendingPoints* Arena::CreateMaybeMessage<::injective::exchange::v1beta1::TradingRewardCampaignAccountPendingPoints>(Arena*);
template <>
::injective::exchange::v1beta1::TradingRewardCampaignAccountPoints* Arena::CreateMaybeMessage<::injective::exchange::v1beta1::TradingRewardCampaignAccountPoints>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace injective {
namespace exchange {
namespace v1beta1 {

// ===================================================================


// -------------------------------------------------------------------

class GenesisState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.exchange.v1beta1.GenesisState) */ {
 public:
  inline GenesisState() : GenesisState(nullptr) {}
  ~GenesisState() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GenesisState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GenesisState(const GenesisState& from);
  GenesisState(GenesisState&& from) noexcept
    : GenesisState() {
    *this = ::std::move(from);
  }

  inline GenesisState& operator=(const GenesisState& from) {
    CopyFrom(from);
    return *this;
  }
  inline GenesisState& operator=(GenesisState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GenesisState& default_instance() {
    return *internal_default_instance();
  }
  static inline const GenesisState* internal_default_instance() {
    return reinterpret_cast<const GenesisState*>(
               &_GenesisState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GenesisState& a, GenesisState& b) {
    a.Swap(&b);
  }
  inline void Swap(GenesisState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GenesisState* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GenesisState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GenesisState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GenesisState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GenesisState& from) {
    GenesisState::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GenesisState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.exchange.v1beta1.GenesisState";
  }
  protected:
  explicit GenesisState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpotMarketsFieldNumber = 2,
    kDerivativeMarketsFieldNumber = 3,
    kSpotOrderbookFieldNumber = 4,
    kDerivativeOrderbookFieldNumber = 5,
    kBalancesFieldNumber = 6,
    kPositionsFieldNumber = 7,
    kSubaccountTradeNoncesFieldNumber = 8,
    kExpiryFuturesMarketInfoStateFieldNumber = 9,
    kPerpetualMarketInfoFieldNumber = 10,
    kPerpetualMarketFundingStateFieldNumber = 11,
    kDerivativeMarketSettlementScheduledFieldNumber = 12,
    kTradingRewardPoolCampaignScheduleFieldNumber = 16,
    kTradingRewardCampaignAccountPointsFieldNumber = 17,
    kFeeDiscountAccountTierTtlFieldNumber = 19,
    kFeeDiscountBucketVolumeAccountsFieldNumber = 20,
    kPendingTradingRewardPoolCampaignScheduleFieldNumber = 22,
    kPendingTradingRewardCampaignAccountPointsFieldNumber = 23,
    kRewardsOptOutAddressesFieldNumber = 24,
    kHistoricalTradeRecordsFieldNumber = 25,
    kBinaryOptionsMarketsFieldNumber = 26,
    kBinaryOptionsMarketIdsScheduledForSettlementFieldNumber = 27,
    kSpotMarketIdsScheduledToForceCloseFieldNumber = 28,
    kDenomDecimalsFieldNumber = 29,
    kConditionalDerivativeOrderbooksFieldNumber = 30,
    kMarketFeeMultipliersFieldNumber = 31,
    kOrderbookSequencesFieldNumber = 32,
    kSubaccountVolumesFieldNumber = 33,
    kMarketVolumesFieldNumber = 34,
    kParamsFieldNumber = 1,
    kTradingRewardCampaignInfoFieldNumber = 15,
    kFeeDiscountScheduleFieldNumber = 18,
    kIsSpotExchangeEnabledFieldNumber = 13,
    kIsDerivativesExchangeEnabledFieldNumber = 14,
    kIsFirstFeeCycleFinishedFieldNumber = 21,
  };
  // repeated .injective.exchange.v1beta1.SpotMarket spot_markets = 2 [json_name = "spotMarkets"];
  int spot_markets_size() const;
  private:
  int _internal_spot_markets_size() const;

  public:
  void clear_spot_markets() ;
  ::injective::exchange::v1beta1::SpotMarket* mutable_spot_markets(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::SpotMarket >*
      mutable_spot_markets();
  private:
  const ::injective::exchange::v1beta1::SpotMarket& _internal_spot_markets(int index) const;
  ::injective::exchange::v1beta1::SpotMarket* _internal_add_spot_markets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::exchange::v1beta1::SpotMarket>& _internal_spot_markets() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::exchange::v1beta1::SpotMarket>* _internal_mutable_spot_markets();
  public:
  const ::injective::exchange::v1beta1::SpotMarket& spot_markets(int index) const;
  ::injective::exchange::v1beta1::SpotMarket* add_spot_markets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::SpotMarket >&
      spot_markets() const;
  // repeated .injective.exchange.v1beta1.DerivativeMarket derivative_markets = 3 [json_name = "derivativeMarkets"];
  int derivative_markets_size() const;
  private:
  int _internal_derivative_markets_size() const;

  public:
  void clear_derivative_markets() ;
  ::injective::exchange::v1beta1::DerivativeMarket* mutable_derivative_markets(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::DerivativeMarket >*
      mutable_derivative_markets();
  private:
  const ::injective::exchange::v1beta1::DerivativeMarket& _internal_derivative_markets(int index) const;
  ::injective::exchange::v1beta1::DerivativeMarket* _internal_add_derivative_markets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::exchange::v1beta1::DerivativeMarket>& _internal_derivative_markets() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::exchange::v1beta1::DerivativeMarket>* _internal_mutable_derivative_markets();
  public:
  const ::injective::exchange::v1beta1::DerivativeMarket& derivative_markets(int index) const;
  ::injective::exchange::v1beta1::DerivativeMarket* add_derivative_markets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::DerivativeMarket >&
      derivative_markets() const;
  // repeated .injective.exchange.v1beta1.SpotOrderBook spot_orderbook = 4 [json_name = "spotOrderbook", (.gogoproto.nullable) = false];
  int spot_orderbook_size() const;
  private:
  int _internal_spot_orderbook_size() const;

  public:
  void clear_spot_orderbook() ;
  ::injective::exchange::v1beta1::SpotOrderBook* mutable_spot_orderbook(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::SpotOrderBook >*
      mutable_spot_orderbook();
  private:
  const ::injective::exchange::v1beta1::SpotOrderBook& _internal_spot_orderbook(int index) const;
  ::injective::exchange::v1beta1::SpotOrderBook* _internal_add_spot_orderbook();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::exchange::v1beta1::SpotOrderBook>& _internal_spot_orderbook() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::exchange::v1beta1::SpotOrderBook>* _internal_mutable_spot_orderbook();
  public:
  const ::injective::exchange::v1beta1::SpotOrderBook& spot_orderbook(int index) const;
  ::injective::exchange::v1beta1::SpotOrderBook* add_spot_orderbook();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::SpotOrderBook >&
      spot_orderbook() const;
  // repeated .injective.exchange.v1beta1.DerivativeOrderBook derivative_orderbook = 5 [json_name = "derivativeOrderbook", (.gogoproto.nullable) = false];
  int derivative_orderbook_size() const;
  private:
  int _internal_derivative_orderbook_size() const;

  public:
  void clear_derivative_orderbook() ;
  ::injective::exchange::v1beta1::DerivativeOrderBook* mutable_derivative_orderbook(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::DerivativeOrderBook >*
      mutable_derivative_orderbook();
  private:
  const ::injective::exchange::v1beta1::DerivativeOrderBook& _internal_derivative_orderbook(int index) const;
  ::injective::exchange::v1beta1::DerivativeOrderBook* _internal_add_derivative_orderbook();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::exchange::v1beta1::DerivativeOrderBook>& _internal_derivative_orderbook() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::exchange::v1beta1::DerivativeOrderBook>* _internal_mutable_derivative_orderbook();
  public:
  const ::injective::exchange::v1beta1::DerivativeOrderBook& derivative_orderbook(int index) const;
  ::injective::exchange::v1beta1::DerivativeOrderBook* add_derivative_orderbook();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::DerivativeOrderBook >&
      derivative_orderbook() const;
  // repeated .injective.exchange.v1beta1.Balance balances = 6 [json_name = "balances", (.gogoproto.nullable) = false];
  int balances_size() const;
  private:
  int _internal_balances_size() const;

  public:
  void clear_balances() ;
  ::injective::exchange::v1beta1::Balance* mutable_balances(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::Balance >*
      mutable_balances();
  private:
  const ::injective::exchange::v1beta1::Balance& _internal_balances(int index) const;
  ::injective::exchange::v1beta1::Balance* _internal_add_balances();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::exchange::v1beta1::Balance>& _internal_balances() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::exchange::v1beta1::Balance>* _internal_mutable_balances();
  public:
  const ::injective::exchange::v1beta1::Balance& balances(int index) const;
  ::injective::exchange::v1beta1::Balance* add_balances();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::Balance >&
      balances() const;
  // repeated .injective.exchange.v1beta1.DerivativePosition positions = 7 [json_name = "positions", (.gogoproto.nullable) = false];
  int positions_size() const;
  private:
  int _internal_positions_size() const;

  public:
  void clear_positions() ;
  ::injective::exchange::v1beta1::DerivativePosition* mutable_positions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::DerivativePosition >*
      mutable_positions();
  private:
  const ::injective::exchange::v1beta1::DerivativePosition& _internal_positions(int index) const;
  ::injective::exchange::v1beta1::DerivativePosition* _internal_add_positions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::exchange::v1beta1::DerivativePosition>& _internal_positions() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::exchange::v1beta1::DerivativePosition>* _internal_mutable_positions();
  public:
  const ::injective::exchange::v1beta1::DerivativePosition& positions(int index) const;
  ::injective::exchange::v1beta1::DerivativePosition* add_positions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::DerivativePosition >&
      positions() const;
  // repeated .injective.exchange.v1beta1.SubaccountNonce subaccount_trade_nonces = 8 [json_name = "subaccountTradeNonces", (.gogoproto.nullable) = false];
  int subaccount_trade_nonces_size() const;
  private:
  int _internal_subaccount_trade_nonces_size() const;

  public:
  void clear_subaccount_trade_nonces() ;
  ::injective::exchange::v1beta1::SubaccountNonce* mutable_subaccount_trade_nonces(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::SubaccountNonce >*
      mutable_subaccount_trade_nonces();
  private:
  const ::injective::exchange::v1beta1::SubaccountNonce& _internal_subaccount_trade_nonces(int index) const;
  ::injective::exchange::v1beta1::SubaccountNonce* _internal_add_subaccount_trade_nonces();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::exchange::v1beta1::SubaccountNonce>& _internal_subaccount_trade_nonces() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::exchange::v1beta1::SubaccountNonce>* _internal_mutable_subaccount_trade_nonces();
  public:
  const ::injective::exchange::v1beta1::SubaccountNonce& subaccount_trade_nonces(int index) const;
  ::injective::exchange::v1beta1::SubaccountNonce* add_subaccount_trade_nonces();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::SubaccountNonce >&
      subaccount_trade_nonces() const;
  // repeated .injective.exchange.v1beta1.ExpiryFuturesMarketInfoState expiry_futures_market_info_state = 9 [json_name = "expiryFuturesMarketInfoState", (.gogoproto.nullable) = false];
  int expiry_futures_market_info_state_size() const;
  private:
  int _internal_expiry_futures_market_info_state_size() const;

  public:
  void clear_expiry_futures_market_info_state() ;
  ::injective::exchange::v1beta1::ExpiryFuturesMarketInfoState* mutable_expiry_futures_market_info_state(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::ExpiryFuturesMarketInfoState >*
      mutable_expiry_futures_market_info_state();
  private:
  const ::injective::exchange::v1beta1::ExpiryFuturesMarketInfoState& _internal_expiry_futures_market_info_state(int index) const;
  ::injective::exchange::v1beta1::ExpiryFuturesMarketInfoState* _internal_add_expiry_futures_market_info_state();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::exchange::v1beta1::ExpiryFuturesMarketInfoState>& _internal_expiry_futures_market_info_state() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::exchange::v1beta1::ExpiryFuturesMarketInfoState>* _internal_mutable_expiry_futures_market_info_state();
  public:
  const ::injective::exchange::v1beta1::ExpiryFuturesMarketInfoState& expiry_futures_market_info_state(int index) const;
  ::injective::exchange::v1beta1::ExpiryFuturesMarketInfoState* add_expiry_futures_market_info_state();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::ExpiryFuturesMarketInfoState >&
      expiry_futures_market_info_state() const;
  // repeated .injective.exchange.v1beta1.PerpetualMarketInfo perpetual_market_info = 10 [json_name = "perpetualMarketInfo", (.gogoproto.nullable) = false];
  int perpetual_market_info_size() const;
  private:
  int _internal_perpetual_market_info_size() const;

  public:
  void clear_perpetual_market_info() ;
  ::injective::exchange::v1beta1::PerpetualMarketInfo* mutable_perpetual_market_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::PerpetualMarketInfo >*
      mutable_perpetual_market_info();
  private:
  const ::injective::exchange::v1beta1::PerpetualMarketInfo& _internal_perpetual_market_info(int index) const;
  ::injective::exchange::v1beta1::PerpetualMarketInfo* _internal_add_perpetual_market_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::exchange::v1beta1::PerpetualMarketInfo>& _internal_perpetual_market_info() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::exchange::v1beta1::PerpetualMarketInfo>* _internal_mutable_perpetual_market_info();
  public:
  const ::injective::exchange::v1beta1::PerpetualMarketInfo& perpetual_market_info(int index) const;
  ::injective::exchange::v1beta1::PerpetualMarketInfo* add_perpetual_market_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::PerpetualMarketInfo >&
      perpetual_market_info() const;
  // repeated .injective.exchange.v1beta1.PerpetualMarketFundingState perpetual_market_funding_state = 11 [json_name = "perpetualMarketFundingState", (.gogoproto.nullable) = false];
  int perpetual_market_funding_state_size() const;
  private:
  int _internal_perpetual_market_funding_state_size() const;

  public:
  void clear_perpetual_market_funding_state() ;
  ::injective::exchange::v1beta1::PerpetualMarketFundingState* mutable_perpetual_market_funding_state(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::PerpetualMarketFundingState >*
      mutable_perpetual_market_funding_state();
  private:
  const ::injective::exchange::v1beta1::PerpetualMarketFundingState& _internal_perpetual_market_funding_state(int index) const;
  ::injective::exchange::v1beta1::PerpetualMarketFundingState* _internal_add_perpetual_market_funding_state();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::exchange::v1beta1::PerpetualMarketFundingState>& _internal_perpetual_market_funding_state() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::exchange::v1beta1::PerpetualMarketFundingState>* _internal_mutable_perpetual_market_funding_state();
  public:
  const ::injective::exchange::v1beta1::PerpetualMarketFundingState& perpetual_market_funding_state(int index) const;
  ::injective::exchange::v1beta1::PerpetualMarketFundingState* add_perpetual_market_funding_state();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::PerpetualMarketFundingState >&
      perpetual_market_funding_state() const;
  // repeated .injective.exchange.v1beta1.DerivativeMarketSettlementInfo derivative_market_settlement_scheduled = 12 [json_name = "derivativeMarketSettlementScheduled", (.gogoproto.nullable) = false];
  int derivative_market_settlement_scheduled_size() const;
  private:
  int _internal_derivative_market_settlement_scheduled_size() const;

  public:
  void clear_derivative_market_settlement_scheduled() ;
  ::injective::exchange::v1beta1::DerivativeMarketSettlementInfo* mutable_derivative_market_settlement_scheduled(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::DerivativeMarketSettlementInfo >*
      mutable_derivative_market_settlement_scheduled();
  private:
  const ::injective::exchange::v1beta1::DerivativeMarketSettlementInfo& _internal_derivative_market_settlement_scheduled(int index) const;
  ::injective::exchange::v1beta1::DerivativeMarketSettlementInfo* _internal_add_derivative_market_settlement_scheduled();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::exchange::v1beta1::DerivativeMarketSettlementInfo>& _internal_derivative_market_settlement_scheduled() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::exchange::v1beta1::DerivativeMarketSettlementInfo>* _internal_mutable_derivative_market_settlement_scheduled();
  public:
  const ::injective::exchange::v1beta1::DerivativeMarketSettlementInfo& derivative_market_settlement_scheduled(int index) const;
  ::injective::exchange::v1beta1::DerivativeMarketSettlementInfo* add_derivative_market_settlement_scheduled();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::DerivativeMarketSettlementInfo >&
      derivative_market_settlement_scheduled() const;
  // repeated .injective.exchange.v1beta1.CampaignRewardPool trading_reward_pool_campaign_schedule = 16 [json_name = "tradingRewardPoolCampaignSchedule"];
  int trading_reward_pool_campaign_schedule_size() const;
  private:
  int _internal_trading_reward_pool_campaign_schedule_size() const;

  public:
  void clear_trading_reward_pool_campaign_schedule() ;
  ::injective::exchange::v1beta1::CampaignRewardPool* mutable_trading_reward_pool_campaign_schedule(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::CampaignRewardPool >*
      mutable_trading_reward_pool_campaign_schedule();
  private:
  const ::injective::exchange::v1beta1::CampaignRewardPool& _internal_trading_reward_pool_campaign_schedule(int index) const;
  ::injective::exchange::v1beta1::CampaignRewardPool* _internal_add_trading_reward_pool_campaign_schedule();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::exchange::v1beta1::CampaignRewardPool>& _internal_trading_reward_pool_campaign_schedule() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::exchange::v1beta1::CampaignRewardPool>* _internal_mutable_trading_reward_pool_campaign_schedule();
  public:
  const ::injective::exchange::v1beta1::CampaignRewardPool& trading_reward_pool_campaign_schedule(int index) const;
  ::injective::exchange::v1beta1::CampaignRewardPool* add_trading_reward_pool_campaign_schedule();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::CampaignRewardPool >&
      trading_reward_pool_campaign_schedule() const;
  // repeated .injective.exchange.v1beta1.TradingRewardCampaignAccountPoints trading_reward_campaign_account_points = 17 [json_name = "tradingRewardCampaignAccountPoints"];
  int trading_reward_campaign_account_points_size() const;
  private:
  int _internal_trading_reward_campaign_account_points_size() const;

  public:
  void clear_trading_reward_campaign_account_points() ;
  ::injective::exchange::v1beta1::TradingRewardCampaignAccountPoints* mutable_trading_reward_campaign_account_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::TradingRewardCampaignAccountPoints >*
      mutable_trading_reward_campaign_account_points();
  private:
  const ::injective::exchange::v1beta1::TradingRewardCampaignAccountPoints& _internal_trading_reward_campaign_account_points(int index) const;
  ::injective::exchange::v1beta1::TradingRewardCampaignAccountPoints* _internal_add_trading_reward_campaign_account_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::exchange::v1beta1::TradingRewardCampaignAccountPoints>& _internal_trading_reward_campaign_account_points() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::exchange::v1beta1::TradingRewardCampaignAccountPoints>* _internal_mutable_trading_reward_campaign_account_points();
  public:
  const ::injective::exchange::v1beta1::TradingRewardCampaignAccountPoints& trading_reward_campaign_account_points(int index) const;
  ::injective::exchange::v1beta1::TradingRewardCampaignAccountPoints* add_trading_reward_campaign_account_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::TradingRewardCampaignAccountPoints >&
      trading_reward_campaign_account_points() const;
  // repeated .injective.exchange.v1beta1.FeeDiscountAccountTierTTL fee_discount_account_tier_ttl = 19 [json_name = "feeDiscountAccountTierTtl"];
  int fee_discount_account_tier_ttl_size() const;
  private:
  int _internal_fee_discount_account_tier_ttl_size() const;

  public:
  void clear_fee_discount_account_tier_ttl() ;
  ::injective::exchange::v1beta1::FeeDiscountAccountTierTTL* mutable_fee_discount_account_tier_ttl(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::FeeDiscountAccountTierTTL >*
      mutable_fee_discount_account_tier_ttl();
  private:
  const ::injective::exchange::v1beta1::FeeDiscountAccountTierTTL& _internal_fee_discount_account_tier_ttl(int index) const;
  ::injective::exchange::v1beta1::FeeDiscountAccountTierTTL* _internal_add_fee_discount_account_tier_ttl();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::exchange::v1beta1::FeeDiscountAccountTierTTL>& _internal_fee_discount_account_tier_ttl() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::exchange::v1beta1::FeeDiscountAccountTierTTL>* _internal_mutable_fee_discount_account_tier_ttl();
  public:
  const ::injective::exchange::v1beta1::FeeDiscountAccountTierTTL& fee_discount_account_tier_ttl(int index) const;
  ::injective::exchange::v1beta1::FeeDiscountAccountTierTTL* add_fee_discount_account_tier_ttl();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::FeeDiscountAccountTierTTL >&
      fee_discount_account_tier_ttl() const;
  // repeated .injective.exchange.v1beta1.FeeDiscountBucketVolumeAccounts fee_discount_bucket_volume_accounts = 20 [json_name = "feeDiscountBucketVolumeAccounts"];
  int fee_discount_bucket_volume_accounts_size() const;
  private:
  int _internal_fee_discount_bucket_volume_accounts_size() const;

  public:
  void clear_fee_discount_bucket_volume_accounts() ;
  ::injective::exchange::v1beta1::FeeDiscountBucketVolumeAccounts* mutable_fee_discount_bucket_volume_accounts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::FeeDiscountBucketVolumeAccounts >*
      mutable_fee_discount_bucket_volume_accounts();
  private:
  const ::injective::exchange::v1beta1::FeeDiscountBucketVolumeAccounts& _internal_fee_discount_bucket_volume_accounts(int index) const;
  ::injective::exchange::v1beta1::FeeDiscountBucketVolumeAccounts* _internal_add_fee_discount_bucket_volume_accounts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::exchange::v1beta1::FeeDiscountBucketVolumeAccounts>& _internal_fee_discount_bucket_volume_accounts() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::exchange::v1beta1::FeeDiscountBucketVolumeAccounts>* _internal_mutable_fee_discount_bucket_volume_accounts();
  public:
  const ::injective::exchange::v1beta1::FeeDiscountBucketVolumeAccounts& fee_discount_bucket_volume_accounts(int index) const;
  ::injective::exchange::v1beta1::FeeDiscountBucketVolumeAccounts* add_fee_discount_bucket_volume_accounts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::FeeDiscountBucketVolumeAccounts >&
      fee_discount_bucket_volume_accounts() const;
  // repeated .injective.exchange.v1beta1.CampaignRewardPool pending_trading_reward_pool_campaign_schedule = 22 [json_name = "pendingTradingRewardPoolCampaignSchedule"];
  int pending_trading_reward_pool_campaign_schedule_size() const;
  private:
  int _internal_pending_trading_reward_pool_campaign_schedule_size() const;

  public:
  void clear_pending_trading_reward_pool_campaign_schedule() ;
  ::injective::exchange::v1beta1::CampaignRewardPool* mutable_pending_trading_reward_pool_campaign_schedule(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::CampaignRewardPool >*
      mutable_pending_trading_reward_pool_campaign_schedule();
  private:
  const ::injective::exchange::v1beta1::CampaignRewardPool& _internal_pending_trading_reward_pool_campaign_schedule(int index) const;
  ::injective::exchange::v1beta1::CampaignRewardPool* _internal_add_pending_trading_reward_pool_campaign_schedule();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::exchange::v1beta1::CampaignRewardPool>& _internal_pending_trading_reward_pool_campaign_schedule() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::exchange::v1beta1::CampaignRewardPool>* _internal_mutable_pending_trading_reward_pool_campaign_schedule();
  public:
  const ::injective::exchange::v1beta1::CampaignRewardPool& pending_trading_reward_pool_campaign_schedule(int index) const;
  ::injective::exchange::v1beta1::CampaignRewardPool* add_pending_trading_reward_pool_campaign_schedule();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::CampaignRewardPool >&
      pending_trading_reward_pool_campaign_schedule() const;
  // repeated .injective.exchange.v1beta1.TradingRewardCampaignAccountPendingPoints pending_trading_reward_campaign_account_points = 23 [json_name = "pendingTradingRewardCampaignAccountPoints"];
  int pending_trading_reward_campaign_account_points_size() const;
  private:
  int _internal_pending_trading_reward_campaign_account_points_size() const;

  public:
  void clear_pending_trading_reward_campaign_account_points() ;
  ::injective::exchange::v1beta1::TradingRewardCampaignAccountPendingPoints* mutable_pending_trading_reward_campaign_account_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::TradingRewardCampaignAccountPendingPoints >*
      mutable_pending_trading_reward_campaign_account_points();
  private:
  const ::injective::exchange::v1beta1::TradingRewardCampaignAccountPendingPoints& _internal_pending_trading_reward_campaign_account_points(int index) const;
  ::injective::exchange::v1beta1::TradingRewardCampaignAccountPendingPoints* _internal_add_pending_trading_reward_campaign_account_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::exchange::v1beta1::TradingRewardCampaignAccountPendingPoints>& _internal_pending_trading_reward_campaign_account_points() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::exchange::v1beta1::TradingRewardCampaignAccountPendingPoints>* _internal_mutable_pending_trading_reward_campaign_account_points();
  public:
  const ::injective::exchange::v1beta1::TradingRewardCampaignAccountPendingPoints& pending_trading_reward_campaign_account_points(int index) const;
  ::injective::exchange::v1beta1::TradingRewardCampaignAccountPendingPoints* add_pending_trading_reward_campaign_account_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::TradingRewardCampaignAccountPendingPoints >&
      pending_trading_reward_campaign_account_points() const;
  // repeated string rewards_opt_out_addresses = 24 [json_name = "rewardsOptOutAddresses"];
  int rewards_opt_out_addresses_size() const;
  private:
  int _internal_rewards_opt_out_addresses_size() const;

  public:
  void clear_rewards_opt_out_addresses() ;
  const std::string& rewards_opt_out_addresses(int index) const;
  std::string* mutable_rewards_opt_out_addresses(int index);
  void set_rewards_opt_out_addresses(int index, const std::string& value);
  void set_rewards_opt_out_addresses(int index, std::string&& value);
  void set_rewards_opt_out_addresses(int index, const char* value);
  void set_rewards_opt_out_addresses(int index, const char* value, std::size_t size);
  void set_rewards_opt_out_addresses(int index, absl::string_view value);
  std::string* add_rewards_opt_out_addresses();
  void add_rewards_opt_out_addresses(const std::string& value);
  void add_rewards_opt_out_addresses(std::string&& value);
  void add_rewards_opt_out_addresses(const char* value);
  void add_rewards_opt_out_addresses(const char* value, std::size_t size);
  void add_rewards_opt_out_addresses(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& rewards_opt_out_addresses() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_rewards_opt_out_addresses();

  private:
  const std::string& _internal_rewards_opt_out_addresses(int index) const;
  std::string* _internal_add_rewards_opt_out_addresses();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_rewards_opt_out_addresses() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_rewards_opt_out_addresses();

  public:
  // repeated .injective.exchange.v1beta1.TradeRecords historical_trade_records = 25 [json_name = "historicalTradeRecords"];
  int historical_trade_records_size() const;
  private:
  int _internal_historical_trade_records_size() const;

  public:
  void clear_historical_trade_records() ;
  ::injective::exchange::v1beta1::TradeRecords* mutable_historical_trade_records(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::TradeRecords >*
      mutable_historical_trade_records();
  private:
  const ::injective::exchange::v1beta1::TradeRecords& _internal_historical_trade_records(int index) const;
  ::injective::exchange::v1beta1::TradeRecords* _internal_add_historical_trade_records();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::exchange::v1beta1::TradeRecords>& _internal_historical_trade_records() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::exchange::v1beta1::TradeRecords>* _internal_mutable_historical_trade_records();
  public:
  const ::injective::exchange::v1beta1::TradeRecords& historical_trade_records(int index) const;
  ::injective::exchange::v1beta1::TradeRecords* add_historical_trade_records();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::TradeRecords >&
      historical_trade_records() const;
  // repeated .injective.exchange.v1beta1.BinaryOptionsMarket binary_options_markets = 26 [json_name = "binaryOptionsMarkets"];
  int binary_options_markets_size() const;
  private:
  int _internal_binary_options_markets_size() const;

  public:
  void clear_binary_options_markets() ;
  ::injective::exchange::v1beta1::BinaryOptionsMarket* mutable_binary_options_markets(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::BinaryOptionsMarket >*
      mutable_binary_options_markets();
  private:
  const ::injective::exchange::v1beta1::BinaryOptionsMarket& _internal_binary_options_markets(int index) const;
  ::injective::exchange::v1beta1::BinaryOptionsMarket* _internal_add_binary_options_markets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::exchange::v1beta1::BinaryOptionsMarket>& _internal_binary_options_markets() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::exchange::v1beta1::BinaryOptionsMarket>* _internal_mutable_binary_options_markets();
  public:
  const ::injective::exchange::v1beta1::BinaryOptionsMarket& binary_options_markets(int index) const;
  ::injective::exchange::v1beta1::BinaryOptionsMarket* add_binary_options_markets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::BinaryOptionsMarket >&
      binary_options_markets() const;
  // repeated string binary_options_market_ids_scheduled_for_settlement = 27 [json_name = "binaryOptionsMarketIdsScheduledForSettlement"];
  int binary_options_market_ids_scheduled_for_settlement_size() const;
  private:
  int _internal_binary_options_market_ids_scheduled_for_settlement_size() const;

  public:
  void clear_binary_options_market_ids_scheduled_for_settlement() ;
  const std::string& binary_options_market_ids_scheduled_for_settlement(int index) const;
  std::string* mutable_binary_options_market_ids_scheduled_for_settlement(int index);
  void set_binary_options_market_ids_scheduled_for_settlement(int index, const std::string& value);
  void set_binary_options_market_ids_scheduled_for_settlement(int index, std::string&& value);
  void set_binary_options_market_ids_scheduled_for_settlement(int index, const char* value);
  void set_binary_options_market_ids_scheduled_for_settlement(int index, const char* value, std::size_t size);
  void set_binary_options_market_ids_scheduled_for_settlement(int index, absl::string_view value);
  std::string* add_binary_options_market_ids_scheduled_for_settlement();
  void add_binary_options_market_ids_scheduled_for_settlement(const std::string& value);
  void add_binary_options_market_ids_scheduled_for_settlement(std::string&& value);
  void add_binary_options_market_ids_scheduled_for_settlement(const char* value);
  void add_binary_options_market_ids_scheduled_for_settlement(const char* value, std::size_t size);
  void add_binary_options_market_ids_scheduled_for_settlement(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& binary_options_market_ids_scheduled_for_settlement() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_binary_options_market_ids_scheduled_for_settlement();

  private:
  const std::string& _internal_binary_options_market_ids_scheduled_for_settlement(int index) const;
  std::string* _internal_add_binary_options_market_ids_scheduled_for_settlement();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_binary_options_market_ids_scheduled_for_settlement() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_binary_options_market_ids_scheduled_for_settlement();

  public:
  // repeated string spot_market_ids_scheduled_to_force_close = 28 [json_name = "spotMarketIdsScheduledToForceClose"];
  int spot_market_ids_scheduled_to_force_close_size() const;
  private:
  int _internal_spot_market_ids_scheduled_to_force_close_size() const;

  public:
  void clear_spot_market_ids_scheduled_to_force_close() ;
  const std::string& spot_market_ids_scheduled_to_force_close(int index) const;
  std::string* mutable_spot_market_ids_scheduled_to_force_close(int index);
  void set_spot_market_ids_scheduled_to_force_close(int index, const std::string& value);
  void set_spot_market_ids_scheduled_to_force_close(int index, std::string&& value);
  void set_spot_market_ids_scheduled_to_force_close(int index, const char* value);
  void set_spot_market_ids_scheduled_to_force_close(int index, const char* value, std::size_t size);
  void set_spot_market_ids_scheduled_to_force_close(int index, absl::string_view value);
  std::string* add_spot_market_ids_scheduled_to_force_close();
  void add_spot_market_ids_scheduled_to_force_close(const std::string& value);
  void add_spot_market_ids_scheduled_to_force_close(std::string&& value);
  void add_spot_market_ids_scheduled_to_force_close(const char* value);
  void add_spot_market_ids_scheduled_to_force_close(const char* value, std::size_t size);
  void add_spot_market_ids_scheduled_to_force_close(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& spot_market_ids_scheduled_to_force_close() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_spot_market_ids_scheduled_to_force_close();

  private:
  const std::string& _internal_spot_market_ids_scheduled_to_force_close(int index) const;
  std::string* _internal_add_spot_market_ids_scheduled_to_force_close();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_spot_market_ids_scheduled_to_force_close() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_spot_market_ids_scheduled_to_force_close();

  public:
  // repeated .injective.exchange.v1beta1.DenomDecimals denom_decimals = 29 [json_name = "denomDecimals", (.gogoproto.nullable) = false];
  int denom_decimals_size() const;
  private:
  int _internal_denom_decimals_size() const;

  public:
  void clear_denom_decimals() ;
  ::injective::exchange::v1beta1::DenomDecimals* mutable_denom_decimals(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::DenomDecimals >*
      mutable_denom_decimals();
  private:
  const ::injective::exchange::v1beta1::DenomDecimals& _internal_denom_decimals(int index) const;
  ::injective::exchange::v1beta1::DenomDecimals* _internal_add_denom_decimals();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::exchange::v1beta1::DenomDecimals>& _internal_denom_decimals() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::exchange::v1beta1::DenomDecimals>* _internal_mutable_denom_decimals();
  public:
  const ::injective::exchange::v1beta1::DenomDecimals& denom_decimals(int index) const;
  ::injective::exchange::v1beta1::DenomDecimals* add_denom_decimals();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::DenomDecimals >&
      denom_decimals() const;
  // repeated .injective.exchange.v1beta1.ConditionalDerivativeOrderBook conditional_derivative_orderbooks = 30 [json_name = "conditionalDerivativeOrderbooks"];
  int conditional_derivative_orderbooks_size() const;
  private:
  int _internal_conditional_derivative_orderbooks_size() const;

  public:
  void clear_conditional_derivative_orderbooks() ;
  ::injective::exchange::v1beta1::ConditionalDerivativeOrderBook* mutable_conditional_derivative_orderbooks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::ConditionalDerivativeOrderBook >*
      mutable_conditional_derivative_orderbooks();
  private:
  const ::injective::exchange::v1beta1::ConditionalDerivativeOrderBook& _internal_conditional_derivative_orderbooks(int index) const;
  ::injective::exchange::v1beta1::ConditionalDerivativeOrderBook* _internal_add_conditional_derivative_orderbooks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::exchange::v1beta1::ConditionalDerivativeOrderBook>& _internal_conditional_derivative_orderbooks() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::exchange::v1beta1::ConditionalDerivativeOrderBook>* _internal_mutable_conditional_derivative_orderbooks();
  public:
  const ::injective::exchange::v1beta1::ConditionalDerivativeOrderBook& conditional_derivative_orderbooks(int index) const;
  ::injective::exchange::v1beta1::ConditionalDerivativeOrderBook* add_conditional_derivative_orderbooks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::ConditionalDerivativeOrderBook >&
      conditional_derivative_orderbooks() const;
  // repeated .injective.exchange.v1beta1.MarketFeeMultiplier market_fee_multipliers = 31 [json_name = "marketFeeMultipliers"];
  int market_fee_multipliers_size() const;
  private:
  int _internal_market_fee_multipliers_size() const;

  public:
  void clear_market_fee_multipliers() ;
  ::injective::exchange::v1beta1::MarketFeeMultiplier* mutable_market_fee_multipliers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::MarketFeeMultiplier >*
      mutable_market_fee_multipliers();
  private:
  const ::injective::exchange::v1beta1::MarketFeeMultiplier& _internal_market_fee_multipliers(int index) const;
  ::injective::exchange::v1beta1::MarketFeeMultiplier* _internal_add_market_fee_multipliers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::exchange::v1beta1::MarketFeeMultiplier>& _internal_market_fee_multipliers() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::exchange::v1beta1::MarketFeeMultiplier>* _internal_mutable_market_fee_multipliers();
  public:
  const ::injective::exchange::v1beta1::MarketFeeMultiplier& market_fee_multipliers(int index) const;
  ::injective::exchange::v1beta1::MarketFeeMultiplier* add_market_fee_multipliers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::MarketFeeMultiplier >&
      market_fee_multipliers() const;
  // repeated .injective.exchange.v1beta1.OrderbookSequence orderbook_sequences = 32 [json_name = "orderbookSequences"];
  int orderbook_sequences_size() const;
  private:
  int _internal_orderbook_sequences_size() const;

  public:
  void clear_orderbook_sequences() ;
  ::injective::exchange::v1beta1::OrderbookSequence* mutable_orderbook_sequences(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::OrderbookSequence >*
      mutable_orderbook_sequences();
  private:
  const ::injective::exchange::v1beta1::OrderbookSequence& _internal_orderbook_sequences(int index) const;
  ::injective::exchange::v1beta1::OrderbookSequence* _internal_add_orderbook_sequences();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::exchange::v1beta1::OrderbookSequence>& _internal_orderbook_sequences() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::exchange::v1beta1::OrderbookSequence>* _internal_mutable_orderbook_sequences();
  public:
  const ::injective::exchange::v1beta1::OrderbookSequence& orderbook_sequences(int index) const;
  ::injective::exchange::v1beta1::OrderbookSequence* add_orderbook_sequences();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::OrderbookSequence >&
      orderbook_sequences() const;
  // repeated .injective.exchange.v1beta1.AggregateSubaccountVolumeRecord subaccount_volumes = 33 [json_name = "subaccountVolumes"];
  int subaccount_volumes_size() const;
  private:
  int _internal_subaccount_volumes_size() const;

  public:
  void clear_subaccount_volumes() ;
  ::injective::exchange::v1beta1::AggregateSubaccountVolumeRecord* mutable_subaccount_volumes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::AggregateSubaccountVolumeRecord >*
      mutable_subaccount_volumes();
  private:
  const ::injective::exchange::v1beta1::AggregateSubaccountVolumeRecord& _internal_subaccount_volumes(int index) const;
  ::injective::exchange::v1beta1::AggregateSubaccountVolumeRecord* _internal_add_subaccount_volumes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::exchange::v1beta1::AggregateSubaccountVolumeRecord>& _internal_subaccount_volumes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::exchange::v1beta1::AggregateSubaccountVolumeRecord>* _internal_mutable_subaccount_volumes();
  public:
  const ::injective::exchange::v1beta1::AggregateSubaccountVolumeRecord& subaccount_volumes(int index) const;
  ::injective::exchange::v1beta1::AggregateSubaccountVolumeRecord* add_subaccount_volumes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::AggregateSubaccountVolumeRecord >&
      subaccount_volumes() const;
  // repeated .injective.exchange.v1beta1.MarketVolume market_volumes = 34 [json_name = "marketVolumes"];
  int market_volumes_size() const;
  private:
  int _internal_market_volumes_size() const;

  public:
  void clear_market_volumes() ;
  ::injective::exchange::v1beta1::MarketVolume* mutable_market_volumes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::MarketVolume >*
      mutable_market_volumes();
  private:
  const ::injective::exchange::v1beta1::MarketVolume& _internal_market_volumes(int index) const;
  ::injective::exchange::v1beta1::MarketVolume* _internal_add_market_volumes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::exchange::v1beta1::MarketVolume>& _internal_market_volumes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::exchange::v1beta1::MarketVolume>* _internal_mutable_market_volumes();
  public:
  const ::injective::exchange::v1beta1::MarketVolume& market_volumes(int index) const;
  ::injective::exchange::v1beta1::MarketVolume* add_market_volumes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::MarketVolume >&
      market_volumes() const;
  // .injective.exchange.v1beta1.Params params = 1 [json_name = "params", (.gogoproto.nullable) = false];
  bool has_params() const;
  void clear_params() ;
  const ::injective::exchange::v1beta1::Params& params() const;
  PROTOBUF_NODISCARD ::injective::exchange::v1beta1::Params* release_params();
  ::injective::exchange::v1beta1::Params* mutable_params();
  void set_allocated_params(::injective::exchange::v1beta1::Params* params);
  private:
  const ::injective::exchange::v1beta1::Params& _internal_params() const;
  ::injective::exchange::v1beta1::Params* _internal_mutable_params();
  public:
  void unsafe_arena_set_allocated_params(
      ::injective::exchange::v1beta1::Params* params);
  ::injective::exchange::v1beta1::Params* unsafe_arena_release_params();
  // .injective.exchange.v1beta1.TradingRewardCampaignInfo trading_reward_campaign_info = 15 [json_name = "tradingRewardCampaignInfo"];
  bool has_trading_reward_campaign_info() const;
  void clear_trading_reward_campaign_info() ;
  const ::injective::exchange::v1beta1::TradingRewardCampaignInfo& trading_reward_campaign_info() const;
  PROTOBUF_NODISCARD ::injective::exchange::v1beta1::TradingRewardCampaignInfo* release_trading_reward_campaign_info();
  ::injective::exchange::v1beta1::TradingRewardCampaignInfo* mutable_trading_reward_campaign_info();
  void set_allocated_trading_reward_campaign_info(::injective::exchange::v1beta1::TradingRewardCampaignInfo* trading_reward_campaign_info);
  private:
  const ::injective::exchange::v1beta1::TradingRewardCampaignInfo& _internal_trading_reward_campaign_info() const;
  ::injective::exchange::v1beta1::TradingRewardCampaignInfo* _internal_mutable_trading_reward_campaign_info();
  public:
  void unsafe_arena_set_allocated_trading_reward_campaign_info(
      ::injective::exchange::v1beta1::TradingRewardCampaignInfo* trading_reward_campaign_info);
  ::injective::exchange::v1beta1::TradingRewardCampaignInfo* unsafe_arena_release_trading_reward_campaign_info();
  // .injective.exchange.v1beta1.FeeDiscountSchedule fee_discount_schedule = 18 [json_name = "feeDiscountSchedule"];
  bool has_fee_discount_schedule() const;
  void clear_fee_discount_schedule() ;
  const ::injective::exchange::v1beta1::FeeDiscountSchedule& fee_discount_schedule() const;
  PROTOBUF_NODISCARD ::injective::exchange::v1beta1::FeeDiscountSchedule* release_fee_discount_schedule();
  ::injective::exchange::v1beta1::FeeDiscountSchedule* mutable_fee_discount_schedule();
  void set_allocated_fee_discount_schedule(::injective::exchange::v1beta1::FeeDiscountSchedule* fee_discount_schedule);
  private:
  const ::injective::exchange::v1beta1::FeeDiscountSchedule& _internal_fee_discount_schedule() const;
  ::injective::exchange::v1beta1::FeeDiscountSchedule* _internal_mutable_fee_discount_schedule();
  public:
  void unsafe_arena_set_allocated_fee_discount_schedule(
      ::injective::exchange::v1beta1::FeeDiscountSchedule* fee_discount_schedule);
  ::injective::exchange::v1beta1::FeeDiscountSchedule* unsafe_arena_release_fee_discount_schedule();
  // bool is_spot_exchange_enabled = 13 [json_name = "isSpotExchangeEnabled"];
  void clear_is_spot_exchange_enabled() ;
  bool is_spot_exchange_enabled() const;
  void set_is_spot_exchange_enabled(bool value);

  private:
  bool _internal_is_spot_exchange_enabled() const;
  void _internal_set_is_spot_exchange_enabled(bool value);

  public:
  // bool is_derivatives_exchange_enabled = 14 [json_name = "isDerivativesExchangeEnabled"];
  void clear_is_derivatives_exchange_enabled() ;
  bool is_derivatives_exchange_enabled() const;
  void set_is_derivatives_exchange_enabled(bool value);

  private:
  bool _internal_is_derivatives_exchange_enabled() const;
  void _internal_set_is_derivatives_exchange_enabled(bool value);

  public:
  // bool is_first_fee_cycle_finished = 21 [json_name = "isFirstFeeCycleFinished"];
  void clear_is_first_fee_cycle_finished() ;
  bool is_first_fee_cycle_finished() const;
  void set_is_first_fee_cycle_finished(bool value);

  private:
  bool _internal_is_first_fee_cycle_finished() const;
  void _internal_set_is_first_fee_cycle_finished(bool value);

  public:
  // @@protoc_insertion_point(class_scope:injective.exchange.v1beta1.GenesisState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::SpotMarket > spot_markets_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::DerivativeMarket > derivative_markets_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::SpotOrderBook > spot_orderbook_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::DerivativeOrderBook > derivative_orderbook_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::Balance > balances_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::DerivativePosition > positions_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::SubaccountNonce > subaccount_trade_nonces_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::ExpiryFuturesMarketInfoState > expiry_futures_market_info_state_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::PerpetualMarketInfo > perpetual_market_info_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::PerpetualMarketFundingState > perpetual_market_funding_state_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::DerivativeMarketSettlementInfo > derivative_market_settlement_scheduled_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::CampaignRewardPool > trading_reward_pool_campaign_schedule_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::TradingRewardCampaignAccountPoints > trading_reward_campaign_account_points_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::FeeDiscountAccountTierTTL > fee_discount_account_tier_ttl_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::FeeDiscountBucketVolumeAccounts > fee_discount_bucket_volume_accounts_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::CampaignRewardPool > pending_trading_reward_pool_campaign_schedule_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::TradingRewardCampaignAccountPendingPoints > pending_trading_reward_campaign_account_points_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> rewards_opt_out_addresses_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::TradeRecords > historical_trade_records_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::BinaryOptionsMarket > binary_options_markets_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> binary_options_market_ids_scheduled_for_settlement_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> spot_market_ids_scheduled_to_force_close_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::DenomDecimals > denom_decimals_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::ConditionalDerivativeOrderBook > conditional_derivative_orderbooks_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::MarketFeeMultiplier > market_fee_multipliers_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::OrderbookSequence > orderbook_sequences_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::AggregateSubaccountVolumeRecord > subaccount_volumes_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::MarketVolume > market_volumes_;
    ::injective::exchange::v1beta1::Params* params_;
    ::injective::exchange::v1beta1::TradingRewardCampaignInfo* trading_reward_campaign_info_;
    ::injective::exchange::v1beta1::FeeDiscountSchedule* fee_discount_schedule_;
    bool is_spot_exchange_enabled_;
    bool is_derivatives_exchange_enabled_;
    bool is_first_fee_cycle_finished_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2fexchange_2fv1beta1_2fgenesis_2eproto;
};// -------------------------------------------------------------------

class OrderbookSequence final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.exchange.v1beta1.OrderbookSequence) */ {
 public:
  inline OrderbookSequence() : OrderbookSequence(nullptr) {}
  ~OrderbookSequence() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR OrderbookSequence(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OrderbookSequence(const OrderbookSequence& from);
  OrderbookSequence(OrderbookSequence&& from) noexcept
    : OrderbookSequence() {
    *this = ::std::move(from);
  }

  inline OrderbookSequence& operator=(const OrderbookSequence& from) {
    CopyFrom(from);
    return *this;
  }
  inline OrderbookSequence& operator=(OrderbookSequence&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OrderbookSequence& default_instance() {
    return *internal_default_instance();
  }
  static inline const OrderbookSequence* internal_default_instance() {
    return reinterpret_cast<const OrderbookSequence*>(
               &_OrderbookSequence_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(OrderbookSequence& a, OrderbookSequence& b) {
    a.Swap(&b);
  }
  inline void Swap(OrderbookSequence* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OrderbookSequence* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OrderbookSequence* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OrderbookSequence>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OrderbookSequence& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const OrderbookSequence& from) {
    OrderbookSequence::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OrderbookSequence* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.exchange.v1beta1.OrderbookSequence";
  }
  protected:
  explicit OrderbookSequence(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMarketIdFieldNumber = 2,
    kSequenceFieldNumber = 1,
  };
  // string market_id = 2 [json_name = "marketId"];
  void clear_market_id() ;
  const std::string& market_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_market_id(Arg_&& arg, Args_... args);
  std::string* mutable_market_id();
  PROTOBUF_NODISCARD std::string* release_market_id();
  void set_allocated_market_id(std::string* ptr);

  private:
  const std::string& _internal_market_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_market_id(
      const std::string& value);
  std::string* _internal_mutable_market_id();

  public:
  // uint64 sequence = 1 [json_name = "sequence"];
  void clear_sequence() ;
  ::uint64_t sequence() const;
  void set_sequence(::uint64_t value);

  private:
  ::uint64_t _internal_sequence() const;
  void _internal_set_sequence(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:injective.exchange.v1beta1.OrderbookSequence)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr market_id_;
    ::uint64_t sequence_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2fexchange_2fv1beta1_2fgenesis_2eproto;
};// -------------------------------------------------------------------

class FeeDiscountAccountTierTTL final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.exchange.v1beta1.FeeDiscountAccountTierTTL) */ {
 public:
  inline FeeDiscountAccountTierTTL() : FeeDiscountAccountTierTTL(nullptr) {}
  ~FeeDiscountAccountTierTTL() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR FeeDiscountAccountTierTTL(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FeeDiscountAccountTierTTL(const FeeDiscountAccountTierTTL& from);
  FeeDiscountAccountTierTTL(FeeDiscountAccountTierTTL&& from) noexcept
    : FeeDiscountAccountTierTTL() {
    *this = ::std::move(from);
  }

  inline FeeDiscountAccountTierTTL& operator=(const FeeDiscountAccountTierTTL& from) {
    CopyFrom(from);
    return *this;
  }
  inline FeeDiscountAccountTierTTL& operator=(FeeDiscountAccountTierTTL&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FeeDiscountAccountTierTTL& default_instance() {
    return *internal_default_instance();
  }
  static inline const FeeDiscountAccountTierTTL* internal_default_instance() {
    return reinterpret_cast<const FeeDiscountAccountTierTTL*>(
               &_FeeDiscountAccountTierTTL_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(FeeDiscountAccountTierTTL& a, FeeDiscountAccountTierTTL& b) {
    a.Swap(&b);
  }
  inline void Swap(FeeDiscountAccountTierTTL* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FeeDiscountAccountTierTTL* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FeeDiscountAccountTierTTL* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FeeDiscountAccountTierTTL>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FeeDiscountAccountTierTTL& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FeeDiscountAccountTierTTL& from) {
    FeeDiscountAccountTierTTL::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FeeDiscountAccountTierTTL* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.exchange.v1beta1.FeeDiscountAccountTierTTL";
  }
  protected:
  explicit FeeDiscountAccountTierTTL(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 1,
    kTierTtlFieldNumber = 2,
  };
  // string account = 1 [json_name = "account"];
  void clear_account() ;
  const std::string& account() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_account(Arg_&& arg, Args_... args);
  std::string* mutable_account();
  PROTOBUF_NODISCARD std::string* release_account();
  void set_allocated_account(std::string* ptr);

  private:
  const std::string& _internal_account() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account(
      const std::string& value);
  std::string* _internal_mutable_account();

  public:
  // .injective.exchange.v1beta1.FeeDiscountTierTTL tier_ttl = 2 [json_name = "tierTtl"];
  bool has_tier_ttl() const;
  void clear_tier_ttl() ;
  const ::injective::exchange::v1beta1::FeeDiscountTierTTL& tier_ttl() const;
  PROTOBUF_NODISCARD ::injective::exchange::v1beta1::FeeDiscountTierTTL* release_tier_ttl();
  ::injective::exchange::v1beta1::FeeDiscountTierTTL* mutable_tier_ttl();
  void set_allocated_tier_ttl(::injective::exchange::v1beta1::FeeDiscountTierTTL* tier_ttl);
  private:
  const ::injective::exchange::v1beta1::FeeDiscountTierTTL& _internal_tier_ttl() const;
  ::injective::exchange::v1beta1::FeeDiscountTierTTL* _internal_mutable_tier_ttl();
  public:
  void unsafe_arena_set_allocated_tier_ttl(
      ::injective::exchange::v1beta1::FeeDiscountTierTTL* tier_ttl);
  ::injective::exchange::v1beta1::FeeDiscountTierTTL* unsafe_arena_release_tier_ttl();
  // @@protoc_insertion_point(class_scope:injective.exchange.v1beta1.FeeDiscountAccountTierTTL)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
    ::injective::exchange::v1beta1::FeeDiscountTierTTL* tier_ttl_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2fexchange_2fv1beta1_2fgenesis_2eproto;
};// -------------------------------------------------------------------

class FeeDiscountBucketVolumeAccounts final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.exchange.v1beta1.FeeDiscountBucketVolumeAccounts) */ {
 public:
  inline FeeDiscountBucketVolumeAccounts() : FeeDiscountBucketVolumeAccounts(nullptr) {}
  ~FeeDiscountBucketVolumeAccounts() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR FeeDiscountBucketVolumeAccounts(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FeeDiscountBucketVolumeAccounts(const FeeDiscountBucketVolumeAccounts& from);
  FeeDiscountBucketVolumeAccounts(FeeDiscountBucketVolumeAccounts&& from) noexcept
    : FeeDiscountBucketVolumeAccounts() {
    *this = ::std::move(from);
  }

  inline FeeDiscountBucketVolumeAccounts& operator=(const FeeDiscountBucketVolumeAccounts& from) {
    CopyFrom(from);
    return *this;
  }
  inline FeeDiscountBucketVolumeAccounts& operator=(FeeDiscountBucketVolumeAccounts&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FeeDiscountBucketVolumeAccounts& default_instance() {
    return *internal_default_instance();
  }
  static inline const FeeDiscountBucketVolumeAccounts* internal_default_instance() {
    return reinterpret_cast<const FeeDiscountBucketVolumeAccounts*>(
               &_FeeDiscountBucketVolumeAccounts_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(FeeDiscountBucketVolumeAccounts& a, FeeDiscountBucketVolumeAccounts& b) {
    a.Swap(&b);
  }
  inline void Swap(FeeDiscountBucketVolumeAccounts* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FeeDiscountBucketVolumeAccounts* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FeeDiscountBucketVolumeAccounts* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FeeDiscountBucketVolumeAccounts>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FeeDiscountBucketVolumeAccounts& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FeeDiscountBucketVolumeAccounts& from) {
    FeeDiscountBucketVolumeAccounts::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FeeDiscountBucketVolumeAccounts* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.exchange.v1beta1.FeeDiscountBucketVolumeAccounts";
  }
  protected:
  explicit FeeDiscountBucketVolumeAccounts(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountVolumeFieldNumber = 2,
    kBucketStartTimestampFieldNumber = 1,
  };
  // repeated .injective.exchange.v1beta1.AccountVolume account_volume = 2 [json_name = "accountVolume"];
  int account_volume_size() const;
  private:
  int _internal_account_volume_size() const;

  public:
  void clear_account_volume() ;
  ::injective::exchange::v1beta1::AccountVolume* mutable_account_volume(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::AccountVolume >*
      mutable_account_volume();
  private:
  const ::injective::exchange::v1beta1::AccountVolume& _internal_account_volume(int index) const;
  ::injective::exchange::v1beta1::AccountVolume* _internal_add_account_volume();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::exchange::v1beta1::AccountVolume>& _internal_account_volume() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::exchange::v1beta1::AccountVolume>* _internal_mutable_account_volume();
  public:
  const ::injective::exchange::v1beta1::AccountVolume& account_volume(int index) const;
  ::injective::exchange::v1beta1::AccountVolume* add_account_volume();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::AccountVolume >&
      account_volume() const;
  // int64 bucket_start_timestamp = 1 [json_name = "bucketStartTimestamp"];
  void clear_bucket_start_timestamp() ;
  ::int64_t bucket_start_timestamp() const;
  void set_bucket_start_timestamp(::int64_t value);

  private:
  ::int64_t _internal_bucket_start_timestamp() const;
  void _internal_set_bucket_start_timestamp(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:injective.exchange.v1beta1.FeeDiscountBucketVolumeAccounts)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::AccountVolume > account_volume_;
    ::int64_t bucket_start_timestamp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2fexchange_2fv1beta1_2fgenesis_2eproto;
};// -------------------------------------------------------------------

class AccountVolume final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.exchange.v1beta1.AccountVolume) */ {
 public:
  inline AccountVolume() : AccountVolume(nullptr) {}
  ~AccountVolume() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR AccountVolume(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AccountVolume(const AccountVolume& from);
  AccountVolume(AccountVolume&& from) noexcept
    : AccountVolume() {
    *this = ::std::move(from);
  }

  inline AccountVolume& operator=(const AccountVolume& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccountVolume& operator=(AccountVolume&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AccountVolume& default_instance() {
    return *internal_default_instance();
  }
  static inline const AccountVolume* internal_default_instance() {
    return reinterpret_cast<const AccountVolume*>(
               &_AccountVolume_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(AccountVolume& a, AccountVolume& b) {
    a.Swap(&b);
  }
  inline void Swap(AccountVolume* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AccountVolume* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AccountVolume* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AccountVolume>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AccountVolume& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AccountVolume& from) {
    AccountVolume::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccountVolume* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.exchange.v1beta1.AccountVolume";
  }
  protected:
  explicit AccountVolume(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 1,
    kVolumeFieldNumber = 2,
  };
  // string account = 1 [json_name = "account"];
  void clear_account() ;
  const std::string& account() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_account(Arg_&& arg, Args_... args);
  std::string* mutable_account();
  PROTOBUF_NODISCARD std::string* release_account();
  void set_allocated_account(std::string* ptr);

  private:
  const std::string& _internal_account() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account(
      const std::string& value);
  std::string* _internal_mutable_account();

  public:
  // string volume = 2 [json_name = "volume", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  void clear_volume() ;
  const std::string& volume() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_volume(Arg_&& arg, Args_... args);
  std::string* mutable_volume();
  PROTOBUF_NODISCARD std::string* release_volume();
  void set_allocated_volume(std::string* ptr);

  private:
  const std::string& _internal_volume() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_volume(
      const std::string& value);
  std::string* _internal_mutable_volume();

  public:
  // @@protoc_insertion_point(class_scope:injective.exchange.v1beta1.AccountVolume)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr volume_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2fexchange_2fv1beta1_2fgenesis_2eproto;
};// -------------------------------------------------------------------

class TradingRewardCampaignAccountPoints final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.exchange.v1beta1.TradingRewardCampaignAccountPoints) */ {
 public:
  inline TradingRewardCampaignAccountPoints() : TradingRewardCampaignAccountPoints(nullptr) {}
  ~TradingRewardCampaignAccountPoints() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TradingRewardCampaignAccountPoints(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TradingRewardCampaignAccountPoints(const TradingRewardCampaignAccountPoints& from);
  TradingRewardCampaignAccountPoints(TradingRewardCampaignAccountPoints&& from) noexcept
    : TradingRewardCampaignAccountPoints() {
    *this = ::std::move(from);
  }

  inline TradingRewardCampaignAccountPoints& operator=(const TradingRewardCampaignAccountPoints& from) {
    CopyFrom(from);
    return *this;
  }
  inline TradingRewardCampaignAccountPoints& operator=(TradingRewardCampaignAccountPoints&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TradingRewardCampaignAccountPoints& default_instance() {
    return *internal_default_instance();
  }
  static inline const TradingRewardCampaignAccountPoints* internal_default_instance() {
    return reinterpret_cast<const TradingRewardCampaignAccountPoints*>(
               &_TradingRewardCampaignAccountPoints_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(TradingRewardCampaignAccountPoints& a, TradingRewardCampaignAccountPoints& b) {
    a.Swap(&b);
  }
  inline void Swap(TradingRewardCampaignAccountPoints* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TradingRewardCampaignAccountPoints* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TradingRewardCampaignAccountPoints* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TradingRewardCampaignAccountPoints>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TradingRewardCampaignAccountPoints& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TradingRewardCampaignAccountPoints& from) {
    TradingRewardCampaignAccountPoints::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TradingRewardCampaignAccountPoints* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.exchange.v1beta1.TradingRewardCampaignAccountPoints";
  }
  protected:
  explicit TradingRewardCampaignAccountPoints(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 1,
    kPointsFieldNumber = 2,
  };
  // string account = 1 [json_name = "account"];
  void clear_account() ;
  const std::string& account() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_account(Arg_&& arg, Args_... args);
  std::string* mutable_account();
  PROTOBUF_NODISCARD std::string* release_account();
  void set_allocated_account(std::string* ptr);

  private:
  const std::string& _internal_account() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account(
      const std::string& value);
  std::string* _internal_mutable_account();

  public:
  // string points = 2 [json_name = "points", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  void clear_points() ;
  const std::string& points() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_points(Arg_&& arg, Args_... args);
  std::string* mutable_points();
  PROTOBUF_NODISCARD std::string* release_points();
  void set_allocated_points(std::string* ptr);

  private:
  const std::string& _internal_points() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_points(
      const std::string& value);
  std::string* _internal_mutable_points();

  public:
  // @@protoc_insertion_point(class_scope:injective.exchange.v1beta1.TradingRewardCampaignAccountPoints)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr points_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2fexchange_2fv1beta1_2fgenesis_2eproto;
};// -------------------------------------------------------------------

class TradingRewardCampaignAccountPendingPoints final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.exchange.v1beta1.TradingRewardCampaignAccountPendingPoints) */ {
 public:
  inline TradingRewardCampaignAccountPendingPoints() : TradingRewardCampaignAccountPendingPoints(nullptr) {}
  ~TradingRewardCampaignAccountPendingPoints() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TradingRewardCampaignAccountPendingPoints(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TradingRewardCampaignAccountPendingPoints(const TradingRewardCampaignAccountPendingPoints& from);
  TradingRewardCampaignAccountPendingPoints(TradingRewardCampaignAccountPendingPoints&& from) noexcept
    : TradingRewardCampaignAccountPendingPoints() {
    *this = ::std::move(from);
  }

  inline TradingRewardCampaignAccountPendingPoints& operator=(const TradingRewardCampaignAccountPendingPoints& from) {
    CopyFrom(from);
    return *this;
  }
  inline TradingRewardCampaignAccountPendingPoints& operator=(TradingRewardCampaignAccountPendingPoints&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TradingRewardCampaignAccountPendingPoints& default_instance() {
    return *internal_default_instance();
  }
  static inline const TradingRewardCampaignAccountPendingPoints* internal_default_instance() {
    return reinterpret_cast<const TradingRewardCampaignAccountPendingPoints*>(
               &_TradingRewardCampaignAccountPendingPoints_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(TradingRewardCampaignAccountPendingPoints& a, TradingRewardCampaignAccountPendingPoints& b) {
    a.Swap(&b);
  }
  inline void Swap(TradingRewardCampaignAccountPendingPoints* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TradingRewardCampaignAccountPendingPoints* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TradingRewardCampaignAccountPendingPoints* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TradingRewardCampaignAccountPendingPoints>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TradingRewardCampaignAccountPendingPoints& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TradingRewardCampaignAccountPendingPoints& from) {
    TradingRewardCampaignAccountPendingPoints::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TradingRewardCampaignAccountPendingPoints* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.exchange.v1beta1.TradingRewardCampaignAccountPendingPoints";
  }
  protected:
  explicit TradingRewardCampaignAccountPendingPoints(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountPointsFieldNumber = 2,
    kRewardPoolStartTimestampFieldNumber = 1,
  };
  // repeated .injective.exchange.v1beta1.TradingRewardCampaignAccountPoints account_points = 2 [json_name = "accountPoints"];
  int account_points_size() const;
  private:
  int _internal_account_points_size() const;

  public:
  void clear_account_points() ;
  ::injective::exchange::v1beta1::TradingRewardCampaignAccountPoints* mutable_account_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::TradingRewardCampaignAccountPoints >*
      mutable_account_points();
  private:
  const ::injective::exchange::v1beta1::TradingRewardCampaignAccountPoints& _internal_account_points(int index) const;
  ::injective::exchange::v1beta1::TradingRewardCampaignAccountPoints* _internal_add_account_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::exchange::v1beta1::TradingRewardCampaignAccountPoints>& _internal_account_points() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::exchange::v1beta1::TradingRewardCampaignAccountPoints>* _internal_mutable_account_points();
  public:
  const ::injective::exchange::v1beta1::TradingRewardCampaignAccountPoints& account_points(int index) const;
  ::injective::exchange::v1beta1::TradingRewardCampaignAccountPoints* add_account_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::TradingRewardCampaignAccountPoints >&
      account_points() const;
  // int64 reward_pool_start_timestamp = 1 [json_name = "rewardPoolStartTimestamp"];
  void clear_reward_pool_start_timestamp() ;
  ::int64_t reward_pool_start_timestamp() const;
  void set_reward_pool_start_timestamp(::int64_t value);

  private:
  ::int64_t _internal_reward_pool_start_timestamp() const;
  void _internal_set_reward_pool_start_timestamp(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:injective.exchange.v1beta1.TradingRewardCampaignAccountPendingPoints)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::TradingRewardCampaignAccountPoints > account_points_;
    ::int64_t reward_pool_start_timestamp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2fexchange_2fv1beta1_2fgenesis_2eproto;
};// -------------------------------------------------------------------

class SpotOrderBook final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.exchange.v1beta1.SpotOrderBook) */ {
 public:
  inline SpotOrderBook() : SpotOrderBook(nullptr) {}
  ~SpotOrderBook() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SpotOrderBook(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SpotOrderBook(const SpotOrderBook& from);
  SpotOrderBook(SpotOrderBook&& from) noexcept
    : SpotOrderBook() {
    *this = ::std::move(from);
  }

  inline SpotOrderBook& operator=(const SpotOrderBook& from) {
    CopyFrom(from);
    return *this;
  }
  inline SpotOrderBook& operator=(SpotOrderBook&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SpotOrderBook& default_instance() {
    return *internal_default_instance();
  }
  static inline const SpotOrderBook* internal_default_instance() {
    return reinterpret_cast<const SpotOrderBook*>(
               &_SpotOrderBook_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(SpotOrderBook& a, SpotOrderBook& b) {
    a.Swap(&b);
  }
  inline void Swap(SpotOrderBook* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SpotOrderBook* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SpotOrderBook* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SpotOrderBook>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SpotOrderBook& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SpotOrderBook& from) {
    SpotOrderBook::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SpotOrderBook* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.exchange.v1beta1.SpotOrderBook";
  }
  protected:
  explicit SpotOrderBook(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrdersFieldNumber = 3,
    kMarketIdFieldNumber = 1,
    kIsBuySideFieldNumber = 2,
  };
  // repeated .injective.exchange.v1beta1.SpotLimitOrder orders = 3 [json_name = "orders"];
  int orders_size() const;
  private:
  int _internal_orders_size() const;

  public:
  void clear_orders() ;
  ::injective::exchange::v1beta1::SpotLimitOrder* mutable_orders(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::SpotLimitOrder >*
      mutable_orders();
  private:
  const ::injective::exchange::v1beta1::SpotLimitOrder& _internal_orders(int index) const;
  ::injective::exchange::v1beta1::SpotLimitOrder* _internal_add_orders();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::exchange::v1beta1::SpotLimitOrder>& _internal_orders() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::exchange::v1beta1::SpotLimitOrder>* _internal_mutable_orders();
  public:
  const ::injective::exchange::v1beta1::SpotLimitOrder& orders(int index) const;
  ::injective::exchange::v1beta1::SpotLimitOrder* add_orders();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::SpotLimitOrder >&
      orders() const;
  // string market_id = 1 [json_name = "marketId"];
  void clear_market_id() ;
  const std::string& market_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_market_id(Arg_&& arg, Args_... args);
  std::string* mutable_market_id();
  PROTOBUF_NODISCARD std::string* release_market_id();
  void set_allocated_market_id(std::string* ptr);

  private:
  const std::string& _internal_market_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_market_id(
      const std::string& value);
  std::string* _internal_mutable_market_id();

  public:
  // bool isBuySide = 2 [json_name = "isBuySide"];
  void clear_isbuyside() ;
  bool isbuyside() const;
  void set_isbuyside(bool value);

  private:
  bool _internal_isbuyside() const;
  void _internal_set_isbuyside(bool value);

  public:
  // @@protoc_insertion_point(class_scope:injective.exchange.v1beta1.SpotOrderBook)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::SpotLimitOrder > orders_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr market_id_;
    bool isbuyside_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2fexchange_2fv1beta1_2fgenesis_2eproto;
};// -------------------------------------------------------------------

class DerivativeOrderBook final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.exchange.v1beta1.DerivativeOrderBook) */ {
 public:
  inline DerivativeOrderBook() : DerivativeOrderBook(nullptr) {}
  ~DerivativeOrderBook() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR DerivativeOrderBook(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DerivativeOrderBook(const DerivativeOrderBook& from);
  DerivativeOrderBook(DerivativeOrderBook&& from) noexcept
    : DerivativeOrderBook() {
    *this = ::std::move(from);
  }

  inline DerivativeOrderBook& operator=(const DerivativeOrderBook& from) {
    CopyFrom(from);
    return *this;
  }
  inline DerivativeOrderBook& operator=(DerivativeOrderBook&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DerivativeOrderBook& default_instance() {
    return *internal_default_instance();
  }
  static inline const DerivativeOrderBook* internal_default_instance() {
    return reinterpret_cast<const DerivativeOrderBook*>(
               &_DerivativeOrderBook_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(DerivativeOrderBook& a, DerivativeOrderBook& b) {
    a.Swap(&b);
  }
  inline void Swap(DerivativeOrderBook* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DerivativeOrderBook* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DerivativeOrderBook* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DerivativeOrderBook>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DerivativeOrderBook& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DerivativeOrderBook& from) {
    DerivativeOrderBook::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DerivativeOrderBook* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.exchange.v1beta1.DerivativeOrderBook";
  }
  protected:
  explicit DerivativeOrderBook(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrdersFieldNumber = 3,
    kMarketIdFieldNumber = 1,
    kIsBuySideFieldNumber = 2,
  };
  // repeated .injective.exchange.v1beta1.DerivativeLimitOrder orders = 3 [json_name = "orders"];
  int orders_size() const;
  private:
  int _internal_orders_size() const;

  public:
  void clear_orders() ;
  ::injective::exchange::v1beta1::DerivativeLimitOrder* mutable_orders(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::DerivativeLimitOrder >*
      mutable_orders();
  private:
  const ::injective::exchange::v1beta1::DerivativeLimitOrder& _internal_orders(int index) const;
  ::injective::exchange::v1beta1::DerivativeLimitOrder* _internal_add_orders();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::exchange::v1beta1::DerivativeLimitOrder>& _internal_orders() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::exchange::v1beta1::DerivativeLimitOrder>* _internal_mutable_orders();
  public:
  const ::injective::exchange::v1beta1::DerivativeLimitOrder& orders(int index) const;
  ::injective::exchange::v1beta1::DerivativeLimitOrder* add_orders();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::DerivativeLimitOrder >&
      orders() const;
  // string market_id = 1 [json_name = "marketId"];
  void clear_market_id() ;
  const std::string& market_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_market_id(Arg_&& arg, Args_... args);
  std::string* mutable_market_id();
  PROTOBUF_NODISCARD std::string* release_market_id();
  void set_allocated_market_id(std::string* ptr);

  private:
  const std::string& _internal_market_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_market_id(
      const std::string& value);
  std::string* _internal_mutable_market_id();

  public:
  // bool isBuySide = 2 [json_name = "isBuySide"];
  void clear_isbuyside() ;
  bool isbuyside() const;
  void set_isbuyside(bool value);

  private:
  bool _internal_isbuyside() const;
  void _internal_set_isbuyside(bool value);

  public:
  // @@protoc_insertion_point(class_scope:injective.exchange.v1beta1.DerivativeOrderBook)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::DerivativeLimitOrder > orders_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr market_id_;
    bool isbuyside_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2fexchange_2fv1beta1_2fgenesis_2eproto;
};// -------------------------------------------------------------------

class ConditionalDerivativeOrderBook final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.exchange.v1beta1.ConditionalDerivativeOrderBook) */ {
 public:
  inline ConditionalDerivativeOrderBook() : ConditionalDerivativeOrderBook(nullptr) {}
  ~ConditionalDerivativeOrderBook() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ConditionalDerivativeOrderBook(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConditionalDerivativeOrderBook(const ConditionalDerivativeOrderBook& from);
  ConditionalDerivativeOrderBook(ConditionalDerivativeOrderBook&& from) noexcept
    : ConditionalDerivativeOrderBook() {
    *this = ::std::move(from);
  }

  inline ConditionalDerivativeOrderBook& operator=(const ConditionalDerivativeOrderBook& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConditionalDerivativeOrderBook& operator=(ConditionalDerivativeOrderBook&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConditionalDerivativeOrderBook& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConditionalDerivativeOrderBook* internal_default_instance() {
    return reinterpret_cast<const ConditionalDerivativeOrderBook*>(
               &_ConditionalDerivativeOrderBook_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ConditionalDerivativeOrderBook& a, ConditionalDerivativeOrderBook& b) {
    a.Swap(&b);
  }
  inline void Swap(ConditionalDerivativeOrderBook* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConditionalDerivativeOrderBook* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConditionalDerivativeOrderBook* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ConditionalDerivativeOrderBook>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ConditionalDerivativeOrderBook& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ConditionalDerivativeOrderBook& from) {
    ConditionalDerivativeOrderBook::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConditionalDerivativeOrderBook* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.exchange.v1beta1.ConditionalDerivativeOrderBook";
  }
  protected:
  explicit ConditionalDerivativeOrderBook(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLimitBuyOrdersFieldNumber = 2,
    kMarketBuyOrdersFieldNumber = 3,
    kLimitSellOrdersFieldNumber = 4,
    kMarketSellOrdersFieldNumber = 5,
    kMarketIdFieldNumber = 1,
  };
  // repeated .injective.exchange.v1beta1.DerivativeLimitOrder limit_buy_orders = 2 [json_name = "limitBuyOrders"];
  int limit_buy_orders_size() const;
  private:
  int _internal_limit_buy_orders_size() const;

  public:
  void clear_limit_buy_orders() ;
  ::injective::exchange::v1beta1::DerivativeLimitOrder* mutable_limit_buy_orders(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::DerivativeLimitOrder >*
      mutable_limit_buy_orders();
  private:
  const ::injective::exchange::v1beta1::DerivativeLimitOrder& _internal_limit_buy_orders(int index) const;
  ::injective::exchange::v1beta1::DerivativeLimitOrder* _internal_add_limit_buy_orders();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::exchange::v1beta1::DerivativeLimitOrder>& _internal_limit_buy_orders() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::exchange::v1beta1::DerivativeLimitOrder>* _internal_mutable_limit_buy_orders();
  public:
  const ::injective::exchange::v1beta1::DerivativeLimitOrder& limit_buy_orders(int index) const;
  ::injective::exchange::v1beta1::DerivativeLimitOrder* add_limit_buy_orders();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::DerivativeLimitOrder >&
      limit_buy_orders() const;
  // repeated .injective.exchange.v1beta1.DerivativeMarketOrder market_buy_orders = 3 [json_name = "marketBuyOrders"];
  int market_buy_orders_size() const;
  private:
  int _internal_market_buy_orders_size() const;

  public:
  void clear_market_buy_orders() ;
  ::injective::exchange::v1beta1::DerivativeMarketOrder* mutable_market_buy_orders(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::DerivativeMarketOrder >*
      mutable_market_buy_orders();
  private:
  const ::injective::exchange::v1beta1::DerivativeMarketOrder& _internal_market_buy_orders(int index) const;
  ::injective::exchange::v1beta1::DerivativeMarketOrder* _internal_add_market_buy_orders();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::exchange::v1beta1::DerivativeMarketOrder>& _internal_market_buy_orders() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::exchange::v1beta1::DerivativeMarketOrder>* _internal_mutable_market_buy_orders();
  public:
  const ::injective::exchange::v1beta1::DerivativeMarketOrder& market_buy_orders(int index) const;
  ::injective::exchange::v1beta1::DerivativeMarketOrder* add_market_buy_orders();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::DerivativeMarketOrder >&
      market_buy_orders() const;
  // repeated .injective.exchange.v1beta1.DerivativeLimitOrder limit_sell_orders = 4 [json_name = "limitSellOrders"];
  int limit_sell_orders_size() const;
  private:
  int _internal_limit_sell_orders_size() const;

  public:
  void clear_limit_sell_orders() ;
  ::injective::exchange::v1beta1::DerivativeLimitOrder* mutable_limit_sell_orders(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::DerivativeLimitOrder >*
      mutable_limit_sell_orders();
  private:
  const ::injective::exchange::v1beta1::DerivativeLimitOrder& _internal_limit_sell_orders(int index) const;
  ::injective::exchange::v1beta1::DerivativeLimitOrder* _internal_add_limit_sell_orders();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::exchange::v1beta1::DerivativeLimitOrder>& _internal_limit_sell_orders() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::exchange::v1beta1::DerivativeLimitOrder>* _internal_mutable_limit_sell_orders();
  public:
  const ::injective::exchange::v1beta1::DerivativeLimitOrder& limit_sell_orders(int index) const;
  ::injective::exchange::v1beta1::DerivativeLimitOrder* add_limit_sell_orders();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::DerivativeLimitOrder >&
      limit_sell_orders() const;
  // repeated .injective.exchange.v1beta1.DerivativeMarketOrder market_sell_orders = 5 [json_name = "marketSellOrders"];
  int market_sell_orders_size() const;
  private:
  int _internal_market_sell_orders_size() const;

  public:
  void clear_market_sell_orders() ;
  ::injective::exchange::v1beta1::DerivativeMarketOrder* mutable_market_sell_orders(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::DerivativeMarketOrder >*
      mutable_market_sell_orders();
  private:
  const ::injective::exchange::v1beta1::DerivativeMarketOrder& _internal_market_sell_orders(int index) const;
  ::injective::exchange::v1beta1::DerivativeMarketOrder* _internal_add_market_sell_orders();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::exchange::v1beta1::DerivativeMarketOrder>& _internal_market_sell_orders() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::exchange::v1beta1::DerivativeMarketOrder>* _internal_mutable_market_sell_orders();
  public:
  const ::injective::exchange::v1beta1::DerivativeMarketOrder& market_sell_orders(int index) const;
  ::injective::exchange::v1beta1::DerivativeMarketOrder* add_market_sell_orders();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::DerivativeMarketOrder >&
      market_sell_orders() const;
  // string market_id = 1 [json_name = "marketId"];
  void clear_market_id() ;
  const std::string& market_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_market_id(Arg_&& arg, Args_... args);
  std::string* mutable_market_id();
  PROTOBUF_NODISCARD std::string* release_market_id();
  void set_allocated_market_id(std::string* ptr);

  private:
  const std::string& _internal_market_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_market_id(
      const std::string& value);
  std::string* _internal_mutable_market_id();

  public:
  // @@protoc_insertion_point(class_scope:injective.exchange.v1beta1.ConditionalDerivativeOrderBook)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::DerivativeLimitOrder > limit_buy_orders_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::DerivativeMarketOrder > market_buy_orders_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::DerivativeLimitOrder > limit_sell_orders_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::DerivativeMarketOrder > market_sell_orders_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr market_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2fexchange_2fv1beta1_2fgenesis_2eproto;
};// -------------------------------------------------------------------

class Balance final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.exchange.v1beta1.Balance) */ {
 public:
  inline Balance() : Balance(nullptr) {}
  ~Balance() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Balance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Balance(const Balance& from);
  Balance(Balance&& from) noexcept
    : Balance() {
    *this = ::std::move(from);
  }

  inline Balance& operator=(const Balance& from) {
    CopyFrom(from);
    return *this;
  }
  inline Balance& operator=(Balance&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Balance& default_instance() {
    return *internal_default_instance();
  }
  static inline const Balance* internal_default_instance() {
    return reinterpret_cast<const Balance*>(
               &_Balance_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Balance& a, Balance& b) {
    a.Swap(&b);
  }
  inline void Swap(Balance* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Balance* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Balance* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Balance>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Balance& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Balance& from) {
    Balance::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Balance* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.exchange.v1beta1.Balance";
  }
  protected:
  explicit Balance(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubaccountIdFieldNumber = 1,
    kDenomFieldNumber = 2,
    kDepositsFieldNumber = 3,
  };
  // string subaccount_id = 1 [json_name = "subaccountId"];
  void clear_subaccount_id() ;
  const std::string& subaccount_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_subaccount_id(Arg_&& arg, Args_... args);
  std::string* mutable_subaccount_id();
  PROTOBUF_NODISCARD std::string* release_subaccount_id();
  void set_allocated_subaccount_id(std::string* ptr);

  private:
  const std::string& _internal_subaccount_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_subaccount_id(
      const std::string& value);
  std::string* _internal_mutable_subaccount_id();

  public:
  // string denom = 2 [json_name = "denom"];
  void clear_denom() ;
  const std::string& denom() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_denom(Arg_&& arg, Args_... args);
  std::string* mutable_denom();
  PROTOBUF_NODISCARD std::string* release_denom();
  void set_allocated_denom(std::string* ptr);

  private:
  const std::string& _internal_denom() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_denom(
      const std::string& value);
  std::string* _internal_mutable_denom();

  public:
  // .injective.exchange.v1beta1.Deposit deposits = 3 [json_name = "deposits"];
  bool has_deposits() const;
  void clear_deposits() ;
  const ::injective::exchange::v1beta1::Deposit& deposits() const;
  PROTOBUF_NODISCARD ::injective::exchange::v1beta1::Deposit* release_deposits();
  ::injective::exchange::v1beta1::Deposit* mutable_deposits();
  void set_allocated_deposits(::injective::exchange::v1beta1::Deposit* deposits);
  private:
  const ::injective::exchange::v1beta1::Deposit& _internal_deposits() const;
  ::injective::exchange::v1beta1::Deposit* _internal_mutable_deposits();
  public:
  void unsafe_arena_set_allocated_deposits(
      ::injective::exchange::v1beta1::Deposit* deposits);
  ::injective::exchange::v1beta1::Deposit* unsafe_arena_release_deposits();
  // @@protoc_insertion_point(class_scope:injective.exchange.v1beta1.Balance)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subaccount_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr denom_;
    ::injective::exchange::v1beta1::Deposit* deposits_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2fexchange_2fv1beta1_2fgenesis_2eproto;
};// -------------------------------------------------------------------

class DerivativePosition final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.exchange.v1beta1.DerivativePosition) */ {
 public:
  inline DerivativePosition() : DerivativePosition(nullptr) {}
  ~DerivativePosition() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR DerivativePosition(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DerivativePosition(const DerivativePosition& from);
  DerivativePosition(DerivativePosition&& from) noexcept
    : DerivativePosition() {
    *this = ::std::move(from);
  }

  inline DerivativePosition& operator=(const DerivativePosition& from) {
    CopyFrom(from);
    return *this;
  }
  inline DerivativePosition& operator=(DerivativePosition&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DerivativePosition& default_instance() {
    return *internal_default_instance();
  }
  static inline const DerivativePosition* internal_default_instance() {
    return reinterpret_cast<const DerivativePosition*>(
               &_DerivativePosition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(DerivativePosition& a, DerivativePosition& b) {
    a.Swap(&b);
  }
  inline void Swap(DerivativePosition* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DerivativePosition* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DerivativePosition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DerivativePosition>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DerivativePosition& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DerivativePosition& from) {
    DerivativePosition::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DerivativePosition* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.exchange.v1beta1.DerivativePosition";
  }
  protected:
  explicit DerivativePosition(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubaccountIdFieldNumber = 1,
    kMarketIdFieldNumber = 2,
    kPositionFieldNumber = 3,
  };
  // string subaccount_id = 1 [json_name = "subaccountId"];
  void clear_subaccount_id() ;
  const std::string& subaccount_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_subaccount_id(Arg_&& arg, Args_... args);
  std::string* mutable_subaccount_id();
  PROTOBUF_NODISCARD std::string* release_subaccount_id();
  void set_allocated_subaccount_id(std::string* ptr);

  private:
  const std::string& _internal_subaccount_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_subaccount_id(
      const std::string& value);
  std::string* _internal_mutable_subaccount_id();

  public:
  // string market_id = 2 [json_name = "marketId"];
  void clear_market_id() ;
  const std::string& market_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_market_id(Arg_&& arg, Args_... args);
  std::string* mutable_market_id();
  PROTOBUF_NODISCARD std::string* release_market_id();
  void set_allocated_market_id(std::string* ptr);

  private:
  const std::string& _internal_market_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_market_id(
      const std::string& value);
  std::string* _internal_mutable_market_id();

  public:
  // .injective.exchange.v1beta1.Position position = 3 [json_name = "position"];
  bool has_position() const;
  void clear_position() ;
  const ::injective::exchange::v1beta1::Position& position() const;
  PROTOBUF_NODISCARD ::injective::exchange::v1beta1::Position* release_position();
  ::injective::exchange::v1beta1::Position* mutable_position();
  void set_allocated_position(::injective::exchange::v1beta1::Position* position);
  private:
  const ::injective::exchange::v1beta1::Position& _internal_position() const;
  ::injective::exchange::v1beta1::Position* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::injective::exchange::v1beta1::Position* position);
  ::injective::exchange::v1beta1::Position* unsafe_arena_release_position();
  // @@protoc_insertion_point(class_scope:injective.exchange.v1beta1.DerivativePosition)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subaccount_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr market_id_;
    ::injective::exchange::v1beta1::Position* position_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2fexchange_2fv1beta1_2fgenesis_2eproto;
};// -------------------------------------------------------------------

class SubaccountNonce final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.exchange.v1beta1.SubaccountNonce) */ {
 public:
  inline SubaccountNonce() : SubaccountNonce(nullptr) {}
  ~SubaccountNonce() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SubaccountNonce(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SubaccountNonce(const SubaccountNonce& from);
  SubaccountNonce(SubaccountNonce&& from) noexcept
    : SubaccountNonce() {
    *this = ::std::move(from);
  }

  inline SubaccountNonce& operator=(const SubaccountNonce& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubaccountNonce& operator=(SubaccountNonce&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubaccountNonce& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubaccountNonce* internal_default_instance() {
    return reinterpret_cast<const SubaccountNonce*>(
               &_SubaccountNonce_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(SubaccountNonce& a, SubaccountNonce& b) {
    a.Swap(&b);
  }
  inline void Swap(SubaccountNonce* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubaccountNonce* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubaccountNonce* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SubaccountNonce>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SubaccountNonce& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SubaccountNonce& from) {
    SubaccountNonce::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubaccountNonce* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.exchange.v1beta1.SubaccountNonce";
  }
  protected:
  explicit SubaccountNonce(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubaccountIdFieldNumber = 1,
    kSubaccountTradeNonceFieldNumber = 2,
  };
  // string subaccount_id = 1 [json_name = "subaccountId"];
  void clear_subaccount_id() ;
  const std::string& subaccount_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_subaccount_id(Arg_&& arg, Args_... args);
  std::string* mutable_subaccount_id();
  PROTOBUF_NODISCARD std::string* release_subaccount_id();
  void set_allocated_subaccount_id(std::string* ptr);

  private:
  const std::string& _internal_subaccount_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_subaccount_id(
      const std::string& value);
  std::string* _internal_mutable_subaccount_id();

  public:
  // .injective.exchange.v1beta1.SubaccountTradeNonce subaccount_trade_nonce = 2 [json_name = "subaccountTradeNonce", (.gogoproto.nullable) = false];
  bool has_subaccount_trade_nonce() const;
  void clear_subaccount_trade_nonce() ;
  const ::injective::exchange::v1beta1::SubaccountTradeNonce& subaccount_trade_nonce() const;
  PROTOBUF_NODISCARD ::injective::exchange::v1beta1::SubaccountTradeNonce* release_subaccount_trade_nonce();
  ::injective::exchange::v1beta1::SubaccountTradeNonce* mutable_subaccount_trade_nonce();
  void set_allocated_subaccount_trade_nonce(::injective::exchange::v1beta1::SubaccountTradeNonce* subaccount_trade_nonce);
  private:
  const ::injective::exchange::v1beta1::SubaccountTradeNonce& _internal_subaccount_trade_nonce() const;
  ::injective::exchange::v1beta1::SubaccountTradeNonce* _internal_mutable_subaccount_trade_nonce();
  public:
  void unsafe_arena_set_allocated_subaccount_trade_nonce(
      ::injective::exchange::v1beta1::SubaccountTradeNonce* subaccount_trade_nonce);
  ::injective::exchange::v1beta1::SubaccountTradeNonce* unsafe_arena_release_subaccount_trade_nonce();
  // @@protoc_insertion_point(class_scope:injective.exchange.v1beta1.SubaccountNonce)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subaccount_id_;
    ::injective::exchange::v1beta1::SubaccountTradeNonce* subaccount_trade_nonce_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2fexchange_2fv1beta1_2fgenesis_2eproto;
};// -------------------------------------------------------------------

class ExpiryFuturesMarketInfoState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.exchange.v1beta1.ExpiryFuturesMarketInfoState) */ {
 public:
  inline ExpiryFuturesMarketInfoState() : ExpiryFuturesMarketInfoState(nullptr) {}
  ~ExpiryFuturesMarketInfoState() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ExpiryFuturesMarketInfoState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExpiryFuturesMarketInfoState(const ExpiryFuturesMarketInfoState& from);
  ExpiryFuturesMarketInfoState(ExpiryFuturesMarketInfoState&& from) noexcept
    : ExpiryFuturesMarketInfoState() {
    *this = ::std::move(from);
  }

  inline ExpiryFuturesMarketInfoState& operator=(const ExpiryFuturesMarketInfoState& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExpiryFuturesMarketInfoState& operator=(ExpiryFuturesMarketInfoState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExpiryFuturesMarketInfoState& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExpiryFuturesMarketInfoState* internal_default_instance() {
    return reinterpret_cast<const ExpiryFuturesMarketInfoState*>(
               &_ExpiryFuturesMarketInfoState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(ExpiryFuturesMarketInfoState& a, ExpiryFuturesMarketInfoState& b) {
    a.Swap(&b);
  }
  inline void Swap(ExpiryFuturesMarketInfoState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExpiryFuturesMarketInfoState* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExpiryFuturesMarketInfoState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ExpiryFuturesMarketInfoState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ExpiryFuturesMarketInfoState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ExpiryFuturesMarketInfoState& from) {
    ExpiryFuturesMarketInfoState::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExpiryFuturesMarketInfoState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.exchange.v1beta1.ExpiryFuturesMarketInfoState";
  }
  protected:
  explicit ExpiryFuturesMarketInfoState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMarketIdFieldNumber = 1,
    kMarketInfoFieldNumber = 2,
  };
  // string market_id = 1 [json_name = "marketId"];
  void clear_market_id() ;
  const std::string& market_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_market_id(Arg_&& arg, Args_... args);
  std::string* mutable_market_id();
  PROTOBUF_NODISCARD std::string* release_market_id();
  void set_allocated_market_id(std::string* ptr);

  private:
  const std::string& _internal_market_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_market_id(
      const std::string& value);
  std::string* _internal_mutable_market_id();

  public:
  // .injective.exchange.v1beta1.ExpiryFuturesMarketInfo market_info = 2 [json_name = "marketInfo"];
  bool has_market_info() const;
  void clear_market_info() ;
  const ::injective::exchange::v1beta1::ExpiryFuturesMarketInfo& market_info() const;
  PROTOBUF_NODISCARD ::injective::exchange::v1beta1::ExpiryFuturesMarketInfo* release_market_info();
  ::injective::exchange::v1beta1::ExpiryFuturesMarketInfo* mutable_market_info();
  void set_allocated_market_info(::injective::exchange::v1beta1::ExpiryFuturesMarketInfo* market_info);
  private:
  const ::injective::exchange::v1beta1::ExpiryFuturesMarketInfo& _internal_market_info() const;
  ::injective::exchange::v1beta1::ExpiryFuturesMarketInfo* _internal_mutable_market_info();
  public:
  void unsafe_arena_set_allocated_market_info(
      ::injective::exchange::v1beta1::ExpiryFuturesMarketInfo* market_info);
  ::injective::exchange::v1beta1::ExpiryFuturesMarketInfo* unsafe_arena_release_market_info();
  // @@protoc_insertion_point(class_scope:injective.exchange.v1beta1.ExpiryFuturesMarketInfoState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr market_id_;
    ::injective::exchange::v1beta1::ExpiryFuturesMarketInfo* market_info_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2fexchange_2fv1beta1_2fgenesis_2eproto;
};// -------------------------------------------------------------------

class PerpetualMarketFundingState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.exchange.v1beta1.PerpetualMarketFundingState) */ {
 public:
  inline PerpetualMarketFundingState() : PerpetualMarketFundingState(nullptr) {}
  ~PerpetualMarketFundingState() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PerpetualMarketFundingState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PerpetualMarketFundingState(const PerpetualMarketFundingState& from);
  PerpetualMarketFundingState(PerpetualMarketFundingState&& from) noexcept
    : PerpetualMarketFundingState() {
    *this = ::std::move(from);
  }

  inline PerpetualMarketFundingState& operator=(const PerpetualMarketFundingState& from) {
    CopyFrom(from);
    return *this;
  }
  inline PerpetualMarketFundingState& operator=(PerpetualMarketFundingState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PerpetualMarketFundingState& default_instance() {
    return *internal_default_instance();
  }
  static inline const PerpetualMarketFundingState* internal_default_instance() {
    return reinterpret_cast<const PerpetualMarketFundingState*>(
               &_PerpetualMarketFundingState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(PerpetualMarketFundingState& a, PerpetualMarketFundingState& b) {
    a.Swap(&b);
  }
  inline void Swap(PerpetualMarketFundingState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PerpetualMarketFundingState* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PerpetualMarketFundingState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PerpetualMarketFundingState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PerpetualMarketFundingState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PerpetualMarketFundingState& from) {
    PerpetualMarketFundingState::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PerpetualMarketFundingState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.exchange.v1beta1.PerpetualMarketFundingState";
  }
  protected:
  explicit PerpetualMarketFundingState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMarketIdFieldNumber = 1,
    kFundingFieldNumber = 2,
  };
  // string market_id = 1 [json_name = "marketId"];
  void clear_market_id() ;
  const std::string& market_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_market_id(Arg_&& arg, Args_... args);
  std::string* mutable_market_id();
  PROTOBUF_NODISCARD std::string* release_market_id();
  void set_allocated_market_id(std::string* ptr);

  private:
  const std::string& _internal_market_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_market_id(
      const std::string& value);
  std::string* _internal_mutable_market_id();

  public:
  // .injective.exchange.v1beta1.PerpetualMarketFunding funding = 2 [json_name = "funding"];
  bool has_funding() const;
  void clear_funding() ;
  const ::injective::exchange::v1beta1::PerpetualMarketFunding& funding() const;
  PROTOBUF_NODISCARD ::injective::exchange::v1beta1::PerpetualMarketFunding* release_funding();
  ::injective::exchange::v1beta1::PerpetualMarketFunding* mutable_funding();
  void set_allocated_funding(::injective::exchange::v1beta1::PerpetualMarketFunding* funding);
  private:
  const ::injective::exchange::v1beta1::PerpetualMarketFunding& _internal_funding() const;
  ::injective::exchange::v1beta1::PerpetualMarketFunding* _internal_mutable_funding();
  public:
  void unsafe_arena_set_allocated_funding(
      ::injective::exchange::v1beta1::PerpetualMarketFunding* funding);
  ::injective::exchange::v1beta1::PerpetualMarketFunding* unsafe_arena_release_funding();
  // @@protoc_insertion_point(class_scope:injective.exchange.v1beta1.PerpetualMarketFundingState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr market_id_;
    ::injective::exchange::v1beta1::PerpetualMarketFunding* funding_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2fexchange_2fv1beta1_2fgenesis_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// GenesisState

// .injective.exchange.v1beta1.Params params = 1 [json_name = "params", (.gogoproto.nullable) = false];
inline bool GenesisState::has_params() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.params_ != nullptr);
  return value;
}
inline const ::injective::exchange::v1beta1::Params& GenesisState::_internal_params() const {
  const ::injective::exchange::v1beta1::Params* p = _impl_.params_;
  return p != nullptr ? *p : reinterpret_cast<const ::injective::exchange::v1beta1::Params&>(
      ::injective::exchange::v1beta1::_Params_default_instance_);
}
inline const ::injective::exchange::v1beta1::Params& GenesisState::params() const {
  // @@protoc_insertion_point(field_get:injective.exchange.v1beta1.GenesisState.params)
  return _internal_params();
}
inline void GenesisState::unsafe_arena_set_allocated_params(
    ::injective::exchange::v1beta1::Params* params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.params_);
  }
  _impl_.params_ = params;
  if (params) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:injective.exchange.v1beta1.GenesisState.params)
}
inline ::injective::exchange::v1beta1::Params* GenesisState::release_params() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::injective::exchange::v1beta1::Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::injective::exchange::v1beta1::Params* GenesisState::unsafe_arena_release_params() {
  // @@protoc_insertion_point(field_release:injective.exchange.v1beta1.GenesisState.params)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::injective::exchange::v1beta1::Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
  return temp;
}
inline ::injective::exchange::v1beta1::Params* GenesisState::_internal_mutable_params() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.params_ == nullptr) {
    auto* p = CreateMaybeMessage<::injective::exchange::v1beta1::Params>(GetArenaForAllocation());
    _impl_.params_ = p;
  }
  return _impl_.params_;
}
inline ::injective::exchange::v1beta1::Params* GenesisState::mutable_params() {
  ::injective::exchange::v1beta1::Params* _msg = _internal_mutable_params();
  // @@protoc_insertion_point(field_mutable:injective.exchange.v1beta1.GenesisState.params)
  return _msg;
}
inline void GenesisState::set_allocated_params(::injective::exchange::v1beta1::Params* params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.params_);
  }
  if (params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(params));
    if (message_arena != submessage_arena) {
      params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, params, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.params_ = params;
  // @@protoc_insertion_point(field_set_allocated:injective.exchange.v1beta1.GenesisState.params)
}

// repeated .injective.exchange.v1beta1.SpotMarket spot_markets = 2 [json_name = "spotMarkets"];
inline int GenesisState::_internal_spot_markets_size() const {
  return _impl_.spot_markets_.size();
}
inline int GenesisState::spot_markets_size() const {
  return _internal_spot_markets_size();
}
inline ::injective::exchange::v1beta1::SpotMarket* GenesisState::mutable_spot_markets(int index) {
  // @@protoc_insertion_point(field_mutable:injective.exchange.v1beta1.GenesisState.spot_markets)
  return _internal_mutable_spot_markets()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::SpotMarket >*
GenesisState::mutable_spot_markets() {
  // @@protoc_insertion_point(field_mutable_list:injective.exchange.v1beta1.GenesisState.spot_markets)
  return _internal_mutable_spot_markets();
}
inline const ::injective::exchange::v1beta1::SpotMarket& GenesisState::_internal_spot_markets(int index) const {
  return _internal_spot_markets().Get(index);
}
inline const ::injective::exchange::v1beta1::SpotMarket& GenesisState::spot_markets(int index) const {
  // @@protoc_insertion_point(field_get:injective.exchange.v1beta1.GenesisState.spot_markets)
  return _internal_spot_markets(index);
}
inline ::injective::exchange::v1beta1::SpotMarket* GenesisState::_internal_add_spot_markets() {
  return _internal_mutable_spot_markets()->Add();
}
inline ::injective::exchange::v1beta1::SpotMarket* GenesisState::add_spot_markets() {
  ::injective::exchange::v1beta1::SpotMarket* _add = _internal_add_spot_markets();
  // @@protoc_insertion_point(field_add:injective.exchange.v1beta1.GenesisState.spot_markets)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::SpotMarket >&
GenesisState::spot_markets() const {
  // @@protoc_insertion_point(field_list:injective.exchange.v1beta1.GenesisState.spot_markets)
  return _internal_spot_markets();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::exchange::v1beta1::SpotMarket>&
GenesisState::_internal_spot_markets() const {
  return _impl_.spot_markets_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::exchange::v1beta1::SpotMarket>*
GenesisState::_internal_mutable_spot_markets() {
  return &_impl_.spot_markets_;
}

// repeated .injective.exchange.v1beta1.DerivativeMarket derivative_markets = 3 [json_name = "derivativeMarkets"];
inline int GenesisState::_internal_derivative_markets_size() const {
  return _impl_.derivative_markets_.size();
}
inline int GenesisState::derivative_markets_size() const {
  return _internal_derivative_markets_size();
}
inline ::injective::exchange::v1beta1::DerivativeMarket* GenesisState::mutable_derivative_markets(int index) {
  // @@protoc_insertion_point(field_mutable:injective.exchange.v1beta1.GenesisState.derivative_markets)
  return _internal_mutable_derivative_markets()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::DerivativeMarket >*
GenesisState::mutable_derivative_markets() {
  // @@protoc_insertion_point(field_mutable_list:injective.exchange.v1beta1.GenesisState.derivative_markets)
  return _internal_mutable_derivative_markets();
}
inline const ::injective::exchange::v1beta1::DerivativeMarket& GenesisState::_internal_derivative_markets(int index) const {
  return _internal_derivative_markets().Get(index);
}
inline const ::injective::exchange::v1beta1::DerivativeMarket& GenesisState::derivative_markets(int index) const {
  // @@protoc_insertion_point(field_get:injective.exchange.v1beta1.GenesisState.derivative_markets)
  return _internal_derivative_markets(index);
}
inline ::injective::exchange::v1beta1::DerivativeMarket* GenesisState::_internal_add_derivative_markets() {
  return _internal_mutable_derivative_markets()->Add();
}
inline ::injective::exchange::v1beta1::DerivativeMarket* GenesisState::add_derivative_markets() {
  ::injective::exchange::v1beta1::DerivativeMarket* _add = _internal_add_derivative_markets();
  // @@protoc_insertion_point(field_add:injective.exchange.v1beta1.GenesisState.derivative_markets)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::DerivativeMarket >&
GenesisState::derivative_markets() const {
  // @@protoc_insertion_point(field_list:injective.exchange.v1beta1.GenesisState.derivative_markets)
  return _internal_derivative_markets();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::exchange::v1beta1::DerivativeMarket>&
GenesisState::_internal_derivative_markets() const {
  return _impl_.derivative_markets_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::exchange::v1beta1::DerivativeMarket>*
GenesisState::_internal_mutable_derivative_markets() {
  return &_impl_.derivative_markets_;
}

// repeated .injective.exchange.v1beta1.SpotOrderBook spot_orderbook = 4 [json_name = "spotOrderbook", (.gogoproto.nullable) = false];
inline int GenesisState::_internal_spot_orderbook_size() const {
  return _impl_.spot_orderbook_.size();
}
inline int GenesisState::spot_orderbook_size() const {
  return _internal_spot_orderbook_size();
}
inline void GenesisState::clear_spot_orderbook() {
  _internal_mutable_spot_orderbook()->Clear();
}
inline ::injective::exchange::v1beta1::SpotOrderBook* GenesisState::mutable_spot_orderbook(int index) {
  // @@protoc_insertion_point(field_mutable:injective.exchange.v1beta1.GenesisState.spot_orderbook)
  return _internal_mutable_spot_orderbook()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::SpotOrderBook >*
GenesisState::mutable_spot_orderbook() {
  // @@protoc_insertion_point(field_mutable_list:injective.exchange.v1beta1.GenesisState.spot_orderbook)
  return _internal_mutable_spot_orderbook();
}
inline const ::injective::exchange::v1beta1::SpotOrderBook& GenesisState::_internal_spot_orderbook(int index) const {
  return _internal_spot_orderbook().Get(index);
}
inline const ::injective::exchange::v1beta1::SpotOrderBook& GenesisState::spot_orderbook(int index) const {
  // @@protoc_insertion_point(field_get:injective.exchange.v1beta1.GenesisState.spot_orderbook)
  return _internal_spot_orderbook(index);
}
inline ::injective::exchange::v1beta1::SpotOrderBook* GenesisState::_internal_add_spot_orderbook() {
  return _internal_mutable_spot_orderbook()->Add();
}
inline ::injective::exchange::v1beta1::SpotOrderBook* GenesisState::add_spot_orderbook() {
  ::injective::exchange::v1beta1::SpotOrderBook* _add = _internal_add_spot_orderbook();
  // @@protoc_insertion_point(field_add:injective.exchange.v1beta1.GenesisState.spot_orderbook)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::SpotOrderBook >&
GenesisState::spot_orderbook() const {
  // @@protoc_insertion_point(field_list:injective.exchange.v1beta1.GenesisState.spot_orderbook)
  return _internal_spot_orderbook();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::exchange::v1beta1::SpotOrderBook>&
GenesisState::_internal_spot_orderbook() const {
  return _impl_.spot_orderbook_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::exchange::v1beta1::SpotOrderBook>*
GenesisState::_internal_mutable_spot_orderbook() {
  return &_impl_.spot_orderbook_;
}

// repeated .injective.exchange.v1beta1.DerivativeOrderBook derivative_orderbook = 5 [json_name = "derivativeOrderbook", (.gogoproto.nullable) = false];
inline int GenesisState::_internal_derivative_orderbook_size() const {
  return _impl_.derivative_orderbook_.size();
}
inline int GenesisState::derivative_orderbook_size() const {
  return _internal_derivative_orderbook_size();
}
inline void GenesisState::clear_derivative_orderbook() {
  _internal_mutable_derivative_orderbook()->Clear();
}
inline ::injective::exchange::v1beta1::DerivativeOrderBook* GenesisState::mutable_derivative_orderbook(int index) {
  // @@protoc_insertion_point(field_mutable:injective.exchange.v1beta1.GenesisState.derivative_orderbook)
  return _internal_mutable_derivative_orderbook()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::DerivativeOrderBook >*
GenesisState::mutable_derivative_orderbook() {
  // @@protoc_insertion_point(field_mutable_list:injective.exchange.v1beta1.GenesisState.derivative_orderbook)
  return _internal_mutable_derivative_orderbook();
}
inline const ::injective::exchange::v1beta1::DerivativeOrderBook& GenesisState::_internal_derivative_orderbook(int index) const {
  return _internal_derivative_orderbook().Get(index);
}
inline const ::injective::exchange::v1beta1::DerivativeOrderBook& GenesisState::derivative_orderbook(int index) const {
  // @@protoc_insertion_point(field_get:injective.exchange.v1beta1.GenesisState.derivative_orderbook)
  return _internal_derivative_orderbook(index);
}
inline ::injective::exchange::v1beta1::DerivativeOrderBook* GenesisState::_internal_add_derivative_orderbook() {
  return _internal_mutable_derivative_orderbook()->Add();
}
inline ::injective::exchange::v1beta1::DerivativeOrderBook* GenesisState::add_derivative_orderbook() {
  ::injective::exchange::v1beta1::DerivativeOrderBook* _add = _internal_add_derivative_orderbook();
  // @@protoc_insertion_point(field_add:injective.exchange.v1beta1.GenesisState.derivative_orderbook)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::DerivativeOrderBook >&
GenesisState::derivative_orderbook() const {
  // @@protoc_insertion_point(field_list:injective.exchange.v1beta1.GenesisState.derivative_orderbook)
  return _internal_derivative_orderbook();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::exchange::v1beta1::DerivativeOrderBook>&
GenesisState::_internal_derivative_orderbook() const {
  return _impl_.derivative_orderbook_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::exchange::v1beta1::DerivativeOrderBook>*
GenesisState::_internal_mutable_derivative_orderbook() {
  return &_impl_.derivative_orderbook_;
}

// repeated .injective.exchange.v1beta1.Balance balances = 6 [json_name = "balances", (.gogoproto.nullable) = false];
inline int GenesisState::_internal_balances_size() const {
  return _impl_.balances_.size();
}
inline int GenesisState::balances_size() const {
  return _internal_balances_size();
}
inline void GenesisState::clear_balances() {
  _internal_mutable_balances()->Clear();
}
inline ::injective::exchange::v1beta1::Balance* GenesisState::mutable_balances(int index) {
  // @@protoc_insertion_point(field_mutable:injective.exchange.v1beta1.GenesisState.balances)
  return _internal_mutable_balances()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::Balance >*
GenesisState::mutable_balances() {
  // @@protoc_insertion_point(field_mutable_list:injective.exchange.v1beta1.GenesisState.balances)
  return _internal_mutable_balances();
}
inline const ::injective::exchange::v1beta1::Balance& GenesisState::_internal_balances(int index) const {
  return _internal_balances().Get(index);
}
inline const ::injective::exchange::v1beta1::Balance& GenesisState::balances(int index) const {
  // @@protoc_insertion_point(field_get:injective.exchange.v1beta1.GenesisState.balances)
  return _internal_balances(index);
}
inline ::injective::exchange::v1beta1::Balance* GenesisState::_internal_add_balances() {
  return _internal_mutable_balances()->Add();
}
inline ::injective::exchange::v1beta1::Balance* GenesisState::add_balances() {
  ::injective::exchange::v1beta1::Balance* _add = _internal_add_balances();
  // @@protoc_insertion_point(field_add:injective.exchange.v1beta1.GenesisState.balances)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::Balance >&
GenesisState::balances() const {
  // @@protoc_insertion_point(field_list:injective.exchange.v1beta1.GenesisState.balances)
  return _internal_balances();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::exchange::v1beta1::Balance>&
GenesisState::_internal_balances() const {
  return _impl_.balances_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::exchange::v1beta1::Balance>*
GenesisState::_internal_mutable_balances() {
  return &_impl_.balances_;
}

// repeated .injective.exchange.v1beta1.DerivativePosition positions = 7 [json_name = "positions", (.gogoproto.nullable) = false];
inline int GenesisState::_internal_positions_size() const {
  return _impl_.positions_.size();
}
inline int GenesisState::positions_size() const {
  return _internal_positions_size();
}
inline void GenesisState::clear_positions() {
  _internal_mutable_positions()->Clear();
}
inline ::injective::exchange::v1beta1::DerivativePosition* GenesisState::mutable_positions(int index) {
  // @@protoc_insertion_point(field_mutable:injective.exchange.v1beta1.GenesisState.positions)
  return _internal_mutable_positions()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::DerivativePosition >*
GenesisState::mutable_positions() {
  // @@protoc_insertion_point(field_mutable_list:injective.exchange.v1beta1.GenesisState.positions)
  return _internal_mutable_positions();
}
inline const ::injective::exchange::v1beta1::DerivativePosition& GenesisState::_internal_positions(int index) const {
  return _internal_positions().Get(index);
}
inline const ::injective::exchange::v1beta1::DerivativePosition& GenesisState::positions(int index) const {
  // @@protoc_insertion_point(field_get:injective.exchange.v1beta1.GenesisState.positions)
  return _internal_positions(index);
}
inline ::injective::exchange::v1beta1::DerivativePosition* GenesisState::_internal_add_positions() {
  return _internal_mutable_positions()->Add();
}
inline ::injective::exchange::v1beta1::DerivativePosition* GenesisState::add_positions() {
  ::injective::exchange::v1beta1::DerivativePosition* _add = _internal_add_positions();
  // @@protoc_insertion_point(field_add:injective.exchange.v1beta1.GenesisState.positions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::DerivativePosition >&
GenesisState::positions() const {
  // @@protoc_insertion_point(field_list:injective.exchange.v1beta1.GenesisState.positions)
  return _internal_positions();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::exchange::v1beta1::DerivativePosition>&
GenesisState::_internal_positions() const {
  return _impl_.positions_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::exchange::v1beta1::DerivativePosition>*
GenesisState::_internal_mutable_positions() {
  return &_impl_.positions_;
}

// repeated .injective.exchange.v1beta1.SubaccountNonce subaccount_trade_nonces = 8 [json_name = "subaccountTradeNonces", (.gogoproto.nullable) = false];
inline int GenesisState::_internal_subaccount_trade_nonces_size() const {
  return _impl_.subaccount_trade_nonces_.size();
}
inline int GenesisState::subaccount_trade_nonces_size() const {
  return _internal_subaccount_trade_nonces_size();
}
inline void GenesisState::clear_subaccount_trade_nonces() {
  _internal_mutable_subaccount_trade_nonces()->Clear();
}
inline ::injective::exchange::v1beta1::SubaccountNonce* GenesisState::mutable_subaccount_trade_nonces(int index) {
  // @@protoc_insertion_point(field_mutable:injective.exchange.v1beta1.GenesisState.subaccount_trade_nonces)
  return _internal_mutable_subaccount_trade_nonces()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::SubaccountNonce >*
GenesisState::mutable_subaccount_trade_nonces() {
  // @@protoc_insertion_point(field_mutable_list:injective.exchange.v1beta1.GenesisState.subaccount_trade_nonces)
  return _internal_mutable_subaccount_trade_nonces();
}
inline const ::injective::exchange::v1beta1::SubaccountNonce& GenesisState::_internal_subaccount_trade_nonces(int index) const {
  return _internal_subaccount_trade_nonces().Get(index);
}
inline const ::injective::exchange::v1beta1::SubaccountNonce& GenesisState::subaccount_trade_nonces(int index) const {
  // @@protoc_insertion_point(field_get:injective.exchange.v1beta1.GenesisState.subaccount_trade_nonces)
  return _internal_subaccount_trade_nonces(index);
}
inline ::injective::exchange::v1beta1::SubaccountNonce* GenesisState::_internal_add_subaccount_trade_nonces() {
  return _internal_mutable_subaccount_trade_nonces()->Add();
}
inline ::injective::exchange::v1beta1::SubaccountNonce* GenesisState::add_subaccount_trade_nonces() {
  ::injective::exchange::v1beta1::SubaccountNonce* _add = _internal_add_subaccount_trade_nonces();
  // @@protoc_insertion_point(field_add:injective.exchange.v1beta1.GenesisState.subaccount_trade_nonces)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::SubaccountNonce >&
GenesisState::subaccount_trade_nonces() const {
  // @@protoc_insertion_point(field_list:injective.exchange.v1beta1.GenesisState.subaccount_trade_nonces)
  return _internal_subaccount_trade_nonces();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::exchange::v1beta1::SubaccountNonce>&
GenesisState::_internal_subaccount_trade_nonces() const {
  return _impl_.subaccount_trade_nonces_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::exchange::v1beta1::SubaccountNonce>*
GenesisState::_internal_mutable_subaccount_trade_nonces() {
  return &_impl_.subaccount_trade_nonces_;
}

// repeated .injective.exchange.v1beta1.ExpiryFuturesMarketInfoState expiry_futures_market_info_state = 9 [json_name = "expiryFuturesMarketInfoState", (.gogoproto.nullable) = false];
inline int GenesisState::_internal_expiry_futures_market_info_state_size() const {
  return _impl_.expiry_futures_market_info_state_.size();
}
inline int GenesisState::expiry_futures_market_info_state_size() const {
  return _internal_expiry_futures_market_info_state_size();
}
inline void GenesisState::clear_expiry_futures_market_info_state() {
  _internal_mutable_expiry_futures_market_info_state()->Clear();
}
inline ::injective::exchange::v1beta1::ExpiryFuturesMarketInfoState* GenesisState::mutable_expiry_futures_market_info_state(int index) {
  // @@protoc_insertion_point(field_mutable:injective.exchange.v1beta1.GenesisState.expiry_futures_market_info_state)
  return _internal_mutable_expiry_futures_market_info_state()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::ExpiryFuturesMarketInfoState >*
GenesisState::mutable_expiry_futures_market_info_state() {
  // @@protoc_insertion_point(field_mutable_list:injective.exchange.v1beta1.GenesisState.expiry_futures_market_info_state)
  return _internal_mutable_expiry_futures_market_info_state();
}
inline const ::injective::exchange::v1beta1::ExpiryFuturesMarketInfoState& GenesisState::_internal_expiry_futures_market_info_state(int index) const {
  return _internal_expiry_futures_market_info_state().Get(index);
}
inline const ::injective::exchange::v1beta1::ExpiryFuturesMarketInfoState& GenesisState::expiry_futures_market_info_state(int index) const {
  // @@protoc_insertion_point(field_get:injective.exchange.v1beta1.GenesisState.expiry_futures_market_info_state)
  return _internal_expiry_futures_market_info_state(index);
}
inline ::injective::exchange::v1beta1::ExpiryFuturesMarketInfoState* GenesisState::_internal_add_expiry_futures_market_info_state() {
  return _internal_mutable_expiry_futures_market_info_state()->Add();
}
inline ::injective::exchange::v1beta1::ExpiryFuturesMarketInfoState* GenesisState::add_expiry_futures_market_info_state() {
  ::injective::exchange::v1beta1::ExpiryFuturesMarketInfoState* _add = _internal_add_expiry_futures_market_info_state();
  // @@protoc_insertion_point(field_add:injective.exchange.v1beta1.GenesisState.expiry_futures_market_info_state)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::ExpiryFuturesMarketInfoState >&
GenesisState::expiry_futures_market_info_state() const {
  // @@protoc_insertion_point(field_list:injective.exchange.v1beta1.GenesisState.expiry_futures_market_info_state)
  return _internal_expiry_futures_market_info_state();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::exchange::v1beta1::ExpiryFuturesMarketInfoState>&
GenesisState::_internal_expiry_futures_market_info_state() const {
  return _impl_.expiry_futures_market_info_state_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::exchange::v1beta1::ExpiryFuturesMarketInfoState>*
GenesisState::_internal_mutable_expiry_futures_market_info_state() {
  return &_impl_.expiry_futures_market_info_state_;
}

// repeated .injective.exchange.v1beta1.PerpetualMarketInfo perpetual_market_info = 10 [json_name = "perpetualMarketInfo", (.gogoproto.nullable) = false];
inline int GenesisState::_internal_perpetual_market_info_size() const {
  return _impl_.perpetual_market_info_.size();
}
inline int GenesisState::perpetual_market_info_size() const {
  return _internal_perpetual_market_info_size();
}
inline ::injective::exchange::v1beta1::PerpetualMarketInfo* GenesisState::mutable_perpetual_market_info(int index) {
  // @@protoc_insertion_point(field_mutable:injective.exchange.v1beta1.GenesisState.perpetual_market_info)
  return _internal_mutable_perpetual_market_info()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::PerpetualMarketInfo >*
GenesisState::mutable_perpetual_market_info() {
  // @@protoc_insertion_point(field_mutable_list:injective.exchange.v1beta1.GenesisState.perpetual_market_info)
  return _internal_mutable_perpetual_market_info();
}
inline const ::injective::exchange::v1beta1::PerpetualMarketInfo& GenesisState::_internal_perpetual_market_info(int index) const {
  return _internal_perpetual_market_info().Get(index);
}
inline const ::injective::exchange::v1beta1::PerpetualMarketInfo& GenesisState::perpetual_market_info(int index) const {
  // @@protoc_insertion_point(field_get:injective.exchange.v1beta1.GenesisState.perpetual_market_info)
  return _internal_perpetual_market_info(index);
}
inline ::injective::exchange::v1beta1::PerpetualMarketInfo* GenesisState::_internal_add_perpetual_market_info() {
  return _internal_mutable_perpetual_market_info()->Add();
}
inline ::injective::exchange::v1beta1::PerpetualMarketInfo* GenesisState::add_perpetual_market_info() {
  ::injective::exchange::v1beta1::PerpetualMarketInfo* _add = _internal_add_perpetual_market_info();
  // @@protoc_insertion_point(field_add:injective.exchange.v1beta1.GenesisState.perpetual_market_info)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::PerpetualMarketInfo >&
GenesisState::perpetual_market_info() const {
  // @@protoc_insertion_point(field_list:injective.exchange.v1beta1.GenesisState.perpetual_market_info)
  return _internal_perpetual_market_info();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::exchange::v1beta1::PerpetualMarketInfo>&
GenesisState::_internal_perpetual_market_info() const {
  return _impl_.perpetual_market_info_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::exchange::v1beta1::PerpetualMarketInfo>*
GenesisState::_internal_mutable_perpetual_market_info() {
  return &_impl_.perpetual_market_info_;
}

// repeated .injective.exchange.v1beta1.PerpetualMarketFundingState perpetual_market_funding_state = 11 [json_name = "perpetualMarketFundingState", (.gogoproto.nullable) = false];
inline int GenesisState::_internal_perpetual_market_funding_state_size() const {
  return _impl_.perpetual_market_funding_state_.size();
}
inline int GenesisState::perpetual_market_funding_state_size() const {
  return _internal_perpetual_market_funding_state_size();
}
inline void GenesisState::clear_perpetual_market_funding_state() {
  _internal_mutable_perpetual_market_funding_state()->Clear();
}
inline ::injective::exchange::v1beta1::PerpetualMarketFundingState* GenesisState::mutable_perpetual_market_funding_state(int index) {
  // @@protoc_insertion_point(field_mutable:injective.exchange.v1beta1.GenesisState.perpetual_market_funding_state)
  return _internal_mutable_perpetual_market_funding_state()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::PerpetualMarketFundingState >*
GenesisState::mutable_perpetual_market_funding_state() {
  // @@protoc_insertion_point(field_mutable_list:injective.exchange.v1beta1.GenesisState.perpetual_market_funding_state)
  return _internal_mutable_perpetual_market_funding_state();
}
inline const ::injective::exchange::v1beta1::PerpetualMarketFundingState& GenesisState::_internal_perpetual_market_funding_state(int index) const {
  return _internal_perpetual_market_funding_state().Get(index);
}
inline const ::injective::exchange::v1beta1::PerpetualMarketFundingState& GenesisState::perpetual_market_funding_state(int index) const {
  // @@protoc_insertion_point(field_get:injective.exchange.v1beta1.GenesisState.perpetual_market_funding_state)
  return _internal_perpetual_market_funding_state(index);
}
inline ::injective::exchange::v1beta1::PerpetualMarketFundingState* GenesisState::_internal_add_perpetual_market_funding_state() {
  return _internal_mutable_perpetual_market_funding_state()->Add();
}
inline ::injective::exchange::v1beta1::PerpetualMarketFundingState* GenesisState::add_perpetual_market_funding_state() {
  ::injective::exchange::v1beta1::PerpetualMarketFundingState* _add = _internal_add_perpetual_market_funding_state();
  // @@protoc_insertion_point(field_add:injective.exchange.v1beta1.GenesisState.perpetual_market_funding_state)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::PerpetualMarketFundingState >&
GenesisState::perpetual_market_funding_state() const {
  // @@protoc_insertion_point(field_list:injective.exchange.v1beta1.GenesisState.perpetual_market_funding_state)
  return _internal_perpetual_market_funding_state();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::exchange::v1beta1::PerpetualMarketFundingState>&
GenesisState::_internal_perpetual_market_funding_state() const {
  return _impl_.perpetual_market_funding_state_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::exchange::v1beta1::PerpetualMarketFundingState>*
GenesisState::_internal_mutable_perpetual_market_funding_state() {
  return &_impl_.perpetual_market_funding_state_;
}

// repeated .injective.exchange.v1beta1.DerivativeMarketSettlementInfo derivative_market_settlement_scheduled = 12 [json_name = "derivativeMarketSettlementScheduled", (.gogoproto.nullable) = false];
inline int GenesisState::_internal_derivative_market_settlement_scheduled_size() const {
  return _impl_.derivative_market_settlement_scheduled_.size();
}
inline int GenesisState::derivative_market_settlement_scheduled_size() const {
  return _internal_derivative_market_settlement_scheduled_size();
}
inline ::injective::exchange::v1beta1::DerivativeMarketSettlementInfo* GenesisState::mutable_derivative_market_settlement_scheduled(int index) {
  // @@protoc_insertion_point(field_mutable:injective.exchange.v1beta1.GenesisState.derivative_market_settlement_scheduled)
  return _internal_mutable_derivative_market_settlement_scheduled()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::DerivativeMarketSettlementInfo >*
GenesisState::mutable_derivative_market_settlement_scheduled() {
  // @@protoc_insertion_point(field_mutable_list:injective.exchange.v1beta1.GenesisState.derivative_market_settlement_scheduled)
  return _internal_mutable_derivative_market_settlement_scheduled();
}
inline const ::injective::exchange::v1beta1::DerivativeMarketSettlementInfo& GenesisState::_internal_derivative_market_settlement_scheduled(int index) const {
  return _internal_derivative_market_settlement_scheduled().Get(index);
}
inline const ::injective::exchange::v1beta1::DerivativeMarketSettlementInfo& GenesisState::derivative_market_settlement_scheduled(int index) const {
  // @@protoc_insertion_point(field_get:injective.exchange.v1beta1.GenesisState.derivative_market_settlement_scheduled)
  return _internal_derivative_market_settlement_scheduled(index);
}
inline ::injective::exchange::v1beta1::DerivativeMarketSettlementInfo* GenesisState::_internal_add_derivative_market_settlement_scheduled() {
  return _internal_mutable_derivative_market_settlement_scheduled()->Add();
}
inline ::injective::exchange::v1beta1::DerivativeMarketSettlementInfo* GenesisState::add_derivative_market_settlement_scheduled() {
  ::injective::exchange::v1beta1::DerivativeMarketSettlementInfo* _add = _internal_add_derivative_market_settlement_scheduled();
  // @@protoc_insertion_point(field_add:injective.exchange.v1beta1.GenesisState.derivative_market_settlement_scheduled)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::DerivativeMarketSettlementInfo >&
GenesisState::derivative_market_settlement_scheduled() const {
  // @@protoc_insertion_point(field_list:injective.exchange.v1beta1.GenesisState.derivative_market_settlement_scheduled)
  return _internal_derivative_market_settlement_scheduled();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::exchange::v1beta1::DerivativeMarketSettlementInfo>&
GenesisState::_internal_derivative_market_settlement_scheduled() const {
  return _impl_.derivative_market_settlement_scheduled_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::exchange::v1beta1::DerivativeMarketSettlementInfo>*
GenesisState::_internal_mutable_derivative_market_settlement_scheduled() {
  return &_impl_.derivative_market_settlement_scheduled_;
}

// bool is_spot_exchange_enabled = 13 [json_name = "isSpotExchangeEnabled"];
inline void GenesisState::clear_is_spot_exchange_enabled() {
  _impl_.is_spot_exchange_enabled_ = false;
}
inline bool GenesisState::is_spot_exchange_enabled() const {
  // @@protoc_insertion_point(field_get:injective.exchange.v1beta1.GenesisState.is_spot_exchange_enabled)
  return _internal_is_spot_exchange_enabled();
}
inline void GenesisState::set_is_spot_exchange_enabled(bool value) {
  _internal_set_is_spot_exchange_enabled(value);
  // @@protoc_insertion_point(field_set:injective.exchange.v1beta1.GenesisState.is_spot_exchange_enabled)
}
inline bool GenesisState::_internal_is_spot_exchange_enabled() const {
  return _impl_.is_spot_exchange_enabled_;
}
inline void GenesisState::_internal_set_is_spot_exchange_enabled(bool value) {
  ;
  _impl_.is_spot_exchange_enabled_ = value;
}

// bool is_derivatives_exchange_enabled = 14 [json_name = "isDerivativesExchangeEnabled"];
inline void GenesisState::clear_is_derivatives_exchange_enabled() {
  _impl_.is_derivatives_exchange_enabled_ = false;
}
inline bool GenesisState::is_derivatives_exchange_enabled() const {
  // @@protoc_insertion_point(field_get:injective.exchange.v1beta1.GenesisState.is_derivatives_exchange_enabled)
  return _internal_is_derivatives_exchange_enabled();
}
inline void GenesisState::set_is_derivatives_exchange_enabled(bool value) {
  _internal_set_is_derivatives_exchange_enabled(value);
  // @@protoc_insertion_point(field_set:injective.exchange.v1beta1.GenesisState.is_derivatives_exchange_enabled)
}
inline bool GenesisState::_internal_is_derivatives_exchange_enabled() const {
  return _impl_.is_derivatives_exchange_enabled_;
}
inline void GenesisState::_internal_set_is_derivatives_exchange_enabled(bool value) {
  ;
  _impl_.is_derivatives_exchange_enabled_ = value;
}

// .injective.exchange.v1beta1.TradingRewardCampaignInfo trading_reward_campaign_info = 15 [json_name = "tradingRewardCampaignInfo"];
inline bool GenesisState::has_trading_reward_campaign_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.trading_reward_campaign_info_ != nullptr);
  return value;
}
inline const ::injective::exchange::v1beta1::TradingRewardCampaignInfo& GenesisState::_internal_trading_reward_campaign_info() const {
  const ::injective::exchange::v1beta1::TradingRewardCampaignInfo* p = _impl_.trading_reward_campaign_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::injective::exchange::v1beta1::TradingRewardCampaignInfo&>(
      ::injective::exchange::v1beta1::_TradingRewardCampaignInfo_default_instance_);
}
inline const ::injective::exchange::v1beta1::TradingRewardCampaignInfo& GenesisState::trading_reward_campaign_info() const {
  // @@protoc_insertion_point(field_get:injective.exchange.v1beta1.GenesisState.trading_reward_campaign_info)
  return _internal_trading_reward_campaign_info();
}
inline void GenesisState::unsafe_arena_set_allocated_trading_reward_campaign_info(
    ::injective::exchange::v1beta1::TradingRewardCampaignInfo* trading_reward_campaign_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.trading_reward_campaign_info_);
  }
  _impl_.trading_reward_campaign_info_ = trading_reward_campaign_info;
  if (trading_reward_campaign_info) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:injective.exchange.v1beta1.GenesisState.trading_reward_campaign_info)
}
inline ::injective::exchange::v1beta1::TradingRewardCampaignInfo* GenesisState::release_trading_reward_campaign_info() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::injective::exchange::v1beta1::TradingRewardCampaignInfo* temp = _impl_.trading_reward_campaign_info_;
  _impl_.trading_reward_campaign_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::injective::exchange::v1beta1::TradingRewardCampaignInfo* GenesisState::unsafe_arena_release_trading_reward_campaign_info() {
  // @@protoc_insertion_point(field_release:injective.exchange.v1beta1.GenesisState.trading_reward_campaign_info)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::injective::exchange::v1beta1::TradingRewardCampaignInfo* temp = _impl_.trading_reward_campaign_info_;
  _impl_.trading_reward_campaign_info_ = nullptr;
  return temp;
}
inline ::injective::exchange::v1beta1::TradingRewardCampaignInfo* GenesisState::_internal_mutable_trading_reward_campaign_info() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.trading_reward_campaign_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::injective::exchange::v1beta1::TradingRewardCampaignInfo>(GetArenaForAllocation());
    _impl_.trading_reward_campaign_info_ = p;
  }
  return _impl_.trading_reward_campaign_info_;
}
inline ::injective::exchange::v1beta1::TradingRewardCampaignInfo* GenesisState::mutable_trading_reward_campaign_info() {
  ::injective::exchange::v1beta1::TradingRewardCampaignInfo* _msg = _internal_mutable_trading_reward_campaign_info();
  // @@protoc_insertion_point(field_mutable:injective.exchange.v1beta1.GenesisState.trading_reward_campaign_info)
  return _msg;
}
inline void GenesisState::set_allocated_trading_reward_campaign_info(::injective::exchange::v1beta1::TradingRewardCampaignInfo* trading_reward_campaign_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.trading_reward_campaign_info_);
  }
  if (trading_reward_campaign_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(trading_reward_campaign_info));
    if (message_arena != submessage_arena) {
      trading_reward_campaign_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trading_reward_campaign_info, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.trading_reward_campaign_info_ = trading_reward_campaign_info;
  // @@protoc_insertion_point(field_set_allocated:injective.exchange.v1beta1.GenesisState.trading_reward_campaign_info)
}

// repeated .injective.exchange.v1beta1.CampaignRewardPool trading_reward_pool_campaign_schedule = 16 [json_name = "tradingRewardPoolCampaignSchedule"];
inline int GenesisState::_internal_trading_reward_pool_campaign_schedule_size() const {
  return _impl_.trading_reward_pool_campaign_schedule_.size();
}
inline int GenesisState::trading_reward_pool_campaign_schedule_size() const {
  return _internal_trading_reward_pool_campaign_schedule_size();
}
inline ::injective::exchange::v1beta1::CampaignRewardPool* GenesisState::mutable_trading_reward_pool_campaign_schedule(int index) {
  // @@protoc_insertion_point(field_mutable:injective.exchange.v1beta1.GenesisState.trading_reward_pool_campaign_schedule)
  return _internal_mutable_trading_reward_pool_campaign_schedule()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::CampaignRewardPool >*
GenesisState::mutable_trading_reward_pool_campaign_schedule() {
  // @@protoc_insertion_point(field_mutable_list:injective.exchange.v1beta1.GenesisState.trading_reward_pool_campaign_schedule)
  return _internal_mutable_trading_reward_pool_campaign_schedule();
}
inline const ::injective::exchange::v1beta1::CampaignRewardPool& GenesisState::_internal_trading_reward_pool_campaign_schedule(int index) const {
  return _internal_trading_reward_pool_campaign_schedule().Get(index);
}
inline const ::injective::exchange::v1beta1::CampaignRewardPool& GenesisState::trading_reward_pool_campaign_schedule(int index) const {
  // @@protoc_insertion_point(field_get:injective.exchange.v1beta1.GenesisState.trading_reward_pool_campaign_schedule)
  return _internal_trading_reward_pool_campaign_schedule(index);
}
inline ::injective::exchange::v1beta1::CampaignRewardPool* GenesisState::_internal_add_trading_reward_pool_campaign_schedule() {
  return _internal_mutable_trading_reward_pool_campaign_schedule()->Add();
}
inline ::injective::exchange::v1beta1::CampaignRewardPool* GenesisState::add_trading_reward_pool_campaign_schedule() {
  ::injective::exchange::v1beta1::CampaignRewardPool* _add = _internal_add_trading_reward_pool_campaign_schedule();
  // @@protoc_insertion_point(field_add:injective.exchange.v1beta1.GenesisState.trading_reward_pool_campaign_schedule)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::CampaignRewardPool >&
GenesisState::trading_reward_pool_campaign_schedule() const {
  // @@protoc_insertion_point(field_list:injective.exchange.v1beta1.GenesisState.trading_reward_pool_campaign_schedule)
  return _internal_trading_reward_pool_campaign_schedule();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::exchange::v1beta1::CampaignRewardPool>&
GenesisState::_internal_trading_reward_pool_campaign_schedule() const {
  return _impl_.trading_reward_pool_campaign_schedule_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::exchange::v1beta1::CampaignRewardPool>*
GenesisState::_internal_mutable_trading_reward_pool_campaign_schedule() {
  return &_impl_.trading_reward_pool_campaign_schedule_;
}

// repeated .injective.exchange.v1beta1.TradingRewardCampaignAccountPoints trading_reward_campaign_account_points = 17 [json_name = "tradingRewardCampaignAccountPoints"];
inline int GenesisState::_internal_trading_reward_campaign_account_points_size() const {
  return _impl_.trading_reward_campaign_account_points_.size();
}
inline int GenesisState::trading_reward_campaign_account_points_size() const {
  return _internal_trading_reward_campaign_account_points_size();
}
inline void GenesisState::clear_trading_reward_campaign_account_points() {
  _internal_mutable_trading_reward_campaign_account_points()->Clear();
}
inline ::injective::exchange::v1beta1::TradingRewardCampaignAccountPoints* GenesisState::mutable_trading_reward_campaign_account_points(int index) {
  // @@protoc_insertion_point(field_mutable:injective.exchange.v1beta1.GenesisState.trading_reward_campaign_account_points)
  return _internal_mutable_trading_reward_campaign_account_points()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::TradingRewardCampaignAccountPoints >*
GenesisState::mutable_trading_reward_campaign_account_points() {
  // @@protoc_insertion_point(field_mutable_list:injective.exchange.v1beta1.GenesisState.trading_reward_campaign_account_points)
  return _internal_mutable_trading_reward_campaign_account_points();
}
inline const ::injective::exchange::v1beta1::TradingRewardCampaignAccountPoints& GenesisState::_internal_trading_reward_campaign_account_points(int index) const {
  return _internal_trading_reward_campaign_account_points().Get(index);
}
inline const ::injective::exchange::v1beta1::TradingRewardCampaignAccountPoints& GenesisState::trading_reward_campaign_account_points(int index) const {
  // @@protoc_insertion_point(field_get:injective.exchange.v1beta1.GenesisState.trading_reward_campaign_account_points)
  return _internal_trading_reward_campaign_account_points(index);
}
inline ::injective::exchange::v1beta1::TradingRewardCampaignAccountPoints* GenesisState::_internal_add_trading_reward_campaign_account_points() {
  return _internal_mutable_trading_reward_campaign_account_points()->Add();
}
inline ::injective::exchange::v1beta1::TradingRewardCampaignAccountPoints* GenesisState::add_trading_reward_campaign_account_points() {
  ::injective::exchange::v1beta1::TradingRewardCampaignAccountPoints* _add = _internal_add_trading_reward_campaign_account_points();
  // @@protoc_insertion_point(field_add:injective.exchange.v1beta1.GenesisState.trading_reward_campaign_account_points)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::TradingRewardCampaignAccountPoints >&
GenesisState::trading_reward_campaign_account_points() const {
  // @@protoc_insertion_point(field_list:injective.exchange.v1beta1.GenesisState.trading_reward_campaign_account_points)
  return _internal_trading_reward_campaign_account_points();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::exchange::v1beta1::TradingRewardCampaignAccountPoints>&
GenesisState::_internal_trading_reward_campaign_account_points() const {
  return _impl_.trading_reward_campaign_account_points_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::exchange::v1beta1::TradingRewardCampaignAccountPoints>*
GenesisState::_internal_mutable_trading_reward_campaign_account_points() {
  return &_impl_.trading_reward_campaign_account_points_;
}

// .injective.exchange.v1beta1.FeeDiscountSchedule fee_discount_schedule = 18 [json_name = "feeDiscountSchedule"];
inline bool GenesisState::has_fee_discount_schedule() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.fee_discount_schedule_ != nullptr);
  return value;
}
inline const ::injective::exchange::v1beta1::FeeDiscountSchedule& GenesisState::_internal_fee_discount_schedule() const {
  const ::injective::exchange::v1beta1::FeeDiscountSchedule* p = _impl_.fee_discount_schedule_;
  return p != nullptr ? *p : reinterpret_cast<const ::injective::exchange::v1beta1::FeeDiscountSchedule&>(
      ::injective::exchange::v1beta1::_FeeDiscountSchedule_default_instance_);
}
inline const ::injective::exchange::v1beta1::FeeDiscountSchedule& GenesisState::fee_discount_schedule() const {
  // @@protoc_insertion_point(field_get:injective.exchange.v1beta1.GenesisState.fee_discount_schedule)
  return _internal_fee_discount_schedule();
}
inline void GenesisState::unsafe_arena_set_allocated_fee_discount_schedule(
    ::injective::exchange::v1beta1::FeeDiscountSchedule* fee_discount_schedule) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.fee_discount_schedule_);
  }
  _impl_.fee_discount_schedule_ = fee_discount_schedule;
  if (fee_discount_schedule) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:injective.exchange.v1beta1.GenesisState.fee_discount_schedule)
}
inline ::injective::exchange::v1beta1::FeeDiscountSchedule* GenesisState::release_fee_discount_schedule() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::injective::exchange::v1beta1::FeeDiscountSchedule* temp = _impl_.fee_discount_schedule_;
  _impl_.fee_discount_schedule_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::injective::exchange::v1beta1::FeeDiscountSchedule* GenesisState::unsafe_arena_release_fee_discount_schedule() {
  // @@protoc_insertion_point(field_release:injective.exchange.v1beta1.GenesisState.fee_discount_schedule)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::injective::exchange::v1beta1::FeeDiscountSchedule* temp = _impl_.fee_discount_schedule_;
  _impl_.fee_discount_schedule_ = nullptr;
  return temp;
}
inline ::injective::exchange::v1beta1::FeeDiscountSchedule* GenesisState::_internal_mutable_fee_discount_schedule() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.fee_discount_schedule_ == nullptr) {
    auto* p = CreateMaybeMessage<::injective::exchange::v1beta1::FeeDiscountSchedule>(GetArenaForAllocation());
    _impl_.fee_discount_schedule_ = p;
  }
  return _impl_.fee_discount_schedule_;
}
inline ::injective::exchange::v1beta1::FeeDiscountSchedule* GenesisState::mutable_fee_discount_schedule() {
  ::injective::exchange::v1beta1::FeeDiscountSchedule* _msg = _internal_mutable_fee_discount_schedule();
  // @@protoc_insertion_point(field_mutable:injective.exchange.v1beta1.GenesisState.fee_discount_schedule)
  return _msg;
}
inline void GenesisState::set_allocated_fee_discount_schedule(::injective::exchange::v1beta1::FeeDiscountSchedule* fee_discount_schedule) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.fee_discount_schedule_);
  }
  if (fee_discount_schedule) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fee_discount_schedule));
    if (message_arena != submessage_arena) {
      fee_discount_schedule = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fee_discount_schedule, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.fee_discount_schedule_ = fee_discount_schedule;
  // @@protoc_insertion_point(field_set_allocated:injective.exchange.v1beta1.GenesisState.fee_discount_schedule)
}

// repeated .injective.exchange.v1beta1.FeeDiscountAccountTierTTL fee_discount_account_tier_ttl = 19 [json_name = "feeDiscountAccountTierTtl"];
inline int GenesisState::_internal_fee_discount_account_tier_ttl_size() const {
  return _impl_.fee_discount_account_tier_ttl_.size();
}
inline int GenesisState::fee_discount_account_tier_ttl_size() const {
  return _internal_fee_discount_account_tier_ttl_size();
}
inline void GenesisState::clear_fee_discount_account_tier_ttl() {
  _internal_mutable_fee_discount_account_tier_ttl()->Clear();
}
inline ::injective::exchange::v1beta1::FeeDiscountAccountTierTTL* GenesisState::mutable_fee_discount_account_tier_ttl(int index) {
  // @@protoc_insertion_point(field_mutable:injective.exchange.v1beta1.GenesisState.fee_discount_account_tier_ttl)
  return _internal_mutable_fee_discount_account_tier_ttl()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::FeeDiscountAccountTierTTL >*
GenesisState::mutable_fee_discount_account_tier_ttl() {
  // @@protoc_insertion_point(field_mutable_list:injective.exchange.v1beta1.GenesisState.fee_discount_account_tier_ttl)
  return _internal_mutable_fee_discount_account_tier_ttl();
}
inline const ::injective::exchange::v1beta1::FeeDiscountAccountTierTTL& GenesisState::_internal_fee_discount_account_tier_ttl(int index) const {
  return _internal_fee_discount_account_tier_ttl().Get(index);
}
inline const ::injective::exchange::v1beta1::FeeDiscountAccountTierTTL& GenesisState::fee_discount_account_tier_ttl(int index) const {
  // @@protoc_insertion_point(field_get:injective.exchange.v1beta1.GenesisState.fee_discount_account_tier_ttl)
  return _internal_fee_discount_account_tier_ttl(index);
}
inline ::injective::exchange::v1beta1::FeeDiscountAccountTierTTL* GenesisState::_internal_add_fee_discount_account_tier_ttl() {
  return _internal_mutable_fee_discount_account_tier_ttl()->Add();
}
inline ::injective::exchange::v1beta1::FeeDiscountAccountTierTTL* GenesisState::add_fee_discount_account_tier_ttl() {
  ::injective::exchange::v1beta1::FeeDiscountAccountTierTTL* _add = _internal_add_fee_discount_account_tier_ttl();
  // @@protoc_insertion_point(field_add:injective.exchange.v1beta1.GenesisState.fee_discount_account_tier_ttl)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::FeeDiscountAccountTierTTL >&
GenesisState::fee_discount_account_tier_ttl() const {
  // @@protoc_insertion_point(field_list:injective.exchange.v1beta1.GenesisState.fee_discount_account_tier_ttl)
  return _internal_fee_discount_account_tier_ttl();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::exchange::v1beta1::FeeDiscountAccountTierTTL>&
GenesisState::_internal_fee_discount_account_tier_ttl() const {
  return _impl_.fee_discount_account_tier_ttl_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::exchange::v1beta1::FeeDiscountAccountTierTTL>*
GenesisState::_internal_mutable_fee_discount_account_tier_ttl() {
  return &_impl_.fee_discount_account_tier_ttl_;
}

// repeated .injective.exchange.v1beta1.FeeDiscountBucketVolumeAccounts fee_discount_bucket_volume_accounts = 20 [json_name = "feeDiscountBucketVolumeAccounts"];
inline int GenesisState::_internal_fee_discount_bucket_volume_accounts_size() const {
  return _impl_.fee_discount_bucket_volume_accounts_.size();
}
inline int GenesisState::fee_discount_bucket_volume_accounts_size() const {
  return _internal_fee_discount_bucket_volume_accounts_size();
}
inline void GenesisState::clear_fee_discount_bucket_volume_accounts() {
  _internal_mutable_fee_discount_bucket_volume_accounts()->Clear();
}
inline ::injective::exchange::v1beta1::FeeDiscountBucketVolumeAccounts* GenesisState::mutable_fee_discount_bucket_volume_accounts(int index) {
  // @@protoc_insertion_point(field_mutable:injective.exchange.v1beta1.GenesisState.fee_discount_bucket_volume_accounts)
  return _internal_mutable_fee_discount_bucket_volume_accounts()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::FeeDiscountBucketVolumeAccounts >*
GenesisState::mutable_fee_discount_bucket_volume_accounts() {
  // @@protoc_insertion_point(field_mutable_list:injective.exchange.v1beta1.GenesisState.fee_discount_bucket_volume_accounts)
  return _internal_mutable_fee_discount_bucket_volume_accounts();
}
inline const ::injective::exchange::v1beta1::FeeDiscountBucketVolumeAccounts& GenesisState::_internal_fee_discount_bucket_volume_accounts(int index) const {
  return _internal_fee_discount_bucket_volume_accounts().Get(index);
}
inline const ::injective::exchange::v1beta1::FeeDiscountBucketVolumeAccounts& GenesisState::fee_discount_bucket_volume_accounts(int index) const {
  // @@protoc_insertion_point(field_get:injective.exchange.v1beta1.GenesisState.fee_discount_bucket_volume_accounts)
  return _internal_fee_discount_bucket_volume_accounts(index);
}
inline ::injective::exchange::v1beta1::FeeDiscountBucketVolumeAccounts* GenesisState::_internal_add_fee_discount_bucket_volume_accounts() {
  return _internal_mutable_fee_discount_bucket_volume_accounts()->Add();
}
inline ::injective::exchange::v1beta1::FeeDiscountBucketVolumeAccounts* GenesisState::add_fee_discount_bucket_volume_accounts() {
  ::injective::exchange::v1beta1::FeeDiscountBucketVolumeAccounts* _add = _internal_add_fee_discount_bucket_volume_accounts();
  // @@protoc_insertion_point(field_add:injective.exchange.v1beta1.GenesisState.fee_discount_bucket_volume_accounts)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::FeeDiscountBucketVolumeAccounts >&
GenesisState::fee_discount_bucket_volume_accounts() const {
  // @@protoc_insertion_point(field_list:injective.exchange.v1beta1.GenesisState.fee_discount_bucket_volume_accounts)
  return _internal_fee_discount_bucket_volume_accounts();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::exchange::v1beta1::FeeDiscountBucketVolumeAccounts>&
GenesisState::_internal_fee_discount_bucket_volume_accounts() const {
  return _impl_.fee_discount_bucket_volume_accounts_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::exchange::v1beta1::FeeDiscountBucketVolumeAccounts>*
GenesisState::_internal_mutable_fee_discount_bucket_volume_accounts() {
  return &_impl_.fee_discount_bucket_volume_accounts_;
}

// bool is_first_fee_cycle_finished = 21 [json_name = "isFirstFeeCycleFinished"];
inline void GenesisState::clear_is_first_fee_cycle_finished() {
  _impl_.is_first_fee_cycle_finished_ = false;
}
inline bool GenesisState::is_first_fee_cycle_finished() const {
  // @@protoc_insertion_point(field_get:injective.exchange.v1beta1.GenesisState.is_first_fee_cycle_finished)
  return _internal_is_first_fee_cycle_finished();
}
inline void GenesisState::set_is_first_fee_cycle_finished(bool value) {
  _internal_set_is_first_fee_cycle_finished(value);
  // @@protoc_insertion_point(field_set:injective.exchange.v1beta1.GenesisState.is_first_fee_cycle_finished)
}
inline bool GenesisState::_internal_is_first_fee_cycle_finished() const {
  return _impl_.is_first_fee_cycle_finished_;
}
inline void GenesisState::_internal_set_is_first_fee_cycle_finished(bool value) {
  ;
  _impl_.is_first_fee_cycle_finished_ = value;
}

// repeated .injective.exchange.v1beta1.CampaignRewardPool pending_trading_reward_pool_campaign_schedule = 22 [json_name = "pendingTradingRewardPoolCampaignSchedule"];
inline int GenesisState::_internal_pending_trading_reward_pool_campaign_schedule_size() const {
  return _impl_.pending_trading_reward_pool_campaign_schedule_.size();
}
inline int GenesisState::pending_trading_reward_pool_campaign_schedule_size() const {
  return _internal_pending_trading_reward_pool_campaign_schedule_size();
}
inline ::injective::exchange::v1beta1::CampaignRewardPool* GenesisState::mutable_pending_trading_reward_pool_campaign_schedule(int index) {
  // @@protoc_insertion_point(field_mutable:injective.exchange.v1beta1.GenesisState.pending_trading_reward_pool_campaign_schedule)
  return _internal_mutable_pending_trading_reward_pool_campaign_schedule()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::CampaignRewardPool >*
GenesisState::mutable_pending_trading_reward_pool_campaign_schedule() {
  // @@protoc_insertion_point(field_mutable_list:injective.exchange.v1beta1.GenesisState.pending_trading_reward_pool_campaign_schedule)
  return _internal_mutable_pending_trading_reward_pool_campaign_schedule();
}
inline const ::injective::exchange::v1beta1::CampaignRewardPool& GenesisState::_internal_pending_trading_reward_pool_campaign_schedule(int index) const {
  return _internal_pending_trading_reward_pool_campaign_schedule().Get(index);
}
inline const ::injective::exchange::v1beta1::CampaignRewardPool& GenesisState::pending_trading_reward_pool_campaign_schedule(int index) const {
  // @@protoc_insertion_point(field_get:injective.exchange.v1beta1.GenesisState.pending_trading_reward_pool_campaign_schedule)
  return _internal_pending_trading_reward_pool_campaign_schedule(index);
}
inline ::injective::exchange::v1beta1::CampaignRewardPool* GenesisState::_internal_add_pending_trading_reward_pool_campaign_schedule() {
  return _internal_mutable_pending_trading_reward_pool_campaign_schedule()->Add();
}
inline ::injective::exchange::v1beta1::CampaignRewardPool* GenesisState::add_pending_trading_reward_pool_campaign_schedule() {
  ::injective::exchange::v1beta1::CampaignRewardPool* _add = _internal_add_pending_trading_reward_pool_campaign_schedule();
  // @@protoc_insertion_point(field_add:injective.exchange.v1beta1.GenesisState.pending_trading_reward_pool_campaign_schedule)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::CampaignRewardPool >&
GenesisState::pending_trading_reward_pool_campaign_schedule() const {
  // @@protoc_insertion_point(field_list:injective.exchange.v1beta1.GenesisState.pending_trading_reward_pool_campaign_schedule)
  return _internal_pending_trading_reward_pool_campaign_schedule();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::exchange::v1beta1::CampaignRewardPool>&
GenesisState::_internal_pending_trading_reward_pool_campaign_schedule() const {
  return _impl_.pending_trading_reward_pool_campaign_schedule_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::exchange::v1beta1::CampaignRewardPool>*
GenesisState::_internal_mutable_pending_trading_reward_pool_campaign_schedule() {
  return &_impl_.pending_trading_reward_pool_campaign_schedule_;
}

// repeated .injective.exchange.v1beta1.TradingRewardCampaignAccountPendingPoints pending_trading_reward_campaign_account_points = 23 [json_name = "pendingTradingRewardCampaignAccountPoints"];
inline int GenesisState::_internal_pending_trading_reward_campaign_account_points_size() const {
  return _impl_.pending_trading_reward_campaign_account_points_.size();
}
inline int GenesisState::pending_trading_reward_campaign_account_points_size() const {
  return _internal_pending_trading_reward_campaign_account_points_size();
}
inline void GenesisState::clear_pending_trading_reward_campaign_account_points() {
  _internal_mutable_pending_trading_reward_campaign_account_points()->Clear();
}
inline ::injective::exchange::v1beta1::TradingRewardCampaignAccountPendingPoints* GenesisState::mutable_pending_trading_reward_campaign_account_points(int index) {
  // @@protoc_insertion_point(field_mutable:injective.exchange.v1beta1.GenesisState.pending_trading_reward_campaign_account_points)
  return _internal_mutable_pending_trading_reward_campaign_account_points()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::TradingRewardCampaignAccountPendingPoints >*
GenesisState::mutable_pending_trading_reward_campaign_account_points() {
  // @@protoc_insertion_point(field_mutable_list:injective.exchange.v1beta1.GenesisState.pending_trading_reward_campaign_account_points)
  return _internal_mutable_pending_trading_reward_campaign_account_points();
}
inline const ::injective::exchange::v1beta1::TradingRewardCampaignAccountPendingPoints& GenesisState::_internal_pending_trading_reward_campaign_account_points(int index) const {
  return _internal_pending_trading_reward_campaign_account_points().Get(index);
}
inline const ::injective::exchange::v1beta1::TradingRewardCampaignAccountPendingPoints& GenesisState::pending_trading_reward_campaign_account_points(int index) const {
  // @@protoc_insertion_point(field_get:injective.exchange.v1beta1.GenesisState.pending_trading_reward_campaign_account_points)
  return _internal_pending_trading_reward_campaign_account_points(index);
}
inline ::injective::exchange::v1beta1::TradingRewardCampaignAccountPendingPoints* GenesisState::_internal_add_pending_trading_reward_campaign_account_points() {
  return _internal_mutable_pending_trading_reward_campaign_account_points()->Add();
}
inline ::injective::exchange::v1beta1::TradingRewardCampaignAccountPendingPoints* GenesisState::add_pending_trading_reward_campaign_account_points() {
  ::injective::exchange::v1beta1::TradingRewardCampaignAccountPendingPoints* _add = _internal_add_pending_trading_reward_campaign_account_points();
  // @@protoc_insertion_point(field_add:injective.exchange.v1beta1.GenesisState.pending_trading_reward_campaign_account_points)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::TradingRewardCampaignAccountPendingPoints >&
GenesisState::pending_trading_reward_campaign_account_points() const {
  // @@protoc_insertion_point(field_list:injective.exchange.v1beta1.GenesisState.pending_trading_reward_campaign_account_points)
  return _internal_pending_trading_reward_campaign_account_points();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::exchange::v1beta1::TradingRewardCampaignAccountPendingPoints>&
GenesisState::_internal_pending_trading_reward_campaign_account_points() const {
  return _impl_.pending_trading_reward_campaign_account_points_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::exchange::v1beta1::TradingRewardCampaignAccountPendingPoints>*
GenesisState::_internal_mutable_pending_trading_reward_campaign_account_points() {
  return &_impl_.pending_trading_reward_campaign_account_points_;
}

// repeated string rewards_opt_out_addresses = 24 [json_name = "rewardsOptOutAddresses"];
inline int GenesisState::_internal_rewards_opt_out_addresses_size() const {
  return _impl_.rewards_opt_out_addresses_.size();
}
inline int GenesisState::rewards_opt_out_addresses_size() const {
  return _internal_rewards_opt_out_addresses_size();
}
inline void GenesisState::clear_rewards_opt_out_addresses() {
  _internal_mutable_rewards_opt_out_addresses()->Clear();
}
inline std::string* GenesisState::add_rewards_opt_out_addresses() {
  std::string* _s = _internal_add_rewards_opt_out_addresses();
  // @@protoc_insertion_point(field_add_mutable:injective.exchange.v1beta1.GenesisState.rewards_opt_out_addresses)
  return _s;
}
inline const std::string& GenesisState::rewards_opt_out_addresses(int index) const {
  // @@protoc_insertion_point(field_get:injective.exchange.v1beta1.GenesisState.rewards_opt_out_addresses)
  return _internal_rewards_opt_out_addresses(index);
}
inline std::string* GenesisState::mutable_rewards_opt_out_addresses(int index) {
  // @@protoc_insertion_point(field_mutable:injective.exchange.v1beta1.GenesisState.rewards_opt_out_addresses)
  return _internal_mutable_rewards_opt_out_addresses()->Mutable(index);
}
inline void GenesisState::set_rewards_opt_out_addresses(int index, const std::string& value) {
  _internal_mutable_rewards_opt_out_addresses()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:injective.exchange.v1beta1.GenesisState.rewards_opt_out_addresses)
}
inline void GenesisState::set_rewards_opt_out_addresses(int index, std::string&& value) {
  _internal_mutable_rewards_opt_out_addresses()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:injective.exchange.v1beta1.GenesisState.rewards_opt_out_addresses)
}
inline void GenesisState::set_rewards_opt_out_addresses(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_rewards_opt_out_addresses()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:injective.exchange.v1beta1.GenesisState.rewards_opt_out_addresses)
}
inline void GenesisState::set_rewards_opt_out_addresses(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_rewards_opt_out_addresses()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:injective.exchange.v1beta1.GenesisState.rewards_opt_out_addresses)
}
inline void GenesisState::set_rewards_opt_out_addresses(int index, absl::string_view value) {
  _internal_mutable_rewards_opt_out_addresses()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:injective.exchange.v1beta1.GenesisState.rewards_opt_out_addresses)
}
inline void GenesisState::add_rewards_opt_out_addresses(const std::string& value) {
  _internal_mutable_rewards_opt_out_addresses()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:injective.exchange.v1beta1.GenesisState.rewards_opt_out_addresses)
}
inline void GenesisState::add_rewards_opt_out_addresses(std::string&& value) {
  _internal_mutable_rewards_opt_out_addresses()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:injective.exchange.v1beta1.GenesisState.rewards_opt_out_addresses)
}
inline void GenesisState::add_rewards_opt_out_addresses(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_rewards_opt_out_addresses()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:injective.exchange.v1beta1.GenesisState.rewards_opt_out_addresses)
}
inline void GenesisState::add_rewards_opt_out_addresses(const char* value, std::size_t size) {
  _internal_mutable_rewards_opt_out_addresses()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:injective.exchange.v1beta1.GenesisState.rewards_opt_out_addresses)
}
inline void GenesisState::add_rewards_opt_out_addresses(absl::string_view value) {
  _internal_mutable_rewards_opt_out_addresses()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:injective.exchange.v1beta1.GenesisState.rewards_opt_out_addresses)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GenesisState::rewards_opt_out_addresses() const {
  // @@protoc_insertion_point(field_list:injective.exchange.v1beta1.GenesisState.rewards_opt_out_addresses)
  return _internal_rewards_opt_out_addresses();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* GenesisState::mutable_rewards_opt_out_addresses() {
  // @@protoc_insertion_point(field_mutable_list:injective.exchange.v1beta1.GenesisState.rewards_opt_out_addresses)
  return _internal_mutable_rewards_opt_out_addresses();
}
inline const std::string& GenesisState::_internal_rewards_opt_out_addresses(int index) const {
  return _internal_rewards_opt_out_addresses().Get(index);
}
inline std::string* GenesisState::_internal_add_rewards_opt_out_addresses() {
  return _internal_mutable_rewards_opt_out_addresses()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GenesisState::_internal_rewards_opt_out_addresses() const {
  return _impl_.rewards_opt_out_addresses_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GenesisState::_internal_mutable_rewards_opt_out_addresses() {
  return &_impl_.rewards_opt_out_addresses_;
}

// repeated .injective.exchange.v1beta1.TradeRecords historical_trade_records = 25 [json_name = "historicalTradeRecords"];
inline int GenesisState::_internal_historical_trade_records_size() const {
  return _impl_.historical_trade_records_.size();
}
inline int GenesisState::historical_trade_records_size() const {
  return _internal_historical_trade_records_size();
}
inline ::injective::exchange::v1beta1::TradeRecords* GenesisState::mutable_historical_trade_records(int index) {
  // @@protoc_insertion_point(field_mutable:injective.exchange.v1beta1.GenesisState.historical_trade_records)
  return _internal_mutable_historical_trade_records()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::TradeRecords >*
GenesisState::mutable_historical_trade_records() {
  // @@protoc_insertion_point(field_mutable_list:injective.exchange.v1beta1.GenesisState.historical_trade_records)
  return _internal_mutable_historical_trade_records();
}
inline const ::injective::exchange::v1beta1::TradeRecords& GenesisState::_internal_historical_trade_records(int index) const {
  return _internal_historical_trade_records().Get(index);
}
inline const ::injective::exchange::v1beta1::TradeRecords& GenesisState::historical_trade_records(int index) const {
  // @@protoc_insertion_point(field_get:injective.exchange.v1beta1.GenesisState.historical_trade_records)
  return _internal_historical_trade_records(index);
}
inline ::injective::exchange::v1beta1::TradeRecords* GenesisState::_internal_add_historical_trade_records() {
  return _internal_mutable_historical_trade_records()->Add();
}
inline ::injective::exchange::v1beta1::TradeRecords* GenesisState::add_historical_trade_records() {
  ::injective::exchange::v1beta1::TradeRecords* _add = _internal_add_historical_trade_records();
  // @@protoc_insertion_point(field_add:injective.exchange.v1beta1.GenesisState.historical_trade_records)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::TradeRecords >&
GenesisState::historical_trade_records() const {
  // @@protoc_insertion_point(field_list:injective.exchange.v1beta1.GenesisState.historical_trade_records)
  return _internal_historical_trade_records();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::exchange::v1beta1::TradeRecords>&
GenesisState::_internal_historical_trade_records() const {
  return _impl_.historical_trade_records_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::exchange::v1beta1::TradeRecords>*
GenesisState::_internal_mutable_historical_trade_records() {
  return &_impl_.historical_trade_records_;
}

// repeated .injective.exchange.v1beta1.BinaryOptionsMarket binary_options_markets = 26 [json_name = "binaryOptionsMarkets"];
inline int GenesisState::_internal_binary_options_markets_size() const {
  return _impl_.binary_options_markets_.size();
}
inline int GenesisState::binary_options_markets_size() const {
  return _internal_binary_options_markets_size();
}
inline ::injective::exchange::v1beta1::BinaryOptionsMarket* GenesisState::mutable_binary_options_markets(int index) {
  // @@protoc_insertion_point(field_mutable:injective.exchange.v1beta1.GenesisState.binary_options_markets)
  return _internal_mutable_binary_options_markets()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::BinaryOptionsMarket >*
GenesisState::mutable_binary_options_markets() {
  // @@protoc_insertion_point(field_mutable_list:injective.exchange.v1beta1.GenesisState.binary_options_markets)
  return _internal_mutable_binary_options_markets();
}
inline const ::injective::exchange::v1beta1::BinaryOptionsMarket& GenesisState::_internal_binary_options_markets(int index) const {
  return _internal_binary_options_markets().Get(index);
}
inline const ::injective::exchange::v1beta1::BinaryOptionsMarket& GenesisState::binary_options_markets(int index) const {
  // @@protoc_insertion_point(field_get:injective.exchange.v1beta1.GenesisState.binary_options_markets)
  return _internal_binary_options_markets(index);
}
inline ::injective::exchange::v1beta1::BinaryOptionsMarket* GenesisState::_internal_add_binary_options_markets() {
  return _internal_mutable_binary_options_markets()->Add();
}
inline ::injective::exchange::v1beta1::BinaryOptionsMarket* GenesisState::add_binary_options_markets() {
  ::injective::exchange::v1beta1::BinaryOptionsMarket* _add = _internal_add_binary_options_markets();
  // @@protoc_insertion_point(field_add:injective.exchange.v1beta1.GenesisState.binary_options_markets)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::BinaryOptionsMarket >&
GenesisState::binary_options_markets() const {
  // @@protoc_insertion_point(field_list:injective.exchange.v1beta1.GenesisState.binary_options_markets)
  return _internal_binary_options_markets();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::exchange::v1beta1::BinaryOptionsMarket>&
GenesisState::_internal_binary_options_markets() const {
  return _impl_.binary_options_markets_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::exchange::v1beta1::BinaryOptionsMarket>*
GenesisState::_internal_mutable_binary_options_markets() {
  return &_impl_.binary_options_markets_;
}

// repeated string binary_options_market_ids_scheduled_for_settlement = 27 [json_name = "binaryOptionsMarketIdsScheduledForSettlement"];
inline int GenesisState::_internal_binary_options_market_ids_scheduled_for_settlement_size() const {
  return _impl_.binary_options_market_ids_scheduled_for_settlement_.size();
}
inline int GenesisState::binary_options_market_ids_scheduled_for_settlement_size() const {
  return _internal_binary_options_market_ids_scheduled_for_settlement_size();
}
inline void GenesisState::clear_binary_options_market_ids_scheduled_for_settlement() {
  _internal_mutable_binary_options_market_ids_scheduled_for_settlement()->Clear();
}
inline std::string* GenesisState::add_binary_options_market_ids_scheduled_for_settlement() {
  std::string* _s = _internal_add_binary_options_market_ids_scheduled_for_settlement();
  // @@protoc_insertion_point(field_add_mutable:injective.exchange.v1beta1.GenesisState.binary_options_market_ids_scheduled_for_settlement)
  return _s;
}
inline const std::string& GenesisState::binary_options_market_ids_scheduled_for_settlement(int index) const {
  // @@protoc_insertion_point(field_get:injective.exchange.v1beta1.GenesisState.binary_options_market_ids_scheduled_for_settlement)
  return _internal_binary_options_market_ids_scheduled_for_settlement(index);
}
inline std::string* GenesisState::mutable_binary_options_market_ids_scheduled_for_settlement(int index) {
  // @@protoc_insertion_point(field_mutable:injective.exchange.v1beta1.GenesisState.binary_options_market_ids_scheduled_for_settlement)
  return _internal_mutable_binary_options_market_ids_scheduled_for_settlement()->Mutable(index);
}
inline void GenesisState::set_binary_options_market_ids_scheduled_for_settlement(int index, const std::string& value) {
  _internal_mutable_binary_options_market_ids_scheduled_for_settlement()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:injective.exchange.v1beta1.GenesisState.binary_options_market_ids_scheduled_for_settlement)
}
inline void GenesisState::set_binary_options_market_ids_scheduled_for_settlement(int index, std::string&& value) {
  _internal_mutable_binary_options_market_ids_scheduled_for_settlement()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:injective.exchange.v1beta1.GenesisState.binary_options_market_ids_scheduled_for_settlement)
}
inline void GenesisState::set_binary_options_market_ids_scheduled_for_settlement(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_binary_options_market_ids_scheduled_for_settlement()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:injective.exchange.v1beta1.GenesisState.binary_options_market_ids_scheduled_for_settlement)
}
inline void GenesisState::set_binary_options_market_ids_scheduled_for_settlement(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_binary_options_market_ids_scheduled_for_settlement()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:injective.exchange.v1beta1.GenesisState.binary_options_market_ids_scheduled_for_settlement)
}
inline void GenesisState::set_binary_options_market_ids_scheduled_for_settlement(int index, absl::string_view value) {
  _internal_mutable_binary_options_market_ids_scheduled_for_settlement()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:injective.exchange.v1beta1.GenesisState.binary_options_market_ids_scheduled_for_settlement)
}
inline void GenesisState::add_binary_options_market_ids_scheduled_for_settlement(const std::string& value) {
  _internal_mutable_binary_options_market_ids_scheduled_for_settlement()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:injective.exchange.v1beta1.GenesisState.binary_options_market_ids_scheduled_for_settlement)
}
inline void GenesisState::add_binary_options_market_ids_scheduled_for_settlement(std::string&& value) {
  _internal_mutable_binary_options_market_ids_scheduled_for_settlement()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:injective.exchange.v1beta1.GenesisState.binary_options_market_ids_scheduled_for_settlement)
}
inline void GenesisState::add_binary_options_market_ids_scheduled_for_settlement(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_binary_options_market_ids_scheduled_for_settlement()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:injective.exchange.v1beta1.GenesisState.binary_options_market_ids_scheduled_for_settlement)
}
inline void GenesisState::add_binary_options_market_ids_scheduled_for_settlement(const char* value, std::size_t size) {
  _internal_mutable_binary_options_market_ids_scheduled_for_settlement()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:injective.exchange.v1beta1.GenesisState.binary_options_market_ids_scheduled_for_settlement)
}
inline void GenesisState::add_binary_options_market_ids_scheduled_for_settlement(absl::string_view value) {
  _internal_mutable_binary_options_market_ids_scheduled_for_settlement()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:injective.exchange.v1beta1.GenesisState.binary_options_market_ids_scheduled_for_settlement)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GenesisState::binary_options_market_ids_scheduled_for_settlement() const {
  // @@protoc_insertion_point(field_list:injective.exchange.v1beta1.GenesisState.binary_options_market_ids_scheduled_for_settlement)
  return _internal_binary_options_market_ids_scheduled_for_settlement();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* GenesisState::mutable_binary_options_market_ids_scheduled_for_settlement() {
  // @@protoc_insertion_point(field_mutable_list:injective.exchange.v1beta1.GenesisState.binary_options_market_ids_scheduled_for_settlement)
  return _internal_mutable_binary_options_market_ids_scheduled_for_settlement();
}
inline const std::string& GenesisState::_internal_binary_options_market_ids_scheduled_for_settlement(int index) const {
  return _internal_binary_options_market_ids_scheduled_for_settlement().Get(index);
}
inline std::string* GenesisState::_internal_add_binary_options_market_ids_scheduled_for_settlement() {
  return _internal_mutable_binary_options_market_ids_scheduled_for_settlement()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GenesisState::_internal_binary_options_market_ids_scheduled_for_settlement() const {
  return _impl_.binary_options_market_ids_scheduled_for_settlement_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GenesisState::_internal_mutable_binary_options_market_ids_scheduled_for_settlement() {
  return &_impl_.binary_options_market_ids_scheduled_for_settlement_;
}

// repeated string spot_market_ids_scheduled_to_force_close = 28 [json_name = "spotMarketIdsScheduledToForceClose"];
inline int GenesisState::_internal_spot_market_ids_scheduled_to_force_close_size() const {
  return _impl_.spot_market_ids_scheduled_to_force_close_.size();
}
inline int GenesisState::spot_market_ids_scheduled_to_force_close_size() const {
  return _internal_spot_market_ids_scheduled_to_force_close_size();
}
inline void GenesisState::clear_spot_market_ids_scheduled_to_force_close() {
  _internal_mutable_spot_market_ids_scheduled_to_force_close()->Clear();
}
inline std::string* GenesisState::add_spot_market_ids_scheduled_to_force_close() {
  std::string* _s = _internal_add_spot_market_ids_scheduled_to_force_close();
  // @@protoc_insertion_point(field_add_mutable:injective.exchange.v1beta1.GenesisState.spot_market_ids_scheduled_to_force_close)
  return _s;
}
inline const std::string& GenesisState::spot_market_ids_scheduled_to_force_close(int index) const {
  // @@protoc_insertion_point(field_get:injective.exchange.v1beta1.GenesisState.spot_market_ids_scheduled_to_force_close)
  return _internal_spot_market_ids_scheduled_to_force_close(index);
}
inline std::string* GenesisState::mutable_spot_market_ids_scheduled_to_force_close(int index) {
  // @@protoc_insertion_point(field_mutable:injective.exchange.v1beta1.GenesisState.spot_market_ids_scheduled_to_force_close)
  return _internal_mutable_spot_market_ids_scheduled_to_force_close()->Mutable(index);
}
inline void GenesisState::set_spot_market_ids_scheduled_to_force_close(int index, const std::string& value) {
  _internal_mutable_spot_market_ids_scheduled_to_force_close()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:injective.exchange.v1beta1.GenesisState.spot_market_ids_scheduled_to_force_close)
}
inline void GenesisState::set_spot_market_ids_scheduled_to_force_close(int index, std::string&& value) {
  _internal_mutable_spot_market_ids_scheduled_to_force_close()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:injective.exchange.v1beta1.GenesisState.spot_market_ids_scheduled_to_force_close)
}
inline void GenesisState::set_spot_market_ids_scheduled_to_force_close(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_spot_market_ids_scheduled_to_force_close()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:injective.exchange.v1beta1.GenesisState.spot_market_ids_scheduled_to_force_close)
}
inline void GenesisState::set_spot_market_ids_scheduled_to_force_close(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_spot_market_ids_scheduled_to_force_close()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:injective.exchange.v1beta1.GenesisState.spot_market_ids_scheduled_to_force_close)
}
inline void GenesisState::set_spot_market_ids_scheduled_to_force_close(int index, absl::string_view value) {
  _internal_mutable_spot_market_ids_scheduled_to_force_close()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:injective.exchange.v1beta1.GenesisState.spot_market_ids_scheduled_to_force_close)
}
inline void GenesisState::add_spot_market_ids_scheduled_to_force_close(const std::string& value) {
  _internal_mutable_spot_market_ids_scheduled_to_force_close()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:injective.exchange.v1beta1.GenesisState.spot_market_ids_scheduled_to_force_close)
}
inline void GenesisState::add_spot_market_ids_scheduled_to_force_close(std::string&& value) {
  _internal_mutable_spot_market_ids_scheduled_to_force_close()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:injective.exchange.v1beta1.GenesisState.spot_market_ids_scheduled_to_force_close)
}
inline void GenesisState::add_spot_market_ids_scheduled_to_force_close(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_spot_market_ids_scheduled_to_force_close()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:injective.exchange.v1beta1.GenesisState.spot_market_ids_scheduled_to_force_close)
}
inline void GenesisState::add_spot_market_ids_scheduled_to_force_close(const char* value, std::size_t size) {
  _internal_mutable_spot_market_ids_scheduled_to_force_close()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:injective.exchange.v1beta1.GenesisState.spot_market_ids_scheduled_to_force_close)
}
inline void GenesisState::add_spot_market_ids_scheduled_to_force_close(absl::string_view value) {
  _internal_mutable_spot_market_ids_scheduled_to_force_close()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:injective.exchange.v1beta1.GenesisState.spot_market_ids_scheduled_to_force_close)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GenesisState::spot_market_ids_scheduled_to_force_close() const {
  // @@protoc_insertion_point(field_list:injective.exchange.v1beta1.GenesisState.spot_market_ids_scheduled_to_force_close)
  return _internal_spot_market_ids_scheduled_to_force_close();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* GenesisState::mutable_spot_market_ids_scheduled_to_force_close() {
  // @@protoc_insertion_point(field_mutable_list:injective.exchange.v1beta1.GenesisState.spot_market_ids_scheduled_to_force_close)
  return _internal_mutable_spot_market_ids_scheduled_to_force_close();
}
inline const std::string& GenesisState::_internal_spot_market_ids_scheduled_to_force_close(int index) const {
  return _internal_spot_market_ids_scheduled_to_force_close().Get(index);
}
inline std::string* GenesisState::_internal_add_spot_market_ids_scheduled_to_force_close() {
  return _internal_mutable_spot_market_ids_scheduled_to_force_close()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GenesisState::_internal_spot_market_ids_scheduled_to_force_close() const {
  return _impl_.spot_market_ids_scheduled_to_force_close_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GenesisState::_internal_mutable_spot_market_ids_scheduled_to_force_close() {
  return &_impl_.spot_market_ids_scheduled_to_force_close_;
}

// repeated .injective.exchange.v1beta1.DenomDecimals denom_decimals = 29 [json_name = "denomDecimals", (.gogoproto.nullable) = false];
inline int GenesisState::_internal_denom_decimals_size() const {
  return _impl_.denom_decimals_.size();
}
inline int GenesisState::denom_decimals_size() const {
  return _internal_denom_decimals_size();
}
inline ::injective::exchange::v1beta1::DenomDecimals* GenesisState::mutable_denom_decimals(int index) {
  // @@protoc_insertion_point(field_mutable:injective.exchange.v1beta1.GenesisState.denom_decimals)
  return _internal_mutable_denom_decimals()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::DenomDecimals >*
GenesisState::mutable_denom_decimals() {
  // @@protoc_insertion_point(field_mutable_list:injective.exchange.v1beta1.GenesisState.denom_decimals)
  return _internal_mutable_denom_decimals();
}
inline const ::injective::exchange::v1beta1::DenomDecimals& GenesisState::_internal_denom_decimals(int index) const {
  return _internal_denom_decimals().Get(index);
}
inline const ::injective::exchange::v1beta1::DenomDecimals& GenesisState::denom_decimals(int index) const {
  // @@protoc_insertion_point(field_get:injective.exchange.v1beta1.GenesisState.denom_decimals)
  return _internal_denom_decimals(index);
}
inline ::injective::exchange::v1beta1::DenomDecimals* GenesisState::_internal_add_denom_decimals() {
  return _internal_mutable_denom_decimals()->Add();
}
inline ::injective::exchange::v1beta1::DenomDecimals* GenesisState::add_denom_decimals() {
  ::injective::exchange::v1beta1::DenomDecimals* _add = _internal_add_denom_decimals();
  // @@protoc_insertion_point(field_add:injective.exchange.v1beta1.GenesisState.denom_decimals)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::DenomDecimals >&
GenesisState::denom_decimals() const {
  // @@protoc_insertion_point(field_list:injective.exchange.v1beta1.GenesisState.denom_decimals)
  return _internal_denom_decimals();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::exchange::v1beta1::DenomDecimals>&
GenesisState::_internal_denom_decimals() const {
  return _impl_.denom_decimals_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::exchange::v1beta1::DenomDecimals>*
GenesisState::_internal_mutable_denom_decimals() {
  return &_impl_.denom_decimals_;
}

// repeated .injective.exchange.v1beta1.ConditionalDerivativeOrderBook conditional_derivative_orderbooks = 30 [json_name = "conditionalDerivativeOrderbooks"];
inline int GenesisState::_internal_conditional_derivative_orderbooks_size() const {
  return _impl_.conditional_derivative_orderbooks_.size();
}
inline int GenesisState::conditional_derivative_orderbooks_size() const {
  return _internal_conditional_derivative_orderbooks_size();
}
inline void GenesisState::clear_conditional_derivative_orderbooks() {
  _internal_mutable_conditional_derivative_orderbooks()->Clear();
}
inline ::injective::exchange::v1beta1::ConditionalDerivativeOrderBook* GenesisState::mutable_conditional_derivative_orderbooks(int index) {
  // @@protoc_insertion_point(field_mutable:injective.exchange.v1beta1.GenesisState.conditional_derivative_orderbooks)
  return _internal_mutable_conditional_derivative_orderbooks()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::ConditionalDerivativeOrderBook >*
GenesisState::mutable_conditional_derivative_orderbooks() {
  // @@protoc_insertion_point(field_mutable_list:injective.exchange.v1beta1.GenesisState.conditional_derivative_orderbooks)
  return _internal_mutable_conditional_derivative_orderbooks();
}
inline const ::injective::exchange::v1beta1::ConditionalDerivativeOrderBook& GenesisState::_internal_conditional_derivative_orderbooks(int index) const {
  return _internal_conditional_derivative_orderbooks().Get(index);
}
inline const ::injective::exchange::v1beta1::ConditionalDerivativeOrderBook& GenesisState::conditional_derivative_orderbooks(int index) const {
  // @@protoc_insertion_point(field_get:injective.exchange.v1beta1.GenesisState.conditional_derivative_orderbooks)
  return _internal_conditional_derivative_orderbooks(index);
}
inline ::injective::exchange::v1beta1::ConditionalDerivativeOrderBook* GenesisState::_internal_add_conditional_derivative_orderbooks() {
  return _internal_mutable_conditional_derivative_orderbooks()->Add();
}
inline ::injective::exchange::v1beta1::ConditionalDerivativeOrderBook* GenesisState::add_conditional_derivative_orderbooks() {
  ::injective::exchange::v1beta1::ConditionalDerivativeOrderBook* _add = _internal_add_conditional_derivative_orderbooks();
  // @@protoc_insertion_point(field_add:injective.exchange.v1beta1.GenesisState.conditional_derivative_orderbooks)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::ConditionalDerivativeOrderBook >&
GenesisState::conditional_derivative_orderbooks() const {
  // @@protoc_insertion_point(field_list:injective.exchange.v1beta1.GenesisState.conditional_derivative_orderbooks)
  return _internal_conditional_derivative_orderbooks();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::exchange::v1beta1::ConditionalDerivativeOrderBook>&
GenesisState::_internal_conditional_derivative_orderbooks() const {
  return _impl_.conditional_derivative_orderbooks_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::exchange::v1beta1::ConditionalDerivativeOrderBook>*
GenesisState::_internal_mutable_conditional_derivative_orderbooks() {
  return &_impl_.conditional_derivative_orderbooks_;
}

// repeated .injective.exchange.v1beta1.MarketFeeMultiplier market_fee_multipliers = 31 [json_name = "marketFeeMultipliers"];
inline int GenesisState::_internal_market_fee_multipliers_size() const {
  return _impl_.market_fee_multipliers_.size();
}
inline int GenesisState::market_fee_multipliers_size() const {
  return _internal_market_fee_multipliers_size();
}
inline ::injective::exchange::v1beta1::MarketFeeMultiplier* GenesisState::mutable_market_fee_multipliers(int index) {
  // @@protoc_insertion_point(field_mutable:injective.exchange.v1beta1.GenesisState.market_fee_multipliers)
  return _internal_mutable_market_fee_multipliers()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::MarketFeeMultiplier >*
GenesisState::mutable_market_fee_multipliers() {
  // @@protoc_insertion_point(field_mutable_list:injective.exchange.v1beta1.GenesisState.market_fee_multipliers)
  return _internal_mutable_market_fee_multipliers();
}
inline const ::injective::exchange::v1beta1::MarketFeeMultiplier& GenesisState::_internal_market_fee_multipliers(int index) const {
  return _internal_market_fee_multipliers().Get(index);
}
inline const ::injective::exchange::v1beta1::MarketFeeMultiplier& GenesisState::market_fee_multipliers(int index) const {
  // @@protoc_insertion_point(field_get:injective.exchange.v1beta1.GenesisState.market_fee_multipliers)
  return _internal_market_fee_multipliers(index);
}
inline ::injective::exchange::v1beta1::MarketFeeMultiplier* GenesisState::_internal_add_market_fee_multipliers() {
  return _internal_mutable_market_fee_multipliers()->Add();
}
inline ::injective::exchange::v1beta1::MarketFeeMultiplier* GenesisState::add_market_fee_multipliers() {
  ::injective::exchange::v1beta1::MarketFeeMultiplier* _add = _internal_add_market_fee_multipliers();
  // @@protoc_insertion_point(field_add:injective.exchange.v1beta1.GenesisState.market_fee_multipliers)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::MarketFeeMultiplier >&
GenesisState::market_fee_multipliers() const {
  // @@protoc_insertion_point(field_list:injective.exchange.v1beta1.GenesisState.market_fee_multipliers)
  return _internal_market_fee_multipliers();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::exchange::v1beta1::MarketFeeMultiplier>&
GenesisState::_internal_market_fee_multipliers() const {
  return _impl_.market_fee_multipliers_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::exchange::v1beta1::MarketFeeMultiplier>*
GenesisState::_internal_mutable_market_fee_multipliers() {
  return &_impl_.market_fee_multipliers_;
}

// repeated .injective.exchange.v1beta1.OrderbookSequence orderbook_sequences = 32 [json_name = "orderbookSequences"];
inline int GenesisState::_internal_orderbook_sequences_size() const {
  return _impl_.orderbook_sequences_.size();
}
inline int GenesisState::orderbook_sequences_size() const {
  return _internal_orderbook_sequences_size();
}
inline void GenesisState::clear_orderbook_sequences() {
  _internal_mutable_orderbook_sequences()->Clear();
}
inline ::injective::exchange::v1beta1::OrderbookSequence* GenesisState::mutable_orderbook_sequences(int index) {
  // @@protoc_insertion_point(field_mutable:injective.exchange.v1beta1.GenesisState.orderbook_sequences)
  return _internal_mutable_orderbook_sequences()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::OrderbookSequence >*
GenesisState::mutable_orderbook_sequences() {
  // @@protoc_insertion_point(field_mutable_list:injective.exchange.v1beta1.GenesisState.orderbook_sequences)
  return _internal_mutable_orderbook_sequences();
}
inline const ::injective::exchange::v1beta1::OrderbookSequence& GenesisState::_internal_orderbook_sequences(int index) const {
  return _internal_orderbook_sequences().Get(index);
}
inline const ::injective::exchange::v1beta1::OrderbookSequence& GenesisState::orderbook_sequences(int index) const {
  // @@protoc_insertion_point(field_get:injective.exchange.v1beta1.GenesisState.orderbook_sequences)
  return _internal_orderbook_sequences(index);
}
inline ::injective::exchange::v1beta1::OrderbookSequence* GenesisState::_internal_add_orderbook_sequences() {
  return _internal_mutable_orderbook_sequences()->Add();
}
inline ::injective::exchange::v1beta1::OrderbookSequence* GenesisState::add_orderbook_sequences() {
  ::injective::exchange::v1beta1::OrderbookSequence* _add = _internal_add_orderbook_sequences();
  // @@protoc_insertion_point(field_add:injective.exchange.v1beta1.GenesisState.orderbook_sequences)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::OrderbookSequence >&
GenesisState::orderbook_sequences() const {
  // @@protoc_insertion_point(field_list:injective.exchange.v1beta1.GenesisState.orderbook_sequences)
  return _internal_orderbook_sequences();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::exchange::v1beta1::OrderbookSequence>&
GenesisState::_internal_orderbook_sequences() const {
  return _impl_.orderbook_sequences_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::exchange::v1beta1::OrderbookSequence>*
GenesisState::_internal_mutable_orderbook_sequences() {
  return &_impl_.orderbook_sequences_;
}

// repeated .injective.exchange.v1beta1.AggregateSubaccountVolumeRecord subaccount_volumes = 33 [json_name = "subaccountVolumes"];
inline int GenesisState::_internal_subaccount_volumes_size() const {
  return _impl_.subaccount_volumes_.size();
}
inline int GenesisState::subaccount_volumes_size() const {
  return _internal_subaccount_volumes_size();
}
inline ::injective::exchange::v1beta1::AggregateSubaccountVolumeRecord* GenesisState::mutable_subaccount_volumes(int index) {
  // @@protoc_insertion_point(field_mutable:injective.exchange.v1beta1.GenesisState.subaccount_volumes)
  return _internal_mutable_subaccount_volumes()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::AggregateSubaccountVolumeRecord >*
GenesisState::mutable_subaccount_volumes() {
  // @@protoc_insertion_point(field_mutable_list:injective.exchange.v1beta1.GenesisState.subaccount_volumes)
  return _internal_mutable_subaccount_volumes();
}
inline const ::injective::exchange::v1beta1::AggregateSubaccountVolumeRecord& GenesisState::_internal_subaccount_volumes(int index) const {
  return _internal_subaccount_volumes().Get(index);
}
inline const ::injective::exchange::v1beta1::AggregateSubaccountVolumeRecord& GenesisState::subaccount_volumes(int index) const {
  // @@protoc_insertion_point(field_get:injective.exchange.v1beta1.GenesisState.subaccount_volumes)
  return _internal_subaccount_volumes(index);
}
inline ::injective::exchange::v1beta1::AggregateSubaccountVolumeRecord* GenesisState::_internal_add_subaccount_volumes() {
  return _internal_mutable_subaccount_volumes()->Add();
}
inline ::injective::exchange::v1beta1::AggregateSubaccountVolumeRecord* GenesisState::add_subaccount_volumes() {
  ::injective::exchange::v1beta1::AggregateSubaccountVolumeRecord* _add = _internal_add_subaccount_volumes();
  // @@protoc_insertion_point(field_add:injective.exchange.v1beta1.GenesisState.subaccount_volumes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::AggregateSubaccountVolumeRecord >&
GenesisState::subaccount_volumes() const {
  // @@protoc_insertion_point(field_list:injective.exchange.v1beta1.GenesisState.subaccount_volumes)
  return _internal_subaccount_volumes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::exchange::v1beta1::AggregateSubaccountVolumeRecord>&
GenesisState::_internal_subaccount_volumes() const {
  return _impl_.subaccount_volumes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::exchange::v1beta1::AggregateSubaccountVolumeRecord>*
GenesisState::_internal_mutable_subaccount_volumes() {
  return &_impl_.subaccount_volumes_;
}

// repeated .injective.exchange.v1beta1.MarketVolume market_volumes = 34 [json_name = "marketVolumes"];
inline int GenesisState::_internal_market_volumes_size() const {
  return _impl_.market_volumes_.size();
}
inline int GenesisState::market_volumes_size() const {
  return _internal_market_volumes_size();
}
inline ::injective::exchange::v1beta1::MarketVolume* GenesisState::mutable_market_volumes(int index) {
  // @@protoc_insertion_point(field_mutable:injective.exchange.v1beta1.GenesisState.market_volumes)
  return _internal_mutable_market_volumes()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::MarketVolume >*
GenesisState::mutable_market_volumes() {
  // @@protoc_insertion_point(field_mutable_list:injective.exchange.v1beta1.GenesisState.market_volumes)
  return _internal_mutable_market_volumes();
}
inline const ::injective::exchange::v1beta1::MarketVolume& GenesisState::_internal_market_volumes(int index) const {
  return _internal_market_volumes().Get(index);
}
inline const ::injective::exchange::v1beta1::MarketVolume& GenesisState::market_volumes(int index) const {
  // @@protoc_insertion_point(field_get:injective.exchange.v1beta1.GenesisState.market_volumes)
  return _internal_market_volumes(index);
}
inline ::injective::exchange::v1beta1::MarketVolume* GenesisState::_internal_add_market_volumes() {
  return _internal_mutable_market_volumes()->Add();
}
inline ::injective::exchange::v1beta1::MarketVolume* GenesisState::add_market_volumes() {
  ::injective::exchange::v1beta1::MarketVolume* _add = _internal_add_market_volumes();
  // @@protoc_insertion_point(field_add:injective.exchange.v1beta1.GenesisState.market_volumes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::MarketVolume >&
GenesisState::market_volumes() const {
  // @@protoc_insertion_point(field_list:injective.exchange.v1beta1.GenesisState.market_volumes)
  return _internal_market_volumes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::exchange::v1beta1::MarketVolume>&
GenesisState::_internal_market_volumes() const {
  return _impl_.market_volumes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::exchange::v1beta1::MarketVolume>*
GenesisState::_internal_mutable_market_volumes() {
  return &_impl_.market_volumes_;
}

// -------------------------------------------------------------------

// OrderbookSequence

// uint64 sequence = 1 [json_name = "sequence"];
inline void OrderbookSequence::clear_sequence() {
  _impl_.sequence_ = ::uint64_t{0u};
}
inline ::uint64_t OrderbookSequence::sequence() const {
  // @@protoc_insertion_point(field_get:injective.exchange.v1beta1.OrderbookSequence.sequence)
  return _internal_sequence();
}
inline void OrderbookSequence::set_sequence(::uint64_t value) {
  _internal_set_sequence(value);
  // @@protoc_insertion_point(field_set:injective.exchange.v1beta1.OrderbookSequence.sequence)
}
inline ::uint64_t OrderbookSequence::_internal_sequence() const {
  return _impl_.sequence_;
}
inline void OrderbookSequence::_internal_set_sequence(::uint64_t value) {
  ;
  _impl_.sequence_ = value;
}

// string market_id = 2 [json_name = "marketId"];
inline void OrderbookSequence::clear_market_id() {
  _impl_.market_id_.ClearToEmpty();
}
inline const std::string& OrderbookSequence::market_id() const {
  // @@protoc_insertion_point(field_get:injective.exchange.v1beta1.OrderbookSequence.market_id)
  return _internal_market_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OrderbookSequence::set_market_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.market_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.exchange.v1beta1.OrderbookSequence.market_id)
}
inline std::string* OrderbookSequence::mutable_market_id() {
  std::string* _s = _internal_mutable_market_id();
  // @@protoc_insertion_point(field_mutable:injective.exchange.v1beta1.OrderbookSequence.market_id)
  return _s;
}
inline const std::string& OrderbookSequence::_internal_market_id() const {
  return _impl_.market_id_.Get();
}
inline void OrderbookSequence::_internal_set_market_id(const std::string& value) {
  ;


  _impl_.market_id_.Set(value, GetArenaForAllocation());
}
inline std::string* OrderbookSequence::_internal_mutable_market_id() {
  ;
  return _impl_.market_id_.Mutable( GetArenaForAllocation());
}
inline std::string* OrderbookSequence::release_market_id() {
  // @@protoc_insertion_point(field_release:injective.exchange.v1beta1.OrderbookSequence.market_id)
  return _impl_.market_id_.Release();
}
inline void OrderbookSequence::set_allocated_market_id(std::string* value) {
  _impl_.market_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.market_id_.IsDefault()) {
          _impl_.market_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.exchange.v1beta1.OrderbookSequence.market_id)
}

// -------------------------------------------------------------------

// FeeDiscountAccountTierTTL

// string account = 1 [json_name = "account"];
inline void FeeDiscountAccountTierTTL::clear_account() {
  _impl_.account_.ClearToEmpty();
}
inline const std::string& FeeDiscountAccountTierTTL::account() const {
  // @@protoc_insertion_point(field_get:injective.exchange.v1beta1.FeeDiscountAccountTierTTL.account)
  return _internal_account();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FeeDiscountAccountTierTTL::set_account(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.account_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.exchange.v1beta1.FeeDiscountAccountTierTTL.account)
}
inline std::string* FeeDiscountAccountTierTTL::mutable_account() {
  std::string* _s = _internal_mutable_account();
  // @@protoc_insertion_point(field_mutable:injective.exchange.v1beta1.FeeDiscountAccountTierTTL.account)
  return _s;
}
inline const std::string& FeeDiscountAccountTierTTL::_internal_account() const {
  return _impl_.account_.Get();
}
inline void FeeDiscountAccountTierTTL::_internal_set_account(const std::string& value) {
  ;


  _impl_.account_.Set(value, GetArenaForAllocation());
}
inline std::string* FeeDiscountAccountTierTTL::_internal_mutable_account() {
  ;
  return _impl_.account_.Mutable( GetArenaForAllocation());
}
inline std::string* FeeDiscountAccountTierTTL::release_account() {
  // @@protoc_insertion_point(field_release:injective.exchange.v1beta1.FeeDiscountAccountTierTTL.account)
  return _impl_.account_.Release();
}
inline void FeeDiscountAccountTierTTL::set_allocated_account(std::string* value) {
  _impl_.account_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.account_.IsDefault()) {
          _impl_.account_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.exchange.v1beta1.FeeDiscountAccountTierTTL.account)
}

// .injective.exchange.v1beta1.FeeDiscountTierTTL tier_ttl = 2 [json_name = "tierTtl"];
inline bool FeeDiscountAccountTierTTL::has_tier_ttl() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tier_ttl_ != nullptr);
  return value;
}
inline const ::injective::exchange::v1beta1::FeeDiscountTierTTL& FeeDiscountAccountTierTTL::_internal_tier_ttl() const {
  const ::injective::exchange::v1beta1::FeeDiscountTierTTL* p = _impl_.tier_ttl_;
  return p != nullptr ? *p : reinterpret_cast<const ::injective::exchange::v1beta1::FeeDiscountTierTTL&>(
      ::injective::exchange::v1beta1::_FeeDiscountTierTTL_default_instance_);
}
inline const ::injective::exchange::v1beta1::FeeDiscountTierTTL& FeeDiscountAccountTierTTL::tier_ttl() const {
  // @@protoc_insertion_point(field_get:injective.exchange.v1beta1.FeeDiscountAccountTierTTL.tier_ttl)
  return _internal_tier_ttl();
}
inline void FeeDiscountAccountTierTTL::unsafe_arena_set_allocated_tier_ttl(
    ::injective::exchange::v1beta1::FeeDiscountTierTTL* tier_ttl) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tier_ttl_);
  }
  _impl_.tier_ttl_ = tier_ttl;
  if (tier_ttl) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:injective.exchange.v1beta1.FeeDiscountAccountTierTTL.tier_ttl)
}
inline ::injective::exchange::v1beta1::FeeDiscountTierTTL* FeeDiscountAccountTierTTL::release_tier_ttl() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::injective::exchange::v1beta1::FeeDiscountTierTTL* temp = _impl_.tier_ttl_;
  _impl_.tier_ttl_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::injective::exchange::v1beta1::FeeDiscountTierTTL* FeeDiscountAccountTierTTL::unsafe_arena_release_tier_ttl() {
  // @@protoc_insertion_point(field_release:injective.exchange.v1beta1.FeeDiscountAccountTierTTL.tier_ttl)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::injective::exchange::v1beta1::FeeDiscountTierTTL* temp = _impl_.tier_ttl_;
  _impl_.tier_ttl_ = nullptr;
  return temp;
}
inline ::injective::exchange::v1beta1::FeeDiscountTierTTL* FeeDiscountAccountTierTTL::_internal_mutable_tier_ttl() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.tier_ttl_ == nullptr) {
    auto* p = CreateMaybeMessage<::injective::exchange::v1beta1::FeeDiscountTierTTL>(GetArenaForAllocation());
    _impl_.tier_ttl_ = p;
  }
  return _impl_.tier_ttl_;
}
inline ::injective::exchange::v1beta1::FeeDiscountTierTTL* FeeDiscountAccountTierTTL::mutable_tier_ttl() {
  ::injective::exchange::v1beta1::FeeDiscountTierTTL* _msg = _internal_mutable_tier_ttl();
  // @@protoc_insertion_point(field_mutable:injective.exchange.v1beta1.FeeDiscountAccountTierTTL.tier_ttl)
  return _msg;
}
inline void FeeDiscountAccountTierTTL::set_allocated_tier_ttl(::injective::exchange::v1beta1::FeeDiscountTierTTL* tier_ttl) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tier_ttl_);
  }
  if (tier_ttl) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tier_ttl));
    if (message_arena != submessage_arena) {
      tier_ttl = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tier_ttl, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.tier_ttl_ = tier_ttl;
  // @@protoc_insertion_point(field_set_allocated:injective.exchange.v1beta1.FeeDiscountAccountTierTTL.tier_ttl)
}

// -------------------------------------------------------------------

// FeeDiscountBucketVolumeAccounts

// int64 bucket_start_timestamp = 1 [json_name = "bucketStartTimestamp"];
inline void FeeDiscountBucketVolumeAccounts::clear_bucket_start_timestamp() {
  _impl_.bucket_start_timestamp_ = ::int64_t{0};
}
inline ::int64_t FeeDiscountBucketVolumeAccounts::bucket_start_timestamp() const {
  // @@protoc_insertion_point(field_get:injective.exchange.v1beta1.FeeDiscountBucketVolumeAccounts.bucket_start_timestamp)
  return _internal_bucket_start_timestamp();
}
inline void FeeDiscountBucketVolumeAccounts::set_bucket_start_timestamp(::int64_t value) {
  _internal_set_bucket_start_timestamp(value);
  // @@protoc_insertion_point(field_set:injective.exchange.v1beta1.FeeDiscountBucketVolumeAccounts.bucket_start_timestamp)
}
inline ::int64_t FeeDiscountBucketVolumeAccounts::_internal_bucket_start_timestamp() const {
  return _impl_.bucket_start_timestamp_;
}
inline void FeeDiscountBucketVolumeAccounts::_internal_set_bucket_start_timestamp(::int64_t value) {
  ;
  _impl_.bucket_start_timestamp_ = value;
}

// repeated .injective.exchange.v1beta1.AccountVolume account_volume = 2 [json_name = "accountVolume"];
inline int FeeDiscountBucketVolumeAccounts::_internal_account_volume_size() const {
  return _impl_.account_volume_.size();
}
inline int FeeDiscountBucketVolumeAccounts::account_volume_size() const {
  return _internal_account_volume_size();
}
inline void FeeDiscountBucketVolumeAccounts::clear_account_volume() {
  _internal_mutable_account_volume()->Clear();
}
inline ::injective::exchange::v1beta1::AccountVolume* FeeDiscountBucketVolumeAccounts::mutable_account_volume(int index) {
  // @@protoc_insertion_point(field_mutable:injective.exchange.v1beta1.FeeDiscountBucketVolumeAccounts.account_volume)
  return _internal_mutable_account_volume()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::AccountVolume >*
FeeDiscountBucketVolumeAccounts::mutable_account_volume() {
  // @@protoc_insertion_point(field_mutable_list:injective.exchange.v1beta1.FeeDiscountBucketVolumeAccounts.account_volume)
  return _internal_mutable_account_volume();
}
inline const ::injective::exchange::v1beta1::AccountVolume& FeeDiscountBucketVolumeAccounts::_internal_account_volume(int index) const {
  return _internal_account_volume().Get(index);
}
inline const ::injective::exchange::v1beta1::AccountVolume& FeeDiscountBucketVolumeAccounts::account_volume(int index) const {
  // @@protoc_insertion_point(field_get:injective.exchange.v1beta1.FeeDiscountBucketVolumeAccounts.account_volume)
  return _internal_account_volume(index);
}
inline ::injective::exchange::v1beta1::AccountVolume* FeeDiscountBucketVolumeAccounts::_internal_add_account_volume() {
  return _internal_mutable_account_volume()->Add();
}
inline ::injective::exchange::v1beta1::AccountVolume* FeeDiscountBucketVolumeAccounts::add_account_volume() {
  ::injective::exchange::v1beta1::AccountVolume* _add = _internal_add_account_volume();
  // @@protoc_insertion_point(field_add:injective.exchange.v1beta1.FeeDiscountBucketVolumeAccounts.account_volume)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::AccountVolume >&
FeeDiscountBucketVolumeAccounts::account_volume() const {
  // @@protoc_insertion_point(field_list:injective.exchange.v1beta1.FeeDiscountBucketVolumeAccounts.account_volume)
  return _internal_account_volume();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::exchange::v1beta1::AccountVolume>&
FeeDiscountBucketVolumeAccounts::_internal_account_volume() const {
  return _impl_.account_volume_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::exchange::v1beta1::AccountVolume>*
FeeDiscountBucketVolumeAccounts::_internal_mutable_account_volume() {
  return &_impl_.account_volume_;
}

// -------------------------------------------------------------------

// AccountVolume

// string account = 1 [json_name = "account"];
inline void AccountVolume::clear_account() {
  _impl_.account_.ClearToEmpty();
}
inline const std::string& AccountVolume::account() const {
  // @@protoc_insertion_point(field_get:injective.exchange.v1beta1.AccountVolume.account)
  return _internal_account();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AccountVolume::set_account(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.account_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.exchange.v1beta1.AccountVolume.account)
}
inline std::string* AccountVolume::mutable_account() {
  std::string* _s = _internal_mutable_account();
  // @@protoc_insertion_point(field_mutable:injective.exchange.v1beta1.AccountVolume.account)
  return _s;
}
inline const std::string& AccountVolume::_internal_account() const {
  return _impl_.account_.Get();
}
inline void AccountVolume::_internal_set_account(const std::string& value) {
  ;


  _impl_.account_.Set(value, GetArenaForAllocation());
}
inline std::string* AccountVolume::_internal_mutable_account() {
  ;
  return _impl_.account_.Mutable( GetArenaForAllocation());
}
inline std::string* AccountVolume::release_account() {
  // @@protoc_insertion_point(field_release:injective.exchange.v1beta1.AccountVolume.account)
  return _impl_.account_.Release();
}
inline void AccountVolume::set_allocated_account(std::string* value) {
  _impl_.account_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.account_.IsDefault()) {
          _impl_.account_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.exchange.v1beta1.AccountVolume.account)
}

// string volume = 2 [json_name = "volume", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
inline void AccountVolume::clear_volume() {
  _impl_.volume_.ClearToEmpty();
}
inline const std::string& AccountVolume::volume() const {
  // @@protoc_insertion_point(field_get:injective.exchange.v1beta1.AccountVolume.volume)
  return _internal_volume();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AccountVolume::set_volume(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.volume_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.exchange.v1beta1.AccountVolume.volume)
}
inline std::string* AccountVolume::mutable_volume() {
  std::string* _s = _internal_mutable_volume();
  // @@protoc_insertion_point(field_mutable:injective.exchange.v1beta1.AccountVolume.volume)
  return _s;
}
inline const std::string& AccountVolume::_internal_volume() const {
  return _impl_.volume_.Get();
}
inline void AccountVolume::_internal_set_volume(const std::string& value) {
  ;


  _impl_.volume_.Set(value, GetArenaForAllocation());
}
inline std::string* AccountVolume::_internal_mutable_volume() {
  ;
  return _impl_.volume_.Mutable( GetArenaForAllocation());
}
inline std::string* AccountVolume::release_volume() {
  // @@protoc_insertion_point(field_release:injective.exchange.v1beta1.AccountVolume.volume)
  return _impl_.volume_.Release();
}
inline void AccountVolume::set_allocated_volume(std::string* value) {
  _impl_.volume_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.volume_.IsDefault()) {
          _impl_.volume_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.exchange.v1beta1.AccountVolume.volume)
}

// -------------------------------------------------------------------

// TradingRewardCampaignAccountPoints

// string account = 1 [json_name = "account"];
inline void TradingRewardCampaignAccountPoints::clear_account() {
  _impl_.account_.ClearToEmpty();
}
inline const std::string& TradingRewardCampaignAccountPoints::account() const {
  // @@protoc_insertion_point(field_get:injective.exchange.v1beta1.TradingRewardCampaignAccountPoints.account)
  return _internal_account();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TradingRewardCampaignAccountPoints::set_account(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.account_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.exchange.v1beta1.TradingRewardCampaignAccountPoints.account)
}
inline std::string* TradingRewardCampaignAccountPoints::mutable_account() {
  std::string* _s = _internal_mutable_account();
  // @@protoc_insertion_point(field_mutable:injective.exchange.v1beta1.TradingRewardCampaignAccountPoints.account)
  return _s;
}
inline const std::string& TradingRewardCampaignAccountPoints::_internal_account() const {
  return _impl_.account_.Get();
}
inline void TradingRewardCampaignAccountPoints::_internal_set_account(const std::string& value) {
  ;


  _impl_.account_.Set(value, GetArenaForAllocation());
}
inline std::string* TradingRewardCampaignAccountPoints::_internal_mutable_account() {
  ;
  return _impl_.account_.Mutable( GetArenaForAllocation());
}
inline std::string* TradingRewardCampaignAccountPoints::release_account() {
  // @@protoc_insertion_point(field_release:injective.exchange.v1beta1.TradingRewardCampaignAccountPoints.account)
  return _impl_.account_.Release();
}
inline void TradingRewardCampaignAccountPoints::set_allocated_account(std::string* value) {
  _impl_.account_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.account_.IsDefault()) {
          _impl_.account_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.exchange.v1beta1.TradingRewardCampaignAccountPoints.account)
}

// string points = 2 [json_name = "points", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
inline void TradingRewardCampaignAccountPoints::clear_points() {
  _impl_.points_.ClearToEmpty();
}
inline const std::string& TradingRewardCampaignAccountPoints::points() const {
  // @@protoc_insertion_point(field_get:injective.exchange.v1beta1.TradingRewardCampaignAccountPoints.points)
  return _internal_points();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TradingRewardCampaignAccountPoints::set_points(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.points_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.exchange.v1beta1.TradingRewardCampaignAccountPoints.points)
}
inline std::string* TradingRewardCampaignAccountPoints::mutable_points() {
  std::string* _s = _internal_mutable_points();
  // @@protoc_insertion_point(field_mutable:injective.exchange.v1beta1.TradingRewardCampaignAccountPoints.points)
  return _s;
}
inline const std::string& TradingRewardCampaignAccountPoints::_internal_points() const {
  return _impl_.points_.Get();
}
inline void TradingRewardCampaignAccountPoints::_internal_set_points(const std::string& value) {
  ;


  _impl_.points_.Set(value, GetArenaForAllocation());
}
inline std::string* TradingRewardCampaignAccountPoints::_internal_mutable_points() {
  ;
  return _impl_.points_.Mutable( GetArenaForAllocation());
}
inline std::string* TradingRewardCampaignAccountPoints::release_points() {
  // @@protoc_insertion_point(field_release:injective.exchange.v1beta1.TradingRewardCampaignAccountPoints.points)
  return _impl_.points_.Release();
}
inline void TradingRewardCampaignAccountPoints::set_allocated_points(std::string* value) {
  _impl_.points_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.points_.IsDefault()) {
          _impl_.points_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.exchange.v1beta1.TradingRewardCampaignAccountPoints.points)
}

// -------------------------------------------------------------------

// TradingRewardCampaignAccountPendingPoints

// int64 reward_pool_start_timestamp = 1 [json_name = "rewardPoolStartTimestamp"];
inline void TradingRewardCampaignAccountPendingPoints::clear_reward_pool_start_timestamp() {
  _impl_.reward_pool_start_timestamp_ = ::int64_t{0};
}
inline ::int64_t TradingRewardCampaignAccountPendingPoints::reward_pool_start_timestamp() const {
  // @@protoc_insertion_point(field_get:injective.exchange.v1beta1.TradingRewardCampaignAccountPendingPoints.reward_pool_start_timestamp)
  return _internal_reward_pool_start_timestamp();
}
inline void TradingRewardCampaignAccountPendingPoints::set_reward_pool_start_timestamp(::int64_t value) {
  _internal_set_reward_pool_start_timestamp(value);
  // @@protoc_insertion_point(field_set:injective.exchange.v1beta1.TradingRewardCampaignAccountPendingPoints.reward_pool_start_timestamp)
}
inline ::int64_t TradingRewardCampaignAccountPendingPoints::_internal_reward_pool_start_timestamp() const {
  return _impl_.reward_pool_start_timestamp_;
}
inline void TradingRewardCampaignAccountPendingPoints::_internal_set_reward_pool_start_timestamp(::int64_t value) {
  ;
  _impl_.reward_pool_start_timestamp_ = value;
}

// repeated .injective.exchange.v1beta1.TradingRewardCampaignAccountPoints account_points = 2 [json_name = "accountPoints"];
inline int TradingRewardCampaignAccountPendingPoints::_internal_account_points_size() const {
  return _impl_.account_points_.size();
}
inline int TradingRewardCampaignAccountPendingPoints::account_points_size() const {
  return _internal_account_points_size();
}
inline void TradingRewardCampaignAccountPendingPoints::clear_account_points() {
  _internal_mutable_account_points()->Clear();
}
inline ::injective::exchange::v1beta1::TradingRewardCampaignAccountPoints* TradingRewardCampaignAccountPendingPoints::mutable_account_points(int index) {
  // @@protoc_insertion_point(field_mutable:injective.exchange.v1beta1.TradingRewardCampaignAccountPendingPoints.account_points)
  return _internal_mutable_account_points()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::TradingRewardCampaignAccountPoints >*
TradingRewardCampaignAccountPendingPoints::mutable_account_points() {
  // @@protoc_insertion_point(field_mutable_list:injective.exchange.v1beta1.TradingRewardCampaignAccountPendingPoints.account_points)
  return _internal_mutable_account_points();
}
inline const ::injective::exchange::v1beta1::TradingRewardCampaignAccountPoints& TradingRewardCampaignAccountPendingPoints::_internal_account_points(int index) const {
  return _internal_account_points().Get(index);
}
inline const ::injective::exchange::v1beta1::TradingRewardCampaignAccountPoints& TradingRewardCampaignAccountPendingPoints::account_points(int index) const {
  // @@protoc_insertion_point(field_get:injective.exchange.v1beta1.TradingRewardCampaignAccountPendingPoints.account_points)
  return _internal_account_points(index);
}
inline ::injective::exchange::v1beta1::TradingRewardCampaignAccountPoints* TradingRewardCampaignAccountPendingPoints::_internal_add_account_points() {
  return _internal_mutable_account_points()->Add();
}
inline ::injective::exchange::v1beta1::TradingRewardCampaignAccountPoints* TradingRewardCampaignAccountPendingPoints::add_account_points() {
  ::injective::exchange::v1beta1::TradingRewardCampaignAccountPoints* _add = _internal_add_account_points();
  // @@protoc_insertion_point(field_add:injective.exchange.v1beta1.TradingRewardCampaignAccountPendingPoints.account_points)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::TradingRewardCampaignAccountPoints >&
TradingRewardCampaignAccountPendingPoints::account_points() const {
  // @@protoc_insertion_point(field_list:injective.exchange.v1beta1.TradingRewardCampaignAccountPendingPoints.account_points)
  return _internal_account_points();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::exchange::v1beta1::TradingRewardCampaignAccountPoints>&
TradingRewardCampaignAccountPendingPoints::_internal_account_points() const {
  return _impl_.account_points_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::exchange::v1beta1::TradingRewardCampaignAccountPoints>*
TradingRewardCampaignAccountPendingPoints::_internal_mutable_account_points() {
  return &_impl_.account_points_;
}

// -------------------------------------------------------------------

// SpotOrderBook

// string market_id = 1 [json_name = "marketId"];
inline void SpotOrderBook::clear_market_id() {
  _impl_.market_id_.ClearToEmpty();
}
inline const std::string& SpotOrderBook::market_id() const {
  // @@protoc_insertion_point(field_get:injective.exchange.v1beta1.SpotOrderBook.market_id)
  return _internal_market_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SpotOrderBook::set_market_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.market_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.exchange.v1beta1.SpotOrderBook.market_id)
}
inline std::string* SpotOrderBook::mutable_market_id() {
  std::string* _s = _internal_mutable_market_id();
  // @@protoc_insertion_point(field_mutable:injective.exchange.v1beta1.SpotOrderBook.market_id)
  return _s;
}
inline const std::string& SpotOrderBook::_internal_market_id() const {
  return _impl_.market_id_.Get();
}
inline void SpotOrderBook::_internal_set_market_id(const std::string& value) {
  ;


  _impl_.market_id_.Set(value, GetArenaForAllocation());
}
inline std::string* SpotOrderBook::_internal_mutable_market_id() {
  ;
  return _impl_.market_id_.Mutable( GetArenaForAllocation());
}
inline std::string* SpotOrderBook::release_market_id() {
  // @@protoc_insertion_point(field_release:injective.exchange.v1beta1.SpotOrderBook.market_id)
  return _impl_.market_id_.Release();
}
inline void SpotOrderBook::set_allocated_market_id(std::string* value) {
  _impl_.market_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.market_id_.IsDefault()) {
          _impl_.market_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.exchange.v1beta1.SpotOrderBook.market_id)
}

// bool isBuySide = 2 [json_name = "isBuySide"];
inline void SpotOrderBook::clear_isbuyside() {
  _impl_.isbuyside_ = false;
}
inline bool SpotOrderBook::isbuyside() const {
  // @@protoc_insertion_point(field_get:injective.exchange.v1beta1.SpotOrderBook.isBuySide)
  return _internal_isbuyside();
}
inline void SpotOrderBook::set_isbuyside(bool value) {
  _internal_set_isbuyside(value);
  // @@protoc_insertion_point(field_set:injective.exchange.v1beta1.SpotOrderBook.isBuySide)
}
inline bool SpotOrderBook::_internal_isbuyside() const {
  return _impl_.isbuyside_;
}
inline void SpotOrderBook::_internal_set_isbuyside(bool value) {
  ;
  _impl_.isbuyside_ = value;
}

// repeated .injective.exchange.v1beta1.SpotLimitOrder orders = 3 [json_name = "orders"];
inline int SpotOrderBook::_internal_orders_size() const {
  return _impl_.orders_.size();
}
inline int SpotOrderBook::orders_size() const {
  return _internal_orders_size();
}
inline ::injective::exchange::v1beta1::SpotLimitOrder* SpotOrderBook::mutable_orders(int index) {
  // @@protoc_insertion_point(field_mutable:injective.exchange.v1beta1.SpotOrderBook.orders)
  return _internal_mutable_orders()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::SpotLimitOrder >*
SpotOrderBook::mutable_orders() {
  // @@protoc_insertion_point(field_mutable_list:injective.exchange.v1beta1.SpotOrderBook.orders)
  return _internal_mutable_orders();
}
inline const ::injective::exchange::v1beta1::SpotLimitOrder& SpotOrderBook::_internal_orders(int index) const {
  return _internal_orders().Get(index);
}
inline const ::injective::exchange::v1beta1::SpotLimitOrder& SpotOrderBook::orders(int index) const {
  // @@protoc_insertion_point(field_get:injective.exchange.v1beta1.SpotOrderBook.orders)
  return _internal_orders(index);
}
inline ::injective::exchange::v1beta1::SpotLimitOrder* SpotOrderBook::_internal_add_orders() {
  return _internal_mutable_orders()->Add();
}
inline ::injective::exchange::v1beta1::SpotLimitOrder* SpotOrderBook::add_orders() {
  ::injective::exchange::v1beta1::SpotLimitOrder* _add = _internal_add_orders();
  // @@protoc_insertion_point(field_add:injective.exchange.v1beta1.SpotOrderBook.orders)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::SpotLimitOrder >&
SpotOrderBook::orders() const {
  // @@protoc_insertion_point(field_list:injective.exchange.v1beta1.SpotOrderBook.orders)
  return _internal_orders();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::exchange::v1beta1::SpotLimitOrder>&
SpotOrderBook::_internal_orders() const {
  return _impl_.orders_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::exchange::v1beta1::SpotLimitOrder>*
SpotOrderBook::_internal_mutable_orders() {
  return &_impl_.orders_;
}

// -------------------------------------------------------------------

// DerivativeOrderBook

// string market_id = 1 [json_name = "marketId"];
inline void DerivativeOrderBook::clear_market_id() {
  _impl_.market_id_.ClearToEmpty();
}
inline const std::string& DerivativeOrderBook::market_id() const {
  // @@protoc_insertion_point(field_get:injective.exchange.v1beta1.DerivativeOrderBook.market_id)
  return _internal_market_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DerivativeOrderBook::set_market_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.market_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.exchange.v1beta1.DerivativeOrderBook.market_id)
}
inline std::string* DerivativeOrderBook::mutable_market_id() {
  std::string* _s = _internal_mutable_market_id();
  // @@protoc_insertion_point(field_mutable:injective.exchange.v1beta1.DerivativeOrderBook.market_id)
  return _s;
}
inline const std::string& DerivativeOrderBook::_internal_market_id() const {
  return _impl_.market_id_.Get();
}
inline void DerivativeOrderBook::_internal_set_market_id(const std::string& value) {
  ;


  _impl_.market_id_.Set(value, GetArenaForAllocation());
}
inline std::string* DerivativeOrderBook::_internal_mutable_market_id() {
  ;
  return _impl_.market_id_.Mutable( GetArenaForAllocation());
}
inline std::string* DerivativeOrderBook::release_market_id() {
  // @@protoc_insertion_point(field_release:injective.exchange.v1beta1.DerivativeOrderBook.market_id)
  return _impl_.market_id_.Release();
}
inline void DerivativeOrderBook::set_allocated_market_id(std::string* value) {
  _impl_.market_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.market_id_.IsDefault()) {
          _impl_.market_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.exchange.v1beta1.DerivativeOrderBook.market_id)
}

// bool isBuySide = 2 [json_name = "isBuySide"];
inline void DerivativeOrderBook::clear_isbuyside() {
  _impl_.isbuyside_ = false;
}
inline bool DerivativeOrderBook::isbuyside() const {
  // @@protoc_insertion_point(field_get:injective.exchange.v1beta1.DerivativeOrderBook.isBuySide)
  return _internal_isbuyside();
}
inline void DerivativeOrderBook::set_isbuyside(bool value) {
  _internal_set_isbuyside(value);
  // @@protoc_insertion_point(field_set:injective.exchange.v1beta1.DerivativeOrderBook.isBuySide)
}
inline bool DerivativeOrderBook::_internal_isbuyside() const {
  return _impl_.isbuyside_;
}
inline void DerivativeOrderBook::_internal_set_isbuyside(bool value) {
  ;
  _impl_.isbuyside_ = value;
}

// repeated .injective.exchange.v1beta1.DerivativeLimitOrder orders = 3 [json_name = "orders"];
inline int DerivativeOrderBook::_internal_orders_size() const {
  return _impl_.orders_.size();
}
inline int DerivativeOrderBook::orders_size() const {
  return _internal_orders_size();
}
inline ::injective::exchange::v1beta1::DerivativeLimitOrder* DerivativeOrderBook::mutable_orders(int index) {
  // @@protoc_insertion_point(field_mutable:injective.exchange.v1beta1.DerivativeOrderBook.orders)
  return _internal_mutable_orders()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::DerivativeLimitOrder >*
DerivativeOrderBook::mutable_orders() {
  // @@protoc_insertion_point(field_mutable_list:injective.exchange.v1beta1.DerivativeOrderBook.orders)
  return _internal_mutable_orders();
}
inline const ::injective::exchange::v1beta1::DerivativeLimitOrder& DerivativeOrderBook::_internal_orders(int index) const {
  return _internal_orders().Get(index);
}
inline const ::injective::exchange::v1beta1::DerivativeLimitOrder& DerivativeOrderBook::orders(int index) const {
  // @@protoc_insertion_point(field_get:injective.exchange.v1beta1.DerivativeOrderBook.orders)
  return _internal_orders(index);
}
inline ::injective::exchange::v1beta1::DerivativeLimitOrder* DerivativeOrderBook::_internal_add_orders() {
  return _internal_mutable_orders()->Add();
}
inline ::injective::exchange::v1beta1::DerivativeLimitOrder* DerivativeOrderBook::add_orders() {
  ::injective::exchange::v1beta1::DerivativeLimitOrder* _add = _internal_add_orders();
  // @@protoc_insertion_point(field_add:injective.exchange.v1beta1.DerivativeOrderBook.orders)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::DerivativeLimitOrder >&
DerivativeOrderBook::orders() const {
  // @@protoc_insertion_point(field_list:injective.exchange.v1beta1.DerivativeOrderBook.orders)
  return _internal_orders();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::exchange::v1beta1::DerivativeLimitOrder>&
DerivativeOrderBook::_internal_orders() const {
  return _impl_.orders_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::exchange::v1beta1::DerivativeLimitOrder>*
DerivativeOrderBook::_internal_mutable_orders() {
  return &_impl_.orders_;
}

// -------------------------------------------------------------------

// ConditionalDerivativeOrderBook

// string market_id = 1 [json_name = "marketId"];
inline void ConditionalDerivativeOrderBook::clear_market_id() {
  _impl_.market_id_.ClearToEmpty();
}
inline const std::string& ConditionalDerivativeOrderBook::market_id() const {
  // @@protoc_insertion_point(field_get:injective.exchange.v1beta1.ConditionalDerivativeOrderBook.market_id)
  return _internal_market_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ConditionalDerivativeOrderBook::set_market_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.market_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.exchange.v1beta1.ConditionalDerivativeOrderBook.market_id)
}
inline std::string* ConditionalDerivativeOrderBook::mutable_market_id() {
  std::string* _s = _internal_mutable_market_id();
  // @@protoc_insertion_point(field_mutable:injective.exchange.v1beta1.ConditionalDerivativeOrderBook.market_id)
  return _s;
}
inline const std::string& ConditionalDerivativeOrderBook::_internal_market_id() const {
  return _impl_.market_id_.Get();
}
inline void ConditionalDerivativeOrderBook::_internal_set_market_id(const std::string& value) {
  ;


  _impl_.market_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ConditionalDerivativeOrderBook::_internal_mutable_market_id() {
  ;
  return _impl_.market_id_.Mutable( GetArenaForAllocation());
}
inline std::string* ConditionalDerivativeOrderBook::release_market_id() {
  // @@protoc_insertion_point(field_release:injective.exchange.v1beta1.ConditionalDerivativeOrderBook.market_id)
  return _impl_.market_id_.Release();
}
inline void ConditionalDerivativeOrderBook::set_allocated_market_id(std::string* value) {
  _impl_.market_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.market_id_.IsDefault()) {
          _impl_.market_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.exchange.v1beta1.ConditionalDerivativeOrderBook.market_id)
}

// repeated .injective.exchange.v1beta1.DerivativeLimitOrder limit_buy_orders = 2 [json_name = "limitBuyOrders"];
inline int ConditionalDerivativeOrderBook::_internal_limit_buy_orders_size() const {
  return _impl_.limit_buy_orders_.size();
}
inline int ConditionalDerivativeOrderBook::limit_buy_orders_size() const {
  return _internal_limit_buy_orders_size();
}
inline ::injective::exchange::v1beta1::DerivativeLimitOrder* ConditionalDerivativeOrderBook::mutable_limit_buy_orders(int index) {
  // @@protoc_insertion_point(field_mutable:injective.exchange.v1beta1.ConditionalDerivativeOrderBook.limit_buy_orders)
  return _internal_mutable_limit_buy_orders()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::DerivativeLimitOrder >*
ConditionalDerivativeOrderBook::mutable_limit_buy_orders() {
  // @@protoc_insertion_point(field_mutable_list:injective.exchange.v1beta1.ConditionalDerivativeOrderBook.limit_buy_orders)
  return _internal_mutable_limit_buy_orders();
}
inline const ::injective::exchange::v1beta1::DerivativeLimitOrder& ConditionalDerivativeOrderBook::_internal_limit_buy_orders(int index) const {
  return _internal_limit_buy_orders().Get(index);
}
inline const ::injective::exchange::v1beta1::DerivativeLimitOrder& ConditionalDerivativeOrderBook::limit_buy_orders(int index) const {
  // @@protoc_insertion_point(field_get:injective.exchange.v1beta1.ConditionalDerivativeOrderBook.limit_buy_orders)
  return _internal_limit_buy_orders(index);
}
inline ::injective::exchange::v1beta1::DerivativeLimitOrder* ConditionalDerivativeOrderBook::_internal_add_limit_buy_orders() {
  return _internal_mutable_limit_buy_orders()->Add();
}
inline ::injective::exchange::v1beta1::DerivativeLimitOrder* ConditionalDerivativeOrderBook::add_limit_buy_orders() {
  ::injective::exchange::v1beta1::DerivativeLimitOrder* _add = _internal_add_limit_buy_orders();
  // @@protoc_insertion_point(field_add:injective.exchange.v1beta1.ConditionalDerivativeOrderBook.limit_buy_orders)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::DerivativeLimitOrder >&
ConditionalDerivativeOrderBook::limit_buy_orders() const {
  // @@protoc_insertion_point(field_list:injective.exchange.v1beta1.ConditionalDerivativeOrderBook.limit_buy_orders)
  return _internal_limit_buy_orders();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::exchange::v1beta1::DerivativeLimitOrder>&
ConditionalDerivativeOrderBook::_internal_limit_buy_orders() const {
  return _impl_.limit_buy_orders_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::exchange::v1beta1::DerivativeLimitOrder>*
ConditionalDerivativeOrderBook::_internal_mutable_limit_buy_orders() {
  return &_impl_.limit_buy_orders_;
}

// repeated .injective.exchange.v1beta1.DerivativeMarketOrder market_buy_orders = 3 [json_name = "marketBuyOrders"];
inline int ConditionalDerivativeOrderBook::_internal_market_buy_orders_size() const {
  return _impl_.market_buy_orders_.size();
}
inline int ConditionalDerivativeOrderBook::market_buy_orders_size() const {
  return _internal_market_buy_orders_size();
}
inline ::injective::exchange::v1beta1::DerivativeMarketOrder* ConditionalDerivativeOrderBook::mutable_market_buy_orders(int index) {
  // @@protoc_insertion_point(field_mutable:injective.exchange.v1beta1.ConditionalDerivativeOrderBook.market_buy_orders)
  return _internal_mutable_market_buy_orders()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::DerivativeMarketOrder >*
ConditionalDerivativeOrderBook::mutable_market_buy_orders() {
  // @@protoc_insertion_point(field_mutable_list:injective.exchange.v1beta1.ConditionalDerivativeOrderBook.market_buy_orders)
  return _internal_mutable_market_buy_orders();
}
inline const ::injective::exchange::v1beta1::DerivativeMarketOrder& ConditionalDerivativeOrderBook::_internal_market_buy_orders(int index) const {
  return _internal_market_buy_orders().Get(index);
}
inline const ::injective::exchange::v1beta1::DerivativeMarketOrder& ConditionalDerivativeOrderBook::market_buy_orders(int index) const {
  // @@protoc_insertion_point(field_get:injective.exchange.v1beta1.ConditionalDerivativeOrderBook.market_buy_orders)
  return _internal_market_buy_orders(index);
}
inline ::injective::exchange::v1beta1::DerivativeMarketOrder* ConditionalDerivativeOrderBook::_internal_add_market_buy_orders() {
  return _internal_mutable_market_buy_orders()->Add();
}
inline ::injective::exchange::v1beta1::DerivativeMarketOrder* ConditionalDerivativeOrderBook::add_market_buy_orders() {
  ::injective::exchange::v1beta1::DerivativeMarketOrder* _add = _internal_add_market_buy_orders();
  // @@protoc_insertion_point(field_add:injective.exchange.v1beta1.ConditionalDerivativeOrderBook.market_buy_orders)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::DerivativeMarketOrder >&
ConditionalDerivativeOrderBook::market_buy_orders() const {
  // @@protoc_insertion_point(field_list:injective.exchange.v1beta1.ConditionalDerivativeOrderBook.market_buy_orders)
  return _internal_market_buy_orders();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::exchange::v1beta1::DerivativeMarketOrder>&
ConditionalDerivativeOrderBook::_internal_market_buy_orders() const {
  return _impl_.market_buy_orders_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::exchange::v1beta1::DerivativeMarketOrder>*
ConditionalDerivativeOrderBook::_internal_mutable_market_buy_orders() {
  return &_impl_.market_buy_orders_;
}

// repeated .injective.exchange.v1beta1.DerivativeLimitOrder limit_sell_orders = 4 [json_name = "limitSellOrders"];
inline int ConditionalDerivativeOrderBook::_internal_limit_sell_orders_size() const {
  return _impl_.limit_sell_orders_.size();
}
inline int ConditionalDerivativeOrderBook::limit_sell_orders_size() const {
  return _internal_limit_sell_orders_size();
}
inline ::injective::exchange::v1beta1::DerivativeLimitOrder* ConditionalDerivativeOrderBook::mutable_limit_sell_orders(int index) {
  // @@protoc_insertion_point(field_mutable:injective.exchange.v1beta1.ConditionalDerivativeOrderBook.limit_sell_orders)
  return _internal_mutable_limit_sell_orders()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::DerivativeLimitOrder >*
ConditionalDerivativeOrderBook::mutable_limit_sell_orders() {
  // @@protoc_insertion_point(field_mutable_list:injective.exchange.v1beta1.ConditionalDerivativeOrderBook.limit_sell_orders)
  return _internal_mutable_limit_sell_orders();
}
inline const ::injective::exchange::v1beta1::DerivativeLimitOrder& ConditionalDerivativeOrderBook::_internal_limit_sell_orders(int index) const {
  return _internal_limit_sell_orders().Get(index);
}
inline const ::injective::exchange::v1beta1::DerivativeLimitOrder& ConditionalDerivativeOrderBook::limit_sell_orders(int index) const {
  // @@protoc_insertion_point(field_get:injective.exchange.v1beta1.ConditionalDerivativeOrderBook.limit_sell_orders)
  return _internal_limit_sell_orders(index);
}
inline ::injective::exchange::v1beta1::DerivativeLimitOrder* ConditionalDerivativeOrderBook::_internal_add_limit_sell_orders() {
  return _internal_mutable_limit_sell_orders()->Add();
}
inline ::injective::exchange::v1beta1::DerivativeLimitOrder* ConditionalDerivativeOrderBook::add_limit_sell_orders() {
  ::injective::exchange::v1beta1::DerivativeLimitOrder* _add = _internal_add_limit_sell_orders();
  // @@protoc_insertion_point(field_add:injective.exchange.v1beta1.ConditionalDerivativeOrderBook.limit_sell_orders)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::DerivativeLimitOrder >&
ConditionalDerivativeOrderBook::limit_sell_orders() const {
  // @@protoc_insertion_point(field_list:injective.exchange.v1beta1.ConditionalDerivativeOrderBook.limit_sell_orders)
  return _internal_limit_sell_orders();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::exchange::v1beta1::DerivativeLimitOrder>&
ConditionalDerivativeOrderBook::_internal_limit_sell_orders() const {
  return _impl_.limit_sell_orders_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::exchange::v1beta1::DerivativeLimitOrder>*
ConditionalDerivativeOrderBook::_internal_mutable_limit_sell_orders() {
  return &_impl_.limit_sell_orders_;
}

// repeated .injective.exchange.v1beta1.DerivativeMarketOrder market_sell_orders = 5 [json_name = "marketSellOrders"];
inline int ConditionalDerivativeOrderBook::_internal_market_sell_orders_size() const {
  return _impl_.market_sell_orders_.size();
}
inline int ConditionalDerivativeOrderBook::market_sell_orders_size() const {
  return _internal_market_sell_orders_size();
}
inline ::injective::exchange::v1beta1::DerivativeMarketOrder* ConditionalDerivativeOrderBook::mutable_market_sell_orders(int index) {
  // @@protoc_insertion_point(field_mutable:injective.exchange.v1beta1.ConditionalDerivativeOrderBook.market_sell_orders)
  return _internal_mutable_market_sell_orders()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::DerivativeMarketOrder >*
ConditionalDerivativeOrderBook::mutable_market_sell_orders() {
  // @@protoc_insertion_point(field_mutable_list:injective.exchange.v1beta1.ConditionalDerivativeOrderBook.market_sell_orders)
  return _internal_mutable_market_sell_orders();
}
inline const ::injective::exchange::v1beta1::DerivativeMarketOrder& ConditionalDerivativeOrderBook::_internal_market_sell_orders(int index) const {
  return _internal_market_sell_orders().Get(index);
}
inline const ::injective::exchange::v1beta1::DerivativeMarketOrder& ConditionalDerivativeOrderBook::market_sell_orders(int index) const {
  // @@protoc_insertion_point(field_get:injective.exchange.v1beta1.ConditionalDerivativeOrderBook.market_sell_orders)
  return _internal_market_sell_orders(index);
}
inline ::injective::exchange::v1beta1::DerivativeMarketOrder* ConditionalDerivativeOrderBook::_internal_add_market_sell_orders() {
  return _internal_mutable_market_sell_orders()->Add();
}
inline ::injective::exchange::v1beta1::DerivativeMarketOrder* ConditionalDerivativeOrderBook::add_market_sell_orders() {
  ::injective::exchange::v1beta1::DerivativeMarketOrder* _add = _internal_add_market_sell_orders();
  // @@protoc_insertion_point(field_add:injective.exchange.v1beta1.ConditionalDerivativeOrderBook.market_sell_orders)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::exchange::v1beta1::DerivativeMarketOrder >&
ConditionalDerivativeOrderBook::market_sell_orders() const {
  // @@protoc_insertion_point(field_list:injective.exchange.v1beta1.ConditionalDerivativeOrderBook.market_sell_orders)
  return _internal_market_sell_orders();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::exchange::v1beta1::DerivativeMarketOrder>&
ConditionalDerivativeOrderBook::_internal_market_sell_orders() const {
  return _impl_.market_sell_orders_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::exchange::v1beta1::DerivativeMarketOrder>*
ConditionalDerivativeOrderBook::_internal_mutable_market_sell_orders() {
  return &_impl_.market_sell_orders_;
}

// -------------------------------------------------------------------

// Balance

// string subaccount_id = 1 [json_name = "subaccountId"];
inline void Balance::clear_subaccount_id() {
  _impl_.subaccount_id_.ClearToEmpty();
}
inline const std::string& Balance::subaccount_id() const {
  // @@protoc_insertion_point(field_get:injective.exchange.v1beta1.Balance.subaccount_id)
  return _internal_subaccount_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Balance::set_subaccount_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.subaccount_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.exchange.v1beta1.Balance.subaccount_id)
}
inline std::string* Balance::mutable_subaccount_id() {
  std::string* _s = _internal_mutable_subaccount_id();
  // @@protoc_insertion_point(field_mutable:injective.exchange.v1beta1.Balance.subaccount_id)
  return _s;
}
inline const std::string& Balance::_internal_subaccount_id() const {
  return _impl_.subaccount_id_.Get();
}
inline void Balance::_internal_set_subaccount_id(const std::string& value) {
  ;


  _impl_.subaccount_id_.Set(value, GetArenaForAllocation());
}
inline std::string* Balance::_internal_mutable_subaccount_id() {
  ;
  return _impl_.subaccount_id_.Mutable( GetArenaForAllocation());
}
inline std::string* Balance::release_subaccount_id() {
  // @@protoc_insertion_point(field_release:injective.exchange.v1beta1.Balance.subaccount_id)
  return _impl_.subaccount_id_.Release();
}
inline void Balance::set_allocated_subaccount_id(std::string* value) {
  _impl_.subaccount_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.subaccount_id_.IsDefault()) {
          _impl_.subaccount_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.exchange.v1beta1.Balance.subaccount_id)
}

// string denom = 2 [json_name = "denom"];
inline void Balance::clear_denom() {
  _impl_.denom_.ClearToEmpty();
}
inline const std::string& Balance::denom() const {
  // @@protoc_insertion_point(field_get:injective.exchange.v1beta1.Balance.denom)
  return _internal_denom();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Balance::set_denom(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.denom_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.exchange.v1beta1.Balance.denom)
}
inline std::string* Balance::mutable_denom() {
  std::string* _s = _internal_mutable_denom();
  // @@protoc_insertion_point(field_mutable:injective.exchange.v1beta1.Balance.denom)
  return _s;
}
inline const std::string& Balance::_internal_denom() const {
  return _impl_.denom_.Get();
}
inline void Balance::_internal_set_denom(const std::string& value) {
  ;


  _impl_.denom_.Set(value, GetArenaForAllocation());
}
inline std::string* Balance::_internal_mutable_denom() {
  ;
  return _impl_.denom_.Mutable( GetArenaForAllocation());
}
inline std::string* Balance::release_denom() {
  // @@protoc_insertion_point(field_release:injective.exchange.v1beta1.Balance.denom)
  return _impl_.denom_.Release();
}
inline void Balance::set_allocated_denom(std::string* value) {
  _impl_.denom_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.denom_.IsDefault()) {
          _impl_.denom_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.exchange.v1beta1.Balance.denom)
}

// .injective.exchange.v1beta1.Deposit deposits = 3 [json_name = "deposits"];
inline bool Balance::has_deposits() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.deposits_ != nullptr);
  return value;
}
inline const ::injective::exchange::v1beta1::Deposit& Balance::_internal_deposits() const {
  const ::injective::exchange::v1beta1::Deposit* p = _impl_.deposits_;
  return p != nullptr ? *p : reinterpret_cast<const ::injective::exchange::v1beta1::Deposit&>(
      ::injective::exchange::v1beta1::_Deposit_default_instance_);
}
inline const ::injective::exchange::v1beta1::Deposit& Balance::deposits() const {
  // @@protoc_insertion_point(field_get:injective.exchange.v1beta1.Balance.deposits)
  return _internal_deposits();
}
inline void Balance::unsafe_arena_set_allocated_deposits(
    ::injective::exchange::v1beta1::Deposit* deposits) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.deposits_);
  }
  _impl_.deposits_ = deposits;
  if (deposits) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:injective.exchange.v1beta1.Balance.deposits)
}
inline ::injective::exchange::v1beta1::Deposit* Balance::release_deposits() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::injective::exchange::v1beta1::Deposit* temp = _impl_.deposits_;
  _impl_.deposits_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::injective::exchange::v1beta1::Deposit* Balance::unsafe_arena_release_deposits() {
  // @@protoc_insertion_point(field_release:injective.exchange.v1beta1.Balance.deposits)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::injective::exchange::v1beta1::Deposit* temp = _impl_.deposits_;
  _impl_.deposits_ = nullptr;
  return temp;
}
inline ::injective::exchange::v1beta1::Deposit* Balance::_internal_mutable_deposits() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.deposits_ == nullptr) {
    auto* p = CreateMaybeMessage<::injective::exchange::v1beta1::Deposit>(GetArenaForAllocation());
    _impl_.deposits_ = p;
  }
  return _impl_.deposits_;
}
inline ::injective::exchange::v1beta1::Deposit* Balance::mutable_deposits() {
  ::injective::exchange::v1beta1::Deposit* _msg = _internal_mutable_deposits();
  // @@protoc_insertion_point(field_mutable:injective.exchange.v1beta1.Balance.deposits)
  return _msg;
}
inline void Balance::set_allocated_deposits(::injective::exchange::v1beta1::Deposit* deposits) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.deposits_);
  }
  if (deposits) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(deposits));
    if (message_arena != submessage_arena) {
      deposits = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, deposits, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.deposits_ = deposits;
  // @@protoc_insertion_point(field_set_allocated:injective.exchange.v1beta1.Balance.deposits)
}

// -------------------------------------------------------------------

// DerivativePosition

// string subaccount_id = 1 [json_name = "subaccountId"];
inline void DerivativePosition::clear_subaccount_id() {
  _impl_.subaccount_id_.ClearToEmpty();
}
inline const std::string& DerivativePosition::subaccount_id() const {
  // @@protoc_insertion_point(field_get:injective.exchange.v1beta1.DerivativePosition.subaccount_id)
  return _internal_subaccount_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DerivativePosition::set_subaccount_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.subaccount_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.exchange.v1beta1.DerivativePosition.subaccount_id)
}
inline std::string* DerivativePosition::mutable_subaccount_id() {
  std::string* _s = _internal_mutable_subaccount_id();
  // @@protoc_insertion_point(field_mutable:injective.exchange.v1beta1.DerivativePosition.subaccount_id)
  return _s;
}
inline const std::string& DerivativePosition::_internal_subaccount_id() const {
  return _impl_.subaccount_id_.Get();
}
inline void DerivativePosition::_internal_set_subaccount_id(const std::string& value) {
  ;


  _impl_.subaccount_id_.Set(value, GetArenaForAllocation());
}
inline std::string* DerivativePosition::_internal_mutable_subaccount_id() {
  ;
  return _impl_.subaccount_id_.Mutable( GetArenaForAllocation());
}
inline std::string* DerivativePosition::release_subaccount_id() {
  // @@protoc_insertion_point(field_release:injective.exchange.v1beta1.DerivativePosition.subaccount_id)
  return _impl_.subaccount_id_.Release();
}
inline void DerivativePosition::set_allocated_subaccount_id(std::string* value) {
  _impl_.subaccount_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.subaccount_id_.IsDefault()) {
          _impl_.subaccount_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.exchange.v1beta1.DerivativePosition.subaccount_id)
}

// string market_id = 2 [json_name = "marketId"];
inline void DerivativePosition::clear_market_id() {
  _impl_.market_id_.ClearToEmpty();
}
inline const std::string& DerivativePosition::market_id() const {
  // @@protoc_insertion_point(field_get:injective.exchange.v1beta1.DerivativePosition.market_id)
  return _internal_market_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DerivativePosition::set_market_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.market_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.exchange.v1beta1.DerivativePosition.market_id)
}
inline std::string* DerivativePosition::mutable_market_id() {
  std::string* _s = _internal_mutable_market_id();
  // @@protoc_insertion_point(field_mutable:injective.exchange.v1beta1.DerivativePosition.market_id)
  return _s;
}
inline const std::string& DerivativePosition::_internal_market_id() const {
  return _impl_.market_id_.Get();
}
inline void DerivativePosition::_internal_set_market_id(const std::string& value) {
  ;


  _impl_.market_id_.Set(value, GetArenaForAllocation());
}
inline std::string* DerivativePosition::_internal_mutable_market_id() {
  ;
  return _impl_.market_id_.Mutable( GetArenaForAllocation());
}
inline std::string* DerivativePosition::release_market_id() {
  // @@protoc_insertion_point(field_release:injective.exchange.v1beta1.DerivativePosition.market_id)
  return _impl_.market_id_.Release();
}
inline void DerivativePosition::set_allocated_market_id(std::string* value) {
  _impl_.market_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.market_id_.IsDefault()) {
          _impl_.market_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.exchange.v1beta1.DerivativePosition.market_id)
}

// .injective.exchange.v1beta1.Position position = 3 [json_name = "position"];
inline bool DerivativePosition::has_position() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.position_ != nullptr);
  return value;
}
inline const ::injective::exchange::v1beta1::Position& DerivativePosition::_internal_position() const {
  const ::injective::exchange::v1beta1::Position* p = _impl_.position_;
  return p != nullptr ? *p : reinterpret_cast<const ::injective::exchange::v1beta1::Position&>(
      ::injective::exchange::v1beta1::_Position_default_instance_);
}
inline const ::injective::exchange::v1beta1::Position& DerivativePosition::position() const {
  // @@protoc_insertion_point(field_get:injective.exchange.v1beta1.DerivativePosition.position)
  return _internal_position();
}
inline void DerivativePosition::unsafe_arena_set_allocated_position(
    ::injective::exchange::v1beta1::Position* position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_);
  }
  _impl_.position_ = position;
  if (position) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:injective.exchange.v1beta1.DerivativePosition.position)
}
inline ::injective::exchange::v1beta1::Position* DerivativePosition::release_position() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::injective::exchange::v1beta1::Position* temp = _impl_.position_;
  _impl_.position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::injective::exchange::v1beta1::Position* DerivativePosition::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:injective.exchange.v1beta1.DerivativePosition.position)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::injective::exchange::v1beta1::Position* temp = _impl_.position_;
  _impl_.position_ = nullptr;
  return temp;
}
inline ::injective::exchange::v1beta1::Position* DerivativePosition::_internal_mutable_position() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.position_ == nullptr) {
    auto* p = CreateMaybeMessage<::injective::exchange::v1beta1::Position>(GetArenaForAllocation());
    _impl_.position_ = p;
  }
  return _impl_.position_;
}
inline ::injective::exchange::v1beta1::Position* DerivativePosition::mutable_position() {
  ::injective::exchange::v1beta1::Position* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:injective.exchange.v1beta1.DerivativePosition.position)
  return _msg;
}
inline void DerivativePosition::set_allocated_position(::injective::exchange::v1beta1::Position* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position));
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.position_ = position;
  // @@protoc_insertion_point(field_set_allocated:injective.exchange.v1beta1.DerivativePosition.position)
}

// -------------------------------------------------------------------

// SubaccountNonce

// string subaccount_id = 1 [json_name = "subaccountId"];
inline void SubaccountNonce::clear_subaccount_id() {
  _impl_.subaccount_id_.ClearToEmpty();
}
inline const std::string& SubaccountNonce::subaccount_id() const {
  // @@protoc_insertion_point(field_get:injective.exchange.v1beta1.SubaccountNonce.subaccount_id)
  return _internal_subaccount_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SubaccountNonce::set_subaccount_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.subaccount_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.exchange.v1beta1.SubaccountNonce.subaccount_id)
}
inline std::string* SubaccountNonce::mutable_subaccount_id() {
  std::string* _s = _internal_mutable_subaccount_id();
  // @@protoc_insertion_point(field_mutable:injective.exchange.v1beta1.SubaccountNonce.subaccount_id)
  return _s;
}
inline const std::string& SubaccountNonce::_internal_subaccount_id() const {
  return _impl_.subaccount_id_.Get();
}
inline void SubaccountNonce::_internal_set_subaccount_id(const std::string& value) {
  ;


  _impl_.subaccount_id_.Set(value, GetArenaForAllocation());
}
inline std::string* SubaccountNonce::_internal_mutable_subaccount_id() {
  ;
  return _impl_.subaccount_id_.Mutable( GetArenaForAllocation());
}
inline std::string* SubaccountNonce::release_subaccount_id() {
  // @@protoc_insertion_point(field_release:injective.exchange.v1beta1.SubaccountNonce.subaccount_id)
  return _impl_.subaccount_id_.Release();
}
inline void SubaccountNonce::set_allocated_subaccount_id(std::string* value) {
  _impl_.subaccount_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.subaccount_id_.IsDefault()) {
          _impl_.subaccount_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.exchange.v1beta1.SubaccountNonce.subaccount_id)
}

// .injective.exchange.v1beta1.SubaccountTradeNonce subaccount_trade_nonce = 2 [json_name = "subaccountTradeNonce", (.gogoproto.nullable) = false];
inline bool SubaccountNonce::has_subaccount_trade_nonce() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.subaccount_trade_nonce_ != nullptr);
  return value;
}
inline const ::injective::exchange::v1beta1::SubaccountTradeNonce& SubaccountNonce::_internal_subaccount_trade_nonce() const {
  const ::injective::exchange::v1beta1::SubaccountTradeNonce* p = _impl_.subaccount_trade_nonce_;
  return p != nullptr ? *p : reinterpret_cast<const ::injective::exchange::v1beta1::SubaccountTradeNonce&>(
      ::injective::exchange::v1beta1::_SubaccountTradeNonce_default_instance_);
}
inline const ::injective::exchange::v1beta1::SubaccountTradeNonce& SubaccountNonce::subaccount_trade_nonce() const {
  // @@protoc_insertion_point(field_get:injective.exchange.v1beta1.SubaccountNonce.subaccount_trade_nonce)
  return _internal_subaccount_trade_nonce();
}
inline void SubaccountNonce::unsafe_arena_set_allocated_subaccount_trade_nonce(
    ::injective::exchange::v1beta1::SubaccountTradeNonce* subaccount_trade_nonce) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.subaccount_trade_nonce_);
  }
  _impl_.subaccount_trade_nonce_ = subaccount_trade_nonce;
  if (subaccount_trade_nonce) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:injective.exchange.v1beta1.SubaccountNonce.subaccount_trade_nonce)
}
inline ::injective::exchange::v1beta1::SubaccountTradeNonce* SubaccountNonce::release_subaccount_trade_nonce() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::injective::exchange::v1beta1::SubaccountTradeNonce* temp = _impl_.subaccount_trade_nonce_;
  _impl_.subaccount_trade_nonce_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::injective::exchange::v1beta1::SubaccountTradeNonce* SubaccountNonce::unsafe_arena_release_subaccount_trade_nonce() {
  // @@protoc_insertion_point(field_release:injective.exchange.v1beta1.SubaccountNonce.subaccount_trade_nonce)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::injective::exchange::v1beta1::SubaccountTradeNonce* temp = _impl_.subaccount_trade_nonce_;
  _impl_.subaccount_trade_nonce_ = nullptr;
  return temp;
}
inline ::injective::exchange::v1beta1::SubaccountTradeNonce* SubaccountNonce::_internal_mutable_subaccount_trade_nonce() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.subaccount_trade_nonce_ == nullptr) {
    auto* p = CreateMaybeMessage<::injective::exchange::v1beta1::SubaccountTradeNonce>(GetArenaForAllocation());
    _impl_.subaccount_trade_nonce_ = p;
  }
  return _impl_.subaccount_trade_nonce_;
}
inline ::injective::exchange::v1beta1::SubaccountTradeNonce* SubaccountNonce::mutable_subaccount_trade_nonce() {
  ::injective::exchange::v1beta1::SubaccountTradeNonce* _msg = _internal_mutable_subaccount_trade_nonce();
  // @@protoc_insertion_point(field_mutable:injective.exchange.v1beta1.SubaccountNonce.subaccount_trade_nonce)
  return _msg;
}
inline void SubaccountNonce::set_allocated_subaccount_trade_nonce(::injective::exchange::v1beta1::SubaccountTradeNonce* subaccount_trade_nonce) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.subaccount_trade_nonce_);
  }
  if (subaccount_trade_nonce) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(subaccount_trade_nonce));
    if (message_arena != submessage_arena) {
      subaccount_trade_nonce = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, subaccount_trade_nonce, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.subaccount_trade_nonce_ = subaccount_trade_nonce;
  // @@protoc_insertion_point(field_set_allocated:injective.exchange.v1beta1.SubaccountNonce.subaccount_trade_nonce)
}

// -------------------------------------------------------------------

// ExpiryFuturesMarketInfoState

// string market_id = 1 [json_name = "marketId"];
inline void ExpiryFuturesMarketInfoState::clear_market_id() {
  _impl_.market_id_.ClearToEmpty();
}
inline const std::string& ExpiryFuturesMarketInfoState::market_id() const {
  // @@protoc_insertion_point(field_get:injective.exchange.v1beta1.ExpiryFuturesMarketInfoState.market_id)
  return _internal_market_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ExpiryFuturesMarketInfoState::set_market_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.market_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.exchange.v1beta1.ExpiryFuturesMarketInfoState.market_id)
}
inline std::string* ExpiryFuturesMarketInfoState::mutable_market_id() {
  std::string* _s = _internal_mutable_market_id();
  // @@protoc_insertion_point(field_mutable:injective.exchange.v1beta1.ExpiryFuturesMarketInfoState.market_id)
  return _s;
}
inline const std::string& ExpiryFuturesMarketInfoState::_internal_market_id() const {
  return _impl_.market_id_.Get();
}
inline void ExpiryFuturesMarketInfoState::_internal_set_market_id(const std::string& value) {
  ;


  _impl_.market_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ExpiryFuturesMarketInfoState::_internal_mutable_market_id() {
  ;
  return _impl_.market_id_.Mutable( GetArenaForAllocation());
}
inline std::string* ExpiryFuturesMarketInfoState::release_market_id() {
  // @@protoc_insertion_point(field_release:injective.exchange.v1beta1.ExpiryFuturesMarketInfoState.market_id)
  return _impl_.market_id_.Release();
}
inline void ExpiryFuturesMarketInfoState::set_allocated_market_id(std::string* value) {
  _impl_.market_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.market_id_.IsDefault()) {
          _impl_.market_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.exchange.v1beta1.ExpiryFuturesMarketInfoState.market_id)
}

// .injective.exchange.v1beta1.ExpiryFuturesMarketInfo market_info = 2 [json_name = "marketInfo"];
inline bool ExpiryFuturesMarketInfoState::has_market_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.market_info_ != nullptr);
  return value;
}
inline const ::injective::exchange::v1beta1::ExpiryFuturesMarketInfo& ExpiryFuturesMarketInfoState::_internal_market_info() const {
  const ::injective::exchange::v1beta1::ExpiryFuturesMarketInfo* p = _impl_.market_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::injective::exchange::v1beta1::ExpiryFuturesMarketInfo&>(
      ::injective::exchange::v1beta1::_ExpiryFuturesMarketInfo_default_instance_);
}
inline const ::injective::exchange::v1beta1::ExpiryFuturesMarketInfo& ExpiryFuturesMarketInfoState::market_info() const {
  // @@protoc_insertion_point(field_get:injective.exchange.v1beta1.ExpiryFuturesMarketInfoState.market_info)
  return _internal_market_info();
}
inline void ExpiryFuturesMarketInfoState::unsafe_arena_set_allocated_market_info(
    ::injective::exchange::v1beta1::ExpiryFuturesMarketInfo* market_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.market_info_);
  }
  _impl_.market_info_ = market_info;
  if (market_info) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:injective.exchange.v1beta1.ExpiryFuturesMarketInfoState.market_info)
}
inline ::injective::exchange::v1beta1::ExpiryFuturesMarketInfo* ExpiryFuturesMarketInfoState::release_market_info() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::injective::exchange::v1beta1::ExpiryFuturesMarketInfo* temp = _impl_.market_info_;
  _impl_.market_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::injective::exchange::v1beta1::ExpiryFuturesMarketInfo* ExpiryFuturesMarketInfoState::unsafe_arena_release_market_info() {
  // @@protoc_insertion_point(field_release:injective.exchange.v1beta1.ExpiryFuturesMarketInfoState.market_info)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::injective::exchange::v1beta1::ExpiryFuturesMarketInfo* temp = _impl_.market_info_;
  _impl_.market_info_ = nullptr;
  return temp;
}
inline ::injective::exchange::v1beta1::ExpiryFuturesMarketInfo* ExpiryFuturesMarketInfoState::_internal_mutable_market_info() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.market_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::injective::exchange::v1beta1::ExpiryFuturesMarketInfo>(GetArenaForAllocation());
    _impl_.market_info_ = p;
  }
  return _impl_.market_info_;
}
inline ::injective::exchange::v1beta1::ExpiryFuturesMarketInfo* ExpiryFuturesMarketInfoState::mutable_market_info() {
  ::injective::exchange::v1beta1::ExpiryFuturesMarketInfo* _msg = _internal_mutable_market_info();
  // @@protoc_insertion_point(field_mutable:injective.exchange.v1beta1.ExpiryFuturesMarketInfoState.market_info)
  return _msg;
}
inline void ExpiryFuturesMarketInfoState::set_allocated_market_info(::injective::exchange::v1beta1::ExpiryFuturesMarketInfo* market_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.market_info_);
  }
  if (market_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(market_info));
    if (message_arena != submessage_arena) {
      market_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, market_info, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.market_info_ = market_info;
  // @@protoc_insertion_point(field_set_allocated:injective.exchange.v1beta1.ExpiryFuturesMarketInfoState.market_info)
}

// -------------------------------------------------------------------

// PerpetualMarketFundingState

// string market_id = 1 [json_name = "marketId"];
inline void PerpetualMarketFundingState::clear_market_id() {
  _impl_.market_id_.ClearToEmpty();
}
inline const std::string& PerpetualMarketFundingState::market_id() const {
  // @@protoc_insertion_point(field_get:injective.exchange.v1beta1.PerpetualMarketFundingState.market_id)
  return _internal_market_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PerpetualMarketFundingState::set_market_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.market_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.exchange.v1beta1.PerpetualMarketFundingState.market_id)
}
inline std::string* PerpetualMarketFundingState::mutable_market_id() {
  std::string* _s = _internal_mutable_market_id();
  // @@protoc_insertion_point(field_mutable:injective.exchange.v1beta1.PerpetualMarketFundingState.market_id)
  return _s;
}
inline const std::string& PerpetualMarketFundingState::_internal_market_id() const {
  return _impl_.market_id_.Get();
}
inline void PerpetualMarketFundingState::_internal_set_market_id(const std::string& value) {
  ;


  _impl_.market_id_.Set(value, GetArenaForAllocation());
}
inline std::string* PerpetualMarketFundingState::_internal_mutable_market_id() {
  ;
  return _impl_.market_id_.Mutable( GetArenaForAllocation());
}
inline std::string* PerpetualMarketFundingState::release_market_id() {
  // @@protoc_insertion_point(field_release:injective.exchange.v1beta1.PerpetualMarketFundingState.market_id)
  return _impl_.market_id_.Release();
}
inline void PerpetualMarketFundingState::set_allocated_market_id(std::string* value) {
  _impl_.market_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.market_id_.IsDefault()) {
          _impl_.market_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.exchange.v1beta1.PerpetualMarketFundingState.market_id)
}

// .injective.exchange.v1beta1.PerpetualMarketFunding funding = 2 [json_name = "funding"];
inline bool PerpetualMarketFundingState::has_funding() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.funding_ != nullptr);
  return value;
}
inline const ::injective::exchange::v1beta1::PerpetualMarketFunding& PerpetualMarketFundingState::_internal_funding() const {
  const ::injective::exchange::v1beta1::PerpetualMarketFunding* p = _impl_.funding_;
  return p != nullptr ? *p : reinterpret_cast<const ::injective::exchange::v1beta1::PerpetualMarketFunding&>(
      ::injective::exchange::v1beta1::_PerpetualMarketFunding_default_instance_);
}
inline const ::injective::exchange::v1beta1::PerpetualMarketFunding& PerpetualMarketFundingState::funding() const {
  // @@protoc_insertion_point(field_get:injective.exchange.v1beta1.PerpetualMarketFundingState.funding)
  return _internal_funding();
}
inline void PerpetualMarketFundingState::unsafe_arena_set_allocated_funding(
    ::injective::exchange::v1beta1::PerpetualMarketFunding* funding) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.funding_);
  }
  _impl_.funding_ = funding;
  if (funding) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:injective.exchange.v1beta1.PerpetualMarketFundingState.funding)
}
inline ::injective::exchange::v1beta1::PerpetualMarketFunding* PerpetualMarketFundingState::release_funding() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::injective::exchange::v1beta1::PerpetualMarketFunding* temp = _impl_.funding_;
  _impl_.funding_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::injective::exchange::v1beta1::PerpetualMarketFunding* PerpetualMarketFundingState::unsafe_arena_release_funding() {
  // @@protoc_insertion_point(field_release:injective.exchange.v1beta1.PerpetualMarketFundingState.funding)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::injective::exchange::v1beta1::PerpetualMarketFunding* temp = _impl_.funding_;
  _impl_.funding_ = nullptr;
  return temp;
}
inline ::injective::exchange::v1beta1::PerpetualMarketFunding* PerpetualMarketFundingState::_internal_mutable_funding() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.funding_ == nullptr) {
    auto* p = CreateMaybeMessage<::injective::exchange::v1beta1::PerpetualMarketFunding>(GetArenaForAllocation());
    _impl_.funding_ = p;
  }
  return _impl_.funding_;
}
inline ::injective::exchange::v1beta1::PerpetualMarketFunding* PerpetualMarketFundingState::mutable_funding() {
  ::injective::exchange::v1beta1::PerpetualMarketFunding* _msg = _internal_mutable_funding();
  // @@protoc_insertion_point(field_mutable:injective.exchange.v1beta1.PerpetualMarketFundingState.funding)
  return _msg;
}
inline void PerpetualMarketFundingState::set_allocated_funding(::injective::exchange::v1beta1::PerpetualMarketFunding* funding) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.funding_);
  }
  if (funding) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(funding));
    if (message_arena != submessage_arena) {
      funding = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, funding, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.funding_ = funding;
  // @@protoc_insertion_point(field_set_allocated:injective.exchange.v1beta1.PerpetualMarketFundingState.funding)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1beta1
}  // namespace exchange
}  // namespace injective


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_injective_2fexchange_2fv1beta1_2fgenesis_2eproto_2epb_2eh

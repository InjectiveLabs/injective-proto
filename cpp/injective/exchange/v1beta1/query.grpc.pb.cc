// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: injective/exchange/v1beta1/query.proto

#include "injective/exchange/v1beta1/query.pb.h"
#include "injective/exchange/v1beta1/query.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace injective {
namespace exchange {
namespace v1beta1 {

static const char* Query_method_names[] = {
  "/injective.exchange.v1beta1.Query/QueryExchangeParams",
  "/injective.exchange.v1beta1.Query/SubaccountDeposits",
  "/injective.exchange.v1beta1.Query/SubaccountDeposit",
  "/injective.exchange.v1beta1.Query/ExchangeBalances",
  "/injective.exchange.v1beta1.Query/AggregateVolume",
  "/injective.exchange.v1beta1.Query/AggregateVolumes",
  "/injective.exchange.v1beta1.Query/AggregateMarketVolume",
  "/injective.exchange.v1beta1.Query/AggregateMarketVolumes",
  "/injective.exchange.v1beta1.Query/DenomDecimal",
  "/injective.exchange.v1beta1.Query/DenomDecimals",
  "/injective.exchange.v1beta1.Query/SpotMarkets",
  "/injective.exchange.v1beta1.Query/SpotMarket",
  "/injective.exchange.v1beta1.Query/FullSpotMarkets",
  "/injective.exchange.v1beta1.Query/FullSpotMarket",
  "/injective.exchange.v1beta1.Query/SpotOrderbook",
  "/injective.exchange.v1beta1.Query/TraderSpotOrders",
  "/injective.exchange.v1beta1.Query/AccountAddressSpotOrders",
  "/injective.exchange.v1beta1.Query/SpotOrdersByHashes",
  "/injective.exchange.v1beta1.Query/SubaccountOrders",
  "/injective.exchange.v1beta1.Query/TraderSpotTransientOrders",
  "/injective.exchange.v1beta1.Query/SpotMidPriceAndTOB",
  "/injective.exchange.v1beta1.Query/DerivativeMidPriceAndTOB",
  "/injective.exchange.v1beta1.Query/DerivativeOrderbook",
  "/injective.exchange.v1beta1.Query/TraderDerivativeOrders",
  "/injective.exchange.v1beta1.Query/AccountAddressDerivativeOrders",
  "/injective.exchange.v1beta1.Query/DerivativeOrdersByHashes",
  "/injective.exchange.v1beta1.Query/TraderDerivativeTransientOrders",
  "/injective.exchange.v1beta1.Query/DerivativeMarkets",
  "/injective.exchange.v1beta1.Query/DerivativeMarket",
  "/injective.exchange.v1beta1.Query/DerivativeMarketAddress",
  "/injective.exchange.v1beta1.Query/SubaccountTradeNonce",
  "/injective.exchange.v1beta1.Query/ExchangeModuleState",
  "/injective.exchange.v1beta1.Query/Positions",
  "/injective.exchange.v1beta1.Query/SubaccountPositions",
  "/injective.exchange.v1beta1.Query/SubaccountPositionInMarket",
  "/injective.exchange.v1beta1.Query/SubaccountEffectivePositionInMarket",
  "/injective.exchange.v1beta1.Query/PerpetualMarketInfo",
  "/injective.exchange.v1beta1.Query/ExpiryFuturesMarketInfo",
  "/injective.exchange.v1beta1.Query/PerpetualMarketFunding",
  "/injective.exchange.v1beta1.Query/SubaccountOrderMetadata",
  "/injective.exchange.v1beta1.Query/TradeRewardPoints",
  "/injective.exchange.v1beta1.Query/PendingTradeRewardPoints",
  "/injective.exchange.v1beta1.Query/TradeRewardCampaign",
  "/injective.exchange.v1beta1.Query/FeeDiscountAccountInfo",
  "/injective.exchange.v1beta1.Query/FeeDiscountSchedule",
  "/injective.exchange.v1beta1.Query/BalanceMismatches",
  "/injective.exchange.v1beta1.Query/BalanceWithBalanceHolds",
  "/injective.exchange.v1beta1.Query/FeeDiscountTierStatistics",
  "/injective.exchange.v1beta1.Query/MitoVaultInfos",
  "/injective.exchange.v1beta1.Query/QueryMarketIDFromVault",
  "/injective.exchange.v1beta1.Query/HistoricalTradeRecords",
  "/injective.exchange.v1beta1.Query/IsOptedOutOfRewards",
  "/injective.exchange.v1beta1.Query/OptedOutOfRewardsAccounts",
  "/injective.exchange.v1beta1.Query/MarketVolatility",
  "/injective.exchange.v1beta1.Query/BinaryOptionsMarkets",
  "/injective.exchange.v1beta1.Query/TraderDerivativeConditionalOrders",
  "/injective.exchange.v1beta1.Query/MarketAtomicExecutionFeeMultiplier",
};

std::unique_ptr< Query::Stub> Query::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Query::Stub> stub(new Query::Stub(channel, options));
  return stub;
}

Query::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_QueryExchangeParams_(Query_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SubaccountDeposits_(Query_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SubaccountDeposit_(Query_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ExchangeBalances_(Query_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AggregateVolume_(Query_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AggregateVolumes_(Query_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AggregateMarketVolume_(Query_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AggregateMarketVolumes_(Query_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DenomDecimal_(Query_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DenomDecimals_(Query_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SpotMarkets_(Query_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SpotMarket_(Query_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_FullSpotMarkets_(Query_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_FullSpotMarket_(Query_method_names[13], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SpotOrderbook_(Query_method_names[14], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_TraderSpotOrders_(Query_method_names[15], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AccountAddressSpotOrders_(Query_method_names[16], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SpotOrdersByHashes_(Query_method_names[17], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SubaccountOrders_(Query_method_names[18], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_TraderSpotTransientOrders_(Query_method_names[19], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SpotMidPriceAndTOB_(Query_method_names[20], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DerivativeMidPriceAndTOB_(Query_method_names[21], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DerivativeOrderbook_(Query_method_names[22], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_TraderDerivativeOrders_(Query_method_names[23], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AccountAddressDerivativeOrders_(Query_method_names[24], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DerivativeOrdersByHashes_(Query_method_names[25], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_TraderDerivativeTransientOrders_(Query_method_names[26], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DerivativeMarkets_(Query_method_names[27], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DerivativeMarket_(Query_method_names[28], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DerivativeMarketAddress_(Query_method_names[29], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SubaccountTradeNonce_(Query_method_names[30], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ExchangeModuleState_(Query_method_names[31], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Positions_(Query_method_names[32], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SubaccountPositions_(Query_method_names[33], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SubaccountPositionInMarket_(Query_method_names[34], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SubaccountEffectivePositionInMarket_(Query_method_names[35], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PerpetualMarketInfo_(Query_method_names[36], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ExpiryFuturesMarketInfo_(Query_method_names[37], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PerpetualMarketFunding_(Query_method_names[38], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SubaccountOrderMetadata_(Query_method_names[39], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_TradeRewardPoints_(Query_method_names[40], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PendingTradeRewardPoints_(Query_method_names[41], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_TradeRewardCampaign_(Query_method_names[42], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_FeeDiscountAccountInfo_(Query_method_names[43], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_FeeDiscountSchedule_(Query_method_names[44], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_BalanceMismatches_(Query_method_names[45], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_BalanceWithBalanceHolds_(Query_method_names[46], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_FeeDiscountTierStatistics_(Query_method_names[47], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_MitoVaultInfos_(Query_method_names[48], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_QueryMarketIDFromVault_(Query_method_names[49], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_HistoricalTradeRecords_(Query_method_names[50], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_IsOptedOutOfRewards_(Query_method_names[51], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_OptedOutOfRewardsAccounts_(Query_method_names[52], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_MarketVolatility_(Query_method_names[53], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_BinaryOptionsMarkets_(Query_method_names[54], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_TraderDerivativeConditionalOrders_(Query_method_names[55], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_MarketAtomicExecutionFeeMultiplier_(Query_method_names[56], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Query::Stub::QueryExchangeParams(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryExchangeParamsRequest& request, ::injective::exchange::v1beta1::QueryExchangeParamsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::exchange::v1beta1::QueryExchangeParamsRequest, ::injective::exchange::v1beta1::QueryExchangeParamsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_QueryExchangeParams_, context, request, response);
}

void Query::Stub::async::QueryExchangeParams(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryExchangeParamsRequest* request, ::injective::exchange::v1beta1::QueryExchangeParamsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::exchange::v1beta1::QueryExchangeParamsRequest, ::injective::exchange::v1beta1::QueryExchangeParamsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_QueryExchangeParams_, context, request, response, std::move(f));
}

void Query::Stub::async::QueryExchangeParams(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryExchangeParamsRequest* request, ::injective::exchange::v1beta1::QueryExchangeParamsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_QueryExchangeParams_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::QueryExchangeParamsResponse>* Query::Stub::PrepareAsyncQueryExchangeParamsRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryExchangeParamsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::exchange::v1beta1::QueryExchangeParamsResponse, ::injective::exchange::v1beta1::QueryExchangeParamsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_QueryExchangeParams_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::QueryExchangeParamsResponse>* Query::Stub::AsyncQueryExchangeParamsRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryExchangeParamsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncQueryExchangeParamsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::SubaccountDeposits(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QuerySubaccountDepositsRequest& request, ::injective::exchange::v1beta1::QuerySubaccountDepositsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::exchange::v1beta1::QuerySubaccountDepositsRequest, ::injective::exchange::v1beta1::QuerySubaccountDepositsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SubaccountDeposits_, context, request, response);
}

void Query::Stub::async::SubaccountDeposits(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QuerySubaccountDepositsRequest* request, ::injective::exchange::v1beta1::QuerySubaccountDepositsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::exchange::v1beta1::QuerySubaccountDepositsRequest, ::injective::exchange::v1beta1::QuerySubaccountDepositsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SubaccountDeposits_, context, request, response, std::move(f));
}

void Query::Stub::async::SubaccountDeposits(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QuerySubaccountDepositsRequest* request, ::injective::exchange::v1beta1::QuerySubaccountDepositsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SubaccountDeposits_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::QuerySubaccountDepositsResponse>* Query::Stub::PrepareAsyncSubaccountDepositsRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QuerySubaccountDepositsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::exchange::v1beta1::QuerySubaccountDepositsResponse, ::injective::exchange::v1beta1::QuerySubaccountDepositsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SubaccountDeposits_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::QuerySubaccountDepositsResponse>* Query::Stub::AsyncSubaccountDepositsRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QuerySubaccountDepositsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSubaccountDepositsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::SubaccountDeposit(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QuerySubaccountDepositRequest& request, ::injective::exchange::v1beta1::QuerySubaccountDepositResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::exchange::v1beta1::QuerySubaccountDepositRequest, ::injective::exchange::v1beta1::QuerySubaccountDepositResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SubaccountDeposit_, context, request, response);
}

void Query::Stub::async::SubaccountDeposit(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QuerySubaccountDepositRequest* request, ::injective::exchange::v1beta1::QuerySubaccountDepositResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::exchange::v1beta1::QuerySubaccountDepositRequest, ::injective::exchange::v1beta1::QuerySubaccountDepositResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SubaccountDeposit_, context, request, response, std::move(f));
}

void Query::Stub::async::SubaccountDeposit(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QuerySubaccountDepositRequest* request, ::injective::exchange::v1beta1::QuerySubaccountDepositResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SubaccountDeposit_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::QuerySubaccountDepositResponse>* Query::Stub::PrepareAsyncSubaccountDepositRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QuerySubaccountDepositRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::exchange::v1beta1::QuerySubaccountDepositResponse, ::injective::exchange::v1beta1::QuerySubaccountDepositRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SubaccountDeposit_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::QuerySubaccountDepositResponse>* Query::Stub::AsyncSubaccountDepositRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QuerySubaccountDepositRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSubaccountDepositRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::ExchangeBalances(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryExchangeBalancesRequest& request, ::injective::exchange::v1beta1::QueryExchangeBalancesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::exchange::v1beta1::QueryExchangeBalancesRequest, ::injective::exchange::v1beta1::QueryExchangeBalancesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ExchangeBalances_, context, request, response);
}

void Query::Stub::async::ExchangeBalances(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryExchangeBalancesRequest* request, ::injective::exchange::v1beta1::QueryExchangeBalancesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::exchange::v1beta1::QueryExchangeBalancesRequest, ::injective::exchange::v1beta1::QueryExchangeBalancesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExchangeBalances_, context, request, response, std::move(f));
}

void Query::Stub::async::ExchangeBalances(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryExchangeBalancesRequest* request, ::injective::exchange::v1beta1::QueryExchangeBalancesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExchangeBalances_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::QueryExchangeBalancesResponse>* Query::Stub::PrepareAsyncExchangeBalancesRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryExchangeBalancesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::exchange::v1beta1::QueryExchangeBalancesResponse, ::injective::exchange::v1beta1::QueryExchangeBalancesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ExchangeBalances_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::QueryExchangeBalancesResponse>* Query::Stub::AsyncExchangeBalancesRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryExchangeBalancesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncExchangeBalancesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::AggregateVolume(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryAggregateVolumeRequest& request, ::injective::exchange::v1beta1::QueryAggregateVolumeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::exchange::v1beta1::QueryAggregateVolumeRequest, ::injective::exchange::v1beta1::QueryAggregateVolumeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AggregateVolume_, context, request, response);
}

void Query::Stub::async::AggregateVolume(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryAggregateVolumeRequest* request, ::injective::exchange::v1beta1::QueryAggregateVolumeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::exchange::v1beta1::QueryAggregateVolumeRequest, ::injective::exchange::v1beta1::QueryAggregateVolumeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AggregateVolume_, context, request, response, std::move(f));
}

void Query::Stub::async::AggregateVolume(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryAggregateVolumeRequest* request, ::injective::exchange::v1beta1::QueryAggregateVolumeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AggregateVolume_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::QueryAggregateVolumeResponse>* Query::Stub::PrepareAsyncAggregateVolumeRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryAggregateVolumeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::exchange::v1beta1::QueryAggregateVolumeResponse, ::injective::exchange::v1beta1::QueryAggregateVolumeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AggregateVolume_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::QueryAggregateVolumeResponse>* Query::Stub::AsyncAggregateVolumeRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryAggregateVolumeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAggregateVolumeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::AggregateVolumes(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryAggregateVolumesRequest& request, ::injective::exchange::v1beta1::QueryAggregateVolumesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::exchange::v1beta1::QueryAggregateVolumesRequest, ::injective::exchange::v1beta1::QueryAggregateVolumesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AggregateVolumes_, context, request, response);
}

void Query::Stub::async::AggregateVolumes(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryAggregateVolumesRequest* request, ::injective::exchange::v1beta1::QueryAggregateVolumesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::exchange::v1beta1::QueryAggregateVolumesRequest, ::injective::exchange::v1beta1::QueryAggregateVolumesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AggregateVolumes_, context, request, response, std::move(f));
}

void Query::Stub::async::AggregateVolumes(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryAggregateVolumesRequest* request, ::injective::exchange::v1beta1::QueryAggregateVolumesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AggregateVolumes_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::QueryAggregateVolumesResponse>* Query::Stub::PrepareAsyncAggregateVolumesRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryAggregateVolumesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::exchange::v1beta1::QueryAggregateVolumesResponse, ::injective::exchange::v1beta1::QueryAggregateVolumesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AggregateVolumes_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::QueryAggregateVolumesResponse>* Query::Stub::AsyncAggregateVolumesRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryAggregateVolumesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAggregateVolumesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::AggregateMarketVolume(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryAggregateMarketVolumeRequest& request, ::injective::exchange::v1beta1::QueryAggregateMarketVolumeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::exchange::v1beta1::QueryAggregateMarketVolumeRequest, ::injective::exchange::v1beta1::QueryAggregateMarketVolumeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AggregateMarketVolume_, context, request, response);
}

void Query::Stub::async::AggregateMarketVolume(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryAggregateMarketVolumeRequest* request, ::injective::exchange::v1beta1::QueryAggregateMarketVolumeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::exchange::v1beta1::QueryAggregateMarketVolumeRequest, ::injective::exchange::v1beta1::QueryAggregateMarketVolumeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AggregateMarketVolume_, context, request, response, std::move(f));
}

void Query::Stub::async::AggregateMarketVolume(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryAggregateMarketVolumeRequest* request, ::injective::exchange::v1beta1::QueryAggregateMarketVolumeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AggregateMarketVolume_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::QueryAggregateMarketVolumeResponse>* Query::Stub::PrepareAsyncAggregateMarketVolumeRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryAggregateMarketVolumeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::exchange::v1beta1::QueryAggregateMarketVolumeResponse, ::injective::exchange::v1beta1::QueryAggregateMarketVolumeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AggregateMarketVolume_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::QueryAggregateMarketVolumeResponse>* Query::Stub::AsyncAggregateMarketVolumeRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryAggregateMarketVolumeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAggregateMarketVolumeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::AggregateMarketVolumes(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryAggregateMarketVolumesRequest& request, ::injective::exchange::v1beta1::QueryAggregateMarketVolumesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::exchange::v1beta1::QueryAggregateMarketVolumesRequest, ::injective::exchange::v1beta1::QueryAggregateMarketVolumesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AggregateMarketVolumes_, context, request, response);
}

void Query::Stub::async::AggregateMarketVolumes(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryAggregateMarketVolumesRequest* request, ::injective::exchange::v1beta1::QueryAggregateMarketVolumesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::exchange::v1beta1::QueryAggregateMarketVolumesRequest, ::injective::exchange::v1beta1::QueryAggregateMarketVolumesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AggregateMarketVolumes_, context, request, response, std::move(f));
}

void Query::Stub::async::AggregateMarketVolumes(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryAggregateMarketVolumesRequest* request, ::injective::exchange::v1beta1::QueryAggregateMarketVolumesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AggregateMarketVolumes_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::QueryAggregateMarketVolumesResponse>* Query::Stub::PrepareAsyncAggregateMarketVolumesRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryAggregateMarketVolumesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::exchange::v1beta1::QueryAggregateMarketVolumesResponse, ::injective::exchange::v1beta1::QueryAggregateMarketVolumesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AggregateMarketVolumes_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::QueryAggregateMarketVolumesResponse>* Query::Stub::AsyncAggregateMarketVolumesRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryAggregateMarketVolumesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAggregateMarketVolumesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::DenomDecimal(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryDenomDecimalRequest& request, ::injective::exchange::v1beta1::QueryDenomDecimalResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::exchange::v1beta1::QueryDenomDecimalRequest, ::injective::exchange::v1beta1::QueryDenomDecimalResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DenomDecimal_, context, request, response);
}

void Query::Stub::async::DenomDecimal(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryDenomDecimalRequest* request, ::injective::exchange::v1beta1::QueryDenomDecimalResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::exchange::v1beta1::QueryDenomDecimalRequest, ::injective::exchange::v1beta1::QueryDenomDecimalResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DenomDecimal_, context, request, response, std::move(f));
}

void Query::Stub::async::DenomDecimal(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryDenomDecimalRequest* request, ::injective::exchange::v1beta1::QueryDenomDecimalResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DenomDecimal_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::QueryDenomDecimalResponse>* Query::Stub::PrepareAsyncDenomDecimalRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryDenomDecimalRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::exchange::v1beta1::QueryDenomDecimalResponse, ::injective::exchange::v1beta1::QueryDenomDecimalRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DenomDecimal_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::QueryDenomDecimalResponse>* Query::Stub::AsyncDenomDecimalRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryDenomDecimalRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDenomDecimalRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::DenomDecimals(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryDenomDecimalsRequest& request, ::injective::exchange::v1beta1::QueryDenomDecimalsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::exchange::v1beta1::QueryDenomDecimalsRequest, ::injective::exchange::v1beta1::QueryDenomDecimalsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DenomDecimals_, context, request, response);
}

void Query::Stub::async::DenomDecimals(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryDenomDecimalsRequest* request, ::injective::exchange::v1beta1::QueryDenomDecimalsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::exchange::v1beta1::QueryDenomDecimalsRequest, ::injective::exchange::v1beta1::QueryDenomDecimalsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DenomDecimals_, context, request, response, std::move(f));
}

void Query::Stub::async::DenomDecimals(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryDenomDecimalsRequest* request, ::injective::exchange::v1beta1::QueryDenomDecimalsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DenomDecimals_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::QueryDenomDecimalsResponse>* Query::Stub::PrepareAsyncDenomDecimalsRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryDenomDecimalsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::exchange::v1beta1::QueryDenomDecimalsResponse, ::injective::exchange::v1beta1::QueryDenomDecimalsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DenomDecimals_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::QueryDenomDecimalsResponse>* Query::Stub::AsyncDenomDecimalsRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryDenomDecimalsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDenomDecimalsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::SpotMarkets(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QuerySpotMarketsRequest& request, ::injective::exchange::v1beta1::QuerySpotMarketsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::exchange::v1beta1::QuerySpotMarketsRequest, ::injective::exchange::v1beta1::QuerySpotMarketsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SpotMarkets_, context, request, response);
}

void Query::Stub::async::SpotMarkets(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QuerySpotMarketsRequest* request, ::injective::exchange::v1beta1::QuerySpotMarketsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::exchange::v1beta1::QuerySpotMarketsRequest, ::injective::exchange::v1beta1::QuerySpotMarketsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SpotMarkets_, context, request, response, std::move(f));
}

void Query::Stub::async::SpotMarkets(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QuerySpotMarketsRequest* request, ::injective::exchange::v1beta1::QuerySpotMarketsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SpotMarkets_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::QuerySpotMarketsResponse>* Query::Stub::PrepareAsyncSpotMarketsRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QuerySpotMarketsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::exchange::v1beta1::QuerySpotMarketsResponse, ::injective::exchange::v1beta1::QuerySpotMarketsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SpotMarkets_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::QuerySpotMarketsResponse>* Query::Stub::AsyncSpotMarketsRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QuerySpotMarketsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSpotMarketsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::SpotMarket(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QuerySpotMarketRequest& request, ::injective::exchange::v1beta1::QuerySpotMarketResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::exchange::v1beta1::QuerySpotMarketRequest, ::injective::exchange::v1beta1::QuerySpotMarketResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SpotMarket_, context, request, response);
}

void Query::Stub::async::SpotMarket(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QuerySpotMarketRequest* request, ::injective::exchange::v1beta1::QuerySpotMarketResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::exchange::v1beta1::QuerySpotMarketRequest, ::injective::exchange::v1beta1::QuerySpotMarketResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SpotMarket_, context, request, response, std::move(f));
}

void Query::Stub::async::SpotMarket(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QuerySpotMarketRequest* request, ::injective::exchange::v1beta1::QuerySpotMarketResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SpotMarket_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::QuerySpotMarketResponse>* Query::Stub::PrepareAsyncSpotMarketRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QuerySpotMarketRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::exchange::v1beta1::QuerySpotMarketResponse, ::injective::exchange::v1beta1::QuerySpotMarketRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SpotMarket_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::QuerySpotMarketResponse>* Query::Stub::AsyncSpotMarketRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QuerySpotMarketRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSpotMarketRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::FullSpotMarkets(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryFullSpotMarketsRequest& request, ::injective::exchange::v1beta1::QueryFullSpotMarketsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::exchange::v1beta1::QueryFullSpotMarketsRequest, ::injective::exchange::v1beta1::QueryFullSpotMarketsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_FullSpotMarkets_, context, request, response);
}

void Query::Stub::async::FullSpotMarkets(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryFullSpotMarketsRequest* request, ::injective::exchange::v1beta1::QueryFullSpotMarketsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::exchange::v1beta1::QueryFullSpotMarketsRequest, ::injective::exchange::v1beta1::QueryFullSpotMarketsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FullSpotMarkets_, context, request, response, std::move(f));
}

void Query::Stub::async::FullSpotMarkets(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryFullSpotMarketsRequest* request, ::injective::exchange::v1beta1::QueryFullSpotMarketsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FullSpotMarkets_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::QueryFullSpotMarketsResponse>* Query::Stub::PrepareAsyncFullSpotMarketsRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryFullSpotMarketsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::exchange::v1beta1::QueryFullSpotMarketsResponse, ::injective::exchange::v1beta1::QueryFullSpotMarketsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_FullSpotMarkets_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::QueryFullSpotMarketsResponse>* Query::Stub::AsyncFullSpotMarketsRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryFullSpotMarketsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncFullSpotMarketsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::FullSpotMarket(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryFullSpotMarketRequest& request, ::injective::exchange::v1beta1::QueryFullSpotMarketResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::exchange::v1beta1::QueryFullSpotMarketRequest, ::injective::exchange::v1beta1::QueryFullSpotMarketResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_FullSpotMarket_, context, request, response);
}

void Query::Stub::async::FullSpotMarket(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryFullSpotMarketRequest* request, ::injective::exchange::v1beta1::QueryFullSpotMarketResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::exchange::v1beta1::QueryFullSpotMarketRequest, ::injective::exchange::v1beta1::QueryFullSpotMarketResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FullSpotMarket_, context, request, response, std::move(f));
}

void Query::Stub::async::FullSpotMarket(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryFullSpotMarketRequest* request, ::injective::exchange::v1beta1::QueryFullSpotMarketResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FullSpotMarket_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::QueryFullSpotMarketResponse>* Query::Stub::PrepareAsyncFullSpotMarketRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryFullSpotMarketRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::exchange::v1beta1::QueryFullSpotMarketResponse, ::injective::exchange::v1beta1::QueryFullSpotMarketRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_FullSpotMarket_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::QueryFullSpotMarketResponse>* Query::Stub::AsyncFullSpotMarketRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryFullSpotMarketRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncFullSpotMarketRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::SpotOrderbook(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QuerySpotOrderbookRequest& request, ::injective::exchange::v1beta1::QuerySpotOrderbookResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::exchange::v1beta1::QuerySpotOrderbookRequest, ::injective::exchange::v1beta1::QuerySpotOrderbookResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SpotOrderbook_, context, request, response);
}

void Query::Stub::async::SpotOrderbook(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QuerySpotOrderbookRequest* request, ::injective::exchange::v1beta1::QuerySpotOrderbookResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::exchange::v1beta1::QuerySpotOrderbookRequest, ::injective::exchange::v1beta1::QuerySpotOrderbookResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SpotOrderbook_, context, request, response, std::move(f));
}

void Query::Stub::async::SpotOrderbook(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QuerySpotOrderbookRequest* request, ::injective::exchange::v1beta1::QuerySpotOrderbookResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SpotOrderbook_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::QuerySpotOrderbookResponse>* Query::Stub::PrepareAsyncSpotOrderbookRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QuerySpotOrderbookRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::exchange::v1beta1::QuerySpotOrderbookResponse, ::injective::exchange::v1beta1::QuerySpotOrderbookRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SpotOrderbook_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::QuerySpotOrderbookResponse>* Query::Stub::AsyncSpotOrderbookRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QuerySpotOrderbookRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSpotOrderbookRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::TraderSpotOrders(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryTraderSpotOrdersRequest& request, ::injective::exchange::v1beta1::QueryTraderSpotOrdersResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::exchange::v1beta1::QueryTraderSpotOrdersRequest, ::injective::exchange::v1beta1::QueryTraderSpotOrdersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_TraderSpotOrders_, context, request, response);
}

void Query::Stub::async::TraderSpotOrders(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryTraderSpotOrdersRequest* request, ::injective::exchange::v1beta1::QueryTraderSpotOrdersResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::exchange::v1beta1::QueryTraderSpotOrdersRequest, ::injective::exchange::v1beta1::QueryTraderSpotOrdersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TraderSpotOrders_, context, request, response, std::move(f));
}

void Query::Stub::async::TraderSpotOrders(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryTraderSpotOrdersRequest* request, ::injective::exchange::v1beta1::QueryTraderSpotOrdersResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TraderSpotOrders_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::QueryTraderSpotOrdersResponse>* Query::Stub::PrepareAsyncTraderSpotOrdersRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryTraderSpotOrdersRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::exchange::v1beta1::QueryTraderSpotOrdersResponse, ::injective::exchange::v1beta1::QueryTraderSpotOrdersRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_TraderSpotOrders_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::QueryTraderSpotOrdersResponse>* Query::Stub::AsyncTraderSpotOrdersRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryTraderSpotOrdersRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncTraderSpotOrdersRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::AccountAddressSpotOrders(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryAccountAddressSpotOrdersRequest& request, ::injective::exchange::v1beta1::QueryAccountAddressSpotOrdersResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::exchange::v1beta1::QueryAccountAddressSpotOrdersRequest, ::injective::exchange::v1beta1::QueryAccountAddressSpotOrdersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AccountAddressSpotOrders_, context, request, response);
}

void Query::Stub::async::AccountAddressSpotOrders(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryAccountAddressSpotOrdersRequest* request, ::injective::exchange::v1beta1::QueryAccountAddressSpotOrdersResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::exchange::v1beta1::QueryAccountAddressSpotOrdersRequest, ::injective::exchange::v1beta1::QueryAccountAddressSpotOrdersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AccountAddressSpotOrders_, context, request, response, std::move(f));
}

void Query::Stub::async::AccountAddressSpotOrders(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryAccountAddressSpotOrdersRequest* request, ::injective::exchange::v1beta1::QueryAccountAddressSpotOrdersResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AccountAddressSpotOrders_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::QueryAccountAddressSpotOrdersResponse>* Query::Stub::PrepareAsyncAccountAddressSpotOrdersRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryAccountAddressSpotOrdersRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::exchange::v1beta1::QueryAccountAddressSpotOrdersResponse, ::injective::exchange::v1beta1::QueryAccountAddressSpotOrdersRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AccountAddressSpotOrders_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::QueryAccountAddressSpotOrdersResponse>* Query::Stub::AsyncAccountAddressSpotOrdersRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryAccountAddressSpotOrdersRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAccountAddressSpotOrdersRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::SpotOrdersByHashes(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QuerySpotOrdersByHashesRequest& request, ::injective::exchange::v1beta1::QuerySpotOrdersByHashesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::exchange::v1beta1::QuerySpotOrdersByHashesRequest, ::injective::exchange::v1beta1::QuerySpotOrdersByHashesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SpotOrdersByHashes_, context, request, response);
}

void Query::Stub::async::SpotOrdersByHashes(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QuerySpotOrdersByHashesRequest* request, ::injective::exchange::v1beta1::QuerySpotOrdersByHashesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::exchange::v1beta1::QuerySpotOrdersByHashesRequest, ::injective::exchange::v1beta1::QuerySpotOrdersByHashesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SpotOrdersByHashes_, context, request, response, std::move(f));
}

void Query::Stub::async::SpotOrdersByHashes(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QuerySpotOrdersByHashesRequest* request, ::injective::exchange::v1beta1::QuerySpotOrdersByHashesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SpotOrdersByHashes_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::QuerySpotOrdersByHashesResponse>* Query::Stub::PrepareAsyncSpotOrdersByHashesRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QuerySpotOrdersByHashesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::exchange::v1beta1::QuerySpotOrdersByHashesResponse, ::injective::exchange::v1beta1::QuerySpotOrdersByHashesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SpotOrdersByHashes_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::QuerySpotOrdersByHashesResponse>* Query::Stub::AsyncSpotOrdersByHashesRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QuerySpotOrdersByHashesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSpotOrdersByHashesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::SubaccountOrders(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QuerySubaccountOrdersRequest& request, ::injective::exchange::v1beta1::QuerySubaccountOrdersResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::exchange::v1beta1::QuerySubaccountOrdersRequest, ::injective::exchange::v1beta1::QuerySubaccountOrdersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SubaccountOrders_, context, request, response);
}

void Query::Stub::async::SubaccountOrders(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QuerySubaccountOrdersRequest* request, ::injective::exchange::v1beta1::QuerySubaccountOrdersResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::exchange::v1beta1::QuerySubaccountOrdersRequest, ::injective::exchange::v1beta1::QuerySubaccountOrdersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SubaccountOrders_, context, request, response, std::move(f));
}

void Query::Stub::async::SubaccountOrders(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QuerySubaccountOrdersRequest* request, ::injective::exchange::v1beta1::QuerySubaccountOrdersResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SubaccountOrders_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::QuerySubaccountOrdersResponse>* Query::Stub::PrepareAsyncSubaccountOrdersRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QuerySubaccountOrdersRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::exchange::v1beta1::QuerySubaccountOrdersResponse, ::injective::exchange::v1beta1::QuerySubaccountOrdersRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SubaccountOrders_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::QuerySubaccountOrdersResponse>* Query::Stub::AsyncSubaccountOrdersRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QuerySubaccountOrdersRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSubaccountOrdersRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::TraderSpotTransientOrders(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryTraderSpotOrdersRequest& request, ::injective::exchange::v1beta1::QueryTraderSpotOrdersResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::exchange::v1beta1::QueryTraderSpotOrdersRequest, ::injective::exchange::v1beta1::QueryTraderSpotOrdersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_TraderSpotTransientOrders_, context, request, response);
}

void Query::Stub::async::TraderSpotTransientOrders(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryTraderSpotOrdersRequest* request, ::injective::exchange::v1beta1::QueryTraderSpotOrdersResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::exchange::v1beta1::QueryTraderSpotOrdersRequest, ::injective::exchange::v1beta1::QueryTraderSpotOrdersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TraderSpotTransientOrders_, context, request, response, std::move(f));
}

void Query::Stub::async::TraderSpotTransientOrders(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryTraderSpotOrdersRequest* request, ::injective::exchange::v1beta1::QueryTraderSpotOrdersResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TraderSpotTransientOrders_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::QueryTraderSpotOrdersResponse>* Query::Stub::PrepareAsyncTraderSpotTransientOrdersRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryTraderSpotOrdersRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::exchange::v1beta1::QueryTraderSpotOrdersResponse, ::injective::exchange::v1beta1::QueryTraderSpotOrdersRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_TraderSpotTransientOrders_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::QueryTraderSpotOrdersResponse>* Query::Stub::AsyncTraderSpotTransientOrdersRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryTraderSpotOrdersRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncTraderSpotTransientOrdersRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::SpotMidPriceAndTOB(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QuerySpotMidPriceAndTOBRequest& request, ::injective::exchange::v1beta1::QuerySpotMidPriceAndTOBResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::exchange::v1beta1::QuerySpotMidPriceAndTOBRequest, ::injective::exchange::v1beta1::QuerySpotMidPriceAndTOBResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SpotMidPriceAndTOB_, context, request, response);
}

void Query::Stub::async::SpotMidPriceAndTOB(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QuerySpotMidPriceAndTOBRequest* request, ::injective::exchange::v1beta1::QuerySpotMidPriceAndTOBResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::exchange::v1beta1::QuerySpotMidPriceAndTOBRequest, ::injective::exchange::v1beta1::QuerySpotMidPriceAndTOBResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SpotMidPriceAndTOB_, context, request, response, std::move(f));
}

void Query::Stub::async::SpotMidPriceAndTOB(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QuerySpotMidPriceAndTOBRequest* request, ::injective::exchange::v1beta1::QuerySpotMidPriceAndTOBResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SpotMidPriceAndTOB_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::QuerySpotMidPriceAndTOBResponse>* Query::Stub::PrepareAsyncSpotMidPriceAndTOBRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QuerySpotMidPriceAndTOBRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::exchange::v1beta1::QuerySpotMidPriceAndTOBResponse, ::injective::exchange::v1beta1::QuerySpotMidPriceAndTOBRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SpotMidPriceAndTOB_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::QuerySpotMidPriceAndTOBResponse>* Query::Stub::AsyncSpotMidPriceAndTOBRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QuerySpotMidPriceAndTOBRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSpotMidPriceAndTOBRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::DerivativeMidPriceAndTOB(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryDerivativeMidPriceAndTOBRequest& request, ::injective::exchange::v1beta1::QueryDerivativeMidPriceAndTOBResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::exchange::v1beta1::QueryDerivativeMidPriceAndTOBRequest, ::injective::exchange::v1beta1::QueryDerivativeMidPriceAndTOBResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DerivativeMidPriceAndTOB_, context, request, response);
}

void Query::Stub::async::DerivativeMidPriceAndTOB(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryDerivativeMidPriceAndTOBRequest* request, ::injective::exchange::v1beta1::QueryDerivativeMidPriceAndTOBResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::exchange::v1beta1::QueryDerivativeMidPriceAndTOBRequest, ::injective::exchange::v1beta1::QueryDerivativeMidPriceAndTOBResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DerivativeMidPriceAndTOB_, context, request, response, std::move(f));
}

void Query::Stub::async::DerivativeMidPriceAndTOB(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryDerivativeMidPriceAndTOBRequest* request, ::injective::exchange::v1beta1::QueryDerivativeMidPriceAndTOBResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DerivativeMidPriceAndTOB_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::QueryDerivativeMidPriceAndTOBResponse>* Query::Stub::PrepareAsyncDerivativeMidPriceAndTOBRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryDerivativeMidPriceAndTOBRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::exchange::v1beta1::QueryDerivativeMidPriceAndTOBResponse, ::injective::exchange::v1beta1::QueryDerivativeMidPriceAndTOBRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DerivativeMidPriceAndTOB_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::QueryDerivativeMidPriceAndTOBResponse>* Query::Stub::AsyncDerivativeMidPriceAndTOBRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryDerivativeMidPriceAndTOBRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDerivativeMidPriceAndTOBRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::DerivativeOrderbook(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryDerivativeOrderbookRequest& request, ::injective::exchange::v1beta1::QueryDerivativeOrderbookResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::exchange::v1beta1::QueryDerivativeOrderbookRequest, ::injective::exchange::v1beta1::QueryDerivativeOrderbookResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DerivativeOrderbook_, context, request, response);
}

void Query::Stub::async::DerivativeOrderbook(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryDerivativeOrderbookRequest* request, ::injective::exchange::v1beta1::QueryDerivativeOrderbookResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::exchange::v1beta1::QueryDerivativeOrderbookRequest, ::injective::exchange::v1beta1::QueryDerivativeOrderbookResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DerivativeOrderbook_, context, request, response, std::move(f));
}

void Query::Stub::async::DerivativeOrderbook(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryDerivativeOrderbookRequest* request, ::injective::exchange::v1beta1::QueryDerivativeOrderbookResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DerivativeOrderbook_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::QueryDerivativeOrderbookResponse>* Query::Stub::PrepareAsyncDerivativeOrderbookRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryDerivativeOrderbookRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::exchange::v1beta1::QueryDerivativeOrderbookResponse, ::injective::exchange::v1beta1::QueryDerivativeOrderbookRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DerivativeOrderbook_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::QueryDerivativeOrderbookResponse>* Query::Stub::AsyncDerivativeOrderbookRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryDerivativeOrderbookRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDerivativeOrderbookRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::TraderDerivativeOrders(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryTraderDerivativeOrdersRequest& request, ::injective::exchange::v1beta1::QueryTraderDerivativeOrdersResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::exchange::v1beta1::QueryTraderDerivativeOrdersRequest, ::injective::exchange::v1beta1::QueryTraderDerivativeOrdersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_TraderDerivativeOrders_, context, request, response);
}

void Query::Stub::async::TraderDerivativeOrders(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryTraderDerivativeOrdersRequest* request, ::injective::exchange::v1beta1::QueryTraderDerivativeOrdersResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::exchange::v1beta1::QueryTraderDerivativeOrdersRequest, ::injective::exchange::v1beta1::QueryTraderDerivativeOrdersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TraderDerivativeOrders_, context, request, response, std::move(f));
}

void Query::Stub::async::TraderDerivativeOrders(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryTraderDerivativeOrdersRequest* request, ::injective::exchange::v1beta1::QueryTraderDerivativeOrdersResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TraderDerivativeOrders_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::QueryTraderDerivativeOrdersResponse>* Query::Stub::PrepareAsyncTraderDerivativeOrdersRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryTraderDerivativeOrdersRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::exchange::v1beta1::QueryTraderDerivativeOrdersResponse, ::injective::exchange::v1beta1::QueryTraderDerivativeOrdersRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_TraderDerivativeOrders_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::QueryTraderDerivativeOrdersResponse>* Query::Stub::AsyncTraderDerivativeOrdersRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryTraderDerivativeOrdersRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncTraderDerivativeOrdersRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::AccountAddressDerivativeOrders(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryAccountAddressDerivativeOrdersRequest& request, ::injective::exchange::v1beta1::QueryAccountAddressDerivativeOrdersResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::exchange::v1beta1::QueryAccountAddressDerivativeOrdersRequest, ::injective::exchange::v1beta1::QueryAccountAddressDerivativeOrdersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AccountAddressDerivativeOrders_, context, request, response);
}

void Query::Stub::async::AccountAddressDerivativeOrders(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryAccountAddressDerivativeOrdersRequest* request, ::injective::exchange::v1beta1::QueryAccountAddressDerivativeOrdersResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::exchange::v1beta1::QueryAccountAddressDerivativeOrdersRequest, ::injective::exchange::v1beta1::QueryAccountAddressDerivativeOrdersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AccountAddressDerivativeOrders_, context, request, response, std::move(f));
}

void Query::Stub::async::AccountAddressDerivativeOrders(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryAccountAddressDerivativeOrdersRequest* request, ::injective::exchange::v1beta1::QueryAccountAddressDerivativeOrdersResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AccountAddressDerivativeOrders_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::QueryAccountAddressDerivativeOrdersResponse>* Query::Stub::PrepareAsyncAccountAddressDerivativeOrdersRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryAccountAddressDerivativeOrdersRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::exchange::v1beta1::QueryAccountAddressDerivativeOrdersResponse, ::injective::exchange::v1beta1::QueryAccountAddressDerivativeOrdersRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AccountAddressDerivativeOrders_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::QueryAccountAddressDerivativeOrdersResponse>* Query::Stub::AsyncAccountAddressDerivativeOrdersRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryAccountAddressDerivativeOrdersRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAccountAddressDerivativeOrdersRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::DerivativeOrdersByHashes(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryDerivativeOrdersByHashesRequest& request, ::injective::exchange::v1beta1::QueryDerivativeOrdersByHashesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::exchange::v1beta1::QueryDerivativeOrdersByHashesRequest, ::injective::exchange::v1beta1::QueryDerivativeOrdersByHashesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DerivativeOrdersByHashes_, context, request, response);
}

void Query::Stub::async::DerivativeOrdersByHashes(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryDerivativeOrdersByHashesRequest* request, ::injective::exchange::v1beta1::QueryDerivativeOrdersByHashesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::exchange::v1beta1::QueryDerivativeOrdersByHashesRequest, ::injective::exchange::v1beta1::QueryDerivativeOrdersByHashesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DerivativeOrdersByHashes_, context, request, response, std::move(f));
}

void Query::Stub::async::DerivativeOrdersByHashes(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryDerivativeOrdersByHashesRequest* request, ::injective::exchange::v1beta1::QueryDerivativeOrdersByHashesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DerivativeOrdersByHashes_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::QueryDerivativeOrdersByHashesResponse>* Query::Stub::PrepareAsyncDerivativeOrdersByHashesRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryDerivativeOrdersByHashesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::exchange::v1beta1::QueryDerivativeOrdersByHashesResponse, ::injective::exchange::v1beta1::QueryDerivativeOrdersByHashesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DerivativeOrdersByHashes_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::QueryDerivativeOrdersByHashesResponse>* Query::Stub::AsyncDerivativeOrdersByHashesRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryDerivativeOrdersByHashesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDerivativeOrdersByHashesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::TraderDerivativeTransientOrders(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryTraderDerivativeOrdersRequest& request, ::injective::exchange::v1beta1::QueryTraderDerivativeOrdersResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::exchange::v1beta1::QueryTraderDerivativeOrdersRequest, ::injective::exchange::v1beta1::QueryTraderDerivativeOrdersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_TraderDerivativeTransientOrders_, context, request, response);
}

void Query::Stub::async::TraderDerivativeTransientOrders(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryTraderDerivativeOrdersRequest* request, ::injective::exchange::v1beta1::QueryTraderDerivativeOrdersResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::exchange::v1beta1::QueryTraderDerivativeOrdersRequest, ::injective::exchange::v1beta1::QueryTraderDerivativeOrdersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TraderDerivativeTransientOrders_, context, request, response, std::move(f));
}

void Query::Stub::async::TraderDerivativeTransientOrders(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryTraderDerivativeOrdersRequest* request, ::injective::exchange::v1beta1::QueryTraderDerivativeOrdersResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TraderDerivativeTransientOrders_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::QueryTraderDerivativeOrdersResponse>* Query::Stub::PrepareAsyncTraderDerivativeTransientOrdersRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryTraderDerivativeOrdersRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::exchange::v1beta1::QueryTraderDerivativeOrdersResponse, ::injective::exchange::v1beta1::QueryTraderDerivativeOrdersRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_TraderDerivativeTransientOrders_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::QueryTraderDerivativeOrdersResponse>* Query::Stub::AsyncTraderDerivativeTransientOrdersRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryTraderDerivativeOrdersRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncTraderDerivativeTransientOrdersRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::DerivativeMarkets(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryDerivativeMarketsRequest& request, ::injective::exchange::v1beta1::QueryDerivativeMarketsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::exchange::v1beta1::QueryDerivativeMarketsRequest, ::injective::exchange::v1beta1::QueryDerivativeMarketsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DerivativeMarkets_, context, request, response);
}

void Query::Stub::async::DerivativeMarkets(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryDerivativeMarketsRequest* request, ::injective::exchange::v1beta1::QueryDerivativeMarketsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::exchange::v1beta1::QueryDerivativeMarketsRequest, ::injective::exchange::v1beta1::QueryDerivativeMarketsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DerivativeMarkets_, context, request, response, std::move(f));
}

void Query::Stub::async::DerivativeMarkets(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryDerivativeMarketsRequest* request, ::injective::exchange::v1beta1::QueryDerivativeMarketsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DerivativeMarkets_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::QueryDerivativeMarketsResponse>* Query::Stub::PrepareAsyncDerivativeMarketsRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryDerivativeMarketsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::exchange::v1beta1::QueryDerivativeMarketsResponse, ::injective::exchange::v1beta1::QueryDerivativeMarketsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DerivativeMarkets_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::QueryDerivativeMarketsResponse>* Query::Stub::AsyncDerivativeMarketsRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryDerivativeMarketsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDerivativeMarketsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::DerivativeMarket(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryDerivativeMarketRequest& request, ::injective::exchange::v1beta1::QueryDerivativeMarketResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::exchange::v1beta1::QueryDerivativeMarketRequest, ::injective::exchange::v1beta1::QueryDerivativeMarketResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DerivativeMarket_, context, request, response);
}

void Query::Stub::async::DerivativeMarket(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryDerivativeMarketRequest* request, ::injective::exchange::v1beta1::QueryDerivativeMarketResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::exchange::v1beta1::QueryDerivativeMarketRequest, ::injective::exchange::v1beta1::QueryDerivativeMarketResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DerivativeMarket_, context, request, response, std::move(f));
}

void Query::Stub::async::DerivativeMarket(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryDerivativeMarketRequest* request, ::injective::exchange::v1beta1::QueryDerivativeMarketResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DerivativeMarket_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::QueryDerivativeMarketResponse>* Query::Stub::PrepareAsyncDerivativeMarketRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryDerivativeMarketRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::exchange::v1beta1::QueryDerivativeMarketResponse, ::injective::exchange::v1beta1::QueryDerivativeMarketRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DerivativeMarket_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::QueryDerivativeMarketResponse>* Query::Stub::AsyncDerivativeMarketRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryDerivativeMarketRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDerivativeMarketRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::DerivativeMarketAddress(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryDerivativeMarketAddressRequest& request, ::injective::exchange::v1beta1::QueryDerivativeMarketAddressResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::exchange::v1beta1::QueryDerivativeMarketAddressRequest, ::injective::exchange::v1beta1::QueryDerivativeMarketAddressResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DerivativeMarketAddress_, context, request, response);
}

void Query::Stub::async::DerivativeMarketAddress(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryDerivativeMarketAddressRequest* request, ::injective::exchange::v1beta1::QueryDerivativeMarketAddressResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::exchange::v1beta1::QueryDerivativeMarketAddressRequest, ::injective::exchange::v1beta1::QueryDerivativeMarketAddressResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DerivativeMarketAddress_, context, request, response, std::move(f));
}

void Query::Stub::async::DerivativeMarketAddress(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryDerivativeMarketAddressRequest* request, ::injective::exchange::v1beta1::QueryDerivativeMarketAddressResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DerivativeMarketAddress_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::QueryDerivativeMarketAddressResponse>* Query::Stub::PrepareAsyncDerivativeMarketAddressRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryDerivativeMarketAddressRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::exchange::v1beta1::QueryDerivativeMarketAddressResponse, ::injective::exchange::v1beta1::QueryDerivativeMarketAddressRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DerivativeMarketAddress_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::QueryDerivativeMarketAddressResponse>* Query::Stub::AsyncDerivativeMarketAddressRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryDerivativeMarketAddressRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDerivativeMarketAddressRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::SubaccountTradeNonce(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QuerySubaccountTradeNonceRequest& request, ::injective::exchange::v1beta1::QuerySubaccountTradeNonceResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::exchange::v1beta1::QuerySubaccountTradeNonceRequest, ::injective::exchange::v1beta1::QuerySubaccountTradeNonceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SubaccountTradeNonce_, context, request, response);
}

void Query::Stub::async::SubaccountTradeNonce(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QuerySubaccountTradeNonceRequest* request, ::injective::exchange::v1beta1::QuerySubaccountTradeNonceResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::exchange::v1beta1::QuerySubaccountTradeNonceRequest, ::injective::exchange::v1beta1::QuerySubaccountTradeNonceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SubaccountTradeNonce_, context, request, response, std::move(f));
}

void Query::Stub::async::SubaccountTradeNonce(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QuerySubaccountTradeNonceRequest* request, ::injective::exchange::v1beta1::QuerySubaccountTradeNonceResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SubaccountTradeNonce_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::QuerySubaccountTradeNonceResponse>* Query::Stub::PrepareAsyncSubaccountTradeNonceRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QuerySubaccountTradeNonceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::exchange::v1beta1::QuerySubaccountTradeNonceResponse, ::injective::exchange::v1beta1::QuerySubaccountTradeNonceRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SubaccountTradeNonce_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::QuerySubaccountTradeNonceResponse>* Query::Stub::AsyncSubaccountTradeNonceRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QuerySubaccountTradeNonceRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSubaccountTradeNonceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::ExchangeModuleState(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryModuleStateRequest& request, ::injective::exchange::v1beta1::QueryModuleStateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::exchange::v1beta1::QueryModuleStateRequest, ::injective::exchange::v1beta1::QueryModuleStateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ExchangeModuleState_, context, request, response);
}

void Query::Stub::async::ExchangeModuleState(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryModuleStateRequest* request, ::injective::exchange::v1beta1::QueryModuleStateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::exchange::v1beta1::QueryModuleStateRequest, ::injective::exchange::v1beta1::QueryModuleStateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExchangeModuleState_, context, request, response, std::move(f));
}

void Query::Stub::async::ExchangeModuleState(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryModuleStateRequest* request, ::injective::exchange::v1beta1::QueryModuleStateResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExchangeModuleState_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::QueryModuleStateResponse>* Query::Stub::PrepareAsyncExchangeModuleStateRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryModuleStateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::exchange::v1beta1::QueryModuleStateResponse, ::injective::exchange::v1beta1::QueryModuleStateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ExchangeModuleState_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::QueryModuleStateResponse>* Query::Stub::AsyncExchangeModuleStateRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryModuleStateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncExchangeModuleStateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::Positions(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryPositionsRequest& request, ::injective::exchange::v1beta1::QueryPositionsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::exchange::v1beta1::QueryPositionsRequest, ::injective::exchange::v1beta1::QueryPositionsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Positions_, context, request, response);
}

void Query::Stub::async::Positions(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryPositionsRequest* request, ::injective::exchange::v1beta1::QueryPositionsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::exchange::v1beta1::QueryPositionsRequest, ::injective::exchange::v1beta1::QueryPositionsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Positions_, context, request, response, std::move(f));
}

void Query::Stub::async::Positions(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryPositionsRequest* request, ::injective::exchange::v1beta1::QueryPositionsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Positions_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::QueryPositionsResponse>* Query::Stub::PrepareAsyncPositionsRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryPositionsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::exchange::v1beta1::QueryPositionsResponse, ::injective::exchange::v1beta1::QueryPositionsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Positions_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::QueryPositionsResponse>* Query::Stub::AsyncPositionsRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryPositionsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPositionsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::SubaccountPositions(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QuerySubaccountPositionsRequest& request, ::injective::exchange::v1beta1::QuerySubaccountPositionsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::exchange::v1beta1::QuerySubaccountPositionsRequest, ::injective::exchange::v1beta1::QuerySubaccountPositionsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SubaccountPositions_, context, request, response);
}

void Query::Stub::async::SubaccountPositions(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QuerySubaccountPositionsRequest* request, ::injective::exchange::v1beta1::QuerySubaccountPositionsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::exchange::v1beta1::QuerySubaccountPositionsRequest, ::injective::exchange::v1beta1::QuerySubaccountPositionsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SubaccountPositions_, context, request, response, std::move(f));
}

void Query::Stub::async::SubaccountPositions(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QuerySubaccountPositionsRequest* request, ::injective::exchange::v1beta1::QuerySubaccountPositionsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SubaccountPositions_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::QuerySubaccountPositionsResponse>* Query::Stub::PrepareAsyncSubaccountPositionsRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QuerySubaccountPositionsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::exchange::v1beta1::QuerySubaccountPositionsResponse, ::injective::exchange::v1beta1::QuerySubaccountPositionsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SubaccountPositions_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::QuerySubaccountPositionsResponse>* Query::Stub::AsyncSubaccountPositionsRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QuerySubaccountPositionsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSubaccountPositionsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::SubaccountPositionInMarket(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QuerySubaccountPositionInMarketRequest& request, ::injective::exchange::v1beta1::QuerySubaccountPositionInMarketResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::exchange::v1beta1::QuerySubaccountPositionInMarketRequest, ::injective::exchange::v1beta1::QuerySubaccountPositionInMarketResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SubaccountPositionInMarket_, context, request, response);
}

void Query::Stub::async::SubaccountPositionInMarket(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QuerySubaccountPositionInMarketRequest* request, ::injective::exchange::v1beta1::QuerySubaccountPositionInMarketResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::exchange::v1beta1::QuerySubaccountPositionInMarketRequest, ::injective::exchange::v1beta1::QuerySubaccountPositionInMarketResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SubaccountPositionInMarket_, context, request, response, std::move(f));
}

void Query::Stub::async::SubaccountPositionInMarket(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QuerySubaccountPositionInMarketRequest* request, ::injective::exchange::v1beta1::QuerySubaccountPositionInMarketResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SubaccountPositionInMarket_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::QuerySubaccountPositionInMarketResponse>* Query::Stub::PrepareAsyncSubaccountPositionInMarketRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QuerySubaccountPositionInMarketRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::exchange::v1beta1::QuerySubaccountPositionInMarketResponse, ::injective::exchange::v1beta1::QuerySubaccountPositionInMarketRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SubaccountPositionInMarket_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::QuerySubaccountPositionInMarketResponse>* Query::Stub::AsyncSubaccountPositionInMarketRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QuerySubaccountPositionInMarketRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSubaccountPositionInMarketRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::SubaccountEffectivePositionInMarket(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QuerySubaccountEffectivePositionInMarketRequest& request, ::injective::exchange::v1beta1::QuerySubaccountEffectivePositionInMarketResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::exchange::v1beta1::QuerySubaccountEffectivePositionInMarketRequest, ::injective::exchange::v1beta1::QuerySubaccountEffectivePositionInMarketResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SubaccountEffectivePositionInMarket_, context, request, response);
}

void Query::Stub::async::SubaccountEffectivePositionInMarket(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QuerySubaccountEffectivePositionInMarketRequest* request, ::injective::exchange::v1beta1::QuerySubaccountEffectivePositionInMarketResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::exchange::v1beta1::QuerySubaccountEffectivePositionInMarketRequest, ::injective::exchange::v1beta1::QuerySubaccountEffectivePositionInMarketResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SubaccountEffectivePositionInMarket_, context, request, response, std::move(f));
}

void Query::Stub::async::SubaccountEffectivePositionInMarket(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QuerySubaccountEffectivePositionInMarketRequest* request, ::injective::exchange::v1beta1::QuerySubaccountEffectivePositionInMarketResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SubaccountEffectivePositionInMarket_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::QuerySubaccountEffectivePositionInMarketResponse>* Query::Stub::PrepareAsyncSubaccountEffectivePositionInMarketRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QuerySubaccountEffectivePositionInMarketRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::exchange::v1beta1::QuerySubaccountEffectivePositionInMarketResponse, ::injective::exchange::v1beta1::QuerySubaccountEffectivePositionInMarketRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SubaccountEffectivePositionInMarket_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::QuerySubaccountEffectivePositionInMarketResponse>* Query::Stub::AsyncSubaccountEffectivePositionInMarketRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QuerySubaccountEffectivePositionInMarketRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSubaccountEffectivePositionInMarketRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::PerpetualMarketInfo(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryPerpetualMarketInfoRequest& request, ::injective::exchange::v1beta1::QueryPerpetualMarketInfoResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::exchange::v1beta1::QueryPerpetualMarketInfoRequest, ::injective::exchange::v1beta1::QueryPerpetualMarketInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PerpetualMarketInfo_, context, request, response);
}

void Query::Stub::async::PerpetualMarketInfo(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryPerpetualMarketInfoRequest* request, ::injective::exchange::v1beta1::QueryPerpetualMarketInfoResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::exchange::v1beta1::QueryPerpetualMarketInfoRequest, ::injective::exchange::v1beta1::QueryPerpetualMarketInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PerpetualMarketInfo_, context, request, response, std::move(f));
}

void Query::Stub::async::PerpetualMarketInfo(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryPerpetualMarketInfoRequest* request, ::injective::exchange::v1beta1::QueryPerpetualMarketInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PerpetualMarketInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::QueryPerpetualMarketInfoResponse>* Query::Stub::PrepareAsyncPerpetualMarketInfoRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryPerpetualMarketInfoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::exchange::v1beta1::QueryPerpetualMarketInfoResponse, ::injective::exchange::v1beta1::QueryPerpetualMarketInfoRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PerpetualMarketInfo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::QueryPerpetualMarketInfoResponse>* Query::Stub::AsyncPerpetualMarketInfoRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryPerpetualMarketInfoRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPerpetualMarketInfoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::ExpiryFuturesMarketInfo(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryExpiryFuturesMarketInfoRequest& request, ::injective::exchange::v1beta1::QueryExpiryFuturesMarketInfoResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::exchange::v1beta1::QueryExpiryFuturesMarketInfoRequest, ::injective::exchange::v1beta1::QueryExpiryFuturesMarketInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ExpiryFuturesMarketInfo_, context, request, response);
}

void Query::Stub::async::ExpiryFuturesMarketInfo(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryExpiryFuturesMarketInfoRequest* request, ::injective::exchange::v1beta1::QueryExpiryFuturesMarketInfoResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::exchange::v1beta1::QueryExpiryFuturesMarketInfoRequest, ::injective::exchange::v1beta1::QueryExpiryFuturesMarketInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExpiryFuturesMarketInfo_, context, request, response, std::move(f));
}

void Query::Stub::async::ExpiryFuturesMarketInfo(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryExpiryFuturesMarketInfoRequest* request, ::injective::exchange::v1beta1::QueryExpiryFuturesMarketInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExpiryFuturesMarketInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::QueryExpiryFuturesMarketInfoResponse>* Query::Stub::PrepareAsyncExpiryFuturesMarketInfoRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryExpiryFuturesMarketInfoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::exchange::v1beta1::QueryExpiryFuturesMarketInfoResponse, ::injective::exchange::v1beta1::QueryExpiryFuturesMarketInfoRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ExpiryFuturesMarketInfo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::QueryExpiryFuturesMarketInfoResponse>* Query::Stub::AsyncExpiryFuturesMarketInfoRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryExpiryFuturesMarketInfoRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncExpiryFuturesMarketInfoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::PerpetualMarketFunding(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryPerpetualMarketFundingRequest& request, ::injective::exchange::v1beta1::QueryPerpetualMarketFundingResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::exchange::v1beta1::QueryPerpetualMarketFundingRequest, ::injective::exchange::v1beta1::QueryPerpetualMarketFundingResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PerpetualMarketFunding_, context, request, response);
}

void Query::Stub::async::PerpetualMarketFunding(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryPerpetualMarketFundingRequest* request, ::injective::exchange::v1beta1::QueryPerpetualMarketFundingResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::exchange::v1beta1::QueryPerpetualMarketFundingRequest, ::injective::exchange::v1beta1::QueryPerpetualMarketFundingResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PerpetualMarketFunding_, context, request, response, std::move(f));
}

void Query::Stub::async::PerpetualMarketFunding(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryPerpetualMarketFundingRequest* request, ::injective::exchange::v1beta1::QueryPerpetualMarketFundingResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PerpetualMarketFunding_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::QueryPerpetualMarketFundingResponse>* Query::Stub::PrepareAsyncPerpetualMarketFundingRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryPerpetualMarketFundingRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::exchange::v1beta1::QueryPerpetualMarketFundingResponse, ::injective::exchange::v1beta1::QueryPerpetualMarketFundingRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PerpetualMarketFunding_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::QueryPerpetualMarketFundingResponse>* Query::Stub::AsyncPerpetualMarketFundingRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryPerpetualMarketFundingRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPerpetualMarketFundingRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::SubaccountOrderMetadata(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QuerySubaccountOrderMetadataRequest& request, ::injective::exchange::v1beta1::QuerySubaccountOrderMetadataResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::exchange::v1beta1::QuerySubaccountOrderMetadataRequest, ::injective::exchange::v1beta1::QuerySubaccountOrderMetadataResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SubaccountOrderMetadata_, context, request, response);
}

void Query::Stub::async::SubaccountOrderMetadata(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QuerySubaccountOrderMetadataRequest* request, ::injective::exchange::v1beta1::QuerySubaccountOrderMetadataResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::exchange::v1beta1::QuerySubaccountOrderMetadataRequest, ::injective::exchange::v1beta1::QuerySubaccountOrderMetadataResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SubaccountOrderMetadata_, context, request, response, std::move(f));
}

void Query::Stub::async::SubaccountOrderMetadata(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QuerySubaccountOrderMetadataRequest* request, ::injective::exchange::v1beta1::QuerySubaccountOrderMetadataResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SubaccountOrderMetadata_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::QuerySubaccountOrderMetadataResponse>* Query::Stub::PrepareAsyncSubaccountOrderMetadataRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QuerySubaccountOrderMetadataRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::exchange::v1beta1::QuerySubaccountOrderMetadataResponse, ::injective::exchange::v1beta1::QuerySubaccountOrderMetadataRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SubaccountOrderMetadata_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::QuerySubaccountOrderMetadataResponse>* Query::Stub::AsyncSubaccountOrderMetadataRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QuerySubaccountOrderMetadataRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSubaccountOrderMetadataRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::TradeRewardPoints(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryTradeRewardPointsRequest& request, ::injective::exchange::v1beta1::QueryTradeRewardPointsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::exchange::v1beta1::QueryTradeRewardPointsRequest, ::injective::exchange::v1beta1::QueryTradeRewardPointsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_TradeRewardPoints_, context, request, response);
}

void Query::Stub::async::TradeRewardPoints(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryTradeRewardPointsRequest* request, ::injective::exchange::v1beta1::QueryTradeRewardPointsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::exchange::v1beta1::QueryTradeRewardPointsRequest, ::injective::exchange::v1beta1::QueryTradeRewardPointsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TradeRewardPoints_, context, request, response, std::move(f));
}

void Query::Stub::async::TradeRewardPoints(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryTradeRewardPointsRequest* request, ::injective::exchange::v1beta1::QueryTradeRewardPointsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TradeRewardPoints_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::QueryTradeRewardPointsResponse>* Query::Stub::PrepareAsyncTradeRewardPointsRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryTradeRewardPointsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::exchange::v1beta1::QueryTradeRewardPointsResponse, ::injective::exchange::v1beta1::QueryTradeRewardPointsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_TradeRewardPoints_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::QueryTradeRewardPointsResponse>* Query::Stub::AsyncTradeRewardPointsRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryTradeRewardPointsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncTradeRewardPointsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::PendingTradeRewardPoints(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryTradeRewardPointsRequest& request, ::injective::exchange::v1beta1::QueryTradeRewardPointsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::exchange::v1beta1::QueryTradeRewardPointsRequest, ::injective::exchange::v1beta1::QueryTradeRewardPointsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PendingTradeRewardPoints_, context, request, response);
}

void Query::Stub::async::PendingTradeRewardPoints(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryTradeRewardPointsRequest* request, ::injective::exchange::v1beta1::QueryTradeRewardPointsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::exchange::v1beta1::QueryTradeRewardPointsRequest, ::injective::exchange::v1beta1::QueryTradeRewardPointsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PendingTradeRewardPoints_, context, request, response, std::move(f));
}

void Query::Stub::async::PendingTradeRewardPoints(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryTradeRewardPointsRequest* request, ::injective::exchange::v1beta1::QueryTradeRewardPointsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PendingTradeRewardPoints_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::QueryTradeRewardPointsResponse>* Query::Stub::PrepareAsyncPendingTradeRewardPointsRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryTradeRewardPointsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::exchange::v1beta1::QueryTradeRewardPointsResponse, ::injective::exchange::v1beta1::QueryTradeRewardPointsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PendingTradeRewardPoints_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::QueryTradeRewardPointsResponse>* Query::Stub::AsyncPendingTradeRewardPointsRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryTradeRewardPointsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPendingTradeRewardPointsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::TradeRewardCampaign(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryTradeRewardCampaignRequest& request, ::injective::exchange::v1beta1::QueryTradeRewardCampaignResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::exchange::v1beta1::QueryTradeRewardCampaignRequest, ::injective::exchange::v1beta1::QueryTradeRewardCampaignResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_TradeRewardCampaign_, context, request, response);
}

void Query::Stub::async::TradeRewardCampaign(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryTradeRewardCampaignRequest* request, ::injective::exchange::v1beta1::QueryTradeRewardCampaignResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::exchange::v1beta1::QueryTradeRewardCampaignRequest, ::injective::exchange::v1beta1::QueryTradeRewardCampaignResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TradeRewardCampaign_, context, request, response, std::move(f));
}

void Query::Stub::async::TradeRewardCampaign(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryTradeRewardCampaignRequest* request, ::injective::exchange::v1beta1::QueryTradeRewardCampaignResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TradeRewardCampaign_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::QueryTradeRewardCampaignResponse>* Query::Stub::PrepareAsyncTradeRewardCampaignRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryTradeRewardCampaignRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::exchange::v1beta1::QueryTradeRewardCampaignResponse, ::injective::exchange::v1beta1::QueryTradeRewardCampaignRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_TradeRewardCampaign_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::QueryTradeRewardCampaignResponse>* Query::Stub::AsyncTradeRewardCampaignRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryTradeRewardCampaignRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncTradeRewardCampaignRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::FeeDiscountAccountInfo(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryFeeDiscountAccountInfoRequest& request, ::injective::exchange::v1beta1::QueryFeeDiscountAccountInfoResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::exchange::v1beta1::QueryFeeDiscountAccountInfoRequest, ::injective::exchange::v1beta1::QueryFeeDiscountAccountInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_FeeDiscountAccountInfo_, context, request, response);
}

void Query::Stub::async::FeeDiscountAccountInfo(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryFeeDiscountAccountInfoRequest* request, ::injective::exchange::v1beta1::QueryFeeDiscountAccountInfoResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::exchange::v1beta1::QueryFeeDiscountAccountInfoRequest, ::injective::exchange::v1beta1::QueryFeeDiscountAccountInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FeeDiscountAccountInfo_, context, request, response, std::move(f));
}

void Query::Stub::async::FeeDiscountAccountInfo(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryFeeDiscountAccountInfoRequest* request, ::injective::exchange::v1beta1::QueryFeeDiscountAccountInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FeeDiscountAccountInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::QueryFeeDiscountAccountInfoResponse>* Query::Stub::PrepareAsyncFeeDiscountAccountInfoRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryFeeDiscountAccountInfoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::exchange::v1beta1::QueryFeeDiscountAccountInfoResponse, ::injective::exchange::v1beta1::QueryFeeDiscountAccountInfoRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_FeeDiscountAccountInfo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::QueryFeeDiscountAccountInfoResponse>* Query::Stub::AsyncFeeDiscountAccountInfoRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryFeeDiscountAccountInfoRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncFeeDiscountAccountInfoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::FeeDiscountSchedule(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryFeeDiscountScheduleRequest& request, ::injective::exchange::v1beta1::QueryFeeDiscountScheduleResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::exchange::v1beta1::QueryFeeDiscountScheduleRequest, ::injective::exchange::v1beta1::QueryFeeDiscountScheduleResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_FeeDiscountSchedule_, context, request, response);
}

void Query::Stub::async::FeeDiscountSchedule(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryFeeDiscountScheduleRequest* request, ::injective::exchange::v1beta1::QueryFeeDiscountScheduleResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::exchange::v1beta1::QueryFeeDiscountScheduleRequest, ::injective::exchange::v1beta1::QueryFeeDiscountScheduleResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FeeDiscountSchedule_, context, request, response, std::move(f));
}

void Query::Stub::async::FeeDiscountSchedule(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryFeeDiscountScheduleRequest* request, ::injective::exchange::v1beta1::QueryFeeDiscountScheduleResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FeeDiscountSchedule_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::QueryFeeDiscountScheduleResponse>* Query::Stub::PrepareAsyncFeeDiscountScheduleRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryFeeDiscountScheduleRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::exchange::v1beta1::QueryFeeDiscountScheduleResponse, ::injective::exchange::v1beta1::QueryFeeDiscountScheduleRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_FeeDiscountSchedule_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::QueryFeeDiscountScheduleResponse>* Query::Stub::AsyncFeeDiscountScheduleRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryFeeDiscountScheduleRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncFeeDiscountScheduleRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::BalanceMismatches(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryBalanceMismatchesRequest& request, ::injective::exchange::v1beta1::QueryBalanceMismatchesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::exchange::v1beta1::QueryBalanceMismatchesRequest, ::injective::exchange::v1beta1::QueryBalanceMismatchesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_BalanceMismatches_, context, request, response);
}

void Query::Stub::async::BalanceMismatches(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryBalanceMismatchesRequest* request, ::injective::exchange::v1beta1::QueryBalanceMismatchesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::exchange::v1beta1::QueryBalanceMismatchesRequest, ::injective::exchange::v1beta1::QueryBalanceMismatchesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_BalanceMismatches_, context, request, response, std::move(f));
}

void Query::Stub::async::BalanceMismatches(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryBalanceMismatchesRequest* request, ::injective::exchange::v1beta1::QueryBalanceMismatchesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_BalanceMismatches_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::QueryBalanceMismatchesResponse>* Query::Stub::PrepareAsyncBalanceMismatchesRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryBalanceMismatchesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::exchange::v1beta1::QueryBalanceMismatchesResponse, ::injective::exchange::v1beta1::QueryBalanceMismatchesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_BalanceMismatches_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::QueryBalanceMismatchesResponse>* Query::Stub::AsyncBalanceMismatchesRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryBalanceMismatchesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncBalanceMismatchesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::BalanceWithBalanceHolds(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryBalanceWithBalanceHoldsRequest& request, ::injective::exchange::v1beta1::QueryBalanceWithBalanceHoldsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::exchange::v1beta1::QueryBalanceWithBalanceHoldsRequest, ::injective::exchange::v1beta1::QueryBalanceWithBalanceHoldsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_BalanceWithBalanceHolds_, context, request, response);
}

void Query::Stub::async::BalanceWithBalanceHolds(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryBalanceWithBalanceHoldsRequest* request, ::injective::exchange::v1beta1::QueryBalanceWithBalanceHoldsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::exchange::v1beta1::QueryBalanceWithBalanceHoldsRequest, ::injective::exchange::v1beta1::QueryBalanceWithBalanceHoldsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_BalanceWithBalanceHolds_, context, request, response, std::move(f));
}

void Query::Stub::async::BalanceWithBalanceHolds(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryBalanceWithBalanceHoldsRequest* request, ::injective::exchange::v1beta1::QueryBalanceWithBalanceHoldsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_BalanceWithBalanceHolds_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::QueryBalanceWithBalanceHoldsResponse>* Query::Stub::PrepareAsyncBalanceWithBalanceHoldsRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryBalanceWithBalanceHoldsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::exchange::v1beta1::QueryBalanceWithBalanceHoldsResponse, ::injective::exchange::v1beta1::QueryBalanceWithBalanceHoldsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_BalanceWithBalanceHolds_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::QueryBalanceWithBalanceHoldsResponse>* Query::Stub::AsyncBalanceWithBalanceHoldsRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryBalanceWithBalanceHoldsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncBalanceWithBalanceHoldsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::FeeDiscountTierStatistics(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryFeeDiscountTierStatisticsRequest& request, ::injective::exchange::v1beta1::QueryFeeDiscountTierStatisticsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::exchange::v1beta1::QueryFeeDiscountTierStatisticsRequest, ::injective::exchange::v1beta1::QueryFeeDiscountTierStatisticsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_FeeDiscountTierStatistics_, context, request, response);
}

void Query::Stub::async::FeeDiscountTierStatistics(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryFeeDiscountTierStatisticsRequest* request, ::injective::exchange::v1beta1::QueryFeeDiscountTierStatisticsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::exchange::v1beta1::QueryFeeDiscountTierStatisticsRequest, ::injective::exchange::v1beta1::QueryFeeDiscountTierStatisticsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FeeDiscountTierStatistics_, context, request, response, std::move(f));
}

void Query::Stub::async::FeeDiscountTierStatistics(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryFeeDiscountTierStatisticsRequest* request, ::injective::exchange::v1beta1::QueryFeeDiscountTierStatisticsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FeeDiscountTierStatistics_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::QueryFeeDiscountTierStatisticsResponse>* Query::Stub::PrepareAsyncFeeDiscountTierStatisticsRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryFeeDiscountTierStatisticsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::exchange::v1beta1::QueryFeeDiscountTierStatisticsResponse, ::injective::exchange::v1beta1::QueryFeeDiscountTierStatisticsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_FeeDiscountTierStatistics_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::QueryFeeDiscountTierStatisticsResponse>* Query::Stub::AsyncFeeDiscountTierStatisticsRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryFeeDiscountTierStatisticsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncFeeDiscountTierStatisticsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::MitoVaultInfos(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::MitoVaultInfosRequest& request, ::injective::exchange::v1beta1::MitoVaultInfosResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::exchange::v1beta1::MitoVaultInfosRequest, ::injective::exchange::v1beta1::MitoVaultInfosResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_MitoVaultInfos_, context, request, response);
}

void Query::Stub::async::MitoVaultInfos(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::MitoVaultInfosRequest* request, ::injective::exchange::v1beta1::MitoVaultInfosResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::exchange::v1beta1::MitoVaultInfosRequest, ::injective::exchange::v1beta1::MitoVaultInfosResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_MitoVaultInfos_, context, request, response, std::move(f));
}

void Query::Stub::async::MitoVaultInfos(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::MitoVaultInfosRequest* request, ::injective::exchange::v1beta1::MitoVaultInfosResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_MitoVaultInfos_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::MitoVaultInfosResponse>* Query::Stub::PrepareAsyncMitoVaultInfosRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::MitoVaultInfosRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::exchange::v1beta1::MitoVaultInfosResponse, ::injective::exchange::v1beta1::MitoVaultInfosRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_MitoVaultInfos_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::MitoVaultInfosResponse>* Query::Stub::AsyncMitoVaultInfosRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::MitoVaultInfosRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncMitoVaultInfosRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::QueryMarketIDFromVault(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryMarketIDFromVaultRequest& request, ::injective::exchange::v1beta1::QueryMarketIDFromVaultResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::exchange::v1beta1::QueryMarketIDFromVaultRequest, ::injective::exchange::v1beta1::QueryMarketIDFromVaultResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_QueryMarketIDFromVault_, context, request, response);
}

void Query::Stub::async::QueryMarketIDFromVault(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryMarketIDFromVaultRequest* request, ::injective::exchange::v1beta1::QueryMarketIDFromVaultResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::exchange::v1beta1::QueryMarketIDFromVaultRequest, ::injective::exchange::v1beta1::QueryMarketIDFromVaultResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_QueryMarketIDFromVault_, context, request, response, std::move(f));
}

void Query::Stub::async::QueryMarketIDFromVault(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryMarketIDFromVaultRequest* request, ::injective::exchange::v1beta1::QueryMarketIDFromVaultResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_QueryMarketIDFromVault_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::QueryMarketIDFromVaultResponse>* Query::Stub::PrepareAsyncQueryMarketIDFromVaultRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryMarketIDFromVaultRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::exchange::v1beta1::QueryMarketIDFromVaultResponse, ::injective::exchange::v1beta1::QueryMarketIDFromVaultRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_QueryMarketIDFromVault_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::QueryMarketIDFromVaultResponse>* Query::Stub::AsyncQueryMarketIDFromVaultRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryMarketIDFromVaultRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncQueryMarketIDFromVaultRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::HistoricalTradeRecords(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryHistoricalTradeRecordsRequest& request, ::injective::exchange::v1beta1::QueryHistoricalTradeRecordsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::exchange::v1beta1::QueryHistoricalTradeRecordsRequest, ::injective::exchange::v1beta1::QueryHistoricalTradeRecordsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_HistoricalTradeRecords_, context, request, response);
}

void Query::Stub::async::HistoricalTradeRecords(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryHistoricalTradeRecordsRequest* request, ::injective::exchange::v1beta1::QueryHistoricalTradeRecordsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::exchange::v1beta1::QueryHistoricalTradeRecordsRequest, ::injective::exchange::v1beta1::QueryHistoricalTradeRecordsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_HistoricalTradeRecords_, context, request, response, std::move(f));
}

void Query::Stub::async::HistoricalTradeRecords(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryHistoricalTradeRecordsRequest* request, ::injective::exchange::v1beta1::QueryHistoricalTradeRecordsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_HistoricalTradeRecords_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::QueryHistoricalTradeRecordsResponse>* Query::Stub::PrepareAsyncHistoricalTradeRecordsRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryHistoricalTradeRecordsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::exchange::v1beta1::QueryHistoricalTradeRecordsResponse, ::injective::exchange::v1beta1::QueryHistoricalTradeRecordsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_HistoricalTradeRecords_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::QueryHistoricalTradeRecordsResponse>* Query::Stub::AsyncHistoricalTradeRecordsRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryHistoricalTradeRecordsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncHistoricalTradeRecordsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::IsOptedOutOfRewards(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryIsOptedOutOfRewardsRequest& request, ::injective::exchange::v1beta1::QueryIsOptedOutOfRewardsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::exchange::v1beta1::QueryIsOptedOutOfRewardsRequest, ::injective::exchange::v1beta1::QueryIsOptedOutOfRewardsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_IsOptedOutOfRewards_, context, request, response);
}

void Query::Stub::async::IsOptedOutOfRewards(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryIsOptedOutOfRewardsRequest* request, ::injective::exchange::v1beta1::QueryIsOptedOutOfRewardsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::exchange::v1beta1::QueryIsOptedOutOfRewardsRequest, ::injective::exchange::v1beta1::QueryIsOptedOutOfRewardsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_IsOptedOutOfRewards_, context, request, response, std::move(f));
}

void Query::Stub::async::IsOptedOutOfRewards(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryIsOptedOutOfRewardsRequest* request, ::injective::exchange::v1beta1::QueryIsOptedOutOfRewardsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_IsOptedOutOfRewards_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::QueryIsOptedOutOfRewardsResponse>* Query::Stub::PrepareAsyncIsOptedOutOfRewardsRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryIsOptedOutOfRewardsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::exchange::v1beta1::QueryIsOptedOutOfRewardsResponse, ::injective::exchange::v1beta1::QueryIsOptedOutOfRewardsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_IsOptedOutOfRewards_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::QueryIsOptedOutOfRewardsResponse>* Query::Stub::AsyncIsOptedOutOfRewardsRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryIsOptedOutOfRewardsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncIsOptedOutOfRewardsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::OptedOutOfRewardsAccounts(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryOptedOutOfRewardsAccountsRequest& request, ::injective::exchange::v1beta1::QueryOptedOutOfRewardsAccountsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::exchange::v1beta1::QueryOptedOutOfRewardsAccountsRequest, ::injective::exchange::v1beta1::QueryOptedOutOfRewardsAccountsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_OptedOutOfRewardsAccounts_, context, request, response);
}

void Query::Stub::async::OptedOutOfRewardsAccounts(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryOptedOutOfRewardsAccountsRequest* request, ::injective::exchange::v1beta1::QueryOptedOutOfRewardsAccountsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::exchange::v1beta1::QueryOptedOutOfRewardsAccountsRequest, ::injective::exchange::v1beta1::QueryOptedOutOfRewardsAccountsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_OptedOutOfRewardsAccounts_, context, request, response, std::move(f));
}

void Query::Stub::async::OptedOutOfRewardsAccounts(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryOptedOutOfRewardsAccountsRequest* request, ::injective::exchange::v1beta1::QueryOptedOutOfRewardsAccountsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_OptedOutOfRewardsAccounts_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::QueryOptedOutOfRewardsAccountsResponse>* Query::Stub::PrepareAsyncOptedOutOfRewardsAccountsRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryOptedOutOfRewardsAccountsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::exchange::v1beta1::QueryOptedOutOfRewardsAccountsResponse, ::injective::exchange::v1beta1::QueryOptedOutOfRewardsAccountsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_OptedOutOfRewardsAccounts_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::QueryOptedOutOfRewardsAccountsResponse>* Query::Stub::AsyncOptedOutOfRewardsAccountsRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryOptedOutOfRewardsAccountsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncOptedOutOfRewardsAccountsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::MarketVolatility(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryMarketVolatilityRequest& request, ::injective::exchange::v1beta1::QueryMarketVolatilityResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::exchange::v1beta1::QueryMarketVolatilityRequest, ::injective::exchange::v1beta1::QueryMarketVolatilityResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_MarketVolatility_, context, request, response);
}

void Query::Stub::async::MarketVolatility(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryMarketVolatilityRequest* request, ::injective::exchange::v1beta1::QueryMarketVolatilityResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::exchange::v1beta1::QueryMarketVolatilityRequest, ::injective::exchange::v1beta1::QueryMarketVolatilityResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_MarketVolatility_, context, request, response, std::move(f));
}

void Query::Stub::async::MarketVolatility(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryMarketVolatilityRequest* request, ::injective::exchange::v1beta1::QueryMarketVolatilityResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_MarketVolatility_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::QueryMarketVolatilityResponse>* Query::Stub::PrepareAsyncMarketVolatilityRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryMarketVolatilityRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::exchange::v1beta1::QueryMarketVolatilityResponse, ::injective::exchange::v1beta1::QueryMarketVolatilityRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_MarketVolatility_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::QueryMarketVolatilityResponse>* Query::Stub::AsyncMarketVolatilityRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryMarketVolatilityRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncMarketVolatilityRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::BinaryOptionsMarkets(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryBinaryMarketsRequest& request, ::injective::exchange::v1beta1::QueryBinaryMarketsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::exchange::v1beta1::QueryBinaryMarketsRequest, ::injective::exchange::v1beta1::QueryBinaryMarketsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_BinaryOptionsMarkets_, context, request, response);
}

void Query::Stub::async::BinaryOptionsMarkets(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryBinaryMarketsRequest* request, ::injective::exchange::v1beta1::QueryBinaryMarketsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::exchange::v1beta1::QueryBinaryMarketsRequest, ::injective::exchange::v1beta1::QueryBinaryMarketsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_BinaryOptionsMarkets_, context, request, response, std::move(f));
}

void Query::Stub::async::BinaryOptionsMarkets(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryBinaryMarketsRequest* request, ::injective::exchange::v1beta1::QueryBinaryMarketsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_BinaryOptionsMarkets_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::QueryBinaryMarketsResponse>* Query::Stub::PrepareAsyncBinaryOptionsMarketsRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryBinaryMarketsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::exchange::v1beta1::QueryBinaryMarketsResponse, ::injective::exchange::v1beta1::QueryBinaryMarketsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_BinaryOptionsMarkets_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::QueryBinaryMarketsResponse>* Query::Stub::AsyncBinaryOptionsMarketsRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryBinaryMarketsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncBinaryOptionsMarketsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::TraderDerivativeConditionalOrders(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryTraderDerivativeConditionalOrdersRequest& request, ::injective::exchange::v1beta1::QueryTraderDerivativeConditionalOrdersResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::exchange::v1beta1::QueryTraderDerivativeConditionalOrdersRequest, ::injective::exchange::v1beta1::QueryTraderDerivativeConditionalOrdersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_TraderDerivativeConditionalOrders_, context, request, response);
}

void Query::Stub::async::TraderDerivativeConditionalOrders(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryTraderDerivativeConditionalOrdersRequest* request, ::injective::exchange::v1beta1::QueryTraderDerivativeConditionalOrdersResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::exchange::v1beta1::QueryTraderDerivativeConditionalOrdersRequest, ::injective::exchange::v1beta1::QueryTraderDerivativeConditionalOrdersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TraderDerivativeConditionalOrders_, context, request, response, std::move(f));
}

void Query::Stub::async::TraderDerivativeConditionalOrders(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryTraderDerivativeConditionalOrdersRequest* request, ::injective::exchange::v1beta1::QueryTraderDerivativeConditionalOrdersResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TraderDerivativeConditionalOrders_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::QueryTraderDerivativeConditionalOrdersResponse>* Query::Stub::PrepareAsyncTraderDerivativeConditionalOrdersRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryTraderDerivativeConditionalOrdersRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::exchange::v1beta1::QueryTraderDerivativeConditionalOrdersResponse, ::injective::exchange::v1beta1::QueryTraderDerivativeConditionalOrdersRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_TraderDerivativeConditionalOrders_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::QueryTraderDerivativeConditionalOrdersResponse>* Query::Stub::AsyncTraderDerivativeConditionalOrdersRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryTraderDerivativeConditionalOrdersRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncTraderDerivativeConditionalOrdersRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::MarketAtomicExecutionFeeMultiplier(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryMarketAtomicExecutionFeeMultiplierRequest& request, ::injective::exchange::v1beta1::QueryMarketAtomicExecutionFeeMultiplierResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::exchange::v1beta1::QueryMarketAtomicExecutionFeeMultiplierRequest, ::injective::exchange::v1beta1::QueryMarketAtomicExecutionFeeMultiplierResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_MarketAtomicExecutionFeeMultiplier_, context, request, response);
}

void Query::Stub::async::MarketAtomicExecutionFeeMultiplier(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryMarketAtomicExecutionFeeMultiplierRequest* request, ::injective::exchange::v1beta1::QueryMarketAtomicExecutionFeeMultiplierResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::exchange::v1beta1::QueryMarketAtomicExecutionFeeMultiplierRequest, ::injective::exchange::v1beta1::QueryMarketAtomicExecutionFeeMultiplierResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_MarketAtomicExecutionFeeMultiplier_, context, request, response, std::move(f));
}

void Query::Stub::async::MarketAtomicExecutionFeeMultiplier(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryMarketAtomicExecutionFeeMultiplierRequest* request, ::injective::exchange::v1beta1::QueryMarketAtomicExecutionFeeMultiplierResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_MarketAtomicExecutionFeeMultiplier_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::QueryMarketAtomicExecutionFeeMultiplierResponse>* Query::Stub::PrepareAsyncMarketAtomicExecutionFeeMultiplierRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryMarketAtomicExecutionFeeMultiplierRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::exchange::v1beta1::QueryMarketAtomicExecutionFeeMultiplierResponse, ::injective::exchange::v1beta1::QueryMarketAtomicExecutionFeeMultiplierRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_MarketAtomicExecutionFeeMultiplier_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::QueryMarketAtomicExecutionFeeMultiplierResponse>* Query::Stub::AsyncMarketAtomicExecutionFeeMultiplierRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::QueryMarketAtomicExecutionFeeMultiplierRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncMarketAtomicExecutionFeeMultiplierRaw(context, request, cq);
  result->StartCall();
  return result;
}

Query::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::injective::exchange::v1beta1::QueryExchangeParamsRequest, ::injective::exchange::v1beta1::QueryExchangeParamsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::exchange::v1beta1::QueryExchangeParamsRequest* req,
             ::injective::exchange::v1beta1::QueryExchangeParamsResponse* resp) {
               return service->QueryExchangeParams(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::injective::exchange::v1beta1::QuerySubaccountDepositsRequest, ::injective::exchange::v1beta1::QuerySubaccountDepositsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::exchange::v1beta1::QuerySubaccountDepositsRequest* req,
             ::injective::exchange::v1beta1::QuerySubaccountDepositsResponse* resp) {
               return service->SubaccountDeposits(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::injective::exchange::v1beta1::QuerySubaccountDepositRequest, ::injective::exchange::v1beta1::QuerySubaccountDepositResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::exchange::v1beta1::QuerySubaccountDepositRequest* req,
             ::injective::exchange::v1beta1::QuerySubaccountDepositResponse* resp) {
               return service->SubaccountDeposit(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::injective::exchange::v1beta1::QueryExchangeBalancesRequest, ::injective::exchange::v1beta1::QueryExchangeBalancesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::exchange::v1beta1::QueryExchangeBalancesRequest* req,
             ::injective::exchange::v1beta1::QueryExchangeBalancesResponse* resp) {
               return service->ExchangeBalances(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::injective::exchange::v1beta1::QueryAggregateVolumeRequest, ::injective::exchange::v1beta1::QueryAggregateVolumeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::exchange::v1beta1::QueryAggregateVolumeRequest* req,
             ::injective::exchange::v1beta1::QueryAggregateVolumeResponse* resp) {
               return service->AggregateVolume(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::injective::exchange::v1beta1::QueryAggregateVolumesRequest, ::injective::exchange::v1beta1::QueryAggregateVolumesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::exchange::v1beta1::QueryAggregateVolumesRequest* req,
             ::injective::exchange::v1beta1::QueryAggregateVolumesResponse* resp) {
               return service->AggregateVolumes(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::injective::exchange::v1beta1::QueryAggregateMarketVolumeRequest, ::injective::exchange::v1beta1::QueryAggregateMarketVolumeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::exchange::v1beta1::QueryAggregateMarketVolumeRequest* req,
             ::injective::exchange::v1beta1::QueryAggregateMarketVolumeResponse* resp) {
               return service->AggregateMarketVolume(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::injective::exchange::v1beta1::QueryAggregateMarketVolumesRequest, ::injective::exchange::v1beta1::QueryAggregateMarketVolumesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::exchange::v1beta1::QueryAggregateMarketVolumesRequest* req,
             ::injective::exchange::v1beta1::QueryAggregateMarketVolumesResponse* resp) {
               return service->AggregateMarketVolumes(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::injective::exchange::v1beta1::QueryDenomDecimalRequest, ::injective::exchange::v1beta1::QueryDenomDecimalResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::exchange::v1beta1::QueryDenomDecimalRequest* req,
             ::injective::exchange::v1beta1::QueryDenomDecimalResponse* resp) {
               return service->DenomDecimal(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::injective::exchange::v1beta1::QueryDenomDecimalsRequest, ::injective::exchange::v1beta1::QueryDenomDecimalsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::exchange::v1beta1::QueryDenomDecimalsRequest* req,
             ::injective::exchange::v1beta1::QueryDenomDecimalsResponse* resp) {
               return service->DenomDecimals(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::injective::exchange::v1beta1::QuerySpotMarketsRequest, ::injective::exchange::v1beta1::QuerySpotMarketsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::exchange::v1beta1::QuerySpotMarketsRequest* req,
             ::injective::exchange::v1beta1::QuerySpotMarketsResponse* resp) {
               return service->SpotMarkets(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::injective::exchange::v1beta1::QuerySpotMarketRequest, ::injective::exchange::v1beta1::QuerySpotMarketResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::exchange::v1beta1::QuerySpotMarketRequest* req,
             ::injective::exchange::v1beta1::QuerySpotMarketResponse* resp) {
               return service->SpotMarket(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::injective::exchange::v1beta1::QueryFullSpotMarketsRequest, ::injective::exchange::v1beta1::QueryFullSpotMarketsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::exchange::v1beta1::QueryFullSpotMarketsRequest* req,
             ::injective::exchange::v1beta1::QueryFullSpotMarketsResponse* resp) {
               return service->FullSpotMarkets(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::injective::exchange::v1beta1::QueryFullSpotMarketRequest, ::injective::exchange::v1beta1::QueryFullSpotMarketResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::exchange::v1beta1::QueryFullSpotMarketRequest* req,
             ::injective::exchange::v1beta1::QueryFullSpotMarketResponse* resp) {
               return service->FullSpotMarket(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::injective::exchange::v1beta1::QuerySpotOrderbookRequest, ::injective::exchange::v1beta1::QuerySpotOrderbookResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::exchange::v1beta1::QuerySpotOrderbookRequest* req,
             ::injective::exchange::v1beta1::QuerySpotOrderbookResponse* resp) {
               return service->SpotOrderbook(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::injective::exchange::v1beta1::QueryTraderSpotOrdersRequest, ::injective::exchange::v1beta1::QueryTraderSpotOrdersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::exchange::v1beta1::QueryTraderSpotOrdersRequest* req,
             ::injective::exchange::v1beta1::QueryTraderSpotOrdersResponse* resp) {
               return service->TraderSpotOrders(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::injective::exchange::v1beta1::QueryAccountAddressSpotOrdersRequest, ::injective::exchange::v1beta1::QueryAccountAddressSpotOrdersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::exchange::v1beta1::QueryAccountAddressSpotOrdersRequest* req,
             ::injective::exchange::v1beta1::QueryAccountAddressSpotOrdersResponse* resp) {
               return service->AccountAddressSpotOrders(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[17],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::injective::exchange::v1beta1::QuerySpotOrdersByHashesRequest, ::injective::exchange::v1beta1::QuerySpotOrdersByHashesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::exchange::v1beta1::QuerySpotOrdersByHashesRequest* req,
             ::injective::exchange::v1beta1::QuerySpotOrdersByHashesResponse* resp) {
               return service->SpotOrdersByHashes(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[18],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::injective::exchange::v1beta1::QuerySubaccountOrdersRequest, ::injective::exchange::v1beta1::QuerySubaccountOrdersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::exchange::v1beta1::QuerySubaccountOrdersRequest* req,
             ::injective::exchange::v1beta1::QuerySubaccountOrdersResponse* resp) {
               return service->SubaccountOrders(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[19],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::injective::exchange::v1beta1::QueryTraderSpotOrdersRequest, ::injective::exchange::v1beta1::QueryTraderSpotOrdersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::exchange::v1beta1::QueryTraderSpotOrdersRequest* req,
             ::injective::exchange::v1beta1::QueryTraderSpotOrdersResponse* resp) {
               return service->TraderSpotTransientOrders(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[20],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::injective::exchange::v1beta1::QuerySpotMidPriceAndTOBRequest, ::injective::exchange::v1beta1::QuerySpotMidPriceAndTOBResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::exchange::v1beta1::QuerySpotMidPriceAndTOBRequest* req,
             ::injective::exchange::v1beta1::QuerySpotMidPriceAndTOBResponse* resp) {
               return service->SpotMidPriceAndTOB(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[21],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::injective::exchange::v1beta1::QueryDerivativeMidPriceAndTOBRequest, ::injective::exchange::v1beta1::QueryDerivativeMidPriceAndTOBResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::exchange::v1beta1::QueryDerivativeMidPriceAndTOBRequest* req,
             ::injective::exchange::v1beta1::QueryDerivativeMidPriceAndTOBResponse* resp) {
               return service->DerivativeMidPriceAndTOB(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[22],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::injective::exchange::v1beta1::QueryDerivativeOrderbookRequest, ::injective::exchange::v1beta1::QueryDerivativeOrderbookResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::exchange::v1beta1::QueryDerivativeOrderbookRequest* req,
             ::injective::exchange::v1beta1::QueryDerivativeOrderbookResponse* resp) {
               return service->DerivativeOrderbook(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[23],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::injective::exchange::v1beta1::QueryTraderDerivativeOrdersRequest, ::injective::exchange::v1beta1::QueryTraderDerivativeOrdersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::exchange::v1beta1::QueryTraderDerivativeOrdersRequest* req,
             ::injective::exchange::v1beta1::QueryTraderDerivativeOrdersResponse* resp) {
               return service->TraderDerivativeOrders(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[24],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::injective::exchange::v1beta1::QueryAccountAddressDerivativeOrdersRequest, ::injective::exchange::v1beta1::QueryAccountAddressDerivativeOrdersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::exchange::v1beta1::QueryAccountAddressDerivativeOrdersRequest* req,
             ::injective::exchange::v1beta1::QueryAccountAddressDerivativeOrdersResponse* resp) {
               return service->AccountAddressDerivativeOrders(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[25],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::injective::exchange::v1beta1::QueryDerivativeOrdersByHashesRequest, ::injective::exchange::v1beta1::QueryDerivativeOrdersByHashesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::exchange::v1beta1::QueryDerivativeOrdersByHashesRequest* req,
             ::injective::exchange::v1beta1::QueryDerivativeOrdersByHashesResponse* resp) {
               return service->DerivativeOrdersByHashes(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[26],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::injective::exchange::v1beta1::QueryTraderDerivativeOrdersRequest, ::injective::exchange::v1beta1::QueryTraderDerivativeOrdersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::exchange::v1beta1::QueryTraderDerivativeOrdersRequest* req,
             ::injective::exchange::v1beta1::QueryTraderDerivativeOrdersResponse* resp) {
               return service->TraderDerivativeTransientOrders(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[27],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::injective::exchange::v1beta1::QueryDerivativeMarketsRequest, ::injective::exchange::v1beta1::QueryDerivativeMarketsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::exchange::v1beta1::QueryDerivativeMarketsRequest* req,
             ::injective::exchange::v1beta1::QueryDerivativeMarketsResponse* resp) {
               return service->DerivativeMarkets(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[28],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::injective::exchange::v1beta1::QueryDerivativeMarketRequest, ::injective::exchange::v1beta1::QueryDerivativeMarketResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::exchange::v1beta1::QueryDerivativeMarketRequest* req,
             ::injective::exchange::v1beta1::QueryDerivativeMarketResponse* resp) {
               return service->DerivativeMarket(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[29],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::injective::exchange::v1beta1::QueryDerivativeMarketAddressRequest, ::injective::exchange::v1beta1::QueryDerivativeMarketAddressResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::exchange::v1beta1::QueryDerivativeMarketAddressRequest* req,
             ::injective::exchange::v1beta1::QueryDerivativeMarketAddressResponse* resp) {
               return service->DerivativeMarketAddress(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[30],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::injective::exchange::v1beta1::QuerySubaccountTradeNonceRequest, ::injective::exchange::v1beta1::QuerySubaccountTradeNonceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::exchange::v1beta1::QuerySubaccountTradeNonceRequest* req,
             ::injective::exchange::v1beta1::QuerySubaccountTradeNonceResponse* resp) {
               return service->SubaccountTradeNonce(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[31],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::injective::exchange::v1beta1::QueryModuleStateRequest, ::injective::exchange::v1beta1::QueryModuleStateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::exchange::v1beta1::QueryModuleStateRequest* req,
             ::injective::exchange::v1beta1::QueryModuleStateResponse* resp) {
               return service->ExchangeModuleState(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[32],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::injective::exchange::v1beta1::QueryPositionsRequest, ::injective::exchange::v1beta1::QueryPositionsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::exchange::v1beta1::QueryPositionsRequest* req,
             ::injective::exchange::v1beta1::QueryPositionsResponse* resp) {
               return service->Positions(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[33],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::injective::exchange::v1beta1::QuerySubaccountPositionsRequest, ::injective::exchange::v1beta1::QuerySubaccountPositionsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::exchange::v1beta1::QuerySubaccountPositionsRequest* req,
             ::injective::exchange::v1beta1::QuerySubaccountPositionsResponse* resp) {
               return service->SubaccountPositions(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[34],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::injective::exchange::v1beta1::QuerySubaccountPositionInMarketRequest, ::injective::exchange::v1beta1::QuerySubaccountPositionInMarketResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::exchange::v1beta1::QuerySubaccountPositionInMarketRequest* req,
             ::injective::exchange::v1beta1::QuerySubaccountPositionInMarketResponse* resp) {
               return service->SubaccountPositionInMarket(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[35],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::injective::exchange::v1beta1::QuerySubaccountEffectivePositionInMarketRequest, ::injective::exchange::v1beta1::QuerySubaccountEffectivePositionInMarketResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::exchange::v1beta1::QuerySubaccountEffectivePositionInMarketRequest* req,
             ::injective::exchange::v1beta1::QuerySubaccountEffectivePositionInMarketResponse* resp) {
               return service->SubaccountEffectivePositionInMarket(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[36],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::injective::exchange::v1beta1::QueryPerpetualMarketInfoRequest, ::injective::exchange::v1beta1::QueryPerpetualMarketInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::exchange::v1beta1::QueryPerpetualMarketInfoRequest* req,
             ::injective::exchange::v1beta1::QueryPerpetualMarketInfoResponse* resp) {
               return service->PerpetualMarketInfo(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[37],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::injective::exchange::v1beta1::QueryExpiryFuturesMarketInfoRequest, ::injective::exchange::v1beta1::QueryExpiryFuturesMarketInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::exchange::v1beta1::QueryExpiryFuturesMarketInfoRequest* req,
             ::injective::exchange::v1beta1::QueryExpiryFuturesMarketInfoResponse* resp) {
               return service->ExpiryFuturesMarketInfo(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[38],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::injective::exchange::v1beta1::QueryPerpetualMarketFundingRequest, ::injective::exchange::v1beta1::QueryPerpetualMarketFundingResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::exchange::v1beta1::QueryPerpetualMarketFundingRequest* req,
             ::injective::exchange::v1beta1::QueryPerpetualMarketFundingResponse* resp) {
               return service->PerpetualMarketFunding(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[39],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::injective::exchange::v1beta1::QuerySubaccountOrderMetadataRequest, ::injective::exchange::v1beta1::QuerySubaccountOrderMetadataResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::exchange::v1beta1::QuerySubaccountOrderMetadataRequest* req,
             ::injective::exchange::v1beta1::QuerySubaccountOrderMetadataResponse* resp) {
               return service->SubaccountOrderMetadata(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[40],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::injective::exchange::v1beta1::QueryTradeRewardPointsRequest, ::injective::exchange::v1beta1::QueryTradeRewardPointsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::exchange::v1beta1::QueryTradeRewardPointsRequest* req,
             ::injective::exchange::v1beta1::QueryTradeRewardPointsResponse* resp) {
               return service->TradeRewardPoints(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[41],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::injective::exchange::v1beta1::QueryTradeRewardPointsRequest, ::injective::exchange::v1beta1::QueryTradeRewardPointsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::exchange::v1beta1::QueryTradeRewardPointsRequest* req,
             ::injective::exchange::v1beta1::QueryTradeRewardPointsResponse* resp) {
               return service->PendingTradeRewardPoints(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[42],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::injective::exchange::v1beta1::QueryTradeRewardCampaignRequest, ::injective::exchange::v1beta1::QueryTradeRewardCampaignResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::exchange::v1beta1::QueryTradeRewardCampaignRequest* req,
             ::injective::exchange::v1beta1::QueryTradeRewardCampaignResponse* resp) {
               return service->TradeRewardCampaign(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[43],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::injective::exchange::v1beta1::QueryFeeDiscountAccountInfoRequest, ::injective::exchange::v1beta1::QueryFeeDiscountAccountInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::exchange::v1beta1::QueryFeeDiscountAccountInfoRequest* req,
             ::injective::exchange::v1beta1::QueryFeeDiscountAccountInfoResponse* resp) {
               return service->FeeDiscountAccountInfo(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[44],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::injective::exchange::v1beta1::QueryFeeDiscountScheduleRequest, ::injective::exchange::v1beta1::QueryFeeDiscountScheduleResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::exchange::v1beta1::QueryFeeDiscountScheduleRequest* req,
             ::injective::exchange::v1beta1::QueryFeeDiscountScheduleResponse* resp) {
               return service->FeeDiscountSchedule(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[45],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::injective::exchange::v1beta1::QueryBalanceMismatchesRequest, ::injective::exchange::v1beta1::QueryBalanceMismatchesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::exchange::v1beta1::QueryBalanceMismatchesRequest* req,
             ::injective::exchange::v1beta1::QueryBalanceMismatchesResponse* resp) {
               return service->BalanceMismatches(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[46],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::injective::exchange::v1beta1::QueryBalanceWithBalanceHoldsRequest, ::injective::exchange::v1beta1::QueryBalanceWithBalanceHoldsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::exchange::v1beta1::QueryBalanceWithBalanceHoldsRequest* req,
             ::injective::exchange::v1beta1::QueryBalanceWithBalanceHoldsResponse* resp) {
               return service->BalanceWithBalanceHolds(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[47],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::injective::exchange::v1beta1::QueryFeeDiscountTierStatisticsRequest, ::injective::exchange::v1beta1::QueryFeeDiscountTierStatisticsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::exchange::v1beta1::QueryFeeDiscountTierStatisticsRequest* req,
             ::injective::exchange::v1beta1::QueryFeeDiscountTierStatisticsResponse* resp) {
               return service->FeeDiscountTierStatistics(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[48],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::injective::exchange::v1beta1::MitoVaultInfosRequest, ::injective::exchange::v1beta1::MitoVaultInfosResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::exchange::v1beta1::MitoVaultInfosRequest* req,
             ::injective::exchange::v1beta1::MitoVaultInfosResponse* resp) {
               return service->MitoVaultInfos(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[49],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::injective::exchange::v1beta1::QueryMarketIDFromVaultRequest, ::injective::exchange::v1beta1::QueryMarketIDFromVaultResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::exchange::v1beta1::QueryMarketIDFromVaultRequest* req,
             ::injective::exchange::v1beta1::QueryMarketIDFromVaultResponse* resp) {
               return service->QueryMarketIDFromVault(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[50],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::injective::exchange::v1beta1::QueryHistoricalTradeRecordsRequest, ::injective::exchange::v1beta1::QueryHistoricalTradeRecordsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::exchange::v1beta1::QueryHistoricalTradeRecordsRequest* req,
             ::injective::exchange::v1beta1::QueryHistoricalTradeRecordsResponse* resp) {
               return service->HistoricalTradeRecords(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[51],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::injective::exchange::v1beta1::QueryIsOptedOutOfRewardsRequest, ::injective::exchange::v1beta1::QueryIsOptedOutOfRewardsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::exchange::v1beta1::QueryIsOptedOutOfRewardsRequest* req,
             ::injective::exchange::v1beta1::QueryIsOptedOutOfRewardsResponse* resp) {
               return service->IsOptedOutOfRewards(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[52],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::injective::exchange::v1beta1::QueryOptedOutOfRewardsAccountsRequest, ::injective::exchange::v1beta1::QueryOptedOutOfRewardsAccountsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::exchange::v1beta1::QueryOptedOutOfRewardsAccountsRequest* req,
             ::injective::exchange::v1beta1::QueryOptedOutOfRewardsAccountsResponse* resp) {
               return service->OptedOutOfRewardsAccounts(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[53],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::injective::exchange::v1beta1::QueryMarketVolatilityRequest, ::injective::exchange::v1beta1::QueryMarketVolatilityResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::exchange::v1beta1::QueryMarketVolatilityRequest* req,
             ::injective::exchange::v1beta1::QueryMarketVolatilityResponse* resp) {
               return service->MarketVolatility(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[54],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::injective::exchange::v1beta1::QueryBinaryMarketsRequest, ::injective::exchange::v1beta1::QueryBinaryMarketsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::exchange::v1beta1::QueryBinaryMarketsRequest* req,
             ::injective::exchange::v1beta1::QueryBinaryMarketsResponse* resp) {
               return service->BinaryOptionsMarkets(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[55],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::injective::exchange::v1beta1::QueryTraderDerivativeConditionalOrdersRequest, ::injective::exchange::v1beta1::QueryTraderDerivativeConditionalOrdersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::exchange::v1beta1::QueryTraderDerivativeConditionalOrdersRequest* req,
             ::injective::exchange::v1beta1::QueryTraderDerivativeConditionalOrdersResponse* resp) {
               return service->TraderDerivativeConditionalOrders(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[56],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::injective::exchange::v1beta1::QueryMarketAtomicExecutionFeeMultiplierRequest, ::injective::exchange::v1beta1::QueryMarketAtomicExecutionFeeMultiplierResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::exchange::v1beta1::QueryMarketAtomicExecutionFeeMultiplierRequest* req,
             ::injective::exchange::v1beta1::QueryMarketAtomicExecutionFeeMultiplierResponse* resp) {
               return service->MarketAtomicExecutionFeeMultiplier(ctx, req, resp);
             }, this)));
}

Query::Service::~Service() {
}

::grpc::Status Query::Service::QueryExchangeParams(::grpc::ServerContext* context, const ::injective::exchange::v1beta1::QueryExchangeParamsRequest* request, ::injective::exchange::v1beta1::QueryExchangeParamsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::SubaccountDeposits(::grpc::ServerContext* context, const ::injective::exchange::v1beta1::QuerySubaccountDepositsRequest* request, ::injective::exchange::v1beta1::QuerySubaccountDepositsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::SubaccountDeposit(::grpc::ServerContext* context, const ::injective::exchange::v1beta1::QuerySubaccountDepositRequest* request, ::injective::exchange::v1beta1::QuerySubaccountDepositResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::ExchangeBalances(::grpc::ServerContext* context, const ::injective::exchange::v1beta1::QueryExchangeBalancesRequest* request, ::injective::exchange::v1beta1::QueryExchangeBalancesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::AggregateVolume(::grpc::ServerContext* context, const ::injective::exchange::v1beta1::QueryAggregateVolumeRequest* request, ::injective::exchange::v1beta1::QueryAggregateVolumeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::AggregateVolumes(::grpc::ServerContext* context, const ::injective::exchange::v1beta1::QueryAggregateVolumesRequest* request, ::injective::exchange::v1beta1::QueryAggregateVolumesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::AggregateMarketVolume(::grpc::ServerContext* context, const ::injective::exchange::v1beta1::QueryAggregateMarketVolumeRequest* request, ::injective::exchange::v1beta1::QueryAggregateMarketVolumeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::AggregateMarketVolumes(::grpc::ServerContext* context, const ::injective::exchange::v1beta1::QueryAggregateMarketVolumesRequest* request, ::injective::exchange::v1beta1::QueryAggregateMarketVolumesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::DenomDecimal(::grpc::ServerContext* context, const ::injective::exchange::v1beta1::QueryDenomDecimalRequest* request, ::injective::exchange::v1beta1::QueryDenomDecimalResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::DenomDecimals(::grpc::ServerContext* context, const ::injective::exchange::v1beta1::QueryDenomDecimalsRequest* request, ::injective::exchange::v1beta1::QueryDenomDecimalsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::SpotMarkets(::grpc::ServerContext* context, const ::injective::exchange::v1beta1::QuerySpotMarketsRequest* request, ::injective::exchange::v1beta1::QuerySpotMarketsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::SpotMarket(::grpc::ServerContext* context, const ::injective::exchange::v1beta1::QuerySpotMarketRequest* request, ::injective::exchange::v1beta1::QuerySpotMarketResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::FullSpotMarkets(::grpc::ServerContext* context, const ::injective::exchange::v1beta1::QueryFullSpotMarketsRequest* request, ::injective::exchange::v1beta1::QueryFullSpotMarketsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::FullSpotMarket(::grpc::ServerContext* context, const ::injective::exchange::v1beta1::QueryFullSpotMarketRequest* request, ::injective::exchange::v1beta1::QueryFullSpotMarketResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::SpotOrderbook(::grpc::ServerContext* context, const ::injective::exchange::v1beta1::QuerySpotOrderbookRequest* request, ::injective::exchange::v1beta1::QuerySpotOrderbookResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::TraderSpotOrders(::grpc::ServerContext* context, const ::injective::exchange::v1beta1::QueryTraderSpotOrdersRequest* request, ::injective::exchange::v1beta1::QueryTraderSpotOrdersResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::AccountAddressSpotOrders(::grpc::ServerContext* context, const ::injective::exchange::v1beta1::QueryAccountAddressSpotOrdersRequest* request, ::injective::exchange::v1beta1::QueryAccountAddressSpotOrdersResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::SpotOrdersByHashes(::grpc::ServerContext* context, const ::injective::exchange::v1beta1::QuerySpotOrdersByHashesRequest* request, ::injective::exchange::v1beta1::QuerySpotOrdersByHashesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::SubaccountOrders(::grpc::ServerContext* context, const ::injective::exchange::v1beta1::QuerySubaccountOrdersRequest* request, ::injective::exchange::v1beta1::QuerySubaccountOrdersResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::TraderSpotTransientOrders(::grpc::ServerContext* context, const ::injective::exchange::v1beta1::QueryTraderSpotOrdersRequest* request, ::injective::exchange::v1beta1::QueryTraderSpotOrdersResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::SpotMidPriceAndTOB(::grpc::ServerContext* context, const ::injective::exchange::v1beta1::QuerySpotMidPriceAndTOBRequest* request, ::injective::exchange::v1beta1::QuerySpotMidPriceAndTOBResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::DerivativeMidPriceAndTOB(::grpc::ServerContext* context, const ::injective::exchange::v1beta1::QueryDerivativeMidPriceAndTOBRequest* request, ::injective::exchange::v1beta1::QueryDerivativeMidPriceAndTOBResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::DerivativeOrderbook(::grpc::ServerContext* context, const ::injective::exchange::v1beta1::QueryDerivativeOrderbookRequest* request, ::injective::exchange::v1beta1::QueryDerivativeOrderbookResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::TraderDerivativeOrders(::grpc::ServerContext* context, const ::injective::exchange::v1beta1::QueryTraderDerivativeOrdersRequest* request, ::injective::exchange::v1beta1::QueryTraderDerivativeOrdersResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::AccountAddressDerivativeOrders(::grpc::ServerContext* context, const ::injective::exchange::v1beta1::QueryAccountAddressDerivativeOrdersRequest* request, ::injective::exchange::v1beta1::QueryAccountAddressDerivativeOrdersResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::DerivativeOrdersByHashes(::grpc::ServerContext* context, const ::injective::exchange::v1beta1::QueryDerivativeOrdersByHashesRequest* request, ::injective::exchange::v1beta1::QueryDerivativeOrdersByHashesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::TraderDerivativeTransientOrders(::grpc::ServerContext* context, const ::injective::exchange::v1beta1::QueryTraderDerivativeOrdersRequest* request, ::injective::exchange::v1beta1::QueryTraderDerivativeOrdersResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::DerivativeMarkets(::grpc::ServerContext* context, const ::injective::exchange::v1beta1::QueryDerivativeMarketsRequest* request, ::injective::exchange::v1beta1::QueryDerivativeMarketsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::DerivativeMarket(::grpc::ServerContext* context, const ::injective::exchange::v1beta1::QueryDerivativeMarketRequest* request, ::injective::exchange::v1beta1::QueryDerivativeMarketResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::DerivativeMarketAddress(::grpc::ServerContext* context, const ::injective::exchange::v1beta1::QueryDerivativeMarketAddressRequest* request, ::injective::exchange::v1beta1::QueryDerivativeMarketAddressResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::SubaccountTradeNonce(::grpc::ServerContext* context, const ::injective::exchange::v1beta1::QuerySubaccountTradeNonceRequest* request, ::injective::exchange::v1beta1::QuerySubaccountTradeNonceResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::ExchangeModuleState(::grpc::ServerContext* context, const ::injective::exchange::v1beta1::QueryModuleStateRequest* request, ::injective::exchange::v1beta1::QueryModuleStateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::Positions(::grpc::ServerContext* context, const ::injective::exchange::v1beta1::QueryPositionsRequest* request, ::injective::exchange::v1beta1::QueryPositionsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::SubaccountPositions(::grpc::ServerContext* context, const ::injective::exchange::v1beta1::QuerySubaccountPositionsRequest* request, ::injective::exchange::v1beta1::QuerySubaccountPositionsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::SubaccountPositionInMarket(::grpc::ServerContext* context, const ::injective::exchange::v1beta1::QuerySubaccountPositionInMarketRequest* request, ::injective::exchange::v1beta1::QuerySubaccountPositionInMarketResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::SubaccountEffectivePositionInMarket(::grpc::ServerContext* context, const ::injective::exchange::v1beta1::QuerySubaccountEffectivePositionInMarketRequest* request, ::injective::exchange::v1beta1::QuerySubaccountEffectivePositionInMarketResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::PerpetualMarketInfo(::grpc::ServerContext* context, const ::injective::exchange::v1beta1::QueryPerpetualMarketInfoRequest* request, ::injective::exchange::v1beta1::QueryPerpetualMarketInfoResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::ExpiryFuturesMarketInfo(::grpc::ServerContext* context, const ::injective::exchange::v1beta1::QueryExpiryFuturesMarketInfoRequest* request, ::injective::exchange::v1beta1::QueryExpiryFuturesMarketInfoResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::PerpetualMarketFunding(::grpc::ServerContext* context, const ::injective::exchange::v1beta1::QueryPerpetualMarketFundingRequest* request, ::injective::exchange::v1beta1::QueryPerpetualMarketFundingResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::SubaccountOrderMetadata(::grpc::ServerContext* context, const ::injective::exchange::v1beta1::QuerySubaccountOrderMetadataRequest* request, ::injective::exchange::v1beta1::QuerySubaccountOrderMetadataResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::TradeRewardPoints(::grpc::ServerContext* context, const ::injective::exchange::v1beta1::QueryTradeRewardPointsRequest* request, ::injective::exchange::v1beta1::QueryTradeRewardPointsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::PendingTradeRewardPoints(::grpc::ServerContext* context, const ::injective::exchange::v1beta1::QueryTradeRewardPointsRequest* request, ::injective::exchange::v1beta1::QueryTradeRewardPointsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::TradeRewardCampaign(::grpc::ServerContext* context, const ::injective::exchange::v1beta1::QueryTradeRewardCampaignRequest* request, ::injective::exchange::v1beta1::QueryTradeRewardCampaignResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::FeeDiscountAccountInfo(::grpc::ServerContext* context, const ::injective::exchange::v1beta1::QueryFeeDiscountAccountInfoRequest* request, ::injective::exchange::v1beta1::QueryFeeDiscountAccountInfoResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::FeeDiscountSchedule(::grpc::ServerContext* context, const ::injective::exchange::v1beta1::QueryFeeDiscountScheduleRequest* request, ::injective::exchange::v1beta1::QueryFeeDiscountScheduleResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::BalanceMismatches(::grpc::ServerContext* context, const ::injective::exchange::v1beta1::QueryBalanceMismatchesRequest* request, ::injective::exchange::v1beta1::QueryBalanceMismatchesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::BalanceWithBalanceHolds(::grpc::ServerContext* context, const ::injective::exchange::v1beta1::QueryBalanceWithBalanceHoldsRequest* request, ::injective::exchange::v1beta1::QueryBalanceWithBalanceHoldsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::FeeDiscountTierStatistics(::grpc::ServerContext* context, const ::injective::exchange::v1beta1::QueryFeeDiscountTierStatisticsRequest* request, ::injective::exchange::v1beta1::QueryFeeDiscountTierStatisticsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::MitoVaultInfos(::grpc::ServerContext* context, const ::injective::exchange::v1beta1::MitoVaultInfosRequest* request, ::injective::exchange::v1beta1::MitoVaultInfosResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::QueryMarketIDFromVault(::grpc::ServerContext* context, const ::injective::exchange::v1beta1::QueryMarketIDFromVaultRequest* request, ::injective::exchange::v1beta1::QueryMarketIDFromVaultResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::HistoricalTradeRecords(::grpc::ServerContext* context, const ::injective::exchange::v1beta1::QueryHistoricalTradeRecordsRequest* request, ::injective::exchange::v1beta1::QueryHistoricalTradeRecordsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::IsOptedOutOfRewards(::grpc::ServerContext* context, const ::injective::exchange::v1beta1::QueryIsOptedOutOfRewardsRequest* request, ::injective::exchange::v1beta1::QueryIsOptedOutOfRewardsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::OptedOutOfRewardsAccounts(::grpc::ServerContext* context, const ::injective::exchange::v1beta1::QueryOptedOutOfRewardsAccountsRequest* request, ::injective::exchange::v1beta1::QueryOptedOutOfRewardsAccountsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::MarketVolatility(::grpc::ServerContext* context, const ::injective::exchange::v1beta1::QueryMarketVolatilityRequest* request, ::injective::exchange::v1beta1::QueryMarketVolatilityResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::BinaryOptionsMarkets(::grpc::ServerContext* context, const ::injective::exchange::v1beta1::QueryBinaryMarketsRequest* request, ::injective::exchange::v1beta1::QueryBinaryMarketsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::TraderDerivativeConditionalOrders(::grpc::ServerContext* context, const ::injective::exchange::v1beta1::QueryTraderDerivativeConditionalOrdersRequest* request, ::injective::exchange::v1beta1::QueryTraderDerivativeConditionalOrdersResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::MarketAtomicExecutionFeeMultiplier(::grpc::ServerContext* context, const ::injective::exchange::v1beta1::QueryMarketAtomicExecutionFeeMultiplierRequest* request, ::injective::exchange::v1beta1::QueryMarketAtomicExecutionFeeMultiplierResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace injective
}  // namespace exchange
}  // namespace v1beta1


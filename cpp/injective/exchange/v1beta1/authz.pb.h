// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: injective/exchange/v1beta1/authz.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_injective_2fexchange_2fv1beta1_2fauthz_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_injective_2fexchange_2fv1beta1_2fauthz_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "cosmos_proto/cosmos.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_injective_2fexchange_2fv1beta1_2fauthz_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_injective_2fexchange_2fv1beta1_2fauthz_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_injective_2fexchange_2fv1beta1_2fauthz_2eproto;
namespace injective {
namespace exchange {
namespace v1beta1 {
class BatchCancelDerivativeOrdersAuthz;
struct BatchCancelDerivativeOrdersAuthzDefaultTypeInternal;
extern BatchCancelDerivativeOrdersAuthzDefaultTypeInternal _BatchCancelDerivativeOrdersAuthz_default_instance_;
class BatchCancelSpotOrdersAuthz;
struct BatchCancelSpotOrdersAuthzDefaultTypeInternal;
extern BatchCancelSpotOrdersAuthzDefaultTypeInternal _BatchCancelSpotOrdersAuthz_default_instance_;
class BatchCreateDerivativeLimitOrdersAuthz;
struct BatchCreateDerivativeLimitOrdersAuthzDefaultTypeInternal;
extern BatchCreateDerivativeLimitOrdersAuthzDefaultTypeInternal _BatchCreateDerivativeLimitOrdersAuthz_default_instance_;
class BatchCreateSpotLimitOrdersAuthz;
struct BatchCreateSpotLimitOrdersAuthzDefaultTypeInternal;
extern BatchCreateSpotLimitOrdersAuthzDefaultTypeInternal _BatchCreateSpotLimitOrdersAuthz_default_instance_;
class BatchUpdateOrdersAuthz;
struct BatchUpdateOrdersAuthzDefaultTypeInternal;
extern BatchUpdateOrdersAuthzDefaultTypeInternal _BatchUpdateOrdersAuthz_default_instance_;
class CancelDerivativeOrderAuthz;
struct CancelDerivativeOrderAuthzDefaultTypeInternal;
extern CancelDerivativeOrderAuthzDefaultTypeInternal _CancelDerivativeOrderAuthz_default_instance_;
class CancelSpotOrderAuthz;
struct CancelSpotOrderAuthzDefaultTypeInternal;
extern CancelSpotOrderAuthzDefaultTypeInternal _CancelSpotOrderAuthz_default_instance_;
class CreateDerivativeLimitOrderAuthz;
struct CreateDerivativeLimitOrderAuthzDefaultTypeInternal;
extern CreateDerivativeLimitOrderAuthzDefaultTypeInternal _CreateDerivativeLimitOrderAuthz_default_instance_;
class CreateDerivativeMarketOrderAuthz;
struct CreateDerivativeMarketOrderAuthzDefaultTypeInternal;
extern CreateDerivativeMarketOrderAuthzDefaultTypeInternal _CreateDerivativeMarketOrderAuthz_default_instance_;
class CreateSpotLimitOrderAuthz;
struct CreateSpotLimitOrderAuthzDefaultTypeInternal;
extern CreateSpotLimitOrderAuthzDefaultTypeInternal _CreateSpotLimitOrderAuthz_default_instance_;
class CreateSpotMarketOrderAuthz;
struct CreateSpotMarketOrderAuthzDefaultTypeInternal;
extern CreateSpotMarketOrderAuthzDefaultTypeInternal _CreateSpotMarketOrderAuthz_default_instance_;
}  // namespace v1beta1
}  // namespace exchange
}  // namespace injective
PROTOBUF_NAMESPACE_OPEN
template <>
::injective::exchange::v1beta1::BatchCancelDerivativeOrdersAuthz* Arena::CreateMaybeMessage<::injective::exchange::v1beta1::BatchCancelDerivativeOrdersAuthz>(Arena*);
template <>
::injective::exchange::v1beta1::BatchCancelSpotOrdersAuthz* Arena::CreateMaybeMessage<::injective::exchange::v1beta1::BatchCancelSpotOrdersAuthz>(Arena*);
template <>
::injective::exchange::v1beta1::BatchCreateDerivativeLimitOrdersAuthz* Arena::CreateMaybeMessage<::injective::exchange::v1beta1::BatchCreateDerivativeLimitOrdersAuthz>(Arena*);
template <>
::injective::exchange::v1beta1::BatchCreateSpotLimitOrdersAuthz* Arena::CreateMaybeMessage<::injective::exchange::v1beta1::BatchCreateSpotLimitOrdersAuthz>(Arena*);
template <>
::injective::exchange::v1beta1::BatchUpdateOrdersAuthz* Arena::CreateMaybeMessage<::injective::exchange::v1beta1::BatchUpdateOrdersAuthz>(Arena*);
template <>
::injective::exchange::v1beta1::CancelDerivativeOrderAuthz* Arena::CreateMaybeMessage<::injective::exchange::v1beta1::CancelDerivativeOrderAuthz>(Arena*);
template <>
::injective::exchange::v1beta1::CancelSpotOrderAuthz* Arena::CreateMaybeMessage<::injective::exchange::v1beta1::CancelSpotOrderAuthz>(Arena*);
template <>
::injective::exchange::v1beta1::CreateDerivativeLimitOrderAuthz* Arena::CreateMaybeMessage<::injective::exchange::v1beta1::CreateDerivativeLimitOrderAuthz>(Arena*);
template <>
::injective::exchange::v1beta1::CreateDerivativeMarketOrderAuthz* Arena::CreateMaybeMessage<::injective::exchange::v1beta1::CreateDerivativeMarketOrderAuthz>(Arena*);
template <>
::injective::exchange::v1beta1::CreateSpotLimitOrderAuthz* Arena::CreateMaybeMessage<::injective::exchange::v1beta1::CreateSpotLimitOrderAuthz>(Arena*);
template <>
::injective::exchange::v1beta1::CreateSpotMarketOrderAuthz* Arena::CreateMaybeMessage<::injective::exchange::v1beta1::CreateSpotMarketOrderAuthz>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace injective {
namespace exchange {
namespace v1beta1 {

// ===================================================================


// -------------------------------------------------------------------

class CreateSpotLimitOrderAuthz final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.exchange.v1beta1.CreateSpotLimitOrderAuthz) */ {
 public:
  inline CreateSpotLimitOrderAuthz() : CreateSpotLimitOrderAuthz(nullptr) {}
  ~CreateSpotLimitOrderAuthz() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CreateSpotLimitOrderAuthz(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateSpotLimitOrderAuthz(const CreateSpotLimitOrderAuthz& from);
  CreateSpotLimitOrderAuthz(CreateSpotLimitOrderAuthz&& from) noexcept
    : CreateSpotLimitOrderAuthz() {
    *this = ::std::move(from);
  }

  inline CreateSpotLimitOrderAuthz& operator=(const CreateSpotLimitOrderAuthz& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateSpotLimitOrderAuthz& operator=(CreateSpotLimitOrderAuthz&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateSpotLimitOrderAuthz& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateSpotLimitOrderAuthz* internal_default_instance() {
    return reinterpret_cast<const CreateSpotLimitOrderAuthz*>(
               &_CreateSpotLimitOrderAuthz_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CreateSpotLimitOrderAuthz& a, CreateSpotLimitOrderAuthz& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateSpotLimitOrderAuthz* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateSpotLimitOrderAuthz* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateSpotLimitOrderAuthz* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateSpotLimitOrderAuthz>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateSpotLimitOrderAuthz& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateSpotLimitOrderAuthz& from) {
    CreateSpotLimitOrderAuthz::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateSpotLimitOrderAuthz* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.exchange.v1beta1.CreateSpotLimitOrderAuthz";
  }
  protected:
  explicit CreateSpotLimitOrderAuthz(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMarketIdsFieldNumber = 2,
    kSubaccountIdFieldNumber = 1,
  };
  // repeated string market_ids = 2 [json_name = "marketIds"];
  int market_ids_size() const;
  private:
  int _internal_market_ids_size() const;

  public:
  void clear_market_ids() ;
  const std::string& market_ids(int index) const;
  std::string* mutable_market_ids(int index);
  void set_market_ids(int index, const std::string& value);
  void set_market_ids(int index, std::string&& value);
  void set_market_ids(int index, const char* value);
  void set_market_ids(int index, const char* value, std::size_t size);
  void set_market_ids(int index, absl::string_view value);
  std::string* add_market_ids();
  void add_market_ids(const std::string& value);
  void add_market_ids(std::string&& value);
  void add_market_ids(const char* value);
  void add_market_ids(const char* value, std::size_t size);
  void add_market_ids(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& market_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_market_ids();

  private:
  const std::string& _internal_market_ids(int index) const;
  std::string* _internal_add_market_ids();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_market_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_market_ids();

  public:
  // string subaccount_id = 1 [json_name = "subaccountId"];
  void clear_subaccount_id() ;
  const std::string& subaccount_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_subaccount_id(Arg_&& arg, Args_... args);
  std::string* mutable_subaccount_id();
  PROTOBUF_NODISCARD std::string* release_subaccount_id();
  void set_allocated_subaccount_id(std::string* ptr);

  private:
  const std::string& _internal_subaccount_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_subaccount_id(
      const std::string& value);
  std::string* _internal_mutable_subaccount_id();

  public:
  // @@protoc_insertion_point(class_scope:injective.exchange.v1beta1.CreateSpotLimitOrderAuthz)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> market_ids_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subaccount_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2fexchange_2fv1beta1_2fauthz_2eproto;
};// -------------------------------------------------------------------

class CreateSpotMarketOrderAuthz final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.exchange.v1beta1.CreateSpotMarketOrderAuthz) */ {
 public:
  inline CreateSpotMarketOrderAuthz() : CreateSpotMarketOrderAuthz(nullptr) {}
  ~CreateSpotMarketOrderAuthz() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CreateSpotMarketOrderAuthz(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateSpotMarketOrderAuthz(const CreateSpotMarketOrderAuthz& from);
  CreateSpotMarketOrderAuthz(CreateSpotMarketOrderAuthz&& from) noexcept
    : CreateSpotMarketOrderAuthz() {
    *this = ::std::move(from);
  }

  inline CreateSpotMarketOrderAuthz& operator=(const CreateSpotMarketOrderAuthz& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateSpotMarketOrderAuthz& operator=(CreateSpotMarketOrderAuthz&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateSpotMarketOrderAuthz& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateSpotMarketOrderAuthz* internal_default_instance() {
    return reinterpret_cast<const CreateSpotMarketOrderAuthz*>(
               &_CreateSpotMarketOrderAuthz_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CreateSpotMarketOrderAuthz& a, CreateSpotMarketOrderAuthz& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateSpotMarketOrderAuthz* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateSpotMarketOrderAuthz* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateSpotMarketOrderAuthz* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateSpotMarketOrderAuthz>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateSpotMarketOrderAuthz& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateSpotMarketOrderAuthz& from) {
    CreateSpotMarketOrderAuthz::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateSpotMarketOrderAuthz* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.exchange.v1beta1.CreateSpotMarketOrderAuthz";
  }
  protected:
  explicit CreateSpotMarketOrderAuthz(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMarketIdsFieldNumber = 2,
    kSubaccountIdFieldNumber = 1,
  };
  // repeated string market_ids = 2 [json_name = "marketIds"];
  int market_ids_size() const;
  private:
  int _internal_market_ids_size() const;

  public:
  void clear_market_ids() ;
  const std::string& market_ids(int index) const;
  std::string* mutable_market_ids(int index);
  void set_market_ids(int index, const std::string& value);
  void set_market_ids(int index, std::string&& value);
  void set_market_ids(int index, const char* value);
  void set_market_ids(int index, const char* value, std::size_t size);
  void set_market_ids(int index, absl::string_view value);
  std::string* add_market_ids();
  void add_market_ids(const std::string& value);
  void add_market_ids(std::string&& value);
  void add_market_ids(const char* value);
  void add_market_ids(const char* value, std::size_t size);
  void add_market_ids(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& market_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_market_ids();

  private:
  const std::string& _internal_market_ids(int index) const;
  std::string* _internal_add_market_ids();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_market_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_market_ids();

  public:
  // string subaccount_id = 1 [json_name = "subaccountId"];
  void clear_subaccount_id() ;
  const std::string& subaccount_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_subaccount_id(Arg_&& arg, Args_... args);
  std::string* mutable_subaccount_id();
  PROTOBUF_NODISCARD std::string* release_subaccount_id();
  void set_allocated_subaccount_id(std::string* ptr);

  private:
  const std::string& _internal_subaccount_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_subaccount_id(
      const std::string& value);
  std::string* _internal_mutable_subaccount_id();

  public:
  // @@protoc_insertion_point(class_scope:injective.exchange.v1beta1.CreateSpotMarketOrderAuthz)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> market_ids_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subaccount_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2fexchange_2fv1beta1_2fauthz_2eproto;
};// -------------------------------------------------------------------

class BatchCreateSpotLimitOrdersAuthz final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.exchange.v1beta1.BatchCreateSpotLimitOrdersAuthz) */ {
 public:
  inline BatchCreateSpotLimitOrdersAuthz() : BatchCreateSpotLimitOrdersAuthz(nullptr) {}
  ~BatchCreateSpotLimitOrdersAuthz() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR BatchCreateSpotLimitOrdersAuthz(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BatchCreateSpotLimitOrdersAuthz(const BatchCreateSpotLimitOrdersAuthz& from);
  BatchCreateSpotLimitOrdersAuthz(BatchCreateSpotLimitOrdersAuthz&& from) noexcept
    : BatchCreateSpotLimitOrdersAuthz() {
    *this = ::std::move(from);
  }

  inline BatchCreateSpotLimitOrdersAuthz& operator=(const BatchCreateSpotLimitOrdersAuthz& from) {
    CopyFrom(from);
    return *this;
  }
  inline BatchCreateSpotLimitOrdersAuthz& operator=(BatchCreateSpotLimitOrdersAuthz&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BatchCreateSpotLimitOrdersAuthz& default_instance() {
    return *internal_default_instance();
  }
  static inline const BatchCreateSpotLimitOrdersAuthz* internal_default_instance() {
    return reinterpret_cast<const BatchCreateSpotLimitOrdersAuthz*>(
               &_BatchCreateSpotLimitOrdersAuthz_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(BatchCreateSpotLimitOrdersAuthz& a, BatchCreateSpotLimitOrdersAuthz& b) {
    a.Swap(&b);
  }
  inline void Swap(BatchCreateSpotLimitOrdersAuthz* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BatchCreateSpotLimitOrdersAuthz* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BatchCreateSpotLimitOrdersAuthz* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BatchCreateSpotLimitOrdersAuthz>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BatchCreateSpotLimitOrdersAuthz& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BatchCreateSpotLimitOrdersAuthz& from) {
    BatchCreateSpotLimitOrdersAuthz::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BatchCreateSpotLimitOrdersAuthz* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.exchange.v1beta1.BatchCreateSpotLimitOrdersAuthz";
  }
  protected:
  explicit BatchCreateSpotLimitOrdersAuthz(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMarketIdsFieldNumber = 2,
    kSubaccountIdFieldNumber = 1,
  };
  // repeated string market_ids = 2 [json_name = "marketIds"];
  int market_ids_size() const;
  private:
  int _internal_market_ids_size() const;

  public:
  void clear_market_ids() ;
  const std::string& market_ids(int index) const;
  std::string* mutable_market_ids(int index);
  void set_market_ids(int index, const std::string& value);
  void set_market_ids(int index, std::string&& value);
  void set_market_ids(int index, const char* value);
  void set_market_ids(int index, const char* value, std::size_t size);
  void set_market_ids(int index, absl::string_view value);
  std::string* add_market_ids();
  void add_market_ids(const std::string& value);
  void add_market_ids(std::string&& value);
  void add_market_ids(const char* value);
  void add_market_ids(const char* value, std::size_t size);
  void add_market_ids(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& market_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_market_ids();

  private:
  const std::string& _internal_market_ids(int index) const;
  std::string* _internal_add_market_ids();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_market_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_market_ids();

  public:
  // string subaccount_id = 1 [json_name = "subaccountId"];
  void clear_subaccount_id() ;
  const std::string& subaccount_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_subaccount_id(Arg_&& arg, Args_... args);
  std::string* mutable_subaccount_id();
  PROTOBUF_NODISCARD std::string* release_subaccount_id();
  void set_allocated_subaccount_id(std::string* ptr);

  private:
  const std::string& _internal_subaccount_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_subaccount_id(
      const std::string& value);
  std::string* _internal_mutable_subaccount_id();

  public:
  // @@protoc_insertion_point(class_scope:injective.exchange.v1beta1.BatchCreateSpotLimitOrdersAuthz)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> market_ids_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subaccount_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2fexchange_2fv1beta1_2fauthz_2eproto;
};// -------------------------------------------------------------------

class CancelSpotOrderAuthz final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.exchange.v1beta1.CancelSpotOrderAuthz) */ {
 public:
  inline CancelSpotOrderAuthz() : CancelSpotOrderAuthz(nullptr) {}
  ~CancelSpotOrderAuthz() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CancelSpotOrderAuthz(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CancelSpotOrderAuthz(const CancelSpotOrderAuthz& from);
  CancelSpotOrderAuthz(CancelSpotOrderAuthz&& from) noexcept
    : CancelSpotOrderAuthz() {
    *this = ::std::move(from);
  }

  inline CancelSpotOrderAuthz& operator=(const CancelSpotOrderAuthz& from) {
    CopyFrom(from);
    return *this;
  }
  inline CancelSpotOrderAuthz& operator=(CancelSpotOrderAuthz&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CancelSpotOrderAuthz& default_instance() {
    return *internal_default_instance();
  }
  static inline const CancelSpotOrderAuthz* internal_default_instance() {
    return reinterpret_cast<const CancelSpotOrderAuthz*>(
               &_CancelSpotOrderAuthz_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CancelSpotOrderAuthz& a, CancelSpotOrderAuthz& b) {
    a.Swap(&b);
  }
  inline void Swap(CancelSpotOrderAuthz* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CancelSpotOrderAuthz* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CancelSpotOrderAuthz* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CancelSpotOrderAuthz>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CancelSpotOrderAuthz& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CancelSpotOrderAuthz& from) {
    CancelSpotOrderAuthz::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CancelSpotOrderAuthz* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.exchange.v1beta1.CancelSpotOrderAuthz";
  }
  protected:
  explicit CancelSpotOrderAuthz(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMarketIdsFieldNumber = 2,
    kSubaccountIdFieldNumber = 1,
  };
  // repeated string market_ids = 2 [json_name = "marketIds"];
  int market_ids_size() const;
  private:
  int _internal_market_ids_size() const;

  public:
  void clear_market_ids() ;
  const std::string& market_ids(int index) const;
  std::string* mutable_market_ids(int index);
  void set_market_ids(int index, const std::string& value);
  void set_market_ids(int index, std::string&& value);
  void set_market_ids(int index, const char* value);
  void set_market_ids(int index, const char* value, std::size_t size);
  void set_market_ids(int index, absl::string_view value);
  std::string* add_market_ids();
  void add_market_ids(const std::string& value);
  void add_market_ids(std::string&& value);
  void add_market_ids(const char* value);
  void add_market_ids(const char* value, std::size_t size);
  void add_market_ids(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& market_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_market_ids();

  private:
  const std::string& _internal_market_ids(int index) const;
  std::string* _internal_add_market_ids();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_market_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_market_ids();

  public:
  // string subaccount_id = 1 [json_name = "subaccountId"];
  void clear_subaccount_id() ;
  const std::string& subaccount_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_subaccount_id(Arg_&& arg, Args_... args);
  std::string* mutable_subaccount_id();
  PROTOBUF_NODISCARD std::string* release_subaccount_id();
  void set_allocated_subaccount_id(std::string* ptr);

  private:
  const std::string& _internal_subaccount_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_subaccount_id(
      const std::string& value);
  std::string* _internal_mutable_subaccount_id();

  public:
  // @@protoc_insertion_point(class_scope:injective.exchange.v1beta1.CancelSpotOrderAuthz)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> market_ids_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subaccount_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2fexchange_2fv1beta1_2fauthz_2eproto;
};// -------------------------------------------------------------------

class BatchCancelSpotOrdersAuthz final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.exchange.v1beta1.BatchCancelSpotOrdersAuthz) */ {
 public:
  inline BatchCancelSpotOrdersAuthz() : BatchCancelSpotOrdersAuthz(nullptr) {}
  ~BatchCancelSpotOrdersAuthz() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR BatchCancelSpotOrdersAuthz(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BatchCancelSpotOrdersAuthz(const BatchCancelSpotOrdersAuthz& from);
  BatchCancelSpotOrdersAuthz(BatchCancelSpotOrdersAuthz&& from) noexcept
    : BatchCancelSpotOrdersAuthz() {
    *this = ::std::move(from);
  }

  inline BatchCancelSpotOrdersAuthz& operator=(const BatchCancelSpotOrdersAuthz& from) {
    CopyFrom(from);
    return *this;
  }
  inline BatchCancelSpotOrdersAuthz& operator=(BatchCancelSpotOrdersAuthz&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BatchCancelSpotOrdersAuthz& default_instance() {
    return *internal_default_instance();
  }
  static inline const BatchCancelSpotOrdersAuthz* internal_default_instance() {
    return reinterpret_cast<const BatchCancelSpotOrdersAuthz*>(
               &_BatchCancelSpotOrdersAuthz_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(BatchCancelSpotOrdersAuthz& a, BatchCancelSpotOrdersAuthz& b) {
    a.Swap(&b);
  }
  inline void Swap(BatchCancelSpotOrdersAuthz* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BatchCancelSpotOrdersAuthz* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BatchCancelSpotOrdersAuthz* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BatchCancelSpotOrdersAuthz>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BatchCancelSpotOrdersAuthz& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BatchCancelSpotOrdersAuthz& from) {
    BatchCancelSpotOrdersAuthz::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BatchCancelSpotOrdersAuthz* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.exchange.v1beta1.BatchCancelSpotOrdersAuthz";
  }
  protected:
  explicit BatchCancelSpotOrdersAuthz(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMarketIdsFieldNumber = 2,
    kSubaccountIdFieldNumber = 1,
  };
  // repeated string market_ids = 2 [json_name = "marketIds"];
  int market_ids_size() const;
  private:
  int _internal_market_ids_size() const;

  public:
  void clear_market_ids() ;
  const std::string& market_ids(int index) const;
  std::string* mutable_market_ids(int index);
  void set_market_ids(int index, const std::string& value);
  void set_market_ids(int index, std::string&& value);
  void set_market_ids(int index, const char* value);
  void set_market_ids(int index, const char* value, std::size_t size);
  void set_market_ids(int index, absl::string_view value);
  std::string* add_market_ids();
  void add_market_ids(const std::string& value);
  void add_market_ids(std::string&& value);
  void add_market_ids(const char* value);
  void add_market_ids(const char* value, std::size_t size);
  void add_market_ids(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& market_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_market_ids();

  private:
  const std::string& _internal_market_ids(int index) const;
  std::string* _internal_add_market_ids();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_market_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_market_ids();

  public:
  // string subaccount_id = 1 [json_name = "subaccountId"];
  void clear_subaccount_id() ;
  const std::string& subaccount_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_subaccount_id(Arg_&& arg, Args_... args);
  std::string* mutable_subaccount_id();
  PROTOBUF_NODISCARD std::string* release_subaccount_id();
  void set_allocated_subaccount_id(std::string* ptr);

  private:
  const std::string& _internal_subaccount_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_subaccount_id(
      const std::string& value);
  std::string* _internal_mutable_subaccount_id();

  public:
  // @@protoc_insertion_point(class_scope:injective.exchange.v1beta1.BatchCancelSpotOrdersAuthz)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> market_ids_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subaccount_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2fexchange_2fv1beta1_2fauthz_2eproto;
};// -------------------------------------------------------------------

class CreateDerivativeLimitOrderAuthz final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.exchange.v1beta1.CreateDerivativeLimitOrderAuthz) */ {
 public:
  inline CreateDerivativeLimitOrderAuthz() : CreateDerivativeLimitOrderAuthz(nullptr) {}
  ~CreateDerivativeLimitOrderAuthz() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CreateDerivativeLimitOrderAuthz(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateDerivativeLimitOrderAuthz(const CreateDerivativeLimitOrderAuthz& from);
  CreateDerivativeLimitOrderAuthz(CreateDerivativeLimitOrderAuthz&& from) noexcept
    : CreateDerivativeLimitOrderAuthz() {
    *this = ::std::move(from);
  }

  inline CreateDerivativeLimitOrderAuthz& operator=(const CreateDerivativeLimitOrderAuthz& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateDerivativeLimitOrderAuthz& operator=(CreateDerivativeLimitOrderAuthz&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateDerivativeLimitOrderAuthz& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateDerivativeLimitOrderAuthz* internal_default_instance() {
    return reinterpret_cast<const CreateDerivativeLimitOrderAuthz*>(
               &_CreateDerivativeLimitOrderAuthz_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CreateDerivativeLimitOrderAuthz& a, CreateDerivativeLimitOrderAuthz& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateDerivativeLimitOrderAuthz* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateDerivativeLimitOrderAuthz* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateDerivativeLimitOrderAuthz* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateDerivativeLimitOrderAuthz>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateDerivativeLimitOrderAuthz& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateDerivativeLimitOrderAuthz& from) {
    CreateDerivativeLimitOrderAuthz::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateDerivativeLimitOrderAuthz* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.exchange.v1beta1.CreateDerivativeLimitOrderAuthz";
  }
  protected:
  explicit CreateDerivativeLimitOrderAuthz(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMarketIdsFieldNumber = 2,
    kSubaccountIdFieldNumber = 1,
  };
  // repeated string market_ids = 2 [json_name = "marketIds"];
  int market_ids_size() const;
  private:
  int _internal_market_ids_size() const;

  public:
  void clear_market_ids() ;
  const std::string& market_ids(int index) const;
  std::string* mutable_market_ids(int index);
  void set_market_ids(int index, const std::string& value);
  void set_market_ids(int index, std::string&& value);
  void set_market_ids(int index, const char* value);
  void set_market_ids(int index, const char* value, std::size_t size);
  void set_market_ids(int index, absl::string_view value);
  std::string* add_market_ids();
  void add_market_ids(const std::string& value);
  void add_market_ids(std::string&& value);
  void add_market_ids(const char* value);
  void add_market_ids(const char* value, std::size_t size);
  void add_market_ids(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& market_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_market_ids();

  private:
  const std::string& _internal_market_ids(int index) const;
  std::string* _internal_add_market_ids();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_market_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_market_ids();

  public:
  // string subaccount_id = 1 [json_name = "subaccountId"];
  void clear_subaccount_id() ;
  const std::string& subaccount_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_subaccount_id(Arg_&& arg, Args_... args);
  std::string* mutable_subaccount_id();
  PROTOBUF_NODISCARD std::string* release_subaccount_id();
  void set_allocated_subaccount_id(std::string* ptr);

  private:
  const std::string& _internal_subaccount_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_subaccount_id(
      const std::string& value);
  std::string* _internal_mutable_subaccount_id();

  public:
  // @@protoc_insertion_point(class_scope:injective.exchange.v1beta1.CreateDerivativeLimitOrderAuthz)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> market_ids_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subaccount_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2fexchange_2fv1beta1_2fauthz_2eproto;
};// -------------------------------------------------------------------

class CreateDerivativeMarketOrderAuthz final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.exchange.v1beta1.CreateDerivativeMarketOrderAuthz) */ {
 public:
  inline CreateDerivativeMarketOrderAuthz() : CreateDerivativeMarketOrderAuthz(nullptr) {}
  ~CreateDerivativeMarketOrderAuthz() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CreateDerivativeMarketOrderAuthz(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateDerivativeMarketOrderAuthz(const CreateDerivativeMarketOrderAuthz& from);
  CreateDerivativeMarketOrderAuthz(CreateDerivativeMarketOrderAuthz&& from) noexcept
    : CreateDerivativeMarketOrderAuthz() {
    *this = ::std::move(from);
  }

  inline CreateDerivativeMarketOrderAuthz& operator=(const CreateDerivativeMarketOrderAuthz& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateDerivativeMarketOrderAuthz& operator=(CreateDerivativeMarketOrderAuthz&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateDerivativeMarketOrderAuthz& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateDerivativeMarketOrderAuthz* internal_default_instance() {
    return reinterpret_cast<const CreateDerivativeMarketOrderAuthz*>(
               &_CreateDerivativeMarketOrderAuthz_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CreateDerivativeMarketOrderAuthz& a, CreateDerivativeMarketOrderAuthz& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateDerivativeMarketOrderAuthz* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateDerivativeMarketOrderAuthz* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateDerivativeMarketOrderAuthz* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateDerivativeMarketOrderAuthz>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateDerivativeMarketOrderAuthz& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateDerivativeMarketOrderAuthz& from) {
    CreateDerivativeMarketOrderAuthz::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateDerivativeMarketOrderAuthz* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.exchange.v1beta1.CreateDerivativeMarketOrderAuthz";
  }
  protected:
  explicit CreateDerivativeMarketOrderAuthz(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMarketIdsFieldNumber = 2,
    kSubaccountIdFieldNumber = 1,
  };
  // repeated string market_ids = 2 [json_name = "marketIds"];
  int market_ids_size() const;
  private:
  int _internal_market_ids_size() const;

  public:
  void clear_market_ids() ;
  const std::string& market_ids(int index) const;
  std::string* mutable_market_ids(int index);
  void set_market_ids(int index, const std::string& value);
  void set_market_ids(int index, std::string&& value);
  void set_market_ids(int index, const char* value);
  void set_market_ids(int index, const char* value, std::size_t size);
  void set_market_ids(int index, absl::string_view value);
  std::string* add_market_ids();
  void add_market_ids(const std::string& value);
  void add_market_ids(std::string&& value);
  void add_market_ids(const char* value);
  void add_market_ids(const char* value, std::size_t size);
  void add_market_ids(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& market_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_market_ids();

  private:
  const std::string& _internal_market_ids(int index) const;
  std::string* _internal_add_market_ids();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_market_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_market_ids();

  public:
  // string subaccount_id = 1 [json_name = "subaccountId"];
  void clear_subaccount_id() ;
  const std::string& subaccount_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_subaccount_id(Arg_&& arg, Args_... args);
  std::string* mutable_subaccount_id();
  PROTOBUF_NODISCARD std::string* release_subaccount_id();
  void set_allocated_subaccount_id(std::string* ptr);

  private:
  const std::string& _internal_subaccount_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_subaccount_id(
      const std::string& value);
  std::string* _internal_mutable_subaccount_id();

  public:
  // @@protoc_insertion_point(class_scope:injective.exchange.v1beta1.CreateDerivativeMarketOrderAuthz)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> market_ids_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subaccount_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2fexchange_2fv1beta1_2fauthz_2eproto;
};// -------------------------------------------------------------------

class BatchCreateDerivativeLimitOrdersAuthz final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.exchange.v1beta1.BatchCreateDerivativeLimitOrdersAuthz) */ {
 public:
  inline BatchCreateDerivativeLimitOrdersAuthz() : BatchCreateDerivativeLimitOrdersAuthz(nullptr) {}
  ~BatchCreateDerivativeLimitOrdersAuthz() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR BatchCreateDerivativeLimitOrdersAuthz(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BatchCreateDerivativeLimitOrdersAuthz(const BatchCreateDerivativeLimitOrdersAuthz& from);
  BatchCreateDerivativeLimitOrdersAuthz(BatchCreateDerivativeLimitOrdersAuthz&& from) noexcept
    : BatchCreateDerivativeLimitOrdersAuthz() {
    *this = ::std::move(from);
  }

  inline BatchCreateDerivativeLimitOrdersAuthz& operator=(const BatchCreateDerivativeLimitOrdersAuthz& from) {
    CopyFrom(from);
    return *this;
  }
  inline BatchCreateDerivativeLimitOrdersAuthz& operator=(BatchCreateDerivativeLimitOrdersAuthz&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BatchCreateDerivativeLimitOrdersAuthz& default_instance() {
    return *internal_default_instance();
  }
  static inline const BatchCreateDerivativeLimitOrdersAuthz* internal_default_instance() {
    return reinterpret_cast<const BatchCreateDerivativeLimitOrdersAuthz*>(
               &_BatchCreateDerivativeLimitOrdersAuthz_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(BatchCreateDerivativeLimitOrdersAuthz& a, BatchCreateDerivativeLimitOrdersAuthz& b) {
    a.Swap(&b);
  }
  inline void Swap(BatchCreateDerivativeLimitOrdersAuthz* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BatchCreateDerivativeLimitOrdersAuthz* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BatchCreateDerivativeLimitOrdersAuthz* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BatchCreateDerivativeLimitOrdersAuthz>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BatchCreateDerivativeLimitOrdersAuthz& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BatchCreateDerivativeLimitOrdersAuthz& from) {
    BatchCreateDerivativeLimitOrdersAuthz::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BatchCreateDerivativeLimitOrdersAuthz* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.exchange.v1beta1.BatchCreateDerivativeLimitOrdersAuthz";
  }
  protected:
  explicit BatchCreateDerivativeLimitOrdersAuthz(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMarketIdsFieldNumber = 2,
    kSubaccountIdFieldNumber = 1,
  };
  // repeated string market_ids = 2 [json_name = "marketIds"];
  int market_ids_size() const;
  private:
  int _internal_market_ids_size() const;

  public:
  void clear_market_ids() ;
  const std::string& market_ids(int index) const;
  std::string* mutable_market_ids(int index);
  void set_market_ids(int index, const std::string& value);
  void set_market_ids(int index, std::string&& value);
  void set_market_ids(int index, const char* value);
  void set_market_ids(int index, const char* value, std::size_t size);
  void set_market_ids(int index, absl::string_view value);
  std::string* add_market_ids();
  void add_market_ids(const std::string& value);
  void add_market_ids(std::string&& value);
  void add_market_ids(const char* value);
  void add_market_ids(const char* value, std::size_t size);
  void add_market_ids(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& market_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_market_ids();

  private:
  const std::string& _internal_market_ids(int index) const;
  std::string* _internal_add_market_ids();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_market_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_market_ids();

  public:
  // string subaccount_id = 1 [json_name = "subaccountId"];
  void clear_subaccount_id() ;
  const std::string& subaccount_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_subaccount_id(Arg_&& arg, Args_... args);
  std::string* mutable_subaccount_id();
  PROTOBUF_NODISCARD std::string* release_subaccount_id();
  void set_allocated_subaccount_id(std::string* ptr);

  private:
  const std::string& _internal_subaccount_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_subaccount_id(
      const std::string& value);
  std::string* _internal_mutable_subaccount_id();

  public:
  // @@protoc_insertion_point(class_scope:injective.exchange.v1beta1.BatchCreateDerivativeLimitOrdersAuthz)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> market_ids_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subaccount_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2fexchange_2fv1beta1_2fauthz_2eproto;
};// -------------------------------------------------------------------

class CancelDerivativeOrderAuthz final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.exchange.v1beta1.CancelDerivativeOrderAuthz) */ {
 public:
  inline CancelDerivativeOrderAuthz() : CancelDerivativeOrderAuthz(nullptr) {}
  ~CancelDerivativeOrderAuthz() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CancelDerivativeOrderAuthz(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CancelDerivativeOrderAuthz(const CancelDerivativeOrderAuthz& from);
  CancelDerivativeOrderAuthz(CancelDerivativeOrderAuthz&& from) noexcept
    : CancelDerivativeOrderAuthz() {
    *this = ::std::move(from);
  }

  inline CancelDerivativeOrderAuthz& operator=(const CancelDerivativeOrderAuthz& from) {
    CopyFrom(from);
    return *this;
  }
  inline CancelDerivativeOrderAuthz& operator=(CancelDerivativeOrderAuthz&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CancelDerivativeOrderAuthz& default_instance() {
    return *internal_default_instance();
  }
  static inline const CancelDerivativeOrderAuthz* internal_default_instance() {
    return reinterpret_cast<const CancelDerivativeOrderAuthz*>(
               &_CancelDerivativeOrderAuthz_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CancelDerivativeOrderAuthz& a, CancelDerivativeOrderAuthz& b) {
    a.Swap(&b);
  }
  inline void Swap(CancelDerivativeOrderAuthz* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CancelDerivativeOrderAuthz* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CancelDerivativeOrderAuthz* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CancelDerivativeOrderAuthz>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CancelDerivativeOrderAuthz& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CancelDerivativeOrderAuthz& from) {
    CancelDerivativeOrderAuthz::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CancelDerivativeOrderAuthz* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.exchange.v1beta1.CancelDerivativeOrderAuthz";
  }
  protected:
  explicit CancelDerivativeOrderAuthz(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMarketIdsFieldNumber = 2,
    kSubaccountIdFieldNumber = 1,
  };
  // repeated string market_ids = 2 [json_name = "marketIds"];
  int market_ids_size() const;
  private:
  int _internal_market_ids_size() const;

  public:
  void clear_market_ids() ;
  const std::string& market_ids(int index) const;
  std::string* mutable_market_ids(int index);
  void set_market_ids(int index, const std::string& value);
  void set_market_ids(int index, std::string&& value);
  void set_market_ids(int index, const char* value);
  void set_market_ids(int index, const char* value, std::size_t size);
  void set_market_ids(int index, absl::string_view value);
  std::string* add_market_ids();
  void add_market_ids(const std::string& value);
  void add_market_ids(std::string&& value);
  void add_market_ids(const char* value);
  void add_market_ids(const char* value, std::size_t size);
  void add_market_ids(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& market_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_market_ids();

  private:
  const std::string& _internal_market_ids(int index) const;
  std::string* _internal_add_market_ids();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_market_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_market_ids();

  public:
  // string subaccount_id = 1 [json_name = "subaccountId"];
  void clear_subaccount_id() ;
  const std::string& subaccount_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_subaccount_id(Arg_&& arg, Args_... args);
  std::string* mutable_subaccount_id();
  PROTOBUF_NODISCARD std::string* release_subaccount_id();
  void set_allocated_subaccount_id(std::string* ptr);

  private:
  const std::string& _internal_subaccount_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_subaccount_id(
      const std::string& value);
  std::string* _internal_mutable_subaccount_id();

  public:
  // @@protoc_insertion_point(class_scope:injective.exchange.v1beta1.CancelDerivativeOrderAuthz)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> market_ids_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subaccount_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2fexchange_2fv1beta1_2fauthz_2eproto;
};// -------------------------------------------------------------------

class BatchCancelDerivativeOrdersAuthz final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.exchange.v1beta1.BatchCancelDerivativeOrdersAuthz) */ {
 public:
  inline BatchCancelDerivativeOrdersAuthz() : BatchCancelDerivativeOrdersAuthz(nullptr) {}
  ~BatchCancelDerivativeOrdersAuthz() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR BatchCancelDerivativeOrdersAuthz(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BatchCancelDerivativeOrdersAuthz(const BatchCancelDerivativeOrdersAuthz& from);
  BatchCancelDerivativeOrdersAuthz(BatchCancelDerivativeOrdersAuthz&& from) noexcept
    : BatchCancelDerivativeOrdersAuthz() {
    *this = ::std::move(from);
  }

  inline BatchCancelDerivativeOrdersAuthz& operator=(const BatchCancelDerivativeOrdersAuthz& from) {
    CopyFrom(from);
    return *this;
  }
  inline BatchCancelDerivativeOrdersAuthz& operator=(BatchCancelDerivativeOrdersAuthz&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BatchCancelDerivativeOrdersAuthz& default_instance() {
    return *internal_default_instance();
  }
  static inline const BatchCancelDerivativeOrdersAuthz* internal_default_instance() {
    return reinterpret_cast<const BatchCancelDerivativeOrdersAuthz*>(
               &_BatchCancelDerivativeOrdersAuthz_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(BatchCancelDerivativeOrdersAuthz& a, BatchCancelDerivativeOrdersAuthz& b) {
    a.Swap(&b);
  }
  inline void Swap(BatchCancelDerivativeOrdersAuthz* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BatchCancelDerivativeOrdersAuthz* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BatchCancelDerivativeOrdersAuthz* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BatchCancelDerivativeOrdersAuthz>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BatchCancelDerivativeOrdersAuthz& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BatchCancelDerivativeOrdersAuthz& from) {
    BatchCancelDerivativeOrdersAuthz::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BatchCancelDerivativeOrdersAuthz* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.exchange.v1beta1.BatchCancelDerivativeOrdersAuthz";
  }
  protected:
  explicit BatchCancelDerivativeOrdersAuthz(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMarketIdsFieldNumber = 2,
    kSubaccountIdFieldNumber = 1,
  };
  // repeated string market_ids = 2 [json_name = "marketIds"];
  int market_ids_size() const;
  private:
  int _internal_market_ids_size() const;

  public:
  void clear_market_ids() ;
  const std::string& market_ids(int index) const;
  std::string* mutable_market_ids(int index);
  void set_market_ids(int index, const std::string& value);
  void set_market_ids(int index, std::string&& value);
  void set_market_ids(int index, const char* value);
  void set_market_ids(int index, const char* value, std::size_t size);
  void set_market_ids(int index, absl::string_view value);
  std::string* add_market_ids();
  void add_market_ids(const std::string& value);
  void add_market_ids(std::string&& value);
  void add_market_ids(const char* value);
  void add_market_ids(const char* value, std::size_t size);
  void add_market_ids(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& market_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_market_ids();

  private:
  const std::string& _internal_market_ids(int index) const;
  std::string* _internal_add_market_ids();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_market_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_market_ids();

  public:
  // string subaccount_id = 1 [json_name = "subaccountId"];
  void clear_subaccount_id() ;
  const std::string& subaccount_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_subaccount_id(Arg_&& arg, Args_... args);
  std::string* mutable_subaccount_id();
  PROTOBUF_NODISCARD std::string* release_subaccount_id();
  void set_allocated_subaccount_id(std::string* ptr);

  private:
  const std::string& _internal_subaccount_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_subaccount_id(
      const std::string& value);
  std::string* _internal_mutable_subaccount_id();

  public:
  // @@protoc_insertion_point(class_scope:injective.exchange.v1beta1.BatchCancelDerivativeOrdersAuthz)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> market_ids_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subaccount_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2fexchange_2fv1beta1_2fauthz_2eproto;
};// -------------------------------------------------------------------

class BatchUpdateOrdersAuthz final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.exchange.v1beta1.BatchUpdateOrdersAuthz) */ {
 public:
  inline BatchUpdateOrdersAuthz() : BatchUpdateOrdersAuthz(nullptr) {}
  ~BatchUpdateOrdersAuthz() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR BatchUpdateOrdersAuthz(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BatchUpdateOrdersAuthz(const BatchUpdateOrdersAuthz& from);
  BatchUpdateOrdersAuthz(BatchUpdateOrdersAuthz&& from) noexcept
    : BatchUpdateOrdersAuthz() {
    *this = ::std::move(from);
  }

  inline BatchUpdateOrdersAuthz& operator=(const BatchUpdateOrdersAuthz& from) {
    CopyFrom(from);
    return *this;
  }
  inline BatchUpdateOrdersAuthz& operator=(BatchUpdateOrdersAuthz&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BatchUpdateOrdersAuthz& default_instance() {
    return *internal_default_instance();
  }
  static inline const BatchUpdateOrdersAuthz* internal_default_instance() {
    return reinterpret_cast<const BatchUpdateOrdersAuthz*>(
               &_BatchUpdateOrdersAuthz_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(BatchUpdateOrdersAuthz& a, BatchUpdateOrdersAuthz& b) {
    a.Swap(&b);
  }
  inline void Swap(BatchUpdateOrdersAuthz* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BatchUpdateOrdersAuthz* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BatchUpdateOrdersAuthz* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BatchUpdateOrdersAuthz>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BatchUpdateOrdersAuthz& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BatchUpdateOrdersAuthz& from) {
    BatchUpdateOrdersAuthz::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BatchUpdateOrdersAuthz* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.exchange.v1beta1.BatchUpdateOrdersAuthz";
  }
  protected:
  explicit BatchUpdateOrdersAuthz(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpotMarketsFieldNumber = 2,
    kDerivativeMarketsFieldNumber = 3,
    kSubaccountIdFieldNumber = 1,
  };
  // repeated string spot_markets = 2 [json_name = "spotMarkets"];
  int spot_markets_size() const;
  private:
  int _internal_spot_markets_size() const;

  public:
  void clear_spot_markets() ;
  const std::string& spot_markets(int index) const;
  std::string* mutable_spot_markets(int index);
  void set_spot_markets(int index, const std::string& value);
  void set_spot_markets(int index, std::string&& value);
  void set_spot_markets(int index, const char* value);
  void set_spot_markets(int index, const char* value, std::size_t size);
  void set_spot_markets(int index, absl::string_view value);
  std::string* add_spot_markets();
  void add_spot_markets(const std::string& value);
  void add_spot_markets(std::string&& value);
  void add_spot_markets(const char* value);
  void add_spot_markets(const char* value, std::size_t size);
  void add_spot_markets(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& spot_markets() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_spot_markets();

  private:
  const std::string& _internal_spot_markets(int index) const;
  std::string* _internal_add_spot_markets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_spot_markets() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_spot_markets();

  public:
  // repeated string derivative_markets = 3 [json_name = "derivativeMarkets"];
  int derivative_markets_size() const;
  private:
  int _internal_derivative_markets_size() const;

  public:
  void clear_derivative_markets() ;
  const std::string& derivative_markets(int index) const;
  std::string* mutable_derivative_markets(int index);
  void set_derivative_markets(int index, const std::string& value);
  void set_derivative_markets(int index, std::string&& value);
  void set_derivative_markets(int index, const char* value);
  void set_derivative_markets(int index, const char* value, std::size_t size);
  void set_derivative_markets(int index, absl::string_view value);
  std::string* add_derivative_markets();
  void add_derivative_markets(const std::string& value);
  void add_derivative_markets(std::string&& value);
  void add_derivative_markets(const char* value);
  void add_derivative_markets(const char* value, std::size_t size);
  void add_derivative_markets(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& derivative_markets() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_derivative_markets();

  private:
  const std::string& _internal_derivative_markets(int index) const;
  std::string* _internal_add_derivative_markets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_derivative_markets() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_derivative_markets();

  public:
  // string subaccount_id = 1 [json_name = "subaccountId"];
  void clear_subaccount_id() ;
  const std::string& subaccount_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_subaccount_id(Arg_&& arg, Args_... args);
  std::string* mutable_subaccount_id();
  PROTOBUF_NODISCARD std::string* release_subaccount_id();
  void set_allocated_subaccount_id(std::string* ptr);

  private:
  const std::string& _internal_subaccount_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_subaccount_id(
      const std::string& value);
  std::string* _internal_mutable_subaccount_id();

  public:
  // @@protoc_insertion_point(class_scope:injective.exchange.v1beta1.BatchUpdateOrdersAuthz)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> spot_markets_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> derivative_markets_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subaccount_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2fexchange_2fv1beta1_2fauthz_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// CreateSpotLimitOrderAuthz

// string subaccount_id = 1 [json_name = "subaccountId"];
inline void CreateSpotLimitOrderAuthz::clear_subaccount_id() {
  _impl_.subaccount_id_.ClearToEmpty();
}
inline const std::string& CreateSpotLimitOrderAuthz::subaccount_id() const {
  // @@protoc_insertion_point(field_get:injective.exchange.v1beta1.CreateSpotLimitOrderAuthz.subaccount_id)
  return _internal_subaccount_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CreateSpotLimitOrderAuthz::set_subaccount_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.subaccount_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.exchange.v1beta1.CreateSpotLimitOrderAuthz.subaccount_id)
}
inline std::string* CreateSpotLimitOrderAuthz::mutable_subaccount_id() {
  std::string* _s = _internal_mutable_subaccount_id();
  // @@protoc_insertion_point(field_mutable:injective.exchange.v1beta1.CreateSpotLimitOrderAuthz.subaccount_id)
  return _s;
}
inline const std::string& CreateSpotLimitOrderAuthz::_internal_subaccount_id() const {
  return _impl_.subaccount_id_.Get();
}
inline void CreateSpotLimitOrderAuthz::_internal_set_subaccount_id(const std::string& value) {
  ;


  _impl_.subaccount_id_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateSpotLimitOrderAuthz::_internal_mutable_subaccount_id() {
  ;
  return _impl_.subaccount_id_.Mutable( GetArenaForAllocation());
}
inline std::string* CreateSpotLimitOrderAuthz::release_subaccount_id() {
  // @@protoc_insertion_point(field_release:injective.exchange.v1beta1.CreateSpotLimitOrderAuthz.subaccount_id)
  return _impl_.subaccount_id_.Release();
}
inline void CreateSpotLimitOrderAuthz::set_allocated_subaccount_id(std::string* value) {
  _impl_.subaccount_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.subaccount_id_.IsDefault()) {
          _impl_.subaccount_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.exchange.v1beta1.CreateSpotLimitOrderAuthz.subaccount_id)
}

// repeated string market_ids = 2 [json_name = "marketIds"];
inline int CreateSpotLimitOrderAuthz::_internal_market_ids_size() const {
  return _impl_.market_ids_.size();
}
inline int CreateSpotLimitOrderAuthz::market_ids_size() const {
  return _internal_market_ids_size();
}
inline void CreateSpotLimitOrderAuthz::clear_market_ids() {
  _internal_mutable_market_ids()->Clear();
}
inline std::string* CreateSpotLimitOrderAuthz::add_market_ids() {
  std::string* _s = _internal_add_market_ids();
  // @@protoc_insertion_point(field_add_mutable:injective.exchange.v1beta1.CreateSpotLimitOrderAuthz.market_ids)
  return _s;
}
inline const std::string& CreateSpotLimitOrderAuthz::market_ids(int index) const {
  // @@protoc_insertion_point(field_get:injective.exchange.v1beta1.CreateSpotLimitOrderAuthz.market_ids)
  return _internal_market_ids(index);
}
inline std::string* CreateSpotLimitOrderAuthz::mutable_market_ids(int index) {
  // @@protoc_insertion_point(field_mutable:injective.exchange.v1beta1.CreateSpotLimitOrderAuthz.market_ids)
  return _internal_mutable_market_ids()->Mutable(index);
}
inline void CreateSpotLimitOrderAuthz::set_market_ids(int index, const std::string& value) {
  _internal_mutable_market_ids()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:injective.exchange.v1beta1.CreateSpotLimitOrderAuthz.market_ids)
}
inline void CreateSpotLimitOrderAuthz::set_market_ids(int index, std::string&& value) {
  _internal_mutable_market_ids()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:injective.exchange.v1beta1.CreateSpotLimitOrderAuthz.market_ids)
}
inline void CreateSpotLimitOrderAuthz::set_market_ids(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_market_ids()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:injective.exchange.v1beta1.CreateSpotLimitOrderAuthz.market_ids)
}
inline void CreateSpotLimitOrderAuthz::set_market_ids(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_market_ids()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:injective.exchange.v1beta1.CreateSpotLimitOrderAuthz.market_ids)
}
inline void CreateSpotLimitOrderAuthz::set_market_ids(int index, absl::string_view value) {
  _internal_mutable_market_ids()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:injective.exchange.v1beta1.CreateSpotLimitOrderAuthz.market_ids)
}
inline void CreateSpotLimitOrderAuthz::add_market_ids(const std::string& value) {
  _internal_mutable_market_ids()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:injective.exchange.v1beta1.CreateSpotLimitOrderAuthz.market_ids)
}
inline void CreateSpotLimitOrderAuthz::add_market_ids(std::string&& value) {
  _internal_mutable_market_ids()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:injective.exchange.v1beta1.CreateSpotLimitOrderAuthz.market_ids)
}
inline void CreateSpotLimitOrderAuthz::add_market_ids(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_market_ids()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:injective.exchange.v1beta1.CreateSpotLimitOrderAuthz.market_ids)
}
inline void CreateSpotLimitOrderAuthz::add_market_ids(const char* value, std::size_t size) {
  _internal_mutable_market_ids()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:injective.exchange.v1beta1.CreateSpotLimitOrderAuthz.market_ids)
}
inline void CreateSpotLimitOrderAuthz::add_market_ids(absl::string_view value) {
  _internal_mutable_market_ids()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:injective.exchange.v1beta1.CreateSpotLimitOrderAuthz.market_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CreateSpotLimitOrderAuthz::market_ids() const {
  // @@protoc_insertion_point(field_list:injective.exchange.v1beta1.CreateSpotLimitOrderAuthz.market_ids)
  return _internal_market_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* CreateSpotLimitOrderAuthz::mutable_market_ids() {
  // @@protoc_insertion_point(field_mutable_list:injective.exchange.v1beta1.CreateSpotLimitOrderAuthz.market_ids)
  return _internal_mutable_market_ids();
}
inline const std::string& CreateSpotLimitOrderAuthz::_internal_market_ids(int index) const {
  return _internal_market_ids().Get(index);
}
inline std::string* CreateSpotLimitOrderAuthz::_internal_add_market_ids() {
  return _internal_mutable_market_ids()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CreateSpotLimitOrderAuthz::_internal_market_ids() const {
  return _impl_.market_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CreateSpotLimitOrderAuthz::_internal_mutable_market_ids() {
  return &_impl_.market_ids_;
}

// -------------------------------------------------------------------

// CreateSpotMarketOrderAuthz

// string subaccount_id = 1 [json_name = "subaccountId"];
inline void CreateSpotMarketOrderAuthz::clear_subaccount_id() {
  _impl_.subaccount_id_.ClearToEmpty();
}
inline const std::string& CreateSpotMarketOrderAuthz::subaccount_id() const {
  // @@protoc_insertion_point(field_get:injective.exchange.v1beta1.CreateSpotMarketOrderAuthz.subaccount_id)
  return _internal_subaccount_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CreateSpotMarketOrderAuthz::set_subaccount_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.subaccount_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.exchange.v1beta1.CreateSpotMarketOrderAuthz.subaccount_id)
}
inline std::string* CreateSpotMarketOrderAuthz::mutable_subaccount_id() {
  std::string* _s = _internal_mutable_subaccount_id();
  // @@protoc_insertion_point(field_mutable:injective.exchange.v1beta1.CreateSpotMarketOrderAuthz.subaccount_id)
  return _s;
}
inline const std::string& CreateSpotMarketOrderAuthz::_internal_subaccount_id() const {
  return _impl_.subaccount_id_.Get();
}
inline void CreateSpotMarketOrderAuthz::_internal_set_subaccount_id(const std::string& value) {
  ;


  _impl_.subaccount_id_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateSpotMarketOrderAuthz::_internal_mutable_subaccount_id() {
  ;
  return _impl_.subaccount_id_.Mutable( GetArenaForAllocation());
}
inline std::string* CreateSpotMarketOrderAuthz::release_subaccount_id() {
  // @@protoc_insertion_point(field_release:injective.exchange.v1beta1.CreateSpotMarketOrderAuthz.subaccount_id)
  return _impl_.subaccount_id_.Release();
}
inline void CreateSpotMarketOrderAuthz::set_allocated_subaccount_id(std::string* value) {
  _impl_.subaccount_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.subaccount_id_.IsDefault()) {
          _impl_.subaccount_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.exchange.v1beta1.CreateSpotMarketOrderAuthz.subaccount_id)
}

// repeated string market_ids = 2 [json_name = "marketIds"];
inline int CreateSpotMarketOrderAuthz::_internal_market_ids_size() const {
  return _impl_.market_ids_.size();
}
inline int CreateSpotMarketOrderAuthz::market_ids_size() const {
  return _internal_market_ids_size();
}
inline void CreateSpotMarketOrderAuthz::clear_market_ids() {
  _internal_mutable_market_ids()->Clear();
}
inline std::string* CreateSpotMarketOrderAuthz::add_market_ids() {
  std::string* _s = _internal_add_market_ids();
  // @@protoc_insertion_point(field_add_mutable:injective.exchange.v1beta1.CreateSpotMarketOrderAuthz.market_ids)
  return _s;
}
inline const std::string& CreateSpotMarketOrderAuthz::market_ids(int index) const {
  // @@protoc_insertion_point(field_get:injective.exchange.v1beta1.CreateSpotMarketOrderAuthz.market_ids)
  return _internal_market_ids(index);
}
inline std::string* CreateSpotMarketOrderAuthz::mutable_market_ids(int index) {
  // @@protoc_insertion_point(field_mutable:injective.exchange.v1beta1.CreateSpotMarketOrderAuthz.market_ids)
  return _internal_mutable_market_ids()->Mutable(index);
}
inline void CreateSpotMarketOrderAuthz::set_market_ids(int index, const std::string& value) {
  _internal_mutable_market_ids()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:injective.exchange.v1beta1.CreateSpotMarketOrderAuthz.market_ids)
}
inline void CreateSpotMarketOrderAuthz::set_market_ids(int index, std::string&& value) {
  _internal_mutable_market_ids()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:injective.exchange.v1beta1.CreateSpotMarketOrderAuthz.market_ids)
}
inline void CreateSpotMarketOrderAuthz::set_market_ids(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_market_ids()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:injective.exchange.v1beta1.CreateSpotMarketOrderAuthz.market_ids)
}
inline void CreateSpotMarketOrderAuthz::set_market_ids(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_market_ids()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:injective.exchange.v1beta1.CreateSpotMarketOrderAuthz.market_ids)
}
inline void CreateSpotMarketOrderAuthz::set_market_ids(int index, absl::string_view value) {
  _internal_mutable_market_ids()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:injective.exchange.v1beta1.CreateSpotMarketOrderAuthz.market_ids)
}
inline void CreateSpotMarketOrderAuthz::add_market_ids(const std::string& value) {
  _internal_mutable_market_ids()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:injective.exchange.v1beta1.CreateSpotMarketOrderAuthz.market_ids)
}
inline void CreateSpotMarketOrderAuthz::add_market_ids(std::string&& value) {
  _internal_mutable_market_ids()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:injective.exchange.v1beta1.CreateSpotMarketOrderAuthz.market_ids)
}
inline void CreateSpotMarketOrderAuthz::add_market_ids(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_market_ids()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:injective.exchange.v1beta1.CreateSpotMarketOrderAuthz.market_ids)
}
inline void CreateSpotMarketOrderAuthz::add_market_ids(const char* value, std::size_t size) {
  _internal_mutable_market_ids()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:injective.exchange.v1beta1.CreateSpotMarketOrderAuthz.market_ids)
}
inline void CreateSpotMarketOrderAuthz::add_market_ids(absl::string_view value) {
  _internal_mutable_market_ids()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:injective.exchange.v1beta1.CreateSpotMarketOrderAuthz.market_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CreateSpotMarketOrderAuthz::market_ids() const {
  // @@protoc_insertion_point(field_list:injective.exchange.v1beta1.CreateSpotMarketOrderAuthz.market_ids)
  return _internal_market_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* CreateSpotMarketOrderAuthz::mutable_market_ids() {
  // @@protoc_insertion_point(field_mutable_list:injective.exchange.v1beta1.CreateSpotMarketOrderAuthz.market_ids)
  return _internal_mutable_market_ids();
}
inline const std::string& CreateSpotMarketOrderAuthz::_internal_market_ids(int index) const {
  return _internal_market_ids().Get(index);
}
inline std::string* CreateSpotMarketOrderAuthz::_internal_add_market_ids() {
  return _internal_mutable_market_ids()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CreateSpotMarketOrderAuthz::_internal_market_ids() const {
  return _impl_.market_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CreateSpotMarketOrderAuthz::_internal_mutable_market_ids() {
  return &_impl_.market_ids_;
}

// -------------------------------------------------------------------

// BatchCreateSpotLimitOrdersAuthz

// string subaccount_id = 1 [json_name = "subaccountId"];
inline void BatchCreateSpotLimitOrdersAuthz::clear_subaccount_id() {
  _impl_.subaccount_id_.ClearToEmpty();
}
inline const std::string& BatchCreateSpotLimitOrdersAuthz::subaccount_id() const {
  // @@protoc_insertion_point(field_get:injective.exchange.v1beta1.BatchCreateSpotLimitOrdersAuthz.subaccount_id)
  return _internal_subaccount_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void BatchCreateSpotLimitOrdersAuthz::set_subaccount_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.subaccount_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.exchange.v1beta1.BatchCreateSpotLimitOrdersAuthz.subaccount_id)
}
inline std::string* BatchCreateSpotLimitOrdersAuthz::mutable_subaccount_id() {
  std::string* _s = _internal_mutable_subaccount_id();
  // @@protoc_insertion_point(field_mutable:injective.exchange.v1beta1.BatchCreateSpotLimitOrdersAuthz.subaccount_id)
  return _s;
}
inline const std::string& BatchCreateSpotLimitOrdersAuthz::_internal_subaccount_id() const {
  return _impl_.subaccount_id_.Get();
}
inline void BatchCreateSpotLimitOrdersAuthz::_internal_set_subaccount_id(const std::string& value) {
  ;


  _impl_.subaccount_id_.Set(value, GetArenaForAllocation());
}
inline std::string* BatchCreateSpotLimitOrdersAuthz::_internal_mutable_subaccount_id() {
  ;
  return _impl_.subaccount_id_.Mutable( GetArenaForAllocation());
}
inline std::string* BatchCreateSpotLimitOrdersAuthz::release_subaccount_id() {
  // @@protoc_insertion_point(field_release:injective.exchange.v1beta1.BatchCreateSpotLimitOrdersAuthz.subaccount_id)
  return _impl_.subaccount_id_.Release();
}
inline void BatchCreateSpotLimitOrdersAuthz::set_allocated_subaccount_id(std::string* value) {
  _impl_.subaccount_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.subaccount_id_.IsDefault()) {
          _impl_.subaccount_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.exchange.v1beta1.BatchCreateSpotLimitOrdersAuthz.subaccount_id)
}

// repeated string market_ids = 2 [json_name = "marketIds"];
inline int BatchCreateSpotLimitOrdersAuthz::_internal_market_ids_size() const {
  return _impl_.market_ids_.size();
}
inline int BatchCreateSpotLimitOrdersAuthz::market_ids_size() const {
  return _internal_market_ids_size();
}
inline void BatchCreateSpotLimitOrdersAuthz::clear_market_ids() {
  _internal_mutable_market_ids()->Clear();
}
inline std::string* BatchCreateSpotLimitOrdersAuthz::add_market_ids() {
  std::string* _s = _internal_add_market_ids();
  // @@protoc_insertion_point(field_add_mutable:injective.exchange.v1beta1.BatchCreateSpotLimitOrdersAuthz.market_ids)
  return _s;
}
inline const std::string& BatchCreateSpotLimitOrdersAuthz::market_ids(int index) const {
  // @@protoc_insertion_point(field_get:injective.exchange.v1beta1.BatchCreateSpotLimitOrdersAuthz.market_ids)
  return _internal_market_ids(index);
}
inline std::string* BatchCreateSpotLimitOrdersAuthz::mutable_market_ids(int index) {
  // @@protoc_insertion_point(field_mutable:injective.exchange.v1beta1.BatchCreateSpotLimitOrdersAuthz.market_ids)
  return _internal_mutable_market_ids()->Mutable(index);
}
inline void BatchCreateSpotLimitOrdersAuthz::set_market_ids(int index, const std::string& value) {
  _internal_mutable_market_ids()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:injective.exchange.v1beta1.BatchCreateSpotLimitOrdersAuthz.market_ids)
}
inline void BatchCreateSpotLimitOrdersAuthz::set_market_ids(int index, std::string&& value) {
  _internal_mutable_market_ids()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:injective.exchange.v1beta1.BatchCreateSpotLimitOrdersAuthz.market_ids)
}
inline void BatchCreateSpotLimitOrdersAuthz::set_market_ids(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_market_ids()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:injective.exchange.v1beta1.BatchCreateSpotLimitOrdersAuthz.market_ids)
}
inline void BatchCreateSpotLimitOrdersAuthz::set_market_ids(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_market_ids()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:injective.exchange.v1beta1.BatchCreateSpotLimitOrdersAuthz.market_ids)
}
inline void BatchCreateSpotLimitOrdersAuthz::set_market_ids(int index, absl::string_view value) {
  _internal_mutable_market_ids()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:injective.exchange.v1beta1.BatchCreateSpotLimitOrdersAuthz.market_ids)
}
inline void BatchCreateSpotLimitOrdersAuthz::add_market_ids(const std::string& value) {
  _internal_mutable_market_ids()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:injective.exchange.v1beta1.BatchCreateSpotLimitOrdersAuthz.market_ids)
}
inline void BatchCreateSpotLimitOrdersAuthz::add_market_ids(std::string&& value) {
  _internal_mutable_market_ids()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:injective.exchange.v1beta1.BatchCreateSpotLimitOrdersAuthz.market_ids)
}
inline void BatchCreateSpotLimitOrdersAuthz::add_market_ids(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_market_ids()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:injective.exchange.v1beta1.BatchCreateSpotLimitOrdersAuthz.market_ids)
}
inline void BatchCreateSpotLimitOrdersAuthz::add_market_ids(const char* value, std::size_t size) {
  _internal_mutable_market_ids()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:injective.exchange.v1beta1.BatchCreateSpotLimitOrdersAuthz.market_ids)
}
inline void BatchCreateSpotLimitOrdersAuthz::add_market_ids(absl::string_view value) {
  _internal_mutable_market_ids()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:injective.exchange.v1beta1.BatchCreateSpotLimitOrdersAuthz.market_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
BatchCreateSpotLimitOrdersAuthz::market_ids() const {
  // @@protoc_insertion_point(field_list:injective.exchange.v1beta1.BatchCreateSpotLimitOrdersAuthz.market_ids)
  return _internal_market_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* BatchCreateSpotLimitOrdersAuthz::mutable_market_ids() {
  // @@protoc_insertion_point(field_mutable_list:injective.exchange.v1beta1.BatchCreateSpotLimitOrdersAuthz.market_ids)
  return _internal_mutable_market_ids();
}
inline const std::string& BatchCreateSpotLimitOrdersAuthz::_internal_market_ids(int index) const {
  return _internal_market_ids().Get(index);
}
inline std::string* BatchCreateSpotLimitOrdersAuthz::_internal_add_market_ids() {
  return _internal_mutable_market_ids()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
BatchCreateSpotLimitOrdersAuthz::_internal_market_ids() const {
  return _impl_.market_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
BatchCreateSpotLimitOrdersAuthz::_internal_mutable_market_ids() {
  return &_impl_.market_ids_;
}

// -------------------------------------------------------------------

// CancelSpotOrderAuthz

// string subaccount_id = 1 [json_name = "subaccountId"];
inline void CancelSpotOrderAuthz::clear_subaccount_id() {
  _impl_.subaccount_id_.ClearToEmpty();
}
inline const std::string& CancelSpotOrderAuthz::subaccount_id() const {
  // @@protoc_insertion_point(field_get:injective.exchange.v1beta1.CancelSpotOrderAuthz.subaccount_id)
  return _internal_subaccount_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CancelSpotOrderAuthz::set_subaccount_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.subaccount_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.exchange.v1beta1.CancelSpotOrderAuthz.subaccount_id)
}
inline std::string* CancelSpotOrderAuthz::mutable_subaccount_id() {
  std::string* _s = _internal_mutable_subaccount_id();
  // @@protoc_insertion_point(field_mutable:injective.exchange.v1beta1.CancelSpotOrderAuthz.subaccount_id)
  return _s;
}
inline const std::string& CancelSpotOrderAuthz::_internal_subaccount_id() const {
  return _impl_.subaccount_id_.Get();
}
inline void CancelSpotOrderAuthz::_internal_set_subaccount_id(const std::string& value) {
  ;


  _impl_.subaccount_id_.Set(value, GetArenaForAllocation());
}
inline std::string* CancelSpotOrderAuthz::_internal_mutable_subaccount_id() {
  ;
  return _impl_.subaccount_id_.Mutable( GetArenaForAllocation());
}
inline std::string* CancelSpotOrderAuthz::release_subaccount_id() {
  // @@protoc_insertion_point(field_release:injective.exchange.v1beta1.CancelSpotOrderAuthz.subaccount_id)
  return _impl_.subaccount_id_.Release();
}
inline void CancelSpotOrderAuthz::set_allocated_subaccount_id(std::string* value) {
  _impl_.subaccount_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.subaccount_id_.IsDefault()) {
          _impl_.subaccount_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.exchange.v1beta1.CancelSpotOrderAuthz.subaccount_id)
}

// repeated string market_ids = 2 [json_name = "marketIds"];
inline int CancelSpotOrderAuthz::_internal_market_ids_size() const {
  return _impl_.market_ids_.size();
}
inline int CancelSpotOrderAuthz::market_ids_size() const {
  return _internal_market_ids_size();
}
inline void CancelSpotOrderAuthz::clear_market_ids() {
  _internal_mutable_market_ids()->Clear();
}
inline std::string* CancelSpotOrderAuthz::add_market_ids() {
  std::string* _s = _internal_add_market_ids();
  // @@protoc_insertion_point(field_add_mutable:injective.exchange.v1beta1.CancelSpotOrderAuthz.market_ids)
  return _s;
}
inline const std::string& CancelSpotOrderAuthz::market_ids(int index) const {
  // @@protoc_insertion_point(field_get:injective.exchange.v1beta1.CancelSpotOrderAuthz.market_ids)
  return _internal_market_ids(index);
}
inline std::string* CancelSpotOrderAuthz::mutable_market_ids(int index) {
  // @@protoc_insertion_point(field_mutable:injective.exchange.v1beta1.CancelSpotOrderAuthz.market_ids)
  return _internal_mutable_market_ids()->Mutable(index);
}
inline void CancelSpotOrderAuthz::set_market_ids(int index, const std::string& value) {
  _internal_mutable_market_ids()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:injective.exchange.v1beta1.CancelSpotOrderAuthz.market_ids)
}
inline void CancelSpotOrderAuthz::set_market_ids(int index, std::string&& value) {
  _internal_mutable_market_ids()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:injective.exchange.v1beta1.CancelSpotOrderAuthz.market_ids)
}
inline void CancelSpotOrderAuthz::set_market_ids(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_market_ids()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:injective.exchange.v1beta1.CancelSpotOrderAuthz.market_ids)
}
inline void CancelSpotOrderAuthz::set_market_ids(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_market_ids()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:injective.exchange.v1beta1.CancelSpotOrderAuthz.market_ids)
}
inline void CancelSpotOrderAuthz::set_market_ids(int index, absl::string_view value) {
  _internal_mutable_market_ids()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:injective.exchange.v1beta1.CancelSpotOrderAuthz.market_ids)
}
inline void CancelSpotOrderAuthz::add_market_ids(const std::string& value) {
  _internal_mutable_market_ids()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:injective.exchange.v1beta1.CancelSpotOrderAuthz.market_ids)
}
inline void CancelSpotOrderAuthz::add_market_ids(std::string&& value) {
  _internal_mutable_market_ids()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:injective.exchange.v1beta1.CancelSpotOrderAuthz.market_ids)
}
inline void CancelSpotOrderAuthz::add_market_ids(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_market_ids()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:injective.exchange.v1beta1.CancelSpotOrderAuthz.market_ids)
}
inline void CancelSpotOrderAuthz::add_market_ids(const char* value, std::size_t size) {
  _internal_mutable_market_ids()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:injective.exchange.v1beta1.CancelSpotOrderAuthz.market_ids)
}
inline void CancelSpotOrderAuthz::add_market_ids(absl::string_view value) {
  _internal_mutable_market_ids()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:injective.exchange.v1beta1.CancelSpotOrderAuthz.market_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CancelSpotOrderAuthz::market_ids() const {
  // @@protoc_insertion_point(field_list:injective.exchange.v1beta1.CancelSpotOrderAuthz.market_ids)
  return _internal_market_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* CancelSpotOrderAuthz::mutable_market_ids() {
  // @@protoc_insertion_point(field_mutable_list:injective.exchange.v1beta1.CancelSpotOrderAuthz.market_ids)
  return _internal_mutable_market_ids();
}
inline const std::string& CancelSpotOrderAuthz::_internal_market_ids(int index) const {
  return _internal_market_ids().Get(index);
}
inline std::string* CancelSpotOrderAuthz::_internal_add_market_ids() {
  return _internal_mutable_market_ids()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CancelSpotOrderAuthz::_internal_market_ids() const {
  return _impl_.market_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CancelSpotOrderAuthz::_internal_mutable_market_ids() {
  return &_impl_.market_ids_;
}

// -------------------------------------------------------------------

// BatchCancelSpotOrdersAuthz

// string subaccount_id = 1 [json_name = "subaccountId"];
inline void BatchCancelSpotOrdersAuthz::clear_subaccount_id() {
  _impl_.subaccount_id_.ClearToEmpty();
}
inline const std::string& BatchCancelSpotOrdersAuthz::subaccount_id() const {
  // @@protoc_insertion_point(field_get:injective.exchange.v1beta1.BatchCancelSpotOrdersAuthz.subaccount_id)
  return _internal_subaccount_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void BatchCancelSpotOrdersAuthz::set_subaccount_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.subaccount_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.exchange.v1beta1.BatchCancelSpotOrdersAuthz.subaccount_id)
}
inline std::string* BatchCancelSpotOrdersAuthz::mutable_subaccount_id() {
  std::string* _s = _internal_mutable_subaccount_id();
  // @@protoc_insertion_point(field_mutable:injective.exchange.v1beta1.BatchCancelSpotOrdersAuthz.subaccount_id)
  return _s;
}
inline const std::string& BatchCancelSpotOrdersAuthz::_internal_subaccount_id() const {
  return _impl_.subaccount_id_.Get();
}
inline void BatchCancelSpotOrdersAuthz::_internal_set_subaccount_id(const std::string& value) {
  ;


  _impl_.subaccount_id_.Set(value, GetArenaForAllocation());
}
inline std::string* BatchCancelSpotOrdersAuthz::_internal_mutable_subaccount_id() {
  ;
  return _impl_.subaccount_id_.Mutable( GetArenaForAllocation());
}
inline std::string* BatchCancelSpotOrdersAuthz::release_subaccount_id() {
  // @@protoc_insertion_point(field_release:injective.exchange.v1beta1.BatchCancelSpotOrdersAuthz.subaccount_id)
  return _impl_.subaccount_id_.Release();
}
inline void BatchCancelSpotOrdersAuthz::set_allocated_subaccount_id(std::string* value) {
  _impl_.subaccount_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.subaccount_id_.IsDefault()) {
          _impl_.subaccount_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.exchange.v1beta1.BatchCancelSpotOrdersAuthz.subaccount_id)
}

// repeated string market_ids = 2 [json_name = "marketIds"];
inline int BatchCancelSpotOrdersAuthz::_internal_market_ids_size() const {
  return _impl_.market_ids_.size();
}
inline int BatchCancelSpotOrdersAuthz::market_ids_size() const {
  return _internal_market_ids_size();
}
inline void BatchCancelSpotOrdersAuthz::clear_market_ids() {
  _internal_mutable_market_ids()->Clear();
}
inline std::string* BatchCancelSpotOrdersAuthz::add_market_ids() {
  std::string* _s = _internal_add_market_ids();
  // @@protoc_insertion_point(field_add_mutable:injective.exchange.v1beta1.BatchCancelSpotOrdersAuthz.market_ids)
  return _s;
}
inline const std::string& BatchCancelSpotOrdersAuthz::market_ids(int index) const {
  // @@protoc_insertion_point(field_get:injective.exchange.v1beta1.BatchCancelSpotOrdersAuthz.market_ids)
  return _internal_market_ids(index);
}
inline std::string* BatchCancelSpotOrdersAuthz::mutable_market_ids(int index) {
  // @@protoc_insertion_point(field_mutable:injective.exchange.v1beta1.BatchCancelSpotOrdersAuthz.market_ids)
  return _internal_mutable_market_ids()->Mutable(index);
}
inline void BatchCancelSpotOrdersAuthz::set_market_ids(int index, const std::string& value) {
  _internal_mutable_market_ids()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:injective.exchange.v1beta1.BatchCancelSpotOrdersAuthz.market_ids)
}
inline void BatchCancelSpotOrdersAuthz::set_market_ids(int index, std::string&& value) {
  _internal_mutable_market_ids()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:injective.exchange.v1beta1.BatchCancelSpotOrdersAuthz.market_ids)
}
inline void BatchCancelSpotOrdersAuthz::set_market_ids(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_market_ids()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:injective.exchange.v1beta1.BatchCancelSpotOrdersAuthz.market_ids)
}
inline void BatchCancelSpotOrdersAuthz::set_market_ids(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_market_ids()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:injective.exchange.v1beta1.BatchCancelSpotOrdersAuthz.market_ids)
}
inline void BatchCancelSpotOrdersAuthz::set_market_ids(int index, absl::string_view value) {
  _internal_mutable_market_ids()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:injective.exchange.v1beta1.BatchCancelSpotOrdersAuthz.market_ids)
}
inline void BatchCancelSpotOrdersAuthz::add_market_ids(const std::string& value) {
  _internal_mutable_market_ids()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:injective.exchange.v1beta1.BatchCancelSpotOrdersAuthz.market_ids)
}
inline void BatchCancelSpotOrdersAuthz::add_market_ids(std::string&& value) {
  _internal_mutable_market_ids()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:injective.exchange.v1beta1.BatchCancelSpotOrdersAuthz.market_ids)
}
inline void BatchCancelSpotOrdersAuthz::add_market_ids(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_market_ids()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:injective.exchange.v1beta1.BatchCancelSpotOrdersAuthz.market_ids)
}
inline void BatchCancelSpotOrdersAuthz::add_market_ids(const char* value, std::size_t size) {
  _internal_mutable_market_ids()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:injective.exchange.v1beta1.BatchCancelSpotOrdersAuthz.market_ids)
}
inline void BatchCancelSpotOrdersAuthz::add_market_ids(absl::string_view value) {
  _internal_mutable_market_ids()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:injective.exchange.v1beta1.BatchCancelSpotOrdersAuthz.market_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
BatchCancelSpotOrdersAuthz::market_ids() const {
  // @@protoc_insertion_point(field_list:injective.exchange.v1beta1.BatchCancelSpotOrdersAuthz.market_ids)
  return _internal_market_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* BatchCancelSpotOrdersAuthz::mutable_market_ids() {
  // @@protoc_insertion_point(field_mutable_list:injective.exchange.v1beta1.BatchCancelSpotOrdersAuthz.market_ids)
  return _internal_mutable_market_ids();
}
inline const std::string& BatchCancelSpotOrdersAuthz::_internal_market_ids(int index) const {
  return _internal_market_ids().Get(index);
}
inline std::string* BatchCancelSpotOrdersAuthz::_internal_add_market_ids() {
  return _internal_mutable_market_ids()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
BatchCancelSpotOrdersAuthz::_internal_market_ids() const {
  return _impl_.market_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
BatchCancelSpotOrdersAuthz::_internal_mutable_market_ids() {
  return &_impl_.market_ids_;
}

// -------------------------------------------------------------------

// CreateDerivativeLimitOrderAuthz

// string subaccount_id = 1 [json_name = "subaccountId"];
inline void CreateDerivativeLimitOrderAuthz::clear_subaccount_id() {
  _impl_.subaccount_id_.ClearToEmpty();
}
inline const std::string& CreateDerivativeLimitOrderAuthz::subaccount_id() const {
  // @@protoc_insertion_point(field_get:injective.exchange.v1beta1.CreateDerivativeLimitOrderAuthz.subaccount_id)
  return _internal_subaccount_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CreateDerivativeLimitOrderAuthz::set_subaccount_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.subaccount_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.exchange.v1beta1.CreateDerivativeLimitOrderAuthz.subaccount_id)
}
inline std::string* CreateDerivativeLimitOrderAuthz::mutable_subaccount_id() {
  std::string* _s = _internal_mutable_subaccount_id();
  // @@protoc_insertion_point(field_mutable:injective.exchange.v1beta1.CreateDerivativeLimitOrderAuthz.subaccount_id)
  return _s;
}
inline const std::string& CreateDerivativeLimitOrderAuthz::_internal_subaccount_id() const {
  return _impl_.subaccount_id_.Get();
}
inline void CreateDerivativeLimitOrderAuthz::_internal_set_subaccount_id(const std::string& value) {
  ;


  _impl_.subaccount_id_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateDerivativeLimitOrderAuthz::_internal_mutable_subaccount_id() {
  ;
  return _impl_.subaccount_id_.Mutable( GetArenaForAllocation());
}
inline std::string* CreateDerivativeLimitOrderAuthz::release_subaccount_id() {
  // @@protoc_insertion_point(field_release:injective.exchange.v1beta1.CreateDerivativeLimitOrderAuthz.subaccount_id)
  return _impl_.subaccount_id_.Release();
}
inline void CreateDerivativeLimitOrderAuthz::set_allocated_subaccount_id(std::string* value) {
  _impl_.subaccount_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.subaccount_id_.IsDefault()) {
          _impl_.subaccount_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.exchange.v1beta1.CreateDerivativeLimitOrderAuthz.subaccount_id)
}

// repeated string market_ids = 2 [json_name = "marketIds"];
inline int CreateDerivativeLimitOrderAuthz::_internal_market_ids_size() const {
  return _impl_.market_ids_.size();
}
inline int CreateDerivativeLimitOrderAuthz::market_ids_size() const {
  return _internal_market_ids_size();
}
inline void CreateDerivativeLimitOrderAuthz::clear_market_ids() {
  _internal_mutable_market_ids()->Clear();
}
inline std::string* CreateDerivativeLimitOrderAuthz::add_market_ids() {
  std::string* _s = _internal_add_market_ids();
  // @@protoc_insertion_point(field_add_mutable:injective.exchange.v1beta1.CreateDerivativeLimitOrderAuthz.market_ids)
  return _s;
}
inline const std::string& CreateDerivativeLimitOrderAuthz::market_ids(int index) const {
  // @@protoc_insertion_point(field_get:injective.exchange.v1beta1.CreateDerivativeLimitOrderAuthz.market_ids)
  return _internal_market_ids(index);
}
inline std::string* CreateDerivativeLimitOrderAuthz::mutable_market_ids(int index) {
  // @@protoc_insertion_point(field_mutable:injective.exchange.v1beta1.CreateDerivativeLimitOrderAuthz.market_ids)
  return _internal_mutable_market_ids()->Mutable(index);
}
inline void CreateDerivativeLimitOrderAuthz::set_market_ids(int index, const std::string& value) {
  _internal_mutable_market_ids()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:injective.exchange.v1beta1.CreateDerivativeLimitOrderAuthz.market_ids)
}
inline void CreateDerivativeLimitOrderAuthz::set_market_ids(int index, std::string&& value) {
  _internal_mutable_market_ids()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:injective.exchange.v1beta1.CreateDerivativeLimitOrderAuthz.market_ids)
}
inline void CreateDerivativeLimitOrderAuthz::set_market_ids(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_market_ids()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:injective.exchange.v1beta1.CreateDerivativeLimitOrderAuthz.market_ids)
}
inline void CreateDerivativeLimitOrderAuthz::set_market_ids(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_market_ids()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:injective.exchange.v1beta1.CreateDerivativeLimitOrderAuthz.market_ids)
}
inline void CreateDerivativeLimitOrderAuthz::set_market_ids(int index, absl::string_view value) {
  _internal_mutable_market_ids()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:injective.exchange.v1beta1.CreateDerivativeLimitOrderAuthz.market_ids)
}
inline void CreateDerivativeLimitOrderAuthz::add_market_ids(const std::string& value) {
  _internal_mutable_market_ids()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:injective.exchange.v1beta1.CreateDerivativeLimitOrderAuthz.market_ids)
}
inline void CreateDerivativeLimitOrderAuthz::add_market_ids(std::string&& value) {
  _internal_mutable_market_ids()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:injective.exchange.v1beta1.CreateDerivativeLimitOrderAuthz.market_ids)
}
inline void CreateDerivativeLimitOrderAuthz::add_market_ids(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_market_ids()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:injective.exchange.v1beta1.CreateDerivativeLimitOrderAuthz.market_ids)
}
inline void CreateDerivativeLimitOrderAuthz::add_market_ids(const char* value, std::size_t size) {
  _internal_mutable_market_ids()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:injective.exchange.v1beta1.CreateDerivativeLimitOrderAuthz.market_ids)
}
inline void CreateDerivativeLimitOrderAuthz::add_market_ids(absl::string_view value) {
  _internal_mutable_market_ids()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:injective.exchange.v1beta1.CreateDerivativeLimitOrderAuthz.market_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CreateDerivativeLimitOrderAuthz::market_ids() const {
  // @@protoc_insertion_point(field_list:injective.exchange.v1beta1.CreateDerivativeLimitOrderAuthz.market_ids)
  return _internal_market_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* CreateDerivativeLimitOrderAuthz::mutable_market_ids() {
  // @@protoc_insertion_point(field_mutable_list:injective.exchange.v1beta1.CreateDerivativeLimitOrderAuthz.market_ids)
  return _internal_mutable_market_ids();
}
inline const std::string& CreateDerivativeLimitOrderAuthz::_internal_market_ids(int index) const {
  return _internal_market_ids().Get(index);
}
inline std::string* CreateDerivativeLimitOrderAuthz::_internal_add_market_ids() {
  return _internal_mutable_market_ids()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CreateDerivativeLimitOrderAuthz::_internal_market_ids() const {
  return _impl_.market_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CreateDerivativeLimitOrderAuthz::_internal_mutable_market_ids() {
  return &_impl_.market_ids_;
}

// -------------------------------------------------------------------

// CreateDerivativeMarketOrderAuthz

// string subaccount_id = 1 [json_name = "subaccountId"];
inline void CreateDerivativeMarketOrderAuthz::clear_subaccount_id() {
  _impl_.subaccount_id_.ClearToEmpty();
}
inline const std::string& CreateDerivativeMarketOrderAuthz::subaccount_id() const {
  // @@protoc_insertion_point(field_get:injective.exchange.v1beta1.CreateDerivativeMarketOrderAuthz.subaccount_id)
  return _internal_subaccount_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CreateDerivativeMarketOrderAuthz::set_subaccount_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.subaccount_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.exchange.v1beta1.CreateDerivativeMarketOrderAuthz.subaccount_id)
}
inline std::string* CreateDerivativeMarketOrderAuthz::mutable_subaccount_id() {
  std::string* _s = _internal_mutable_subaccount_id();
  // @@protoc_insertion_point(field_mutable:injective.exchange.v1beta1.CreateDerivativeMarketOrderAuthz.subaccount_id)
  return _s;
}
inline const std::string& CreateDerivativeMarketOrderAuthz::_internal_subaccount_id() const {
  return _impl_.subaccount_id_.Get();
}
inline void CreateDerivativeMarketOrderAuthz::_internal_set_subaccount_id(const std::string& value) {
  ;


  _impl_.subaccount_id_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateDerivativeMarketOrderAuthz::_internal_mutable_subaccount_id() {
  ;
  return _impl_.subaccount_id_.Mutable( GetArenaForAllocation());
}
inline std::string* CreateDerivativeMarketOrderAuthz::release_subaccount_id() {
  // @@protoc_insertion_point(field_release:injective.exchange.v1beta1.CreateDerivativeMarketOrderAuthz.subaccount_id)
  return _impl_.subaccount_id_.Release();
}
inline void CreateDerivativeMarketOrderAuthz::set_allocated_subaccount_id(std::string* value) {
  _impl_.subaccount_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.subaccount_id_.IsDefault()) {
          _impl_.subaccount_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.exchange.v1beta1.CreateDerivativeMarketOrderAuthz.subaccount_id)
}

// repeated string market_ids = 2 [json_name = "marketIds"];
inline int CreateDerivativeMarketOrderAuthz::_internal_market_ids_size() const {
  return _impl_.market_ids_.size();
}
inline int CreateDerivativeMarketOrderAuthz::market_ids_size() const {
  return _internal_market_ids_size();
}
inline void CreateDerivativeMarketOrderAuthz::clear_market_ids() {
  _internal_mutable_market_ids()->Clear();
}
inline std::string* CreateDerivativeMarketOrderAuthz::add_market_ids() {
  std::string* _s = _internal_add_market_ids();
  // @@protoc_insertion_point(field_add_mutable:injective.exchange.v1beta1.CreateDerivativeMarketOrderAuthz.market_ids)
  return _s;
}
inline const std::string& CreateDerivativeMarketOrderAuthz::market_ids(int index) const {
  // @@protoc_insertion_point(field_get:injective.exchange.v1beta1.CreateDerivativeMarketOrderAuthz.market_ids)
  return _internal_market_ids(index);
}
inline std::string* CreateDerivativeMarketOrderAuthz::mutable_market_ids(int index) {
  // @@protoc_insertion_point(field_mutable:injective.exchange.v1beta1.CreateDerivativeMarketOrderAuthz.market_ids)
  return _internal_mutable_market_ids()->Mutable(index);
}
inline void CreateDerivativeMarketOrderAuthz::set_market_ids(int index, const std::string& value) {
  _internal_mutable_market_ids()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:injective.exchange.v1beta1.CreateDerivativeMarketOrderAuthz.market_ids)
}
inline void CreateDerivativeMarketOrderAuthz::set_market_ids(int index, std::string&& value) {
  _internal_mutable_market_ids()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:injective.exchange.v1beta1.CreateDerivativeMarketOrderAuthz.market_ids)
}
inline void CreateDerivativeMarketOrderAuthz::set_market_ids(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_market_ids()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:injective.exchange.v1beta1.CreateDerivativeMarketOrderAuthz.market_ids)
}
inline void CreateDerivativeMarketOrderAuthz::set_market_ids(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_market_ids()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:injective.exchange.v1beta1.CreateDerivativeMarketOrderAuthz.market_ids)
}
inline void CreateDerivativeMarketOrderAuthz::set_market_ids(int index, absl::string_view value) {
  _internal_mutable_market_ids()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:injective.exchange.v1beta1.CreateDerivativeMarketOrderAuthz.market_ids)
}
inline void CreateDerivativeMarketOrderAuthz::add_market_ids(const std::string& value) {
  _internal_mutable_market_ids()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:injective.exchange.v1beta1.CreateDerivativeMarketOrderAuthz.market_ids)
}
inline void CreateDerivativeMarketOrderAuthz::add_market_ids(std::string&& value) {
  _internal_mutable_market_ids()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:injective.exchange.v1beta1.CreateDerivativeMarketOrderAuthz.market_ids)
}
inline void CreateDerivativeMarketOrderAuthz::add_market_ids(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_market_ids()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:injective.exchange.v1beta1.CreateDerivativeMarketOrderAuthz.market_ids)
}
inline void CreateDerivativeMarketOrderAuthz::add_market_ids(const char* value, std::size_t size) {
  _internal_mutable_market_ids()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:injective.exchange.v1beta1.CreateDerivativeMarketOrderAuthz.market_ids)
}
inline void CreateDerivativeMarketOrderAuthz::add_market_ids(absl::string_view value) {
  _internal_mutable_market_ids()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:injective.exchange.v1beta1.CreateDerivativeMarketOrderAuthz.market_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CreateDerivativeMarketOrderAuthz::market_ids() const {
  // @@protoc_insertion_point(field_list:injective.exchange.v1beta1.CreateDerivativeMarketOrderAuthz.market_ids)
  return _internal_market_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* CreateDerivativeMarketOrderAuthz::mutable_market_ids() {
  // @@protoc_insertion_point(field_mutable_list:injective.exchange.v1beta1.CreateDerivativeMarketOrderAuthz.market_ids)
  return _internal_mutable_market_ids();
}
inline const std::string& CreateDerivativeMarketOrderAuthz::_internal_market_ids(int index) const {
  return _internal_market_ids().Get(index);
}
inline std::string* CreateDerivativeMarketOrderAuthz::_internal_add_market_ids() {
  return _internal_mutable_market_ids()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CreateDerivativeMarketOrderAuthz::_internal_market_ids() const {
  return _impl_.market_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CreateDerivativeMarketOrderAuthz::_internal_mutable_market_ids() {
  return &_impl_.market_ids_;
}

// -------------------------------------------------------------------

// BatchCreateDerivativeLimitOrdersAuthz

// string subaccount_id = 1 [json_name = "subaccountId"];
inline void BatchCreateDerivativeLimitOrdersAuthz::clear_subaccount_id() {
  _impl_.subaccount_id_.ClearToEmpty();
}
inline const std::string& BatchCreateDerivativeLimitOrdersAuthz::subaccount_id() const {
  // @@protoc_insertion_point(field_get:injective.exchange.v1beta1.BatchCreateDerivativeLimitOrdersAuthz.subaccount_id)
  return _internal_subaccount_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void BatchCreateDerivativeLimitOrdersAuthz::set_subaccount_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.subaccount_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.exchange.v1beta1.BatchCreateDerivativeLimitOrdersAuthz.subaccount_id)
}
inline std::string* BatchCreateDerivativeLimitOrdersAuthz::mutable_subaccount_id() {
  std::string* _s = _internal_mutable_subaccount_id();
  // @@protoc_insertion_point(field_mutable:injective.exchange.v1beta1.BatchCreateDerivativeLimitOrdersAuthz.subaccount_id)
  return _s;
}
inline const std::string& BatchCreateDerivativeLimitOrdersAuthz::_internal_subaccount_id() const {
  return _impl_.subaccount_id_.Get();
}
inline void BatchCreateDerivativeLimitOrdersAuthz::_internal_set_subaccount_id(const std::string& value) {
  ;


  _impl_.subaccount_id_.Set(value, GetArenaForAllocation());
}
inline std::string* BatchCreateDerivativeLimitOrdersAuthz::_internal_mutable_subaccount_id() {
  ;
  return _impl_.subaccount_id_.Mutable( GetArenaForAllocation());
}
inline std::string* BatchCreateDerivativeLimitOrdersAuthz::release_subaccount_id() {
  // @@protoc_insertion_point(field_release:injective.exchange.v1beta1.BatchCreateDerivativeLimitOrdersAuthz.subaccount_id)
  return _impl_.subaccount_id_.Release();
}
inline void BatchCreateDerivativeLimitOrdersAuthz::set_allocated_subaccount_id(std::string* value) {
  _impl_.subaccount_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.subaccount_id_.IsDefault()) {
          _impl_.subaccount_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.exchange.v1beta1.BatchCreateDerivativeLimitOrdersAuthz.subaccount_id)
}

// repeated string market_ids = 2 [json_name = "marketIds"];
inline int BatchCreateDerivativeLimitOrdersAuthz::_internal_market_ids_size() const {
  return _impl_.market_ids_.size();
}
inline int BatchCreateDerivativeLimitOrdersAuthz::market_ids_size() const {
  return _internal_market_ids_size();
}
inline void BatchCreateDerivativeLimitOrdersAuthz::clear_market_ids() {
  _internal_mutable_market_ids()->Clear();
}
inline std::string* BatchCreateDerivativeLimitOrdersAuthz::add_market_ids() {
  std::string* _s = _internal_add_market_ids();
  // @@protoc_insertion_point(field_add_mutable:injective.exchange.v1beta1.BatchCreateDerivativeLimitOrdersAuthz.market_ids)
  return _s;
}
inline const std::string& BatchCreateDerivativeLimitOrdersAuthz::market_ids(int index) const {
  // @@protoc_insertion_point(field_get:injective.exchange.v1beta1.BatchCreateDerivativeLimitOrdersAuthz.market_ids)
  return _internal_market_ids(index);
}
inline std::string* BatchCreateDerivativeLimitOrdersAuthz::mutable_market_ids(int index) {
  // @@protoc_insertion_point(field_mutable:injective.exchange.v1beta1.BatchCreateDerivativeLimitOrdersAuthz.market_ids)
  return _internal_mutable_market_ids()->Mutable(index);
}
inline void BatchCreateDerivativeLimitOrdersAuthz::set_market_ids(int index, const std::string& value) {
  _internal_mutable_market_ids()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:injective.exchange.v1beta1.BatchCreateDerivativeLimitOrdersAuthz.market_ids)
}
inline void BatchCreateDerivativeLimitOrdersAuthz::set_market_ids(int index, std::string&& value) {
  _internal_mutable_market_ids()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:injective.exchange.v1beta1.BatchCreateDerivativeLimitOrdersAuthz.market_ids)
}
inline void BatchCreateDerivativeLimitOrdersAuthz::set_market_ids(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_market_ids()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:injective.exchange.v1beta1.BatchCreateDerivativeLimitOrdersAuthz.market_ids)
}
inline void BatchCreateDerivativeLimitOrdersAuthz::set_market_ids(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_market_ids()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:injective.exchange.v1beta1.BatchCreateDerivativeLimitOrdersAuthz.market_ids)
}
inline void BatchCreateDerivativeLimitOrdersAuthz::set_market_ids(int index, absl::string_view value) {
  _internal_mutable_market_ids()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:injective.exchange.v1beta1.BatchCreateDerivativeLimitOrdersAuthz.market_ids)
}
inline void BatchCreateDerivativeLimitOrdersAuthz::add_market_ids(const std::string& value) {
  _internal_mutable_market_ids()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:injective.exchange.v1beta1.BatchCreateDerivativeLimitOrdersAuthz.market_ids)
}
inline void BatchCreateDerivativeLimitOrdersAuthz::add_market_ids(std::string&& value) {
  _internal_mutable_market_ids()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:injective.exchange.v1beta1.BatchCreateDerivativeLimitOrdersAuthz.market_ids)
}
inline void BatchCreateDerivativeLimitOrdersAuthz::add_market_ids(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_market_ids()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:injective.exchange.v1beta1.BatchCreateDerivativeLimitOrdersAuthz.market_ids)
}
inline void BatchCreateDerivativeLimitOrdersAuthz::add_market_ids(const char* value, std::size_t size) {
  _internal_mutable_market_ids()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:injective.exchange.v1beta1.BatchCreateDerivativeLimitOrdersAuthz.market_ids)
}
inline void BatchCreateDerivativeLimitOrdersAuthz::add_market_ids(absl::string_view value) {
  _internal_mutable_market_ids()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:injective.exchange.v1beta1.BatchCreateDerivativeLimitOrdersAuthz.market_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
BatchCreateDerivativeLimitOrdersAuthz::market_ids() const {
  // @@protoc_insertion_point(field_list:injective.exchange.v1beta1.BatchCreateDerivativeLimitOrdersAuthz.market_ids)
  return _internal_market_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* BatchCreateDerivativeLimitOrdersAuthz::mutable_market_ids() {
  // @@protoc_insertion_point(field_mutable_list:injective.exchange.v1beta1.BatchCreateDerivativeLimitOrdersAuthz.market_ids)
  return _internal_mutable_market_ids();
}
inline const std::string& BatchCreateDerivativeLimitOrdersAuthz::_internal_market_ids(int index) const {
  return _internal_market_ids().Get(index);
}
inline std::string* BatchCreateDerivativeLimitOrdersAuthz::_internal_add_market_ids() {
  return _internal_mutable_market_ids()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
BatchCreateDerivativeLimitOrdersAuthz::_internal_market_ids() const {
  return _impl_.market_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
BatchCreateDerivativeLimitOrdersAuthz::_internal_mutable_market_ids() {
  return &_impl_.market_ids_;
}

// -------------------------------------------------------------------

// CancelDerivativeOrderAuthz

// string subaccount_id = 1 [json_name = "subaccountId"];
inline void CancelDerivativeOrderAuthz::clear_subaccount_id() {
  _impl_.subaccount_id_.ClearToEmpty();
}
inline const std::string& CancelDerivativeOrderAuthz::subaccount_id() const {
  // @@protoc_insertion_point(field_get:injective.exchange.v1beta1.CancelDerivativeOrderAuthz.subaccount_id)
  return _internal_subaccount_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CancelDerivativeOrderAuthz::set_subaccount_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.subaccount_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.exchange.v1beta1.CancelDerivativeOrderAuthz.subaccount_id)
}
inline std::string* CancelDerivativeOrderAuthz::mutable_subaccount_id() {
  std::string* _s = _internal_mutable_subaccount_id();
  // @@protoc_insertion_point(field_mutable:injective.exchange.v1beta1.CancelDerivativeOrderAuthz.subaccount_id)
  return _s;
}
inline const std::string& CancelDerivativeOrderAuthz::_internal_subaccount_id() const {
  return _impl_.subaccount_id_.Get();
}
inline void CancelDerivativeOrderAuthz::_internal_set_subaccount_id(const std::string& value) {
  ;


  _impl_.subaccount_id_.Set(value, GetArenaForAllocation());
}
inline std::string* CancelDerivativeOrderAuthz::_internal_mutable_subaccount_id() {
  ;
  return _impl_.subaccount_id_.Mutable( GetArenaForAllocation());
}
inline std::string* CancelDerivativeOrderAuthz::release_subaccount_id() {
  // @@protoc_insertion_point(field_release:injective.exchange.v1beta1.CancelDerivativeOrderAuthz.subaccount_id)
  return _impl_.subaccount_id_.Release();
}
inline void CancelDerivativeOrderAuthz::set_allocated_subaccount_id(std::string* value) {
  _impl_.subaccount_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.subaccount_id_.IsDefault()) {
          _impl_.subaccount_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.exchange.v1beta1.CancelDerivativeOrderAuthz.subaccount_id)
}

// repeated string market_ids = 2 [json_name = "marketIds"];
inline int CancelDerivativeOrderAuthz::_internal_market_ids_size() const {
  return _impl_.market_ids_.size();
}
inline int CancelDerivativeOrderAuthz::market_ids_size() const {
  return _internal_market_ids_size();
}
inline void CancelDerivativeOrderAuthz::clear_market_ids() {
  _internal_mutable_market_ids()->Clear();
}
inline std::string* CancelDerivativeOrderAuthz::add_market_ids() {
  std::string* _s = _internal_add_market_ids();
  // @@protoc_insertion_point(field_add_mutable:injective.exchange.v1beta1.CancelDerivativeOrderAuthz.market_ids)
  return _s;
}
inline const std::string& CancelDerivativeOrderAuthz::market_ids(int index) const {
  // @@protoc_insertion_point(field_get:injective.exchange.v1beta1.CancelDerivativeOrderAuthz.market_ids)
  return _internal_market_ids(index);
}
inline std::string* CancelDerivativeOrderAuthz::mutable_market_ids(int index) {
  // @@protoc_insertion_point(field_mutable:injective.exchange.v1beta1.CancelDerivativeOrderAuthz.market_ids)
  return _internal_mutable_market_ids()->Mutable(index);
}
inline void CancelDerivativeOrderAuthz::set_market_ids(int index, const std::string& value) {
  _internal_mutable_market_ids()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:injective.exchange.v1beta1.CancelDerivativeOrderAuthz.market_ids)
}
inline void CancelDerivativeOrderAuthz::set_market_ids(int index, std::string&& value) {
  _internal_mutable_market_ids()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:injective.exchange.v1beta1.CancelDerivativeOrderAuthz.market_ids)
}
inline void CancelDerivativeOrderAuthz::set_market_ids(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_market_ids()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:injective.exchange.v1beta1.CancelDerivativeOrderAuthz.market_ids)
}
inline void CancelDerivativeOrderAuthz::set_market_ids(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_market_ids()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:injective.exchange.v1beta1.CancelDerivativeOrderAuthz.market_ids)
}
inline void CancelDerivativeOrderAuthz::set_market_ids(int index, absl::string_view value) {
  _internal_mutable_market_ids()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:injective.exchange.v1beta1.CancelDerivativeOrderAuthz.market_ids)
}
inline void CancelDerivativeOrderAuthz::add_market_ids(const std::string& value) {
  _internal_mutable_market_ids()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:injective.exchange.v1beta1.CancelDerivativeOrderAuthz.market_ids)
}
inline void CancelDerivativeOrderAuthz::add_market_ids(std::string&& value) {
  _internal_mutable_market_ids()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:injective.exchange.v1beta1.CancelDerivativeOrderAuthz.market_ids)
}
inline void CancelDerivativeOrderAuthz::add_market_ids(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_market_ids()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:injective.exchange.v1beta1.CancelDerivativeOrderAuthz.market_ids)
}
inline void CancelDerivativeOrderAuthz::add_market_ids(const char* value, std::size_t size) {
  _internal_mutable_market_ids()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:injective.exchange.v1beta1.CancelDerivativeOrderAuthz.market_ids)
}
inline void CancelDerivativeOrderAuthz::add_market_ids(absl::string_view value) {
  _internal_mutable_market_ids()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:injective.exchange.v1beta1.CancelDerivativeOrderAuthz.market_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CancelDerivativeOrderAuthz::market_ids() const {
  // @@protoc_insertion_point(field_list:injective.exchange.v1beta1.CancelDerivativeOrderAuthz.market_ids)
  return _internal_market_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* CancelDerivativeOrderAuthz::mutable_market_ids() {
  // @@protoc_insertion_point(field_mutable_list:injective.exchange.v1beta1.CancelDerivativeOrderAuthz.market_ids)
  return _internal_mutable_market_ids();
}
inline const std::string& CancelDerivativeOrderAuthz::_internal_market_ids(int index) const {
  return _internal_market_ids().Get(index);
}
inline std::string* CancelDerivativeOrderAuthz::_internal_add_market_ids() {
  return _internal_mutable_market_ids()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CancelDerivativeOrderAuthz::_internal_market_ids() const {
  return _impl_.market_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CancelDerivativeOrderAuthz::_internal_mutable_market_ids() {
  return &_impl_.market_ids_;
}

// -------------------------------------------------------------------

// BatchCancelDerivativeOrdersAuthz

// string subaccount_id = 1 [json_name = "subaccountId"];
inline void BatchCancelDerivativeOrdersAuthz::clear_subaccount_id() {
  _impl_.subaccount_id_.ClearToEmpty();
}
inline const std::string& BatchCancelDerivativeOrdersAuthz::subaccount_id() const {
  // @@protoc_insertion_point(field_get:injective.exchange.v1beta1.BatchCancelDerivativeOrdersAuthz.subaccount_id)
  return _internal_subaccount_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void BatchCancelDerivativeOrdersAuthz::set_subaccount_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.subaccount_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.exchange.v1beta1.BatchCancelDerivativeOrdersAuthz.subaccount_id)
}
inline std::string* BatchCancelDerivativeOrdersAuthz::mutable_subaccount_id() {
  std::string* _s = _internal_mutable_subaccount_id();
  // @@protoc_insertion_point(field_mutable:injective.exchange.v1beta1.BatchCancelDerivativeOrdersAuthz.subaccount_id)
  return _s;
}
inline const std::string& BatchCancelDerivativeOrdersAuthz::_internal_subaccount_id() const {
  return _impl_.subaccount_id_.Get();
}
inline void BatchCancelDerivativeOrdersAuthz::_internal_set_subaccount_id(const std::string& value) {
  ;


  _impl_.subaccount_id_.Set(value, GetArenaForAllocation());
}
inline std::string* BatchCancelDerivativeOrdersAuthz::_internal_mutable_subaccount_id() {
  ;
  return _impl_.subaccount_id_.Mutable( GetArenaForAllocation());
}
inline std::string* BatchCancelDerivativeOrdersAuthz::release_subaccount_id() {
  // @@protoc_insertion_point(field_release:injective.exchange.v1beta1.BatchCancelDerivativeOrdersAuthz.subaccount_id)
  return _impl_.subaccount_id_.Release();
}
inline void BatchCancelDerivativeOrdersAuthz::set_allocated_subaccount_id(std::string* value) {
  _impl_.subaccount_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.subaccount_id_.IsDefault()) {
          _impl_.subaccount_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.exchange.v1beta1.BatchCancelDerivativeOrdersAuthz.subaccount_id)
}

// repeated string market_ids = 2 [json_name = "marketIds"];
inline int BatchCancelDerivativeOrdersAuthz::_internal_market_ids_size() const {
  return _impl_.market_ids_.size();
}
inline int BatchCancelDerivativeOrdersAuthz::market_ids_size() const {
  return _internal_market_ids_size();
}
inline void BatchCancelDerivativeOrdersAuthz::clear_market_ids() {
  _internal_mutable_market_ids()->Clear();
}
inline std::string* BatchCancelDerivativeOrdersAuthz::add_market_ids() {
  std::string* _s = _internal_add_market_ids();
  // @@protoc_insertion_point(field_add_mutable:injective.exchange.v1beta1.BatchCancelDerivativeOrdersAuthz.market_ids)
  return _s;
}
inline const std::string& BatchCancelDerivativeOrdersAuthz::market_ids(int index) const {
  // @@protoc_insertion_point(field_get:injective.exchange.v1beta1.BatchCancelDerivativeOrdersAuthz.market_ids)
  return _internal_market_ids(index);
}
inline std::string* BatchCancelDerivativeOrdersAuthz::mutable_market_ids(int index) {
  // @@protoc_insertion_point(field_mutable:injective.exchange.v1beta1.BatchCancelDerivativeOrdersAuthz.market_ids)
  return _internal_mutable_market_ids()->Mutable(index);
}
inline void BatchCancelDerivativeOrdersAuthz::set_market_ids(int index, const std::string& value) {
  _internal_mutable_market_ids()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:injective.exchange.v1beta1.BatchCancelDerivativeOrdersAuthz.market_ids)
}
inline void BatchCancelDerivativeOrdersAuthz::set_market_ids(int index, std::string&& value) {
  _internal_mutable_market_ids()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:injective.exchange.v1beta1.BatchCancelDerivativeOrdersAuthz.market_ids)
}
inline void BatchCancelDerivativeOrdersAuthz::set_market_ids(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_market_ids()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:injective.exchange.v1beta1.BatchCancelDerivativeOrdersAuthz.market_ids)
}
inline void BatchCancelDerivativeOrdersAuthz::set_market_ids(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_market_ids()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:injective.exchange.v1beta1.BatchCancelDerivativeOrdersAuthz.market_ids)
}
inline void BatchCancelDerivativeOrdersAuthz::set_market_ids(int index, absl::string_view value) {
  _internal_mutable_market_ids()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:injective.exchange.v1beta1.BatchCancelDerivativeOrdersAuthz.market_ids)
}
inline void BatchCancelDerivativeOrdersAuthz::add_market_ids(const std::string& value) {
  _internal_mutable_market_ids()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:injective.exchange.v1beta1.BatchCancelDerivativeOrdersAuthz.market_ids)
}
inline void BatchCancelDerivativeOrdersAuthz::add_market_ids(std::string&& value) {
  _internal_mutable_market_ids()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:injective.exchange.v1beta1.BatchCancelDerivativeOrdersAuthz.market_ids)
}
inline void BatchCancelDerivativeOrdersAuthz::add_market_ids(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_market_ids()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:injective.exchange.v1beta1.BatchCancelDerivativeOrdersAuthz.market_ids)
}
inline void BatchCancelDerivativeOrdersAuthz::add_market_ids(const char* value, std::size_t size) {
  _internal_mutable_market_ids()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:injective.exchange.v1beta1.BatchCancelDerivativeOrdersAuthz.market_ids)
}
inline void BatchCancelDerivativeOrdersAuthz::add_market_ids(absl::string_view value) {
  _internal_mutable_market_ids()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:injective.exchange.v1beta1.BatchCancelDerivativeOrdersAuthz.market_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
BatchCancelDerivativeOrdersAuthz::market_ids() const {
  // @@protoc_insertion_point(field_list:injective.exchange.v1beta1.BatchCancelDerivativeOrdersAuthz.market_ids)
  return _internal_market_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* BatchCancelDerivativeOrdersAuthz::mutable_market_ids() {
  // @@protoc_insertion_point(field_mutable_list:injective.exchange.v1beta1.BatchCancelDerivativeOrdersAuthz.market_ids)
  return _internal_mutable_market_ids();
}
inline const std::string& BatchCancelDerivativeOrdersAuthz::_internal_market_ids(int index) const {
  return _internal_market_ids().Get(index);
}
inline std::string* BatchCancelDerivativeOrdersAuthz::_internal_add_market_ids() {
  return _internal_mutable_market_ids()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
BatchCancelDerivativeOrdersAuthz::_internal_market_ids() const {
  return _impl_.market_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
BatchCancelDerivativeOrdersAuthz::_internal_mutable_market_ids() {
  return &_impl_.market_ids_;
}

// -------------------------------------------------------------------

// BatchUpdateOrdersAuthz

// string subaccount_id = 1 [json_name = "subaccountId"];
inline void BatchUpdateOrdersAuthz::clear_subaccount_id() {
  _impl_.subaccount_id_.ClearToEmpty();
}
inline const std::string& BatchUpdateOrdersAuthz::subaccount_id() const {
  // @@protoc_insertion_point(field_get:injective.exchange.v1beta1.BatchUpdateOrdersAuthz.subaccount_id)
  return _internal_subaccount_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void BatchUpdateOrdersAuthz::set_subaccount_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.subaccount_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.exchange.v1beta1.BatchUpdateOrdersAuthz.subaccount_id)
}
inline std::string* BatchUpdateOrdersAuthz::mutable_subaccount_id() {
  std::string* _s = _internal_mutable_subaccount_id();
  // @@protoc_insertion_point(field_mutable:injective.exchange.v1beta1.BatchUpdateOrdersAuthz.subaccount_id)
  return _s;
}
inline const std::string& BatchUpdateOrdersAuthz::_internal_subaccount_id() const {
  return _impl_.subaccount_id_.Get();
}
inline void BatchUpdateOrdersAuthz::_internal_set_subaccount_id(const std::string& value) {
  ;


  _impl_.subaccount_id_.Set(value, GetArenaForAllocation());
}
inline std::string* BatchUpdateOrdersAuthz::_internal_mutable_subaccount_id() {
  ;
  return _impl_.subaccount_id_.Mutable( GetArenaForAllocation());
}
inline std::string* BatchUpdateOrdersAuthz::release_subaccount_id() {
  // @@protoc_insertion_point(field_release:injective.exchange.v1beta1.BatchUpdateOrdersAuthz.subaccount_id)
  return _impl_.subaccount_id_.Release();
}
inline void BatchUpdateOrdersAuthz::set_allocated_subaccount_id(std::string* value) {
  _impl_.subaccount_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.subaccount_id_.IsDefault()) {
          _impl_.subaccount_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.exchange.v1beta1.BatchUpdateOrdersAuthz.subaccount_id)
}

// repeated string spot_markets = 2 [json_name = "spotMarkets"];
inline int BatchUpdateOrdersAuthz::_internal_spot_markets_size() const {
  return _impl_.spot_markets_.size();
}
inline int BatchUpdateOrdersAuthz::spot_markets_size() const {
  return _internal_spot_markets_size();
}
inline void BatchUpdateOrdersAuthz::clear_spot_markets() {
  _internal_mutable_spot_markets()->Clear();
}
inline std::string* BatchUpdateOrdersAuthz::add_spot_markets() {
  std::string* _s = _internal_add_spot_markets();
  // @@protoc_insertion_point(field_add_mutable:injective.exchange.v1beta1.BatchUpdateOrdersAuthz.spot_markets)
  return _s;
}
inline const std::string& BatchUpdateOrdersAuthz::spot_markets(int index) const {
  // @@protoc_insertion_point(field_get:injective.exchange.v1beta1.BatchUpdateOrdersAuthz.spot_markets)
  return _internal_spot_markets(index);
}
inline std::string* BatchUpdateOrdersAuthz::mutable_spot_markets(int index) {
  // @@protoc_insertion_point(field_mutable:injective.exchange.v1beta1.BatchUpdateOrdersAuthz.spot_markets)
  return _internal_mutable_spot_markets()->Mutable(index);
}
inline void BatchUpdateOrdersAuthz::set_spot_markets(int index, const std::string& value) {
  _internal_mutable_spot_markets()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:injective.exchange.v1beta1.BatchUpdateOrdersAuthz.spot_markets)
}
inline void BatchUpdateOrdersAuthz::set_spot_markets(int index, std::string&& value) {
  _internal_mutable_spot_markets()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:injective.exchange.v1beta1.BatchUpdateOrdersAuthz.spot_markets)
}
inline void BatchUpdateOrdersAuthz::set_spot_markets(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_spot_markets()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:injective.exchange.v1beta1.BatchUpdateOrdersAuthz.spot_markets)
}
inline void BatchUpdateOrdersAuthz::set_spot_markets(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_spot_markets()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:injective.exchange.v1beta1.BatchUpdateOrdersAuthz.spot_markets)
}
inline void BatchUpdateOrdersAuthz::set_spot_markets(int index, absl::string_view value) {
  _internal_mutable_spot_markets()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:injective.exchange.v1beta1.BatchUpdateOrdersAuthz.spot_markets)
}
inline void BatchUpdateOrdersAuthz::add_spot_markets(const std::string& value) {
  _internal_mutable_spot_markets()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:injective.exchange.v1beta1.BatchUpdateOrdersAuthz.spot_markets)
}
inline void BatchUpdateOrdersAuthz::add_spot_markets(std::string&& value) {
  _internal_mutable_spot_markets()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:injective.exchange.v1beta1.BatchUpdateOrdersAuthz.spot_markets)
}
inline void BatchUpdateOrdersAuthz::add_spot_markets(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_spot_markets()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:injective.exchange.v1beta1.BatchUpdateOrdersAuthz.spot_markets)
}
inline void BatchUpdateOrdersAuthz::add_spot_markets(const char* value, std::size_t size) {
  _internal_mutable_spot_markets()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:injective.exchange.v1beta1.BatchUpdateOrdersAuthz.spot_markets)
}
inline void BatchUpdateOrdersAuthz::add_spot_markets(absl::string_view value) {
  _internal_mutable_spot_markets()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:injective.exchange.v1beta1.BatchUpdateOrdersAuthz.spot_markets)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
BatchUpdateOrdersAuthz::spot_markets() const {
  // @@protoc_insertion_point(field_list:injective.exchange.v1beta1.BatchUpdateOrdersAuthz.spot_markets)
  return _internal_spot_markets();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* BatchUpdateOrdersAuthz::mutable_spot_markets() {
  // @@protoc_insertion_point(field_mutable_list:injective.exchange.v1beta1.BatchUpdateOrdersAuthz.spot_markets)
  return _internal_mutable_spot_markets();
}
inline const std::string& BatchUpdateOrdersAuthz::_internal_spot_markets(int index) const {
  return _internal_spot_markets().Get(index);
}
inline std::string* BatchUpdateOrdersAuthz::_internal_add_spot_markets() {
  return _internal_mutable_spot_markets()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
BatchUpdateOrdersAuthz::_internal_spot_markets() const {
  return _impl_.spot_markets_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
BatchUpdateOrdersAuthz::_internal_mutable_spot_markets() {
  return &_impl_.spot_markets_;
}

// repeated string derivative_markets = 3 [json_name = "derivativeMarkets"];
inline int BatchUpdateOrdersAuthz::_internal_derivative_markets_size() const {
  return _impl_.derivative_markets_.size();
}
inline int BatchUpdateOrdersAuthz::derivative_markets_size() const {
  return _internal_derivative_markets_size();
}
inline void BatchUpdateOrdersAuthz::clear_derivative_markets() {
  _internal_mutable_derivative_markets()->Clear();
}
inline std::string* BatchUpdateOrdersAuthz::add_derivative_markets() {
  std::string* _s = _internal_add_derivative_markets();
  // @@protoc_insertion_point(field_add_mutable:injective.exchange.v1beta1.BatchUpdateOrdersAuthz.derivative_markets)
  return _s;
}
inline const std::string& BatchUpdateOrdersAuthz::derivative_markets(int index) const {
  // @@protoc_insertion_point(field_get:injective.exchange.v1beta1.BatchUpdateOrdersAuthz.derivative_markets)
  return _internal_derivative_markets(index);
}
inline std::string* BatchUpdateOrdersAuthz::mutable_derivative_markets(int index) {
  // @@protoc_insertion_point(field_mutable:injective.exchange.v1beta1.BatchUpdateOrdersAuthz.derivative_markets)
  return _internal_mutable_derivative_markets()->Mutable(index);
}
inline void BatchUpdateOrdersAuthz::set_derivative_markets(int index, const std::string& value) {
  _internal_mutable_derivative_markets()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:injective.exchange.v1beta1.BatchUpdateOrdersAuthz.derivative_markets)
}
inline void BatchUpdateOrdersAuthz::set_derivative_markets(int index, std::string&& value) {
  _internal_mutable_derivative_markets()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:injective.exchange.v1beta1.BatchUpdateOrdersAuthz.derivative_markets)
}
inline void BatchUpdateOrdersAuthz::set_derivative_markets(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_derivative_markets()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:injective.exchange.v1beta1.BatchUpdateOrdersAuthz.derivative_markets)
}
inline void BatchUpdateOrdersAuthz::set_derivative_markets(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_derivative_markets()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:injective.exchange.v1beta1.BatchUpdateOrdersAuthz.derivative_markets)
}
inline void BatchUpdateOrdersAuthz::set_derivative_markets(int index, absl::string_view value) {
  _internal_mutable_derivative_markets()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:injective.exchange.v1beta1.BatchUpdateOrdersAuthz.derivative_markets)
}
inline void BatchUpdateOrdersAuthz::add_derivative_markets(const std::string& value) {
  _internal_mutable_derivative_markets()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:injective.exchange.v1beta1.BatchUpdateOrdersAuthz.derivative_markets)
}
inline void BatchUpdateOrdersAuthz::add_derivative_markets(std::string&& value) {
  _internal_mutable_derivative_markets()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:injective.exchange.v1beta1.BatchUpdateOrdersAuthz.derivative_markets)
}
inline void BatchUpdateOrdersAuthz::add_derivative_markets(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_derivative_markets()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:injective.exchange.v1beta1.BatchUpdateOrdersAuthz.derivative_markets)
}
inline void BatchUpdateOrdersAuthz::add_derivative_markets(const char* value, std::size_t size) {
  _internal_mutable_derivative_markets()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:injective.exchange.v1beta1.BatchUpdateOrdersAuthz.derivative_markets)
}
inline void BatchUpdateOrdersAuthz::add_derivative_markets(absl::string_view value) {
  _internal_mutable_derivative_markets()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:injective.exchange.v1beta1.BatchUpdateOrdersAuthz.derivative_markets)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
BatchUpdateOrdersAuthz::derivative_markets() const {
  // @@protoc_insertion_point(field_list:injective.exchange.v1beta1.BatchUpdateOrdersAuthz.derivative_markets)
  return _internal_derivative_markets();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* BatchUpdateOrdersAuthz::mutable_derivative_markets() {
  // @@protoc_insertion_point(field_mutable_list:injective.exchange.v1beta1.BatchUpdateOrdersAuthz.derivative_markets)
  return _internal_mutable_derivative_markets();
}
inline const std::string& BatchUpdateOrdersAuthz::_internal_derivative_markets(int index) const {
  return _internal_derivative_markets().Get(index);
}
inline std::string* BatchUpdateOrdersAuthz::_internal_add_derivative_markets() {
  return _internal_mutable_derivative_markets()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
BatchUpdateOrdersAuthz::_internal_derivative_markets() const {
  return _impl_.derivative_markets_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
BatchUpdateOrdersAuthz::_internal_mutable_derivative_markets() {
  return &_impl_.derivative_markets_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1beta1
}  // namespace exchange
}  // namespace injective


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_injective_2fexchange_2fv1beta1_2fauthz_2eproto_2epb_2eh

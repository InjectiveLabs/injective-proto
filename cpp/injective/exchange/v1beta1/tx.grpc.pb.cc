// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: injective/exchange/v1beta1/tx.proto

#include "injective/exchange/v1beta1/tx.pb.h"
#include "injective/exchange/v1beta1/tx.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace injective {
namespace exchange {
namespace v1beta1 {

static const char* Msg_method_names[] = {
  "/injective.exchange.v1beta1.Msg/Deposit",
  "/injective.exchange.v1beta1.Msg/Withdraw",
  "/injective.exchange.v1beta1.Msg/InstantSpotMarketLaunch",
  "/injective.exchange.v1beta1.Msg/InstantPerpetualMarketLaunch",
  "/injective.exchange.v1beta1.Msg/InstantExpiryFuturesMarketLaunch",
  "/injective.exchange.v1beta1.Msg/CreateSpotLimitOrder",
  "/injective.exchange.v1beta1.Msg/BatchCreateSpotLimitOrders",
  "/injective.exchange.v1beta1.Msg/CreateSpotMarketOrder",
  "/injective.exchange.v1beta1.Msg/CancelSpotOrder",
  "/injective.exchange.v1beta1.Msg/BatchCancelSpotOrders",
  "/injective.exchange.v1beta1.Msg/BatchUpdateOrders",
  "/injective.exchange.v1beta1.Msg/PrivilegedExecuteContract",
  "/injective.exchange.v1beta1.Msg/CreateDerivativeLimitOrder",
  "/injective.exchange.v1beta1.Msg/BatchCreateDerivativeLimitOrders",
  "/injective.exchange.v1beta1.Msg/CreateDerivativeMarketOrder",
  "/injective.exchange.v1beta1.Msg/CancelDerivativeOrder",
  "/injective.exchange.v1beta1.Msg/BatchCancelDerivativeOrders",
  "/injective.exchange.v1beta1.Msg/InstantBinaryOptionsMarketLaunch",
  "/injective.exchange.v1beta1.Msg/CreateBinaryOptionsLimitOrder",
  "/injective.exchange.v1beta1.Msg/CreateBinaryOptionsMarketOrder",
  "/injective.exchange.v1beta1.Msg/CancelBinaryOptionsOrder",
  "/injective.exchange.v1beta1.Msg/BatchCancelBinaryOptionsOrders",
  "/injective.exchange.v1beta1.Msg/SubaccountTransfer",
  "/injective.exchange.v1beta1.Msg/ExternalTransfer",
  "/injective.exchange.v1beta1.Msg/LiquidatePosition",
  "/injective.exchange.v1beta1.Msg/IncreasePositionMargin",
  "/injective.exchange.v1beta1.Msg/RewardsOptOut",
  "/injective.exchange.v1beta1.Msg/AdminUpdateBinaryOptionsMarket",
  "/injective.exchange.v1beta1.Msg/ReclaimLockedFunds",
  "/injective.exchange.v1beta1.Msg/UpdateParams",
};

std::unique_ptr< Msg::Stub> Msg::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Msg::Stub> stub(new Msg::Stub(channel, options));
  return stub;
}

Msg::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Deposit_(Msg_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Withdraw_(Msg_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_InstantSpotMarketLaunch_(Msg_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_InstantPerpetualMarketLaunch_(Msg_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_InstantExpiryFuturesMarketLaunch_(Msg_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateSpotLimitOrder_(Msg_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_BatchCreateSpotLimitOrders_(Msg_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateSpotMarketOrder_(Msg_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CancelSpotOrder_(Msg_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_BatchCancelSpotOrders_(Msg_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_BatchUpdateOrders_(Msg_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PrivilegedExecuteContract_(Msg_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateDerivativeLimitOrder_(Msg_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_BatchCreateDerivativeLimitOrders_(Msg_method_names[13], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateDerivativeMarketOrder_(Msg_method_names[14], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CancelDerivativeOrder_(Msg_method_names[15], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_BatchCancelDerivativeOrders_(Msg_method_names[16], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_InstantBinaryOptionsMarketLaunch_(Msg_method_names[17], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateBinaryOptionsLimitOrder_(Msg_method_names[18], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateBinaryOptionsMarketOrder_(Msg_method_names[19], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CancelBinaryOptionsOrder_(Msg_method_names[20], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_BatchCancelBinaryOptionsOrders_(Msg_method_names[21], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SubaccountTransfer_(Msg_method_names[22], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ExternalTransfer_(Msg_method_names[23], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_LiquidatePosition_(Msg_method_names[24], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_IncreasePositionMargin_(Msg_method_names[25], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RewardsOptOut_(Msg_method_names[26], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AdminUpdateBinaryOptionsMarket_(Msg_method_names[27], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ReclaimLockedFunds_(Msg_method_names[28], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateParams_(Msg_method_names[29], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Msg::Stub::Deposit(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::MsgDeposit& request, ::injective::exchange::v1beta1::MsgDepositResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::exchange::v1beta1::MsgDeposit, ::injective::exchange::v1beta1::MsgDepositResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Deposit_, context, request, response);
}

void Msg::Stub::async::Deposit(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::MsgDeposit* request, ::injective::exchange::v1beta1::MsgDepositResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::exchange::v1beta1::MsgDeposit, ::injective::exchange::v1beta1::MsgDepositResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Deposit_, context, request, response, std::move(f));
}

void Msg::Stub::async::Deposit(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::MsgDeposit* request, ::injective::exchange::v1beta1::MsgDepositResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Deposit_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::MsgDepositResponse>* Msg::Stub::PrepareAsyncDepositRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::MsgDeposit& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::exchange::v1beta1::MsgDepositResponse, ::injective::exchange::v1beta1::MsgDeposit, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Deposit_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::MsgDepositResponse>* Msg::Stub::AsyncDepositRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::MsgDeposit& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDepositRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Msg::Stub::Withdraw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::MsgWithdraw& request, ::injective::exchange::v1beta1::MsgWithdrawResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::exchange::v1beta1::MsgWithdraw, ::injective::exchange::v1beta1::MsgWithdrawResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Withdraw_, context, request, response);
}

void Msg::Stub::async::Withdraw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::MsgWithdraw* request, ::injective::exchange::v1beta1::MsgWithdrawResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::exchange::v1beta1::MsgWithdraw, ::injective::exchange::v1beta1::MsgWithdrawResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Withdraw_, context, request, response, std::move(f));
}

void Msg::Stub::async::Withdraw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::MsgWithdraw* request, ::injective::exchange::v1beta1::MsgWithdrawResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Withdraw_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::MsgWithdrawResponse>* Msg::Stub::PrepareAsyncWithdrawRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::MsgWithdraw& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::exchange::v1beta1::MsgWithdrawResponse, ::injective::exchange::v1beta1::MsgWithdraw, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Withdraw_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::MsgWithdrawResponse>* Msg::Stub::AsyncWithdrawRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::MsgWithdraw& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncWithdrawRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Msg::Stub::InstantSpotMarketLaunch(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::MsgInstantSpotMarketLaunch& request, ::injective::exchange::v1beta1::MsgInstantSpotMarketLaunchResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::exchange::v1beta1::MsgInstantSpotMarketLaunch, ::injective::exchange::v1beta1::MsgInstantSpotMarketLaunchResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_InstantSpotMarketLaunch_, context, request, response);
}

void Msg::Stub::async::InstantSpotMarketLaunch(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::MsgInstantSpotMarketLaunch* request, ::injective::exchange::v1beta1::MsgInstantSpotMarketLaunchResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::exchange::v1beta1::MsgInstantSpotMarketLaunch, ::injective::exchange::v1beta1::MsgInstantSpotMarketLaunchResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_InstantSpotMarketLaunch_, context, request, response, std::move(f));
}

void Msg::Stub::async::InstantSpotMarketLaunch(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::MsgInstantSpotMarketLaunch* request, ::injective::exchange::v1beta1::MsgInstantSpotMarketLaunchResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_InstantSpotMarketLaunch_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::MsgInstantSpotMarketLaunchResponse>* Msg::Stub::PrepareAsyncInstantSpotMarketLaunchRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::MsgInstantSpotMarketLaunch& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::exchange::v1beta1::MsgInstantSpotMarketLaunchResponse, ::injective::exchange::v1beta1::MsgInstantSpotMarketLaunch, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_InstantSpotMarketLaunch_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::MsgInstantSpotMarketLaunchResponse>* Msg::Stub::AsyncInstantSpotMarketLaunchRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::MsgInstantSpotMarketLaunch& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncInstantSpotMarketLaunchRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Msg::Stub::InstantPerpetualMarketLaunch(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::MsgInstantPerpetualMarketLaunch& request, ::injective::exchange::v1beta1::MsgInstantPerpetualMarketLaunchResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::exchange::v1beta1::MsgInstantPerpetualMarketLaunch, ::injective::exchange::v1beta1::MsgInstantPerpetualMarketLaunchResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_InstantPerpetualMarketLaunch_, context, request, response);
}

void Msg::Stub::async::InstantPerpetualMarketLaunch(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::MsgInstantPerpetualMarketLaunch* request, ::injective::exchange::v1beta1::MsgInstantPerpetualMarketLaunchResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::exchange::v1beta1::MsgInstantPerpetualMarketLaunch, ::injective::exchange::v1beta1::MsgInstantPerpetualMarketLaunchResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_InstantPerpetualMarketLaunch_, context, request, response, std::move(f));
}

void Msg::Stub::async::InstantPerpetualMarketLaunch(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::MsgInstantPerpetualMarketLaunch* request, ::injective::exchange::v1beta1::MsgInstantPerpetualMarketLaunchResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_InstantPerpetualMarketLaunch_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::MsgInstantPerpetualMarketLaunchResponse>* Msg::Stub::PrepareAsyncInstantPerpetualMarketLaunchRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::MsgInstantPerpetualMarketLaunch& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::exchange::v1beta1::MsgInstantPerpetualMarketLaunchResponse, ::injective::exchange::v1beta1::MsgInstantPerpetualMarketLaunch, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_InstantPerpetualMarketLaunch_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::MsgInstantPerpetualMarketLaunchResponse>* Msg::Stub::AsyncInstantPerpetualMarketLaunchRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::MsgInstantPerpetualMarketLaunch& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncInstantPerpetualMarketLaunchRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Msg::Stub::InstantExpiryFuturesMarketLaunch(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::MsgInstantExpiryFuturesMarketLaunch& request, ::injective::exchange::v1beta1::MsgInstantExpiryFuturesMarketLaunchResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::exchange::v1beta1::MsgInstantExpiryFuturesMarketLaunch, ::injective::exchange::v1beta1::MsgInstantExpiryFuturesMarketLaunchResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_InstantExpiryFuturesMarketLaunch_, context, request, response);
}

void Msg::Stub::async::InstantExpiryFuturesMarketLaunch(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::MsgInstantExpiryFuturesMarketLaunch* request, ::injective::exchange::v1beta1::MsgInstantExpiryFuturesMarketLaunchResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::exchange::v1beta1::MsgInstantExpiryFuturesMarketLaunch, ::injective::exchange::v1beta1::MsgInstantExpiryFuturesMarketLaunchResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_InstantExpiryFuturesMarketLaunch_, context, request, response, std::move(f));
}

void Msg::Stub::async::InstantExpiryFuturesMarketLaunch(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::MsgInstantExpiryFuturesMarketLaunch* request, ::injective::exchange::v1beta1::MsgInstantExpiryFuturesMarketLaunchResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_InstantExpiryFuturesMarketLaunch_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::MsgInstantExpiryFuturesMarketLaunchResponse>* Msg::Stub::PrepareAsyncInstantExpiryFuturesMarketLaunchRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::MsgInstantExpiryFuturesMarketLaunch& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::exchange::v1beta1::MsgInstantExpiryFuturesMarketLaunchResponse, ::injective::exchange::v1beta1::MsgInstantExpiryFuturesMarketLaunch, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_InstantExpiryFuturesMarketLaunch_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::MsgInstantExpiryFuturesMarketLaunchResponse>* Msg::Stub::AsyncInstantExpiryFuturesMarketLaunchRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::MsgInstantExpiryFuturesMarketLaunch& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncInstantExpiryFuturesMarketLaunchRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Msg::Stub::CreateSpotLimitOrder(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::MsgCreateSpotLimitOrder& request, ::injective::exchange::v1beta1::MsgCreateSpotLimitOrderResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::exchange::v1beta1::MsgCreateSpotLimitOrder, ::injective::exchange::v1beta1::MsgCreateSpotLimitOrderResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateSpotLimitOrder_, context, request, response);
}

void Msg::Stub::async::CreateSpotLimitOrder(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::MsgCreateSpotLimitOrder* request, ::injective::exchange::v1beta1::MsgCreateSpotLimitOrderResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::exchange::v1beta1::MsgCreateSpotLimitOrder, ::injective::exchange::v1beta1::MsgCreateSpotLimitOrderResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateSpotLimitOrder_, context, request, response, std::move(f));
}

void Msg::Stub::async::CreateSpotLimitOrder(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::MsgCreateSpotLimitOrder* request, ::injective::exchange::v1beta1::MsgCreateSpotLimitOrderResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateSpotLimitOrder_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::MsgCreateSpotLimitOrderResponse>* Msg::Stub::PrepareAsyncCreateSpotLimitOrderRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::MsgCreateSpotLimitOrder& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::exchange::v1beta1::MsgCreateSpotLimitOrderResponse, ::injective::exchange::v1beta1::MsgCreateSpotLimitOrder, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateSpotLimitOrder_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::MsgCreateSpotLimitOrderResponse>* Msg::Stub::AsyncCreateSpotLimitOrderRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::MsgCreateSpotLimitOrder& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateSpotLimitOrderRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Msg::Stub::BatchCreateSpotLimitOrders(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::MsgBatchCreateSpotLimitOrders& request, ::injective::exchange::v1beta1::MsgBatchCreateSpotLimitOrdersResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::exchange::v1beta1::MsgBatchCreateSpotLimitOrders, ::injective::exchange::v1beta1::MsgBatchCreateSpotLimitOrdersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_BatchCreateSpotLimitOrders_, context, request, response);
}

void Msg::Stub::async::BatchCreateSpotLimitOrders(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::MsgBatchCreateSpotLimitOrders* request, ::injective::exchange::v1beta1::MsgBatchCreateSpotLimitOrdersResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::exchange::v1beta1::MsgBatchCreateSpotLimitOrders, ::injective::exchange::v1beta1::MsgBatchCreateSpotLimitOrdersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_BatchCreateSpotLimitOrders_, context, request, response, std::move(f));
}

void Msg::Stub::async::BatchCreateSpotLimitOrders(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::MsgBatchCreateSpotLimitOrders* request, ::injective::exchange::v1beta1::MsgBatchCreateSpotLimitOrdersResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_BatchCreateSpotLimitOrders_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::MsgBatchCreateSpotLimitOrdersResponse>* Msg::Stub::PrepareAsyncBatchCreateSpotLimitOrdersRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::MsgBatchCreateSpotLimitOrders& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::exchange::v1beta1::MsgBatchCreateSpotLimitOrdersResponse, ::injective::exchange::v1beta1::MsgBatchCreateSpotLimitOrders, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_BatchCreateSpotLimitOrders_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::MsgBatchCreateSpotLimitOrdersResponse>* Msg::Stub::AsyncBatchCreateSpotLimitOrdersRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::MsgBatchCreateSpotLimitOrders& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncBatchCreateSpotLimitOrdersRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Msg::Stub::CreateSpotMarketOrder(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::MsgCreateSpotMarketOrder& request, ::injective::exchange::v1beta1::MsgCreateSpotMarketOrderResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::exchange::v1beta1::MsgCreateSpotMarketOrder, ::injective::exchange::v1beta1::MsgCreateSpotMarketOrderResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateSpotMarketOrder_, context, request, response);
}

void Msg::Stub::async::CreateSpotMarketOrder(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::MsgCreateSpotMarketOrder* request, ::injective::exchange::v1beta1::MsgCreateSpotMarketOrderResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::exchange::v1beta1::MsgCreateSpotMarketOrder, ::injective::exchange::v1beta1::MsgCreateSpotMarketOrderResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateSpotMarketOrder_, context, request, response, std::move(f));
}

void Msg::Stub::async::CreateSpotMarketOrder(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::MsgCreateSpotMarketOrder* request, ::injective::exchange::v1beta1::MsgCreateSpotMarketOrderResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateSpotMarketOrder_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::MsgCreateSpotMarketOrderResponse>* Msg::Stub::PrepareAsyncCreateSpotMarketOrderRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::MsgCreateSpotMarketOrder& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::exchange::v1beta1::MsgCreateSpotMarketOrderResponse, ::injective::exchange::v1beta1::MsgCreateSpotMarketOrder, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateSpotMarketOrder_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::MsgCreateSpotMarketOrderResponse>* Msg::Stub::AsyncCreateSpotMarketOrderRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::MsgCreateSpotMarketOrder& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateSpotMarketOrderRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Msg::Stub::CancelSpotOrder(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::MsgCancelSpotOrder& request, ::injective::exchange::v1beta1::MsgCancelSpotOrderResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::exchange::v1beta1::MsgCancelSpotOrder, ::injective::exchange::v1beta1::MsgCancelSpotOrderResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CancelSpotOrder_, context, request, response);
}

void Msg::Stub::async::CancelSpotOrder(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::MsgCancelSpotOrder* request, ::injective::exchange::v1beta1::MsgCancelSpotOrderResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::exchange::v1beta1::MsgCancelSpotOrder, ::injective::exchange::v1beta1::MsgCancelSpotOrderResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CancelSpotOrder_, context, request, response, std::move(f));
}

void Msg::Stub::async::CancelSpotOrder(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::MsgCancelSpotOrder* request, ::injective::exchange::v1beta1::MsgCancelSpotOrderResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CancelSpotOrder_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::MsgCancelSpotOrderResponse>* Msg::Stub::PrepareAsyncCancelSpotOrderRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::MsgCancelSpotOrder& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::exchange::v1beta1::MsgCancelSpotOrderResponse, ::injective::exchange::v1beta1::MsgCancelSpotOrder, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CancelSpotOrder_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::MsgCancelSpotOrderResponse>* Msg::Stub::AsyncCancelSpotOrderRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::MsgCancelSpotOrder& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCancelSpotOrderRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Msg::Stub::BatchCancelSpotOrders(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::MsgBatchCancelSpotOrders& request, ::injective::exchange::v1beta1::MsgBatchCancelSpotOrdersResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::exchange::v1beta1::MsgBatchCancelSpotOrders, ::injective::exchange::v1beta1::MsgBatchCancelSpotOrdersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_BatchCancelSpotOrders_, context, request, response);
}

void Msg::Stub::async::BatchCancelSpotOrders(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::MsgBatchCancelSpotOrders* request, ::injective::exchange::v1beta1::MsgBatchCancelSpotOrdersResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::exchange::v1beta1::MsgBatchCancelSpotOrders, ::injective::exchange::v1beta1::MsgBatchCancelSpotOrdersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_BatchCancelSpotOrders_, context, request, response, std::move(f));
}

void Msg::Stub::async::BatchCancelSpotOrders(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::MsgBatchCancelSpotOrders* request, ::injective::exchange::v1beta1::MsgBatchCancelSpotOrdersResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_BatchCancelSpotOrders_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::MsgBatchCancelSpotOrdersResponse>* Msg::Stub::PrepareAsyncBatchCancelSpotOrdersRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::MsgBatchCancelSpotOrders& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::exchange::v1beta1::MsgBatchCancelSpotOrdersResponse, ::injective::exchange::v1beta1::MsgBatchCancelSpotOrders, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_BatchCancelSpotOrders_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::MsgBatchCancelSpotOrdersResponse>* Msg::Stub::AsyncBatchCancelSpotOrdersRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::MsgBatchCancelSpotOrders& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncBatchCancelSpotOrdersRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Msg::Stub::BatchUpdateOrders(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::MsgBatchUpdateOrders& request, ::injective::exchange::v1beta1::MsgBatchUpdateOrdersResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::exchange::v1beta1::MsgBatchUpdateOrders, ::injective::exchange::v1beta1::MsgBatchUpdateOrdersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_BatchUpdateOrders_, context, request, response);
}

void Msg::Stub::async::BatchUpdateOrders(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::MsgBatchUpdateOrders* request, ::injective::exchange::v1beta1::MsgBatchUpdateOrdersResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::exchange::v1beta1::MsgBatchUpdateOrders, ::injective::exchange::v1beta1::MsgBatchUpdateOrdersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_BatchUpdateOrders_, context, request, response, std::move(f));
}

void Msg::Stub::async::BatchUpdateOrders(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::MsgBatchUpdateOrders* request, ::injective::exchange::v1beta1::MsgBatchUpdateOrdersResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_BatchUpdateOrders_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::MsgBatchUpdateOrdersResponse>* Msg::Stub::PrepareAsyncBatchUpdateOrdersRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::MsgBatchUpdateOrders& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::exchange::v1beta1::MsgBatchUpdateOrdersResponse, ::injective::exchange::v1beta1::MsgBatchUpdateOrders, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_BatchUpdateOrders_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::MsgBatchUpdateOrdersResponse>* Msg::Stub::AsyncBatchUpdateOrdersRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::MsgBatchUpdateOrders& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncBatchUpdateOrdersRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Msg::Stub::PrivilegedExecuteContract(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::MsgPrivilegedExecuteContract& request, ::injective::exchange::v1beta1::MsgPrivilegedExecuteContractResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::exchange::v1beta1::MsgPrivilegedExecuteContract, ::injective::exchange::v1beta1::MsgPrivilegedExecuteContractResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PrivilegedExecuteContract_, context, request, response);
}

void Msg::Stub::async::PrivilegedExecuteContract(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::MsgPrivilegedExecuteContract* request, ::injective::exchange::v1beta1::MsgPrivilegedExecuteContractResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::exchange::v1beta1::MsgPrivilegedExecuteContract, ::injective::exchange::v1beta1::MsgPrivilegedExecuteContractResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PrivilegedExecuteContract_, context, request, response, std::move(f));
}

void Msg::Stub::async::PrivilegedExecuteContract(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::MsgPrivilegedExecuteContract* request, ::injective::exchange::v1beta1::MsgPrivilegedExecuteContractResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PrivilegedExecuteContract_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::MsgPrivilegedExecuteContractResponse>* Msg::Stub::PrepareAsyncPrivilegedExecuteContractRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::MsgPrivilegedExecuteContract& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::exchange::v1beta1::MsgPrivilegedExecuteContractResponse, ::injective::exchange::v1beta1::MsgPrivilegedExecuteContract, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PrivilegedExecuteContract_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::MsgPrivilegedExecuteContractResponse>* Msg::Stub::AsyncPrivilegedExecuteContractRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::MsgPrivilegedExecuteContract& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPrivilegedExecuteContractRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Msg::Stub::CreateDerivativeLimitOrder(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::MsgCreateDerivativeLimitOrder& request, ::injective::exchange::v1beta1::MsgCreateDerivativeLimitOrderResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::exchange::v1beta1::MsgCreateDerivativeLimitOrder, ::injective::exchange::v1beta1::MsgCreateDerivativeLimitOrderResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateDerivativeLimitOrder_, context, request, response);
}

void Msg::Stub::async::CreateDerivativeLimitOrder(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::MsgCreateDerivativeLimitOrder* request, ::injective::exchange::v1beta1::MsgCreateDerivativeLimitOrderResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::exchange::v1beta1::MsgCreateDerivativeLimitOrder, ::injective::exchange::v1beta1::MsgCreateDerivativeLimitOrderResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateDerivativeLimitOrder_, context, request, response, std::move(f));
}

void Msg::Stub::async::CreateDerivativeLimitOrder(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::MsgCreateDerivativeLimitOrder* request, ::injective::exchange::v1beta1::MsgCreateDerivativeLimitOrderResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateDerivativeLimitOrder_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::MsgCreateDerivativeLimitOrderResponse>* Msg::Stub::PrepareAsyncCreateDerivativeLimitOrderRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::MsgCreateDerivativeLimitOrder& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::exchange::v1beta1::MsgCreateDerivativeLimitOrderResponse, ::injective::exchange::v1beta1::MsgCreateDerivativeLimitOrder, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateDerivativeLimitOrder_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::MsgCreateDerivativeLimitOrderResponse>* Msg::Stub::AsyncCreateDerivativeLimitOrderRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::MsgCreateDerivativeLimitOrder& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateDerivativeLimitOrderRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Msg::Stub::BatchCreateDerivativeLimitOrders(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::MsgBatchCreateDerivativeLimitOrders& request, ::injective::exchange::v1beta1::MsgBatchCreateDerivativeLimitOrdersResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::exchange::v1beta1::MsgBatchCreateDerivativeLimitOrders, ::injective::exchange::v1beta1::MsgBatchCreateDerivativeLimitOrdersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_BatchCreateDerivativeLimitOrders_, context, request, response);
}

void Msg::Stub::async::BatchCreateDerivativeLimitOrders(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::MsgBatchCreateDerivativeLimitOrders* request, ::injective::exchange::v1beta1::MsgBatchCreateDerivativeLimitOrdersResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::exchange::v1beta1::MsgBatchCreateDerivativeLimitOrders, ::injective::exchange::v1beta1::MsgBatchCreateDerivativeLimitOrdersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_BatchCreateDerivativeLimitOrders_, context, request, response, std::move(f));
}

void Msg::Stub::async::BatchCreateDerivativeLimitOrders(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::MsgBatchCreateDerivativeLimitOrders* request, ::injective::exchange::v1beta1::MsgBatchCreateDerivativeLimitOrdersResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_BatchCreateDerivativeLimitOrders_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::MsgBatchCreateDerivativeLimitOrdersResponse>* Msg::Stub::PrepareAsyncBatchCreateDerivativeLimitOrdersRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::MsgBatchCreateDerivativeLimitOrders& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::exchange::v1beta1::MsgBatchCreateDerivativeLimitOrdersResponse, ::injective::exchange::v1beta1::MsgBatchCreateDerivativeLimitOrders, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_BatchCreateDerivativeLimitOrders_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::MsgBatchCreateDerivativeLimitOrdersResponse>* Msg::Stub::AsyncBatchCreateDerivativeLimitOrdersRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::MsgBatchCreateDerivativeLimitOrders& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncBatchCreateDerivativeLimitOrdersRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Msg::Stub::CreateDerivativeMarketOrder(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::MsgCreateDerivativeMarketOrder& request, ::injective::exchange::v1beta1::MsgCreateDerivativeMarketOrderResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::exchange::v1beta1::MsgCreateDerivativeMarketOrder, ::injective::exchange::v1beta1::MsgCreateDerivativeMarketOrderResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateDerivativeMarketOrder_, context, request, response);
}

void Msg::Stub::async::CreateDerivativeMarketOrder(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::MsgCreateDerivativeMarketOrder* request, ::injective::exchange::v1beta1::MsgCreateDerivativeMarketOrderResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::exchange::v1beta1::MsgCreateDerivativeMarketOrder, ::injective::exchange::v1beta1::MsgCreateDerivativeMarketOrderResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateDerivativeMarketOrder_, context, request, response, std::move(f));
}

void Msg::Stub::async::CreateDerivativeMarketOrder(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::MsgCreateDerivativeMarketOrder* request, ::injective::exchange::v1beta1::MsgCreateDerivativeMarketOrderResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateDerivativeMarketOrder_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::MsgCreateDerivativeMarketOrderResponse>* Msg::Stub::PrepareAsyncCreateDerivativeMarketOrderRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::MsgCreateDerivativeMarketOrder& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::exchange::v1beta1::MsgCreateDerivativeMarketOrderResponse, ::injective::exchange::v1beta1::MsgCreateDerivativeMarketOrder, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateDerivativeMarketOrder_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::MsgCreateDerivativeMarketOrderResponse>* Msg::Stub::AsyncCreateDerivativeMarketOrderRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::MsgCreateDerivativeMarketOrder& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateDerivativeMarketOrderRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Msg::Stub::CancelDerivativeOrder(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::MsgCancelDerivativeOrder& request, ::injective::exchange::v1beta1::MsgCancelDerivativeOrderResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::exchange::v1beta1::MsgCancelDerivativeOrder, ::injective::exchange::v1beta1::MsgCancelDerivativeOrderResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CancelDerivativeOrder_, context, request, response);
}

void Msg::Stub::async::CancelDerivativeOrder(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::MsgCancelDerivativeOrder* request, ::injective::exchange::v1beta1::MsgCancelDerivativeOrderResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::exchange::v1beta1::MsgCancelDerivativeOrder, ::injective::exchange::v1beta1::MsgCancelDerivativeOrderResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CancelDerivativeOrder_, context, request, response, std::move(f));
}

void Msg::Stub::async::CancelDerivativeOrder(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::MsgCancelDerivativeOrder* request, ::injective::exchange::v1beta1::MsgCancelDerivativeOrderResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CancelDerivativeOrder_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::MsgCancelDerivativeOrderResponse>* Msg::Stub::PrepareAsyncCancelDerivativeOrderRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::MsgCancelDerivativeOrder& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::exchange::v1beta1::MsgCancelDerivativeOrderResponse, ::injective::exchange::v1beta1::MsgCancelDerivativeOrder, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CancelDerivativeOrder_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::MsgCancelDerivativeOrderResponse>* Msg::Stub::AsyncCancelDerivativeOrderRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::MsgCancelDerivativeOrder& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCancelDerivativeOrderRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Msg::Stub::BatchCancelDerivativeOrders(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::MsgBatchCancelDerivativeOrders& request, ::injective::exchange::v1beta1::MsgBatchCancelDerivativeOrdersResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::exchange::v1beta1::MsgBatchCancelDerivativeOrders, ::injective::exchange::v1beta1::MsgBatchCancelDerivativeOrdersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_BatchCancelDerivativeOrders_, context, request, response);
}

void Msg::Stub::async::BatchCancelDerivativeOrders(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::MsgBatchCancelDerivativeOrders* request, ::injective::exchange::v1beta1::MsgBatchCancelDerivativeOrdersResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::exchange::v1beta1::MsgBatchCancelDerivativeOrders, ::injective::exchange::v1beta1::MsgBatchCancelDerivativeOrdersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_BatchCancelDerivativeOrders_, context, request, response, std::move(f));
}

void Msg::Stub::async::BatchCancelDerivativeOrders(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::MsgBatchCancelDerivativeOrders* request, ::injective::exchange::v1beta1::MsgBatchCancelDerivativeOrdersResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_BatchCancelDerivativeOrders_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::MsgBatchCancelDerivativeOrdersResponse>* Msg::Stub::PrepareAsyncBatchCancelDerivativeOrdersRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::MsgBatchCancelDerivativeOrders& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::exchange::v1beta1::MsgBatchCancelDerivativeOrdersResponse, ::injective::exchange::v1beta1::MsgBatchCancelDerivativeOrders, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_BatchCancelDerivativeOrders_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::MsgBatchCancelDerivativeOrdersResponse>* Msg::Stub::AsyncBatchCancelDerivativeOrdersRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::MsgBatchCancelDerivativeOrders& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncBatchCancelDerivativeOrdersRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Msg::Stub::InstantBinaryOptionsMarketLaunch(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::MsgInstantBinaryOptionsMarketLaunch& request, ::injective::exchange::v1beta1::MsgInstantBinaryOptionsMarketLaunchResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::exchange::v1beta1::MsgInstantBinaryOptionsMarketLaunch, ::injective::exchange::v1beta1::MsgInstantBinaryOptionsMarketLaunchResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_InstantBinaryOptionsMarketLaunch_, context, request, response);
}

void Msg::Stub::async::InstantBinaryOptionsMarketLaunch(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::MsgInstantBinaryOptionsMarketLaunch* request, ::injective::exchange::v1beta1::MsgInstantBinaryOptionsMarketLaunchResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::exchange::v1beta1::MsgInstantBinaryOptionsMarketLaunch, ::injective::exchange::v1beta1::MsgInstantBinaryOptionsMarketLaunchResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_InstantBinaryOptionsMarketLaunch_, context, request, response, std::move(f));
}

void Msg::Stub::async::InstantBinaryOptionsMarketLaunch(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::MsgInstantBinaryOptionsMarketLaunch* request, ::injective::exchange::v1beta1::MsgInstantBinaryOptionsMarketLaunchResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_InstantBinaryOptionsMarketLaunch_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::MsgInstantBinaryOptionsMarketLaunchResponse>* Msg::Stub::PrepareAsyncInstantBinaryOptionsMarketLaunchRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::MsgInstantBinaryOptionsMarketLaunch& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::exchange::v1beta1::MsgInstantBinaryOptionsMarketLaunchResponse, ::injective::exchange::v1beta1::MsgInstantBinaryOptionsMarketLaunch, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_InstantBinaryOptionsMarketLaunch_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::MsgInstantBinaryOptionsMarketLaunchResponse>* Msg::Stub::AsyncInstantBinaryOptionsMarketLaunchRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::MsgInstantBinaryOptionsMarketLaunch& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncInstantBinaryOptionsMarketLaunchRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Msg::Stub::CreateBinaryOptionsLimitOrder(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::MsgCreateBinaryOptionsLimitOrder& request, ::injective::exchange::v1beta1::MsgCreateBinaryOptionsLimitOrderResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::exchange::v1beta1::MsgCreateBinaryOptionsLimitOrder, ::injective::exchange::v1beta1::MsgCreateBinaryOptionsLimitOrderResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateBinaryOptionsLimitOrder_, context, request, response);
}

void Msg::Stub::async::CreateBinaryOptionsLimitOrder(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::MsgCreateBinaryOptionsLimitOrder* request, ::injective::exchange::v1beta1::MsgCreateBinaryOptionsLimitOrderResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::exchange::v1beta1::MsgCreateBinaryOptionsLimitOrder, ::injective::exchange::v1beta1::MsgCreateBinaryOptionsLimitOrderResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateBinaryOptionsLimitOrder_, context, request, response, std::move(f));
}

void Msg::Stub::async::CreateBinaryOptionsLimitOrder(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::MsgCreateBinaryOptionsLimitOrder* request, ::injective::exchange::v1beta1::MsgCreateBinaryOptionsLimitOrderResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateBinaryOptionsLimitOrder_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::MsgCreateBinaryOptionsLimitOrderResponse>* Msg::Stub::PrepareAsyncCreateBinaryOptionsLimitOrderRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::MsgCreateBinaryOptionsLimitOrder& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::exchange::v1beta1::MsgCreateBinaryOptionsLimitOrderResponse, ::injective::exchange::v1beta1::MsgCreateBinaryOptionsLimitOrder, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateBinaryOptionsLimitOrder_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::MsgCreateBinaryOptionsLimitOrderResponse>* Msg::Stub::AsyncCreateBinaryOptionsLimitOrderRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::MsgCreateBinaryOptionsLimitOrder& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateBinaryOptionsLimitOrderRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Msg::Stub::CreateBinaryOptionsMarketOrder(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::MsgCreateBinaryOptionsMarketOrder& request, ::injective::exchange::v1beta1::MsgCreateBinaryOptionsMarketOrderResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::exchange::v1beta1::MsgCreateBinaryOptionsMarketOrder, ::injective::exchange::v1beta1::MsgCreateBinaryOptionsMarketOrderResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateBinaryOptionsMarketOrder_, context, request, response);
}

void Msg::Stub::async::CreateBinaryOptionsMarketOrder(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::MsgCreateBinaryOptionsMarketOrder* request, ::injective::exchange::v1beta1::MsgCreateBinaryOptionsMarketOrderResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::exchange::v1beta1::MsgCreateBinaryOptionsMarketOrder, ::injective::exchange::v1beta1::MsgCreateBinaryOptionsMarketOrderResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateBinaryOptionsMarketOrder_, context, request, response, std::move(f));
}

void Msg::Stub::async::CreateBinaryOptionsMarketOrder(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::MsgCreateBinaryOptionsMarketOrder* request, ::injective::exchange::v1beta1::MsgCreateBinaryOptionsMarketOrderResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateBinaryOptionsMarketOrder_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::MsgCreateBinaryOptionsMarketOrderResponse>* Msg::Stub::PrepareAsyncCreateBinaryOptionsMarketOrderRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::MsgCreateBinaryOptionsMarketOrder& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::exchange::v1beta1::MsgCreateBinaryOptionsMarketOrderResponse, ::injective::exchange::v1beta1::MsgCreateBinaryOptionsMarketOrder, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateBinaryOptionsMarketOrder_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::MsgCreateBinaryOptionsMarketOrderResponse>* Msg::Stub::AsyncCreateBinaryOptionsMarketOrderRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::MsgCreateBinaryOptionsMarketOrder& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateBinaryOptionsMarketOrderRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Msg::Stub::CancelBinaryOptionsOrder(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::MsgCancelBinaryOptionsOrder& request, ::injective::exchange::v1beta1::MsgCancelBinaryOptionsOrderResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::exchange::v1beta1::MsgCancelBinaryOptionsOrder, ::injective::exchange::v1beta1::MsgCancelBinaryOptionsOrderResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CancelBinaryOptionsOrder_, context, request, response);
}

void Msg::Stub::async::CancelBinaryOptionsOrder(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::MsgCancelBinaryOptionsOrder* request, ::injective::exchange::v1beta1::MsgCancelBinaryOptionsOrderResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::exchange::v1beta1::MsgCancelBinaryOptionsOrder, ::injective::exchange::v1beta1::MsgCancelBinaryOptionsOrderResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CancelBinaryOptionsOrder_, context, request, response, std::move(f));
}

void Msg::Stub::async::CancelBinaryOptionsOrder(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::MsgCancelBinaryOptionsOrder* request, ::injective::exchange::v1beta1::MsgCancelBinaryOptionsOrderResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CancelBinaryOptionsOrder_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::MsgCancelBinaryOptionsOrderResponse>* Msg::Stub::PrepareAsyncCancelBinaryOptionsOrderRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::MsgCancelBinaryOptionsOrder& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::exchange::v1beta1::MsgCancelBinaryOptionsOrderResponse, ::injective::exchange::v1beta1::MsgCancelBinaryOptionsOrder, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CancelBinaryOptionsOrder_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::MsgCancelBinaryOptionsOrderResponse>* Msg::Stub::AsyncCancelBinaryOptionsOrderRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::MsgCancelBinaryOptionsOrder& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCancelBinaryOptionsOrderRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Msg::Stub::BatchCancelBinaryOptionsOrders(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::MsgBatchCancelBinaryOptionsOrders& request, ::injective::exchange::v1beta1::MsgBatchCancelBinaryOptionsOrdersResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::exchange::v1beta1::MsgBatchCancelBinaryOptionsOrders, ::injective::exchange::v1beta1::MsgBatchCancelBinaryOptionsOrdersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_BatchCancelBinaryOptionsOrders_, context, request, response);
}

void Msg::Stub::async::BatchCancelBinaryOptionsOrders(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::MsgBatchCancelBinaryOptionsOrders* request, ::injective::exchange::v1beta1::MsgBatchCancelBinaryOptionsOrdersResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::exchange::v1beta1::MsgBatchCancelBinaryOptionsOrders, ::injective::exchange::v1beta1::MsgBatchCancelBinaryOptionsOrdersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_BatchCancelBinaryOptionsOrders_, context, request, response, std::move(f));
}

void Msg::Stub::async::BatchCancelBinaryOptionsOrders(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::MsgBatchCancelBinaryOptionsOrders* request, ::injective::exchange::v1beta1::MsgBatchCancelBinaryOptionsOrdersResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_BatchCancelBinaryOptionsOrders_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::MsgBatchCancelBinaryOptionsOrdersResponse>* Msg::Stub::PrepareAsyncBatchCancelBinaryOptionsOrdersRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::MsgBatchCancelBinaryOptionsOrders& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::exchange::v1beta1::MsgBatchCancelBinaryOptionsOrdersResponse, ::injective::exchange::v1beta1::MsgBatchCancelBinaryOptionsOrders, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_BatchCancelBinaryOptionsOrders_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::MsgBatchCancelBinaryOptionsOrdersResponse>* Msg::Stub::AsyncBatchCancelBinaryOptionsOrdersRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::MsgBatchCancelBinaryOptionsOrders& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncBatchCancelBinaryOptionsOrdersRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Msg::Stub::SubaccountTransfer(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::MsgSubaccountTransfer& request, ::injective::exchange::v1beta1::MsgSubaccountTransferResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::exchange::v1beta1::MsgSubaccountTransfer, ::injective::exchange::v1beta1::MsgSubaccountTransferResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SubaccountTransfer_, context, request, response);
}

void Msg::Stub::async::SubaccountTransfer(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::MsgSubaccountTransfer* request, ::injective::exchange::v1beta1::MsgSubaccountTransferResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::exchange::v1beta1::MsgSubaccountTransfer, ::injective::exchange::v1beta1::MsgSubaccountTransferResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SubaccountTransfer_, context, request, response, std::move(f));
}

void Msg::Stub::async::SubaccountTransfer(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::MsgSubaccountTransfer* request, ::injective::exchange::v1beta1::MsgSubaccountTransferResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SubaccountTransfer_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::MsgSubaccountTransferResponse>* Msg::Stub::PrepareAsyncSubaccountTransferRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::MsgSubaccountTransfer& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::exchange::v1beta1::MsgSubaccountTransferResponse, ::injective::exchange::v1beta1::MsgSubaccountTransfer, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SubaccountTransfer_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::MsgSubaccountTransferResponse>* Msg::Stub::AsyncSubaccountTransferRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::MsgSubaccountTransfer& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSubaccountTransferRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Msg::Stub::ExternalTransfer(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::MsgExternalTransfer& request, ::injective::exchange::v1beta1::MsgExternalTransferResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::exchange::v1beta1::MsgExternalTransfer, ::injective::exchange::v1beta1::MsgExternalTransferResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ExternalTransfer_, context, request, response);
}

void Msg::Stub::async::ExternalTransfer(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::MsgExternalTransfer* request, ::injective::exchange::v1beta1::MsgExternalTransferResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::exchange::v1beta1::MsgExternalTransfer, ::injective::exchange::v1beta1::MsgExternalTransferResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExternalTransfer_, context, request, response, std::move(f));
}

void Msg::Stub::async::ExternalTransfer(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::MsgExternalTransfer* request, ::injective::exchange::v1beta1::MsgExternalTransferResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExternalTransfer_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::MsgExternalTransferResponse>* Msg::Stub::PrepareAsyncExternalTransferRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::MsgExternalTransfer& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::exchange::v1beta1::MsgExternalTransferResponse, ::injective::exchange::v1beta1::MsgExternalTransfer, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ExternalTransfer_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::MsgExternalTransferResponse>* Msg::Stub::AsyncExternalTransferRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::MsgExternalTransfer& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncExternalTransferRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Msg::Stub::LiquidatePosition(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::MsgLiquidatePosition& request, ::injective::exchange::v1beta1::MsgLiquidatePositionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::exchange::v1beta1::MsgLiquidatePosition, ::injective::exchange::v1beta1::MsgLiquidatePositionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_LiquidatePosition_, context, request, response);
}

void Msg::Stub::async::LiquidatePosition(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::MsgLiquidatePosition* request, ::injective::exchange::v1beta1::MsgLiquidatePositionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::exchange::v1beta1::MsgLiquidatePosition, ::injective::exchange::v1beta1::MsgLiquidatePositionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_LiquidatePosition_, context, request, response, std::move(f));
}

void Msg::Stub::async::LiquidatePosition(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::MsgLiquidatePosition* request, ::injective::exchange::v1beta1::MsgLiquidatePositionResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_LiquidatePosition_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::MsgLiquidatePositionResponse>* Msg::Stub::PrepareAsyncLiquidatePositionRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::MsgLiquidatePosition& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::exchange::v1beta1::MsgLiquidatePositionResponse, ::injective::exchange::v1beta1::MsgLiquidatePosition, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_LiquidatePosition_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::MsgLiquidatePositionResponse>* Msg::Stub::AsyncLiquidatePositionRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::MsgLiquidatePosition& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncLiquidatePositionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Msg::Stub::IncreasePositionMargin(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::MsgIncreasePositionMargin& request, ::injective::exchange::v1beta1::MsgIncreasePositionMarginResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::exchange::v1beta1::MsgIncreasePositionMargin, ::injective::exchange::v1beta1::MsgIncreasePositionMarginResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_IncreasePositionMargin_, context, request, response);
}

void Msg::Stub::async::IncreasePositionMargin(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::MsgIncreasePositionMargin* request, ::injective::exchange::v1beta1::MsgIncreasePositionMarginResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::exchange::v1beta1::MsgIncreasePositionMargin, ::injective::exchange::v1beta1::MsgIncreasePositionMarginResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_IncreasePositionMargin_, context, request, response, std::move(f));
}

void Msg::Stub::async::IncreasePositionMargin(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::MsgIncreasePositionMargin* request, ::injective::exchange::v1beta1::MsgIncreasePositionMarginResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_IncreasePositionMargin_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::MsgIncreasePositionMarginResponse>* Msg::Stub::PrepareAsyncIncreasePositionMarginRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::MsgIncreasePositionMargin& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::exchange::v1beta1::MsgIncreasePositionMarginResponse, ::injective::exchange::v1beta1::MsgIncreasePositionMargin, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_IncreasePositionMargin_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::MsgIncreasePositionMarginResponse>* Msg::Stub::AsyncIncreasePositionMarginRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::MsgIncreasePositionMargin& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncIncreasePositionMarginRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Msg::Stub::RewardsOptOut(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::MsgRewardsOptOut& request, ::injective::exchange::v1beta1::MsgRewardsOptOutResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::exchange::v1beta1::MsgRewardsOptOut, ::injective::exchange::v1beta1::MsgRewardsOptOutResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RewardsOptOut_, context, request, response);
}

void Msg::Stub::async::RewardsOptOut(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::MsgRewardsOptOut* request, ::injective::exchange::v1beta1::MsgRewardsOptOutResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::exchange::v1beta1::MsgRewardsOptOut, ::injective::exchange::v1beta1::MsgRewardsOptOutResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RewardsOptOut_, context, request, response, std::move(f));
}

void Msg::Stub::async::RewardsOptOut(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::MsgRewardsOptOut* request, ::injective::exchange::v1beta1::MsgRewardsOptOutResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RewardsOptOut_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::MsgRewardsOptOutResponse>* Msg::Stub::PrepareAsyncRewardsOptOutRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::MsgRewardsOptOut& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::exchange::v1beta1::MsgRewardsOptOutResponse, ::injective::exchange::v1beta1::MsgRewardsOptOut, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RewardsOptOut_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::MsgRewardsOptOutResponse>* Msg::Stub::AsyncRewardsOptOutRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::MsgRewardsOptOut& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRewardsOptOutRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Msg::Stub::AdminUpdateBinaryOptionsMarket(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::MsgAdminUpdateBinaryOptionsMarket& request, ::injective::exchange::v1beta1::MsgAdminUpdateBinaryOptionsMarketResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::exchange::v1beta1::MsgAdminUpdateBinaryOptionsMarket, ::injective::exchange::v1beta1::MsgAdminUpdateBinaryOptionsMarketResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AdminUpdateBinaryOptionsMarket_, context, request, response);
}

void Msg::Stub::async::AdminUpdateBinaryOptionsMarket(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::MsgAdminUpdateBinaryOptionsMarket* request, ::injective::exchange::v1beta1::MsgAdminUpdateBinaryOptionsMarketResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::exchange::v1beta1::MsgAdminUpdateBinaryOptionsMarket, ::injective::exchange::v1beta1::MsgAdminUpdateBinaryOptionsMarketResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AdminUpdateBinaryOptionsMarket_, context, request, response, std::move(f));
}

void Msg::Stub::async::AdminUpdateBinaryOptionsMarket(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::MsgAdminUpdateBinaryOptionsMarket* request, ::injective::exchange::v1beta1::MsgAdminUpdateBinaryOptionsMarketResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AdminUpdateBinaryOptionsMarket_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::MsgAdminUpdateBinaryOptionsMarketResponse>* Msg::Stub::PrepareAsyncAdminUpdateBinaryOptionsMarketRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::MsgAdminUpdateBinaryOptionsMarket& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::exchange::v1beta1::MsgAdminUpdateBinaryOptionsMarketResponse, ::injective::exchange::v1beta1::MsgAdminUpdateBinaryOptionsMarket, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AdminUpdateBinaryOptionsMarket_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::MsgAdminUpdateBinaryOptionsMarketResponse>* Msg::Stub::AsyncAdminUpdateBinaryOptionsMarketRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::MsgAdminUpdateBinaryOptionsMarket& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAdminUpdateBinaryOptionsMarketRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Msg::Stub::ReclaimLockedFunds(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::MsgReclaimLockedFunds& request, ::injective::exchange::v1beta1::MsgReclaimLockedFundsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::exchange::v1beta1::MsgReclaimLockedFunds, ::injective::exchange::v1beta1::MsgReclaimLockedFundsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ReclaimLockedFunds_, context, request, response);
}

void Msg::Stub::async::ReclaimLockedFunds(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::MsgReclaimLockedFunds* request, ::injective::exchange::v1beta1::MsgReclaimLockedFundsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::exchange::v1beta1::MsgReclaimLockedFunds, ::injective::exchange::v1beta1::MsgReclaimLockedFundsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReclaimLockedFunds_, context, request, response, std::move(f));
}

void Msg::Stub::async::ReclaimLockedFunds(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::MsgReclaimLockedFunds* request, ::injective::exchange::v1beta1::MsgReclaimLockedFundsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReclaimLockedFunds_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::MsgReclaimLockedFundsResponse>* Msg::Stub::PrepareAsyncReclaimLockedFundsRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::MsgReclaimLockedFunds& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::exchange::v1beta1::MsgReclaimLockedFundsResponse, ::injective::exchange::v1beta1::MsgReclaimLockedFunds, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ReclaimLockedFunds_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::MsgReclaimLockedFundsResponse>* Msg::Stub::AsyncReclaimLockedFundsRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::MsgReclaimLockedFunds& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncReclaimLockedFundsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Msg::Stub::UpdateParams(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::MsgUpdateParams& request, ::injective::exchange::v1beta1::MsgUpdateParamsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::exchange::v1beta1::MsgUpdateParams, ::injective::exchange::v1beta1::MsgUpdateParamsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateParams_, context, request, response);
}

void Msg::Stub::async::UpdateParams(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::MsgUpdateParams* request, ::injective::exchange::v1beta1::MsgUpdateParamsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::exchange::v1beta1::MsgUpdateParams, ::injective::exchange::v1beta1::MsgUpdateParamsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateParams_, context, request, response, std::move(f));
}

void Msg::Stub::async::UpdateParams(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::MsgUpdateParams* request, ::injective::exchange::v1beta1::MsgUpdateParamsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateParams_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::MsgUpdateParamsResponse>* Msg::Stub::PrepareAsyncUpdateParamsRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::MsgUpdateParams& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::exchange::v1beta1::MsgUpdateParamsResponse, ::injective::exchange::v1beta1::MsgUpdateParams, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateParams_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::exchange::v1beta1::MsgUpdateParamsResponse>* Msg::Stub::AsyncUpdateParamsRaw(::grpc::ClientContext* context, const ::injective::exchange::v1beta1::MsgUpdateParams& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateParamsRaw(context, request, cq);
  result->StartCall();
  return result;
}

Msg::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Msg_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Msg::Service, ::injective::exchange::v1beta1::MsgDeposit, ::injective::exchange::v1beta1::MsgDepositResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Msg::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::exchange::v1beta1::MsgDeposit* req,
             ::injective::exchange::v1beta1::MsgDepositResponse* resp) {
               return service->Deposit(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Msg_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Msg::Service, ::injective::exchange::v1beta1::MsgWithdraw, ::injective::exchange::v1beta1::MsgWithdrawResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Msg::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::exchange::v1beta1::MsgWithdraw* req,
             ::injective::exchange::v1beta1::MsgWithdrawResponse* resp) {
               return service->Withdraw(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Msg_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Msg::Service, ::injective::exchange::v1beta1::MsgInstantSpotMarketLaunch, ::injective::exchange::v1beta1::MsgInstantSpotMarketLaunchResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Msg::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::exchange::v1beta1::MsgInstantSpotMarketLaunch* req,
             ::injective::exchange::v1beta1::MsgInstantSpotMarketLaunchResponse* resp) {
               return service->InstantSpotMarketLaunch(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Msg_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Msg::Service, ::injective::exchange::v1beta1::MsgInstantPerpetualMarketLaunch, ::injective::exchange::v1beta1::MsgInstantPerpetualMarketLaunchResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Msg::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::exchange::v1beta1::MsgInstantPerpetualMarketLaunch* req,
             ::injective::exchange::v1beta1::MsgInstantPerpetualMarketLaunchResponse* resp) {
               return service->InstantPerpetualMarketLaunch(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Msg_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Msg::Service, ::injective::exchange::v1beta1::MsgInstantExpiryFuturesMarketLaunch, ::injective::exchange::v1beta1::MsgInstantExpiryFuturesMarketLaunchResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Msg::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::exchange::v1beta1::MsgInstantExpiryFuturesMarketLaunch* req,
             ::injective::exchange::v1beta1::MsgInstantExpiryFuturesMarketLaunchResponse* resp) {
               return service->InstantExpiryFuturesMarketLaunch(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Msg_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Msg::Service, ::injective::exchange::v1beta1::MsgCreateSpotLimitOrder, ::injective::exchange::v1beta1::MsgCreateSpotLimitOrderResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Msg::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::exchange::v1beta1::MsgCreateSpotLimitOrder* req,
             ::injective::exchange::v1beta1::MsgCreateSpotLimitOrderResponse* resp) {
               return service->CreateSpotLimitOrder(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Msg_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Msg::Service, ::injective::exchange::v1beta1::MsgBatchCreateSpotLimitOrders, ::injective::exchange::v1beta1::MsgBatchCreateSpotLimitOrdersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Msg::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::exchange::v1beta1::MsgBatchCreateSpotLimitOrders* req,
             ::injective::exchange::v1beta1::MsgBatchCreateSpotLimitOrdersResponse* resp) {
               return service->BatchCreateSpotLimitOrders(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Msg_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Msg::Service, ::injective::exchange::v1beta1::MsgCreateSpotMarketOrder, ::injective::exchange::v1beta1::MsgCreateSpotMarketOrderResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Msg::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::exchange::v1beta1::MsgCreateSpotMarketOrder* req,
             ::injective::exchange::v1beta1::MsgCreateSpotMarketOrderResponse* resp) {
               return service->CreateSpotMarketOrder(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Msg_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Msg::Service, ::injective::exchange::v1beta1::MsgCancelSpotOrder, ::injective::exchange::v1beta1::MsgCancelSpotOrderResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Msg::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::exchange::v1beta1::MsgCancelSpotOrder* req,
             ::injective::exchange::v1beta1::MsgCancelSpotOrderResponse* resp) {
               return service->CancelSpotOrder(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Msg_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Msg::Service, ::injective::exchange::v1beta1::MsgBatchCancelSpotOrders, ::injective::exchange::v1beta1::MsgBatchCancelSpotOrdersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Msg::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::exchange::v1beta1::MsgBatchCancelSpotOrders* req,
             ::injective::exchange::v1beta1::MsgBatchCancelSpotOrdersResponse* resp) {
               return service->BatchCancelSpotOrders(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Msg_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Msg::Service, ::injective::exchange::v1beta1::MsgBatchUpdateOrders, ::injective::exchange::v1beta1::MsgBatchUpdateOrdersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Msg::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::exchange::v1beta1::MsgBatchUpdateOrders* req,
             ::injective::exchange::v1beta1::MsgBatchUpdateOrdersResponse* resp) {
               return service->BatchUpdateOrders(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Msg_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Msg::Service, ::injective::exchange::v1beta1::MsgPrivilegedExecuteContract, ::injective::exchange::v1beta1::MsgPrivilegedExecuteContractResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Msg::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::exchange::v1beta1::MsgPrivilegedExecuteContract* req,
             ::injective::exchange::v1beta1::MsgPrivilegedExecuteContractResponse* resp) {
               return service->PrivilegedExecuteContract(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Msg_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Msg::Service, ::injective::exchange::v1beta1::MsgCreateDerivativeLimitOrder, ::injective::exchange::v1beta1::MsgCreateDerivativeLimitOrderResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Msg::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::exchange::v1beta1::MsgCreateDerivativeLimitOrder* req,
             ::injective::exchange::v1beta1::MsgCreateDerivativeLimitOrderResponse* resp) {
               return service->CreateDerivativeLimitOrder(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Msg_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Msg::Service, ::injective::exchange::v1beta1::MsgBatchCreateDerivativeLimitOrders, ::injective::exchange::v1beta1::MsgBatchCreateDerivativeLimitOrdersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Msg::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::exchange::v1beta1::MsgBatchCreateDerivativeLimitOrders* req,
             ::injective::exchange::v1beta1::MsgBatchCreateDerivativeLimitOrdersResponse* resp) {
               return service->BatchCreateDerivativeLimitOrders(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Msg_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Msg::Service, ::injective::exchange::v1beta1::MsgCreateDerivativeMarketOrder, ::injective::exchange::v1beta1::MsgCreateDerivativeMarketOrderResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Msg::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::exchange::v1beta1::MsgCreateDerivativeMarketOrder* req,
             ::injective::exchange::v1beta1::MsgCreateDerivativeMarketOrderResponse* resp) {
               return service->CreateDerivativeMarketOrder(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Msg_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Msg::Service, ::injective::exchange::v1beta1::MsgCancelDerivativeOrder, ::injective::exchange::v1beta1::MsgCancelDerivativeOrderResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Msg::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::exchange::v1beta1::MsgCancelDerivativeOrder* req,
             ::injective::exchange::v1beta1::MsgCancelDerivativeOrderResponse* resp) {
               return service->CancelDerivativeOrder(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Msg_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Msg::Service, ::injective::exchange::v1beta1::MsgBatchCancelDerivativeOrders, ::injective::exchange::v1beta1::MsgBatchCancelDerivativeOrdersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Msg::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::exchange::v1beta1::MsgBatchCancelDerivativeOrders* req,
             ::injective::exchange::v1beta1::MsgBatchCancelDerivativeOrdersResponse* resp) {
               return service->BatchCancelDerivativeOrders(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Msg_method_names[17],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Msg::Service, ::injective::exchange::v1beta1::MsgInstantBinaryOptionsMarketLaunch, ::injective::exchange::v1beta1::MsgInstantBinaryOptionsMarketLaunchResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Msg::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::exchange::v1beta1::MsgInstantBinaryOptionsMarketLaunch* req,
             ::injective::exchange::v1beta1::MsgInstantBinaryOptionsMarketLaunchResponse* resp) {
               return service->InstantBinaryOptionsMarketLaunch(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Msg_method_names[18],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Msg::Service, ::injective::exchange::v1beta1::MsgCreateBinaryOptionsLimitOrder, ::injective::exchange::v1beta1::MsgCreateBinaryOptionsLimitOrderResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Msg::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::exchange::v1beta1::MsgCreateBinaryOptionsLimitOrder* req,
             ::injective::exchange::v1beta1::MsgCreateBinaryOptionsLimitOrderResponse* resp) {
               return service->CreateBinaryOptionsLimitOrder(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Msg_method_names[19],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Msg::Service, ::injective::exchange::v1beta1::MsgCreateBinaryOptionsMarketOrder, ::injective::exchange::v1beta1::MsgCreateBinaryOptionsMarketOrderResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Msg::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::exchange::v1beta1::MsgCreateBinaryOptionsMarketOrder* req,
             ::injective::exchange::v1beta1::MsgCreateBinaryOptionsMarketOrderResponse* resp) {
               return service->CreateBinaryOptionsMarketOrder(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Msg_method_names[20],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Msg::Service, ::injective::exchange::v1beta1::MsgCancelBinaryOptionsOrder, ::injective::exchange::v1beta1::MsgCancelBinaryOptionsOrderResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Msg::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::exchange::v1beta1::MsgCancelBinaryOptionsOrder* req,
             ::injective::exchange::v1beta1::MsgCancelBinaryOptionsOrderResponse* resp) {
               return service->CancelBinaryOptionsOrder(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Msg_method_names[21],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Msg::Service, ::injective::exchange::v1beta1::MsgBatchCancelBinaryOptionsOrders, ::injective::exchange::v1beta1::MsgBatchCancelBinaryOptionsOrdersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Msg::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::exchange::v1beta1::MsgBatchCancelBinaryOptionsOrders* req,
             ::injective::exchange::v1beta1::MsgBatchCancelBinaryOptionsOrdersResponse* resp) {
               return service->BatchCancelBinaryOptionsOrders(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Msg_method_names[22],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Msg::Service, ::injective::exchange::v1beta1::MsgSubaccountTransfer, ::injective::exchange::v1beta1::MsgSubaccountTransferResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Msg::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::exchange::v1beta1::MsgSubaccountTransfer* req,
             ::injective::exchange::v1beta1::MsgSubaccountTransferResponse* resp) {
               return service->SubaccountTransfer(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Msg_method_names[23],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Msg::Service, ::injective::exchange::v1beta1::MsgExternalTransfer, ::injective::exchange::v1beta1::MsgExternalTransferResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Msg::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::exchange::v1beta1::MsgExternalTransfer* req,
             ::injective::exchange::v1beta1::MsgExternalTransferResponse* resp) {
               return service->ExternalTransfer(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Msg_method_names[24],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Msg::Service, ::injective::exchange::v1beta1::MsgLiquidatePosition, ::injective::exchange::v1beta1::MsgLiquidatePositionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Msg::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::exchange::v1beta1::MsgLiquidatePosition* req,
             ::injective::exchange::v1beta1::MsgLiquidatePositionResponse* resp) {
               return service->LiquidatePosition(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Msg_method_names[25],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Msg::Service, ::injective::exchange::v1beta1::MsgIncreasePositionMargin, ::injective::exchange::v1beta1::MsgIncreasePositionMarginResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Msg::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::exchange::v1beta1::MsgIncreasePositionMargin* req,
             ::injective::exchange::v1beta1::MsgIncreasePositionMarginResponse* resp) {
               return service->IncreasePositionMargin(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Msg_method_names[26],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Msg::Service, ::injective::exchange::v1beta1::MsgRewardsOptOut, ::injective::exchange::v1beta1::MsgRewardsOptOutResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Msg::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::exchange::v1beta1::MsgRewardsOptOut* req,
             ::injective::exchange::v1beta1::MsgRewardsOptOutResponse* resp) {
               return service->RewardsOptOut(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Msg_method_names[27],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Msg::Service, ::injective::exchange::v1beta1::MsgAdminUpdateBinaryOptionsMarket, ::injective::exchange::v1beta1::MsgAdminUpdateBinaryOptionsMarketResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Msg::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::exchange::v1beta1::MsgAdminUpdateBinaryOptionsMarket* req,
             ::injective::exchange::v1beta1::MsgAdminUpdateBinaryOptionsMarketResponse* resp) {
               return service->AdminUpdateBinaryOptionsMarket(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Msg_method_names[28],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Msg::Service, ::injective::exchange::v1beta1::MsgReclaimLockedFunds, ::injective::exchange::v1beta1::MsgReclaimLockedFundsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Msg::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::exchange::v1beta1::MsgReclaimLockedFunds* req,
             ::injective::exchange::v1beta1::MsgReclaimLockedFundsResponse* resp) {
               return service->ReclaimLockedFunds(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Msg_method_names[29],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Msg::Service, ::injective::exchange::v1beta1::MsgUpdateParams, ::injective::exchange::v1beta1::MsgUpdateParamsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Msg::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::exchange::v1beta1::MsgUpdateParams* req,
             ::injective::exchange::v1beta1::MsgUpdateParamsResponse* resp) {
               return service->UpdateParams(ctx, req, resp);
             }, this)));
}

Msg::Service::~Service() {
}

::grpc::Status Msg::Service::Deposit(::grpc::ServerContext* context, const ::injective::exchange::v1beta1::MsgDeposit* request, ::injective::exchange::v1beta1::MsgDepositResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Msg::Service::Withdraw(::grpc::ServerContext* context, const ::injective::exchange::v1beta1::MsgWithdraw* request, ::injective::exchange::v1beta1::MsgWithdrawResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Msg::Service::InstantSpotMarketLaunch(::grpc::ServerContext* context, const ::injective::exchange::v1beta1::MsgInstantSpotMarketLaunch* request, ::injective::exchange::v1beta1::MsgInstantSpotMarketLaunchResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Msg::Service::InstantPerpetualMarketLaunch(::grpc::ServerContext* context, const ::injective::exchange::v1beta1::MsgInstantPerpetualMarketLaunch* request, ::injective::exchange::v1beta1::MsgInstantPerpetualMarketLaunchResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Msg::Service::InstantExpiryFuturesMarketLaunch(::grpc::ServerContext* context, const ::injective::exchange::v1beta1::MsgInstantExpiryFuturesMarketLaunch* request, ::injective::exchange::v1beta1::MsgInstantExpiryFuturesMarketLaunchResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Msg::Service::CreateSpotLimitOrder(::grpc::ServerContext* context, const ::injective::exchange::v1beta1::MsgCreateSpotLimitOrder* request, ::injective::exchange::v1beta1::MsgCreateSpotLimitOrderResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Msg::Service::BatchCreateSpotLimitOrders(::grpc::ServerContext* context, const ::injective::exchange::v1beta1::MsgBatchCreateSpotLimitOrders* request, ::injective::exchange::v1beta1::MsgBatchCreateSpotLimitOrdersResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Msg::Service::CreateSpotMarketOrder(::grpc::ServerContext* context, const ::injective::exchange::v1beta1::MsgCreateSpotMarketOrder* request, ::injective::exchange::v1beta1::MsgCreateSpotMarketOrderResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Msg::Service::CancelSpotOrder(::grpc::ServerContext* context, const ::injective::exchange::v1beta1::MsgCancelSpotOrder* request, ::injective::exchange::v1beta1::MsgCancelSpotOrderResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Msg::Service::BatchCancelSpotOrders(::grpc::ServerContext* context, const ::injective::exchange::v1beta1::MsgBatchCancelSpotOrders* request, ::injective::exchange::v1beta1::MsgBatchCancelSpotOrdersResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Msg::Service::BatchUpdateOrders(::grpc::ServerContext* context, const ::injective::exchange::v1beta1::MsgBatchUpdateOrders* request, ::injective::exchange::v1beta1::MsgBatchUpdateOrdersResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Msg::Service::PrivilegedExecuteContract(::grpc::ServerContext* context, const ::injective::exchange::v1beta1::MsgPrivilegedExecuteContract* request, ::injective::exchange::v1beta1::MsgPrivilegedExecuteContractResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Msg::Service::CreateDerivativeLimitOrder(::grpc::ServerContext* context, const ::injective::exchange::v1beta1::MsgCreateDerivativeLimitOrder* request, ::injective::exchange::v1beta1::MsgCreateDerivativeLimitOrderResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Msg::Service::BatchCreateDerivativeLimitOrders(::grpc::ServerContext* context, const ::injective::exchange::v1beta1::MsgBatchCreateDerivativeLimitOrders* request, ::injective::exchange::v1beta1::MsgBatchCreateDerivativeLimitOrdersResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Msg::Service::CreateDerivativeMarketOrder(::grpc::ServerContext* context, const ::injective::exchange::v1beta1::MsgCreateDerivativeMarketOrder* request, ::injective::exchange::v1beta1::MsgCreateDerivativeMarketOrderResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Msg::Service::CancelDerivativeOrder(::grpc::ServerContext* context, const ::injective::exchange::v1beta1::MsgCancelDerivativeOrder* request, ::injective::exchange::v1beta1::MsgCancelDerivativeOrderResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Msg::Service::BatchCancelDerivativeOrders(::grpc::ServerContext* context, const ::injective::exchange::v1beta1::MsgBatchCancelDerivativeOrders* request, ::injective::exchange::v1beta1::MsgBatchCancelDerivativeOrdersResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Msg::Service::InstantBinaryOptionsMarketLaunch(::grpc::ServerContext* context, const ::injective::exchange::v1beta1::MsgInstantBinaryOptionsMarketLaunch* request, ::injective::exchange::v1beta1::MsgInstantBinaryOptionsMarketLaunchResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Msg::Service::CreateBinaryOptionsLimitOrder(::grpc::ServerContext* context, const ::injective::exchange::v1beta1::MsgCreateBinaryOptionsLimitOrder* request, ::injective::exchange::v1beta1::MsgCreateBinaryOptionsLimitOrderResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Msg::Service::CreateBinaryOptionsMarketOrder(::grpc::ServerContext* context, const ::injective::exchange::v1beta1::MsgCreateBinaryOptionsMarketOrder* request, ::injective::exchange::v1beta1::MsgCreateBinaryOptionsMarketOrderResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Msg::Service::CancelBinaryOptionsOrder(::grpc::ServerContext* context, const ::injective::exchange::v1beta1::MsgCancelBinaryOptionsOrder* request, ::injective::exchange::v1beta1::MsgCancelBinaryOptionsOrderResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Msg::Service::BatchCancelBinaryOptionsOrders(::grpc::ServerContext* context, const ::injective::exchange::v1beta1::MsgBatchCancelBinaryOptionsOrders* request, ::injective::exchange::v1beta1::MsgBatchCancelBinaryOptionsOrdersResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Msg::Service::SubaccountTransfer(::grpc::ServerContext* context, const ::injective::exchange::v1beta1::MsgSubaccountTransfer* request, ::injective::exchange::v1beta1::MsgSubaccountTransferResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Msg::Service::ExternalTransfer(::grpc::ServerContext* context, const ::injective::exchange::v1beta1::MsgExternalTransfer* request, ::injective::exchange::v1beta1::MsgExternalTransferResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Msg::Service::LiquidatePosition(::grpc::ServerContext* context, const ::injective::exchange::v1beta1::MsgLiquidatePosition* request, ::injective::exchange::v1beta1::MsgLiquidatePositionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Msg::Service::IncreasePositionMargin(::grpc::ServerContext* context, const ::injective::exchange::v1beta1::MsgIncreasePositionMargin* request, ::injective::exchange::v1beta1::MsgIncreasePositionMarginResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Msg::Service::RewardsOptOut(::grpc::ServerContext* context, const ::injective::exchange::v1beta1::MsgRewardsOptOut* request, ::injective::exchange::v1beta1::MsgRewardsOptOutResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Msg::Service::AdminUpdateBinaryOptionsMarket(::grpc::ServerContext* context, const ::injective::exchange::v1beta1::MsgAdminUpdateBinaryOptionsMarket* request, ::injective::exchange::v1beta1::MsgAdminUpdateBinaryOptionsMarketResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Msg::Service::ReclaimLockedFunds(::grpc::ServerContext* context, const ::injective::exchange::v1beta1::MsgReclaimLockedFunds* request, ::injective::exchange::v1beta1::MsgReclaimLockedFundsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Msg::Service::UpdateParams(::grpc::ServerContext* context, const ::injective::exchange::v1beta1::MsgUpdateParams* request, ::injective::exchange::v1beta1::MsgUpdateParamsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace injective
}  // namespace exchange
}  // namespace v1beta1


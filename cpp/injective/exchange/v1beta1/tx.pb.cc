// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: injective/exchange/v1beta1/tx.proto

#include "injective/exchange/v1beta1/tx.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace injective {
namespace exchange {
namespace v1beta1 {
template <typename>
PROTOBUF_CONSTEXPR MsgUpdateParams::MsgUpdateParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.authority_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.params_)*/nullptr} {}
struct MsgUpdateParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgUpdateParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgUpdateParamsDefaultTypeInternal() {}
  union {
    MsgUpdateParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgUpdateParamsDefaultTypeInternal _MsgUpdateParams_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MsgUpdateParamsResponse::MsgUpdateParamsResponse(
    ::_pbi::ConstantInitialized) {}
struct MsgUpdateParamsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgUpdateParamsResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgUpdateParamsResponseDefaultTypeInternal() {}
  union {
    MsgUpdateParamsResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgUpdateParamsResponseDefaultTypeInternal _MsgUpdateParamsResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MsgDeposit::MsgDeposit(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.sender_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.subaccount_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.amount_)*/nullptr} {}
struct MsgDepositDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgDepositDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgDepositDefaultTypeInternal() {}
  union {
    MsgDeposit _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgDepositDefaultTypeInternal _MsgDeposit_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MsgDepositResponse::MsgDepositResponse(
    ::_pbi::ConstantInitialized) {}
struct MsgDepositResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgDepositResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgDepositResponseDefaultTypeInternal() {}
  union {
    MsgDepositResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgDepositResponseDefaultTypeInternal _MsgDepositResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MsgWithdraw::MsgWithdraw(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.sender_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.subaccount_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.amount_)*/nullptr} {}
struct MsgWithdrawDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgWithdrawDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgWithdrawDefaultTypeInternal() {}
  union {
    MsgWithdraw _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgWithdrawDefaultTypeInternal _MsgWithdraw_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MsgWithdrawResponse::MsgWithdrawResponse(
    ::_pbi::ConstantInitialized) {}
struct MsgWithdrawResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgWithdrawResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgWithdrawResponseDefaultTypeInternal() {}
  union {
    MsgWithdrawResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgWithdrawResponseDefaultTypeInternal _MsgWithdrawResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MsgCreateSpotLimitOrder::MsgCreateSpotLimitOrder(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.sender_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.order_)*/nullptr} {}
struct MsgCreateSpotLimitOrderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgCreateSpotLimitOrderDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgCreateSpotLimitOrderDefaultTypeInternal() {}
  union {
    MsgCreateSpotLimitOrder _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgCreateSpotLimitOrderDefaultTypeInternal _MsgCreateSpotLimitOrder_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MsgCreateSpotLimitOrderResponse::MsgCreateSpotLimitOrderResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.order_hash_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MsgCreateSpotLimitOrderResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgCreateSpotLimitOrderResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgCreateSpotLimitOrderResponseDefaultTypeInternal() {}
  union {
    MsgCreateSpotLimitOrderResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgCreateSpotLimitOrderResponseDefaultTypeInternal _MsgCreateSpotLimitOrderResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MsgBatchCreateSpotLimitOrders::MsgBatchCreateSpotLimitOrders(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.orders_)*/{}
  , /*decltype(_impl_.sender_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MsgBatchCreateSpotLimitOrdersDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgBatchCreateSpotLimitOrdersDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgBatchCreateSpotLimitOrdersDefaultTypeInternal() {}
  union {
    MsgBatchCreateSpotLimitOrders _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgBatchCreateSpotLimitOrdersDefaultTypeInternal _MsgBatchCreateSpotLimitOrders_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MsgBatchCreateSpotLimitOrdersResponse::MsgBatchCreateSpotLimitOrdersResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.order_hashes_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MsgBatchCreateSpotLimitOrdersResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgBatchCreateSpotLimitOrdersResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgBatchCreateSpotLimitOrdersResponseDefaultTypeInternal() {}
  union {
    MsgBatchCreateSpotLimitOrdersResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgBatchCreateSpotLimitOrdersResponseDefaultTypeInternal _MsgBatchCreateSpotLimitOrdersResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MsgInstantSpotMarketLaunch::MsgInstantSpotMarketLaunch(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sender_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.ticker_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.base_denom_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.quote_denom_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.min_price_tick_size_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.min_quantity_tick_size_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MsgInstantSpotMarketLaunchDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgInstantSpotMarketLaunchDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgInstantSpotMarketLaunchDefaultTypeInternal() {}
  union {
    MsgInstantSpotMarketLaunch _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgInstantSpotMarketLaunchDefaultTypeInternal _MsgInstantSpotMarketLaunch_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MsgInstantSpotMarketLaunchResponse::MsgInstantSpotMarketLaunchResponse(
    ::_pbi::ConstantInitialized) {}
struct MsgInstantSpotMarketLaunchResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgInstantSpotMarketLaunchResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgInstantSpotMarketLaunchResponseDefaultTypeInternal() {}
  union {
    MsgInstantSpotMarketLaunchResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgInstantSpotMarketLaunchResponseDefaultTypeInternal _MsgInstantSpotMarketLaunchResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MsgInstantPerpetualMarketLaunch::MsgInstantPerpetualMarketLaunch(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sender_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.ticker_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.quote_denom_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.oracle_base_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.oracle_quote_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.maker_fee_rate_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.taker_fee_rate_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.initial_margin_ratio_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.maintenance_margin_ratio_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.min_price_tick_size_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.min_quantity_tick_size_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.oracle_scale_factor_)*/ 0u

  , /*decltype(_impl_.oracle_type_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MsgInstantPerpetualMarketLaunchDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgInstantPerpetualMarketLaunchDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgInstantPerpetualMarketLaunchDefaultTypeInternal() {}
  union {
    MsgInstantPerpetualMarketLaunch _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgInstantPerpetualMarketLaunchDefaultTypeInternal _MsgInstantPerpetualMarketLaunch_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MsgInstantPerpetualMarketLaunchResponse::MsgInstantPerpetualMarketLaunchResponse(
    ::_pbi::ConstantInitialized) {}
struct MsgInstantPerpetualMarketLaunchResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgInstantPerpetualMarketLaunchResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgInstantPerpetualMarketLaunchResponseDefaultTypeInternal() {}
  union {
    MsgInstantPerpetualMarketLaunchResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgInstantPerpetualMarketLaunchResponseDefaultTypeInternal _MsgInstantPerpetualMarketLaunchResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MsgInstantBinaryOptionsMarketLaunch::MsgInstantBinaryOptionsMarketLaunch(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sender_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.ticker_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.oracle_symbol_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.oracle_provider_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.maker_fee_rate_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.taker_fee_rate_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.admin_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.quote_denom_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.min_price_tick_size_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.min_quantity_tick_size_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.oracle_type_)*/ 0

  , /*decltype(_impl_.oracle_scale_factor_)*/ 0u

  , /*decltype(_impl_.expiration_timestamp_)*/ ::int64_t{0}

  , /*decltype(_impl_.settlement_timestamp_)*/ ::int64_t{0}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MsgInstantBinaryOptionsMarketLaunchDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgInstantBinaryOptionsMarketLaunchDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgInstantBinaryOptionsMarketLaunchDefaultTypeInternal() {}
  union {
    MsgInstantBinaryOptionsMarketLaunch _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgInstantBinaryOptionsMarketLaunchDefaultTypeInternal _MsgInstantBinaryOptionsMarketLaunch_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MsgInstantBinaryOptionsMarketLaunchResponse::MsgInstantBinaryOptionsMarketLaunchResponse(
    ::_pbi::ConstantInitialized) {}
struct MsgInstantBinaryOptionsMarketLaunchResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgInstantBinaryOptionsMarketLaunchResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgInstantBinaryOptionsMarketLaunchResponseDefaultTypeInternal() {}
  union {
    MsgInstantBinaryOptionsMarketLaunchResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgInstantBinaryOptionsMarketLaunchResponseDefaultTypeInternal _MsgInstantBinaryOptionsMarketLaunchResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MsgInstantExpiryFuturesMarketLaunch::MsgInstantExpiryFuturesMarketLaunch(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sender_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.ticker_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.quote_denom_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.oracle_base_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.oracle_quote_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.maker_fee_rate_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.taker_fee_rate_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.initial_margin_ratio_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.maintenance_margin_ratio_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.min_price_tick_size_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.min_quantity_tick_size_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.oracle_type_)*/ 0

  , /*decltype(_impl_.oracle_scale_factor_)*/ 0u

  , /*decltype(_impl_.expiry_)*/ ::int64_t{0}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MsgInstantExpiryFuturesMarketLaunchDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgInstantExpiryFuturesMarketLaunchDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgInstantExpiryFuturesMarketLaunchDefaultTypeInternal() {}
  union {
    MsgInstantExpiryFuturesMarketLaunch _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgInstantExpiryFuturesMarketLaunchDefaultTypeInternal _MsgInstantExpiryFuturesMarketLaunch_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MsgInstantExpiryFuturesMarketLaunchResponse::MsgInstantExpiryFuturesMarketLaunchResponse(
    ::_pbi::ConstantInitialized) {}
struct MsgInstantExpiryFuturesMarketLaunchResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgInstantExpiryFuturesMarketLaunchResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgInstantExpiryFuturesMarketLaunchResponseDefaultTypeInternal() {}
  union {
    MsgInstantExpiryFuturesMarketLaunchResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgInstantExpiryFuturesMarketLaunchResponseDefaultTypeInternal _MsgInstantExpiryFuturesMarketLaunchResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MsgCreateSpotMarketOrder::MsgCreateSpotMarketOrder(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.sender_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.order_)*/nullptr} {}
struct MsgCreateSpotMarketOrderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgCreateSpotMarketOrderDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgCreateSpotMarketOrderDefaultTypeInternal() {}
  union {
    MsgCreateSpotMarketOrder _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgCreateSpotMarketOrderDefaultTypeInternal _MsgCreateSpotMarketOrder_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MsgCreateSpotMarketOrderResponse::MsgCreateSpotMarketOrderResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.order_hash_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.results_)*/nullptr} {}
struct MsgCreateSpotMarketOrderResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgCreateSpotMarketOrderResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgCreateSpotMarketOrderResponseDefaultTypeInternal() {}
  union {
    MsgCreateSpotMarketOrderResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgCreateSpotMarketOrderResponseDefaultTypeInternal _MsgCreateSpotMarketOrderResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR SpotMarketOrderResults::SpotMarketOrderResults(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.quantity_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.price_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.fee_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SpotMarketOrderResultsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SpotMarketOrderResultsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SpotMarketOrderResultsDefaultTypeInternal() {}
  union {
    SpotMarketOrderResults _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SpotMarketOrderResultsDefaultTypeInternal _SpotMarketOrderResults_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MsgCreateDerivativeLimitOrder::MsgCreateDerivativeLimitOrder(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.sender_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.order_)*/nullptr} {}
struct MsgCreateDerivativeLimitOrderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgCreateDerivativeLimitOrderDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgCreateDerivativeLimitOrderDefaultTypeInternal() {}
  union {
    MsgCreateDerivativeLimitOrder _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgCreateDerivativeLimitOrderDefaultTypeInternal _MsgCreateDerivativeLimitOrder_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MsgCreateDerivativeLimitOrderResponse::MsgCreateDerivativeLimitOrderResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.order_hash_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MsgCreateDerivativeLimitOrderResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgCreateDerivativeLimitOrderResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgCreateDerivativeLimitOrderResponseDefaultTypeInternal() {}
  union {
    MsgCreateDerivativeLimitOrderResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgCreateDerivativeLimitOrderResponseDefaultTypeInternal _MsgCreateDerivativeLimitOrderResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MsgCreateBinaryOptionsLimitOrder::MsgCreateBinaryOptionsLimitOrder(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.sender_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.order_)*/nullptr} {}
struct MsgCreateBinaryOptionsLimitOrderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgCreateBinaryOptionsLimitOrderDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgCreateBinaryOptionsLimitOrderDefaultTypeInternal() {}
  union {
    MsgCreateBinaryOptionsLimitOrder _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgCreateBinaryOptionsLimitOrderDefaultTypeInternal _MsgCreateBinaryOptionsLimitOrder_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MsgCreateBinaryOptionsLimitOrderResponse::MsgCreateBinaryOptionsLimitOrderResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.order_hash_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MsgCreateBinaryOptionsLimitOrderResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgCreateBinaryOptionsLimitOrderResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgCreateBinaryOptionsLimitOrderResponseDefaultTypeInternal() {}
  union {
    MsgCreateBinaryOptionsLimitOrderResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgCreateBinaryOptionsLimitOrderResponseDefaultTypeInternal _MsgCreateBinaryOptionsLimitOrderResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MsgBatchCreateDerivativeLimitOrders::MsgBatchCreateDerivativeLimitOrders(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.orders_)*/{}
  , /*decltype(_impl_.sender_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MsgBatchCreateDerivativeLimitOrdersDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgBatchCreateDerivativeLimitOrdersDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgBatchCreateDerivativeLimitOrdersDefaultTypeInternal() {}
  union {
    MsgBatchCreateDerivativeLimitOrders _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgBatchCreateDerivativeLimitOrdersDefaultTypeInternal _MsgBatchCreateDerivativeLimitOrders_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MsgBatchCreateDerivativeLimitOrdersResponse::MsgBatchCreateDerivativeLimitOrdersResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.order_hashes_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MsgBatchCreateDerivativeLimitOrdersResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgBatchCreateDerivativeLimitOrdersResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgBatchCreateDerivativeLimitOrdersResponseDefaultTypeInternal() {}
  union {
    MsgBatchCreateDerivativeLimitOrdersResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgBatchCreateDerivativeLimitOrdersResponseDefaultTypeInternal _MsgBatchCreateDerivativeLimitOrdersResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MsgCancelSpotOrder::MsgCancelSpotOrder(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sender_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.market_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.subaccount_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.order_hash_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MsgCancelSpotOrderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgCancelSpotOrderDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgCancelSpotOrderDefaultTypeInternal() {}
  union {
    MsgCancelSpotOrder _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgCancelSpotOrderDefaultTypeInternal _MsgCancelSpotOrder_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MsgCancelSpotOrderResponse::MsgCancelSpotOrderResponse(
    ::_pbi::ConstantInitialized) {}
struct MsgCancelSpotOrderResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgCancelSpotOrderResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgCancelSpotOrderResponseDefaultTypeInternal() {}
  union {
    MsgCancelSpotOrderResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgCancelSpotOrderResponseDefaultTypeInternal _MsgCancelSpotOrderResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MsgBatchCancelSpotOrders::MsgBatchCancelSpotOrders(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{}
  , /*decltype(_impl_.sender_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MsgBatchCancelSpotOrdersDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgBatchCancelSpotOrdersDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgBatchCancelSpotOrdersDefaultTypeInternal() {}
  union {
    MsgBatchCancelSpotOrders _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgBatchCancelSpotOrdersDefaultTypeInternal _MsgBatchCancelSpotOrders_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MsgBatchCancelSpotOrdersResponse::MsgBatchCancelSpotOrdersResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.success_)*/ {}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MsgBatchCancelSpotOrdersResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgBatchCancelSpotOrdersResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgBatchCancelSpotOrdersResponseDefaultTypeInternal() {}
  union {
    MsgBatchCancelSpotOrdersResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgBatchCancelSpotOrdersResponseDefaultTypeInternal _MsgBatchCancelSpotOrdersResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MsgBatchCancelBinaryOptionsOrders::MsgBatchCancelBinaryOptionsOrders(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{}
  , /*decltype(_impl_.sender_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MsgBatchCancelBinaryOptionsOrdersDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgBatchCancelBinaryOptionsOrdersDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgBatchCancelBinaryOptionsOrdersDefaultTypeInternal() {}
  union {
    MsgBatchCancelBinaryOptionsOrders _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgBatchCancelBinaryOptionsOrdersDefaultTypeInternal _MsgBatchCancelBinaryOptionsOrders_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MsgBatchCancelBinaryOptionsOrdersResponse::MsgBatchCancelBinaryOptionsOrdersResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.success_)*/ {}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MsgBatchCancelBinaryOptionsOrdersResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgBatchCancelBinaryOptionsOrdersResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgBatchCancelBinaryOptionsOrdersResponseDefaultTypeInternal() {}
  union {
    MsgBatchCancelBinaryOptionsOrdersResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgBatchCancelBinaryOptionsOrdersResponseDefaultTypeInternal _MsgBatchCancelBinaryOptionsOrdersResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MsgBatchUpdateOrders::MsgBatchUpdateOrders(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.spot_market_ids_to_cancel_all_)*/{}
  , /*decltype(_impl_.derivative_market_ids_to_cancel_all_)*/{}
  , /*decltype(_impl_.spot_orders_to_cancel_)*/{}
  , /*decltype(_impl_.derivative_orders_to_cancel_)*/{}
  , /*decltype(_impl_.spot_orders_to_create_)*/{}
  , /*decltype(_impl_.derivative_orders_to_create_)*/{}
  , /*decltype(_impl_.binary_options_orders_to_cancel_)*/{}
  , /*decltype(_impl_.binary_options_market_ids_to_cancel_all_)*/{}
  , /*decltype(_impl_.binary_options_orders_to_create_)*/{}
  , /*decltype(_impl_.sender_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.subaccount_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MsgBatchUpdateOrdersDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgBatchUpdateOrdersDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgBatchUpdateOrdersDefaultTypeInternal() {}
  union {
    MsgBatchUpdateOrders _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgBatchUpdateOrdersDefaultTypeInternal _MsgBatchUpdateOrders_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MsgBatchUpdateOrdersResponse::MsgBatchUpdateOrdersResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.spot_cancel_success_)*/ {}

  , /*decltype(_impl_.derivative_cancel_success_)*/ {}

  , /*decltype(_impl_.spot_order_hashes_)*/{}
  , /*decltype(_impl_.derivative_order_hashes_)*/{}
  , /*decltype(_impl_.binary_options_cancel_success_)*/ {}

  , /*decltype(_impl_.binary_options_order_hashes_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MsgBatchUpdateOrdersResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgBatchUpdateOrdersResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgBatchUpdateOrdersResponseDefaultTypeInternal() {}
  union {
    MsgBatchUpdateOrdersResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgBatchUpdateOrdersResponseDefaultTypeInternal _MsgBatchUpdateOrdersResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MsgCreateDerivativeMarketOrder::MsgCreateDerivativeMarketOrder(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.sender_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.order_)*/nullptr} {}
struct MsgCreateDerivativeMarketOrderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgCreateDerivativeMarketOrderDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgCreateDerivativeMarketOrderDefaultTypeInternal() {}
  union {
    MsgCreateDerivativeMarketOrder _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgCreateDerivativeMarketOrderDefaultTypeInternal _MsgCreateDerivativeMarketOrder_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MsgCreateDerivativeMarketOrderResponse::MsgCreateDerivativeMarketOrderResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.order_hash_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.results_)*/nullptr} {}
struct MsgCreateDerivativeMarketOrderResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgCreateDerivativeMarketOrderResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgCreateDerivativeMarketOrderResponseDefaultTypeInternal() {}
  union {
    MsgCreateDerivativeMarketOrderResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgCreateDerivativeMarketOrderResponseDefaultTypeInternal _MsgCreateDerivativeMarketOrderResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR DerivativeMarketOrderResults::DerivativeMarketOrderResults(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.quantity_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.price_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.fee_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.payout_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.position_delta_)*/nullptr} {}
struct DerivativeMarketOrderResultsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DerivativeMarketOrderResultsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DerivativeMarketOrderResultsDefaultTypeInternal() {}
  union {
    DerivativeMarketOrderResults _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DerivativeMarketOrderResultsDefaultTypeInternal _DerivativeMarketOrderResults_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MsgCreateBinaryOptionsMarketOrder::MsgCreateBinaryOptionsMarketOrder(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.sender_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.order_)*/nullptr} {}
struct MsgCreateBinaryOptionsMarketOrderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgCreateBinaryOptionsMarketOrderDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgCreateBinaryOptionsMarketOrderDefaultTypeInternal() {}
  union {
    MsgCreateBinaryOptionsMarketOrder _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgCreateBinaryOptionsMarketOrderDefaultTypeInternal _MsgCreateBinaryOptionsMarketOrder_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MsgCreateBinaryOptionsMarketOrderResponse::MsgCreateBinaryOptionsMarketOrderResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.order_hash_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.results_)*/nullptr} {}
struct MsgCreateBinaryOptionsMarketOrderResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgCreateBinaryOptionsMarketOrderResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgCreateBinaryOptionsMarketOrderResponseDefaultTypeInternal() {}
  union {
    MsgCreateBinaryOptionsMarketOrderResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgCreateBinaryOptionsMarketOrderResponseDefaultTypeInternal _MsgCreateBinaryOptionsMarketOrderResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MsgCancelDerivativeOrder::MsgCancelDerivativeOrder(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sender_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.market_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.subaccount_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.order_hash_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.order_mask_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MsgCancelDerivativeOrderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgCancelDerivativeOrderDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgCancelDerivativeOrderDefaultTypeInternal() {}
  union {
    MsgCancelDerivativeOrder _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgCancelDerivativeOrderDefaultTypeInternal _MsgCancelDerivativeOrder_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MsgCancelDerivativeOrderResponse::MsgCancelDerivativeOrderResponse(
    ::_pbi::ConstantInitialized) {}
struct MsgCancelDerivativeOrderResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgCancelDerivativeOrderResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgCancelDerivativeOrderResponseDefaultTypeInternal() {}
  union {
    MsgCancelDerivativeOrderResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgCancelDerivativeOrderResponseDefaultTypeInternal _MsgCancelDerivativeOrderResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MsgCancelBinaryOptionsOrder::MsgCancelBinaryOptionsOrder(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sender_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.market_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.subaccount_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.order_hash_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.order_mask_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MsgCancelBinaryOptionsOrderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgCancelBinaryOptionsOrderDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgCancelBinaryOptionsOrderDefaultTypeInternal() {}
  union {
    MsgCancelBinaryOptionsOrder _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgCancelBinaryOptionsOrderDefaultTypeInternal _MsgCancelBinaryOptionsOrder_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MsgCancelBinaryOptionsOrderResponse::MsgCancelBinaryOptionsOrderResponse(
    ::_pbi::ConstantInitialized) {}
struct MsgCancelBinaryOptionsOrderResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgCancelBinaryOptionsOrderResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgCancelBinaryOptionsOrderResponseDefaultTypeInternal() {}
  union {
    MsgCancelBinaryOptionsOrderResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgCancelBinaryOptionsOrderResponseDefaultTypeInternal _MsgCancelBinaryOptionsOrderResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR OrderData::OrderData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.market_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.subaccount_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.order_hash_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.order_mask_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OrderDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OrderDataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~OrderDataDefaultTypeInternal() {}
  union {
    OrderData _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OrderDataDefaultTypeInternal _OrderData_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MsgBatchCancelDerivativeOrders::MsgBatchCancelDerivativeOrders(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{}
  , /*decltype(_impl_.sender_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MsgBatchCancelDerivativeOrdersDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgBatchCancelDerivativeOrdersDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgBatchCancelDerivativeOrdersDefaultTypeInternal() {}
  union {
    MsgBatchCancelDerivativeOrders _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgBatchCancelDerivativeOrdersDefaultTypeInternal _MsgBatchCancelDerivativeOrders_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MsgBatchCancelDerivativeOrdersResponse::MsgBatchCancelDerivativeOrdersResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.success_)*/ {}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MsgBatchCancelDerivativeOrdersResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgBatchCancelDerivativeOrdersResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgBatchCancelDerivativeOrdersResponseDefaultTypeInternal() {}
  union {
    MsgBatchCancelDerivativeOrdersResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgBatchCancelDerivativeOrdersResponseDefaultTypeInternal _MsgBatchCancelDerivativeOrdersResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MsgSubaccountTransfer::MsgSubaccountTransfer(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.sender_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.source_subaccount_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.destination_subaccount_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.amount_)*/nullptr} {}
struct MsgSubaccountTransferDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgSubaccountTransferDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgSubaccountTransferDefaultTypeInternal() {}
  union {
    MsgSubaccountTransfer _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgSubaccountTransferDefaultTypeInternal _MsgSubaccountTransfer_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MsgSubaccountTransferResponse::MsgSubaccountTransferResponse(
    ::_pbi::ConstantInitialized) {}
struct MsgSubaccountTransferResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgSubaccountTransferResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgSubaccountTransferResponseDefaultTypeInternal() {}
  union {
    MsgSubaccountTransferResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgSubaccountTransferResponseDefaultTypeInternal _MsgSubaccountTransferResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MsgExternalTransfer::MsgExternalTransfer(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.sender_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.source_subaccount_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.destination_subaccount_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.amount_)*/nullptr} {}
struct MsgExternalTransferDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgExternalTransferDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgExternalTransferDefaultTypeInternal() {}
  union {
    MsgExternalTransfer _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgExternalTransferDefaultTypeInternal _MsgExternalTransfer_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MsgExternalTransferResponse::MsgExternalTransferResponse(
    ::_pbi::ConstantInitialized) {}
struct MsgExternalTransferResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgExternalTransferResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgExternalTransferResponseDefaultTypeInternal() {}
  union {
    MsgExternalTransferResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgExternalTransferResponseDefaultTypeInternal _MsgExternalTransferResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MsgLiquidatePosition::MsgLiquidatePosition(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.sender_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.subaccount_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.market_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.order_)*/nullptr} {}
struct MsgLiquidatePositionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgLiquidatePositionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgLiquidatePositionDefaultTypeInternal() {}
  union {
    MsgLiquidatePosition _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgLiquidatePositionDefaultTypeInternal _MsgLiquidatePosition_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MsgLiquidatePositionResponse::MsgLiquidatePositionResponse(
    ::_pbi::ConstantInitialized) {}
struct MsgLiquidatePositionResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgLiquidatePositionResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgLiquidatePositionResponseDefaultTypeInternal() {}
  union {
    MsgLiquidatePositionResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgLiquidatePositionResponseDefaultTypeInternal _MsgLiquidatePositionResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MsgIncreasePositionMargin::MsgIncreasePositionMargin(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sender_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.source_subaccount_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.destination_subaccount_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.market_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.amount_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MsgIncreasePositionMarginDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgIncreasePositionMarginDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgIncreasePositionMarginDefaultTypeInternal() {}
  union {
    MsgIncreasePositionMargin _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgIncreasePositionMarginDefaultTypeInternal _MsgIncreasePositionMargin_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MsgIncreasePositionMarginResponse::MsgIncreasePositionMarginResponse(
    ::_pbi::ConstantInitialized) {}
struct MsgIncreasePositionMarginResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgIncreasePositionMarginResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgIncreasePositionMarginResponseDefaultTypeInternal() {}
  union {
    MsgIncreasePositionMarginResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgIncreasePositionMarginResponseDefaultTypeInternal _MsgIncreasePositionMarginResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MsgPrivilegedExecuteContract::MsgPrivilegedExecuteContract(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sender_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.funds_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.contract_address_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.data_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MsgPrivilegedExecuteContractDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgPrivilegedExecuteContractDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgPrivilegedExecuteContractDefaultTypeInternal() {}
  union {
    MsgPrivilegedExecuteContract _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgPrivilegedExecuteContractDefaultTypeInternal _MsgPrivilegedExecuteContract_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MsgPrivilegedExecuteContractResponse::MsgPrivilegedExecuteContractResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.funds_diff_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MsgPrivilegedExecuteContractResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgPrivilegedExecuteContractResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgPrivilegedExecuteContractResponseDefaultTypeInternal() {}
  union {
    MsgPrivilegedExecuteContractResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgPrivilegedExecuteContractResponseDefaultTypeInternal _MsgPrivilegedExecuteContractResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR SpotMarketParamUpdateProposal::SpotMarketParamUpdateProposal(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.title_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.description_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.market_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.maker_fee_rate_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.taker_fee_rate_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.relayer_fee_share_rate_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.min_price_tick_size_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.min_quantity_tick_size_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.status_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SpotMarketParamUpdateProposalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SpotMarketParamUpdateProposalDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SpotMarketParamUpdateProposalDefaultTypeInternal() {}
  union {
    SpotMarketParamUpdateProposal _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SpotMarketParamUpdateProposalDefaultTypeInternal _SpotMarketParamUpdateProposal_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ExchangeEnableProposal::ExchangeEnableProposal(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.title_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.description_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.exchangetype_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ExchangeEnableProposalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExchangeEnableProposalDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExchangeEnableProposalDefaultTypeInternal() {}
  union {
    ExchangeEnableProposal _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExchangeEnableProposalDefaultTypeInternal _ExchangeEnableProposal_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR BatchExchangeModificationProposal::BatchExchangeModificationProposal(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.spot_market_param_update_proposals_)*/{}
  , /*decltype(_impl_.derivative_market_param_update_proposals_)*/{}
  , /*decltype(_impl_.spot_market_launch_proposals_)*/{}
  , /*decltype(_impl_.perpetual_market_launch_proposals_)*/{}
  , /*decltype(_impl_.expiry_futures_market_launch_proposals_)*/{}
  , /*decltype(_impl_.binary_options_market_launch_proposals_)*/{}
  , /*decltype(_impl_.binary_options_param_update_proposals_)*/{}
  , /*decltype(_impl_.title_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.description_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.trading_reward_campaign_update_proposal_)*/nullptr
  , /*decltype(_impl_.denom_decimals_update_proposal_)*/nullptr} {}
struct BatchExchangeModificationProposalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BatchExchangeModificationProposalDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BatchExchangeModificationProposalDefaultTypeInternal() {}
  union {
    BatchExchangeModificationProposal _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BatchExchangeModificationProposalDefaultTypeInternal _BatchExchangeModificationProposal_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR SpotMarketLaunchProposal::SpotMarketLaunchProposal(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.title_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.description_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.ticker_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.base_denom_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.quote_denom_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.min_price_tick_size_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.min_quantity_tick_size_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.maker_fee_rate_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.taker_fee_rate_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SpotMarketLaunchProposalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SpotMarketLaunchProposalDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SpotMarketLaunchProposalDefaultTypeInternal() {}
  union {
    SpotMarketLaunchProposal _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SpotMarketLaunchProposalDefaultTypeInternal _SpotMarketLaunchProposal_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR PerpetualMarketLaunchProposal::PerpetualMarketLaunchProposal(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.title_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.description_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.ticker_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.quote_denom_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.oracle_base_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.oracle_quote_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.initial_margin_ratio_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.maintenance_margin_ratio_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.maker_fee_rate_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.taker_fee_rate_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.min_price_tick_size_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.min_quantity_tick_size_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.oracle_scale_factor_)*/ 0u

  , /*decltype(_impl_.oracle_type_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PerpetualMarketLaunchProposalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PerpetualMarketLaunchProposalDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PerpetualMarketLaunchProposalDefaultTypeInternal() {}
  union {
    PerpetualMarketLaunchProposal _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PerpetualMarketLaunchProposalDefaultTypeInternal _PerpetualMarketLaunchProposal_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR BinaryOptionsMarketLaunchProposal::BinaryOptionsMarketLaunchProposal(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.title_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.description_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.ticker_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.oracle_symbol_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.oracle_provider_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.admin_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.quote_denom_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.maker_fee_rate_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.taker_fee_rate_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.min_price_tick_size_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.min_quantity_tick_size_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.oracle_type_)*/ 0

  , /*decltype(_impl_.oracle_scale_factor_)*/ 0u

  , /*decltype(_impl_.expiration_timestamp_)*/ ::int64_t{0}

  , /*decltype(_impl_.settlement_timestamp_)*/ ::int64_t{0}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BinaryOptionsMarketLaunchProposalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BinaryOptionsMarketLaunchProposalDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BinaryOptionsMarketLaunchProposalDefaultTypeInternal() {}
  union {
    BinaryOptionsMarketLaunchProposal _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BinaryOptionsMarketLaunchProposalDefaultTypeInternal _BinaryOptionsMarketLaunchProposal_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ExpiryFuturesMarketLaunchProposal::ExpiryFuturesMarketLaunchProposal(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.title_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.description_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.ticker_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.quote_denom_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.oracle_base_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.oracle_quote_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.initial_margin_ratio_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.maintenance_margin_ratio_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.maker_fee_rate_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.taker_fee_rate_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.min_price_tick_size_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.min_quantity_tick_size_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.oracle_scale_factor_)*/ 0u

  , /*decltype(_impl_.oracle_type_)*/ 0

  , /*decltype(_impl_.expiry_)*/ ::int64_t{0}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ExpiryFuturesMarketLaunchProposalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExpiryFuturesMarketLaunchProposalDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExpiryFuturesMarketLaunchProposalDefaultTypeInternal() {}
  union {
    ExpiryFuturesMarketLaunchProposal _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExpiryFuturesMarketLaunchProposalDefaultTypeInternal _ExpiryFuturesMarketLaunchProposal_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR DerivativeMarketParamUpdateProposal::DerivativeMarketParamUpdateProposal(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.title_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.description_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.market_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.initial_margin_ratio_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.maintenance_margin_ratio_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.maker_fee_rate_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.taker_fee_rate_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.relayer_fee_share_rate_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.min_price_tick_size_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.min_quantity_tick_size_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.hourlyinterestrate_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.hourlyfundingratecap_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.oracle_params_)*/nullptr
  , /*decltype(_impl_.status_)*/ 0
} {}
struct DerivativeMarketParamUpdateProposalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DerivativeMarketParamUpdateProposalDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DerivativeMarketParamUpdateProposalDefaultTypeInternal() {}
  union {
    DerivativeMarketParamUpdateProposal _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DerivativeMarketParamUpdateProposalDefaultTypeInternal _DerivativeMarketParamUpdateProposal_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MarketForcedSettlementProposal::MarketForcedSettlementProposal(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.title_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.description_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.market_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.settlement_price_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MarketForcedSettlementProposalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MarketForcedSettlementProposalDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MarketForcedSettlementProposalDefaultTypeInternal() {}
  union {
    MarketForcedSettlementProposal _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MarketForcedSettlementProposalDefaultTypeInternal _MarketForcedSettlementProposal_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR UpdateDenomDecimalsProposal::UpdateDenomDecimalsProposal(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.denom_decimals_)*/{}
  , /*decltype(_impl_.title_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.description_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UpdateDenomDecimalsProposalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateDenomDecimalsProposalDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateDenomDecimalsProposalDefaultTypeInternal() {}
  union {
    UpdateDenomDecimalsProposal _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateDenomDecimalsProposalDefaultTypeInternal _UpdateDenomDecimalsProposal_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR BinaryOptionsMarketParamUpdateProposal::BinaryOptionsMarketParamUpdateProposal(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.title_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.description_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.market_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.maker_fee_rate_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.taker_fee_rate_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.relayer_fee_share_rate_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.min_price_tick_size_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.min_quantity_tick_size_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.settlement_price_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.admin_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.oracle_params_)*/nullptr
  , /*decltype(_impl_.expiration_timestamp_)*/ ::int64_t{0}

  , /*decltype(_impl_.settlement_timestamp_)*/ ::int64_t{0}

  , /*decltype(_impl_.status_)*/ 0
} {}
struct BinaryOptionsMarketParamUpdateProposalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BinaryOptionsMarketParamUpdateProposalDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BinaryOptionsMarketParamUpdateProposalDefaultTypeInternal() {}
  union {
    BinaryOptionsMarketParamUpdateProposal _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BinaryOptionsMarketParamUpdateProposalDefaultTypeInternal _BinaryOptionsMarketParamUpdateProposal_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ProviderOracleParams::ProviderOracleParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.symbol_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.provider_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.oracle_scale_factor_)*/ 0u

  , /*decltype(_impl_.oracle_type_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ProviderOracleParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProviderOracleParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProviderOracleParamsDefaultTypeInternal() {}
  union {
    ProviderOracleParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProviderOracleParamsDefaultTypeInternal _ProviderOracleParams_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR OracleParams::OracleParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.oracle_base_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.oracle_quote_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.oracle_scale_factor_)*/ 0u

  , /*decltype(_impl_.oracle_type_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OracleParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OracleParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~OracleParamsDefaultTypeInternal() {}
  union {
    OracleParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OracleParamsDefaultTypeInternal _OracleParams_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR TradingRewardCampaignLaunchProposal::TradingRewardCampaignLaunchProposal(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.campaign_reward_pools_)*/{}
  , /*decltype(_impl_.title_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.description_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.campaign_info_)*/nullptr} {}
struct TradingRewardCampaignLaunchProposalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TradingRewardCampaignLaunchProposalDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TradingRewardCampaignLaunchProposalDefaultTypeInternal() {}
  union {
    TradingRewardCampaignLaunchProposal _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TradingRewardCampaignLaunchProposalDefaultTypeInternal _TradingRewardCampaignLaunchProposal_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR TradingRewardCampaignUpdateProposal::TradingRewardCampaignUpdateProposal(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.campaign_reward_pools_additions_)*/{}
  , /*decltype(_impl_.campaign_reward_pools_updates_)*/{}
  , /*decltype(_impl_.title_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.description_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.campaign_info_)*/nullptr} {}
struct TradingRewardCampaignUpdateProposalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TradingRewardCampaignUpdateProposalDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TradingRewardCampaignUpdateProposalDefaultTypeInternal() {}
  union {
    TradingRewardCampaignUpdateProposal _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TradingRewardCampaignUpdateProposalDefaultTypeInternal _TradingRewardCampaignUpdateProposal_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR RewardPointUpdate::RewardPointUpdate(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.account_address_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.new_points_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RewardPointUpdateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RewardPointUpdateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RewardPointUpdateDefaultTypeInternal() {}
  union {
    RewardPointUpdate _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RewardPointUpdateDefaultTypeInternal _RewardPointUpdate_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR TradingRewardPendingPointsUpdateProposal::TradingRewardPendingPointsUpdateProposal(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.reward_point_updates_)*/{}
  , /*decltype(_impl_.title_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.description_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.pending_pool_timestamp_)*/ ::int64_t{0}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TradingRewardPendingPointsUpdateProposalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TradingRewardPendingPointsUpdateProposalDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TradingRewardPendingPointsUpdateProposalDefaultTypeInternal() {}
  union {
    TradingRewardPendingPointsUpdateProposal _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TradingRewardPendingPointsUpdateProposalDefaultTypeInternal _TradingRewardPendingPointsUpdateProposal_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR FeeDiscountProposal::FeeDiscountProposal(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.title_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.description_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.schedule_)*/nullptr} {}
struct FeeDiscountProposalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FeeDiscountProposalDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FeeDiscountProposalDefaultTypeInternal() {}
  union {
    FeeDiscountProposal _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FeeDiscountProposalDefaultTypeInternal _FeeDiscountProposal_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR BatchCommunityPoolSpendProposal::BatchCommunityPoolSpendProposal(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.proposals_)*/{}
  , /*decltype(_impl_.title_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.description_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BatchCommunityPoolSpendProposalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BatchCommunityPoolSpendProposalDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BatchCommunityPoolSpendProposalDefaultTypeInternal() {}
  union {
    BatchCommunityPoolSpendProposal _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BatchCommunityPoolSpendProposalDefaultTypeInternal _BatchCommunityPoolSpendProposal_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MsgRewardsOptOut::MsgRewardsOptOut(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sender_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MsgRewardsOptOutDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgRewardsOptOutDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgRewardsOptOutDefaultTypeInternal() {}
  union {
    MsgRewardsOptOut _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgRewardsOptOutDefaultTypeInternal _MsgRewardsOptOut_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MsgRewardsOptOutResponse::MsgRewardsOptOutResponse(
    ::_pbi::ConstantInitialized) {}
struct MsgRewardsOptOutResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgRewardsOptOutResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgRewardsOptOutResponseDefaultTypeInternal() {}
  union {
    MsgRewardsOptOutResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgRewardsOptOutResponseDefaultTypeInternal _MsgRewardsOptOutResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MsgReclaimLockedFunds::MsgReclaimLockedFunds(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sender_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.lockedaccountpubkey_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.signature_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MsgReclaimLockedFundsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgReclaimLockedFundsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgReclaimLockedFundsDefaultTypeInternal() {}
  union {
    MsgReclaimLockedFunds _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgReclaimLockedFundsDefaultTypeInternal _MsgReclaimLockedFunds_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MsgReclaimLockedFundsResponse::MsgReclaimLockedFundsResponse(
    ::_pbi::ConstantInitialized) {}
struct MsgReclaimLockedFundsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgReclaimLockedFundsResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgReclaimLockedFundsResponseDefaultTypeInternal() {}
  union {
    MsgReclaimLockedFundsResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgReclaimLockedFundsResponseDefaultTypeInternal _MsgReclaimLockedFundsResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MsgSignData::MsgSignData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.signer_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.data_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MsgSignDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgSignDataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgSignDataDefaultTypeInternal() {}
  union {
    MsgSignData _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgSignDataDefaultTypeInternal _MsgSignData_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MsgSignDoc::MsgSignDoc(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.sign_type_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.value_)*/nullptr} {}
struct MsgSignDocDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgSignDocDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgSignDocDefaultTypeInternal() {}
  union {
    MsgSignDoc _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgSignDocDefaultTypeInternal _MsgSignDoc_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MsgAdminUpdateBinaryOptionsMarket::MsgAdminUpdateBinaryOptionsMarket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sender_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.market_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.settlement_price_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.expiration_timestamp_)*/ ::int64_t{0}

  , /*decltype(_impl_.settlement_timestamp_)*/ ::int64_t{0}

  , /*decltype(_impl_.status_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MsgAdminUpdateBinaryOptionsMarketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgAdminUpdateBinaryOptionsMarketDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgAdminUpdateBinaryOptionsMarketDefaultTypeInternal() {}
  union {
    MsgAdminUpdateBinaryOptionsMarket _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgAdminUpdateBinaryOptionsMarketDefaultTypeInternal _MsgAdminUpdateBinaryOptionsMarket_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MsgAdminUpdateBinaryOptionsMarketResponse::MsgAdminUpdateBinaryOptionsMarketResponse(
    ::_pbi::ConstantInitialized) {}
struct MsgAdminUpdateBinaryOptionsMarketResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgAdminUpdateBinaryOptionsMarketResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgAdminUpdateBinaryOptionsMarketResponseDefaultTypeInternal() {}
  union {
    MsgAdminUpdateBinaryOptionsMarketResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgAdminUpdateBinaryOptionsMarketResponseDefaultTypeInternal _MsgAdminUpdateBinaryOptionsMarketResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR AtomicMarketOrderFeeMultiplierScheduleProposal::AtomicMarketOrderFeeMultiplierScheduleProposal(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.market_fee_multipliers_)*/{}
  , /*decltype(_impl_.title_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.description_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AtomicMarketOrderFeeMultiplierScheduleProposalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AtomicMarketOrderFeeMultiplierScheduleProposalDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AtomicMarketOrderFeeMultiplierScheduleProposalDefaultTypeInternal() {}
  union {
    AtomicMarketOrderFeeMultiplierScheduleProposal _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AtomicMarketOrderFeeMultiplierScheduleProposalDefaultTypeInternal _AtomicMarketOrderFeeMultiplierScheduleProposal_default_instance_;
}  // namespace v1beta1
}  // namespace exchange
}  // namespace injective
static ::_pb::Metadata file_level_metadata_injective_2fexchange_2fv1beta1_2ftx_2eproto[85];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_injective_2fexchange_2fv1beta1_2ftx_2eproto[1];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_injective_2fexchange_2fv1beta1_2ftx_2eproto = nullptr;
const ::uint32_t TableStruct_injective_2fexchange_2fv1beta1_2ftx_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgUpdateParams, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgUpdateParams, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgUpdateParams, _impl_.authority_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgUpdateParams, _impl_.params_),
    ~0u,
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgUpdateParamsResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgDeposit, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgDeposit, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgDeposit, _impl_.sender_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgDeposit, _impl_.subaccount_id_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgDeposit, _impl_.amount_),
    ~0u,
    ~0u,
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgDepositResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgWithdraw, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgWithdraw, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgWithdraw, _impl_.sender_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgWithdraw, _impl_.subaccount_id_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgWithdraw, _impl_.amount_),
    ~0u,
    ~0u,
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgWithdrawResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgCreateSpotLimitOrder, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgCreateSpotLimitOrder, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgCreateSpotLimitOrder, _impl_.sender_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgCreateSpotLimitOrder, _impl_.order_),
    ~0u,
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgCreateSpotLimitOrderResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgCreateSpotLimitOrderResponse, _impl_.order_hash_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgBatchCreateSpotLimitOrders, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgBatchCreateSpotLimitOrders, _impl_.sender_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgBatchCreateSpotLimitOrders, _impl_.orders_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgBatchCreateSpotLimitOrdersResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgBatchCreateSpotLimitOrdersResponse, _impl_.order_hashes_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgInstantSpotMarketLaunch, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgInstantSpotMarketLaunch, _impl_.sender_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgInstantSpotMarketLaunch, _impl_.ticker_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgInstantSpotMarketLaunch, _impl_.base_denom_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgInstantSpotMarketLaunch, _impl_.quote_denom_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgInstantSpotMarketLaunch, _impl_.min_price_tick_size_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgInstantSpotMarketLaunch, _impl_.min_quantity_tick_size_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgInstantSpotMarketLaunchResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgInstantPerpetualMarketLaunch, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgInstantPerpetualMarketLaunch, _impl_.sender_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgInstantPerpetualMarketLaunch, _impl_.ticker_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgInstantPerpetualMarketLaunch, _impl_.quote_denom_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgInstantPerpetualMarketLaunch, _impl_.oracle_base_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgInstantPerpetualMarketLaunch, _impl_.oracle_quote_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgInstantPerpetualMarketLaunch, _impl_.oracle_scale_factor_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgInstantPerpetualMarketLaunch, _impl_.oracle_type_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgInstantPerpetualMarketLaunch, _impl_.maker_fee_rate_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgInstantPerpetualMarketLaunch, _impl_.taker_fee_rate_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgInstantPerpetualMarketLaunch, _impl_.initial_margin_ratio_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgInstantPerpetualMarketLaunch, _impl_.maintenance_margin_ratio_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgInstantPerpetualMarketLaunch, _impl_.min_price_tick_size_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgInstantPerpetualMarketLaunch, _impl_.min_quantity_tick_size_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgInstantPerpetualMarketLaunchResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgInstantBinaryOptionsMarketLaunch, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgInstantBinaryOptionsMarketLaunch, _impl_.sender_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgInstantBinaryOptionsMarketLaunch, _impl_.ticker_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgInstantBinaryOptionsMarketLaunch, _impl_.oracle_symbol_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgInstantBinaryOptionsMarketLaunch, _impl_.oracle_provider_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgInstantBinaryOptionsMarketLaunch, _impl_.oracle_type_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgInstantBinaryOptionsMarketLaunch, _impl_.oracle_scale_factor_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgInstantBinaryOptionsMarketLaunch, _impl_.maker_fee_rate_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgInstantBinaryOptionsMarketLaunch, _impl_.taker_fee_rate_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgInstantBinaryOptionsMarketLaunch, _impl_.expiration_timestamp_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgInstantBinaryOptionsMarketLaunch, _impl_.settlement_timestamp_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgInstantBinaryOptionsMarketLaunch, _impl_.admin_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgInstantBinaryOptionsMarketLaunch, _impl_.quote_denom_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgInstantBinaryOptionsMarketLaunch, _impl_.min_price_tick_size_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgInstantBinaryOptionsMarketLaunch, _impl_.min_quantity_tick_size_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgInstantBinaryOptionsMarketLaunchResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgInstantExpiryFuturesMarketLaunch, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgInstantExpiryFuturesMarketLaunch, _impl_.sender_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgInstantExpiryFuturesMarketLaunch, _impl_.ticker_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgInstantExpiryFuturesMarketLaunch, _impl_.quote_denom_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgInstantExpiryFuturesMarketLaunch, _impl_.oracle_base_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgInstantExpiryFuturesMarketLaunch, _impl_.oracle_quote_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgInstantExpiryFuturesMarketLaunch, _impl_.oracle_type_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgInstantExpiryFuturesMarketLaunch, _impl_.oracle_scale_factor_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgInstantExpiryFuturesMarketLaunch, _impl_.expiry_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgInstantExpiryFuturesMarketLaunch, _impl_.maker_fee_rate_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgInstantExpiryFuturesMarketLaunch, _impl_.taker_fee_rate_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgInstantExpiryFuturesMarketLaunch, _impl_.initial_margin_ratio_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgInstantExpiryFuturesMarketLaunch, _impl_.maintenance_margin_ratio_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgInstantExpiryFuturesMarketLaunch, _impl_.min_price_tick_size_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgInstantExpiryFuturesMarketLaunch, _impl_.min_quantity_tick_size_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgInstantExpiryFuturesMarketLaunchResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgCreateSpotMarketOrder, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgCreateSpotMarketOrder, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgCreateSpotMarketOrder, _impl_.sender_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgCreateSpotMarketOrder, _impl_.order_),
    ~0u,
    0,
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgCreateSpotMarketOrderResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgCreateSpotMarketOrderResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgCreateSpotMarketOrderResponse, _impl_.order_hash_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgCreateSpotMarketOrderResponse, _impl_.results_),
    ~0u,
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::SpotMarketOrderResults, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::SpotMarketOrderResults, _impl_.quantity_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::SpotMarketOrderResults, _impl_.price_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::SpotMarketOrderResults, _impl_.fee_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgCreateDerivativeLimitOrder, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgCreateDerivativeLimitOrder, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgCreateDerivativeLimitOrder, _impl_.sender_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgCreateDerivativeLimitOrder, _impl_.order_),
    ~0u,
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgCreateDerivativeLimitOrderResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgCreateDerivativeLimitOrderResponse, _impl_.order_hash_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgCreateBinaryOptionsLimitOrder, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgCreateBinaryOptionsLimitOrder, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgCreateBinaryOptionsLimitOrder, _impl_.sender_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgCreateBinaryOptionsLimitOrder, _impl_.order_),
    ~0u,
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgCreateBinaryOptionsLimitOrderResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgCreateBinaryOptionsLimitOrderResponse, _impl_.order_hash_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgBatchCreateDerivativeLimitOrders, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgBatchCreateDerivativeLimitOrders, _impl_.sender_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgBatchCreateDerivativeLimitOrders, _impl_.orders_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgBatchCreateDerivativeLimitOrdersResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgBatchCreateDerivativeLimitOrdersResponse, _impl_.order_hashes_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgCancelSpotOrder, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgCancelSpotOrder, _impl_.sender_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgCancelSpotOrder, _impl_.market_id_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgCancelSpotOrder, _impl_.subaccount_id_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgCancelSpotOrder, _impl_.order_hash_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgCancelSpotOrderResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgBatchCancelSpotOrders, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgBatchCancelSpotOrders, _impl_.sender_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgBatchCancelSpotOrders, _impl_.data_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgBatchCancelSpotOrdersResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgBatchCancelSpotOrdersResponse, _impl_.success_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgBatchCancelBinaryOptionsOrders, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgBatchCancelBinaryOptionsOrders, _impl_.sender_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgBatchCancelBinaryOptionsOrders, _impl_.data_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgBatchCancelBinaryOptionsOrdersResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgBatchCancelBinaryOptionsOrdersResponse, _impl_.success_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgBatchUpdateOrders, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgBatchUpdateOrders, _impl_.sender_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgBatchUpdateOrders, _impl_.subaccount_id_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgBatchUpdateOrders, _impl_.spot_market_ids_to_cancel_all_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgBatchUpdateOrders, _impl_.derivative_market_ids_to_cancel_all_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgBatchUpdateOrders, _impl_.spot_orders_to_cancel_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgBatchUpdateOrders, _impl_.derivative_orders_to_cancel_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgBatchUpdateOrders, _impl_.spot_orders_to_create_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgBatchUpdateOrders, _impl_.derivative_orders_to_create_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgBatchUpdateOrders, _impl_.binary_options_orders_to_cancel_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgBatchUpdateOrders, _impl_.binary_options_market_ids_to_cancel_all_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgBatchUpdateOrders, _impl_.binary_options_orders_to_create_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgBatchUpdateOrdersResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgBatchUpdateOrdersResponse, _impl_.spot_cancel_success_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgBatchUpdateOrdersResponse, _impl_.derivative_cancel_success_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgBatchUpdateOrdersResponse, _impl_.spot_order_hashes_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgBatchUpdateOrdersResponse, _impl_.derivative_order_hashes_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgBatchUpdateOrdersResponse, _impl_.binary_options_cancel_success_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgBatchUpdateOrdersResponse, _impl_.binary_options_order_hashes_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgCreateDerivativeMarketOrder, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgCreateDerivativeMarketOrder, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgCreateDerivativeMarketOrder, _impl_.sender_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgCreateDerivativeMarketOrder, _impl_.order_),
    ~0u,
    0,
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgCreateDerivativeMarketOrderResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgCreateDerivativeMarketOrderResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgCreateDerivativeMarketOrderResponse, _impl_.order_hash_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgCreateDerivativeMarketOrderResponse, _impl_.results_),
    ~0u,
    0,
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::DerivativeMarketOrderResults, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::DerivativeMarketOrderResults, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::DerivativeMarketOrderResults, _impl_.quantity_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::DerivativeMarketOrderResults, _impl_.price_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::DerivativeMarketOrderResults, _impl_.fee_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::DerivativeMarketOrderResults, _impl_.position_delta_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::DerivativeMarketOrderResults, _impl_.payout_),
    ~0u,
    ~0u,
    ~0u,
    0,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgCreateBinaryOptionsMarketOrder, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgCreateBinaryOptionsMarketOrder, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgCreateBinaryOptionsMarketOrder, _impl_.sender_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgCreateBinaryOptionsMarketOrder, _impl_.order_),
    ~0u,
    0,
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgCreateBinaryOptionsMarketOrderResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgCreateBinaryOptionsMarketOrderResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgCreateBinaryOptionsMarketOrderResponse, _impl_.order_hash_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgCreateBinaryOptionsMarketOrderResponse, _impl_.results_),
    ~0u,
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgCancelDerivativeOrder, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgCancelDerivativeOrder, _impl_.sender_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgCancelDerivativeOrder, _impl_.market_id_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgCancelDerivativeOrder, _impl_.subaccount_id_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgCancelDerivativeOrder, _impl_.order_hash_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgCancelDerivativeOrder, _impl_.order_mask_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgCancelDerivativeOrderResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgCancelBinaryOptionsOrder, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgCancelBinaryOptionsOrder, _impl_.sender_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgCancelBinaryOptionsOrder, _impl_.market_id_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgCancelBinaryOptionsOrder, _impl_.subaccount_id_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgCancelBinaryOptionsOrder, _impl_.order_hash_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgCancelBinaryOptionsOrder, _impl_.order_mask_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgCancelBinaryOptionsOrderResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::OrderData, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::OrderData, _impl_.market_id_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::OrderData, _impl_.subaccount_id_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::OrderData, _impl_.order_hash_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::OrderData, _impl_.order_mask_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgBatchCancelDerivativeOrders, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgBatchCancelDerivativeOrders, _impl_.sender_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgBatchCancelDerivativeOrders, _impl_.data_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgBatchCancelDerivativeOrdersResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgBatchCancelDerivativeOrdersResponse, _impl_.success_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgSubaccountTransfer, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgSubaccountTransfer, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgSubaccountTransfer, _impl_.sender_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgSubaccountTransfer, _impl_.source_subaccount_id_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgSubaccountTransfer, _impl_.destination_subaccount_id_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgSubaccountTransfer, _impl_.amount_),
    ~0u,
    ~0u,
    ~0u,
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgSubaccountTransferResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgExternalTransfer, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgExternalTransfer, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgExternalTransfer, _impl_.sender_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgExternalTransfer, _impl_.source_subaccount_id_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgExternalTransfer, _impl_.destination_subaccount_id_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgExternalTransfer, _impl_.amount_),
    ~0u,
    ~0u,
    ~0u,
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgExternalTransferResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgLiquidatePosition, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgLiquidatePosition, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgLiquidatePosition, _impl_.sender_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgLiquidatePosition, _impl_.subaccount_id_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgLiquidatePosition, _impl_.market_id_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgLiquidatePosition, _impl_.order_),
    ~0u,
    ~0u,
    ~0u,
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgLiquidatePositionResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgIncreasePositionMargin, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgIncreasePositionMargin, _impl_.sender_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgIncreasePositionMargin, _impl_.source_subaccount_id_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgIncreasePositionMargin, _impl_.destination_subaccount_id_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgIncreasePositionMargin, _impl_.market_id_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgIncreasePositionMargin, _impl_.amount_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgIncreasePositionMarginResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgPrivilegedExecuteContract, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgPrivilegedExecuteContract, _impl_.sender_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgPrivilegedExecuteContract, _impl_.funds_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgPrivilegedExecuteContract, _impl_.contract_address_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgPrivilegedExecuteContract, _impl_.data_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgPrivilegedExecuteContractResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgPrivilegedExecuteContractResponse, _impl_.funds_diff_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::SpotMarketParamUpdateProposal, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::SpotMarketParamUpdateProposal, _impl_.title_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::SpotMarketParamUpdateProposal, _impl_.description_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::SpotMarketParamUpdateProposal, _impl_.market_id_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::SpotMarketParamUpdateProposal, _impl_.maker_fee_rate_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::SpotMarketParamUpdateProposal, _impl_.taker_fee_rate_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::SpotMarketParamUpdateProposal, _impl_.relayer_fee_share_rate_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::SpotMarketParamUpdateProposal, _impl_.min_price_tick_size_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::SpotMarketParamUpdateProposal, _impl_.min_quantity_tick_size_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::SpotMarketParamUpdateProposal, _impl_.status_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::ExchangeEnableProposal, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::ExchangeEnableProposal, _impl_.title_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::ExchangeEnableProposal, _impl_.description_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::ExchangeEnableProposal, _impl_.exchangetype_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::BatchExchangeModificationProposal, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::BatchExchangeModificationProposal, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::BatchExchangeModificationProposal, _impl_.title_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::BatchExchangeModificationProposal, _impl_.description_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::BatchExchangeModificationProposal, _impl_.spot_market_param_update_proposals_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::BatchExchangeModificationProposal, _impl_.derivative_market_param_update_proposals_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::BatchExchangeModificationProposal, _impl_.spot_market_launch_proposals_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::BatchExchangeModificationProposal, _impl_.perpetual_market_launch_proposals_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::BatchExchangeModificationProposal, _impl_.expiry_futures_market_launch_proposals_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::BatchExchangeModificationProposal, _impl_.trading_reward_campaign_update_proposal_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::BatchExchangeModificationProposal, _impl_.binary_options_market_launch_proposals_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::BatchExchangeModificationProposal, _impl_.binary_options_param_update_proposals_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::BatchExchangeModificationProposal, _impl_.denom_decimals_update_proposal_),
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    0,
    ~0u,
    ~0u,
    1,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::SpotMarketLaunchProposal, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::SpotMarketLaunchProposal, _impl_.title_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::SpotMarketLaunchProposal, _impl_.description_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::SpotMarketLaunchProposal, _impl_.ticker_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::SpotMarketLaunchProposal, _impl_.base_denom_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::SpotMarketLaunchProposal, _impl_.quote_denom_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::SpotMarketLaunchProposal, _impl_.min_price_tick_size_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::SpotMarketLaunchProposal, _impl_.min_quantity_tick_size_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::SpotMarketLaunchProposal, _impl_.maker_fee_rate_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::SpotMarketLaunchProposal, _impl_.taker_fee_rate_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::PerpetualMarketLaunchProposal, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::PerpetualMarketLaunchProposal, _impl_.title_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::PerpetualMarketLaunchProposal, _impl_.description_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::PerpetualMarketLaunchProposal, _impl_.ticker_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::PerpetualMarketLaunchProposal, _impl_.quote_denom_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::PerpetualMarketLaunchProposal, _impl_.oracle_base_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::PerpetualMarketLaunchProposal, _impl_.oracle_quote_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::PerpetualMarketLaunchProposal, _impl_.oracle_scale_factor_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::PerpetualMarketLaunchProposal, _impl_.oracle_type_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::PerpetualMarketLaunchProposal, _impl_.initial_margin_ratio_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::PerpetualMarketLaunchProposal, _impl_.maintenance_margin_ratio_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::PerpetualMarketLaunchProposal, _impl_.maker_fee_rate_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::PerpetualMarketLaunchProposal, _impl_.taker_fee_rate_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::PerpetualMarketLaunchProposal, _impl_.min_price_tick_size_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::PerpetualMarketLaunchProposal, _impl_.min_quantity_tick_size_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::BinaryOptionsMarketLaunchProposal, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::BinaryOptionsMarketLaunchProposal, _impl_.title_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::BinaryOptionsMarketLaunchProposal, _impl_.description_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::BinaryOptionsMarketLaunchProposal, _impl_.ticker_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::BinaryOptionsMarketLaunchProposal, _impl_.oracle_symbol_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::BinaryOptionsMarketLaunchProposal, _impl_.oracle_provider_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::BinaryOptionsMarketLaunchProposal, _impl_.oracle_type_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::BinaryOptionsMarketLaunchProposal, _impl_.oracle_scale_factor_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::BinaryOptionsMarketLaunchProposal, _impl_.expiration_timestamp_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::BinaryOptionsMarketLaunchProposal, _impl_.settlement_timestamp_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::BinaryOptionsMarketLaunchProposal, _impl_.admin_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::BinaryOptionsMarketLaunchProposal, _impl_.quote_denom_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::BinaryOptionsMarketLaunchProposal, _impl_.maker_fee_rate_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::BinaryOptionsMarketLaunchProposal, _impl_.taker_fee_rate_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::BinaryOptionsMarketLaunchProposal, _impl_.min_price_tick_size_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::BinaryOptionsMarketLaunchProposal, _impl_.min_quantity_tick_size_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::ExpiryFuturesMarketLaunchProposal, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::ExpiryFuturesMarketLaunchProposal, _impl_.title_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::ExpiryFuturesMarketLaunchProposal, _impl_.description_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::ExpiryFuturesMarketLaunchProposal, _impl_.ticker_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::ExpiryFuturesMarketLaunchProposal, _impl_.quote_denom_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::ExpiryFuturesMarketLaunchProposal, _impl_.oracle_base_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::ExpiryFuturesMarketLaunchProposal, _impl_.oracle_quote_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::ExpiryFuturesMarketLaunchProposal, _impl_.oracle_scale_factor_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::ExpiryFuturesMarketLaunchProposal, _impl_.oracle_type_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::ExpiryFuturesMarketLaunchProposal, _impl_.expiry_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::ExpiryFuturesMarketLaunchProposal, _impl_.initial_margin_ratio_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::ExpiryFuturesMarketLaunchProposal, _impl_.maintenance_margin_ratio_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::ExpiryFuturesMarketLaunchProposal, _impl_.maker_fee_rate_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::ExpiryFuturesMarketLaunchProposal, _impl_.taker_fee_rate_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::ExpiryFuturesMarketLaunchProposal, _impl_.min_price_tick_size_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::ExpiryFuturesMarketLaunchProposal, _impl_.min_quantity_tick_size_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::DerivativeMarketParamUpdateProposal, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::DerivativeMarketParamUpdateProposal, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::DerivativeMarketParamUpdateProposal, _impl_.title_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::DerivativeMarketParamUpdateProposal, _impl_.description_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::DerivativeMarketParamUpdateProposal, _impl_.market_id_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::DerivativeMarketParamUpdateProposal, _impl_.initial_margin_ratio_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::DerivativeMarketParamUpdateProposal, _impl_.maintenance_margin_ratio_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::DerivativeMarketParamUpdateProposal, _impl_.maker_fee_rate_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::DerivativeMarketParamUpdateProposal, _impl_.taker_fee_rate_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::DerivativeMarketParamUpdateProposal, _impl_.relayer_fee_share_rate_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::DerivativeMarketParamUpdateProposal, _impl_.min_price_tick_size_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::DerivativeMarketParamUpdateProposal, _impl_.min_quantity_tick_size_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::DerivativeMarketParamUpdateProposal, _impl_.hourlyinterestrate_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::DerivativeMarketParamUpdateProposal, _impl_.hourlyfundingratecap_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::DerivativeMarketParamUpdateProposal, _impl_.status_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::DerivativeMarketParamUpdateProposal, _impl_.oracle_params_),
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MarketForcedSettlementProposal, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MarketForcedSettlementProposal, _impl_.title_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MarketForcedSettlementProposal, _impl_.description_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MarketForcedSettlementProposal, _impl_.market_id_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MarketForcedSettlementProposal, _impl_.settlement_price_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::UpdateDenomDecimalsProposal, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::UpdateDenomDecimalsProposal, _impl_.title_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::UpdateDenomDecimalsProposal, _impl_.description_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::UpdateDenomDecimalsProposal, _impl_.denom_decimals_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::BinaryOptionsMarketParamUpdateProposal, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::BinaryOptionsMarketParamUpdateProposal, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::BinaryOptionsMarketParamUpdateProposal, _impl_.title_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::BinaryOptionsMarketParamUpdateProposal, _impl_.description_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::BinaryOptionsMarketParamUpdateProposal, _impl_.market_id_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::BinaryOptionsMarketParamUpdateProposal, _impl_.maker_fee_rate_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::BinaryOptionsMarketParamUpdateProposal, _impl_.taker_fee_rate_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::BinaryOptionsMarketParamUpdateProposal, _impl_.relayer_fee_share_rate_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::BinaryOptionsMarketParamUpdateProposal, _impl_.min_price_tick_size_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::BinaryOptionsMarketParamUpdateProposal, _impl_.min_quantity_tick_size_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::BinaryOptionsMarketParamUpdateProposal, _impl_.expiration_timestamp_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::BinaryOptionsMarketParamUpdateProposal, _impl_.settlement_timestamp_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::BinaryOptionsMarketParamUpdateProposal, _impl_.settlement_price_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::BinaryOptionsMarketParamUpdateProposal, _impl_.admin_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::BinaryOptionsMarketParamUpdateProposal, _impl_.status_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::BinaryOptionsMarketParamUpdateProposal, _impl_.oracle_params_),
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::ProviderOracleParams, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::ProviderOracleParams, _impl_.symbol_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::ProviderOracleParams, _impl_.provider_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::ProviderOracleParams, _impl_.oracle_scale_factor_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::ProviderOracleParams, _impl_.oracle_type_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::OracleParams, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::OracleParams, _impl_.oracle_base_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::OracleParams, _impl_.oracle_quote_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::OracleParams, _impl_.oracle_scale_factor_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::OracleParams, _impl_.oracle_type_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::TradingRewardCampaignLaunchProposal, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::TradingRewardCampaignLaunchProposal, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::TradingRewardCampaignLaunchProposal, _impl_.title_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::TradingRewardCampaignLaunchProposal, _impl_.description_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::TradingRewardCampaignLaunchProposal, _impl_.campaign_info_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::TradingRewardCampaignLaunchProposal, _impl_.campaign_reward_pools_),
    ~0u,
    ~0u,
    0,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::TradingRewardCampaignUpdateProposal, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::TradingRewardCampaignUpdateProposal, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::TradingRewardCampaignUpdateProposal, _impl_.title_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::TradingRewardCampaignUpdateProposal, _impl_.description_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::TradingRewardCampaignUpdateProposal, _impl_.campaign_info_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::TradingRewardCampaignUpdateProposal, _impl_.campaign_reward_pools_additions_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::TradingRewardCampaignUpdateProposal, _impl_.campaign_reward_pools_updates_),
    ~0u,
    ~0u,
    0,
    ~0u,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::RewardPointUpdate, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::RewardPointUpdate, _impl_.account_address_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::RewardPointUpdate, _impl_.new_points_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::TradingRewardPendingPointsUpdateProposal, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::TradingRewardPendingPointsUpdateProposal, _impl_.title_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::TradingRewardPendingPointsUpdateProposal, _impl_.description_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::TradingRewardPendingPointsUpdateProposal, _impl_.pending_pool_timestamp_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::TradingRewardPendingPointsUpdateProposal, _impl_.reward_point_updates_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::FeeDiscountProposal, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::FeeDiscountProposal, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::FeeDiscountProposal, _impl_.title_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::FeeDiscountProposal, _impl_.description_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::FeeDiscountProposal, _impl_.schedule_),
    ~0u,
    ~0u,
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::BatchCommunityPoolSpendProposal, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::BatchCommunityPoolSpendProposal, _impl_.title_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::BatchCommunityPoolSpendProposal, _impl_.description_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::BatchCommunityPoolSpendProposal, _impl_.proposals_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgRewardsOptOut, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgRewardsOptOut, _impl_.sender_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgRewardsOptOutResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgReclaimLockedFunds, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgReclaimLockedFunds, _impl_.sender_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgReclaimLockedFunds, _impl_.lockedaccountpubkey_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgReclaimLockedFunds, _impl_.signature_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgReclaimLockedFundsResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgSignData, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgSignData, _impl_.signer_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgSignData, _impl_.data_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgSignDoc, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgSignDoc, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgSignDoc, _impl_.sign_type_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgSignDoc, _impl_.value_),
    ~0u,
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgAdminUpdateBinaryOptionsMarket, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgAdminUpdateBinaryOptionsMarket, _impl_.sender_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgAdminUpdateBinaryOptionsMarket, _impl_.market_id_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgAdminUpdateBinaryOptionsMarket, _impl_.settlement_price_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgAdminUpdateBinaryOptionsMarket, _impl_.expiration_timestamp_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgAdminUpdateBinaryOptionsMarket, _impl_.settlement_timestamp_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgAdminUpdateBinaryOptionsMarket, _impl_.status_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MsgAdminUpdateBinaryOptionsMarketResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::AtomicMarketOrderFeeMultiplierScheduleProposal, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::AtomicMarketOrderFeeMultiplierScheduleProposal, _impl_.title_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::AtomicMarketOrderFeeMultiplierScheduleProposal, _impl_.description_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::AtomicMarketOrderFeeMultiplierScheduleProposal, _impl_.market_fee_multipliers_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 10, -1, sizeof(::injective::exchange::v1beta1::MsgUpdateParams)},
        { 12, -1, -1, sizeof(::injective::exchange::v1beta1::MsgUpdateParamsResponse)},
        { 20, 31, -1, sizeof(::injective::exchange::v1beta1::MsgDeposit)},
        { 34, -1, -1, sizeof(::injective::exchange::v1beta1::MsgDepositResponse)},
        { 42, 53, -1, sizeof(::injective::exchange::v1beta1::MsgWithdraw)},
        { 56, -1, -1, sizeof(::injective::exchange::v1beta1::MsgWithdrawResponse)},
        { 64, 74, -1, sizeof(::injective::exchange::v1beta1::MsgCreateSpotLimitOrder)},
        { 76, -1, -1, sizeof(::injective::exchange::v1beta1::MsgCreateSpotLimitOrderResponse)},
        { 85, -1, -1, sizeof(::injective::exchange::v1beta1::MsgBatchCreateSpotLimitOrders)},
        { 95, -1, -1, sizeof(::injective::exchange::v1beta1::MsgBatchCreateSpotLimitOrdersResponse)},
        { 104, -1, -1, sizeof(::injective::exchange::v1beta1::MsgInstantSpotMarketLaunch)},
        { 118, -1, -1, sizeof(::injective::exchange::v1beta1::MsgInstantSpotMarketLaunchResponse)},
        { 126, -1, -1, sizeof(::injective::exchange::v1beta1::MsgInstantPerpetualMarketLaunch)},
        { 147, -1, -1, sizeof(::injective::exchange::v1beta1::MsgInstantPerpetualMarketLaunchResponse)},
        { 155, -1, -1, sizeof(::injective::exchange::v1beta1::MsgInstantBinaryOptionsMarketLaunch)},
        { 177, -1, -1, sizeof(::injective::exchange::v1beta1::MsgInstantBinaryOptionsMarketLaunchResponse)},
        { 185, -1, -1, sizeof(::injective::exchange::v1beta1::MsgInstantExpiryFuturesMarketLaunch)},
        { 207, -1, -1, sizeof(::injective::exchange::v1beta1::MsgInstantExpiryFuturesMarketLaunchResponse)},
        { 215, 225, -1, sizeof(::injective::exchange::v1beta1::MsgCreateSpotMarketOrder)},
        { 227, 237, -1, sizeof(::injective::exchange::v1beta1::MsgCreateSpotMarketOrderResponse)},
        { 239, -1, -1, sizeof(::injective::exchange::v1beta1::SpotMarketOrderResults)},
        { 250, 260, -1, sizeof(::injective::exchange::v1beta1::MsgCreateDerivativeLimitOrder)},
        { 262, -1, -1, sizeof(::injective::exchange::v1beta1::MsgCreateDerivativeLimitOrderResponse)},
        { 271, 281, -1, sizeof(::injective::exchange::v1beta1::MsgCreateBinaryOptionsLimitOrder)},
        { 283, -1, -1, sizeof(::injective::exchange::v1beta1::MsgCreateBinaryOptionsLimitOrderResponse)},
        { 292, -1, -1, sizeof(::injective::exchange::v1beta1::MsgBatchCreateDerivativeLimitOrders)},
        { 302, -1, -1, sizeof(::injective::exchange::v1beta1::MsgBatchCreateDerivativeLimitOrdersResponse)},
        { 311, -1, -1, sizeof(::injective::exchange::v1beta1::MsgCancelSpotOrder)},
        { 323, -1, -1, sizeof(::injective::exchange::v1beta1::MsgCancelSpotOrderResponse)},
        { 331, -1, -1, sizeof(::injective::exchange::v1beta1::MsgBatchCancelSpotOrders)},
        { 341, -1, -1, sizeof(::injective::exchange::v1beta1::MsgBatchCancelSpotOrdersResponse)},
        { 350, -1, -1, sizeof(::injective::exchange::v1beta1::MsgBatchCancelBinaryOptionsOrders)},
        { 360, -1, -1, sizeof(::injective::exchange::v1beta1::MsgBatchCancelBinaryOptionsOrdersResponse)},
        { 369, -1, -1, sizeof(::injective::exchange::v1beta1::MsgBatchUpdateOrders)},
        { 388, -1, -1, sizeof(::injective::exchange::v1beta1::MsgBatchUpdateOrdersResponse)},
        { 402, 412, -1, sizeof(::injective::exchange::v1beta1::MsgCreateDerivativeMarketOrder)},
        { 414, 424, -1, sizeof(::injective::exchange::v1beta1::MsgCreateDerivativeMarketOrderResponse)},
        { 426, 439, -1, sizeof(::injective::exchange::v1beta1::DerivativeMarketOrderResults)},
        { 444, 454, -1, sizeof(::injective::exchange::v1beta1::MsgCreateBinaryOptionsMarketOrder)},
        { 456, 466, -1, sizeof(::injective::exchange::v1beta1::MsgCreateBinaryOptionsMarketOrderResponse)},
        { 468, -1, -1, sizeof(::injective::exchange::v1beta1::MsgCancelDerivativeOrder)},
        { 481, -1, -1, sizeof(::injective::exchange::v1beta1::MsgCancelDerivativeOrderResponse)},
        { 489, -1, -1, sizeof(::injective::exchange::v1beta1::MsgCancelBinaryOptionsOrder)},
        { 502, -1, -1, sizeof(::injective::exchange::v1beta1::MsgCancelBinaryOptionsOrderResponse)},
        { 510, -1, -1, sizeof(::injective::exchange::v1beta1::OrderData)},
        { 522, -1, -1, sizeof(::injective::exchange::v1beta1::MsgBatchCancelDerivativeOrders)},
        { 532, -1, -1, sizeof(::injective::exchange::v1beta1::MsgBatchCancelDerivativeOrdersResponse)},
        { 541, 553, -1, sizeof(::injective::exchange::v1beta1::MsgSubaccountTransfer)},
        { 557, -1, -1, sizeof(::injective::exchange::v1beta1::MsgSubaccountTransferResponse)},
        { 565, 577, -1, sizeof(::injective::exchange::v1beta1::MsgExternalTransfer)},
        { 581, -1, -1, sizeof(::injective::exchange::v1beta1::MsgExternalTransferResponse)},
        { 589, 601, -1, sizeof(::injective::exchange::v1beta1::MsgLiquidatePosition)},
        { 605, -1, -1, sizeof(::injective::exchange::v1beta1::MsgLiquidatePositionResponse)},
        { 613, -1, -1, sizeof(::injective::exchange::v1beta1::MsgIncreasePositionMargin)},
        { 626, -1, -1, sizeof(::injective::exchange::v1beta1::MsgIncreasePositionMarginResponse)},
        { 634, -1, -1, sizeof(::injective::exchange::v1beta1::MsgPrivilegedExecuteContract)},
        { 646, -1, -1, sizeof(::injective::exchange::v1beta1::MsgPrivilegedExecuteContractResponse)},
        { 655, -1, -1, sizeof(::injective::exchange::v1beta1::SpotMarketParamUpdateProposal)},
        { 672, -1, -1, sizeof(::injective::exchange::v1beta1::ExchangeEnableProposal)},
        { 683, 702, -1, sizeof(::injective::exchange::v1beta1::BatchExchangeModificationProposal)},
        { 713, -1, -1, sizeof(::injective::exchange::v1beta1::SpotMarketLaunchProposal)},
        { 730, -1, -1, sizeof(::injective::exchange::v1beta1::PerpetualMarketLaunchProposal)},
        { 752, -1, -1, sizeof(::injective::exchange::v1beta1::BinaryOptionsMarketLaunchProposal)},
        { 775, -1, -1, sizeof(::injective::exchange::v1beta1::ExpiryFuturesMarketLaunchProposal)},
        { 798, 820, -1, sizeof(::injective::exchange::v1beta1::DerivativeMarketParamUpdateProposal)},
        { 834, -1, -1, sizeof(::injective::exchange::v1beta1::MarketForcedSettlementProposal)},
        { 846, -1, -1, sizeof(::injective::exchange::v1beta1::UpdateDenomDecimalsProposal)},
        { 857, 879, -1, sizeof(::injective::exchange::v1beta1::BinaryOptionsMarketParamUpdateProposal)},
        { 893, -1, -1, sizeof(::injective::exchange::v1beta1::ProviderOracleParams)},
        { 905, -1, -1, sizeof(::injective::exchange::v1beta1::OracleParams)},
        { 917, 929, -1, sizeof(::injective::exchange::v1beta1::TradingRewardCampaignLaunchProposal)},
        { 933, 946, -1, sizeof(::injective::exchange::v1beta1::TradingRewardCampaignUpdateProposal)},
        { 951, -1, -1, sizeof(::injective::exchange::v1beta1::RewardPointUpdate)},
        { 961, -1, -1, sizeof(::injective::exchange::v1beta1::TradingRewardPendingPointsUpdateProposal)},
        { 973, 984, -1, sizeof(::injective::exchange::v1beta1::FeeDiscountProposal)},
        { 987, -1, -1, sizeof(::injective::exchange::v1beta1::BatchCommunityPoolSpendProposal)},
        { 998, -1, -1, sizeof(::injective::exchange::v1beta1::MsgRewardsOptOut)},
        { 1007, -1, -1, sizeof(::injective::exchange::v1beta1::MsgRewardsOptOutResponse)},
        { 1015, -1, -1, sizeof(::injective::exchange::v1beta1::MsgReclaimLockedFunds)},
        { 1026, -1, -1, sizeof(::injective::exchange::v1beta1::MsgReclaimLockedFundsResponse)},
        { 1034, -1, -1, sizeof(::injective::exchange::v1beta1::MsgSignData)},
        { 1044, 1054, -1, sizeof(::injective::exchange::v1beta1::MsgSignDoc)},
        { 1056, -1, -1, sizeof(::injective::exchange::v1beta1::MsgAdminUpdateBinaryOptionsMarket)},
        { 1070, -1, -1, sizeof(::injective::exchange::v1beta1::MsgAdminUpdateBinaryOptionsMarketResponse)},
        { 1078, -1, -1, sizeof(::injective::exchange::v1beta1::AtomicMarketOrderFeeMultiplierScheduleProposal)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::injective::exchange::v1beta1::_MsgUpdateParams_default_instance_._instance,
    &::injective::exchange::v1beta1::_MsgUpdateParamsResponse_default_instance_._instance,
    &::injective::exchange::v1beta1::_MsgDeposit_default_instance_._instance,
    &::injective::exchange::v1beta1::_MsgDepositResponse_default_instance_._instance,
    &::injective::exchange::v1beta1::_MsgWithdraw_default_instance_._instance,
    &::injective::exchange::v1beta1::_MsgWithdrawResponse_default_instance_._instance,
    &::injective::exchange::v1beta1::_MsgCreateSpotLimitOrder_default_instance_._instance,
    &::injective::exchange::v1beta1::_MsgCreateSpotLimitOrderResponse_default_instance_._instance,
    &::injective::exchange::v1beta1::_MsgBatchCreateSpotLimitOrders_default_instance_._instance,
    &::injective::exchange::v1beta1::_MsgBatchCreateSpotLimitOrdersResponse_default_instance_._instance,
    &::injective::exchange::v1beta1::_MsgInstantSpotMarketLaunch_default_instance_._instance,
    &::injective::exchange::v1beta1::_MsgInstantSpotMarketLaunchResponse_default_instance_._instance,
    &::injective::exchange::v1beta1::_MsgInstantPerpetualMarketLaunch_default_instance_._instance,
    &::injective::exchange::v1beta1::_MsgInstantPerpetualMarketLaunchResponse_default_instance_._instance,
    &::injective::exchange::v1beta1::_MsgInstantBinaryOptionsMarketLaunch_default_instance_._instance,
    &::injective::exchange::v1beta1::_MsgInstantBinaryOptionsMarketLaunchResponse_default_instance_._instance,
    &::injective::exchange::v1beta1::_MsgInstantExpiryFuturesMarketLaunch_default_instance_._instance,
    &::injective::exchange::v1beta1::_MsgInstantExpiryFuturesMarketLaunchResponse_default_instance_._instance,
    &::injective::exchange::v1beta1::_MsgCreateSpotMarketOrder_default_instance_._instance,
    &::injective::exchange::v1beta1::_MsgCreateSpotMarketOrderResponse_default_instance_._instance,
    &::injective::exchange::v1beta1::_SpotMarketOrderResults_default_instance_._instance,
    &::injective::exchange::v1beta1::_MsgCreateDerivativeLimitOrder_default_instance_._instance,
    &::injective::exchange::v1beta1::_MsgCreateDerivativeLimitOrderResponse_default_instance_._instance,
    &::injective::exchange::v1beta1::_MsgCreateBinaryOptionsLimitOrder_default_instance_._instance,
    &::injective::exchange::v1beta1::_MsgCreateBinaryOptionsLimitOrderResponse_default_instance_._instance,
    &::injective::exchange::v1beta1::_MsgBatchCreateDerivativeLimitOrders_default_instance_._instance,
    &::injective::exchange::v1beta1::_MsgBatchCreateDerivativeLimitOrdersResponse_default_instance_._instance,
    &::injective::exchange::v1beta1::_MsgCancelSpotOrder_default_instance_._instance,
    &::injective::exchange::v1beta1::_MsgCancelSpotOrderResponse_default_instance_._instance,
    &::injective::exchange::v1beta1::_MsgBatchCancelSpotOrders_default_instance_._instance,
    &::injective::exchange::v1beta1::_MsgBatchCancelSpotOrdersResponse_default_instance_._instance,
    &::injective::exchange::v1beta1::_MsgBatchCancelBinaryOptionsOrders_default_instance_._instance,
    &::injective::exchange::v1beta1::_MsgBatchCancelBinaryOptionsOrdersResponse_default_instance_._instance,
    &::injective::exchange::v1beta1::_MsgBatchUpdateOrders_default_instance_._instance,
    &::injective::exchange::v1beta1::_MsgBatchUpdateOrdersResponse_default_instance_._instance,
    &::injective::exchange::v1beta1::_MsgCreateDerivativeMarketOrder_default_instance_._instance,
    &::injective::exchange::v1beta1::_MsgCreateDerivativeMarketOrderResponse_default_instance_._instance,
    &::injective::exchange::v1beta1::_DerivativeMarketOrderResults_default_instance_._instance,
    &::injective::exchange::v1beta1::_MsgCreateBinaryOptionsMarketOrder_default_instance_._instance,
    &::injective::exchange::v1beta1::_MsgCreateBinaryOptionsMarketOrderResponse_default_instance_._instance,
    &::injective::exchange::v1beta1::_MsgCancelDerivativeOrder_default_instance_._instance,
    &::injective::exchange::v1beta1::_MsgCancelDerivativeOrderResponse_default_instance_._instance,
    &::injective::exchange::v1beta1::_MsgCancelBinaryOptionsOrder_default_instance_._instance,
    &::injective::exchange::v1beta1::_MsgCancelBinaryOptionsOrderResponse_default_instance_._instance,
    &::injective::exchange::v1beta1::_OrderData_default_instance_._instance,
    &::injective::exchange::v1beta1::_MsgBatchCancelDerivativeOrders_default_instance_._instance,
    &::injective::exchange::v1beta1::_MsgBatchCancelDerivativeOrdersResponse_default_instance_._instance,
    &::injective::exchange::v1beta1::_MsgSubaccountTransfer_default_instance_._instance,
    &::injective::exchange::v1beta1::_MsgSubaccountTransferResponse_default_instance_._instance,
    &::injective::exchange::v1beta1::_MsgExternalTransfer_default_instance_._instance,
    &::injective::exchange::v1beta1::_MsgExternalTransferResponse_default_instance_._instance,
    &::injective::exchange::v1beta1::_MsgLiquidatePosition_default_instance_._instance,
    &::injective::exchange::v1beta1::_MsgLiquidatePositionResponse_default_instance_._instance,
    &::injective::exchange::v1beta1::_MsgIncreasePositionMargin_default_instance_._instance,
    &::injective::exchange::v1beta1::_MsgIncreasePositionMarginResponse_default_instance_._instance,
    &::injective::exchange::v1beta1::_MsgPrivilegedExecuteContract_default_instance_._instance,
    &::injective::exchange::v1beta1::_MsgPrivilegedExecuteContractResponse_default_instance_._instance,
    &::injective::exchange::v1beta1::_SpotMarketParamUpdateProposal_default_instance_._instance,
    &::injective::exchange::v1beta1::_ExchangeEnableProposal_default_instance_._instance,
    &::injective::exchange::v1beta1::_BatchExchangeModificationProposal_default_instance_._instance,
    &::injective::exchange::v1beta1::_SpotMarketLaunchProposal_default_instance_._instance,
    &::injective::exchange::v1beta1::_PerpetualMarketLaunchProposal_default_instance_._instance,
    &::injective::exchange::v1beta1::_BinaryOptionsMarketLaunchProposal_default_instance_._instance,
    &::injective::exchange::v1beta1::_ExpiryFuturesMarketLaunchProposal_default_instance_._instance,
    &::injective::exchange::v1beta1::_DerivativeMarketParamUpdateProposal_default_instance_._instance,
    &::injective::exchange::v1beta1::_MarketForcedSettlementProposal_default_instance_._instance,
    &::injective::exchange::v1beta1::_UpdateDenomDecimalsProposal_default_instance_._instance,
    &::injective::exchange::v1beta1::_BinaryOptionsMarketParamUpdateProposal_default_instance_._instance,
    &::injective::exchange::v1beta1::_ProviderOracleParams_default_instance_._instance,
    &::injective::exchange::v1beta1::_OracleParams_default_instance_._instance,
    &::injective::exchange::v1beta1::_TradingRewardCampaignLaunchProposal_default_instance_._instance,
    &::injective::exchange::v1beta1::_TradingRewardCampaignUpdateProposal_default_instance_._instance,
    &::injective::exchange::v1beta1::_RewardPointUpdate_default_instance_._instance,
    &::injective::exchange::v1beta1::_TradingRewardPendingPointsUpdateProposal_default_instance_._instance,
    &::injective::exchange::v1beta1::_FeeDiscountProposal_default_instance_._instance,
    &::injective::exchange::v1beta1::_BatchCommunityPoolSpendProposal_default_instance_._instance,
    &::injective::exchange::v1beta1::_MsgRewardsOptOut_default_instance_._instance,
    &::injective::exchange::v1beta1::_MsgRewardsOptOutResponse_default_instance_._instance,
    &::injective::exchange::v1beta1::_MsgReclaimLockedFunds_default_instance_._instance,
    &::injective::exchange::v1beta1::_MsgReclaimLockedFundsResponse_default_instance_._instance,
    &::injective::exchange::v1beta1::_MsgSignData_default_instance_._instance,
    &::injective::exchange::v1beta1::_MsgSignDoc_default_instance_._instance,
    &::injective::exchange::v1beta1::_MsgAdminUpdateBinaryOptionsMarket_default_instance_._instance,
    &::injective::exchange::v1beta1::_MsgAdminUpdateBinaryOptionsMarketResponse_default_instance_._instance,
    &::injective::exchange::v1beta1::_AtomicMarketOrderFeeMultiplierScheduleProposal_default_instance_._instance,
};
const char descriptor_table_protodef_injective_2fexchange_2fv1beta1_2ftx_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n#injective/exchange/v1beta1/tx.proto\022\032i"
    "njective.exchange.v1beta1\032\036cosmos/base/v"
    "1beta1/coin.proto\032.cosmos/distribution/v"
    "1beta1/distribution.proto\032\027cosmos/msg/v1"
    "/msg.proto\032\031cosmos_proto/cosmos.proto\032\024g"
    "ogoproto/gogo.proto\032)injective/exchange/"
    "v1beta1/exchange.proto\032%injective/oracle"
    "/v1beta1/oracle.proto\"\233\001\n\017MsgUpdateParam"
    "s\0226\n\tauthority\030\001 \001(\tB\030\322\264-\024cosmos.Address"
    "StringR\tauthority\022@\n\006params\030\002 \001(\0132\".inje"
    "ctive.exchange.v1beta1.ParamsB\004\310\336\037\000R\006par"
    "ams:\016\202\347\260*\tauthority\"\031\n\027MsgUpdateParamsRe"
    "sponse\"\227\001\n\nMsgDeposit\022\026\n\006sender\030\001 \001(\tR\006s"
    "ender\022#\n\rsubaccount_id\030\002 \001(\tR\014subaccount"
    "Id\0227\n\006amount\030\003 \001(\0132\031.cosmos.base.v1beta1"
    ".CoinB\004\310\336\037\000R\006amount:\023\210\240\037\000\350\240\037\000\202\347\260*\006sender"
    "\"\024\n\022MsgDepositResponse\"\230\001\n\013MsgWithdraw\022\026"
    "\n\006sender\030\001 \001(\tR\006sender\022#\n\rsubaccount_id\030"
    "\002 \001(\tR\014subaccountId\0227\n\006amount\030\003 \001(\0132\031.co"
    "smos.base.v1beta1.CoinB\004\310\336\037\000R\006amount:\023\210\240"
    "\037\000\350\240\037\000\202\347\260*\006sender\"\025\n\023MsgWithdrawResponse"
    "\"\211\001\n\027MsgCreateSpotLimitOrder\022\026\n\006sender\030\001"
    " \001(\tR\006sender\022A\n\005order\030\002 \001(\0132%.injective."
    "exchange.v1beta1.SpotOrderB\004\310\336\037\000R\005order:"
    "\023\210\240\037\000\350\240\037\000\202\347\260*\006sender\"J\n\037MsgCreateSpotLim"
    "itOrderResponse\022\035\n\norder_hash\030\001 \001(\tR\tord"
    "erHash:\010\210\240\037\000\350\240\037\000\"\221\001\n\035MsgBatchCreateSpotL"
    "imitOrders\022\026\n\006sender\030\001 \001(\tR\006sender\022C\n\006or"
    "ders\030\002 \003(\0132%.injective.exchange.v1beta1."
    "SpotOrderB\004\310\336\037\000R\006orders:\023\210\240\037\000\350\240\037\000\202\347\260*\006se"
    "nder\"T\n%MsgBatchCreateSpotLimitOrdersRes"
    "ponse\022!\n\014order_hashes\030\001 \003(\tR\013orderHashes"
    ":\010\210\240\037\000\350\240\037\000\"\345\002\n\032MsgInstantSpotMarketLaunc"
    "h\022\026\n\006sender\030\001 \001(\tR\006sender\022\026\n\006ticker\030\002 \001("
    "\tR\006ticker\022\035\n\nbase_denom\030\003 \001(\tR\tbaseDenom"
    "\022\037\n\013quote_denom\030\004 \001(\tR\nquoteDenom\022]\n\023min"
    "_price_tick_size\030\005 \001(\tB.\310\336\037\000\332\336\037&github.c"
    "om/cosmos/cosmos-sdk/types.DecR\020minPrice"
    "TickSize\022c\n\026min_quantity_tick_size\030\006 \001(\t"
    "B.\310\336\037\000\332\336\037&github.com/cosmos/cosmos-sdk/t"
    "ypes.DecR\023minQuantityTickSize:\023\210\240\037\000\350\240\037\000\202"
    "\347\260*\006sender\"$\n\"MsgInstantSpotMarketLaunch"
    "Response\"\376\006\n\037MsgInstantPerpetualMarketLa"
    "unch\022\026\n\006sender\030\001 \001(\tR\006sender\022\026\n\006ticker\030\002"
    " \001(\tR\006ticker\022\037\n\013quote_denom\030\003 \001(\tR\nquote"
    "Denom\022\037\n\013oracle_base\030\004 \001(\tR\noracleBase\022!"
    "\n\014oracle_quote\030\005 \001(\tR\013oracleQuote\022.\n\023ora"
    "cle_scale_factor\030\006 \001(\rR\021oracleScaleFacto"
    "r\022E\n\013oracle_type\030\007 \001(\0162$.injective.oracl"
    "e.v1beta1.OracleTypeR\noracleType\022T\n\016make"
    "r_fee_rate\030\010 \001(\tB.\310\336\037\000\332\336\037&github.com/cos"
    "mos/cosmos-sdk/types.DecR\014makerFeeRate\022T"
    "\n\016taker_fee_rate\030\t \001(\tB.\310\336\037\000\332\336\037&github.c"
    "om/cosmos/cosmos-sdk/types.DecR\014takerFee"
    "Rate\022`\n\024initial_margin_ratio\030\n \001(\tB.\310\336\037\000"
    "\332\336\037&github.com/cosmos/cosmos-sdk/types.D"
    "ecR\022initialMarginRatio\022h\n\030maintenance_ma"
    "rgin_ratio\030\013 \001(\tB.\310\336\037\000\332\336\037&github.com/cos"
    "mos/cosmos-sdk/types.DecR\026maintenanceMar"
    "ginRatio\022]\n\023min_price_tick_size\030\014 \001(\tB.\310"
    "\336\037\000\332\336\037&github.com/cosmos/cosmos-sdk/type"
    "s.DecR\020minPriceTickSize\022c\n\026min_quantity_"
    "tick_size\030\r \001(\tB.\310\336\037\000\332\336\037&github.com/cosm"
    "os/cosmos-sdk/types.DecR\023minQuantityTick"
    "Size:\023\210\240\037\000\350\240\037\000\202\347\260*\006sender\")\n\'MsgInstantP"
    "erpetualMarketLaunchResponse\"\274\006\n#MsgInst"
    "antBinaryOptionsMarketLaunch\022\026\n\006sender\030\001"
    " \001(\tR\006sender\022\026\n\006ticker\030\002 \001(\tR\006ticker\022#\n\r"
    "oracle_symbol\030\003 \001(\tR\014oracleSymbol\022\'\n\017ora"
    "cle_provider\030\004 \001(\tR\016oracleProvider\022E\n\013or"
    "acle_type\030\005 \001(\0162$.injective.oracle.v1bet"
    "a1.OracleTypeR\noracleType\022.\n\023oracle_scal"
    "e_factor\030\006 \001(\rR\021oracleScaleFactor\022T\n\016mak"
    "er_fee_rate\030\007 \001(\tB.\310\336\037\000\332\336\037&github.com/co"
    "smos/cosmos-sdk/types.DecR\014makerFeeRate\022"
    "T\n\016taker_fee_rate\030\010 \001(\tB.\310\336\037\000\332\336\037&github."
    "com/cosmos/cosmos-sdk/types.DecR\014takerFe"
    "eRate\0221\n\024expiration_timestamp\030\t \001(\003R\023exp"
    "irationTimestamp\0221\n\024settlement_timestamp"
    "\030\n \001(\003R\023settlementTimestamp\022\024\n\005admin\030\013 \001"
    "(\tR\005admin\022\037\n\013quote_denom\030\014 \001(\tR\nquoteDen"
    "om\022]\n\023min_price_tick_size\030\r \001(\tB.\310\336\037\000\332\336\037"
    "&github.com/cosmos/cosmos-sdk/types.DecR"
    "\020minPriceTickSize\022c\n\026min_quantity_tick_s"
    "ize\030\016 \001(\tB.\310\336\037\000\332\336\037&github.com/cosmos/cos"
    "mos-sdk/types.DecR\023minQuantityTickSize:\023"
    "\210\240\037\000\350\240\037\000\202\347\260*\006sender\"-\n+MsgInstantBinaryO"
    "ptionsMarketLaunchResponse\"\232\007\n#MsgInstan"
    "tExpiryFuturesMarketLaunch\022\026\n\006sender\030\001 \001"
    "(\tR\006sender\022\026\n\006ticker\030\002 \001(\tR\006ticker\022\037\n\013qu"
    "ote_denom\030\003 \001(\tR\nquoteDenom\022\037\n\013oracle_ba"
    "se\030\004 \001(\tR\noracleBase\022!\n\014oracle_quote\030\005 \001"
    "(\tR\013oracleQuote\022E\n\013oracle_type\030\006 \001(\0162$.i"
    "njective.oracle.v1beta1.OracleTypeR\norac"
    "leType\022.\n\023oracle_scale_factor\030\007 \001(\rR\021ora"
    "cleScaleFactor\022\026\n\006expiry\030\010 \001(\003R\006expiry\022T"
    "\n\016maker_fee_rate\030\t \001(\tB.\310\336\037\000\332\336\037&github.c"
    "om/cosmos/cosmos-sdk/types.DecR\014makerFee"
    "Rate\022T\n\016taker_fee_rate\030\n \001(\tB.\310\336\037\000\332\336\037&gi"
    "thub.com/cosmos/cosmos-sdk/types.DecR\014ta"
    "kerFeeRate\022`\n\024initial_margin_ratio\030\013 \001(\t"
    "B.\310\336\037\000\332\336\037&github.com/cosmos/cosmos-sdk/t"
    "ypes.DecR\022initialMarginRatio\022h\n\030maintena"
    "nce_margin_ratio\030\014 \001(\tB.\310\336\037\000\332\336\037&github.c"
    "om/cosmos/cosmos-sdk/types.DecR\026maintena"
    "nceMarginRatio\022]\n\023min_price_tick_size\030\r "
    "\001(\tB.\310\336\037\000\332\336\037&github.com/cosmos/cosmos-sd"
    "k/types.DecR\020minPriceTickSize\022c\n\026min_qua"
    "ntity_tick_size\030\016 \001(\tB.\310\336\037\000\332\336\037&github.co"
    "m/cosmos/cosmos-sdk/types.DecR\023minQuanti"
    "tyTickSize:\023\210\240\037\000\350\240\037\000\202\347\260*\006sender\"-\n+MsgIn"
    "stantExpiryFuturesMarketLaunchResponse\"\212"
    "\001\n\030MsgCreateSpotMarketOrder\022\026\n\006sender\030\001 "
    "\001(\tR\006sender\022A\n\005order\030\002 \001(\0132%.injective.e"
    "xchange.v1beta1.SpotOrderB\004\310\336\037\000R\005order:\023"
    "\210\240\037\000\350\240\037\000\202\347\260*\006sender\"\237\001\n MsgCreateSpotMar"
    "ketOrderResponse\022\035\n\norder_hash\030\001 \001(\tR\tor"
    "derHash\022R\n\007results\030\002 \001(\01322.injective.exc"
    "hange.v1beta1.SpotMarketOrderResultsB\004\310\336"
    "\037\001R\007results:\010\210\240\037\000\350\240\037\000\"\366\001\n\026SpotMarketOrde"
    "rResults\022J\n\010quantity\030\001 \001(\tB.\310\336\037\000\332\336\037&gith"
    "ub.com/cosmos/cosmos-sdk/types.DecR\010quan"
    "tity\022D\n\005price\030\002 \001(\tB.\310\336\037\000\332\336\037&github.com/"
    "cosmos/cosmos-sdk/types.DecR\005price\022@\n\003fe"
    "e\030\003 \001(\tB.\310\336\037\000\332\336\037&github.com/cosmos/cosmo"
    "s-sdk/types.DecR\003fee:\010\210\240\037\000\350\240\037\000\"\221\001\n\035MsgCr"
    "eateDerivativeLimitOrder\022\026\n\006sender\030\001 \001(\t"
    "R\006sender\022G\n\005order\030\002 \001(\0132+.injective.exch"
    "ange.v1beta1.DerivativeOrderB\004\310\336\037\000R\005orde"
    "r:\017\210\240\037\000\202\347\260*\006sender\"P\n%MsgCreateDerivativ"
    "eLimitOrderResponse\022\035\n\norder_hash\030\001 \001(\tR"
    "\torderHash:\010\210\240\037\000\350\240\037\000\"\224\001\n MsgCreateBinary"
    "OptionsLimitOrder\022\026\n\006sender\030\001 \001(\tR\006sende"
    "r\022G\n\005order\030\002 \001(\0132+.injective.exchange.v1"
    "beta1.DerivativeOrderB\004\310\336\037\000R\005order:\017\210\240\037\000"
    "\202\347\260*\006sender\"S\n(MsgCreateBinaryOptionsLim"
    "itOrderResponse\022\035\n\norder_hash\030\001 \001(\tR\tord"
    "erHash:\010\210\240\037\000\350\240\037\000\"\231\001\n#MsgBatchCreateDeriv"
    "ativeLimitOrders\022\026\n\006sender\030\001 \001(\tR\006sender"
    "\022I\n\006orders\030\002 \003(\0132+.injective.exchange.v1"
    "beta1.DerivativeOrderB\004\310\336\037\000R\006orders:\017\210\240\037"
    "\000\202\347\260*\006sender\"Z\n+MsgBatchCreateDerivative"
    "LimitOrdersResponse\022!\n\014order_hashes\030\001 \003("
    "\tR\013orderHashes:\010\210\240\037\000\350\240\037\000\"\236\001\n\022MsgCancelSp"
    "otOrder\022\026\n\006sender\030\001 \001(\tR\006sender\022\033\n\tmarke"
    "t_id\030\002 \001(\tR\010marketId\022#\n\rsubaccount_id\030\003 "
    "\001(\tR\014subaccountId\022\035\n\norder_hash\030\004 \001(\tR\to"
    "rderHash:\017\210\240\037\000\202\347\260*\006sender\"\034\n\032MsgCancelSp"
    "otOrderResponse\"\204\001\n\030MsgBatchCancelSpotOr"
    "ders\022\026\n\006sender\030\001 \001(\tR\006sender\022\?\n\004data\030\002 \003"
    "(\0132%.injective.exchange.v1beta1.OrderDat"
    "aB\004\310\336\037\000R\004data:\017\210\240\037\000\202\347\260*\006sender\"F\n MsgBat"
    "chCancelSpotOrdersResponse\022\030\n\007success\030\001 "
    "\003(\010R\007success:\010\210\240\037\000\350\240\037\000\"\215\001\n!MsgBatchCance"
    "lBinaryOptionsOrders\022\026\n\006sender\030\001 \001(\tR\006se"
    "nder\022\?\n\004data\030\002 \003(\0132%.injective.exchange."
    "v1beta1.OrderDataB\004\310\336\037\000R\004data:\017\210\240\037\000\202\347\260*\006"
    "sender\"O\n)MsgBatchCancelBinaryOptionsOrd"
    "ersResponse\022\030\n\007success\030\001 \003(\010R\007success:\010\210"
    "\240\037\000\350\240\037\000\"\320\007\n\024MsgBatchUpdateOrders\022\026\n\006send"
    "er\030\001 \001(\tR\006sender\022#\n\rsubaccount_id\030\002 \001(\tR"
    "\014subaccountId\022\?\n\035spot_market_ids_to_canc"
    "el_all\030\003 \003(\tR\030spotMarketIdsToCancelAll\022K"
    "\n#derivative_market_ids_to_cancel_all\030\004 "
    "\003(\tR\036derivativeMarketIdsToCancelAll\022^\n\025s"
    "pot_orders_to_cancel\030\005 \003(\0132%.injective.e"
    "xchange.v1beta1.OrderDataB\004\310\336\037\001R\022spotOrd"
    "ersToCancel\022j\n\033derivative_orders_to_canc"
    "el\030\006 \003(\0132%.injective.exchange.v1beta1.Or"
    "derDataB\004\310\336\037\001R\030derivativeOrdersToCancel\022"
    "^\n\025spot_orders_to_create\030\007 \003(\0132%.injecti"
    "ve.exchange.v1beta1.SpotOrderB\004\310\336\037\001R\022spo"
    "tOrdersToCreate\022p\n\033derivative_orders_to_"
    "create\030\010 \003(\0132+.injective.exchange.v1beta"
    "1.DerivativeOrderB\004\310\336\037\001R\030derivativeOrder"
    "sToCreate\022q\n\037binary_options_orders_to_ca"
    "ncel\030\t \003(\0132%.injective.exchange.v1beta1."
    "OrderDataB\004\310\336\037\001R\033binaryOptionsOrdersToCa"
    "ncel\022R\n\'binary_options_market_ids_to_can"
    "cel_all\030\n \003(\tR!binaryOptionsMarketIdsToC"
    "ancelAll\022w\n\037binary_options_orders_to_cre"
    "ate\030\013 \003(\0132+.injective.exchange.v1beta1.D"
    "erivativeOrderB\004\310\336\037\001R\033binaryOptionsOrder"
    "sToCreate:\017\210\240\037\000\202\347\260*\006sender\"\372\002\n\034MsgBatchU"
    "pdateOrdersResponse\022.\n\023spot_cancel_succe"
    "ss\030\001 \003(\010R\021spotCancelSuccess\022:\n\031derivativ"
    "e_cancel_success\030\002 \003(\010R\027derivativeCancel"
    "Success\022*\n\021spot_order_hashes\030\003 \003(\tR\017spot"
    "OrderHashes\0226\n\027derivative_order_hashes\030\004"
    " \003(\tR\025derivativeOrderHashes\022A\n\035binary_op"
    "tions_cancel_success\030\005 \003(\010R\032binaryOption"
    "sCancelSuccess\022=\n\033binary_options_order_h"
    "ashes\030\006 \003(\tR\030binaryOptionsOrderHashes:\010\210"
    "\240\037\000\350\240\037\000\"\222\001\n\036MsgCreateDerivativeMarketOrd"
    "er\022\026\n\006sender\030\001 \001(\tR\006sender\022G\n\005order\030\002 \001("
    "\0132+.injective.exchange.v1beta1.Derivativ"
    "eOrderB\004\310\336\037\000R\005order:\017\210\240\037\000\202\347\260*\006sender\"\253\001\n"
    "&MsgCreateDerivativeMarketOrderResponse\022"
    "\035\n\norder_hash\030\001 \001(\tR\torderHash\022X\n\007result"
    "s\030\002 \001(\01328.injective.exchange.v1beta1.Der"
    "ivativeMarketOrderResultsB\004\310\336\037\001R\007results"
    ":\010\210\240\037\000\350\240\037\000\"\234\003\n\034DerivativeMarketOrderResu"
    "lts\022J\n\010quantity\030\001 \001(\tB.\310\336\037\000\332\336\037&github.co"
    "m/cosmos/cosmos-sdk/types.DecR\010quantity\022"
    "D\n\005price\030\002 \001(\tB.\310\336\037\000\332\336\037&github.com/cosmo"
    "s/cosmos-sdk/types.DecR\005price\022@\n\003fee\030\003 \001"
    "(\tB.\310\336\037\000\332\336\037&github.com/cosmos/cosmos-sdk"
    "/types.DecR\003fee\022V\n\016position_delta\030\004 \001(\0132"
    ").injective.exchange.v1beta1.PositionDel"
    "taB\004\310\336\037\000R\rpositionDelta\022F\n\006payout\030\005 \001(\tB"
    ".\310\336\037\000\332\336\037&github.com/cosmos/cosmos-sdk/ty"
    "pes.DecR\006payout:\010\210\240\037\000\350\240\037\000\"\225\001\n!MsgCreateB"
    "inaryOptionsMarketOrder\022\026\n\006sender\030\001 \001(\tR"
    "\006sender\022G\n\005order\030\002 \001(\0132+.injective.excha"
    "nge.v1beta1.DerivativeOrderB\004\310\336\037\000R\005order"
    ":\017\210\240\037\000\202\347\260*\006sender\"\256\001\n)MsgCreateBinaryOpt"
    "ionsMarketOrderResponse\022\035\n\norder_hash\030\001 "
    "\001(\tR\torderHash\022X\n\007results\030\002 \001(\01328.inject"
    "ive.exchange.v1beta1.DerivativeMarketOrd"
    "erResultsB\004\310\336\037\001R\007results:\010\210\240\037\000\350\240\037\000\"\303\001\n\030M"
    "sgCancelDerivativeOrder\022\026\n\006sender\030\001 \001(\tR"
    "\006sender\022\033\n\tmarket_id\030\002 \001(\tR\010marketId\022#\n\r"
    "subaccount_id\030\003 \001(\tR\014subaccountId\022\035\n\nord"
    "er_hash\030\004 \001(\tR\torderHash\022\035\n\norder_mask\030\005"
    " \001(\005R\torderMask:\017\210\240\037\000\202\347\260*\006sender\"\"\n MsgC"
    "ancelDerivativeOrderResponse\"\306\001\n\033MsgCanc"
    "elBinaryOptionsOrder\022\026\n\006sender\030\001 \001(\tR\006se"
    "nder\022\033\n\tmarket_id\030\002 \001(\tR\010marketId\022#\n\rsub"
    "account_id\030\003 \001(\tR\014subaccountId\022\035\n\norder_"
    "hash\030\004 \001(\tR\torderHash\022\035\n\norder_mask\030\005 \001("
    "\005R\torderMask:\017\210\240\037\000\202\347\260*\006sender\"%\n#MsgCanc"
    "elBinaryOptionsOrderResponse\"\213\001\n\tOrderDa"
    "ta\022\033\n\tmarket_id\030\001 \001(\tR\010marketId\022#\n\rsubac"
    "count_id\030\002 \001(\tR\014subaccountId\022\035\n\norder_ha"
    "sh\030\003 \001(\tR\torderHash\022\035\n\norder_mask\030\004 \001(\005R"
    "\torderMask\"\212\001\n\036MsgBatchCancelDerivativeO"
    "rders\022\026\n\006sender\030\001 \001(\tR\006sender\022\?\n\004data\030\002 "
    "\003(\0132%.injective.exchange.v1beta1.OrderDa"
    "taB\004\310\336\037\000R\004data:\017\210\240\037\000\202\347\260*\006sender\"L\n&MsgBa"
    "tchCancelDerivativeOrdersResponse\022\030\n\007suc"
    "cess\030\001 \003(\010R\007success:\010\210\240\037\000\350\240\037\000\"\343\001\n\025MsgSub"
    "accountTransfer\022\026\n\006sender\030\001 \001(\tR\006sender\022"
    "0\n\024source_subaccount_id\030\002 \001(\tR\022sourceSub"
    "accountId\022:\n\031destination_subaccount_id\030\003"
    " \001(\tR\027destinationSubaccountId\0227\n\006amount\030"
    "\004 \001(\0132\031.cosmos.base.v1beta1.CoinB\004\310\336\037\000R\006"
    "amount:\013\202\347\260*\006sender\"\037\n\035MsgSubaccountTran"
    "sferResponse\"\341\001\n\023MsgExternalTransfer\022\026\n\006"
    "sender\030\001 \001(\tR\006sender\0220\n\024source_subaccoun"
    "t_id\030\002 \001(\tR\022sourceSubaccountId\022:\n\031destin"
    "ation_subaccount_id\030\003 \001(\tR\027destinationSu"
    "baccountId\0227\n\006amount\030\004 \001(\0132\031.cosmos.base"
    ".v1beta1.CoinB\004\310\336\037\000R\006amount:\013\202\347\260*\006sender"
    "\"\035\n\033MsgExternalTransferResponse\"\306\001\n\024MsgL"
    "iquidatePosition\022\026\n\006sender\030\001 \001(\tR\006sender"
    "\022#\n\rsubaccount_id\030\002 \001(\tR\014subaccountId\022\033\n"
    "\tmarket_id\030\003 \001(\tR\010marketId\022G\n\005order\030\004 \001("
    "\0132+.injective.exchange.v1beta1.Derivativ"
    "eOrderB\004\310\336\037\001R\005order:\013\202\347\260*\006sender\"\036\n\034MsgL"
    "iquidatePositionResponse\"\223\002\n\031MsgIncrease"
    "PositionMargin\022\026\n\006sender\030\001 \001(\tR\006sender\0220"
    "\n\024source_subaccount_id\030\002 \001(\tR\022sourceSuba"
    "ccountId\022:\n\031destination_subaccount_id\030\003 "
    "\001(\tR\027destinationSubaccountId\022\033\n\tmarket_i"
    "d\030\004 \001(\tR\010marketId\022F\n\006amount\030\005 \001(\tB.\310\336\037\000\332"
    "\336\037&github.com/cosmos/cosmos-sdk/types.De"
    "cR\006amount:\013\202\347\260*\006sender\"#\n!MsgIncreasePos"
    "itionMarginResponse\"\240\001\n\034MsgPrivilegedExe"
    "cuteContract\022\026\n\006sender\030\001 \001(\tR\006sender\022\024\n\005"
    "funds\030\002 \001(\tR\005funds\022)\n\020contract_address\030\003"
    " \001(\tR\017contractAddress\022\022\n\004data\030\004 \001(\tR\004dat"
    "a:\023\210\240\037\000\350\240\037\000\202\347\260*\006sender\"\247\001\n$MsgPrivileged"
    "ExecuteContractResponse\022j\n\nfunds_diff\030\001 "
    "\003(\0132\031.cosmos.base.v1beta1.CoinB0\310\336\037\000\252\337\037("
    "github.com/cosmos/cosmos-sdk/types.Coins"
    "R\tfundsDiff:\023\210\240\037\000\350\240\037\000\202\347\260*\006sender\"\263\005\n\035Spo"
    "tMarketParamUpdateProposal\022\024\n\005title\030\001 \001("
    "\tR\005title\022 \n\013description\030\002 \001(\tR\013descripti"
    "on\022\033\n\tmarket_id\030\003 \001(\tR\010marketId\022T\n\016maker"
    "_fee_rate\030\004 \001(\tB.\310\336\037\001\332\336\037&github.com/cosm"
    "os/cosmos-sdk/types.DecR\014makerFeeRate\022T\n"
    "\016taker_fee_rate\030\005 \001(\tB.\310\336\037\001\332\336\037&github.co"
    "m/cosmos/cosmos-sdk/types.DecR\014takerFeeR"
    "ate\022c\n\026relayer_fee_share_rate\030\006 \001(\tB.\310\336\037"
    "\001\332\336\037&github.com/cosmos/cosmos-sdk/types."
    "DecR\023relayerFeeShareRate\022]\n\023min_price_ti"
    "ck_size\030\007 \001(\tB.\310\336\037\001\332\336\037&github.com/cosmos"
    "/cosmos-sdk/types.DecR\020minPriceTickSize\022"
    "c\n\026min_quantity_tick_size\030\010 \001(\tB.\310\336\037\001\332\336\037"
    "&github.com/cosmos/cosmos-sdk/types.DecR"
    "\023minQuantityTickSize\022@\n\006status\030\t \001(\0162(.i"
    "njective.exchange.v1beta1.MarketStatusR\006"
    "status:&\210\240\037\000\350\240\037\000\312\264-\032cosmos.gov.v1beta1.C"
    "ontent\"\250\001\n\026ExchangeEnableProposal\022\024\n\005tit"
    "le\030\001 \001(\tR\005title\022 \n\013description\030\002 \001(\tR\013de"
    "scription\022L\n\014exchangeType\030\003 \001(\0162(.inject"
    "ive.exchange.v1beta1.ExchangeTypeR\014excha"
    "ngeType:\010\210\240\037\000\350\240\037\000\"\370\n\n!BatchExchangeModif"
    "icationProposal\022\024\n\005title\030\001 \001(\tR\005title\022 \n"
    "\013description\030\002 \001(\tR\013description\022\205\001\n\"spot"
    "_market_param_update_proposals\030\003 \003(\01329.i"
    "njective.exchange.v1beta1.SpotMarketPara"
    "mUpdateProposalR\036spotMarketParamUpdatePr"
    "oposals\022\227\001\n(derivative_market_param_upda"
    "te_proposals\030\004 \003(\0132\?.injective.exchange."
    "v1beta1.DerivativeMarketParamUpdatePropo"
    "salR$derivativeMarketParamUpdateProposal"
    "s\022u\n\034spot_market_launch_proposals\030\005 \003(\0132"
    "4.injective.exchange.v1beta1.SpotMarketL"
    "aunchProposalR\031spotMarketLaunchProposals"
    "\022\204\001\n!perpetual_market_launch_proposals\030\006"
    " \003(\01329.injective.exchange.v1beta1.Perpet"
    "ualMarketLaunchProposalR\036perpetualMarket"
    "LaunchProposals\022\221\001\n&expiry_futures_marke"
    "t_launch_proposals\030\007 \003(\0132=.injective.exc"
    "hange.v1beta1.ExpiryFuturesMarketLaunchP"
    "roposalR\"expiryFuturesMarketLaunchPropos"
    "als\022\225\001\n\'trading_reward_campaign_update_p"
    "roposal\030\010 \001(\0132\?.injective.exchange.v1bet"
    "a1.TradingRewardCampaignUpdateProposalR#"
    "tradingRewardCampaignUpdateProposal\022\221\001\n&"
    "binary_options_market_launch_proposals\030\t"
    " \003(\0132=.injective.exchange.v1beta1.Binary"
    "OptionsMarketLaunchProposalR\"binaryOptio"
    "nsMarketLaunchProposals\022\224\001\n%binary_optio"
    "ns_param_update_proposals\030\n \003(\0132B.inject"
    "ive.exchange.v1beta1.BinaryOptionsMarket"
    "ParamUpdateProposalR!binaryOptionsParamU"
    "pdateProposals\022|\n\036denom_decimals_update_"
    "proposal\030\013 \001(\01327.injective.exchange.v1be"
    "ta1.UpdateDenomDecimalsProposalR\033denomDe"
    "cimalsUpdateProposal:&\210\240\037\000\350\240\037\000\312\264-\032cosmos"
    ".gov.v1beta1.Content\"\302\004\n\030SpotMarketLaunc"
    "hProposal\022\024\n\005title\030\001 \001(\tR\005title\022 \n\013descr"
    "iption\030\002 \001(\tR\013description\022\026\n\006ticker\030\003 \001("
    "\tR\006ticker\022\035\n\nbase_denom\030\004 \001(\tR\tbaseDenom"
    "\022\037\n\013quote_denom\030\005 \001(\tR\nquoteDenom\022]\n\023min"
    "_price_tick_size\030\006 \001(\tB.\310\336\037\000\332\336\037&github.c"
    "om/cosmos/cosmos-sdk/types.DecR\020minPrice"
    "TickSize\022c\n\026min_quantity_tick_size\030\007 \001(\t"
    "B.\310\336\037\000\332\336\037&github.com/cosmos/cosmos-sdk/t"
    "ypes.DecR\023minQuantityTickSize\022T\n\016maker_f"
    "ee_rate\030\010 \001(\tB.\310\336\037\001\332\336\037&github.com/cosmos"
    "/cosmos-sdk/types.DecR\014makerFeeRate\022T\n\016t"
    "aker_fee_rate\030\t \001(\tB.\310\336\037\001\332\336\037&github.com/"
    "cosmos/cosmos-sdk/types.DecR\014takerFeeRat"
    "e:&\210\240\037\000\350\240\037\000\312\264-\032cosmos.gov.v1beta1.Conten"
    "t\"\257\007\n\035PerpetualMarketLaunchProposal\022\024\n\005t"
    "itle\030\001 \001(\tR\005title\022 \n\013description\030\002 \001(\tR\013"
    "description\022\026\n\006ticker\030\003 \001(\tR\006ticker\022\037\n\013q"
    "uote_denom\030\004 \001(\tR\nquoteDenom\022\037\n\013oracle_b"
    "ase\030\005 \001(\tR\noracleBase\022!\n\014oracle_quote\030\006 "
    "\001(\tR\013oracleQuote\022.\n\023oracle_scale_factor\030"
    "\007 \001(\rR\021oracleScaleFactor\022E\n\013oracle_type\030"
    "\010 \001(\0162$.injective.oracle.v1beta1.OracleT"
    "ypeR\noracleType\022`\n\024initial_margin_ratio\030"
    "\t \001(\tB.\310\336\037\000\332\336\037&github.com/cosmos/cosmos-"
    "sdk/types.DecR\022initialMarginRatio\022h\n\030mai"
    "ntenance_margin_ratio\030\n \001(\tB.\310\336\037\000\332\336\037&git"
    "hub.com/cosmos/cosmos-sdk/types.DecR\026mai"
    "ntenanceMarginRatio\022T\n\016maker_fee_rate\030\013 "
    "\001(\tB.\310\336\037\000\332\336\037&github.com/cosmos/cosmos-sd"
    "k/types.DecR\014makerFeeRate\022T\n\016taker_fee_r"
    "ate\030\014 \001(\tB.\310\336\037\000\332\336\037&github.com/cosmos/cos"
    "mos-sdk/types.DecR\014takerFeeRate\022]\n\023min_p"
    "rice_tick_size\030\r \001(\tB.\310\336\037\000\332\336\037&github.com"
    "/cosmos/cosmos-sdk/types.DecR\020minPriceTi"
    "ckSize\022c\n\026min_quantity_tick_size\030\016 \001(\tB."
    "\310\336\037\000\332\336\037&github.com/cosmos/cosmos-sdk/typ"
    "es.DecR\023minQuantityTickSize:&\210\240\037\000\350\240\037\000\312\264-"
    "\032cosmos.gov.v1beta1.Content\"\355\006\n!BinaryOp"
    "tionsMarketLaunchProposal\022\024\n\005title\030\001 \001(\t"
    "R\005title\022 \n\013description\030\002 \001(\tR\013descriptio"
    "n\022\026\n\006ticker\030\003 \001(\tR\006ticker\022#\n\roracle_symb"
    "ol\030\004 \001(\tR\014oracleSymbol\022\'\n\017oracle_provide"
    "r\030\005 \001(\tR\016oracleProvider\022E\n\013oracle_type\030\006"
    " \001(\0162$.injective.oracle.v1beta1.OracleTy"
    "peR\noracleType\022.\n\023oracle_scale_factor\030\007 "
    "\001(\rR\021oracleScaleFactor\0221\n\024expiration_tim"
    "estamp\030\010 \001(\003R\023expirationTimestamp\0221\n\024set"
    "tlement_timestamp\030\t \001(\003R\023settlementTimes"
    "tamp\022\024\n\005admin\030\n \001(\tR\005admin\022\037\n\013quote_deno"
    "m\030\013 \001(\tR\nquoteDenom\022T\n\016maker_fee_rate\030\014 "
    "\001(\tB.\310\336\037\000\332\336\037&github.com/cosmos/cosmos-sd"
    "k/types.DecR\014makerFeeRate\022T\n\016taker_fee_r"
    "ate\030\r \001(\tB.\310\336\037\000\332\336\037&github.com/cosmos/cos"
    "mos-sdk/types.DecR\014takerFeeRate\022]\n\023min_p"
    "rice_tick_size\030\016 \001(\tB.\310\336\037\000\332\336\037&github.com"
    "/cosmos/cosmos-sdk/types.DecR\020minPriceTi"
    "ckSize\022c\n\026min_quantity_tick_size\030\017 \001(\tB."
    "\310\336\037\000\332\336\037&github.com/cosmos/cosmos-sdk/typ"
    "es.DecR\023minQuantityTickSize:&\210\240\037\000\350\240\037\000\312\264-"
    "\032cosmos.gov.v1beta1.Content\"\313\007\n!ExpiryFu"
    "turesMarketLaunchProposal\022\024\n\005title\030\001 \001(\t"
    "R\005title\022 \n\013description\030\002 \001(\tR\013descriptio"
    "n\022\026\n\006ticker\030\003 \001(\tR\006ticker\022\037\n\013quote_denom"
    "\030\004 \001(\tR\nquoteDenom\022\037\n\013oracle_base\030\005 \001(\tR"
    "\noracleBase\022!\n\014oracle_quote\030\006 \001(\tR\013oracl"
    "eQuote\022.\n\023oracle_scale_factor\030\007 \001(\rR\021ora"
    "cleScaleFactor\022E\n\013oracle_type\030\010 \001(\0162$.in"
    "jective.oracle.v1beta1.OracleTypeR\noracl"
    "eType\022\026\n\006expiry\030\t \001(\003R\006expiry\022`\n\024initial"
    "_margin_ratio\030\n \001(\tB.\310\336\037\000\332\336\037&github.com/"
    "cosmos/cosmos-sdk/types.DecR\022initialMarg"
    "inRatio\022h\n\030maintenance_margin_ratio\030\013 \001("
    "\tB.\310\336\037\000\332\336\037&github.com/cosmos/cosmos-sdk/"
    "types.DecR\026maintenanceMarginRatio\022T\n\016mak"
    "er_fee_rate\030\014 \001(\tB.\310\336\037\000\332\336\037&github.com/co"
    "smos/cosmos-sdk/types.DecR\014makerFeeRate\022"
    "T\n\016taker_fee_rate\030\r \001(\tB.\310\336\037\000\332\336\037&github."
    "com/cosmos/cosmos-sdk/types.DecR\014takerFe"
    "eRate\022]\n\023min_price_tick_size\030\016 \001(\tB.\310\336\037\000"
    "\332\336\037&github.com/cosmos/cosmos-sdk/types.D"
    "ecR\020minPriceTickSize\022c\n\026min_quantity_tic"
    "k_size\030\017 \001(\tB.\310\336\037\000\332\336\037&github.com/cosmos/"
    "cosmos-sdk/types.DecR\023minQuantityTickSiz"
    "e:&\210\240\037\000\350\240\037\000\312\264-\032cosmos.gov.v1beta1.Conten"
    "t\"\230\t\n#DerivativeMarketParamUpdateProposa"
    "l\022\024\n\005title\030\001 \001(\tR\005title\022 \n\013description\030\002"
    " \001(\tR\013description\022\033\n\tmarket_id\030\003 \001(\tR\010ma"
    "rketId\022`\n\024initial_margin_ratio\030\004 \001(\tB.\310\336"
    "\037\001\332\336\037&github.com/cosmos/cosmos-sdk/types"
    ".DecR\022initialMarginRatio\022h\n\030maintenance_"
    "margin_ratio\030\005 \001(\tB.\310\336\037\001\332\336\037&github.com/c"
    "osmos/cosmos-sdk/types.DecR\026maintenanceM"
    "arginRatio\022T\n\016maker_fee_rate\030\006 \001(\tB.\310\336\037\001"
    "\332\336\037&github.com/cosmos/cosmos-sdk/types.D"
    "ecR\014makerFeeRate\022T\n\016taker_fee_rate\030\007 \001(\t"
    "B.\310\336\037\001\332\336\037&github.com/cosmos/cosmos-sdk/t"
    "ypes.DecR\014takerFeeRate\022c\n\026relayer_fee_sh"
    "are_rate\030\010 \001(\tB.\310\336\037\001\332\336\037&github.com/cosmo"
    "s/cosmos-sdk/types.DecR\023relayerFeeShareR"
    "ate\022]\n\023min_price_tick_size\030\t \001(\tB.\310\336\037\001\332\336"
    "\037&github.com/cosmos/cosmos-sdk/types.Dec"
    "R\020minPriceTickSize\022c\n\026min_quantity_tick_"
    "size\030\n \001(\tB.\310\336\037\001\332\336\037&github.com/cosmos/co"
    "smos-sdk/types.DecR\023minQuantityTickSize\022"
    "^\n\022HourlyInterestRate\030\013 \001(\tB.\310\336\037\001\332\336\037&git"
    "hub.com/cosmos/cosmos-sdk/types.DecR\022Hou"
    "rlyInterestRate\022b\n\024HourlyFundingRateCap\030"
    "\014 \001(\tB.\310\336\037\001\332\336\037&github.com/cosmos/cosmos-"
    "sdk/types.DecR\024HourlyFundingRateCap\022@\n\006s"
    "tatus\030\r \001(\0162(.injective.exchange.v1beta1"
    ".MarketStatusR\006status\022M\n\roracle_params\030\016"
    " \001(\0132(.injective.exchange.v1beta1.Oracle"
    "ParamsR\014oracleParams:&\210\240\037\000\350\240\037\000\312\264-\032cosmos"
    ".gov.v1beta1.Content\"\370\001\n\036MarketForcedSet"
    "tlementProposal\022\024\n\005title\030\001 \001(\tR\005title\022 \n"
    "\013description\030\002 \001(\tR\013description\022\033\n\tmarke"
    "t_id\030\003 \001(\tR\010marketId\022Y\n\020settlement_price"
    "\030\004 \001(\tB.\310\336\037\001\332\336\037&github.com/cosmos/cosmos"
    "-sdk/types.DecR\017settlementPrice:&\210\240\037\000\350\240\037"
    "\000\312\264-\032cosmos.gov.v1beta1.Content\"\317\001\n\033Upda"
    "teDenomDecimalsProposal\022\024\n\005title\030\001 \001(\tR\005"
    "title\022 \n\013description\030\002 \001(\tR\013description\022"
    "P\n\016denom_decimals\030\003 \003(\0132).injective.exch"
    "ange.v1beta1.DenomDecimalsR\rdenomDecimal"
    "s:&\210\240\037\000\350\240\037\000\312\264-\032cosmos.gov.v1beta1.Conten"
    "t\"\352\007\n&BinaryOptionsMarketParamUpdateProp"
    "osal\022\024\n\005title\030\001 \001(\tR\005title\022 \n\013descriptio"
    "n\030\002 \001(\tR\013description\022\033\n\tmarket_id\030\003 \001(\tR"
    "\010marketId\022T\n\016maker_fee_rate\030\004 \001(\tB.\310\336\037\001\332"
    "\336\037&github.com/cosmos/cosmos-sdk/types.De"
    "cR\014makerFeeRate\022T\n\016taker_fee_rate\030\005 \001(\tB"
    ".\310\336\037\001\332\336\037&github.com/cosmos/cosmos-sdk/ty"
    "pes.DecR\014takerFeeRate\022c\n\026relayer_fee_sha"
    "re_rate\030\006 \001(\tB.\310\336\037\001\332\336\037&github.com/cosmos"
    "/cosmos-sdk/types.DecR\023relayerFeeShareRa"
    "te\022]\n\023min_price_tick_size\030\007 \001(\tB.\310\336\037\001\332\336\037"
    "&github.com/cosmos/cosmos-sdk/types.DecR"
    "\020minPriceTickSize\022c\n\026min_quantity_tick_s"
    "ize\030\010 \001(\tB.\310\336\037\001\332\336\037&github.com/cosmos/cos"
    "mos-sdk/types.DecR\023minQuantityTickSize\0221"
    "\n\024expiration_timestamp\030\t \001(\003R\023expiration"
    "Timestamp\0221\n\024settlement_timestamp\030\n \001(\003R"
    "\023settlementTimestamp\022Y\n\020settlement_price"
    "\030\013 \001(\tB.\310\336\037\001\332\336\037&github.com/cosmos/cosmos"
    "-sdk/types.DecR\017settlementPrice\022\024\n\005admin"
    "\030\014 \001(\tR\005admin\022@\n\006status\030\r \001(\0162(.injectiv"
    "e.exchange.v1beta1.MarketStatusR\006status\022"
    "U\n\roracle_params\030\016 \001(\01320.injective.excha"
    "nge.v1beta1.ProviderOracleParamsR\014oracle"
    "Params:&\210\240\037\000\350\240\037\000\312\264-\032cosmos.gov.v1beta1.C"
    "ontent\"\301\001\n\024ProviderOracleParams\022\026\n\006symbo"
    "l\030\001 \001(\tR\006symbol\022\032\n\010provider\030\002 \001(\tR\010provi"
    "der\022.\n\023oracle_scale_factor\030\003 \001(\rR\021oracle"
    "ScaleFactor\022E\n\013oracle_type\030\004 \001(\0162$.injec"
    "tive.oracle.v1beta1.OracleTypeR\noracleTy"
    "pe\"\311\001\n\014OracleParams\022\037\n\013oracle_base\030\001 \001(\t"
    "R\noracleBase\022!\n\014oracle_quote\030\002 \001(\tR\013orac"
    "leQuote\022.\n\023oracle_scale_factor\030\003 \001(\rR\021or"
    "acleScaleFactor\022E\n\013oracle_type\030\004 \001(\0162$.i"
    "njective.oracle.v1beta1.OracleTypeR\norac"
    "leType\"\305\002\n#TradingRewardCampaignLaunchPr"
    "oposal\022\024\n\005title\030\001 \001(\tR\005title\022 \n\013descript"
    "ion\030\002 \001(\tR\013description\022Z\n\rcampaign_info\030"
    "\003 \001(\01325.injective.exchange.v1beta1.Tradi"
    "ngRewardCampaignInfoR\014campaignInfo\022b\n\025ca"
    "mpaign_reward_pools\030\004 \003(\0132..injective.ex"
    "change.v1beta1.CampaignRewardPoolR\023campa"
    "ignRewardPools:&\210\240\037\000\350\240\037\000\312\264-\032cosmos.gov.v"
    "1beta1.Content\"\313\003\n#TradingRewardCampaign"
    "UpdateProposal\022\024\n\005title\030\001 \001(\tR\005title\022 \n\013"
    "description\030\002 \001(\tR\013description\022Z\n\rcampai"
    "gn_info\030\003 \001(\01325.injective.exchange.v1bet"
    "a1.TradingRewardCampaignInfoR\014campaignIn"
    "fo\022u\n\037campaign_reward_pools_additions\030\004 "
    "\003(\0132..injective.exchange.v1beta1.Campaig"
    "nRewardPoolR\034campaignRewardPoolsAddition"
    "s\022q\n\035campaign_reward_pools_updates\030\005 \003(\013"
    "2..injective.exchange.v1beta1.CampaignRe"
    "wardPoolR\032campaignRewardPoolsUpdates:&\210\240"
    "\037\000\350\240\037\000\312\264-\032cosmos.gov.v1beta1.Content\"\213\001\n"
    "\021RewardPointUpdate\022\'\n\017account_address\030\001 "
    "\001(\tR\016accountAddress\022M\n\nnew_points\030\014 \001(\tB"
    ".\310\336\037\000\332\336\037&github.com/cosmos/cosmos-sdk/ty"
    "pes.DecR\tnewPoints\"\241\002\n(TradingRewardPend"
    "ingPointsUpdateProposal\022\024\n\005title\030\001 \001(\tR\005"
    "title\022 \n\013description\030\002 \001(\tR\013description\022"
    "4\n\026pending_pool_timestamp\030\003 \001(\003R\024pending"
    "PoolTimestamp\022_\n\024reward_point_updates\030\004 "
    "\003(\0132-.injective.exchange.v1beta1.RewardP"
    "ointUpdateR\022rewardPointUpdates:&\210\240\037\000\350\240\037\000"
    "\312\264-\032cosmos.gov.v1beta1.Content\"\302\001\n\023FeeDi"
    "scountProposal\022\024\n\005title\030\001 \001(\tR\005title\022 \n\013"
    "description\030\002 \001(\tR\013description\022K\n\010schedu"
    "le\030\003 \001(\0132/.injective.exchange.v1beta1.Fe"
    "eDiscountScheduleR\010schedule:&\210\240\037\000\350\240\037\000\312\264-"
    "\032cosmos.gov.v1beta1.Content\"\330\001\n\037BatchCom"
    "munityPoolSpendProposal\022\024\n\005title\030\001 \001(\tR\005"
    "title\022 \n\013description\030\002 \001(\tR\013description\022"
    "U\n\tproposals\030\003 \003(\01327.cosmos.distribution"
    ".v1beta1.CommunityPoolSpendProposalR\tpro"
    "posals:&\210\240\037\000\350\240\037\000\312\264-\032cosmos.gov.v1beta1.C"
    "ontent\"*\n\020MsgRewardsOptOut\022\026\n\006sender\030\001 \001"
    "(\tR\006sender\"\032\n\030MsgRewardsOptOutResponse\"\214"
    "\001\n\025MsgReclaimLockedFunds\022\026\n\006sender\030\001 \001(\t"
    "R\006sender\0220\n\023lockedAccountPubKey\030\002 \001(\014R\023l"
    "ockedAccountPubKey\022\034\n\tsignature\030\003 \001(\014R\ts"
    "ignature:\013\202\347\260*\006sender\"\037\n\035MsgReclaimLocke"
    "dFundsResponse\"\200\001\n\013MsgSignData\022S\n\006Signer"
    "\030\001 \001(\014B;\352\336\037\006signer\372\336\037-github.com/cosmos/"
    "cosmos-sdk/types.AccAddressR\006Signer\022\034\n\004D"
    "ata\030\002 \001(\014B\010\352\336\037\004dataR\004Data\"x\n\nMsgSignDoc\022"
    "%\n\tsign_type\030\001 \001(\tB\010\352\336\037\004typeR\010signType\022C"
    "\n\005value\030\002 \001(\0132\'.injective.exchange.v1bet"
    "a1.MsgSignDataB\004\310\336\037\000R\005value\"\350\002\n!MsgAdmin"
    "UpdateBinaryOptionsMarket\022\026\n\006sender\030\001 \001("
    "\tR\006sender\022\033\n\tmarket_id\030\002 \001(\tR\010marketId\022Y"
    "\n\020settlement_price\030\003 \001(\tB.\310\336\037\001\332\336\037&github"
    ".com/cosmos/cosmos-sdk/types.DecR\017settle"
    "mentPrice\0221\n\024expiration_timestamp\030\004 \001(\003R"
    "\023expirationTimestamp\0221\n\024settlement_times"
    "tamp\030\005 \001(\003R\023settlementTimestamp\022@\n\006statu"
    "s\030\006 \001(\0162(.injective.exchange.v1beta1.Mar"
    "ketStatusR\006status:\013\202\347\260*\006sender\"+\n)MsgAdm"
    "inUpdateBinaryOptionsMarketResponse\"\367\001\n."
    "AtomicMarketOrderFeeMultiplierSchedulePr"
    "oposal\022\024\n\005title\030\001 \001(\tR\005title\022 \n\013descript"
    "ion\030\002 \001(\tR\013description\022e\n\026market_fee_mul"
    "tipliers\030\003 \003(\0132/.injective.exchange.v1be"
    "ta1.MarketFeeMultiplierR\024marketFeeMultip"
    "liers:&\210\240\037\000\350\240\037\000\312\264-\032cosmos.gov.v1beta1.Co"
    "ntent*x\n\014ExchangeType\0222\n\024EXCHANGE_UNSPEC"
    "IFIED\020\000\032\030\212\235 \024EXCHANGE_UNSPECIFIED\022\022\n\004SPO"
    "T\020\001\032\010\212\235 \004SPOT\022 \n\013DERIVATIVES\020\002\032\017\212\235 \013DERI"
    "VATIVES2\220\"\n\003Msg\022a\n\007Deposit\022&.injective.e"
    "xchange.v1beta1.MsgDeposit\032..injective.e"
    "xchange.v1beta1.MsgDepositResponse\022d\n\010Wi"
    "thdraw\022\'.injective.exchange.v1beta1.MsgW"
    "ithdraw\032/.injective.exchange.v1beta1.Msg"
    "WithdrawResponse\022\221\001\n\027InstantSpotMarketLa"
    "unch\0226.injective.exchange.v1beta1.MsgIns"
    "tantSpotMarketLaunch\032>.injective.exchang"
    "e.v1beta1.MsgInstantSpotMarketLaunchResp"
    "onse\022\240\001\n\034InstantPerpetualMarketLaunch\022;."
    "injective.exchange.v1beta1.MsgInstantPer"
    "petualMarketLaunch\032C.injective.exchange."
    "v1beta1.MsgInstantPerpetualMarketLaunchR"
    "esponse\022\254\001\n InstantExpiryFuturesMarketLa"
    "unch\022\?.injective.exchange.v1beta1.MsgIns"
    "tantExpiryFuturesMarketLaunch\032G.injectiv"
    "e.exchange.v1beta1.MsgInstantExpiryFutur"
    "esMarketLaunchResponse\022\210\001\n\024CreateSpotLim"
    "itOrder\0223.injective.exchange.v1beta1.Msg"
    "CreateSpotLimitOrder\032;.injective.exchang"
    "e.v1beta1.MsgCreateSpotLimitOrderRespons"
    "e\022\232\001\n\032BatchCreateSpotLimitOrders\0229.injec"
    "tive.exchange.v1beta1.MsgBatchCreateSpot"
    "LimitOrders\032A.injective.exchange.v1beta1"
    ".MsgBatchCreateSpotLimitOrdersResponse\022\213"
    "\001\n\025CreateSpotMarketOrder\0224.injective.exc"
    "hange.v1beta1.MsgCreateSpotMarketOrder\032<"
    ".injective.exchange.v1beta1.MsgCreateSpo"
    "tMarketOrderResponse\022y\n\017CancelSpotOrder\022"
    "..injective.exchange.v1beta1.MsgCancelSp"
    "otOrder\0326.injective.exchange.v1beta1.Msg"
    "CancelSpotOrderResponse\022\213\001\n\025BatchCancelS"
    "potOrders\0224.injective.exchange.v1beta1.M"
    "sgBatchCancelSpotOrders\032<.injective.exch"
    "ange.v1beta1.MsgBatchCancelSpotOrdersRes"
    "ponse\022\177\n\021BatchUpdateOrders\0220.injective.e"
    "xchange.v1beta1.MsgBatchUpdateOrders\0328.i"
    "njective.exchange.v1beta1.MsgBatchUpdate"
    "OrdersResponse\022\227\001\n\031PrivilegedExecuteCont"
    "ract\0228.injective.exchange.v1beta1.MsgPri"
    "vilegedExecuteContract\032@.injective.excha"
    "nge.v1beta1.MsgPrivilegedExecuteContract"
    "Response\022\232\001\n\032CreateDerivativeLimitOrder\022"
    "9.injective.exchange.v1beta1.MsgCreateDe"
    "rivativeLimitOrder\032A.injective.exchange."
    "v1beta1.MsgCreateDerivativeLimitOrderRes"
    "ponse\022\254\001\n BatchCreateDerivativeLimitOrde"
    "rs\022\?.injective.exchange.v1beta1.MsgBatch"
    "CreateDerivativeLimitOrders\032G.injective."
    "exchange.v1beta1.MsgBatchCreateDerivativ"
    "eLimitOrdersResponse\022\235\001\n\033CreateDerivativ"
    "eMarketOrder\022:.injective.exchange.v1beta"
    "1.MsgCreateDerivativeMarketOrder\032B.injec"
    "tive.exchange.v1beta1.MsgCreateDerivativ"
    "eMarketOrderResponse\022\213\001\n\025CancelDerivativ"
    "eOrder\0224.injective.exchange.v1beta1.MsgC"
    "ancelDerivativeOrder\032<.injective.exchang"
    "e.v1beta1.MsgCancelDerivativeOrderRespon"
    "se\022\235\001\n\033BatchCancelDerivativeOrders\022:.inj"
    "ective.exchange.v1beta1.MsgBatchCancelDe"
    "rivativeOrders\032B.injective.exchange.v1be"
    "ta1.MsgBatchCancelDerivativeOrdersRespon"
    "se\022\254\001\n InstantBinaryOptionsMarketLaunch\022"
    "\?.injective.exchange.v1beta1.MsgInstantB"
    "inaryOptionsMarketLaunch\032G.injective.exc"
    "hange.v1beta1.MsgInstantBinaryOptionsMar"
    "ketLaunchResponse\022\243\001\n\035CreateBinaryOption"
    "sLimitOrder\022<.injective.exchange.v1beta1"
    ".MsgCreateBinaryOptionsLimitOrder\032D.inje"
    "ctive.exchange.v1beta1.MsgCreateBinaryOp"
    "tionsLimitOrderResponse\022\246\001\n\036CreateBinary"
    "OptionsMarketOrder\022=.injective.exchange."
    "v1beta1.MsgCreateBinaryOptionsMarketOrde"
    "r\032E.injective.exchange.v1beta1.MsgCreate"
    "BinaryOptionsMarketOrderResponse\022\224\001\n\030Can"
    "celBinaryOptionsOrder\0227.injective.exchan"
    "ge.v1beta1.MsgCancelBinaryOptionsOrder\032\?"
    ".injective.exchange.v1beta1.MsgCancelBin"
    "aryOptionsOrderResponse\022\246\001\n\036BatchCancelB"
    "inaryOptionsOrders\022=.injective.exchange."
    "v1beta1.MsgBatchCancelBinaryOptionsOrder"
    "s\032E.injective.exchange.v1beta1.MsgBatchC"
    "ancelBinaryOptionsOrdersResponse\022\202\001\n\022Sub"
    "accountTransfer\0221.injective.exchange.v1b"
    "eta1.MsgSubaccountTransfer\0329.injective.e"
    "xchange.v1beta1.MsgSubaccountTransferRes"
    "ponse\022|\n\020ExternalTransfer\022/.injective.ex"
    "change.v1beta1.MsgExternalTransfer\0327.inj"
    "ective.exchange.v1beta1.MsgExternalTrans"
    "ferResponse\022\177\n\021LiquidatePosition\0220.injec"
    "tive.exchange.v1beta1.MsgLiquidatePositi"
    "on\0328.injective.exchange.v1beta1.MsgLiqui"
    "datePositionResponse\022\216\001\n\026IncreasePositio"
    "nMargin\0225.injective.exchange.v1beta1.Msg"
    "IncreasePositionMargin\032=.injective.excha"
    "nge.v1beta1.MsgIncreasePositionMarginRes"
    "ponse\022s\n\rRewardsOptOut\022,.injective.excha"
    "nge.v1beta1.MsgRewardsOptOut\0324.injective"
    ".exchange.v1beta1.MsgRewardsOptOutRespon"
    "se\022\246\001\n\036AdminUpdateBinaryOptionsMarket\022=."
    "injective.exchange.v1beta1.MsgAdminUpdat"
    "eBinaryOptionsMarket\032E.injective.exchang"
    "e.v1beta1.MsgAdminUpdateBinaryOptionsMar"
    "ketResponse\022\202\001\n\022ReclaimLockedFunds\0221.inj"
    "ective.exchange.v1beta1.MsgReclaimLocked"
    "Funds\0329.injective.exchange.v1beta1.MsgRe"
    "claimLockedFundsResponse\022p\n\014UpdateParams"
    "\022+.injective.exchange.v1beta1.MsgUpdateP"
    "arams\0323.injective.exchange.v1beta1.MsgUp"
    "dateParamsResponseB\203\002\n\036com.injective.exc"
    "hange.v1beta1B\007TxProtoP\001ZNgithub.com/Inj"
    "ectiveLabs/injective-core/injective-chai"
    "n/modules/exchange/types\242\002\003IEX\252\002\032Injecti"
    "ve.Exchange.V1beta1\312\002\032Injective\\Exchange"
    "\\V1beta1\342\002&Injective\\Exchange\\V1beta1\\GP"
    "BMetadata\352\002\034Injective::Exchange::V1beta1"
    "b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_deps[7] =
    {
        &::descriptor_table_cosmos_2fbase_2fv1beta1_2fcoin_2eproto,
        &::descriptor_table_cosmos_2fdistribution_2fv1beta1_2fdistribution_2eproto,
        &::descriptor_table_cosmos_2fmsg_2fv1_2fmsg_2eproto,
        &::descriptor_table_cosmos_5fproto_2fcosmos_2eproto,
        &::descriptor_table_gogoproto_2fgogo_2eproto,
        &::descriptor_table_injective_2fexchange_2fv1beta1_2fexchange_2eproto,
        &::descriptor_table_injective_2foracle_2fv1beta1_2foracle_2eproto,
};
static ::absl::once_flag descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto = {
    false,
    false,
    27288,
    descriptor_table_protodef_injective_2fexchange_2fv1beta1_2ftx_2eproto,
    "injective/exchange/v1beta1/tx.proto",
    &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_once,
    descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_deps,
    7,
    85,
    schemas,
    file_default_instances,
    TableStruct_injective_2fexchange_2fv1beta1_2ftx_2eproto::offsets,
    file_level_metadata_injective_2fexchange_2fv1beta1_2ftx_2eproto,
    file_level_enum_descriptors_injective_2fexchange_2fv1beta1_2ftx_2eproto,
    file_level_service_descriptors_injective_2fexchange_2fv1beta1_2ftx_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_getter() {
  return &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_injective_2fexchange_2fv1beta1_2ftx_2eproto(&descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto);
namespace injective {
namespace exchange {
namespace v1beta1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ExchangeType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto);
  return file_level_enum_descriptors_injective_2fexchange_2fv1beta1_2ftx_2eproto[0];
}
bool ExchangeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}
// ===================================================================

class MsgUpdateParams::_Internal {
 public:
  using HasBits = decltype(std::declval<MsgUpdateParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(MsgUpdateParams, _impl_._has_bits_);
  static const ::injective::exchange::v1beta1::Params& params(const MsgUpdateParams* msg);
  static void set_has_params(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::injective::exchange::v1beta1::Params&
MsgUpdateParams::_Internal::params(const MsgUpdateParams* msg) {
  return *msg->_impl_.params_;
}
void MsgUpdateParams::clear_params() {
  if (_impl_.params_ != nullptr) _impl_.params_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
MsgUpdateParams::MsgUpdateParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.MsgUpdateParams)
}
MsgUpdateParams::MsgUpdateParams(const MsgUpdateParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MsgUpdateParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.authority_) {}

    , decltype(_impl_.params_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.authority_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.authority_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_authority().empty()) {
    _this->_impl_.authority_.Set(from._internal_authority(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.params_ = new ::injective::exchange::v1beta1::Params(*from._impl_.params_);
  }
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.MsgUpdateParams)
}

inline void MsgUpdateParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.authority_) {}

    , decltype(_impl_.params_){nullptr}
  };
  _impl_.authority_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.authority_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MsgUpdateParams::~MsgUpdateParams() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.MsgUpdateParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MsgUpdateParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.authority_.Destroy();
  if (this != internal_default_instance()) delete _impl_.params_;
}

void MsgUpdateParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MsgUpdateParams::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.MsgUpdateParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.authority_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.params_ != nullptr);
    _impl_.params_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgUpdateParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string authority = 1 [json_name = "authority", (.cosmos_proto.scalar) = "cosmos.AddressString"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_authority();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.MsgUpdateParams.authority"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .injective.exchange.v1beta1.Params params = 2 [json_name = "params", (.gogoproto.nullable) = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_params(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MsgUpdateParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.MsgUpdateParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string authority = 1 [json_name = "authority", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  if (!this->_internal_authority().empty()) {
    const std::string& _s = this->_internal_authority();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.MsgUpdateParams.authority");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .injective.exchange.v1beta1.Params params = 2 [json_name = "params", (.gogoproto.nullable) = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::params(this),
        _Internal::params(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.MsgUpdateParams)
  return target;
}

::size_t MsgUpdateParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.MsgUpdateParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string authority = 1 [json_name = "authority", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  if (!this->_internal_authority().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_authority());
  }

  // .injective.exchange.v1beta1.Params params = 2 [json_name = "params", (.gogoproto.nullable) = false];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.params_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgUpdateParams::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MsgUpdateParams::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgUpdateParams::GetClassData() const { return &_class_data_; }


void MsgUpdateParams::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MsgUpdateParams*>(&to_msg);
  auto& from = static_cast<const MsgUpdateParams&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.MsgUpdateParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_authority().empty()) {
    _this->_internal_set_authority(from._internal_authority());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_params()->::injective::exchange::v1beta1::Params::MergeFrom(
        from._internal_params());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MsgUpdateParams::CopyFrom(const MsgUpdateParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.MsgUpdateParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgUpdateParams::IsInitialized() const {
  return true;
}

void MsgUpdateParams::InternalSwap(MsgUpdateParams* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.authority_, lhs_arena,
                                       &other->_impl_.authority_, rhs_arena);
  swap(_impl_.params_, other->_impl_.params_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgUpdateParams::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2ftx_2eproto[0]);
}
// ===================================================================

class MsgUpdateParamsResponse::_Internal {
 public:
};

MsgUpdateParamsResponse::MsgUpdateParamsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.MsgUpdateParamsResponse)
}
MsgUpdateParamsResponse::MsgUpdateParamsResponse(const MsgUpdateParamsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  MsgUpdateParamsResponse* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.MsgUpdateParamsResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgUpdateParamsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgUpdateParamsResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata MsgUpdateParamsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2ftx_2eproto[1]);
}
// ===================================================================

class MsgDeposit::_Internal {
 public:
  using HasBits = decltype(std::declval<MsgDeposit>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(MsgDeposit, _impl_._has_bits_);
  static const ::cosmos::base::v1beta1::Coin& amount(const MsgDeposit* msg);
  static void set_has_amount(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::cosmos::base::v1beta1::Coin&
MsgDeposit::_Internal::amount(const MsgDeposit* msg) {
  return *msg->_impl_.amount_;
}
void MsgDeposit::clear_amount() {
  if (_impl_.amount_ != nullptr) _impl_.amount_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
MsgDeposit::MsgDeposit(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.MsgDeposit)
}
MsgDeposit::MsgDeposit(const MsgDeposit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MsgDeposit* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sender_) {}

    , decltype(_impl_.subaccount_id_) {}

    , decltype(_impl_.amount_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.sender_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.sender_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sender().empty()) {
    _this->_impl_.sender_.Set(from._internal_sender(), _this->GetArenaForAllocation());
  }
  _impl_.subaccount_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.subaccount_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_subaccount_id().empty()) {
    _this->_impl_.subaccount_id_.Set(from._internal_subaccount_id(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.amount_ = new ::cosmos::base::v1beta1::Coin(*from._impl_.amount_);
  }
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.MsgDeposit)
}

inline void MsgDeposit::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sender_) {}

    , decltype(_impl_.subaccount_id_) {}

    , decltype(_impl_.amount_){nullptr}
  };
  _impl_.sender_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.sender_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.subaccount_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.subaccount_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MsgDeposit::~MsgDeposit() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.MsgDeposit)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MsgDeposit::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sender_.Destroy();
  _impl_.subaccount_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.amount_;
}

void MsgDeposit::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MsgDeposit::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.MsgDeposit)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sender_.ClearToEmpty();
  _impl_.subaccount_id_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.amount_ != nullptr);
    _impl_.amount_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgDeposit::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string sender = 1 [json_name = "sender"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sender();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.MsgDeposit.sender"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string subaccount_id = 2 [json_name = "subaccountId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_subaccount_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.MsgDeposit.subaccount_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .cosmos.base.v1beta1.Coin amount = 3 [json_name = "amount", (.gogoproto.nullable) = false];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_amount(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MsgDeposit::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.MsgDeposit)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string sender = 1 [json_name = "sender"];
  if (!this->_internal_sender().empty()) {
    const std::string& _s = this->_internal_sender();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.MsgDeposit.sender");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string subaccount_id = 2 [json_name = "subaccountId"];
  if (!this->_internal_subaccount_id().empty()) {
    const std::string& _s = this->_internal_subaccount_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.MsgDeposit.subaccount_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .cosmos.base.v1beta1.Coin amount = 3 [json_name = "amount", (.gogoproto.nullable) = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::amount(this),
        _Internal::amount(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.MsgDeposit)
  return target;
}

::size_t MsgDeposit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.MsgDeposit)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sender = 1 [json_name = "sender"];
  if (!this->_internal_sender().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_sender());
  }

  // string subaccount_id = 2 [json_name = "subaccountId"];
  if (!this->_internal_subaccount_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_subaccount_id());
  }

  // .cosmos.base.v1beta1.Coin amount = 3 [json_name = "amount", (.gogoproto.nullable) = false];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.amount_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgDeposit::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MsgDeposit::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgDeposit::GetClassData() const { return &_class_data_; }


void MsgDeposit::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MsgDeposit*>(&to_msg);
  auto& from = static_cast<const MsgDeposit&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.MsgDeposit)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_sender().empty()) {
    _this->_internal_set_sender(from._internal_sender());
  }
  if (!from._internal_subaccount_id().empty()) {
    _this->_internal_set_subaccount_id(from._internal_subaccount_id());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_amount()->::cosmos::base::v1beta1::Coin::MergeFrom(
        from._internal_amount());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MsgDeposit::CopyFrom(const MsgDeposit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.MsgDeposit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgDeposit::IsInitialized() const {
  return true;
}

void MsgDeposit::InternalSwap(MsgDeposit* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.sender_, lhs_arena,
                                       &other->_impl_.sender_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.subaccount_id_, lhs_arena,
                                       &other->_impl_.subaccount_id_, rhs_arena);
  swap(_impl_.amount_, other->_impl_.amount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgDeposit::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2ftx_2eproto[2]);
}
// ===================================================================

class MsgDepositResponse::_Internal {
 public:
};

MsgDepositResponse::MsgDepositResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.MsgDepositResponse)
}
MsgDepositResponse::MsgDepositResponse(const MsgDepositResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  MsgDepositResponse* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.MsgDepositResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgDepositResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgDepositResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata MsgDepositResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2ftx_2eproto[3]);
}
// ===================================================================

class MsgWithdraw::_Internal {
 public:
  using HasBits = decltype(std::declval<MsgWithdraw>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(MsgWithdraw, _impl_._has_bits_);
  static const ::cosmos::base::v1beta1::Coin& amount(const MsgWithdraw* msg);
  static void set_has_amount(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::cosmos::base::v1beta1::Coin&
MsgWithdraw::_Internal::amount(const MsgWithdraw* msg) {
  return *msg->_impl_.amount_;
}
void MsgWithdraw::clear_amount() {
  if (_impl_.amount_ != nullptr) _impl_.amount_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
MsgWithdraw::MsgWithdraw(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.MsgWithdraw)
}
MsgWithdraw::MsgWithdraw(const MsgWithdraw& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MsgWithdraw* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sender_) {}

    , decltype(_impl_.subaccount_id_) {}

    , decltype(_impl_.amount_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.sender_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.sender_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sender().empty()) {
    _this->_impl_.sender_.Set(from._internal_sender(), _this->GetArenaForAllocation());
  }
  _impl_.subaccount_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.subaccount_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_subaccount_id().empty()) {
    _this->_impl_.subaccount_id_.Set(from._internal_subaccount_id(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.amount_ = new ::cosmos::base::v1beta1::Coin(*from._impl_.amount_);
  }
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.MsgWithdraw)
}

inline void MsgWithdraw::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sender_) {}

    , decltype(_impl_.subaccount_id_) {}

    , decltype(_impl_.amount_){nullptr}
  };
  _impl_.sender_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.sender_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.subaccount_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.subaccount_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MsgWithdraw::~MsgWithdraw() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.MsgWithdraw)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MsgWithdraw::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sender_.Destroy();
  _impl_.subaccount_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.amount_;
}

void MsgWithdraw::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MsgWithdraw::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.MsgWithdraw)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sender_.ClearToEmpty();
  _impl_.subaccount_id_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.amount_ != nullptr);
    _impl_.amount_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgWithdraw::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string sender = 1 [json_name = "sender"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sender();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.MsgWithdraw.sender"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string subaccount_id = 2 [json_name = "subaccountId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_subaccount_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.MsgWithdraw.subaccount_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .cosmos.base.v1beta1.Coin amount = 3 [json_name = "amount", (.gogoproto.nullable) = false];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_amount(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MsgWithdraw::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.MsgWithdraw)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string sender = 1 [json_name = "sender"];
  if (!this->_internal_sender().empty()) {
    const std::string& _s = this->_internal_sender();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.MsgWithdraw.sender");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string subaccount_id = 2 [json_name = "subaccountId"];
  if (!this->_internal_subaccount_id().empty()) {
    const std::string& _s = this->_internal_subaccount_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.MsgWithdraw.subaccount_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .cosmos.base.v1beta1.Coin amount = 3 [json_name = "amount", (.gogoproto.nullable) = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::amount(this),
        _Internal::amount(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.MsgWithdraw)
  return target;
}

::size_t MsgWithdraw::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.MsgWithdraw)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sender = 1 [json_name = "sender"];
  if (!this->_internal_sender().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_sender());
  }

  // string subaccount_id = 2 [json_name = "subaccountId"];
  if (!this->_internal_subaccount_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_subaccount_id());
  }

  // .cosmos.base.v1beta1.Coin amount = 3 [json_name = "amount", (.gogoproto.nullable) = false];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.amount_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgWithdraw::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MsgWithdraw::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgWithdraw::GetClassData() const { return &_class_data_; }


void MsgWithdraw::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MsgWithdraw*>(&to_msg);
  auto& from = static_cast<const MsgWithdraw&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.MsgWithdraw)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_sender().empty()) {
    _this->_internal_set_sender(from._internal_sender());
  }
  if (!from._internal_subaccount_id().empty()) {
    _this->_internal_set_subaccount_id(from._internal_subaccount_id());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_amount()->::cosmos::base::v1beta1::Coin::MergeFrom(
        from._internal_amount());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MsgWithdraw::CopyFrom(const MsgWithdraw& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.MsgWithdraw)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgWithdraw::IsInitialized() const {
  return true;
}

void MsgWithdraw::InternalSwap(MsgWithdraw* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.sender_, lhs_arena,
                                       &other->_impl_.sender_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.subaccount_id_, lhs_arena,
                                       &other->_impl_.subaccount_id_, rhs_arena);
  swap(_impl_.amount_, other->_impl_.amount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgWithdraw::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2ftx_2eproto[4]);
}
// ===================================================================

class MsgWithdrawResponse::_Internal {
 public:
};

MsgWithdrawResponse::MsgWithdrawResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.MsgWithdrawResponse)
}
MsgWithdrawResponse::MsgWithdrawResponse(const MsgWithdrawResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  MsgWithdrawResponse* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.MsgWithdrawResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgWithdrawResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgWithdrawResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata MsgWithdrawResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2ftx_2eproto[5]);
}
// ===================================================================

class MsgCreateSpotLimitOrder::_Internal {
 public:
  using HasBits = decltype(std::declval<MsgCreateSpotLimitOrder>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(MsgCreateSpotLimitOrder, _impl_._has_bits_);
  static const ::injective::exchange::v1beta1::SpotOrder& order(const MsgCreateSpotLimitOrder* msg);
  static void set_has_order(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::injective::exchange::v1beta1::SpotOrder&
MsgCreateSpotLimitOrder::_Internal::order(const MsgCreateSpotLimitOrder* msg) {
  return *msg->_impl_.order_;
}
void MsgCreateSpotLimitOrder::clear_order() {
  if (_impl_.order_ != nullptr) _impl_.order_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
MsgCreateSpotLimitOrder::MsgCreateSpotLimitOrder(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.MsgCreateSpotLimitOrder)
}
MsgCreateSpotLimitOrder::MsgCreateSpotLimitOrder(const MsgCreateSpotLimitOrder& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MsgCreateSpotLimitOrder* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sender_) {}

    , decltype(_impl_.order_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.sender_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.sender_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sender().empty()) {
    _this->_impl_.sender_.Set(from._internal_sender(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.order_ = new ::injective::exchange::v1beta1::SpotOrder(*from._impl_.order_);
  }
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.MsgCreateSpotLimitOrder)
}

inline void MsgCreateSpotLimitOrder::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sender_) {}

    , decltype(_impl_.order_){nullptr}
  };
  _impl_.sender_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.sender_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MsgCreateSpotLimitOrder::~MsgCreateSpotLimitOrder() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.MsgCreateSpotLimitOrder)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MsgCreateSpotLimitOrder::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sender_.Destroy();
  if (this != internal_default_instance()) delete _impl_.order_;
}

void MsgCreateSpotLimitOrder::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MsgCreateSpotLimitOrder::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.MsgCreateSpotLimitOrder)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sender_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.order_ != nullptr);
    _impl_.order_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgCreateSpotLimitOrder::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string sender = 1 [json_name = "sender"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sender();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.MsgCreateSpotLimitOrder.sender"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .injective.exchange.v1beta1.SpotOrder order = 2 [json_name = "order", (.gogoproto.nullable) = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_order(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MsgCreateSpotLimitOrder::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.MsgCreateSpotLimitOrder)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string sender = 1 [json_name = "sender"];
  if (!this->_internal_sender().empty()) {
    const std::string& _s = this->_internal_sender();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.MsgCreateSpotLimitOrder.sender");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .injective.exchange.v1beta1.SpotOrder order = 2 [json_name = "order", (.gogoproto.nullable) = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::order(this),
        _Internal::order(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.MsgCreateSpotLimitOrder)
  return target;
}

::size_t MsgCreateSpotLimitOrder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.MsgCreateSpotLimitOrder)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sender = 1 [json_name = "sender"];
  if (!this->_internal_sender().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_sender());
  }

  // .injective.exchange.v1beta1.SpotOrder order = 2 [json_name = "order", (.gogoproto.nullable) = false];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.order_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgCreateSpotLimitOrder::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MsgCreateSpotLimitOrder::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgCreateSpotLimitOrder::GetClassData() const { return &_class_data_; }


void MsgCreateSpotLimitOrder::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MsgCreateSpotLimitOrder*>(&to_msg);
  auto& from = static_cast<const MsgCreateSpotLimitOrder&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.MsgCreateSpotLimitOrder)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_sender().empty()) {
    _this->_internal_set_sender(from._internal_sender());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_order()->::injective::exchange::v1beta1::SpotOrder::MergeFrom(
        from._internal_order());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MsgCreateSpotLimitOrder::CopyFrom(const MsgCreateSpotLimitOrder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.MsgCreateSpotLimitOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCreateSpotLimitOrder::IsInitialized() const {
  return true;
}

void MsgCreateSpotLimitOrder::InternalSwap(MsgCreateSpotLimitOrder* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.sender_, lhs_arena,
                                       &other->_impl_.sender_, rhs_arena);
  swap(_impl_.order_, other->_impl_.order_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgCreateSpotLimitOrder::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2ftx_2eproto[6]);
}
// ===================================================================

class MsgCreateSpotLimitOrderResponse::_Internal {
 public:
};

MsgCreateSpotLimitOrderResponse::MsgCreateSpotLimitOrderResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.MsgCreateSpotLimitOrderResponse)
}
MsgCreateSpotLimitOrderResponse::MsgCreateSpotLimitOrderResponse(const MsgCreateSpotLimitOrderResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MsgCreateSpotLimitOrderResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.order_hash_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.order_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.order_hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_order_hash().empty()) {
    _this->_impl_.order_hash_.Set(from._internal_order_hash(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.MsgCreateSpotLimitOrderResponse)
}

inline void MsgCreateSpotLimitOrderResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.order_hash_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.order_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.order_hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MsgCreateSpotLimitOrderResponse::~MsgCreateSpotLimitOrderResponse() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.MsgCreateSpotLimitOrderResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MsgCreateSpotLimitOrderResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.order_hash_.Destroy();
}

void MsgCreateSpotLimitOrderResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MsgCreateSpotLimitOrderResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.MsgCreateSpotLimitOrderResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.order_hash_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgCreateSpotLimitOrderResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string order_hash = 1 [json_name = "orderHash"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_order_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.MsgCreateSpotLimitOrderResponse.order_hash"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MsgCreateSpotLimitOrderResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.MsgCreateSpotLimitOrderResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string order_hash = 1 [json_name = "orderHash"];
  if (!this->_internal_order_hash().empty()) {
    const std::string& _s = this->_internal_order_hash();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.MsgCreateSpotLimitOrderResponse.order_hash");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.MsgCreateSpotLimitOrderResponse)
  return target;
}

::size_t MsgCreateSpotLimitOrderResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.MsgCreateSpotLimitOrderResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string order_hash = 1 [json_name = "orderHash"];
  if (!this->_internal_order_hash().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_order_hash());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgCreateSpotLimitOrderResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MsgCreateSpotLimitOrderResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgCreateSpotLimitOrderResponse::GetClassData() const { return &_class_data_; }


void MsgCreateSpotLimitOrderResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MsgCreateSpotLimitOrderResponse*>(&to_msg);
  auto& from = static_cast<const MsgCreateSpotLimitOrderResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.MsgCreateSpotLimitOrderResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_order_hash().empty()) {
    _this->_internal_set_order_hash(from._internal_order_hash());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MsgCreateSpotLimitOrderResponse::CopyFrom(const MsgCreateSpotLimitOrderResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.MsgCreateSpotLimitOrderResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCreateSpotLimitOrderResponse::IsInitialized() const {
  return true;
}

void MsgCreateSpotLimitOrderResponse::InternalSwap(MsgCreateSpotLimitOrderResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.order_hash_, lhs_arena,
                                       &other->_impl_.order_hash_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgCreateSpotLimitOrderResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2ftx_2eproto[7]);
}
// ===================================================================

class MsgBatchCreateSpotLimitOrders::_Internal {
 public:
};

void MsgBatchCreateSpotLimitOrders::clear_orders() {
  _internal_mutable_orders()->Clear();
}
MsgBatchCreateSpotLimitOrders::MsgBatchCreateSpotLimitOrders(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.MsgBatchCreateSpotLimitOrders)
}
MsgBatchCreateSpotLimitOrders::MsgBatchCreateSpotLimitOrders(const MsgBatchCreateSpotLimitOrders& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MsgBatchCreateSpotLimitOrders* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.orders_){from._impl_.orders_}
    , decltype(_impl_.sender_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.sender_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.sender_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sender().empty()) {
    _this->_impl_.sender_.Set(from._internal_sender(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.MsgBatchCreateSpotLimitOrders)
}

inline void MsgBatchCreateSpotLimitOrders::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.orders_){arena}
    , decltype(_impl_.sender_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.sender_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.sender_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MsgBatchCreateSpotLimitOrders::~MsgBatchCreateSpotLimitOrders() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.MsgBatchCreateSpotLimitOrders)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MsgBatchCreateSpotLimitOrders::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_orders()->~RepeatedPtrField();
  _impl_.sender_.Destroy();
}

void MsgBatchCreateSpotLimitOrders::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MsgBatchCreateSpotLimitOrders::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.MsgBatchCreateSpotLimitOrders)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_orders()->Clear();
  _impl_.sender_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgBatchCreateSpotLimitOrders::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string sender = 1 [json_name = "sender"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sender();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.MsgBatchCreateSpotLimitOrders.sender"));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .injective.exchange.v1beta1.SpotOrder orders = 2 [json_name = "orders", (.gogoproto.nullable) = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_orders(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MsgBatchCreateSpotLimitOrders::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.MsgBatchCreateSpotLimitOrders)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string sender = 1 [json_name = "sender"];
  if (!this->_internal_sender().empty()) {
    const std::string& _s = this->_internal_sender();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.MsgBatchCreateSpotLimitOrders.sender");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // repeated .injective.exchange.v1beta1.SpotOrder orders = 2 [json_name = "orders", (.gogoproto.nullable) = false];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_orders_size()); i < n; i++) {
    const auto& repfield = this->_internal_orders(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.MsgBatchCreateSpotLimitOrders)
  return target;
}

::size_t MsgBatchCreateSpotLimitOrders::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.MsgBatchCreateSpotLimitOrders)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .injective.exchange.v1beta1.SpotOrder orders = 2 [json_name = "orders", (.gogoproto.nullable) = false];
  total_size += 1UL * this->_internal_orders_size();
  for (const auto& msg : this->_internal_orders()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string sender = 1 [json_name = "sender"];
  if (!this->_internal_sender().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_sender());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgBatchCreateSpotLimitOrders::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MsgBatchCreateSpotLimitOrders::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgBatchCreateSpotLimitOrders::GetClassData() const { return &_class_data_; }


void MsgBatchCreateSpotLimitOrders::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MsgBatchCreateSpotLimitOrders*>(&to_msg);
  auto& from = static_cast<const MsgBatchCreateSpotLimitOrders&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.MsgBatchCreateSpotLimitOrders)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_orders()->MergeFrom(from._internal_orders());
  if (!from._internal_sender().empty()) {
    _this->_internal_set_sender(from._internal_sender());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MsgBatchCreateSpotLimitOrders::CopyFrom(const MsgBatchCreateSpotLimitOrders& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.MsgBatchCreateSpotLimitOrders)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgBatchCreateSpotLimitOrders::IsInitialized() const {
  return true;
}

void MsgBatchCreateSpotLimitOrders::InternalSwap(MsgBatchCreateSpotLimitOrders* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_orders()->InternalSwap(other->_internal_mutable_orders());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.sender_, lhs_arena,
                                       &other->_impl_.sender_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgBatchCreateSpotLimitOrders::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2ftx_2eproto[8]);
}
// ===================================================================

class MsgBatchCreateSpotLimitOrdersResponse::_Internal {
 public:
};

MsgBatchCreateSpotLimitOrdersResponse::MsgBatchCreateSpotLimitOrdersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.MsgBatchCreateSpotLimitOrdersResponse)
}
MsgBatchCreateSpotLimitOrdersResponse::MsgBatchCreateSpotLimitOrdersResponse(const MsgBatchCreateSpotLimitOrdersResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MsgBatchCreateSpotLimitOrdersResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.order_hashes_){from._impl_.order_hashes_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.MsgBatchCreateSpotLimitOrdersResponse)
}

inline void MsgBatchCreateSpotLimitOrdersResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.order_hashes_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MsgBatchCreateSpotLimitOrdersResponse::~MsgBatchCreateSpotLimitOrdersResponse() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.MsgBatchCreateSpotLimitOrdersResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MsgBatchCreateSpotLimitOrdersResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_order_hashes()->~RepeatedPtrField();
}

void MsgBatchCreateSpotLimitOrdersResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MsgBatchCreateSpotLimitOrdersResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.MsgBatchCreateSpotLimitOrdersResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_order_hashes()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgBatchCreateSpotLimitOrdersResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string order_hashes = 1 [json_name = "orderHashes"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_order_hashes();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.MsgBatchCreateSpotLimitOrdersResponse.order_hashes"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MsgBatchCreateSpotLimitOrdersResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.MsgBatchCreateSpotLimitOrdersResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string order_hashes = 1 [json_name = "orderHashes"];
  for (int i = 0, n = this->_internal_order_hashes_size(); i < n; ++i) {
    const auto& s = this->_internal_order_hashes(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.MsgBatchCreateSpotLimitOrdersResponse.order_hashes");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.MsgBatchCreateSpotLimitOrdersResponse)
  return target;
}

::size_t MsgBatchCreateSpotLimitOrdersResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.MsgBatchCreateSpotLimitOrdersResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string order_hashes = 1 [json_name = "orderHashes"];
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_order_hashes().size());
  for (int i = 0, n = _internal_order_hashes().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_order_hashes().Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgBatchCreateSpotLimitOrdersResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MsgBatchCreateSpotLimitOrdersResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgBatchCreateSpotLimitOrdersResponse::GetClassData() const { return &_class_data_; }


void MsgBatchCreateSpotLimitOrdersResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MsgBatchCreateSpotLimitOrdersResponse*>(&to_msg);
  auto& from = static_cast<const MsgBatchCreateSpotLimitOrdersResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.MsgBatchCreateSpotLimitOrdersResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_order_hashes()->MergeFrom(from._internal_order_hashes());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MsgBatchCreateSpotLimitOrdersResponse::CopyFrom(const MsgBatchCreateSpotLimitOrdersResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.MsgBatchCreateSpotLimitOrdersResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgBatchCreateSpotLimitOrdersResponse::IsInitialized() const {
  return true;
}

void MsgBatchCreateSpotLimitOrdersResponse::InternalSwap(MsgBatchCreateSpotLimitOrdersResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_order_hashes()->InternalSwap(
      other->_internal_mutable_order_hashes());
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgBatchCreateSpotLimitOrdersResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2ftx_2eproto[9]);
}
// ===================================================================

class MsgInstantSpotMarketLaunch::_Internal {
 public:
};

MsgInstantSpotMarketLaunch::MsgInstantSpotMarketLaunch(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.MsgInstantSpotMarketLaunch)
}
MsgInstantSpotMarketLaunch::MsgInstantSpotMarketLaunch(const MsgInstantSpotMarketLaunch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MsgInstantSpotMarketLaunch* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.sender_) {}

    , decltype(_impl_.ticker_) {}

    , decltype(_impl_.base_denom_) {}

    , decltype(_impl_.quote_denom_) {}

    , decltype(_impl_.min_price_tick_size_) {}

    , decltype(_impl_.min_quantity_tick_size_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.sender_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.sender_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sender().empty()) {
    _this->_impl_.sender_.Set(from._internal_sender(), _this->GetArenaForAllocation());
  }
  _impl_.ticker_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.ticker_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ticker().empty()) {
    _this->_impl_.ticker_.Set(from._internal_ticker(), _this->GetArenaForAllocation());
  }
  _impl_.base_denom_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.base_denom_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_base_denom().empty()) {
    _this->_impl_.base_denom_.Set(from._internal_base_denom(), _this->GetArenaForAllocation());
  }
  _impl_.quote_denom_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.quote_denom_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_quote_denom().empty()) {
    _this->_impl_.quote_denom_.Set(from._internal_quote_denom(), _this->GetArenaForAllocation());
  }
  _impl_.min_price_tick_size_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.min_price_tick_size_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_min_price_tick_size().empty()) {
    _this->_impl_.min_price_tick_size_.Set(from._internal_min_price_tick_size(), _this->GetArenaForAllocation());
  }
  _impl_.min_quantity_tick_size_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.min_quantity_tick_size_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_min_quantity_tick_size().empty()) {
    _this->_impl_.min_quantity_tick_size_.Set(from._internal_min_quantity_tick_size(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.MsgInstantSpotMarketLaunch)
}

inline void MsgInstantSpotMarketLaunch::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.sender_) {}

    , decltype(_impl_.ticker_) {}

    , decltype(_impl_.base_denom_) {}

    , decltype(_impl_.quote_denom_) {}

    , decltype(_impl_.min_price_tick_size_) {}

    , decltype(_impl_.min_quantity_tick_size_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.sender_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.sender_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ticker_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.ticker_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.base_denom_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.base_denom_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.quote_denom_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.quote_denom_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.min_price_tick_size_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.min_price_tick_size_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.min_quantity_tick_size_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.min_quantity_tick_size_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MsgInstantSpotMarketLaunch::~MsgInstantSpotMarketLaunch() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.MsgInstantSpotMarketLaunch)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MsgInstantSpotMarketLaunch::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sender_.Destroy();
  _impl_.ticker_.Destroy();
  _impl_.base_denom_.Destroy();
  _impl_.quote_denom_.Destroy();
  _impl_.min_price_tick_size_.Destroy();
  _impl_.min_quantity_tick_size_.Destroy();
}

void MsgInstantSpotMarketLaunch::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MsgInstantSpotMarketLaunch::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.MsgInstantSpotMarketLaunch)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sender_.ClearToEmpty();
  _impl_.ticker_.ClearToEmpty();
  _impl_.base_denom_.ClearToEmpty();
  _impl_.quote_denom_.ClearToEmpty();
  _impl_.min_price_tick_size_.ClearToEmpty();
  _impl_.min_quantity_tick_size_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgInstantSpotMarketLaunch::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string sender = 1 [json_name = "sender"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sender();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.MsgInstantSpotMarketLaunch.sender"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string ticker = 2 [json_name = "ticker"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_ticker();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.MsgInstantSpotMarketLaunch.ticker"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string base_denom = 3 [json_name = "baseDenom"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_base_denom();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.MsgInstantSpotMarketLaunch.base_denom"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string quote_denom = 4 [json_name = "quoteDenom"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_quote_denom();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.MsgInstantSpotMarketLaunch.quote_denom"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string min_price_tick_size = 5 [json_name = "minPriceTickSize", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_min_price_tick_size();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.MsgInstantSpotMarketLaunch.min_price_tick_size"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string min_quantity_tick_size = 6 [json_name = "minQuantityTickSize", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_min_quantity_tick_size();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.MsgInstantSpotMarketLaunch.min_quantity_tick_size"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MsgInstantSpotMarketLaunch::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.MsgInstantSpotMarketLaunch)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string sender = 1 [json_name = "sender"];
  if (!this->_internal_sender().empty()) {
    const std::string& _s = this->_internal_sender();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.MsgInstantSpotMarketLaunch.sender");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string ticker = 2 [json_name = "ticker"];
  if (!this->_internal_ticker().empty()) {
    const std::string& _s = this->_internal_ticker();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.MsgInstantSpotMarketLaunch.ticker");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string base_denom = 3 [json_name = "baseDenom"];
  if (!this->_internal_base_denom().empty()) {
    const std::string& _s = this->_internal_base_denom();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.MsgInstantSpotMarketLaunch.base_denom");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string quote_denom = 4 [json_name = "quoteDenom"];
  if (!this->_internal_quote_denom().empty()) {
    const std::string& _s = this->_internal_quote_denom();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.MsgInstantSpotMarketLaunch.quote_denom");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // string min_price_tick_size = 5 [json_name = "minPriceTickSize", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_min_price_tick_size().empty()) {
    const std::string& _s = this->_internal_min_price_tick_size();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.MsgInstantSpotMarketLaunch.min_price_tick_size");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // string min_quantity_tick_size = 6 [json_name = "minQuantityTickSize", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_min_quantity_tick_size().empty()) {
    const std::string& _s = this->_internal_min_quantity_tick_size();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.MsgInstantSpotMarketLaunch.min_quantity_tick_size");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.MsgInstantSpotMarketLaunch)
  return target;
}

::size_t MsgInstantSpotMarketLaunch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.MsgInstantSpotMarketLaunch)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sender = 1 [json_name = "sender"];
  if (!this->_internal_sender().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_sender());
  }

  // string ticker = 2 [json_name = "ticker"];
  if (!this->_internal_ticker().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_ticker());
  }

  // string base_denom = 3 [json_name = "baseDenom"];
  if (!this->_internal_base_denom().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_base_denom());
  }

  // string quote_denom = 4 [json_name = "quoteDenom"];
  if (!this->_internal_quote_denom().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_quote_denom());
  }

  // string min_price_tick_size = 5 [json_name = "minPriceTickSize", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_min_price_tick_size().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_min_price_tick_size());
  }

  // string min_quantity_tick_size = 6 [json_name = "minQuantityTickSize", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_min_quantity_tick_size().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_min_quantity_tick_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgInstantSpotMarketLaunch::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MsgInstantSpotMarketLaunch::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgInstantSpotMarketLaunch::GetClassData() const { return &_class_data_; }


void MsgInstantSpotMarketLaunch::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MsgInstantSpotMarketLaunch*>(&to_msg);
  auto& from = static_cast<const MsgInstantSpotMarketLaunch&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.MsgInstantSpotMarketLaunch)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_sender().empty()) {
    _this->_internal_set_sender(from._internal_sender());
  }
  if (!from._internal_ticker().empty()) {
    _this->_internal_set_ticker(from._internal_ticker());
  }
  if (!from._internal_base_denom().empty()) {
    _this->_internal_set_base_denom(from._internal_base_denom());
  }
  if (!from._internal_quote_denom().empty()) {
    _this->_internal_set_quote_denom(from._internal_quote_denom());
  }
  if (!from._internal_min_price_tick_size().empty()) {
    _this->_internal_set_min_price_tick_size(from._internal_min_price_tick_size());
  }
  if (!from._internal_min_quantity_tick_size().empty()) {
    _this->_internal_set_min_quantity_tick_size(from._internal_min_quantity_tick_size());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MsgInstantSpotMarketLaunch::CopyFrom(const MsgInstantSpotMarketLaunch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.MsgInstantSpotMarketLaunch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgInstantSpotMarketLaunch::IsInitialized() const {
  return true;
}

void MsgInstantSpotMarketLaunch::InternalSwap(MsgInstantSpotMarketLaunch* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.sender_, lhs_arena,
                                       &other->_impl_.sender_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.ticker_, lhs_arena,
                                       &other->_impl_.ticker_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.base_denom_, lhs_arena,
                                       &other->_impl_.base_denom_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.quote_denom_, lhs_arena,
                                       &other->_impl_.quote_denom_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.min_price_tick_size_, lhs_arena,
                                       &other->_impl_.min_price_tick_size_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.min_quantity_tick_size_, lhs_arena,
                                       &other->_impl_.min_quantity_tick_size_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgInstantSpotMarketLaunch::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2ftx_2eproto[10]);
}
// ===================================================================

class MsgInstantSpotMarketLaunchResponse::_Internal {
 public:
};

MsgInstantSpotMarketLaunchResponse::MsgInstantSpotMarketLaunchResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.MsgInstantSpotMarketLaunchResponse)
}
MsgInstantSpotMarketLaunchResponse::MsgInstantSpotMarketLaunchResponse(const MsgInstantSpotMarketLaunchResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  MsgInstantSpotMarketLaunchResponse* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.MsgInstantSpotMarketLaunchResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgInstantSpotMarketLaunchResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgInstantSpotMarketLaunchResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata MsgInstantSpotMarketLaunchResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2ftx_2eproto[11]);
}
// ===================================================================

class MsgInstantPerpetualMarketLaunch::_Internal {
 public:
};

MsgInstantPerpetualMarketLaunch::MsgInstantPerpetualMarketLaunch(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.MsgInstantPerpetualMarketLaunch)
}
MsgInstantPerpetualMarketLaunch::MsgInstantPerpetualMarketLaunch(const MsgInstantPerpetualMarketLaunch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MsgInstantPerpetualMarketLaunch* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.sender_) {}

    , decltype(_impl_.ticker_) {}

    , decltype(_impl_.quote_denom_) {}

    , decltype(_impl_.oracle_base_) {}

    , decltype(_impl_.oracle_quote_) {}

    , decltype(_impl_.maker_fee_rate_) {}

    , decltype(_impl_.taker_fee_rate_) {}

    , decltype(_impl_.initial_margin_ratio_) {}

    , decltype(_impl_.maintenance_margin_ratio_) {}

    , decltype(_impl_.min_price_tick_size_) {}

    , decltype(_impl_.min_quantity_tick_size_) {}

    , decltype(_impl_.oracle_scale_factor_) {}

    , decltype(_impl_.oracle_type_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.sender_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.sender_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sender().empty()) {
    _this->_impl_.sender_.Set(from._internal_sender(), _this->GetArenaForAllocation());
  }
  _impl_.ticker_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.ticker_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ticker().empty()) {
    _this->_impl_.ticker_.Set(from._internal_ticker(), _this->GetArenaForAllocation());
  }
  _impl_.quote_denom_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.quote_denom_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_quote_denom().empty()) {
    _this->_impl_.quote_denom_.Set(from._internal_quote_denom(), _this->GetArenaForAllocation());
  }
  _impl_.oracle_base_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.oracle_base_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_oracle_base().empty()) {
    _this->_impl_.oracle_base_.Set(from._internal_oracle_base(), _this->GetArenaForAllocation());
  }
  _impl_.oracle_quote_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.oracle_quote_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_oracle_quote().empty()) {
    _this->_impl_.oracle_quote_.Set(from._internal_oracle_quote(), _this->GetArenaForAllocation());
  }
  _impl_.maker_fee_rate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.maker_fee_rate_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_maker_fee_rate().empty()) {
    _this->_impl_.maker_fee_rate_.Set(from._internal_maker_fee_rate(), _this->GetArenaForAllocation());
  }
  _impl_.taker_fee_rate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.taker_fee_rate_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_taker_fee_rate().empty()) {
    _this->_impl_.taker_fee_rate_.Set(from._internal_taker_fee_rate(), _this->GetArenaForAllocation());
  }
  _impl_.initial_margin_ratio_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.initial_margin_ratio_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_initial_margin_ratio().empty()) {
    _this->_impl_.initial_margin_ratio_.Set(from._internal_initial_margin_ratio(), _this->GetArenaForAllocation());
  }
  _impl_.maintenance_margin_ratio_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.maintenance_margin_ratio_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_maintenance_margin_ratio().empty()) {
    _this->_impl_.maintenance_margin_ratio_.Set(from._internal_maintenance_margin_ratio(), _this->GetArenaForAllocation());
  }
  _impl_.min_price_tick_size_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.min_price_tick_size_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_min_price_tick_size().empty()) {
    _this->_impl_.min_price_tick_size_.Set(from._internal_min_price_tick_size(), _this->GetArenaForAllocation());
  }
  _impl_.min_quantity_tick_size_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.min_quantity_tick_size_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_min_quantity_tick_size().empty()) {
    _this->_impl_.min_quantity_tick_size_.Set(from._internal_min_quantity_tick_size(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.oracle_scale_factor_, &from._impl_.oracle_scale_factor_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.oracle_type_) -
    reinterpret_cast<char*>(&_impl_.oracle_scale_factor_)) + sizeof(_impl_.oracle_type_));
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.MsgInstantPerpetualMarketLaunch)
}

inline void MsgInstantPerpetualMarketLaunch::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.sender_) {}

    , decltype(_impl_.ticker_) {}

    , decltype(_impl_.quote_denom_) {}

    , decltype(_impl_.oracle_base_) {}

    , decltype(_impl_.oracle_quote_) {}

    , decltype(_impl_.maker_fee_rate_) {}

    , decltype(_impl_.taker_fee_rate_) {}

    , decltype(_impl_.initial_margin_ratio_) {}

    , decltype(_impl_.maintenance_margin_ratio_) {}

    , decltype(_impl_.min_price_tick_size_) {}

    , decltype(_impl_.min_quantity_tick_size_) {}

    , decltype(_impl_.oracle_scale_factor_) { 0u }

    , decltype(_impl_.oracle_type_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.sender_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.sender_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ticker_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.ticker_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.quote_denom_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.quote_denom_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.oracle_base_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.oracle_base_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.oracle_quote_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.oracle_quote_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.maker_fee_rate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.maker_fee_rate_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.taker_fee_rate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.taker_fee_rate_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.initial_margin_ratio_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.initial_margin_ratio_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.maintenance_margin_ratio_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.maintenance_margin_ratio_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.min_price_tick_size_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.min_price_tick_size_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.min_quantity_tick_size_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.min_quantity_tick_size_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MsgInstantPerpetualMarketLaunch::~MsgInstantPerpetualMarketLaunch() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.MsgInstantPerpetualMarketLaunch)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MsgInstantPerpetualMarketLaunch::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sender_.Destroy();
  _impl_.ticker_.Destroy();
  _impl_.quote_denom_.Destroy();
  _impl_.oracle_base_.Destroy();
  _impl_.oracle_quote_.Destroy();
  _impl_.maker_fee_rate_.Destroy();
  _impl_.taker_fee_rate_.Destroy();
  _impl_.initial_margin_ratio_.Destroy();
  _impl_.maintenance_margin_ratio_.Destroy();
  _impl_.min_price_tick_size_.Destroy();
  _impl_.min_quantity_tick_size_.Destroy();
}

void MsgInstantPerpetualMarketLaunch::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MsgInstantPerpetualMarketLaunch::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.MsgInstantPerpetualMarketLaunch)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sender_.ClearToEmpty();
  _impl_.ticker_.ClearToEmpty();
  _impl_.quote_denom_.ClearToEmpty();
  _impl_.oracle_base_.ClearToEmpty();
  _impl_.oracle_quote_.ClearToEmpty();
  _impl_.maker_fee_rate_.ClearToEmpty();
  _impl_.taker_fee_rate_.ClearToEmpty();
  _impl_.initial_margin_ratio_.ClearToEmpty();
  _impl_.maintenance_margin_ratio_.ClearToEmpty();
  _impl_.min_price_tick_size_.ClearToEmpty();
  _impl_.min_quantity_tick_size_.ClearToEmpty();
  ::memset(&_impl_.oracle_scale_factor_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.oracle_type_) -
      reinterpret_cast<char*>(&_impl_.oracle_scale_factor_)) + sizeof(_impl_.oracle_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgInstantPerpetualMarketLaunch::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string sender = 1 [json_name = "sender"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sender();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.MsgInstantPerpetualMarketLaunch.sender"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string ticker = 2 [json_name = "ticker"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_ticker();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.MsgInstantPerpetualMarketLaunch.ticker"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string quote_denom = 3 [json_name = "quoteDenom"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_quote_denom();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.MsgInstantPerpetualMarketLaunch.quote_denom"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string oracle_base = 4 [json_name = "oracleBase"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_oracle_base();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.MsgInstantPerpetualMarketLaunch.oracle_base"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string oracle_quote = 5 [json_name = "oracleQuote"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_oracle_quote();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.MsgInstantPerpetualMarketLaunch.oracle_quote"));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 oracle_scale_factor = 6 [json_name = "oracleScaleFactor"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _impl_.oracle_scale_factor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .injective.oracle.v1beta1.OracleType oracle_type = 7 [json_name = "oracleType"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 56)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_oracle_type(static_cast<::injective::oracle::v1beta1::OracleType>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // string maker_fee_rate = 8 [json_name = "makerFeeRate", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_maker_fee_rate();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.MsgInstantPerpetualMarketLaunch.maker_fee_rate"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string taker_fee_rate = 9 [json_name = "takerFeeRate", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_taker_fee_rate();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.MsgInstantPerpetualMarketLaunch.taker_fee_rate"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string initial_margin_ratio = 10 [json_name = "initialMarginRatio", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_initial_margin_ratio();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.MsgInstantPerpetualMarketLaunch.initial_margin_ratio"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string maintenance_margin_ratio = 11 [json_name = "maintenanceMarginRatio", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_maintenance_margin_ratio();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.MsgInstantPerpetualMarketLaunch.maintenance_margin_ratio"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string min_price_tick_size = 12 [json_name = "minPriceTickSize", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_min_price_tick_size();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.MsgInstantPerpetualMarketLaunch.min_price_tick_size"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string min_quantity_tick_size = 13 [json_name = "minQuantityTickSize", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_min_quantity_tick_size();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.MsgInstantPerpetualMarketLaunch.min_quantity_tick_size"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MsgInstantPerpetualMarketLaunch::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.MsgInstantPerpetualMarketLaunch)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string sender = 1 [json_name = "sender"];
  if (!this->_internal_sender().empty()) {
    const std::string& _s = this->_internal_sender();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.MsgInstantPerpetualMarketLaunch.sender");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string ticker = 2 [json_name = "ticker"];
  if (!this->_internal_ticker().empty()) {
    const std::string& _s = this->_internal_ticker();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.MsgInstantPerpetualMarketLaunch.ticker");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string quote_denom = 3 [json_name = "quoteDenom"];
  if (!this->_internal_quote_denom().empty()) {
    const std::string& _s = this->_internal_quote_denom();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.MsgInstantPerpetualMarketLaunch.quote_denom");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string oracle_base = 4 [json_name = "oracleBase"];
  if (!this->_internal_oracle_base().empty()) {
    const std::string& _s = this->_internal_oracle_base();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.MsgInstantPerpetualMarketLaunch.oracle_base");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // string oracle_quote = 5 [json_name = "oracleQuote"];
  if (!this->_internal_oracle_quote().empty()) {
    const std::string& _s = this->_internal_oracle_quote();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.MsgInstantPerpetualMarketLaunch.oracle_quote");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // uint32 oracle_scale_factor = 6 [json_name = "oracleScaleFactor"];
  if (this->_internal_oracle_scale_factor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        6, this->_internal_oracle_scale_factor(), target);
  }

  // .injective.oracle.v1beta1.OracleType oracle_type = 7 [json_name = "oracleType"];
  if (this->_internal_oracle_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        7, this->_internal_oracle_type(), target);
  }

  // string maker_fee_rate = 8 [json_name = "makerFeeRate", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_maker_fee_rate().empty()) {
    const std::string& _s = this->_internal_maker_fee_rate();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.MsgInstantPerpetualMarketLaunch.maker_fee_rate");
    target = stream->WriteStringMaybeAliased(8, _s, target);
  }

  // string taker_fee_rate = 9 [json_name = "takerFeeRate", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_taker_fee_rate().empty()) {
    const std::string& _s = this->_internal_taker_fee_rate();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.MsgInstantPerpetualMarketLaunch.taker_fee_rate");
    target = stream->WriteStringMaybeAliased(9, _s, target);
  }

  // string initial_margin_ratio = 10 [json_name = "initialMarginRatio", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_initial_margin_ratio().empty()) {
    const std::string& _s = this->_internal_initial_margin_ratio();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.MsgInstantPerpetualMarketLaunch.initial_margin_ratio");
    target = stream->WriteStringMaybeAliased(10, _s, target);
  }

  // string maintenance_margin_ratio = 11 [json_name = "maintenanceMarginRatio", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_maintenance_margin_ratio().empty()) {
    const std::string& _s = this->_internal_maintenance_margin_ratio();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.MsgInstantPerpetualMarketLaunch.maintenance_margin_ratio");
    target = stream->WriteStringMaybeAliased(11, _s, target);
  }

  // string min_price_tick_size = 12 [json_name = "minPriceTickSize", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_min_price_tick_size().empty()) {
    const std::string& _s = this->_internal_min_price_tick_size();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.MsgInstantPerpetualMarketLaunch.min_price_tick_size");
    target = stream->WriteStringMaybeAliased(12, _s, target);
  }

  // string min_quantity_tick_size = 13 [json_name = "minQuantityTickSize", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_min_quantity_tick_size().empty()) {
    const std::string& _s = this->_internal_min_quantity_tick_size();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.MsgInstantPerpetualMarketLaunch.min_quantity_tick_size");
    target = stream->WriteStringMaybeAliased(13, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.MsgInstantPerpetualMarketLaunch)
  return target;
}

::size_t MsgInstantPerpetualMarketLaunch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.MsgInstantPerpetualMarketLaunch)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sender = 1 [json_name = "sender"];
  if (!this->_internal_sender().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_sender());
  }

  // string ticker = 2 [json_name = "ticker"];
  if (!this->_internal_ticker().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_ticker());
  }

  // string quote_denom = 3 [json_name = "quoteDenom"];
  if (!this->_internal_quote_denom().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_quote_denom());
  }

  // string oracle_base = 4 [json_name = "oracleBase"];
  if (!this->_internal_oracle_base().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_oracle_base());
  }

  // string oracle_quote = 5 [json_name = "oracleQuote"];
  if (!this->_internal_oracle_quote().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_oracle_quote());
  }

  // string maker_fee_rate = 8 [json_name = "makerFeeRate", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_maker_fee_rate().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_maker_fee_rate());
  }

  // string taker_fee_rate = 9 [json_name = "takerFeeRate", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_taker_fee_rate().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_taker_fee_rate());
  }

  // string initial_margin_ratio = 10 [json_name = "initialMarginRatio", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_initial_margin_ratio().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_initial_margin_ratio());
  }

  // string maintenance_margin_ratio = 11 [json_name = "maintenanceMarginRatio", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_maintenance_margin_ratio().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_maintenance_margin_ratio());
  }

  // string min_price_tick_size = 12 [json_name = "minPriceTickSize", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_min_price_tick_size().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_min_price_tick_size());
  }

  // string min_quantity_tick_size = 13 [json_name = "minQuantityTickSize", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_min_quantity_tick_size().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_min_quantity_tick_size());
  }

  // uint32 oracle_scale_factor = 6 [json_name = "oracleScaleFactor"];
  if (this->_internal_oracle_scale_factor() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_oracle_scale_factor());
  }

  // .injective.oracle.v1beta1.OracleType oracle_type = 7 [json_name = "oracleType"];
  if (this->_internal_oracle_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_oracle_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgInstantPerpetualMarketLaunch::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MsgInstantPerpetualMarketLaunch::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgInstantPerpetualMarketLaunch::GetClassData() const { return &_class_data_; }


void MsgInstantPerpetualMarketLaunch::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MsgInstantPerpetualMarketLaunch*>(&to_msg);
  auto& from = static_cast<const MsgInstantPerpetualMarketLaunch&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.MsgInstantPerpetualMarketLaunch)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_sender().empty()) {
    _this->_internal_set_sender(from._internal_sender());
  }
  if (!from._internal_ticker().empty()) {
    _this->_internal_set_ticker(from._internal_ticker());
  }
  if (!from._internal_quote_denom().empty()) {
    _this->_internal_set_quote_denom(from._internal_quote_denom());
  }
  if (!from._internal_oracle_base().empty()) {
    _this->_internal_set_oracle_base(from._internal_oracle_base());
  }
  if (!from._internal_oracle_quote().empty()) {
    _this->_internal_set_oracle_quote(from._internal_oracle_quote());
  }
  if (!from._internal_maker_fee_rate().empty()) {
    _this->_internal_set_maker_fee_rate(from._internal_maker_fee_rate());
  }
  if (!from._internal_taker_fee_rate().empty()) {
    _this->_internal_set_taker_fee_rate(from._internal_taker_fee_rate());
  }
  if (!from._internal_initial_margin_ratio().empty()) {
    _this->_internal_set_initial_margin_ratio(from._internal_initial_margin_ratio());
  }
  if (!from._internal_maintenance_margin_ratio().empty()) {
    _this->_internal_set_maintenance_margin_ratio(from._internal_maintenance_margin_ratio());
  }
  if (!from._internal_min_price_tick_size().empty()) {
    _this->_internal_set_min_price_tick_size(from._internal_min_price_tick_size());
  }
  if (!from._internal_min_quantity_tick_size().empty()) {
    _this->_internal_set_min_quantity_tick_size(from._internal_min_quantity_tick_size());
  }
  if (from._internal_oracle_scale_factor() != 0) {
    _this->_internal_set_oracle_scale_factor(from._internal_oracle_scale_factor());
  }
  if (from._internal_oracle_type() != 0) {
    _this->_internal_set_oracle_type(from._internal_oracle_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MsgInstantPerpetualMarketLaunch::CopyFrom(const MsgInstantPerpetualMarketLaunch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.MsgInstantPerpetualMarketLaunch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgInstantPerpetualMarketLaunch::IsInitialized() const {
  return true;
}

void MsgInstantPerpetualMarketLaunch::InternalSwap(MsgInstantPerpetualMarketLaunch* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.sender_, lhs_arena,
                                       &other->_impl_.sender_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.ticker_, lhs_arena,
                                       &other->_impl_.ticker_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.quote_denom_, lhs_arena,
                                       &other->_impl_.quote_denom_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.oracle_base_, lhs_arena,
                                       &other->_impl_.oracle_base_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.oracle_quote_, lhs_arena,
                                       &other->_impl_.oracle_quote_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.maker_fee_rate_, lhs_arena,
                                       &other->_impl_.maker_fee_rate_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.taker_fee_rate_, lhs_arena,
                                       &other->_impl_.taker_fee_rate_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.initial_margin_ratio_, lhs_arena,
                                       &other->_impl_.initial_margin_ratio_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.maintenance_margin_ratio_, lhs_arena,
                                       &other->_impl_.maintenance_margin_ratio_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.min_price_tick_size_, lhs_arena,
                                       &other->_impl_.min_price_tick_size_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.min_quantity_tick_size_, lhs_arena,
                                       &other->_impl_.min_quantity_tick_size_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgInstantPerpetualMarketLaunch, _impl_.oracle_type_)
      + sizeof(MsgInstantPerpetualMarketLaunch::_impl_.oracle_type_)
      - PROTOBUF_FIELD_OFFSET(MsgInstantPerpetualMarketLaunch, _impl_.oracle_scale_factor_)>(
          reinterpret_cast<char*>(&_impl_.oracle_scale_factor_),
          reinterpret_cast<char*>(&other->_impl_.oracle_scale_factor_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgInstantPerpetualMarketLaunch::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2ftx_2eproto[12]);
}
// ===================================================================

class MsgInstantPerpetualMarketLaunchResponse::_Internal {
 public:
};

MsgInstantPerpetualMarketLaunchResponse::MsgInstantPerpetualMarketLaunchResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.MsgInstantPerpetualMarketLaunchResponse)
}
MsgInstantPerpetualMarketLaunchResponse::MsgInstantPerpetualMarketLaunchResponse(const MsgInstantPerpetualMarketLaunchResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  MsgInstantPerpetualMarketLaunchResponse* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.MsgInstantPerpetualMarketLaunchResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgInstantPerpetualMarketLaunchResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgInstantPerpetualMarketLaunchResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata MsgInstantPerpetualMarketLaunchResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2ftx_2eproto[13]);
}
// ===================================================================

class MsgInstantBinaryOptionsMarketLaunch::_Internal {
 public:
};

MsgInstantBinaryOptionsMarketLaunch::MsgInstantBinaryOptionsMarketLaunch(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.MsgInstantBinaryOptionsMarketLaunch)
}
MsgInstantBinaryOptionsMarketLaunch::MsgInstantBinaryOptionsMarketLaunch(const MsgInstantBinaryOptionsMarketLaunch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MsgInstantBinaryOptionsMarketLaunch* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.sender_) {}

    , decltype(_impl_.ticker_) {}

    , decltype(_impl_.oracle_symbol_) {}

    , decltype(_impl_.oracle_provider_) {}

    , decltype(_impl_.maker_fee_rate_) {}

    , decltype(_impl_.taker_fee_rate_) {}

    , decltype(_impl_.admin_) {}

    , decltype(_impl_.quote_denom_) {}

    , decltype(_impl_.min_price_tick_size_) {}

    , decltype(_impl_.min_quantity_tick_size_) {}

    , decltype(_impl_.oracle_type_) {}

    , decltype(_impl_.oracle_scale_factor_) {}

    , decltype(_impl_.expiration_timestamp_) {}

    , decltype(_impl_.settlement_timestamp_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.sender_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.sender_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sender().empty()) {
    _this->_impl_.sender_.Set(from._internal_sender(), _this->GetArenaForAllocation());
  }
  _impl_.ticker_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.ticker_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ticker().empty()) {
    _this->_impl_.ticker_.Set(from._internal_ticker(), _this->GetArenaForAllocation());
  }
  _impl_.oracle_symbol_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.oracle_symbol_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_oracle_symbol().empty()) {
    _this->_impl_.oracle_symbol_.Set(from._internal_oracle_symbol(), _this->GetArenaForAllocation());
  }
  _impl_.oracle_provider_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.oracle_provider_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_oracle_provider().empty()) {
    _this->_impl_.oracle_provider_.Set(from._internal_oracle_provider(), _this->GetArenaForAllocation());
  }
  _impl_.maker_fee_rate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.maker_fee_rate_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_maker_fee_rate().empty()) {
    _this->_impl_.maker_fee_rate_.Set(from._internal_maker_fee_rate(), _this->GetArenaForAllocation());
  }
  _impl_.taker_fee_rate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.taker_fee_rate_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_taker_fee_rate().empty()) {
    _this->_impl_.taker_fee_rate_.Set(from._internal_taker_fee_rate(), _this->GetArenaForAllocation());
  }
  _impl_.admin_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.admin_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_admin().empty()) {
    _this->_impl_.admin_.Set(from._internal_admin(), _this->GetArenaForAllocation());
  }
  _impl_.quote_denom_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.quote_denom_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_quote_denom().empty()) {
    _this->_impl_.quote_denom_.Set(from._internal_quote_denom(), _this->GetArenaForAllocation());
  }
  _impl_.min_price_tick_size_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.min_price_tick_size_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_min_price_tick_size().empty()) {
    _this->_impl_.min_price_tick_size_.Set(from._internal_min_price_tick_size(), _this->GetArenaForAllocation());
  }
  _impl_.min_quantity_tick_size_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.min_quantity_tick_size_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_min_quantity_tick_size().empty()) {
    _this->_impl_.min_quantity_tick_size_.Set(from._internal_min_quantity_tick_size(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.oracle_type_, &from._impl_.oracle_type_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.settlement_timestamp_) -
    reinterpret_cast<char*>(&_impl_.oracle_type_)) + sizeof(_impl_.settlement_timestamp_));
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.MsgInstantBinaryOptionsMarketLaunch)
}

inline void MsgInstantBinaryOptionsMarketLaunch::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.sender_) {}

    , decltype(_impl_.ticker_) {}

    , decltype(_impl_.oracle_symbol_) {}

    , decltype(_impl_.oracle_provider_) {}

    , decltype(_impl_.maker_fee_rate_) {}

    , decltype(_impl_.taker_fee_rate_) {}

    , decltype(_impl_.admin_) {}

    , decltype(_impl_.quote_denom_) {}

    , decltype(_impl_.min_price_tick_size_) {}

    , decltype(_impl_.min_quantity_tick_size_) {}

    , decltype(_impl_.oracle_type_) { 0 }

    , decltype(_impl_.oracle_scale_factor_) { 0u }

    , decltype(_impl_.expiration_timestamp_) { ::int64_t{0} }

    , decltype(_impl_.settlement_timestamp_) { ::int64_t{0} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.sender_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.sender_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ticker_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.ticker_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.oracle_symbol_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.oracle_symbol_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.oracle_provider_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.oracle_provider_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.maker_fee_rate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.maker_fee_rate_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.taker_fee_rate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.taker_fee_rate_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.admin_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.admin_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.quote_denom_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.quote_denom_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.min_price_tick_size_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.min_price_tick_size_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.min_quantity_tick_size_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.min_quantity_tick_size_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MsgInstantBinaryOptionsMarketLaunch::~MsgInstantBinaryOptionsMarketLaunch() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.MsgInstantBinaryOptionsMarketLaunch)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MsgInstantBinaryOptionsMarketLaunch::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sender_.Destroy();
  _impl_.ticker_.Destroy();
  _impl_.oracle_symbol_.Destroy();
  _impl_.oracle_provider_.Destroy();
  _impl_.maker_fee_rate_.Destroy();
  _impl_.taker_fee_rate_.Destroy();
  _impl_.admin_.Destroy();
  _impl_.quote_denom_.Destroy();
  _impl_.min_price_tick_size_.Destroy();
  _impl_.min_quantity_tick_size_.Destroy();
}

void MsgInstantBinaryOptionsMarketLaunch::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MsgInstantBinaryOptionsMarketLaunch::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.MsgInstantBinaryOptionsMarketLaunch)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sender_.ClearToEmpty();
  _impl_.ticker_.ClearToEmpty();
  _impl_.oracle_symbol_.ClearToEmpty();
  _impl_.oracle_provider_.ClearToEmpty();
  _impl_.maker_fee_rate_.ClearToEmpty();
  _impl_.taker_fee_rate_.ClearToEmpty();
  _impl_.admin_.ClearToEmpty();
  _impl_.quote_denom_.ClearToEmpty();
  _impl_.min_price_tick_size_.ClearToEmpty();
  _impl_.min_quantity_tick_size_.ClearToEmpty();
  ::memset(&_impl_.oracle_type_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.settlement_timestamp_) -
      reinterpret_cast<char*>(&_impl_.oracle_type_)) + sizeof(_impl_.settlement_timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgInstantBinaryOptionsMarketLaunch::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string sender = 1 [json_name = "sender"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sender();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.MsgInstantBinaryOptionsMarketLaunch.sender"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string ticker = 2 [json_name = "ticker"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_ticker();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.MsgInstantBinaryOptionsMarketLaunch.ticker"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string oracle_symbol = 3 [json_name = "oracleSymbol"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_oracle_symbol();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.MsgInstantBinaryOptionsMarketLaunch.oracle_symbol"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string oracle_provider = 4 [json_name = "oracleProvider"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_oracle_provider();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.MsgInstantBinaryOptionsMarketLaunch.oracle_provider"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .injective.oracle.v1beta1.OracleType oracle_type = 5 [json_name = "oracleType"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_oracle_type(static_cast<::injective::oracle::v1beta1::OracleType>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 oracle_scale_factor = 6 [json_name = "oracleScaleFactor"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _impl_.oracle_scale_factor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string maker_fee_rate = 7 [json_name = "makerFeeRate", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_maker_fee_rate();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.MsgInstantBinaryOptionsMarketLaunch.maker_fee_rate"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string taker_fee_rate = 8 [json_name = "takerFeeRate", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_taker_fee_rate();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.MsgInstantBinaryOptionsMarketLaunch.taker_fee_rate"));
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 expiration_timestamp = 9 [json_name = "expirationTimestamp"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 72)) {
          _impl_.expiration_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 settlement_timestamp = 10 [json_name = "settlementTimestamp"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 80)) {
          _impl_.settlement_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string admin = 11 [json_name = "admin"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_admin();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.MsgInstantBinaryOptionsMarketLaunch.admin"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string quote_denom = 12 [json_name = "quoteDenom"];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_quote_denom();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.MsgInstantBinaryOptionsMarketLaunch.quote_denom"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string min_price_tick_size = 13 [json_name = "minPriceTickSize", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_min_price_tick_size();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.MsgInstantBinaryOptionsMarketLaunch.min_price_tick_size"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string min_quantity_tick_size = 14 [json_name = "minQuantityTickSize", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_min_quantity_tick_size();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.MsgInstantBinaryOptionsMarketLaunch.min_quantity_tick_size"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MsgInstantBinaryOptionsMarketLaunch::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.MsgInstantBinaryOptionsMarketLaunch)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string sender = 1 [json_name = "sender"];
  if (!this->_internal_sender().empty()) {
    const std::string& _s = this->_internal_sender();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.MsgInstantBinaryOptionsMarketLaunch.sender");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string ticker = 2 [json_name = "ticker"];
  if (!this->_internal_ticker().empty()) {
    const std::string& _s = this->_internal_ticker();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.MsgInstantBinaryOptionsMarketLaunch.ticker");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string oracle_symbol = 3 [json_name = "oracleSymbol"];
  if (!this->_internal_oracle_symbol().empty()) {
    const std::string& _s = this->_internal_oracle_symbol();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.MsgInstantBinaryOptionsMarketLaunch.oracle_symbol");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string oracle_provider = 4 [json_name = "oracleProvider"];
  if (!this->_internal_oracle_provider().empty()) {
    const std::string& _s = this->_internal_oracle_provider();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.MsgInstantBinaryOptionsMarketLaunch.oracle_provider");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // .injective.oracle.v1beta1.OracleType oracle_type = 5 [json_name = "oracleType"];
  if (this->_internal_oracle_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        5, this->_internal_oracle_type(), target);
  }

  // uint32 oracle_scale_factor = 6 [json_name = "oracleScaleFactor"];
  if (this->_internal_oracle_scale_factor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        6, this->_internal_oracle_scale_factor(), target);
  }

  // string maker_fee_rate = 7 [json_name = "makerFeeRate", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_maker_fee_rate().empty()) {
    const std::string& _s = this->_internal_maker_fee_rate();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.MsgInstantBinaryOptionsMarketLaunch.maker_fee_rate");
    target = stream->WriteStringMaybeAliased(7, _s, target);
  }

  // string taker_fee_rate = 8 [json_name = "takerFeeRate", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_taker_fee_rate().empty()) {
    const std::string& _s = this->_internal_taker_fee_rate();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.MsgInstantBinaryOptionsMarketLaunch.taker_fee_rate");
    target = stream->WriteStringMaybeAliased(8, _s, target);
  }

  // int64 expiration_timestamp = 9 [json_name = "expirationTimestamp"];
  if (this->_internal_expiration_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        9, this->_internal_expiration_timestamp(), target);
  }

  // int64 settlement_timestamp = 10 [json_name = "settlementTimestamp"];
  if (this->_internal_settlement_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        10, this->_internal_settlement_timestamp(), target);
  }

  // string admin = 11 [json_name = "admin"];
  if (!this->_internal_admin().empty()) {
    const std::string& _s = this->_internal_admin();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.MsgInstantBinaryOptionsMarketLaunch.admin");
    target = stream->WriteStringMaybeAliased(11, _s, target);
  }

  // string quote_denom = 12 [json_name = "quoteDenom"];
  if (!this->_internal_quote_denom().empty()) {
    const std::string& _s = this->_internal_quote_denom();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.MsgInstantBinaryOptionsMarketLaunch.quote_denom");
    target = stream->WriteStringMaybeAliased(12, _s, target);
  }

  // string min_price_tick_size = 13 [json_name = "minPriceTickSize", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_min_price_tick_size().empty()) {
    const std::string& _s = this->_internal_min_price_tick_size();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.MsgInstantBinaryOptionsMarketLaunch.min_price_tick_size");
    target = stream->WriteStringMaybeAliased(13, _s, target);
  }

  // string min_quantity_tick_size = 14 [json_name = "minQuantityTickSize", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_min_quantity_tick_size().empty()) {
    const std::string& _s = this->_internal_min_quantity_tick_size();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.MsgInstantBinaryOptionsMarketLaunch.min_quantity_tick_size");
    target = stream->WriteStringMaybeAliased(14, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.MsgInstantBinaryOptionsMarketLaunch)
  return target;
}

::size_t MsgInstantBinaryOptionsMarketLaunch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.MsgInstantBinaryOptionsMarketLaunch)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sender = 1 [json_name = "sender"];
  if (!this->_internal_sender().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_sender());
  }

  // string ticker = 2 [json_name = "ticker"];
  if (!this->_internal_ticker().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_ticker());
  }

  // string oracle_symbol = 3 [json_name = "oracleSymbol"];
  if (!this->_internal_oracle_symbol().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_oracle_symbol());
  }

  // string oracle_provider = 4 [json_name = "oracleProvider"];
  if (!this->_internal_oracle_provider().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_oracle_provider());
  }

  // string maker_fee_rate = 7 [json_name = "makerFeeRate", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_maker_fee_rate().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_maker_fee_rate());
  }

  // string taker_fee_rate = 8 [json_name = "takerFeeRate", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_taker_fee_rate().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_taker_fee_rate());
  }

  // string admin = 11 [json_name = "admin"];
  if (!this->_internal_admin().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_admin());
  }

  // string quote_denom = 12 [json_name = "quoteDenom"];
  if (!this->_internal_quote_denom().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_quote_denom());
  }

  // string min_price_tick_size = 13 [json_name = "minPriceTickSize", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_min_price_tick_size().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_min_price_tick_size());
  }

  // string min_quantity_tick_size = 14 [json_name = "minQuantityTickSize", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_min_quantity_tick_size().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_min_quantity_tick_size());
  }

  // .injective.oracle.v1beta1.OracleType oracle_type = 5 [json_name = "oracleType"];
  if (this->_internal_oracle_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_oracle_type());
  }

  // uint32 oracle_scale_factor = 6 [json_name = "oracleScaleFactor"];
  if (this->_internal_oracle_scale_factor() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_oracle_scale_factor());
  }

  // int64 expiration_timestamp = 9 [json_name = "expirationTimestamp"];
  if (this->_internal_expiration_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_expiration_timestamp());
  }

  // int64 settlement_timestamp = 10 [json_name = "settlementTimestamp"];
  if (this->_internal_settlement_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_settlement_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgInstantBinaryOptionsMarketLaunch::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MsgInstantBinaryOptionsMarketLaunch::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgInstantBinaryOptionsMarketLaunch::GetClassData() const { return &_class_data_; }


void MsgInstantBinaryOptionsMarketLaunch::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MsgInstantBinaryOptionsMarketLaunch*>(&to_msg);
  auto& from = static_cast<const MsgInstantBinaryOptionsMarketLaunch&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.MsgInstantBinaryOptionsMarketLaunch)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_sender().empty()) {
    _this->_internal_set_sender(from._internal_sender());
  }
  if (!from._internal_ticker().empty()) {
    _this->_internal_set_ticker(from._internal_ticker());
  }
  if (!from._internal_oracle_symbol().empty()) {
    _this->_internal_set_oracle_symbol(from._internal_oracle_symbol());
  }
  if (!from._internal_oracle_provider().empty()) {
    _this->_internal_set_oracle_provider(from._internal_oracle_provider());
  }
  if (!from._internal_maker_fee_rate().empty()) {
    _this->_internal_set_maker_fee_rate(from._internal_maker_fee_rate());
  }
  if (!from._internal_taker_fee_rate().empty()) {
    _this->_internal_set_taker_fee_rate(from._internal_taker_fee_rate());
  }
  if (!from._internal_admin().empty()) {
    _this->_internal_set_admin(from._internal_admin());
  }
  if (!from._internal_quote_denom().empty()) {
    _this->_internal_set_quote_denom(from._internal_quote_denom());
  }
  if (!from._internal_min_price_tick_size().empty()) {
    _this->_internal_set_min_price_tick_size(from._internal_min_price_tick_size());
  }
  if (!from._internal_min_quantity_tick_size().empty()) {
    _this->_internal_set_min_quantity_tick_size(from._internal_min_quantity_tick_size());
  }
  if (from._internal_oracle_type() != 0) {
    _this->_internal_set_oracle_type(from._internal_oracle_type());
  }
  if (from._internal_oracle_scale_factor() != 0) {
    _this->_internal_set_oracle_scale_factor(from._internal_oracle_scale_factor());
  }
  if (from._internal_expiration_timestamp() != 0) {
    _this->_internal_set_expiration_timestamp(from._internal_expiration_timestamp());
  }
  if (from._internal_settlement_timestamp() != 0) {
    _this->_internal_set_settlement_timestamp(from._internal_settlement_timestamp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MsgInstantBinaryOptionsMarketLaunch::CopyFrom(const MsgInstantBinaryOptionsMarketLaunch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.MsgInstantBinaryOptionsMarketLaunch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgInstantBinaryOptionsMarketLaunch::IsInitialized() const {
  return true;
}

void MsgInstantBinaryOptionsMarketLaunch::InternalSwap(MsgInstantBinaryOptionsMarketLaunch* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.sender_, lhs_arena,
                                       &other->_impl_.sender_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.ticker_, lhs_arena,
                                       &other->_impl_.ticker_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.oracle_symbol_, lhs_arena,
                                       &other->_impl_.oracle_symbol_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.oracle_provider_, lhs_arena,
                                       &other->_impl_.oracle_provider_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.maker_fee_rate_, lhs_arena,
                                       &other->_impl_.maker_fee_rate_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.taker_fee_rate_, lhs_arena,
                                       &other->_impl_.taker_fee_rate_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.admin_, lhs_arena,
                                       &other->_impl_.admin_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.quote_denom_, lhs_arena,
                                       &other->_impl_.quote_denom_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.min_price_tick_size_, lhs_arena,
                                       &other->_impl_.min_price_tick_size_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.min_quantity_tick_size_, lhs_arena,
                                       &other->_impl_.min_quantity_tick_size_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgInstantBinaryOptionsMarketLaunch, _impl_.settlement_timestamp_)
      + sizeof(MsgInstantBinaryOptionsMarketLaunch::_impl_.settlement_timestamp_)
      - PROTOBUF_FIELD_OFFSET(MsgInstantBinaryOptionsMarketLaunch, _impl_.oracle_type_)>(
          reinterpret_cast<char*>(&_impl_.oracle_type_),
          reinterpret_cast<char*>(&other->_impl_.oracle_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgInstantBinaryOptionsMarketLaunch::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2ftx_2eproto[14]);
}
// ===================================================================

class MsgInstantBinaryOptionsMarketLaunchResponse::_Internal {
 public:
};

MsgInstantBinaryOptionsMarketLaunchResponse::MsgInstantBinaryOptionsMarketLaunchResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.MsgInstantBinaryOptionsMarketLaunchResponse)
}
MsgInstantBinaryOptionsMarketLaunchResponse::MsgInstantBinaryOptionsMarketLaunchResponse(const MsgInstantBinaryOptionsMarketLaunchResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  MsgInstantBinaryOptionsMarketLaunchResponse* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.MsgInstantBinaryOptionsMarketLaunchResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgInstantBinaryOptionsMarketLaunchResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgInstantBinaryOptionsMarketLaunchResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata MsgInstantBinaryOptionsMarketLaunchResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2ftx_2eproto[15]);
}
// ===================================================================

class MsgInstantExpiryFuturesMarketLaunch::_Internal {
 public:
};

MsgInstantExpiryFuturesMarketLaunch::MsgInstantExpiryFuturesMarketLaunch(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.MsgInstantExpiryFuturesMarketLaunch)
}
MsgInstantExpiryFuturesMarketLaunch::MsgInstantExpiryFuturesMarketLaunch(const MsgInstantExpiryFuturesMarketLaunch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MsgInstantExpiryFuturesMarketLaunch* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.sender_) {}

    , decltype(_impl_.ticker_) {}

    , decltype(_impl_.quote_denom_) {}

    , decltype(_impl_.oracle_base_) {}

    , decltype(_impl_.oracle_quote_) {}

    , decltype(_impl_.maker_fee_rate_) {}

    , decltype(_impl_.taker_fee_rate_) {}

    , decltype(_impl_.initial_margin_ratio_) {}

    , decltype(_impl_.maintenance_margin_ratio_) {}

    , decltype(_impl_.min_price_tick_size_) {}

    , decltype(_impl_.min_quantity_tick_size_) {}

    , decltype(_impl_.oracle_type_) {}

    , decltype(_impl_.oracle_scale_factor_) {}

    , decltype(_impl_.expiry_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.sender_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.sender_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sender().empty()) {
    _this->_impl_.sender_.Set(from._internal_sender(), _this->GetArenaForAllocation());
  }
  _impl_.ticker_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.ticker_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ticker().empty()) {
    _this->_impl_.ticker_.Set(from._internal_ticker(), _this->GetArenaForAllocation());
  }
  _impl_.quote_denom_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.quote_denom_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_quote_denom().empty()) {
    _this->_impl_.quote_denom_.Set(from._internal_quote_denom(), _this->GetArenaForAllocation());
  }
  _impl_.oracle_base_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.oracle_base_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_oracle_base().empty()) {
    _this->_impl_.oracle_base_.Set(from._internal_oracle_base(), _this->GetArenaForAllocation());
  }
  _impl_.oracle_quote_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.oracle_quote_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_oracle_quote().empty()) {
    _this->_impl_.oracle_quote_.Set(from._internal_oracle_quote(), _this->GetArenaForAllocation());
  }
  _impl_.maker_fee_rate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.maker_fee_rate_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_maker_fee_rate().empty()) {
    _this->_impl_.maker_fee_rate_.Set(from._internal_maker_fee_rate(), _this->GetArenaForAllocation());
  }
  _impl_.taker_fee_rate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.taker_fee_rate_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_taker_fee_rate().empty()) {
    _this->_impl_.taker_fee_rate_.Set(from._internal_taker_fee_rate(), _this->GetArenaForAllocation());
  }
  _impl_.initial_margin_ratio_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.initial_margin_ratio_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_initial_margin_ratio().empty()) {
    _this->_impl_.initial_margin_ratio_.Set(from._internal_initial_margin_ratio(), _this->GetArenaForAllocation());
  }
  _impl_.maintenance_margin_ratio_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.maintenance_margin_ratio_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_maintenance_margin_ratio().empty()) {
    _this->_impl_.maintenance_margin_ratio_.Set(from._internal_maintenance_margin_ratio(), _this->GetArenaForAllocation());
  }
  _impl_.min_price_tick_size_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.min_price_tick_size_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_min_price_tick_size().empty()) {
    _this->_impl_.min_price_tick_size_.Set(from._internal_min_price_tick_size(), _this->GetArenaForAllocation());
  }
  _impl_.min_quantity_tick_size_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.min_quantity_tick_size_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_min_quantity_tick_size().empty()) {
    _this->_impl_.min_quantity_tick_size_.Set(from._internal_min_quantity_tick_size(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.oracle_type_, &from._impl_.oracle_type_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.expiry_) -
    reinterpret_cast<char*>(&_impl_.oracle_type_)) + sizeof(_impl_.expiry_));
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.MsgInstantExpiryFuturesMarketLaunch)
}

inline void MsgInstantExpiryFuturesMarketLaunch::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.sender_) {}

    , decltype(_impl_.ticker_) {}

    , decltype(_impl_.quote_denom_) {}

    , decltype(_impl_.oracle_base_) {}

    , decltype(_impl_.oracle_quote_) {}

    , decltype(_impl_.maker_fee_rate_) {}

    , decltype(_impl_.taker_fee_rate_) {}

    , decltype(_impl_.initial_margin_ratio_) {}

    , decltype(_impl_.maintenance_margin_ratio_) {}

    , decltype(_impl_.min_price_tick_size_) {}

    , decltype(_impl_.min_quantity_tick_size_) {}

    , decltype(_impl_.oracle_type_) { 0 }

    , decltype(_impl_.oracle_scale_factor_) { 0u }

    , decltype(_impl_.expiry_) { ::int64_t{0} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.sender_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.sender_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ticker_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.ticker_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.quote_denom_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.quote_denom_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.oracle_base_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.oracle_base_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.oracle_quote_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.oracle_quote_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.maker_fee_rate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.maker_fee_rate_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.taker_fee_rate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.taker_fee_rate_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.initial_margin_ratio_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.initial_margin_ratio_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.maintenance_margin_ratio_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.maintenance_margin_ratio_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.min_price_tick_size_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.min_price_tick_size_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.min_quantity_tick_size_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.min_quantity_tick_size_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MsgInstantExpiryFuturesMarketLaunch::~MsgInstantExpiryFuturesMarketLaunch() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.MsgInstantExpiryFuturesMarketLaunch)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MsgInstantExpiryFuturesMarketLaunch::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sender_.Destroy();
  _impl_.ticker_.Destroy();
  _impl_.quote_denom_.Destroy();
  _impl_.oracle_base_.Destroy();
  _impl_.oracle_quote_.Destroy();
  _impl_.maker_fee_rate_.Destroy();
  _impl_.taker_fee_rate_.Destroy();
  _impl_.initial_margin_ratio_.Destroy();
  _impl_.maintenance_margin_ratio_.Destroy();
  _impl_.min_price_tick_size_.Destroy();
  _impl_.min_quantity_tick_size_.Destroy();
}

void MsgInstantExpiryFuturesMarketLaunch::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MsgInstantExpiryFuturesMarketLaunch::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.MsgInstantExpiryFuturesMarketLaunch)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sender_.ClearToEmpty();
  _impl_.ticker_.ClearToEmpty();
  _impl_.quote_denom_.ClearToEmpty();
  _impl_.oracle_base_.ClearToEmpty();
  _impl_.oracle_quote_.ClearToEmpty();
  _impl_.maker_fee_rate_.ClearToEmpty();
  _impl_.taker_fee_rate_.ClearToEmpty();
  _impl_.initial_margin_ratio_.ClearToEmpty();
  _impl_.maintenance_margin_ratio_.ClearToEmpty();
  _impl_.min_price_tick_size_.ClearToEmpty();
  _impl_.min_quantity_tick_size_.ClearToEmpty();
  ::memset(&_impl_.oracle_type_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.expiry_) -
      reinterpret_cast<char*>(&_impl_.oracle_type_)) + sizeof(_impl_.expiry_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgInstantExpiryFuturesMarketLaunch::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string sender = 1 [json_name = "sender"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sender();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.MsgInstantExpiryFuturesMarketLaunch.sender"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string ticker = 2 [json_name = "ticker"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_ticker();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.MsgInstantExpiryFuturesMarketLaunch.ticker"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string quote_denom = 3 [json_name = "quoteDenom"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_quote_denom();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.MsgInstantExpiryFuturesMarketLaunch.quote_denom"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string oracle_base = 4 [json_name = "oracleBase"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_oracle_base();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.MsgInstantExpiryFuturesMarketLaunch.oracle_base"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string oracle_quote = 5 [json_name = "oracleQuote"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_oracle_quote();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.MsgInstantExpiryFuturesMarketLaunch.oracle_quote"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .injective.oracle.v1beta1.OracleType oracle_type = 6 [json_name = "oracleType"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_oracle_type(static_cast<::injective::oracle::v1beta1::OracleType>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 oracle_scale_factor = 7 [json_name = "oracleScaleFactor"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 56)) {
          _impl_.oracle_scale_factor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 expiry = 8 [json_name = "expiry"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 64)) {
          _impl_.expiry_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string maker_fee_rate = 9 [json_name = "makerFeeRate", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_maker_fee_rate();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.MsgInstantExpiryFuturesMarketLaunch.maker_fee_rate"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string taker_fee_rate = 10 [json_name = "takerFeeRate", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_taker_fee_rate();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.MsgInstantExpiryFuturesMarketLaunch.taker_fee_rate"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string initial_margin_ratio = 11 [json_name = "initialMarginRatio", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_initial_margin_ratio();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.MsgInstantExpiryFuturesMarketLaunch.initial_margin_ratio"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string maintenance_margin_ratio = 12 [json_name = "maintenanceMarginRatio", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_maintenance_margin_ratio();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.MsgInstantExpiryFuturesMarketLaunch.maintenance_margin_ratio"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string min_price_tick_size = 13 [json_name = "minPriceTickSize", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_min_price_tick_size();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.MsgInstantExpiryFuturesMarketLaunch.min_price_tick_size"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string min_quantity_tick_size = 14 [json_name = "minQuantityTickSize", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_min_quantity_tick_size();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.MsgInstantExpiryFuturesMarketLaunch.min_quantity_tick_size"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MsgInstantExpiryFuturesMarketLaunch::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.MsgInstantExpiryFuturesMarketLaunch)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string sender = 1 [json_name = "sender"];
  if (!this->_internal_sender().empty()) {
    const std::string& _s = this->_internal_sender();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.MsgInstantExpiryFuturesMarketLaunch.sender");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string ticker = 2 [json_name = "ticker"];
  if (!this->_internal_ticker().empty()) {
    const std::string& _s = this->_internal_ticker();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.MsgInstantExpiryFuturesMarketLaunch.ticker");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string quote_denom = 3 [json_name = "quoteDenom"];
  if (!this->_internal_quote_denom().empty()) {
    const std::string& _s = this->_internal_quote_denom();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.MsgInstantExpiryFuturesMarketLaunch.quote_denom");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string oracle_base = 4 [json_name = "oracleBase"];
  if (!this->_internal_oracle_base().empty()) {
    const std::string& _s = this->_internal_oracle_base();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.MsgInstantExpiryFuturesMarketLaunch.oracle_base");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // string oracle_quote = 5 [json_name = "oracleQuote"];
  if (!this->_internal_oracle_quote().empty()) {
    const std::string& _s = this->_internal_oracle_quote();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.MsgInstantExpiryFuturesMarketLaunch.oracle_quote");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // .injective.oracle.v1beta1.OracleType oracle_type = 6 [json_name = "oracleType"];
  if (this->_internal_oracle_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        6, this->_internal_oracle_type(), target);
  }

  // uint32 oracle_scale_factor = 7 [json_name = "oracleScaleFactor"];
  if (this->_internal_oracle_scale_factor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        7, this->_internal_oracle_scale_factor(), target);
  }

  // int64 expiry = 8 [json_name = "expiry"];
  if (this->_internal_expiry() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        8, this->_internal_expiry(), target);
  }

  // string maker_fee_rate = 9 [json_name = "makerFeeRate", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_maker_fee_rate().empty()) {
    const std::string& _s = this->_internal_maker_fee_rate();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.MsgInstantExpiryFuturesMarketLaunch.maker_fee_rate");
    target = stream->WriteStringMaybeAliased(9, _s, target);
  }

  // string taker_fee_rate = 10 [json_name = "takerFeeRate", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_taker_fee_rate().empty()) {
    const std::string& _s = this->_internal_taker_fee_rate();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.MsgInstantExpiryFuturesMarketLaunch.taker_fee_rate");
    target = stream->WriteStringMaybeAliased(10, _s, target);
  }

  // string initial_margin_ratio = 11 [json_name = "initialMarginRatio", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_initial_margin_ratio().empty()) {
    const std::string& _s = this->_internal_initial_margin_ratio();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.MsgInstantExpiryFuturesMarketLaunch.initial_margin_ratio");
    target = stream->WriteStringMaybeAliased(11, _s, target);
  }

  // string maintenance_margin_ratio = 12 [json_name = "maintenanceMarginRatio", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_maintenance_margin_ratio().empty()) {
    const std::string& _s = this->_internal_maintenance_margin_ratio();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.MsgInstantExpiryFuturesMarketLaunch.maintenance_margin_ratio");
    target = stream->WriteStringMaybeAliased(12, _s, target);
  }

  // string min_price_tick_size = 13 [json_name = "minPriceTickSize", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_min_price_tick_size().empty()) {
    const std::string& _s = this->_internal_min_price_tick_size();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.MsgInstantExpiryFuturesMarketLaunch.min_price_tick_size");
    target = stream->WriteStringMaybeAliased(13, _s, target);
  }

  // string min_quantity_tick_size = 14 [json_name = "minQuantityTickSize", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_min_quantity_tick_size().empty()) {
    const std::string& _s = this->_internal_min_quantity_tick_size();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.MsgInstantExpiryFuturesMarketLaunch.min_quantity_tick_size");
    target = stream->WriteStringMaybeAliased(14, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.MsgInstantExpiryFuturesMarketLaunch)
  return target;
}

::size_t MsgInstantExpiryFuturesMarketLaunch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.MsgInstantExpiryFuturesMarketLaunch)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sender = 1 [json_name = "sender"];
  if (!this->_internal_sender().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_sender());
  }

  // string ticker = 2 [json_name = "ticker"];
  if (!this->_internal_ticker().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_ticker());
  }

  // string quote_denom = 3 [json_name = "quoteDenom"];
  if (!this->_internal_quote_denom().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_quote_denom());
  }

  // string oracle_base = 4 [json_name = "oracleBase"];
  if (!this->_internal_oracle_base().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_oracle_base());
  }

  // string oracle_quote = 5 [json_name = "oracleQuote"];
  if (!this->_internal_oracle_quote().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_oracle_quote());
  }

  // string maker_fee_rate = 9 [json_name = "makerFeeRate", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_maker_fee_rate().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_maker_fee_rate());
  }

  // string taker_fee_rate = 10 [json_name = "takerFeeRate", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_taker_fee_rate().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_taker_fee_rate());
  }

  // string initial_margin_ratio = 11 [json_name = "initialMarginRatio", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_initial_margin_ratio().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_initial_margin_ratio());
  }

  // string maintenance_margin_ratio = 12 [json_name = "maintenanceMarginRatio", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_maintenance_margin_ratio().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_maintenance_margin_ratio());
  }

  // string min_price_tick_size = 13 [json_name = "minPriceTickSize", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_min_price_tick_size().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_min_price_tick_size());
  }

  // string min_quantity_tick_size = 14 [json_name = "minQuantityTickSize", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_min_quantity_tick_size().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_min_quantity_tick_size());
  }

  // .injective.oracle.v1beta1.OracleType oracle_type = 6 [json_name = "oracleType"];
  if (this->_internal_oracle_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_oracle_type());
  }

  // uint32 oracle_scale_factor = 7 [json_name = "oracleScaleFactor"];
  if (this->_internal_oracle_scale_factor() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_oracle_scale_factor());
  }

  // int64 expiry = 8 [json_name = "expiry"];
  if (this->_internal_expiry() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_expiry());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgInstantExpiryFuturesMarketLaunch::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MsgInstantExpiryFuturesMarketLaunch::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgInstantExpiryFuturesMarketLaunch::GetClassData() const { return &_class_data_; }


void MsgInstantExpiryFuturesMarketLaunch::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MsgInstantExpiryFuturesMarketLaunch*>(&to_msg);
  auto& from = static_cast<const MsgInstantExpiryFuturesMarketLaunch&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.MsgInstantExpiryFuturesMarketLaunch)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_sender().empty()) {
    _this->_internal_set_sender(from._internal_sender());
  }
  if (!from._internal_ticker().empty()) {
    _this->_internal_set_ticker(from._internal_ticker());
  }
  if (!from._internal_quote_denom().empty()) {
    _this->_internal_set_quote_denom(from._internal_quote_denom());
  }
  if (!from._internal_oracle_base().empty()) {
    _this->_internal_set_oracle_base(from._internal_oracle_base());
  }
  if (!from._internal_oracle_quote().empty()) {
    _this->_internal_set_oracle_quote(from._internal_oracle_quote());
  }
  if (!from._internal_maker_fee_rate().empty()) {
    _this->_internal_set_maker_fee_rate(from._internal_maker_fee_rate());
  }
  if (!from._internal_taker_fee_rate().empty()) {
    _this->_internal_set_taker_fee_rate(from._internal_taker_fee_rate());
  }
  if (!from._internal_initial_margin_ratio().empty()) {
    _this->_internal_set_initial_margin_ratio(from._internal_initial_margin_ratio());
  }
  if (!from._internal_maintenance_margin_ratio().empty()) {
    _this->_internal_set_maintenance_margin_ratio(from._internal_maintenance_margin_ratio());
  }
  if (!from._internal_min_price_tick_size().empty()) {
    _this->_internal_set_min_price_tick_size(from._internal_min_price_tick_size());
  }
  if (!from._internal_min_quantity_tick_size().empty()) {
    _this->_internal_set_min_quantity_tick_size(from._internal_min_quantity_tick_size());
  }
  if (from._internal_oracle_type() != 0) {
    _this->_internal_set_oracle_type(from._internal_oracle_type());
  }
  if (from._internal_oracle_scale_factor() != 0) {
    _this->_internal_set_oracle_scale_factor(from._internal_oracle_scale_factor());
  }
  if (from._internal_expiry() != 0) {
    _this->_internal_set_expiry(from._internal_expiry());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MsgInstantExpiryFuturesMarketLaunch::CopyFrom(const MsgInstantExpiryFuturesMarketLaunch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.MsgInstantExpiryFuturesMarketLaunch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgInstantExpiryFuturesMarketLaunch::IsInitialized() const {
  return true;
}

void MsgInstantExpiryFuturesMarketLaunch::InternalSwap(MsgInstantExpiryFuturesMarketLaunch* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.sender_, lhs_arena,
                                       &other->_impl_.sender_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.ticker_, lhs_arena,
                                       &other->_impl_.ticker_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.quote_denom_, lhs_arena,
                                       &other->_impl_.quote_denom_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.oracle_base_, lhs_arena,
                                       &other->_impl_.oracle_base_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.oracle_quote_, lhs_arena,
                                       &other->_impl_.oracle_quote_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.maker_fee_rate_, lhs_arena,
                                       &other->_impl_.maker_fee_rate_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.taker_fee_rate_, lhs_arena,
                                       &other->_impl_.taker_fee_rate_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.initial_margin_ratio_, lhs_arena,
                                       &other->_impl_.initial_margin_ratio_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.maintenance_margin_ratio_, lhs_arena,
                                       &other->_impl_.maintenance_margin_ratio_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.min_price_tick_size_, lhs_arena,
                                       &other->_impl_.min_price_tick_size_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.min_quantity_tick_size_, lhs_arena,
                                       &other->_impl_.min_quantity_tick_size_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgInstantExpiryFuturesMarketLaunch, _impl_.expiry_)
      + sizeof(MsgInstantExpiryFuturesMarketLaunch::_impl_.expiry_)
      - PROTOBUF_FIELD_OFFSET(MsgInstantExpiryFuturesMarketLaunch, _impl_.oracle_type_)>(
          reinterpret_cast<char*>(&_impl_.oracle_type_),
          reinterpret_cast<char*>(&other->_impl_.oracle_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgInstantExpiryFuturesMarketLaunch::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2ftx_2eproto[16]);
}
// ===================================================================

class MsgInstantExpiryFuturesMarketLaunchResponse::_Internal {
 public:
};

MsgInstantExpiryFuturesMarketLaunchResponse::MsgInstantExpiryFuturesMarketLaunchResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.MsgInstantExpiryFuturesMarketLaunchResponse)
}
MsgInstantExpiryFuturesMarketLaunchResponse::MsgInstantExpiryFuturesMarketLaunchResponse(const MsgInstantExpiryFuturesMarketLaunchResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  MsgInstantExpiryFuturesMarketLaunchResponse* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.MsgInstantExpiryFuturesMarketLaunchResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgInstantExpiryFuturesMarketLaunchResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgInstantExpiryFuturesMarketLaunchResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata MsgInstantExpiryFuturesMarketLaunchResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2ftx_2eproto[17]);
}
// ===================================================================

class MsgCreateSpotMarketOrder::_Internal {
 public:
  using HasBits = decltype(std::declval<MsgCreateSpotMarketOrder>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(MsgCreateSpotMarketOrder, _impl_._has_bits_);
  static const ::injective::exchange::v1beta1::SpotOrder& order(const MsgCreateSpotMarketOrder* msg);
  static void set_has_order(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::injective::exchange::v1beta1::SpotOrder&
MsgCreateSpotMarketOrder::_Internal::order(const MsgCreateSpotMarketOrder* msg) {
  return *msg->_impl_.order_;
}
void MsgCreateSpotMarketOrder::clear_order() {
  if (_impl_.order_ != nullptr) _impl_.order_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
MsgCreateSpotMarketOrder::MsgCreateSpotMarketOrder(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.MsgCreateSpotMarketOrder)
}
MsgCreateSpotMarketOrder::MsgCreateSpotMarketOrder(const MsgCreateSpotMarketOrder& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MsgCreateSpotMarketOrder* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sender_) {}

    , decltype(_impl_.order_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.sender_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.sender_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sender().empty()) {
    _this->_impl_.sender_.Set(from._internal_sender(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.order_ = new ::injective::exchange::v1beta1::SpotOrder(*from._impl_.order_);
  }
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.MsgCreateSpotMarketOrder)
}

inline void MsgCreateSpotMarketOrder::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sender_) {}

    , decltype(_impl_.order_){nullptr}
  };
  _impl_.sender_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.sender_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MsgCreateSpotMarketOrder::~MsgCreateSpotMarketOrder() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.MsgCreateSpotMarketOrder)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MsgCreateSpotMarketOrder::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sender_.Destroy();
  if (this != internal_default_instance()) delete _impl_.order_;
}

void MsgCreateSpotMarketOrder::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MsgCreateSpotMarketOrder::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.MsgCreateSpotMarketOrder)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sender_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.order_ != nullptr);
    _impl_.order_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgCreateSpotMarketOrder::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string sender = 1 [json_name = "sender"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sender();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.MsgCreateSpotMarketOrder.sender"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .injective.exchange.v1beta1.SpotOrder order = 2 [json_name = "order", (.gogoproto.nullable) = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_order(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MsgCreateSpotMarketOrder::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.MsgCreateSpotMarketOrder)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string sender = 1 [json_name = "sender"];
  if (!this->_internal_sender().empty()) {
    const std::string& _s = this->_internal_sender();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.MsgCreateSpotMarketOrder.sender");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .injective.exchange.v1beta1.SpotOrder order = 2 [json_name = "order", (.gogoproto.nullable) = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::order(this),
        _Internal::order(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.MsgCreateSpotMarketOrder)
  return target;
}

::size_t MsgCreateSpotMarketOrder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.MsgCreateSpotMarketOrder)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sender = 1 [json_name = "sender"];
  if (!this->_internal_sender().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_sender());
  }

  // .injective.exchange.v1beta1.SpotOrder order = 2 [json_name = "order", (.gogoproto.nullable) = false];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.order_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgCreateSpotMarketOrder::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MsgCreateSpotMarketOrder::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgCreateSpotMarketOrder::GetClassData() const { return &_class_data_; }


void MsgCreateSpotMarketOrder::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MsgCreateSpotMarketOrder*>(&to_msg);
  auto& from = static_cast<const MsgCreateSpotMarketOrder&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.MsgCreateSpotMarketOrder)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_sender().empty()) {
    _this->_internal_set_sender(from._internal_sender());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_order()->::injective::exchange::v1beta1::SpotOrder::MergeFrom(
        from._internal_order());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MsgCreateSpotMarketOrder::CopyFrom(const MsgCreateSpotMarketOrder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.MsgCreateSpotMarketOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCreateSpotMarketOrder::IsInitialized() const {
  return true;
}

void MsgCreateSpotMarketOrder::InternalSwap(MsgCreateSpotMarketOrder* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.sender_, lhs_arena,
                                       &other->_impl_.sender_, rhs_arena);
  swap(_impl_.order_, other->_impl_.order_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgCreateSpotMarketOrder::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2ftx_2eproto[18]);
}
// ===================================================================

class MsgCreateSpotMarketOrderResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<MsgCreateSpotMarketOrderResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(MsgCreateSpotMarketOrderResponse, _impl_._has_bits_);
  static const ::injective::exchange::v1beta1::SpotMarketOrderResults& results(const MsgCreateSpotMarketOrderResponse* msg);
  static void set_has_results(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::injective::exchange::v1beta1::SpotMarketOrderResults&
MsgCreateSpotMarketOrderResponse::_Internal::results(const MsgCreateSpotMarketOrderResponse* msg) {
  return *msg->_impl_.results_;
}
MsgCreateSpotMarketOrderResponse::MsgCreateSpotMarketOrderResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.MsgCreateSpotMarketOrderResponse)
}
MsgCreateSpotMarketOrderResponse::MsgCreateSpotMarketOrderResponse(const MsgCreateSpotMarketOrderResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MsgCreateSpotMarketOrderResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.order_hash_) {}

    , decltype(_impl_.results_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.order_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.order_hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_order_hash().empty()) {
    _this->_impl_.order_hash_.Set(from._internal_order_hash(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.results_ = new ::injective::exchange::v1beta1::SpotMarketOrderResults(*from._impl_.results_);
  }
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.MsgCreateSpotMarketOrderResponse)
}

inline void MsgCreateSpotMarketOrderResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.order_hash_) {}

    , decltype(_impl_.results_){nullptr}
  };
  _impl_.order_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.order_hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MsgCreateSpotMarketOrderResponse::~MsgCreateSpotMarketOrderResponse() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.MsgCreateSpotMarketOrderResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MsgCreateSpotMarketOrderResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.order_hash_.Destroy();
  if (this != internal_default_instance()) delete _impl_.results_;
}

void MsgCreateSpotMarketOrderResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MsgCreateSpotMarketOrderResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.MsgCreateSpotMarketOrderResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.order_hash_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.results_ != nullptr);
    _impl_.results_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgCreateSpotMarketOrderResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string order_hash = 1 [json_name = "orderHash"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_order_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.MsgCreateSpotMarketOrderResponse.order_hash"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .injective.exchange.v1beta1.SpotMarketOrderResults results = 2 [json_name = "results", (.gogoproto.nullable) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_results(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MsgCreateSpotMarketOrderResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.MsgCreateSpotMarketOrderResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string order_hash = 1 [json_name = "orderHash"];
  if (!this->_internal_order_hash().empty()) {
    const std::string& _s = this->_internal_order_hash();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.MsgCreateSpotMarketOrderResponse.order_hash");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .injective.exchange.v1beta1.SpotMarketOrderResults results = 2 [json_name = "results", (.gogoproto.nullable) = true];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::results(this),
        _Internal::results(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.MsgCreateSpotMarketOrderResponse)
  return target;
}

::size_t MsgCreateSpotMarketOrderResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.MsgCreateSpotMarketOrderResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string order_hash = 1 [json_name = "orderHash"];
  if (!this->_internal_order_hash().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_order_hash());
  }

  // .injective.exchange.v1beta1.SpotMarketOrderResults results = 2 [json_name = "results", (.gogoproto.nullable) = true];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.results_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgCreateSpotMarketOrderResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MsgCreateSpotMarketOrderResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgCreateSpotMarketOrderResponse::GetClassData() const { return &_class_data_; }


void MsgCreateSpotMarketOrderResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MsgCreateSpotMarketOrderResponse*>(&to_msg);
  auto& from = static_cast<const MsgCreateSpotMarketOrderResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.MsgCreateSpotMarketOrderResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_order_hash().empty()) {
    _this->_internal_set_order_hash(from._internal_order_hash());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_results()->::injective::exchange::v1beta1::SpotMarketOrderResults::MergeFrom(
        from._internal_results());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MsgCreateSpotMarketOrderResponse::CopyFrom(const MsgCreateSpotMarketOrderResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.MsgCreateSpotMarketOrderResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCreateSpotMarketOrderResponse::IsInitialized() const {
  return true;
}

void MsgCreateSpotMarketOrderResponse::InternalSwap(MsgCreateSpotMarketOrderResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.order_hash_, lhs_arena,
                                       &other->_impl_.order_hash_, rhs_arena);
  swap(_impl_.results_, other->_impl_.results_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgCreateSpotMarketOrderResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2ftx_2eproto[19]);
}
// ===================================================================

class SpotMarketOrderResults::_Internal {
 public:
};

SpotMarketOrderResults::SpotMarketOrderResults(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.SpotMarketOrderResults)
}
SpotMarketOrderResults::SpotMarketOrderResults(const SpotMarketOrderResults& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SpotMarketOrderResults* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.quantity_) {}

    , decltype(_impl_.price_) {}

    , decltype(_impl_.fee_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.quantity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.quantity_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_quantity().empty()) {
    _this->_impl_.quantity_.Set(from._internal_quantity(), _this->GetArenaForAllocation());
  }
  _impl_.price_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.price_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_price().empty()) {
    _this->_impl_.price_.Set(from._internal_price(), _this->GetArenaForAllocation());
  }
  _impl_.fee_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.fee_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_fee().empty()) {
    _this->_impl_.fee_.Set(from._internal_fee(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.SpotMarketOrderResults)
}

inline void SpotMarketOrderResults::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.quantity_) {}

    , decltype(_impl_.price_) {}

    , decltype(_impl_.fee_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.quantity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.quantity_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.price_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.price_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.fee_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.fee_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SpotMarketOrderResults::~SpotMarketOrderResults() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.SpotMarketOrderResults)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SpotMarketOrderResults::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.quantity_.Destroy();
  _impl_.price_.Destroy();
  _impl_.fee_.Destroy();
}

void SpotMarketOrderResults::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SpotMarketOrderResults::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.SpotMarketOrderResults)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.quantity_.ClearToEmpty();
  _impl_.price_.ClearToEmpty();
  _impl_.fee_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpotMarketOrderResults::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string quantity = 1 [json_name = "quantity", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_quantity();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.SpotMarketOrderResults.quantity"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string price = 2 [json_name = "price", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_price();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.SpotMarketOrderResults.price"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string fee = 3 [json_name = "fee", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_fee();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.SpotMarketOrderResults.fee"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SpotMarketOrderResults::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.SpotMarketOrderResults)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string quantity = 1 [json_name = "quantity", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_quantity().empty()) {
    const std::string& _s = this->_internal_quantity();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.SpotMarketOrderResults.quantity");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string price = 2 [json_name = "price", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_price().empty()) {
    const std::string& _s = this->_internal_price();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.SpotMarketOrderResults.price");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string fee = 3 [json_name = "fee", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_fee().empty()) {
    const std::string& _s = this->_internal_fee();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.SpotMarketOrderResults.fee");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.SpotMarketOrderResults)
  return target;
}

::size_t SpotMarketOrderResults::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.SpotMarketOrderResults)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string quantity = 1 [json_name = "quantity", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_quantity().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_quantity());
  }

  // string price = 2 [json_name = "price", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_price().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_price());
  }

  // string fee = 3 [json_name = "fee", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_fee().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_fee());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SpotMarketOrderResults::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SpotMarketOrderResults::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SpotMarketOrderResults::GetClassData() const { return &_class_data_; }


void SpotMarketOrderResults::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SpotMarketOrderResults*>(&to_msg);
  auto& from = static_cast<const SpotMarketOrderResults&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.SpotMarketOrderResults)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_quantity().empty()) {
    _this->_internal_set_quantity(from._internal_quantity());
  }
  if (!from._internal_price().empty()) {
    _this->_internal_set_price(from._internal_price());
  }
  if (!from._internal_fee().empty()) {
    _this->_internal_set_fee(from._internal_fee());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SpotMarketOrderResults::CopyFrom(const SpotMarketOrderResults& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.SpotMarketOrderResults)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpotMarketOrderResults::IsInitialized() const {
  return true;
}

void SpotMarketOrderResults::InternalSwap(SpotMarketOrderResults* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.quantity_, lhs_arena,
                                       &other->_impl_.quantity_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.price_, lhs_arena,
                                       &other->_impl_.price_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.fee_, lhs_arena,
                                       &other->_impl_.fee_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata SpotMarketOrderResults::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2ftx_2eproto[20]);
}
// ===================================================================

class MsgCreateDerivativeLimitOrder::_Internal {
 public:
  using HasBits = decltype(std::declval<MsgCreateDerivativeLimitOrder>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(MsgCreateDerivativeLimitOrder, _impl_._has_bits_);
  static const ::injective::exchange::v1beta1::DerivativeOrder& order(const MsgCreateDerivativeLimitOrder* msg);
  static void set_has_order(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::injective::exchange::v1beta1::DerivativeOrder&
MsgCreateDerivativeLimitOrder::_Internal::order(const MsgCreateDerivativeLimitOrder* msg) {
  return *msg->_impl_.order_;
}
void MsgCreateDerivativeLimitOrder::clear_order() {
  if (_impl_.order_ != nullptr) _impl_.order_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
MsgCreateDerivativeLimitOrder::MsgCreateDerivativeLimitOrder(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.MsgCreateDerivativeLimitOrder)
}
MsgCreateDerivativeLimitOrder::MsgCreateDerivativeLimitOrder(const MsgCreateDerivativeLimitOrder& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MsgCreateDerivativeLimitOrder* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sender_) {}

    , decltype(_impl_.order_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.sender_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.sender_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sender().empty()) {
    _this->_impl_.sender_.Set(from._internal_sender(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.order_ = new ::injective::exchange::v1beta1::DerivativeOrder(*from._impl_.order_);
  }
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.MsgCreateDerivativeLimitOrder)
}

inline void MsgCreateDerivativeLimitOrder::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sender_) {}

    , decltype(_impl_.order_){nullptr}
  };
  _impl_.sender_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.sender_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MsgCreateDerivativeLimitOrder::~MsgCreateDerivativeLimitOrder() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.MsgCreateDerivativeLimitOrder)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MsgCreateDerivativeLimitOrder::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sender_.Destroy();
  if (this != internal_default_instance()) delete _impl_.order_;
}

void MsgCreateDerivativeLimitOrder::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MsgCreateDerivativeLimitOrder::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.MsgCreateDerivativeLimitOrder)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sender_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.order_ != nullptr);
    _impl_.order_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgCreateDerivativeLimitOrder::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string sender = 1 [json_name = "sender"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sender();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.MsgCreateDerivativeLimitOrder.sender"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .injective.exchange.v1beta1.DerivativeOrder order = 2 [json_name = "order", (.gogoproto.nullable) = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_order(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MsgCreateDerivativeLimitOrder::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.MsgCreateDerivativeLimitOrder)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string sender = 1 [json_name = "sender"];
  if (!this->_internal_sender().empty()) {
    const std::string& _s = this->_internal_sender();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.MsgCreateDerivativeLimitOrder.sender");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .injective.exchange.v1beta1.DerivativeOrder order = 2 [json_name = "order", (.gogoproto.nullable) = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::order(this),
        _Internal::order(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.MsgCreateDerivativeLimitOrder)
  return target;
}

::size_t MsgCreateDerivativeLimitOrder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.MsgCreateDerivativeLimitOrder)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sender = 1 [json_name = "sender"];
  if (!this->_internal_sender().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_sender());
  }

  // .injective.exchange.v1beta1.DerivativeOrder order = 2 [json_name = "order", (.gogoproto.nullable) = false];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.order_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgCreateDerivativeLimitOrder::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MsgCreateDerivativeLimitOrder::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgCreateDerivativeLimitOrder::GetClassData() const { return &_class_data_; }


void MsgCreateDerivativeLimitOrder::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MsgCreateDerivativeLimitOrder*>(&to_msg);
  auto& from = static_cast<const MsgCreateDerivativeLimitOrder&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.MsgCreateDerivativeLimitOrder)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_sender().empty()) {
    _this->_internal_set_sender(from._internal_sender());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_order()->::injective::exchange::v1beta1::DerivativeOrder::MergeFrom(
        from._internal_order());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MsgCreateDerivativeLimitOrder::CopyFrom(const MsgCreateDerivativeLimitOrder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.MsgCreateDerivativeLimitOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCreateDerivativeLimitOrder::IsInitialized() const {
  return true;
}

void MsgCreateDerivativeLimitOrder::InternalSwap(MsgCreateDerivativeLimitOrder* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.sender_, lhs_arena,
                                       &other->_impl_.sender_, rhs_arena);
  swap(_impl_.order_, other->_impl_.order_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgCreateDerivativeLimitOrder::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2ftx_2eproto[21]);
}
// ===================================================================

class MsgCreateDerivativeLimitOrderResponse::_Internal {
 public:
};

MsgCreateDerivativeLimitOrderResponse::MsgCreateDerivativeLimitOrderResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.MsgCreateDerivativeLimitOrderResponse)
}
MsgCreateDerivativeLimitOrderResponse::MsgCreateDerivativeLimitOrderResponse(const MsgCreateDerivativeLimitOrderResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MsgCreateDerivativeLimitOrderResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.order_hash_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.order_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.order_hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_order_hash().empty()) {
    _this->_impl_.order_hash_.Set(from._internal_order_hash(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.MsgCreateDerivativeLimitOrderResponse)
}

inline void MsgCreateDerivativeLimitOrderResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.order_hash_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.order_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.order_hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MsgCreateDerivativeLimitOrderResponse::~MsgCreateDerivativeLimitOrderResponse() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.MsgCreateDerivativeLimitOrderResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MsgCreateDerivativeLimitOrderResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.order_hash_.Destroy();
}

void MsgCreateDerivativeLimitOrderResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MsgCreateDerivativeLimitOrderResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.MsgCreateDerivativeLimitOrderResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.order_hash_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgCreateDerivativeLimitOrderResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string order_hash = 1 [json_name = "orderHash"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_order_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.MsgCreateDerivativeLimitOrderResponse.order_hash"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MsgCreateDerivativeLimitOrderResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.MsgCreateDerivativeLimitOrderResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string order_hash = 1 [json_name = "orderHash"];
  if (!this->_internal_order_hash().empty()) {
    const std::string& _s = this->_internal_order_hash();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.MsgCreateDerivativeLimitOrderResponse.order_hash");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.MsgCreateDerivativeLimitOrderResponse)
  return target;
}

::size_t MsgCreateDerivativeLimitOrderResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.MsgCreateDerivativeLimitOrderResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string order_hash = 1 [json_name = "orderHash"];
  if (!this->_internal_order_hash().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_order_hash());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgCreateDerivativeLimitOrderResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MsgCreateDerivativeLimitOrderResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgCreateDerivativeLimitOrderResponse::GetClassData() const { return &_class_data_; }


void MsgCreateDerivativeLimitOrderResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MsgCreateDerivativeLimitOrderResponse*>(&to_msg);
  auto& from = static_cast<const MsgCreateDerivativeLimitOrderResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.MsgCreateDerivativeLimitOrderResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_order_hash().empty()) {
    _this->_internal_set_order_hash(from._internal_order_hash());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MsgCreateDerivativeLimitOrderResponse::CopyFrom(const MsgCreateDerivativeLimitOrderResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.MsgCreateDerivativeLimitOrderResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCreateDerivativeLimitOrderResponse::IsInitialized() const {
  return true;
}

void MsgCreateDerivativeLimitOrderResponse::InternalSwap(MsgCreateDerivativeLimitOrderResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.order_hash_, lhs_arena,
                                       &other->_impl_.order_hash_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgCreateDerivativeLimitOrderResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2ftx_2eproto[22]);
}
// ===================================================================

class MsgCreateBinaryOptionsLimitOrder::_Internal {
 public:
  using HasBits = decltype(std::declval<MsgCreateBinaryOptionsLimitOrder>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(MsgCreateBinaryOptionsLimitOrder, _impl_._has_bits_);
  static const ::injective::exchange::v1beta1::DerivativeOrder& order(const MsgCreateBinaryOptionsLimitOrder* msg);
  static void set_has_order(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::injective::exchange::v1beta1::DerivativeOrder&
MsgCreateBinaryOptionsLimitOrder::_Internal::order(const MsgCreateBinaryOptionsLimitOrder* msg) {
  return *msg->_impl_.order_;
}
void MsgCreateBinaryOptionsLimitOrder::clear_order() {
  if (_impl_.order_ != nullptr) _impl_.order_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
MsgCreateBinaryOptionsLimitOrder::MsgCreateBinaryOptionsLimitOrder(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.MsgCreateBinaryOptionsLimitOrder)
}
MsgCreateBinaryOptionsLimitOrder::MsgCreateBinaryOptionsLimitOrder(const MsgCreateBinaryOptionsLimitOrder& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MsgCreateBinaryOptionsLimitOrder* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sender_) {}

    , decltype(_impl_.order_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.sender_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.sender_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sender().empty()) {
    _this->_impl_.sender_.Set(from._internal_sender(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.order_ = new ::injective::exchange::v1beta1::DerivativeOrder(*from._impl_.order_);
  }
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.MsgCreateBinaryOptionsLimitOrder)
}

inline void MsgCreateBinaryOptionsLimitOrder::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sender_) {}

    , decltype(_impl_.order_){nullptr}
  };
  _impl_.sender_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.sender_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MsgCreateBinaryOptionsLimitOrder::~MsgCreateBinaryOptionsLimitOrder() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.MsgCreateBinaryOptionsLimitOrder)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MsgCreateBinaryOptionsLimitOrder::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sender_.Destroy();
  if (this != internal_default_instance()) delete _impl_.order_;
}

void MsgCreateBinaryOptionsLimitOrder::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MsgCreateBinaryOptionsLimitOrder::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.MsgCreateBinaryOptionsLimitOrder)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sender_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.order_ != nullptr);
    _impl_.order_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgCreateBinaryOptionsLimitOrder::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string sender = 1 [json_name = "sender"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sender();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.MsgCreateBinaryOptionsLimitOrder.sender"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .injective.exchange.v1beta1.DerivativeOrder order = 2 [json_name = "order", (.gogoproto.nullable) = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_order(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MsgCreateBinaryOptionsLimitOrder::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.MsgCreateBinaryOptionsLimitOrder)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string sender = 1 [json_name = "sender"];
  if (!this->_internal_sender().empty()) {
    const std::string& _s = this->_internal_sender();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.MsgCreateBinaryOptionsLimitOrder.sender");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .injective.exchange.v1beta1.DerivativeOrder order = 2 [json_name = "order", (.gogoproto.nullable) = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::order(this),
        _Internal::order(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.MsgCreateBinaryOptionsLimitOrder)
  return target;
}

::size_t MsgCreateBinaryOptionsLimitOrder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.MsgCreateBinaryOptionsLimitOrder)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sender = 1 [json_name = "sender"];
  if (!this->_internal_sender().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_sender());
  }

  // .injective.exchange.v1beta1.DerivativeOrder order = 2 [json_name = "order", (.gogoproto.nullable) = false];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.order_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgCreateBinaryOptionsLimitOrder::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MsgCreateBinaryOptionsLimitOrder::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgCreateBinaryOptionsLimitOrder::GetClassData() const { return &_class_data_; }


void MsgCreateBinaryOptionsLimitOrder::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MsgCreateBinaryOptionsLimitOrder*>(&to_msg);
  auto& from = static_cast<const MsgCreateBinaryOptionsLimitOrder&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.MsgCreateBinaryOptionsLimitOrder)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_sender().empty()) {
    _this->_internal_set_sender(from._internal_sender());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_order()->::injective::exchange::v1beta1::DerivativeOrder::MergeFrom(
        from._internal_order());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MsgCreateBinaryOptionsLimitOrder::CopyFrom(const MsgCreateBinaryOptionsLimitOrder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.MsgCreateBinaryOptionsLimitOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCreateBinaryOptionsLimitOrder::IsInitialized() const {
  return true;
}

void MsgCreateBinaryOptionsLimitOrder::InternalSwap(MsgCreateBinaryOptionsLimitOrder* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.sender_, lhs_arena,
                                       &other->_impl_.sender_, rhs_arena);
  swap(_impl_.order_, other->_impl_.order_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgCreateBinaryOptionsLimitOrder::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2ftx_2eproto[23]);
}
// ===================================================================

class MsgCreateBinaryOptionsLimitOrderResponse::_Internal {
 public:
};

MsgCreateBinaryOptionsLimitOrderResponse::MsgCreateBinaryOptionsLimitOrderResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.MsgCreateBinaryOptionsLimitOrderResponse)
}
MsgCreateBinaryOptionsLimitOrderResponse::MsgCreateBinaryOptionsLimitOrderResponse(const MsgCreateBinaryOptionsLimitOrderResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MsgCreateBinaryOptionsLimitOrderResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.order_hash_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.order_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.order_hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_order_hash().empty()) {
    _this->_impl_.order_hash_.Set(from._internal_order_hash(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.MsgCreateBinaryOptionsLimitOrderResponse)
}

inline void MsgCreateBinaryOptionsLimitOrderResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.order_hash_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.order_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.order_hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MsgCreateBinaryOptionsLimitOrderResponse::~MsgCreateBinaryOptionsLimitOrderResponse() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.MsgCreateBinaryOptionsLimitOrderResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MsgCreateBinaryOptionsLimitOrderResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.order_hash_.Destroy();
}

void MsgCreateBinaryOptionsLimitOrderResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MsgCreateBinaryOptionsLimitOrderResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.MsgCreateBinaryOptionsLimitOrderResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.order_hash_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgCreateBinaryOptionsLimitOrderResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string order_hash = 1 [json_name = "orderHash"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_order_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.MsgCreateBinaryOptionsLimitOrderResponse.order_hash"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MsgCreateBinaryOptionsLimitOrderResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.MsgCreateBinaryOptionsLimitOrderResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string order_hash = 1 [json_name = "orderHash"];
  if (!this->_internal_order_hash().empty()) {
    const std::string& _s = this->_internal_order_hash();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.MsgCreateBinaryOptionsLimitOrderResponse.order_hash");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.MsgCreateBinaryOptionsLimitOrderResponse)
  return target;
}

::size_t MsgCreateBinaryOptionsLimitOrderResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.MsgCreateBinaryOptionsLimitOrderResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string order_hash = 1 [json_name = "orderHash"];
  if (!this->_internal_order_hash().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_order_hash());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgCreateBinaryOptionsLimitOrderResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MsgCreateBinaryOptionsLimitOrderResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgCreateBinaryOptionsLimitOrderResponse::GetClassData() const { return &_class_data_; }


void MsgCreateBinaryOptionsLimitOrderResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MsgCreateBinaryOptionsLimitOrderResponse*>(&to_msg);
  auto& from = static_cast<const MsgCreateBinaryOptionsLimitOrderResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.MsgCreateBinaryOptionsLimitOrderResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_order_hash().empty()) {
    _this->_internal_set_order_hash(from._internal_order_hash());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MsgCreateBinaryOptionsLimitOrderResponse::CopyFrom(const MsgCreateBinaryOptionsLimitOrderResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.MsgCreateBinaryOptionsLimitOrderResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCreateBinaryOptionsLimitOrderResponse::IsInitialized() const {
  return true;
}

void MsgCreateBinaryOptionsLimitOrderResponse::InternalSwap(MsgCreateBinaryOptionsLimitOrderResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.order_hash_, lhs_arena,
                                       &other->_impl_.order_hash_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgCreateBinaryOptionsLimitOrderResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2ftx_2eproto[24]);
}
// ===================================================================

class MsgBatchCreateDerivativeLimitOrders::_Internal {
 public:
};

void MsgBatchCreateDerivativeLimitOrders::clear_orders() {
  _internal_mutable_orders()->Clear();
}
MsgBatchCreateDerivativeLimitOrders::MsgBatchCreateDerivativeLimitOrders(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.MsgBatchCreateDerivativeLimitOrders)
}
MsgBatchCreateDerivativeLimitOrders::MsgBatchCreateDerivativeLimitOrders(const MsgBatchCreateDerivativeLimitOrders& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MsgBatchCreateDerivativeLimitOrders* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.orders_){from._impl_.orders_}
    , decltype(_impl_.sender_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.sender_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.sender_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sender().empty()) {
    _this->_impl_.sender_.Set(from._internal_sender(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.MsgBatchCreateDerivativeLimitOrders)
}

inline void MsgBatchCreateDerivativeLimitOrders::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.orders_){arena}
    , decltype(_impl_.sender_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.sender_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.sender_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MsgBatchCreateDerivativeLimitOrders::~MsgBatchCreateDerivativeLimitOrders() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.MsgBatchCreateDerivativeLimitOrders)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MsgBatchCreateDerivativeLimitOrders::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_orders()->~RepeatedPtrField();
  _impl_.sender_.Destroy();
}

void MsgBatchCreateDerivativeLimitOrders::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MsgBatchCreateDerivativeLimitOrders::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.MsgBatchCreateDerivativeLimitOrders)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_orders()->Clear();
  _impl_.sender_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgBatchCreateDerivativeLimitOrders::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string sender = 1 [json_name = "sender"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sender();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.MsgBatchCreateDerivativeLimitOrders.sender"));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .injective.exchange.v1beta1.DerivativeOrder orders = 2 [json_name = "orders", (.gogoproto.nullable) = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_orders(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MsgBatchCreateDerivativeLimitOrders::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.MsgBatchCreateDerivativeLimitOrders)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string sender = 1 [json_name = "sender"];
  if (!this->_internal_sender().empty()) {
    const std::string& _s = this->_internal_sender();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.MsgBatchCreateDerivativeLimitOrders.sender");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // repeated .injective.exchange.v1beta1.DerivativeOrder orders = 2 [json_name = "orders", (.gogoproto.nullable) = false];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_orders_size()); i < n; i++) {
    const auto& repfield = this->_internal_orders(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.MsgBatchCreateDerivativeLimitOrders)
  return target;
}

::size_t MsgBatchCreateDerivativeLimitOrders::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.MsgBatchCreateDerivativeLimitOrders)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .injective.exchange.v1beta1.DerivativeOrder orders = 2 [json_name = "orders", (.gogoproto.nullable) = false];
  total_size += 1UL * this->_internal_orders_size();
  for (const auto& msg : this->_internal_orders()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string sender = 1 [json_name = "sender"];
  if (!this->_internal_sender().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_sender());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgBatchCreateDerivativeLimitOrders::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MsgBatchCreateDerivativeLimitOrders::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgBatchCreateDerivativeLimitOrders::GetClassData() const { return &_class_data_; }


void MsgBatchCreateDerivativeLimitOrders::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MsgBatchCreateDerivativeLimitOrders*>(&to_msg);
  auto& from = static_cast<const MsgBatchCreateDerivativeLimitOrders&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.MsgBatchCreateDerivativeLimitOrders)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_orders()->MergeFrom(from._internal_orders());
  if (!from._internal_sender().empty()) {
    _this->_internal_set_sender(from._internal_sender());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MsgBatchCreateDerivativeLimitOrders::CopyFrom(const MsgBatchCreateDerivativeLimitOrders& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.MsgBatchCreateDerivativeLimitOrders)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgBatchCreateDerivativeLimitOrders::IsInitialized() const {
  return true;
}

void MsgBatchCreateDerivativeLimitOrders::InternalSwap(MsgBatchCreateDerivativeLimitOrders* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_orders()->InternalSwap(other->_internal_mutable_orders());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.sender_, lhs_arena,
                                       &other->_impl_.sender_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgBatchCreateDerivativeLimitOrders::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2ftx_2eproto[25]);
}
// ===================================================================

class MsgBatchCreateDerivativeLimitOrdersResponse::_Internal {
 public:
};

MsgBatchCreateDerivativeLimitOrdersResponse::MsgBatchCreateDerivativeLimitOrdersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.MsgBatchCreateDerivativeLimitOrdersResponse)
}
MsgBatchCreateDerivativeLimitOrdersResponse::MsgBatchCreateDerivativeLimitOrdersResponse(const MsgBatchCreateDerivativeLimitOrdersResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MsgBatchCreateDerivativeLimitOrdersResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.order_hashes_){from._impl_.order_hashes_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.MsgBatchCreateDerivativeLimitOrdersResponse)
}

inline void MsgBatchCreateDerivativeLimitOrdersResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.order_hashes_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MsgBatchCreateDerivativeLimitOrdersResponse::~MsgBatchCreateDerivativeLimitOrdersResponse() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.MsgBatchCreateDerivativeLimitOrdersResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MsgBatchCreateDerivativeLimitOrdersResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_order_hashes()->~RepeatedPtrField();
}

void MsgBatchCreateDerivativeLimitOrdersResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MsgBatchCreateDerivativeLimitOrdersResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.MsgBatchCreateDerivativeLimitOrdersResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_order_hashes()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgBatchCreateDerivativeLimitOrdersResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string order_hashes = 1 [json_name = "orderHashes"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_order_hashes();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.MsgBatchCreateDerivativeLimitOrdersResponse.order_hashes"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MsgBatchCreateDerivativeLimitOrdersResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.MsgBatchCreateDerivativeLimitOrdersResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string order_hashes = 1 [json_name = "orderHashes"];
  for (int i = 0, n = this->_internal_order_hashes_size(); i < n; ++i) {
    const auto& s = this->_internal_order_hashes(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.MsgBatchCreateDerivativeLimitOrdersResponse.order_hashes");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.MsgBatchCreateDerivativeLimitOrdersResponse)
  return target;
}

::size_t MsgBatchCreateDerivativeLimitOrdersResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.MsgBatchCreateDerivativeLimitOrdersResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string order_hashes = 1 [json_name = "orderHashes"];
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_order_hashes().size());
  for (int i = 0, n = _internal_order_hashes().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_order_hashes().Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgBatchCreateDerivativeLimitOrdersResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MsgBatchCreateDerivativeLimitOrdersResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgBatchCreateDerivativeLimitOrdersResponse::GetClassData() const { return &_class_data_; }


void MsgBatchCreateDerivativeLimitOrdersResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MsgBatchCreateDerivativeLimitOrdersResponse*>(&to_msg);
  auto& from = static_cast<const MsgBatchCreateDerivativeLimitOrdersResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.MsgBatchCreateDerivativeLimitOrdersResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_order_hashes()->MergeFrom(from._internal_order_hashes());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MsgBatchCreateDerivativeLimitOrdersResponse::CopyFrom(const MsgBatchCreateDerivativeLimitOrdersResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.MsgBatchCreateDerivativeLimitOrdersResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgBatchCreateDerivativeLimitOrdersResponse::IsInitialized() const {
  return true;
}

void MsgBatchCreateDerivativeLimitOrdersResponse::InternalSwap(MsgBatchCreateDerivativeLimitOrdersResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_order_hashes()->InternalSwap(
      other->_internal_mutable_order_hashes());
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgBatchCreateDerivativeLimitOrdersResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2ftx_2eproto[26]);
}
// ===================================================================

class MsgCancelSpotOrder::_Internal {
 public:
};

MsgCancelSpotOrder::MsgCancelSpotOrder(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.MsgCancelSpotOrder)
}
MsgCancelSpotOrder::MsgCancelSpotOrder(const MsgCancelSpotOrder& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MsgCancelSpotOrder* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.sender_) {}

    , decltype(_impl_.market_id_) {}

    , decltype(_impl_.subaccount_id_) {}

    , decltype(_impl_.order_hash_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.sender_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.sender_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sender().empty()) {
    _this->_impl_.sender_.Set(from._internal_sender(), _this->GetArenaForAllocation());
  }
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_market_id().empty()) {
    _this->_impl_.market_id_.Set(from._internal_market_id(), _this->GetArenaForAllocation());
  }
  _impl_.subaccount_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.subaccount_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_subaccount_id().empty()) {
    _this->_impl_.subaccount_id_.Set(from._internal_subaccount_id(), _this->GetArenaForAllocation());
  }
  _impl_.order_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.order_hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_order_hash().empty()) {
    _this->_impl_.order_hash_.Set(from._internal_order_hash(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.MsgCancelSpotOrder)
}

inline void MsgCancelSpotOrder::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.sender_) {}

    , decltype(_impl_.market_id_) {}

    , decltype(_impl_.subaccount_id_) {}

    , decltype(_impl_.order_hash_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.sender_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.sender_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.subaccount_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.subaccount_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.order_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.order_hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MsgCancelSpotOrder::~MsgCancelSpotOrder() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.MsgCancelSpotOrder)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MsgCancelSpotOrder::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sender_.Destroy();
  _impl_.market_id_.Destroy();
  _impl_.subaccount_id_.Destroy();
  _impl_.order_hash_.Destroy();
}

void MsgCancelSpotOrder::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MsgCancelSpotOrder::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.MsgCancelSpotOrder)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sender_.ClearToEmpty();
  _impl_.market_id_.ClearToEmpty();
  _impl_.subaccount_id_.ClearToEmpty();
  _impl_.order_hash_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgCancelSpotOrder::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string sender = 1 [json_name = "sender"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sender();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.MsgCancelSpotOrder.sender"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string market_id = 2 [json_name = "marketId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_market_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.MsgCancelSpotOrder.market_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string subaccount_id = 3 [json_name = "subaccountId"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_subaccount_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.MsgCancelSpotOrder.subaccount_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string order_hash = 4 [json_name = "orderHash"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_order_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.MsgCancelSpotOrder.order_hash"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MsgCancelSpotOrder::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.MsgCancelSpotOrder)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string sender = 1 [json_name = "sender"];
  if (!this->_internal_sender().empty()) {
    const std::string& _s = this->_internal_sender();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.MsgCancelSpotOrder.sender");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string market_id = 2 [json_name = "marketId"];
  if (!this->_internal_market_id().empty()) {
    const std::string& _s = this->_internal_market_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.MsgCancelSpotOrder.market_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string subaccount_id = 3 [json_name = "subaccountId"];
  if (!this->_internal_subaccount_id().empty()) {
    const std::string& _s = this->_internal_subaccount_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.MsgCancelSpotOrder.subaccount_id");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string order_hash = 4 [json_name = "orderHash"];
  if (!this->_internal_order_hash().empty()) {
    const std::string& _s = this->_internal_order_hash();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.MsgCancelSpotOrder.order_hash");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.MsgCancelSpotOrder)
  return target;
}

::size_t MsgCancelSpotOrder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.MsgCancelSpotOrder)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sender = 1 [json_name = "sender"];
  if (!this->_internal_sender().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_sender());
  }

  // string market_id = 2 [json_name = "marketId"];
  if (!this->_internal_market_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_market_id());
  }

  // string subaccount_id = 3 [json_name = "subaccountId"];
  if (!this->_internal_subaccount_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_subaccount_id());
  }

  // string order_hash = 4 [json_name = "orderHash"];
  if (!this->_internal_order_hash().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_order_hash());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgCancelSpotOrder::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MsgCancelSpotOrder::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgCancelSpotOrder::GetClassData() const { return &_class_data_; }


void MsgCancelSpotOrder::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MsgCancelSpotOrder*>(&to_msg);
  auto& from = static_cast<const MsgCancelSpotOrder&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.MsgCancelSpotOrder)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_sender().empty()) {
    _this->_internal_set_sender(from._internal_sender());
  }
  if (!from._internal_market_id().empty()) {
    _this->_internal_set_market_id(from._internal_market_id());
  }
  if (!from._internal_subaccount_id().empty()) {
    _this->_internal_set_subaccount_id(from._internal_subaccount_id());
  }
  if (!from._internal_order_hash().empty()) {
    _this->_internal_set_order_hash(from._internal_order_hash());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MsgCancelSpotOrder::CopyFrom(const MsgCancelSpotOrder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.MsgCancelSpotOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCancelSpotOrder::IsInitialized() const {
  return true;
}

void MsgCancelSpotOrder::InternalSwap(MsgCancelSpotOrder* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.sender_, lhs_arena,
                                       &other->_impl_.sender_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.market_id_, lhs_arena,
                                       &other->_impl_.market_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.subaccount_id_, lhs_arena,
                                       &other->_impl_.subaccount_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.order_hash_, lhs_arena,
                                       &other->_impl_.order_hash_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgCancelSpotOrder::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2ftx_2eproto[27]);
}
// ===================================================================

class MsgCancelSpotOrderResponse::_Internal {
 public:
};

MsgCancelSpotOrderResponse::MsgCancelSpotOrderResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.MsgCancelSpotOrderResponse)
}
MsgCancelSpotOrderResponse::MsgCancelSpotOrderResponse(const MsgCancelSpotOrderResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  MsgCancelSpotOrderResponse* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.MsgCancelSpotOrderResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgCancelSpotOrderResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgCancelSpotOrderResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata MsgCancelSpotOrderResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2ftx_2eproto[28]);
}
// ===================================================================

class MsgBatchCancelSpotOrders::_Internal {
 public:
};

MsgBatchCancelSpotOrders::MsgBatchCancelSpotOrders(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.MsgBatchCancelSpotOrders)
}
MsgBatchCancelSpotOrders::MsgBatchCancelSpotOrders(const MsgBatchCancelSpotOrders& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MsgBatchCancelSpotOrders* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){from._impl_.data_}
    , decltype(_impl_.sender_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.sender_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.sender_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sender().empty()) {
    _this->_impl_.sender_.Set(from._internal_sender(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.MsgBatchCancelSpotOrders)
}

inline void MsgBatchCancelSpotOrders::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){arena}
    , decltype(_impl_.sender_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.sender_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.sender_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MsgBatchCancelSpotOrders::~MsgBatchCancelSpotOrders() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.MsgBatchCancelSpotOrders)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MsgBatchCancelSpotOrders::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_data()->~RepeatedPtrField();
  _impl_.sender_.Destroy();
}

void MsgBatchCancelSpotOrders::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MsgBatchCancelSpotOrders::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.MsgBatchCancelSpotOrders)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_data()->Clear();
  _impl_.sender_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgBatchCancelSpotOrders::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string sender = 1 [json_name = "sender"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sender();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.MsgBatchCancelSpotOrders.sender"));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .injective.exchange.v1beta1.OrderData data = 2 [json_name = "data", (.gogoproto.nullable) = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MsgBatchCancelSpotOrders::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.MsgBatchCancelSpotOrders)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string sender = 1 [json_name = "sender"];
  if (!this->_internal_sender().empty()) {
    const std::string& _s = this->_internal_sender();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.MsgBatchCancelSpotOrders.sender");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // repeated .injective.exchange.v1beta1.OrderData data = 2 [json_name = "data", (.gogoproto.nullable) = false];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_data_size()); i < n; i++) {
    const auto& repfield = this->_internal_data(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.MsgBatchCancelSpotOrders)
  return target;
}

::size_t MsgBatchCancelSpotOrders::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.MsgBatchCancelSpotOrders)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .injective.exchange.v1beta1.OrderData data = 2 [json_name = "data", (.gogoproto.nullable) = false];
  total_size += 1UL * this->_internal_data_size();
  for (const auto& msg : this->_internal_data()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string sender = 1 [json_name = "sender"];
  if (!this->_internal_sender().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_sender());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgBatchCancelSpotOrders::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MsgBatchCancelSpotOrders::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgBatchCancelSpotOrders::GetClassData() const { return &_class_data_; }


void MsgBatchCancelSpotOrders::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MsgBatchCancelSpotOrders*>(&to_msg);
  auto& from = static_cast<const MsgBatchCancelSpotOrders&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.MsgBatchCancelSpotOrders)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_data()->MergeFrom(from._internal_data());
  if (!from._internal_sender().empty()) {
    _this->_internal_set_sender(from._internal_sender());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MsgBatchCancelSpotOrders::CopyFrom(const MsgBatchCancelSpotOrders& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.MsgBatchCancelSpotOrders)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgBatchCancelSpotOrders::IsInitialized() const {
  return true;
}

void MsgBatchCancelSpotOrders::InternalSwap(MsgBatchCancelSpotOrders* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_data()->InternalSwap(other->_internal_mutable_data());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.sender_, lhs_arena,
                                       &other->_impl_.sender_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgBatchCancelSpotOrders::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2ftx_2eproto[29]);
}
// ===================================================================

class MsgBatchCancelSpotOrdersResponse::_Internal {
 public:
};

MsgBatchCancelSpotOrdersResponse::MsgBatchCancelSpotOrdersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.MsgBatchCancelSpotOrdersResponse)
}
MsgBatchCancelSpotOrdersResponse::MsgBatchCancelSpotOrdersResponse(const MsgBatchCancelSpotOrdersResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MsgBatchCancelSpotOrdersResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.success_) { from._impl_.success_ }

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.MsgBatchCancelSpotOrdersResponse)
}

inline void MsgBatchCancelSpotOrdersResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.success_) { arena }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MsgBatchCancelSpotOrdersResponse::~MsgBatchCancelSpotOrdersResponse() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.MsgBatchCancelSpotOrdersResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MsgBatchCancelSpotOrdersResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.success_.~RepeatedField();
}

void MsgBatchCancelSpotOrdersResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MsgBatchCancelSpotOrdersResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.MsgBatchCancelSpotOrdersResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_success()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgBatchCancelSpotOrdersResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated bool success = 1 [json_name = "success"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_success(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::uint8_t>(tag) == 8) {
          _internal_add_success(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MsgBatchCancelSpotOrdersResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.MsgBatchCancelSpotOrdersResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bool success = 1 [json_name = "success"];
  if (this->_internal_success_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.MsgBatchCancelSpotOrdersResponse)
  return target;
}

::size_t MsgBatchCancelSpotOrdersResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.MsgBatchCancelSpotOrdersResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bool success = 1 [json_name = "success"];
  {
    std::size_t data_size = std::size_t{1} *
        ::_pbi::FromIntSize(this->_internal_success_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgBatchCancelSpotOrdersResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MsgBatchCancelSpotOrdersResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgBatchCancelSpotOrdersResponse::GetClassData() const { return &_class_data_; }


void MsgBatchCancelSpotOrdersResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MsgBatchCancelSpotOrdersResponse*>(&to_msg);
  auto& from = static_cast<const MsgBatchCancelSpotOrdersResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.MsgBatchCancelSpotOrdersResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.success_.MergeFrom(from._impl_.success_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MsgBatchCancelSpotOrdersResponse::CopyFrom(const MsgBatchCancelSpotOrdersResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.MsgBatchCancelSpotOrdersResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgBatchCancelSpotOrdersResponse::IsInitialized() const {
  return true;
}

void MsgBatchCancelSpotOrdersResponse::InternalSwap(MsgBatchCancelSpotOrdersResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.success_.InternalSwap(&other->_impl_.success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgBatchCancelSpotOrdersResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2ftx_2eproto[30]);
}
// ===================================================================

class MsgBatchCancelBinaryOptionsOrders::_Internal {
 public:
};

MsgBatchCancelBinaryOptionsOrders::MsgBatchCancelBinaryOptionsOrders(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.MsgBatchCancelBinaryOptionsOrders)
}
MsgBatchCancelBinaryOptionsOrders::MsgBatchCancelBinaryOptionsOrders(const MsgBatchCancelBinaryOptionsOrders& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MsgBatchCancelBinaryOptionsOrders* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){from._impl_.data_}
    , decltype(_impl_.sender_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.sender_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.sender_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sender().empty()) {
    _this->_impl_.sender_.Set(from._internal_sender(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.MsgBatchCancelBinaryOptionsOrders)
}

inline void MsgBatchCancelBinaryOptionsOrders::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){arena}
    , decltype(_impl_.sender_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.sender_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.sender_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MsgBatchCancelBinaryOptionsOrders::~MsgBatchCancelBinaryOptionsOrders() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.MsgBatchCancelBinaryOptionsOrders)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MsgBatchCancelBinaryOptionsOrders::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_data()->~RepeatedPtrField();
  _impl_.sender_.Destroy();
}

void MsgBatchCancelBinaryOptionsOrders::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MsgBatchCancelBinaryOptionsOrders::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.MsgBatchCancelBinaryOptionsOrders)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_data()->Clear();
  _impl_.sender_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgBatchCancelBinaryOptionsOrders::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string sender = 1 [json_name = "sender"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sender();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.MsgBatchCancelBinaryOptionsOrders.sender"));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .injective.exchange.v1beta1.OrderData data = 2 [json_name = "data", (.gogoproto.nullable) = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MsgBatchCancelBinaryOptionsOrders::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.MsgBatchCancelBinaryOptionsOrders)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string sender = 1 [json_name = "sender"];
  if (!this->_internal_sender().empty()) {
    const std::string& _s = this->_internal_sender();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.MsgBatchCancelBinaryOptionsOrders.sender");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // repeated .injective.exchange.v1beta1.OrderData data = 2 [json_name = "data", (.gogoproto.nullable) = false];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_data_size()); i < n; i++) {
    const auto& repfield = this->_internal_data(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.MsgBatchCancelBinaryOptionsOrders)
  return target;
}

::size_t MsgBatchCancelBinaryOptionsOrders::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.MsgBatchCancelBinaryOptionsOrders)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .injective.exchange.v1beta1.OrderData data = 2 [json_name = "data", (.gogoproto.nullable) = false];
  total_size += 1UL * this->_internal_data_size();
  for (const auto& msg : this->_internal_data()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string sender = 1 [json_name = "sender"];
  if (!this->_internal_sender().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_sender());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgBatchCancelBinaryOptionsOrders::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MsgBatchCancelBinaryOptionsOrders::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgBatchCancelBinaryOptionsOrders::GetClassData() const { return &_class_data_; }


void MsgBatchCancelBinaryOptionsOrders::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MsgBatchCancelBinaryOptionsOrders*>(&to_msg);
  auto& from = static_cast<const MsgBatchCancelBinaryOptionsOrders&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.MsgBatchCancelBinaryOptionsOrders)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_data()->MergeFrom(from._internal_data());
  if (!from._internal_sender().empty()) {
    _this->_internal_set_sender(from._internal_sender());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MsgBatchCancelBinaryOptionsOrders::CopyFrom(const MsgBatchCancelBinaryOptionsOrders& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.MsgBatchCancelBinaryOptionsOrders)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgBatchCancelBinaryOptionsOrders::IsInitialized() const {
  return true;
}

void MsgBatchCancelBinaryOptionsOrders::InternalSwap(MsgBatchCancelBinaryOptionsOrders* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_data()->InternalSwap(other->_internal_mutable_data());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.sender_, lhs_arena,
                                       &other->_impl_.sender_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgBatchCancelBinaryOptionsOrders::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2ftx_2eproto[31]);
}
// ===================================================================

class MsgBatchCancelBinaryOptionsOrdersResponse::_Internal {
 public:
};

MsgBatchCancelBinaryOptionsOrdersResponse::MsgBatchCancelBinaryOptionsOrdersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.MsgBatchCancelBinaryOptionsOrdersResponse)
}
MsgBatchCancelBinaryOptionsOrdersResponse::MsgBatchCancelBinaryOptionsOrdersResponse(const MsgBatchCancelBinaryOptionsOrdersResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MsgBatchCancelBinaryOptionsOrdersResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.success_) { from._impl_.success_ }

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.MsgBatchCancelBinaryOptionsOrdersResponse)
}

inline void MsgBatchCancelBinaryOptionsOrdersResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.success_) { arena }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MsgBatchCancelBinaryOptionsOrdersResponse::~MsgBatchCancelBinaryOptionsOrdersResponse() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.MsgBatchCancelBinaryOptionsOrdersResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MsgBatchCancelBinaryOptionsOrdersResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.success_.~RepeatedField();
}

void MsgBatchCancelBinaryOptionsOrdersResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MsgBatchCancelBinaryOptionsOrdersResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.MsgBatchCancelBinaryOptionsOrdersResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_success()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgBatchCancelBinaryOptionsOrdersResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated bool success = 1 [json_name = "success"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_success(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::uint8_t>(tag) == 8) {
          _internal_add_success(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MsgBatchCancelBinaryOptionsOrdersResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.MsgBatchCancelBinaryOptionsOrdersResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bool success = 1 [json_name = "success"];
  if (this->_internal_success_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.MsgBatchCancelBinaryOptionsOrdersResponse)
  return target;
}

::size_t MsgBatchCancelBinaryOptionsOrdersResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.MsgBatchCancelBinaryOptionsOrdersResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bool success = 1 [json_name = "success"];
  {
    std::size_t data_size = std::size_t{1} *
        ::_pbi::FromIntSize(this->_internal_success_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgBatchCancelBinaryOptionsOrdersResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MsgBatchCancelBinaryOptionsOrdersResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgBatchCancelBinaryOptionsOrdersResponse::GetClassData() const { return &_class_data_; }


void MsgBatchCancelBinaryOptionsOrdersResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MsgBatchCancelBinaryOptionsOrdersResponse*>(&to_msg);
  auto& from = static_cast<const MsgBatchCancelBinaryOptionsOrdersResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.MsgBatchCancelBinaryOptionsOrdersResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.success_.MergeFrom(from._impl_.success_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MsgBatchCancelBinaryOptionsOrdersResponse::CopyFrom(const MsgBatchCancelBinaryOptionsOrdersResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.MsgBatchCancelBinaryOptionsOrdersResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgBatchCancelBinaryOptionsOrdersResponse::IsInitialized() const {
  return true;
}

void MsgBatchCancelBinaryOptionsOrdersResponse::InternalSwap(MsgBatchCancelBinaryOptionsOrdersResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.success_.InternalSwap(&other->_impl_.success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgBatchCancelBinaryOptionsOrdersResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2ftx_2eproto[32]);
}
// ===================================================================

class MsgBatchUpdateOrders::_Internal {
 public:
};

void MsgBatchUpdateOrders::clear_spot_orders_to_create() {
  _internal_mutable_spot_orders_to_create()->Clear();
}
void MsgBatchUpdateOrders::clear_derivative_orders_to_create() {
  _internal_mutable_derivative_orders_to_create()->Clear();
}
void MsgBatchUpdateOrders::clear_binary_options_orders_to_create() {
  _internal_mutable_binary_options_orders_to_create()->Clear();
}
MsgBatchUpdateOrders::MsgBatchUpdateOrders(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.MsgBatchUpdateOrders)
}
MsgBatchUpdateOrders::MsgBatchUpdateOrders(const MsgBatchUpdateOrders& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MsgBatchUpdateOrders* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.spot_market_ids_to_cancel_all_){from._impl_.spot_market_ids_to_cancel_all_}
    , decltype(_impl_.derivative_market_ids_to_cancel_all_){from._impl_.derivative_market_ids_to_cancel_all_}
    , decltype(_impl_.spot_orders_to_cancel_){from._impl_.spot_orders_to_cancel_}
    , decltype(_impl_.derivative_orders_to_cancel_){from._impl_.derivative_orders_to_cancel_}
    , decltype(_impl_.spot_orders_to_create_){from._impl_.spot_orders_to_create_}
    , decltype(_impl_.derivative_orders_to_create_){from._impl_.derivative_orders_to_create_}
    , decltype(_impl_.binary_options_orders_to_cancel_){from._impl_.binary_options_orders_to_cancel_}
    , decltype(_impl_.binary_options_market_ids_to_cancel_all_){from._impl_.binary_options_market_ids_to_cancel_all_}
    , decltype(_impl_.binary_options_orders_to_create_){from._impl_.binary_options_orders_to_create_}
    , decltype(_impl_.sender_) {}

    , decltype(_impl_.subaccount_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.sender_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.sender_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sender().empty()) {
    _this->_impl_.sender_.Set(from._internal_sender(), _this->GetArenaForAllocation());
  }
  _impl_.subaccount_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.subaccount_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_subaccount_id().empty()) {
    _this->_impl_.subaccount_id_.Set(from._internal_subaccount_id(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.MsgBatchUpdateOrders)
}

inline void MsgBatchUpdateOrders::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.spot_market_ids_to_cancel_all_){arena}
    , decltype(_impl_.derivative_market_ids_to_cancel_all_){arena}
    , decltype(_impl_.spot_orders_to_cancel_){arena}
    , decltype(_impl_.derivative_orders_to_cancel_){arena}
    , decltype(_impl_.spot_orders_to_create_){arena}
    , decltype(_impl_.derivative_orders_to_create_){arena}
    , decltype(_impl_.binary_options_orders_to_cancel_){arena}
    , decltype(_impl_.binary_options_market_ids_to_cancel_all_){arena}
    , decltype(_impl_.binary_options_orders_to_create_){arena}
    , decltype(_impl_.sender_) {}

    , decltype(_impl_.subaccount_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.sender_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.sender_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.subaccount_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.subaccount_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MsgBatchUpdateOrders::~MsgBatchUpdateOrders() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.MsgBatchUpdateOrders)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MsgBatchUpdateOrders::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_spot_market_ids_to_cancel_all()->~RepeatedPtrField();
  _internal_mutable_derivative_market_ids_to_cancel_all()->~RepeatedPtrField();
  _internal_mutable_spot_orders_to_cancel()->~RepeatedPtrField();
  _internal_mutable_derivative_orders_to_cancel()->~RepeatedPtrField();
  _internal_mutable_spot_orders_to_create()->~RepeatedPtrField();
  _internal_mutable_derivative_orders_to_create()->~RepeatedPtrField();
  _internal_mutable_binary_options_orders_to_cancel()->~RepeatedPtrField();
  _internal_mutable_binary_options_market_ids_to_cancel_all()->~RepeatedPtrField();
  _internal_mutable_binary_options_orders_to_create()->~RepeatedPtrField();
  _impl_.sender_.Destroy();
  _impl_.subaccount_id_.Destroy();
}

void MsgBatchUpdateOrders::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MsgBatchUpdateOrders::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.MsgBatchUpdateOrders)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_spot_market_ids_to_cancel_all()->Clear();
  _internal_mutable_derivative_market_ids_to_cancel_all()->Clear();
  _internal_mutable_spot_orders_to_cancel()->Clear();
  _internal_mutable_derivative_orders_to_cancel()->Clear();
  _internal_mutable_spot_orders_to_create()->Clear();
  _internal_mutable_derivative_orders_to_create()->Clear();
  _internal_mutable_binary_options_orders_to_cancel()->Clear();
  _internal_mutable_binary_options_market_ids_to_cancel_all()->Clear();
  _internal_mutable_binary_options_orders_to_create()->Clear();
  _impl_.sender_.ClearToEmpty();
  _impl_.subaccount_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgBatchUpdateOrders::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string sender = 1 [json_name = "sender"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sender();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.MsgBatchUpdateOrders.sender"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string subaccount_id = 2 [json_name = "subaccountId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_subaccount_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.MsgBatchUpdateOrders.subaccount_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string spot_market_ids_to_cancel_all = 3 [json_name = "spotMarketIdsToCancelAll"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_spot_market_ids_to_cancel_all();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.MsgBatchUpdateOrders.spot_market_ids_to_cancel_all"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string derivative_market_ids_to_cancel_all = 4 [json_name = "derivativeMarketIdsToCancelAll"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_derivative_market_ids_to_cancel_all();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.MsgBatchUpdateOrders.derivative_market_ids_to_cancel_all"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .injective.exchange.v1beta1.OrderData spot_orders_to_cancel = 5 [json_name = "spotOrdersToCancel", (.gogoproto.nullable) = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_spot_orders_to_cancel(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .injective.exchange.v1beta1.OrderData derivative_orders_to_cancel = 6 [json_name = "derivativeOrdersToCancel", (.gogoproto.nullable) = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_derivative_orders_to_cancel(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .injective.exchange.v1beta1.SpotOrder spot_orders_to_create = 7 [json_name = "spotOrdersToCreate", (.gogoproto.nullable) = true];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_spot_orders_to_create(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .injective.exchange.v1beta1.DerivativeOrder derivative_orders_to_create = 8 [json_name = "derivativeOrdersToCreate", (.gogoproto.nullable) = true];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_derivative_orders_to_create(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .injective.exchange.v1beta1.OrderData binary_options_orders_to_cancel = 9 [json_name = "binaryOptionsOrdersToCancel", (.gogoproto.nullable) = true];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_binary_options_orders_to_cancel(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string binary_options_market_ids_to_cancel_all = 10 [json_name = "binaryOptionsMarketIdsToCancelAll"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_binary_options_market_ids_to_cancel_all();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.MsgBatchUpdateOrders.binary_options_market_ids_to_cancel_all"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .injective.exchange.v1beta1.DerivativeOrder binary_options_orders_to_create = 11 [json_name = "binaryOptionsOrdersToCreate", (.gogoproto.nullable) = true];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_binary_options_orders_to_create(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MsgBatchUpdateOrders::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.MsgBatchUpdateOrders)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string sender = 1 [json_name = "sender"];
  if (!this->_internal_sender().empty()) {
    const std::string& _s = this->_internal_sender();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.MsgBatchUpdateOrders.sender");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string subaccount_id = 2 [json_name = "subaccountId"];
  if (!this->_internal_subaccount_id().empty()) {
    const std::string& _s = this->_internal_subaccount_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.MsgBatchUpdateOrders.subaccount_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // repeated string spot_market_ids_to_cancel_all = 3 [json_name = "spotMarketIdsToCancelAll"];
  for (int i = 0, n = this->_internal_spot_market_ids_to_cancel_all_size(); i < n; ++i) {
    const auto& s = this->_internal_spot_market_ids_to_cancel_all(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.MsgBatchUpdateOrders.spot_market_ids_to_cancel_all");
    target = stream->WriteString(3, s, target);
  }

  // repeated string derivative_market_ids_to_cancel_all = 4 [json_name = "derivativeMarketIdsToCancelAll"];
  for (int i = 0, n = this->_internal_derivative_market_ids_to_cancel_all_size(); i < n; ++i) {
    const auto& s = this->_internal_derivative_market_ids_to_cancel_all(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.MsgBatchUpdateOrders.derivative_market_ids_to_cancel_all");
    target = stream->WriteString(4, s, target);
  }

  // repeated .injective.exchange.v1beta1.OrderData spot_orders_to_cancel = 5 [json_name = "spotOrdersToCancel", (.gogoproto.nullable) = true];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_spot_orders_to_cancel_size()); i < n; i++) {
    const auto& repfield = this->_internal_spot_orders_to_cancel(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .injective.exchange.v1beta1.OrderData derivative_orders_to_cancel = 6 [json_name = "derivativeOrdersToCancel", (.gogoproto.nullable) = true];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_derivative_orders_to_cancel_size()); i < n; i++) {
    const auto& repfield = this->_internal_derivative_orders_to_cancel(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .injective.exchange.v1beta1.SpotOrder spot_orders_to_create = 7 [json_name = "spotOrdersToCreate", (.gogoproto.nullable) = true];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_spot_orders_to_create_size()); i < n; i++) {
    const auto& repfield = this->_internal_spot_orders_to_create(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .injective.exchange.v1beta1.DerivativeOrder derivative_orders_to_create = 8 [json_name = "derivativeOrdersToCreate", (.gogoproto.nullable) = true];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_derivative_orders_to_create_size()); i < n; i++) {
    const auto& repfield = this->_internal_derivative_orders_to_create(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .injective.exchange.v1beta1.OrderData binary_options_orders_to_cancel = 9 [json_name = "binaryOptionsOrdersToCancel", (.gogoproto.nullable) = true];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_binary_options_orders_to_cancel_size()); i < n; i++) {
    const auto& repfield = this->_internal_binary_options_orders_to_cancel(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated string binary_options_market_ids_to_cancel_all = 10 [json_name = "binaryOptionsMarketIdsToCancelAll"];
  for (int i = 0, n = this->_internal_binary_options_market_ids_to_cancel_all_size(); i < n; ++i) {
    const auto& s = this->_internal_binary_options_market_ids_to_cancel_all(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.MsgBatchUpdateOrders.binary_options_market_ids_to_cancel_all");
    target = stream->WriteString(10, s, target);
  }

  // repeated .injective.exchange.v1beta1.DerivativeOrder binary_options_orders_to_create = 11 [json_name = "binaryOptionsOrdersToCreate", (.gogoproto.nullable) = true];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_binary_options_orders_to_create_size()); i < n; i++) {
    const auto& repfield = this->_internal_binary_options_orders_to_create(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(11, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.MsgBatchUpdateOrders)
  return target;
}

::size_t MsgBatchUpdateOrders::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.MsgBatchUpdateOrders)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string spot_market_ids_to_cancel_all = 3 [json_name = "spotMarketIdsToCancelAll"];
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_spot_market_ids_to_cancel_all().size());
  for (int i = 0, n = _internal_spot_market_ids_to_cancel_all().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_spot_market_ids_to_cancel_all().Get(i));
  }

  // repeated string derivative_market_ids_to_cancel_all = 4 [json_name = "derivativeMarketIdsToCancelAll"];
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_derivative_market_ids_to_cancel_all().size());
  for (int i = 0, n = _internal_derivative_market_ids_to_cancel_all().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_derivative_market_ids_to_cancel_all().Get(i));
  }

  // repeated .injective.exchange.v1beta1.OrderData spot_orders_to_cancel = 5 [json_name = "spotOrdersToCancel", (.gogoproto.nullable) = true];
  total_size += 1UL * this->_internal_spot_orders_to_cancel_size();
  for (const auto& msg : this->_internal_spot_orders_to_cancel()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .injective.exchange.v1beta1.OrderData derivative_orders_to_cancel = 6 [json_name = "derivativeOrdersToCancel", (.gogoproto.nullable) = true];
  total_size += 1UL * this->_internal_derivative_orders_to_cancel_size();
  for (const auto& msg : this->_internal_derivative_orders_to_cancel()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .injective.exchange.v1beta1.SpotOrder spot_orders_to_create = 7 [json_name = "spotOrdersToCreate", (.gogoproto.nullable) = true];
  total_size += 1UL * this->_internal_spot_orders_to_create_size();
  for (const auto& msg : this->_internal_spot_orders_to_create()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .injective.exchange.v1beta1.DerivativeOrder derivative_orders_to_create = 8 [json_name = "derivativeOrdersToCreate", (.gogoproto.nullable) = true];
  total_size += 1UL * this->_internal_derivative_orders_to_create_size();
  for (const auto& msg : this->_internal_derivative_orders_to_create()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .injective.exchange.v1beta1.OrderData binary_options_orders_to_cancel = 9 [json_name = "binaryOptionsOrdersToCancel", (.gogoproto.nullable) = true];
  total_size += 1UL * this->_internal_binary_options_orders_to_cancel_size();
  for (const auto& msg : this->_internal_binary_options_orders_to_cancel()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string binary_options_market_ids_to_cancel_all = 10 [json_name = "binaryOptionsMarketIdsToCancelAll"];
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_binary_options_market_ids_to_cancel_all().size());
  for (int i = 0, n = _internal_binary_options_market_ids_to_cancel_all().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_binary_options_market_ids_to_cancel_all().Get(i));
  }

  // repeated .injective.exchange.v1beta1.DerivativeOrder binary_options_orders_to_create = 11 [json_name = "binaryOptionsOrdersToCreate", (.gogoproto.nullable) = true];
  total_size += 1UL * this->_internal_binary_options_orders_to_create_size();
  for (const auto& msg : this->_internal_binary_options_orders_to_create()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string sender = 1 [json_name = "sender"];
  if (!this->_internal_sender().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_sender());
  }

  // string subaccount_id = 2 [json_name = "subaccountId"];
  if (!this->_internal_subaccount_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_subaccount_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgBatchUpdateOrders::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MsgBatchUpdateOrders::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgBatchUpdateOrders::GetClassData() const { return &_class_data_; }


void MsgBatchUpdateOrders::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MsgBatchUpdateOrders*>(&to_msg);
  auto& from = static_cast<const MsgBatchUpdateOrders&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.MsgBatchUpdateOrders)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_spot_market_ids_to_cancel_all()->MergeFrom(from._internal_spot_market_ids_to_cancel_all());
  _this->_internal_mutable_derivative_market_ids_to_cancel_all()->MergeFrom(from._internal_derivative_market_ids_to_cancel_all());
  _this->_internal_mutable_spot_orders_to_cancel()->MergeFrom(from._internal_spot_orders_to_cancel());
  _this->_internal_mutable_derivative_orders_to_cancel()->MergeFrom(from._internal_derivative_orders_to_cancel());
  _this->_internal_mutable_spot_orders_to_create()->MergeFrom(from._internal_spot_orders_to_create());
  _this->_internal_mutable_derivative_orders_to_create()->MergeFrom(from._internal_derivative_orders_to_create());
  _this->_internal_mutable_binary_options_orders_to_cancel()->MergeFrom(from._internal_binary_options_orders_to_cancel());
  _this->_internal_mutable_binary_options_market_ids_to_cancel_all()->MergeFrom(from._internal_binary_options_market_ids_to_cancel_all());
  _this->_internal_mutable_binary_options_orders_to_create()->MergeFrom(from._internal_binary_options_orders_to_create());
  if (!from._internal_sender().empty()) {
    _this->_internal_set_sender(from._internal_sender());
  }
  if (!from._internal_subaccount_id().empty()) {
    _this->_internal_set_subaccount_id(from._internal_subaccount_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MsgBatchUpdateOrders::CopyFrom(const MsgBatchUpdateOrders& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.MsgBatchUpdateOrders)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgBatchUpdateOrders::IsInitialized() const {
  return true;
}

void MsgBatchUpdateOrders::InternalSwap(MsgBatchUpdateOrders* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_spot_market_ids_to_cancel_all()->InternalSwap(
      other->_internal_mutable_spot_market_ids_to_cancel_all());
  _internal_mutable_derivative_market_ids_to_cancel_all()->InternalSwap(
      other->_internal_mutable_derivative_market_ids_to_cancel_all());
  _internal_mutable_spot_orders_to_cancel()->InternalSwap(other->_internal_mutable_spot_orders_to_cancel());
  _internal_mutable_derivative_orders_to_cancel()->InternalSwap(other->_internal_mutable_derivative_orders_to_cancel());
  _internal_mutable_spot_orders_to_create()->InternalSwap(other->_internal_mutable_spot_orders_to_create());
  _internal_mutable_derivative_orders_to_create()->InternalSwap(other->_internal_mutable_derivative_orders_to_create());
  _internal_mutable_binary_options_orders_to_cancel()->InternalSwap(other->_internal_mutable_binary_options_orders_to_cancel());
  _internal_mutable_binary_options_market_ids_to_cancel_all()->InternalSwap(
      other->_internal_mutable_binary_options_market_ids_to_cancel_all());
  _internal_mutable_binary_options_orders_to_create()->InternalSwap(other->_internal_mutable_binary_options_orders_to_create());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.sender_, lhs_arena,
                                       &other->_impl_.sender_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.subaccount_id_, lhs_arena,
                                       &other->_impl_.subaccount_id_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgBatchUpdateOrders::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2ftx_2eproto[33]);
}
// ===================================================================

class MsgBatchUpdateOrdersResponse::_Internal {
 public:
};

MsgBatchUpdateOrdersResponse::MsgBatchUpdateOrdersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.MsgBatchUpdateOrdersResponse)
}
MsgBatchUpdateOrdersResponse::MsgBatchUpdateOrdersResponse(const MsgBatchUpdateOrdersResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MsgBatchUpdateOrdersResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.spot_cancel_success_) { from._impl_.spot_cancel_success_ }

    , decltype(_impl_.derivative_cancel_success_) { from._impl_.derivative_cancel_success_ }

    , decltype(_impl_.spot_order_hashes_){from._impl_.spot_order_hashes_}
    , decltype(_impl_.derivative_order_hashes_){from._impl_.derivative_order_hashes_}
    , decltype(_impl_.binary_options_cancel_success_) { from._impl_.binary_options_cancel_success_ }

    , decltype(_impl_.binary_options_order_hashes_){from._impl_.binary_options_order_hashes_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.MsgBatchUpdateOrdersResponse)
}

inline void MsgBatchUpdateOrdersResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.spot_cancel_success_) { arena }

    , decltype(_impl_.derivative_cancel_success_) { arena }

    , decltype(_impl_.spot_order_hashes_){arena}
    , decltype(_impl_.derivative_order_hashes_){arena}
    , decltype(_impl_.binary_options_cancel_success_) { arena }

    , decltype(_impl_.binary_options_order_hashes_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MsgBatchUpdateOrdersResponse::~MsgBatchUpdateOrdersResponse() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.MsgBatchUpdateOrdersResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MsgBatchUpdateOrdersResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.spot_cancel_success_.~RepeatedField();
  _impl_.derivative_cancel_success_.~RepeatedField();
  _internal_mutable_spot_order_hashes()->~RepeatedPtrField();
  _internal_mutable_derivative_order_hashes()->~RepeatedPtrField();
  _impl_.binary_options_cancel_success_.~RepeatedField();
  _internal_mutable_binary_options_order_hashes()->~RepeatedPtrField();
}

void MsgBatchUpdateOrdersResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MsgBatchUpdateOrdersResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.MsgBatchUpdateOrdersResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_spot_cancel_success()->Clear();
  _internal_mutable_derivative_cancel_success()->Clear();
  _internal_mutable_spot_order_hashes()->Clear();
  _internal_mutable_derivative_order_hashes()->Clear();
  _internal_mutable_binary_options_cancel_success()->Clear();
  _internal_mutable_binary_options_order_hashes()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgBatchUpdateOrdersResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated bool spot_cancel_success = 1 [json_name = "spotCancelSuccess"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_spot_cancel_success(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::uint8_t>(tag) == 8) {
          _internal_add_spot_cancel_success(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated bool derivative_cancel_success = 2 [json_name = "derivativeCancelSuccess"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_derivative_cancel_success(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::uint8_t>(tag) == 16) {
          _internal_add_derivative_cancel_success(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string spot_order_hashes = 3 [json_name = "spotOrderHashes"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_spot_order_hashes();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.MsgBatchUpdateOrdersResponse.spot_order_hashes"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string derivative_order_hashes = 4 [json_name = "derivativeOrderHashes"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_derivative_order_hashes();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.MsgBatchUpdateOrdersResponse.derivative_order_hashes"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated bool binary_options_cancel_success = 5 [json_name = "binaryOptionsCancelSuccess"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_binary_options_cancel_success(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::uint8_t>(tag) == 40) {
          _internal_add_binary_options_cancel_success(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string binary_options_order_hashes = 6 [json_name = "binaryOptionsOrderHashes"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_binary_options_order_hashes();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.MsgBatchUpdateOrdersResponse.binary_options_order_hashes"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MsgBatchUpdateOrdersResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.MsgBatchUpdateOrdersResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bool spot_cancel_success = 1 [json_name = "spotCancelSuccess"];
  if (this->_internal_spot_cancel_success_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_spot_cancel_success(), target);
  }

  // repeated bool derivative_cancel_success = 2 [json_name = "derivativeCancelSuccess"];
  if (this->_internal_derivative_cancel_success_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_derivative_cancel_success(), target);
  }

  // repeated string spot_order_hashes = 3 [json_name = "spotOrderHashes"];
  for (int i = 0, n = this->_internal_spot_order_hashes_size(); i < n; ++i) {
    const auto& s = this->_internal_spot_order_hashes(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.MsgBatchUpdateOrdersResponse.spot_order_hashes");
    target = stream->WriteString(3, s, target);
  }

  // repeated string derivative_order_hashes = 4 [json_name = "derivativeOrderHashes"];
  for (int i = 0, n = this->_internal_derivative_order_hashes_size(); i < n; ++i) {
    const auto& s = this->_internal_derivative_order_hashes(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.MsgBatchUpdateOrdersResponse.derivative_order_hashes");
    target = stream->WriteString(4, s, target);
  }

  // repeated bool binary_options_cancel_success = 5 [json_name = "binaryOptionsCancelSuccess"];
  if (this->_internal_binary_options_cancel_success_size() > 0) {
    target = stream->WriteFixedPacked(5, _internal_binary_options_cancel_success(), target);
  }

  // repeated string binary_options_order_hashes = 6 [json_name = "binaryOptionsOrderHashes"];
  for (int i = 0, n = this->_internal_binary_options_order_hashes_size(); i < n; ++i) {
    const auto& s = this->_internal_binary_options_order_hashes(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.MsgBatchUpdateOrdersResponse.binary_options_order_hashes");
    target = stream->WriteString(6, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.MsgBatchUpdateOrdersResponse)
  return target;
}

::size_t MsgBatchUpdateOrdersResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.MsgBatchUpdateOrdersResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bool spot_cancel_success = 1 [json_name = "spotCancelSuccess"];
  {
    std::size_t data_size = std::size_t{1} *
        ::_pbi::FromIntSize(this->_internal_spot_cancel_success_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }

  // repeated bool derivative_cancel_success = 2 [json_name = "derivativeCancelSuccess"];
  {
    std::size_t data_size = std::size_t{1} *
        ::_pbi::FromIntSize(this->_internal_derivative_cancel_success_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }

  // repeated string spot_order_hashes = 3 [json_name = "spotOrderHashes"];
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_spot_order_hashes().size());
  for (int i = 0, n = _internal_spot_order_hashes().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_spot_order_hashes().Get(i));
  }

  // repeated string derivative_order_hashes = 4 [json_name = "derivativeOrderHashes"];
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_derivative_order_hashes().size());
  for (int i = 0, n = _internal_derivative_order_hashes().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_derivative_order_hashes().Get(i));
  }

  // repeated bool binary_options_cancel_success = 5 [json_name = "binaryOptionsCancelSuccess"];
  {
    std::size_t data_size = std::size_t{1} *
        ::_pbi::FromIntSize(this->_internal_binary_options_cancel_success_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }

  // repeated string binary_options_order_hashes = 6 [json_name = "binaryOptionsOrderHashes"];
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_binary_options_order_hashes().size());
  for (int i = 0, n = _internal_binary_options_order_hashes().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_binary_options_order_hashes().Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgBatchUpdateOrdersResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MsgBatchUpdateOrdersResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgBatchUpdateOrdersResponse::GetClassData() const { return &_class_data_; }


void MsgBatchUpdateOrdersResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MsgBatchUpdateOrdersResponse*>(&to_msg);
  auto& from = static_cast<const MsgBatchUpdateOrdersResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.MsgBatchUpdateOrdersResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.spot_cancel_success_.MergeFrom(from._impl_.spot_cancel_success_);
  _this->_impl_.derivative_cancel_success_.MergeFrom(from._impl_.derivative_cancel_success_);
  _this->_internal_mutable_spot_order_hashes()->MergeFrom(from._internal_spot_order_hashes());
  _this->_internal_mutable_derivative_order_hashes()->MergeFrom(from._internal_derivative_order_hashes());
  _this->_impl_.binary_options_cancel_success_.MergeFrom(from._impl_.binary_options_cancel_success_);
  _this->_internal_mutable_binary_options_order_hashes()->MergeFrom(from._internal_binary_options_order_hashes());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MsgBatchUpdateOrdersResponse::CopyFrom(const MsgBatchUpdateOrdersResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.MsgBatchUpdateOrdersResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgBatchUpdateOrdersResponse::IsInitialized() const {
  return true;
}

void MsgBatchUpdateOrdersResponse::InternalSwap(MsgBatchUpdateOrdersResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.spot_cancel_success_.InternalSwap(&other->_impl_.spot_cancel_success_);
  _impl_.derivative_cancel_success_.InternalSwap(&other->_impl_.derivative_cancel_success_);
  _internal_mutable_spot_order_hashes()->InternalSwap(
      other->_internal_mutable_spot_order_hashes());
  _internal_mutable_derivative_order_hashes()->InternalSwap(
      other->_internal_mutable_derivative_order_hashes());
  _impl_.binary_options_cancel_success_.InternalSwap(&other->_impl_.binary_options_cancel_success_);
  _internal_mutable_binary_options_order_hashes()->InternalSwap(
      other->_internal_mutable_binary_options_order_hashes());
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgBatchUpdateOrdersResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2ftx_2eproto[34]);
}
// ===================================================================

class MsgCreateDerivativeMarketOrder::_Internal {
 public:
  using HasBits = decltype(std::declval<MsgCreateDerivativeMarketOrder>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(MsgCreateDerivativeMarketOrder, _impl_._has_bits_);
  static const ::injective::exchange::v1beta1::DerivativeOrder& order(const MsgCreateDerivativeMarketOrder* msg);
  static void set_has_order(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::injective::exchange::v1beta1::DerivativeOrder&
MsgCreateDerivativeMarketOrder::_Internal::order(const MsgCreateDerivativeMarketOrder* msg) {
  return *msg->_impl_.order_;
}
void MsgCreateDerivativeMarketOrder::clear_order() {
  if (_impl_.order_ != nullptr) _impl_.order_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
MsgCreateDerivativeMarketOrder::MsgCreateDerivativeMarketOrder(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.MsgCreateDerivativeMarketOrder)
}
MsgCreateDerivativeMarketOrder::MsgCreateDerivativeMarketOrder(const MsgCreateDerivativeMarketOrder& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MsgCreateDerivativeMarketOrder* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sender_) {}

    , decltype(_impl_.order_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.sender_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.sender_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sender().empty()) {
    _this->_impl_.sender_.Set(from._internal_sender(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.order_ = new ::injective::exchange::v1beta1::DerivativeOrder(*from._impl_.order_);
  }
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.MsgCreateDerivativeMarketOrder)
}

inline void MsgCreateDerivativeMarketOrder::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sender_) {}

    , decltype(_impl_.order_){nullptr}
  };
  _impl_.sender_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.sender_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MsgCreateDerivativeMarketOrder::~MsgCreateDerivativeMarketOrder() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.MsgCreateDerivativeMarketOrder)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MsgCreateDerivativeMarketOrder::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sender_.Destroy();
  if (this != internal_default_instance()) delete _impl_.order_;
}

void MsgCreateDerivativeMarketOrder::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MsgCreateDerivativeMarketOrder::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.MsgCreateDerivativeMarketOrder)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sender_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.order_ != nullptr);
    _impl_.order_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgCreateDerivativeMarketOrder::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string sender = 1 [json_name = "sender"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sender();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.MsgCreateDerivativeMarketOrder.sender"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .injective.exchange.v1beta1.DerivativeOrder order = 2 [json_name = "order", (.gogoproto.nullable) = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_order(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MsgCreateDerivativeMarketOrder::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.MsgCreateDerivativeMarketOrder)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string sender = 1 [json_name = "sender"];
  if (!this->_internal_sender().empty()) {
    const std::string& _s = this->_internal_sender();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.MsgCreateDerivativeMarketOrder.sender");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .injective.exchange.v1beta1.DerivativeOrder order = 2 [json_name = "order", (.gogoproto.nullable) = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::order(this),
        _Internal::order(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.MsgCreateDerivativeMarketOrder)
  return target;
}

::size_t MsgCreateDerivativeMarketOrder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.MsgCreateDerivativeMarketOrder)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sender = 1 [json_name = "sender"];
  if (!this->_internal_sender().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_sender());
  }

  // .injective.exchange.v1beta1.DerivativeOrder order = 2 [json_name = "order", (.gogoproto.nullable) = false];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.order_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgCreateDerivativeMarketOrder::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MsgCreateDerivativeMarketOrder::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgCreateDerivativeMarketOrder::GetClassData() const { return &_class_data_; }


void MsgCreateDerivativeMarketOrder::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MsgCreateDerivativeMarketOrder*>(&to_msg);
  auto& from = static_cast<const MsgCreateDerivativeMarketOrder&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.MsgCreateDerivativeMarketOrder)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_sender().empty()) {
    _this->_internal_set_sender(from._internal_sender());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_order()->::injective::exchange::v1beta1::DerivativeOrder::MergeFrom(
        from._internal_order());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MsgCreateDerivativeMarketOrder::CopyFrom(const MsgCreateDerivativeMarketOrder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.MsgCreateDerivativeMarketOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCreateDerivativeMarketOrder::IsInitialized() const {
  return true;
}

void MsgCreateDerivativeMarketOrder::InternalSwap(MsgCreateDerivativeMarketOrder* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.sender_, lhs_arena,
                                       &other->_impl_.sender_, rhs_arena);
  swap(_impl_.order_, other->_impl_.order_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgCreateDerivativeMarketOrder::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2ftx_2eproto[35]);
}
// ===================================================================

class MsgCreateDerivativeMarketOrderResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<MsgCreateDerivativeMarketOrderResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(MsgCreateDerivativeMarketOrderResponse, _impl_._has_bits_);
  static const ::injective::exchange::v1beta1::DerivativeMarketOrderResults& results(const MsgCreateDerivativeMarketOrderResponse* msg);
  static void set_has_results(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::injective::exchange::v1beta1::DerivativeMarketOrderResults&
MsgCreateDerivativeMarketOrderResponse::_Internal::results(const MsgCreateDerivativeMarketOrderResponse* msg) {
  return *msg->_impl_.results_;
}
MsgCreateDerivativeMarketOrderResponse::MsgCreateDerivativeMarketOrderResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.MsgCreateDerivativeMarketOrderResponse)
}
MsgCreateDerivativeMarketOrderResponse::MsgCreateDerivativeMarketOrderResponse(const MsgCreateDerivativeMarketOrderResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MsgCreateDerivativeMarketOrderResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.order_hash_) {}

    , decltype(_impl_.results_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.order_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.order_hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_order_hash().empty()) {
    _this->_impl_.order_hash_.Set(from._internal_order_hash(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.results_ = new ::injective::exchange::v1beta1::DerivativeMarketOrderResults(*from._impl_.results_);
  }
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.MsgCreateDerivativeMarketOrderResponse)
}

inline void MsgCreateDerivativeMarketOrderResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.order_hash_) {}

    , decltype(_impl_.results_){nullptr}
  };
  _impl_.order_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.order_hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MsgCreateDerivativeMarketOrderResponse::~MsgCreateDerivativeMarketOrderResponse() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.MsgCreateDerivativeMarketOrderResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MsgCreateDerivativeMarketOrderResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.order_hash_.Destroy();
  if (this != internal_default_instance()) delete _impl_.results_;
}

void MsgCreateDerivativeMarketOrderResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MsgCreateDerivativeMarketOrderResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.MsgCreateDerivativeMarketOrderResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.order_hash_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.results_ != nullptr);
    _impl_.results_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgCreateDerivativeMarketOrderResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string order_hash = 1 [json_name = "orderHash"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_order_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.MsgCreateDerivativeMarketOrderResponse.order_hash"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .injective.exchange.v1beta1.DerivativeMarketOrderResults results = 2 [json_name = "results", (.gogoproto.nullable) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_results(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MsgCreateDerivativeMarketOrderResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.MsgCreateDerivativeMarketOrderResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string order_hash = 1 [json_name = "orderHash"];
  if (!this->_internal_order_hash().empty()) {
    const std::string& _s = this->_internal_order_hash();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.MsgCreateDerivativeMarketOrderResponse.order_hash");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .injective.exchange.v1beta1.DerivativeMarketOrderResults results = 2 [json_name = "results", (.gogoproto.nullable) = true];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::results(this),
        _Internal::results(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.MsgCreateDerivativeMarketOrderResponse)
  return target;
}

::size_t MsgCreateDerivativeMarketOrderResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.MsgCreateDerivativeMarketOrderResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string order_hash = 1 [json_name = "orderHash"];
  if (!this->_internal_order_hash().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_order_hash());
  }

  // .injective.exchange.v1beta1.DerivativeMarketOrderResults results = 2 [json_name = "results", (.gogoproto.nullable) = true];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.results_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgCreateDerivativeMarketOrderResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MsgCreateDerivativeMarketOrderResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgCreateDerivativeMarketOrderResponse::GetClassData() const { return &_class_data_; }


void MsgCreateDerivativeMarketOrderResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MsgCreateDerivativeMarketOrderResponse*>(&to_msg);
  auto& from = static_cast<const MsgCreateDerivativeMarketOrderResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.MsgCreateDerivativeMarketOrderResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_order_hash().empty()) {
    _this->_internal_set_order_hash(from._internal_order_hash());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_results()->::injective::exchange::v1beta1::DerivativeMarketOrderResults::MergeFrom(
        from._internal_results());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MsgCreateDerivativeMarketOrderResponse::CopyFrom(const MsgCreateDerivativeMarketOrderResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.MsgCreateDerivativeMarketOrderResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCreateDerivativeMarketOrderResponse::IsInitialized() const {
  return true;
}

void MsgCreateDerivativeMarketOrderResponse::InternalSwap(MsgCreateDerivativeMarketOrderResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.order_hash_, lhs_arena,
                                       &other->_impl_.order_hash_, rhs_arena);
  swap(_impl_.results_, other->_impl_.results_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgCreateDerivativeMarketOrderResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2ftx_2eproto[36]);
}
// ===================================================================

class DerivativeMarketOrderResults::_Internal {
 public:
  using HasBits = decltype(std::declval<DerivativeMarketOrderResults>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(DerivativeMarketOrderResults, _impl_._has_bits_);
  static const ::injective::exchange::v1beta1::PositionDelta& position_delta(const DerivativeMarketOrderResults* msg);
  static void set_has_position_delta(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::injective::exchange::v1beta1::PositionDelta&
DerivativeMarketOrderResults::_Internal::position_delta(const DerivativeMarketOrderResults* msg) {
  return *msg->_impl_.position_delta_;
}
void DerivativeMarketOrderResults::clear_position_delta() {
  if (_impl_.position_delta_ != nullptr) _impl_.position_delta_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
DerivativeMarketOrderResults::DerivativeMarketOrderResults(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.DerivativeMarketOrderResults)
}
DerivativeMarketOrderResults::DerivativeMarketOrderResults(const DerivativeMarketOrderResults& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DerivativeMarketOrderResults* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.quantity_) {}

    , decltype(_impl_.price_) {}

    , decltype(_impl_.fee_) {}

    , decltype(_impl_.payout_) {}

    , decltype(_impl_.position_delta_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.quantity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.quantity_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_quantity().empty()) {
    _this->_impl_.quantity_.Set(from._internal_quantity(), _this->GetArenaForAllocation());
  }
  _impl_.price_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.price_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_price().empty()) {
    _this->_impl_.price_.Set(from._internal_price(), _this->GetArenaForAllocation());
  }
  _impl_.fee_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.fee_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_fee().empty()) {
    _this->_impl_.fee_.Set(from._internal_fee(), _this->GetArenaForAllocation());
  }
  _impl_.payout_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.payout_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_payout().empty()) {
    _this->_impl_.payout_.Set(from._internal_payout(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.position_delta_ = new ::injective::exchange::v1beta1::PositionDelta(*from._impl_.position_delta_);
  }
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.DerivativeMarketOrderResults)
}

inline void DerivativeMarketOrderResults::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.quantity_) {}

    , decltype(_impl_.price_) {}

    , decltype(_impl_.fee_) {}

    , decltype(_impl_.payout_) {}

    , decltype(_impl_.position_delta_){nullptr}
  };
  _impl_.quantity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.quantity_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.price_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.price_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.fee_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.fee_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.payout_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.payout_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DerivativeMarketOrderResults::~DerivativeMarketOrderResults() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.DerivativeMarketOrderResults)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DerivativeMarketOrderResults::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.quantity_.Destroy();
  _impl_.price_.Destroy();
  _impl_.fee_.Destroy();
  _impl_.payout_.Destroy();
  if (this != internal_default_instance()) delete _impl_.position_delta_;
}

void DerivativeMarketOrderResults::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DerivativeMarketOrderResults::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.DerivativeMarketOrderResults)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.quantity_.ClearToEmpty();
  _impl_.price_.ClearToEmpty();
  _impl_.fee_.ClearToEmpty();
  _impl_.payout_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.position_delta_ != nullptr);
    _impl_.position_delta_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DerivativeMarketOrderResults::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string quantity = 1 [json_name = "quantity", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_quantity();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.DerivativeMarketOrderResults.quantity"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string price = 2 [json_name = "price", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_price();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.DerivativeMarketOrderResults.price"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string fee = 3 [json_name = "fee", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_fee();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.DerivativeMarketOrderResults.fee"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .injective.exchange.v1beta1.PositionDelta position_delta = 4 [json_name = "positionDelta", (.gogoproto.nullable) = false];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_position_delta(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string payout = 5 [json_name = "payout", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_payout();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.DerivativeMarketOrderResults.payout"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* DerivativeMarketOrderResults::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.DerivativeMarketOrderResults)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string quantity = 1 [json_name = "quantity", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_quantity().empty()) {
    const std::string& _s = this->_internal_quantity();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.DerivativeMarketOrderResults.quantity");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string price = 2 [json_name = "price", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_price().empty()) {
    const std::string& _s = this->_internal_price();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.DerivativeMarketOrderResults.price");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string fee = 3 [json_name = "fee", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_fee().empty()) {
    const std::string& _s = this->_internal_fee();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.DerivativeMarketOrderResults.fee");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .injective.exchange.v1beta1.PositionDelta position_delta = 4 [json_name = "positionDelta", (.gogoproto.nullable) = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::position_delta(this),
        _Internal::position_delta(this).GetCachedSize(), target, stream);
  }

  // string payout = 5 [json_name = "payout", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_payout().empty()) {
    const std::string& _s = this->_internal_payout();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.DerivativeMarketOrderResults.payout");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.DerivativeMarketOrderResults)
  return target;
}

::size_t DerivativeMarketOrderResults::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.DerivativeMarketOrderResults)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string quantity = 1 [json_name = "quantity", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_quantity().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_quantity());
  }

  // string price = 2 [json_name = "price", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_price().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_price());
  }

  // string fee = 3 [json_name = "fee", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_fee().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_fee());
  }

  // string payout = 5 [json_name = "payout", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_payout().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_payout());
  }

  // .injective.exchange.v1beta1.PositionDelta position_delta = 4 [json_name = "positionDelta", (.gogoproto.nullable) = false];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.position_delta_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DerivativeMarketOrderResults::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DerivativeMarketOrderResults::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DerivativeMarketOrderResults::GetClassData() const { return &_class_data_; }


void DerivativeMarketOrderResults::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DerivativeMarketOrderResults*>(&to_msg);
  auto& from = static_cast<const DerivativeMarketOrderResults&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.DerivativeMarketOrderResults)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_quantity().empty()) {
    _this->_internal_set_quantity(from._internal_quantity());
  }
  if (!from._internal_price().empty()) {
    _this->_internal_set_price(from._internal_price());
  }
  if (!from._internal_fee().empty()) {
    _this->_internal_set_fee(from._internal_fee());
  }
  if (!from._internal_payout().empty()) {
    _this->_internal_set_payout(from._internal_payout());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_position_delta()->::injective::exchange::v1beta1::PositionDelta::MergeFrom(
        from._internal_position_delta());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DerivativeMarketOrderResults::CopyFrom(const DerivativeMarketOrderResults& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.DerivativeMarketOrderResults)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DerivativeMarketOrderResults::IsInitialized() const {
  return true;
}

void DerivativeMarketOrderResults::InternalSwap(DerivativeMarketOrderResults* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.quantity_, lhs_arena,
                                       &other->_impl_.quantity_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.price_, lhs_arena,
                                       &other->_impl_.price_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.fee_, lhs_arena,
                                       &other->_impl_.fee_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.payout_, lhs_arena,
                                       &other->_impl_.payout_, rhs_arena);
  swap(_impl_.position_delta_, other->_impl_.position_delta_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DerivativeMarketOrderResults::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2ftx_2eproto[37]);
}
// ===================================================================

class MsgCreateBinaryOptionsMarketOrder::_Internal {
 public:
  using HasBits = decltype(std::declval<MsgCreateBinaryOptionsMarketOrder>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(MsgCreateBinaryOptionsMarketOrder, _impl_._has_bits_);
  static const ::injective::exchange::v1beta1::DerivativeOrder& order(const MsgCreateBinaryOptionsMarketOrder* msg);
  static void set_has_order(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::injective::exchange::v1beta1::DerivativeOrder&
MsgCreateBinaryOptionsMarketOrder::_Internal::order(const MsgCreateBinaryOptionsMarketOrder* msg) {
  return *msg->_impl_.order_;
}
void MsgCreateBinaryOptionsMarketOrder::clear_order() {
  if (_impl_.order_ != nullptr) _impl_.order_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
MsgCreateBinaryOptionsMarketOrder::MsgCreateBinaryOptionsMarketOrder(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.MsgCreateBinaryOptionsMarketOrder)
}
MsgCreateBinaryOptionsMarketOrder::MsgCreateBinaryOptionsMarketOrder(const MsgCreateBinaryOptionsMarketOrder& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MsgCreateBinaryOptionsMarketOrder* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sender_) {}

    , decltype(_impl_.order_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.sender_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.sender_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sender().empty()) {
    _this->_impl_.sender_.Set(from._internal_sender(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.order_ = new ::injective::exchange::v1beta1::DerivativeOrder(*from._impl_.order_);
  }
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.MsgCreateBinaryOptionsMarketOrder)
}

inline void MsgCreateBinaryOptionsMarketOrder::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sender_) {}

    , decltype(_impl_.order_){nullptr}
  };
  _impl_.sender_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.sender_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MsgCreateBinaryOptionsMarketOrder::~MsgCreateBinaryOptionsMarketOrder() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.MsgCreateBinaryOptionsMarketOrder)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MsgCreateBinaryOptionsMarketOrder::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sender_.Destroy();
  if (this != internal_default_instance()) delete _impl_.order_;
}

void MsgCreateBinaryOptionsMarketOrder::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MsgCreateBinaryOptionsMarketOrder::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.MsgCreateBinaryOptionsMarketOrder)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sender_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.order_ != nullptr);
    _impl_.order_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgCreateBinaryOptionsMarketOrder::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string sender = 1 [json_name = "sender"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sender();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.MsgCreateBinaryOptionsMarketOrder.sender"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .injective.exchange.v1beta1.DerivativeOrder order = 2 [json_name = "order", (.gogoproto.nullable) = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_order(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MsgCreateBinaryOptionsMarketOrder::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.MsgCreateBinaryOptionsMarketOrder)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string sender = 1 [json_name = "sender"];
  if (!this->_internal_sender().empty()) {
    const std::string& _s = this->_internal_sender();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.MsgCreateBinaryOptionsMarketOrder.sender");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .injective.exchange.v1beta1.DerivativeOrder order = 2 [json_name = "order", (.gogoproto.nullable) = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::order(this),
        _Internal::order(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.MsgCreateBinaryOptionsMarketOrder)
  return target;
}

::size_t MsgCreateBinaryOptionsMarketOrder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.MsgCreateBinaryOptionsMarketOrder)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sender = 1 [json_name = "sender"];
  if (!this->_internal_sender().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_sender());
  }

  // .injective.exchange.v1beta1.DerivativeOrder order = 2 [json_name = "order", (.gogoproto.nullable) = false];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.order_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgCreateBinaryOptionsMarketOrder::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MsgCreateBinaryOptionsMarketOrder::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgCreateBinaryOptionsMarketOrder::GetClassData() const { return &_class_data_; }


void MsgCreateBinaryOptionsMarketOrder::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MsgCreateBinaryOptionsMarketOrder*>(&to_msg);
  auto& from = static_cast<const MsgCreateBinaryOptionsMarketOrder&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.MsgCreateBinaryOptionsMarketOrder)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_sender().empty()) {
    _this->_internal_set_sender(from._internal_sender());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_order()->::injective::exchange::v1beta1::DerivativeOrder::MergeFrom(
        from._internal_order());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MsgCreateBinaryOptionsMarketOrder::CopyFrom(const MsgCreateBinaryOptionsMarketOrder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.MsgCreateBinaryOptionsMarketOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCreateBinaryOptionsMarketOrder::IsInitialized() const {
  return true;
}

void MsgCreateBinaryOptionsMarketOrder::InternalSwap(MsgCreateBinaryOptionsMarketOrder* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.sender_, lhs_arena,
                                       &other->_impl_.sender_, rhs_arena);
  swap(_impl_.order_, other->_impl_.order_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgCreateBinaryOptionsMarketOrder::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2ftx_2eproto[38]);
}
// ===================================================================

class MsgCreateBinaryOptionsMarketOrderResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<MsgCreateBinaryOptionsMarketOrderResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(MsgCreateBinaryOptionsMarketOrderResponse, _impl_._has_bits_);
  static const ::injective::exchange::v1beta1::DerivativeMarketOrderResults& results(const MsgCreateBinaryOptionsMarketOrderResponse* msg);
  static void set_has_results(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::injective::exchange::v1beta1::DerivativeMarketOrderResults&
MsgCreateBinaryOptionsMarketOrderResponse::_Internal::results(const MsgCreateBinaryOptionsMarketOrderResponse* msg) {
  return *msg->_impl_.results_;
}
MsgCreateBinaryOptionsMarketOrderResponse::MsgCreateBinaryOptionsMarketOrderResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.MsgCreateBinaryOptionsMarketOrderResponse)
}
MsgCreateBinaryOptionsMarketOrderResponse::MsgCreateBinaryOptionsMarketOrderResponse(const MsgCreateBinaryOptionsMarketOrderResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MsgCreateBinaryOptionsMarketOrderResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.order_hash_) {}

    , decltype(_impl_.results_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.order_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.order_hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_order_hash().empty()) {
    _this->_impl_.order_hash_.Set(from._internal_order_hash(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.results_ = new ::injective::exchange::v1beta1::DerivativeMarketOrderResults(*from._impl_.results_);
  }
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.MsgCreateBinaryOptionsMarketOrderResponse)
}

inline void MsgCreateBinaryOptionsMarketOrderResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.order_hash_) {}

    , decltype(_impl_.results_){nullptr}
  };
  _impl_.order_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.order_hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MsgCreateBinaryOptionsMarketOrderResponse::~MsgCreateBinaryOptionsMarketOrderResponse() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.MsgCreateBinaryOptionsMarketOrderResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MsgCreateBinaryOptionsMarketOrderResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.order_hash_.Destroy();
  if (this != internal_default_instance()) delete _impl_.results_;
}

void MsgCreateBinaryOptionsMarketOrderResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MsgCreateBinaryOptionsMarketOrderResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.MsgCreateBinaryOptionsMarketOrderResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.order_hash_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.results_ != nullptr);
    _impl_.results_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgCreateBinaryOptionsMarketOrderResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string order_hash = 1 [json_name = "orderHash"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_order_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.MsgCreateBinaryOptionsMarketOrderResponse.order_hash"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .injective.exchange.v1beta1.DerivativeMarketOrderResults results = 2 [json_name = "results", (.gogoproto.nullable) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_results(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MsgCreateBinaryOptionsMarketOrderResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.MsgCreateBinaryOptionsMarketOrderResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string order_hash = 1 [json_name = "orderHash"];
  if (!this->_internal_order_hash().empty()) {
    const std::string& _s = this->_internal_order_hash();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.MsgCreateBinaryOptionsMarketOrderResponse.order_hash");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .injective.exchange.v1beta1.DerivativeMarketOrderResults results = 2 [json_name = "results", (.gogoproto.nullable) = true];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::results(this),
        _Internal::results(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.MsgCreateBinaryOptionsMarketOrderResponse)
  return target;
}

::size_t MsgCreateBinaryOptionsMarketOrderResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.MsgCreateBinaryOptionsMarketOrderResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string order_hash = 1 [json_name = "orderHash"];
  if (!this->_internal_order_hash().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_order_hash());
  }

  // .injective.exchange.v1beta1.DerivativeMarketOrderResults results = 2 [json_name = "results", (.gogoproto.nullable) = true];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.results_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgCreateBinaryOptionsMarketOrderResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MsgCreateBinaryOptionsMarketOrderResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgCreateBinaryOptionsMarketOrderResponse::GetClassData() const { return &_class_data_; }


void MsgCreateBinaryOptionsMarketOrderResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MsgCreateBinaryOptionsMarketOrderResponse*>(&to_msg);
  auto& from = static_cast<const MsgCreateBinaryOptionsMarketOrderResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.MsgCreateBinaryOptionsMarketOrderResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_order_hash().empty()) {
    _this->_internal_set_order_hash(from._internal_order_hash());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_results()->::injective::exchange::v1beta1::DerivativeMarketOrderResults::MergeFrom(
        from._internal_results());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MsgCreateBinaryOptionsMarketOrderResponse::CopyFrom(const MsgCreateBinaryOptionsMarketOrderResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.MsgCreateBinaryOptionsMarketOrderResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCreateBinaryOptionsMarketOrderResponse::IsInitialized() const {
  return true;
}

void MsgCreateBinaryOptionsMarketOrderResponse::InternalSwap(MsgCreateBinaryOptionsMarketOrderResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.order_hash_, lhs_arena,
                                       &other->_impl_.order_hash_, rhs_arena);
  swap(_impl_.results_, other->_impl_.results_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgCreateBinaryOptionsMarketOrderResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2ftx_2eproto[39]);
}
// ===================================================================

class MsgCancelDerivativeOrder::_Internal {
 public:
};

MsgCancelDerivativeOrder::MsgCancelDerivativeOrder(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.MsgCancelDerivativeOrder)
}
MsgCancelDerivativeOrder::MsgCancelDerivativeOrder(const MsgCancelDerivativeOrder& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MsgCancelDerivativeOrder* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.sender_) {}

    , decltype(_impl_.market_id_) {}

    , decltype(_impl_.subaccount_id_) {}

    , decltype(_impl_.order_hash_) {}

    , decltype(_impl_.order_mask_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.sender_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.sender_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sender().empty()) {
    _this->_impl_.sender_.Set(from._internal_sender(), _this->GetArenaForAllocation());
  }
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_market_id().empty()) {
    _this->_impl_.market_id_.Set(from._internal_market_id(), _this->GetArenaForAllocation());
  }
  _impl_.subaccount_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.subaccount_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_subaccount_id().empty()) {
    _this->_impl_.subaccount_id_.Set(from._internal_subaccount_id(), _this->GetArenaForAllocation());
  }
  _impl_.order_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.order_hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_order_hash().empty()) {
    _this->_impl_.order_hash_.Set(from._internal_order_hash(), _this->GetArenaForAllocation());
  }
  _this->_impl_.order_mask_ = from._impl_.order_mask_;
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.MsgCancelDerivativeOrder)
}

inline void MsgCancelDerivativeOrder::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.sender_) {}

    , decltype(_impl_.market_id_) {}

    , decltype(_impl_.subaccount_id_) {}

    , decltype(_impl_.order_hash_) {}

    , decltype(_impl_.order_mask_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.sender_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.sender_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.subaccount_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.subaccount_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.order_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.order_hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MsgCancelDerivativeOrder::~MsgCancelDerivativeOrder() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.MsgCancelDerivativeOrder)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MsgCancelDerivativeOrder::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sender_.Destroy();
  _impl_.market_id_.Destroy();
  _impl_.subaccount_id_.Destroy();
  _impl_.order_hash_.Destroy();
}

void MsgCancelDerivativeOrder::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MsgCancelDerivativeOrder::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.MsgCancelDerivativeOrder)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sender_.ClearToEmpty();
  _impl_.market_id_.ClearToEmpty();
  _impl_.subaccount_id_.ClearToEmpty();
  _impl_.order_hash_.ClearToEmpty();
  _impl_.order_mask_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgCancelDerivativeOrder::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string sender = 1 [json_name = "sender"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sender();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.MsgCancelDerivativeOrder.sender"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string market_id = 2 [json_name = "marketId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_market_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.MsgCancelDerivativeOrder.market_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string subaccount_id = 3 [json_name = "subaccountId"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_subaccount_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.MsgCancelDerivativeOrder.subaccount_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string order_hash = 4 [json_name = "orderHash"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_order_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.MsgCancelDerivativeOrder.order_hash"));
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 order_mask = 5 [json_name = "orderMask"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _impl_.order_mask_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MsgCancelDerivativeOrder::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.MsgCancelDerivativeOrder)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string sender = 1 [json_name = "sender"];
  if (!this->_internal_sender().empty()) {
    const std::string& _s = this->_internal_sender();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.MsgCancelDerivativeOrder.sender");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string market_id = 2 [json_name = "marketId"];
  if (!this->_internal_market_id().empty()) {
    const std::string& _s = this->_internal_market_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.MsgCancelDerivativeOrder.market_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string subaccount_id = 3 [json_name = "subaccountId"];
  if (!this->_internal_subaccount_id().empty()) {
    const std::string& _s = this->_internal_subaccount_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.MsgCancelDerivativeOrder.subaccount_id");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string order_hash = 4 [json_name = "orderHash"];
  if (!this->_internal_order_hash().empty()) {
    const std::string& _s = this->_internal_order_hash();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.MsgCancelDerivativeOrder.order_hash");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // int32 order_mask = 5 [json_name = "orderMask"];
  if (this->_internal_order_mask() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        5, this->_internal_order_mask(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.MsgCancelDerivativeOrder)
  return target;
}

::size_t MsgCancelDerivativeOrder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.MsgCancelDerivativeOrder)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sender = 1 [json_name = "sender"];
  if (!this->_internal_sender().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_sender());
  }

  // string market_id = 2 [json_name = "marketId"];
  if (!this->_internal_market_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_market_id());
  }

  // string subaccount_id = 3 [json_name = "subaccountId"];
  if (!this->_internal_subaccount_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_subaccount_id());
  }

  // string order_hash = 4 [json_name = "orderHash"];
  if (!this->_internal_order_hash().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_order_hash());
  }

  // int32 order_mask = 5 [json_name = "orderMask"];
  if (this->_internal_order_mask() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_order_mask());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgCancelDerivativeOrder::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MsgCancelDerivativeOrder::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgCancelDerivativeOrder::GetClassData() const { return &_class_data_; }


void MsgCancelDerivativeOrder::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MsgCancelDerivativeOrder*>(&to_msg);
  auto& from = static_cast<const MsgCancelDerivativeOrder&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.MsgCancelDerivativeOrder)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_sender().empty()) {
    _this->_internal_set_sender(from._internal_sender());
  }
  if (!from._internal_market_id().empty()) {
    _this->_internal_set_market_id(from._internal_market_id());
  }
  if (!from._internal_subaccount_id().empty()) {
    _this->_internal_set_subaccount_id(from._internal_subaccount_id());
  }
  if (!from._internal_order_hash().empty()) {
    _this->_internal_set_order_hash(from._internal_order_hash());
  }
  if (from._internal_order_mask() != 0) {
    _this->_internal_set_order_mask(from._internal_order_mask());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MsgCancelDerivativeOrder::CopyFrom(const MsgCancelDerivativeOrder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.MsgCancelDerivativeOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCancelDerivativeOrder::IsInitialized() const {
  return true;
}

void MsgCancelDerivativeOrder::InternalSwap(MsgCancelDerivativeOrder* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.sender_, lhs_arena,
                                       &other->_impl_.sender_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.market_id_, lhs_arena,
                                       &other->_impl_.market_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.subaccount_id_, lhs_arena,
                                       &other->_impl_.subaccount_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.order_hash_, lhs_arena,
                                       &other->_impl_.order_hash_, rhs_arena);

  swap(_impl_.order_mask_, other->_impl_.order_mask_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgCancelDerivativeOrder::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2ftx_2eproto[40]);
}
// ===================================================================

class MsgCancelDerivativeOrderResponse::_Internal {
 public:
};

MsgCancelDerivativeOrderResponse::MsgCancelDerivativeOrderResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.MsgCancelDerivativeOrderResponse)
}
MsgCancelDerivativeOrderResponse::MsgCancelDerivativeOrderResponse(const MsgCancelDerivativeOrderResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  MsgCancelDerivativeOrderResponse* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.MsgCancelDerivativeOrderResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgCancelDerivativeOrderResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgCancelDerivativeOrderResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata MsgCancelDerivativeOrderResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2ftx_2eproto[41]);
}
// ===================================================================

class MsgCancelBinaryOptionsOrder::_Internal {
 public:
};

MsgCancelBinaryOptionsOrder::MsgCancelBinaryOptionsOrder(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.MsgCancelBinaryOptionsOrder)
}
MsgCancelBinaryOptionsOrder::MsgCancelBinaryOptionsOrder(const MsgCancelBinaryOptionsOrder& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MsgCancelBinaryOptionsOrder* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.sender_) {}

    , decltype(_impl_.market_id_) {}

    , decltype(_impl_.subaccount_id_) {}

    , decltype(_impl_.order_hash_) {}

    , decltype(_impl_.order_mask_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.sender_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.sender_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sender().empty()) {
    _this->_impl_.sender_.Set(from._internal_sender(), _this->GetArenaForAllocation());
  }
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_market_id().empty()) {
    _this->_impl_.market_id_.Set(from._internal_market_id(), _this->GetArenaForAllocation());
  }
  _impl_.subaccount_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.subaccount_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_subaccount_id().empty()) {
    _this->_impl_.subaccount_id_.Set(from._internal_subaccount_id(), _this->GetArenaForAllocation());
  }
  _impl_.order_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.order_hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_order_hash().empty()) {
    _this->_impl_.order_hash_.Set(from._internal_order_hash(), _this->GetArenaForAllocation());
  }
  _this->_impl_.order_mask_ = from._impl_.order_mask_;
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.MsgCancelBinaryOptionsOrder)
}

inline void MsgCancelBinaryOptionsOrder::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.sender_) {}

    , decltype(_impl_.market_id_) {}

    , decltype(_impl_.subaccount_id_) {}

    , decltype(_impl_.order_hash_) {}

    , decltype(_impl_.order_mask_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.sender_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.sender_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.subaccount_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.subaccount_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.order_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.order_hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MsgCancelBinaryOptionsOrder::~MsgCancelBinaryOptionsOrder() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.MsgCancelBinaryOptionsOrder)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MsgCancelBinaryOptionsOrder::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sender_.Destroy();
  _impl_.market_id_.Destroy();
  _impl_.subaccount_id_.Destroy();
  _impl_.order_hash_.Destroy();
}

void MsgCancelBinaryOptionsOrder::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MsgCancelBinaryOptionsOrder::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.MsgCancelBinaryOptionsOrder)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sender_.ClearToEmpty();
  _impl_.market_id_.ClearToEmpty();
  _impl_.subaccount_id_.ClearToEmpty();
  _impl_.order_hash_.ClearToEmpty();
  _impl_.order_mask_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgCancelBinaryOptionsOrder::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string sender = 1 [json_name = "sender"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sender();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.MsgCancelBinaryOptionsOrder.sender"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string market_id = 2 [json_name = "marketId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_market_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.MsgCancelBinaryOptionsOrder.market_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string subaccount_id = 3 [json_name = "subaccountId"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_subaccount_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.MsgCancelBinaryOptionsOrder.subaccount_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string order_hash = 4 [json_name = "orderHash"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_order_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.MsgCancelBinaryOptionsOrder.order_hash"));
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 order_mask = 5 [json_name = "orderMask"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _impl_.order_mask_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MsgCancelBinaryOptionsOrder::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.MsgCancelBinaryOptionsOrder)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string sender = 1 [json_name = "sender"];
  if (!this->_internal_sender().empty()) {
    const std::string& _s = this->_internal_sender();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.MsgCancelBinaryOptionsOrder.sender");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string market_id = 2 [json_name = "marketId"];
  if (!this->_internal_market_id().empty()) {
    const std::string& _s = this->_internal_market_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.MsgCancelBinaryOptionsOrder.market_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string subaccount_id = 3 [json_name = "subaccountId"];
  if (!this->_internal_subaccount_id().empty()) {
    const std::string& _s = this->_internal_subaccount_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.MsgCancelBinaryOptionsOrder.subaccount_id");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string order_hash = 4 [json_name = "orderHash"];
  if (!this->_internal_order_hash().empty()) {
    const std::string& _s = this->_internal_order_hash();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.MsgCancelBinaryOptionsOrder.order_hash");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // int32 order_mask = 5 [json_name = "orderMask"];
  if (this->_internal_order_mask() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        5, this->_internal_order_mask(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.MsgCancelBinaryOptionsOrder)
  return target;
}

::size_t MsgCancelBinaryOptionsOrder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.MsgCancelBinaryOptionsOrder)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sender = 1 [json_name = "sender"];
  if (!this->_internal_sender().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_sender());
  }

  // string market_id = 2 [json_name = "marketId"];
  if (!this->_internal_market_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_market_id());
  }

  // string subaccount_id = 3 [json_name = "subaccountId"];
  if (!this->_internal_subaccount_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_subaccount_id());
  }

  // string order_hash = 4 [json_name = "orderHash"];
  if (!this->_internal_order_hash().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_order_hash());
  }

  // int32 order_mask = 5 [json_name = "orderMask"];
  if (this->_internal_order_mask() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_order_mask());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgCancelBinaryOptionsOrder::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MsgCancelBinaryOptionsOrder::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgCancelBinaryOptionsOrder::GetClassData() const { return &_class_data_; }


void MsgCancelBinaryOptionsOrder::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MsgCancelBinaryOptionsOrder*>(&to_msg);
  auto& from = static_cast<const MsgCancelBinaryOptionsOrder&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.MsgCancelBinaryOptionsOrder)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_sender().empty()) {
    _this->_internal_set_sender(from._internal_sender());
  }
  if (!from._internal_market_id().empty()) {
    _this->_internal_set_market_id(from._internal_market_id());
  }
  if (!from._internal_subaccount_id().empty()) {
    _this->_internal_set_subaccount_id(from._internal_subaccount_id());
  }
  if (!from._internal_order_hash().empty()) {
    _this->_internal_set_order_hash(from._internal_order_hash());
  }
  if (from._internal_order_mask() != 0) {
    _this->_internal_set_order_mask(from._internal_order_mask());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MsgCancelBinaryOptionsOrder::CopyFrom(const MsgCancelBinaryOptionsOrder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.MsgCancelBinaryOptionsOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCancelBinaryOptionsOrder::IsInitialized() const {
  return true;
}

void MsgCancelBinaryOptionsOrder::InternalSwap(MsgCancelBinaryOptionsOrder* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.sender_, lhs_arena,
                                       &other->_impl_.sender_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.market_id_, lhs_arena,
                                       &other->_impl_.market_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.subaccount_id_, lhs_arena,
                                       &other->_impl_.subaccount_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.order_hash_, lhs_arena,
                                       &other->_impl_.order_hash_, rhs_arena);

  swap(_impl_.order_mask_, other->_impl_.order_mask_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgCancelBinaryOptionsOrder::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2ftx_2eproto[42]);
}
// ===================================================================

class MsgCancelBinaryOptionsOrderResponse::_Internal {
 public:
};

MsgCancelBinaryOptionsOrderResponse::MsgCancelBinaryOptionsOrderResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.MsgCancelBinaryOptionsOrderResponse)
}
MsgCancelBinaryOptionsOrderResponse::MsgCancelBinaryOptionsOrderResponse(const MsgCancelBinaryOptionsOrderResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  MsgCancelBinaryOptionsOrderResponse* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.MsgCancelBinaryOptionsOrderResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgCancelBinaryOptionsOrderResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgCancelBinaryOptionsOrderResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata MsgCancelBinaryOptionsOrderResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2ftx_2eproto[43]);
}
// ===================================================================

class OrderData::_Internal {
 public:
};

OrderData::OrderData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.OrderData)
}
OrderData::OrderData(const OrderData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OrderData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.market_id_) {}

    , decltype(_impl_.subaccount_id_) {}

    , decltype(_impl_.order_hash_) {}

    , decltype(_impl_.order_mask_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_market_id().empty()) {
    _this->_impl_.market_id_.Set(from._internal_market_id(), _this->GetArenaForAllocation());
  }
  _impl_.subaccount_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.subaccount_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_subaccount_id().empty()) {
    _this->_impl_.subaccount_id_.Set(from._internal_subaccount_id(), _this->GetArenaForAllocation());
  }
  _impl_.order_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.order_hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_order_hash().empty()) {
    _this->_impl_.order_hash_.Set(from._internal_order_hash(), _this->GetArenaForAllocation());
  }
  _this->_impl_.order_mask_ = from._impl_.order_mask_;
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.OrderData)
}

inline void OrderData::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.market_id_) {}

    , decltype(_impl_.subaccount_id_) {}

    , decltype(_impl_.order_hash_) {}

    , decltype(_impl_.order_mask_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.subaccount_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.subaccount_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.order_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.order_hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

OrderData::~OrderData() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.OrderData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OrderData::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.market_id_.Destroy();
  _impl_.subaccount_id_.Destroy();
  _impl_.order_hash_.Destroy();
}

void OrderData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OrderData::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.OrderData)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.market_id_.ClearToEmpty();
  _impl_.subaccount_id_.ClearToEmpty();
  _impl_.order_hash_.ClearToEmpty();
  _impl_.order_mask_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OrderData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string market_id = 1 [json_name = "marketId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_market_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.OrderData.market_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string subaccount_id = 2 [json_name = "subaccountId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_subaccount_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.OrderData.subaccount_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string order_hash = 3 [json_name = "orderHash"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_order_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.OrderData.order_hash"));
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 order_mask = 4 [json_name = "orderMask"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _impl_.order_mask_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* OrderData::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.OrderData)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string market_id = 1 [json_name = "marketId"];
  if (!this->_internal_market_id().empty()) {
    const std::string& _s = this->_internal_market_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.OrderData.market_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string subaccount_id = 2 [json_name = "subaccountId"];
  if (!this->_internal_subaccount_id().empty()) {
    const std::string& _s = this->_internal_subaccount_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.OrderData.subaccount_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string order_hash = 3 [json_name = "orderHash"];
  if (!this->_internal_order_hash().empty()) {
    const std::string& _s = this->_internal_order_hash();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.OrderData.order_hash");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // int32 order_mask = 4 [json_name = "orderMask"];
  if (this->_internal_order_mask() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        4, this->_internal_order_mask(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.OrderData)
  return target;
}

::size_t OrderData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.OrderData)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string market_id = 1 [json_name = "marketId"];
  if (!this->_internal_market_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_market_id());
  }

  // string subaccount_id = 2 [json_name = "subaccountId"];
  if (!this->_internal_subaccount_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_subaccount_id());
  }

  // string order_hash = 3 [json_name = "orderHash"];
  if (!this->_internal_order_hash().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_order_hash());
  }

  // int32 order_mask = 4 [json_name = "orderMask"];
  if (this->_internal_order_mask() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_order_mask());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OrderData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OrderData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OrderData::GetClassData() const { return &_class_data_; }


void OrderData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OrderData*>(&to_msg);
  auto& from = static_cast<const OrderData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.OrderData)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_market_id().empty()) {
    _this->_internal_set_market_id(from._internal_market_id());
  }
  if (!from._internal_subaccount_id().empty()) {
    _this->_internal_set_subaccount_id(from._internal_subaccount_id());
  }
  if (!from._internal_order_hash().empty()) {
    _this->_internal_set_order_hash(from._internal_order_hash());
  }
  if (from._internal_order_mask() != 0) {
    _this->_internal_set_order_mask(from._internal_order_mask());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OrderData::CopyFrom(const OrderData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.OrderData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderData::IsInitialized() const {
  return true;
}

void OrderData::InternalSwap(OrderData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.market_id_, lhs_arena,
                                       &other->_impl_.market_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.subaccount_id_, lhs_arena,
                                       &other->_impl_.subaccount_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.order_hash_, lhs_arena,
                                       &other->_impl_.order_hash_, rhs_arena);

  swap(_impl_.order_mask_, other->_impl_.order_mask_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OrderData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2ftx_2eproto[44]);
}
// ===================================================================

class MsgBatchCancelDerivativeOrders::_Internal {
 public:
};

MsgBatchCancelDerivativeOrders::MsgBatchCancelDerivativeOrders(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.MsgBatchCancelDerivativeOrders)
}
MsgBatchCancelDerivativeOrders::MsgBatchCancelDerivativeOrders(const MsgBatchCancelDerivativeOrders& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MsgBatchCancelDerivativeOrders* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){from._impl_.data_}
    , decltype(_impl_.sender_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.sender_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.sender_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sender().empty()) {
    _this->_impl_.sender_.Set(from._internal_sender(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.MsgBatchCancelDerivativeOrders)
}

inline void MsgBatchCancelDerivativeOrders::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){arena}
    , decltype(_impl_.sender_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.sender_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.sender_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MsgBatchCancelDerivativeOrders::~MsgBatchCancelDerivativeOrders() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.MsgBatchCancelDerivativeOrders)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MsgBatchCancelDerivativeOrders::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_data()->~RepeatedPtrField();
  _impl_.sender_.Destroy();
}

void MsgBatchCancelDerivativeOrders::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MsgBatchCancelDerivativeOrders::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.MsgBatchCancelDerivativeOrders)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_data()->Clear();
  _impl_.sender_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgBatchCancelDerivativeOrders::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string sender = 1 [json_name = "sender"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sender();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.MsgBatchCancelDerivativeOrders.sender"));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .injective.exchange.v1beta1.OrderData data = 2 [json_name = "data", (.gogoproto.nullable) = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MsgBatchCancelDerivativeOrders::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.MsgBatchCancelDerivativeOrders)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string sender = 1 [json_name = "sender"];
  if (!this->_internal_sender().empty()) {
    const std::string& _s = this->_internal_sender();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.MsgBatchCancelDerivativeOrders.sender");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // repeated .injective.exchange.v1beta1.OrderData data = 2 [json_name = "data", (.gogoproto.nullable) = false];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_data_size()); i < n; i++) {
    const auto& repfield = this->_internal_data(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.MsgBatchCancelDerivativeOrders)
  return target;
}

::size_t MsgBatchCancelDerivativeOrders::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.MsgBatchCancelDerivativeOrders)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .injective.exchange.v1beta1.OrderData data = 2 [json_name = "data", (.gogoproto.nullable) = false];
  total_size += 1UL * this->_internal_data_size();
  for (const auto& msg : this->_internal_data()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string sender = 1 [json_name = "sender"];
  if (!this->_internal_sender().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_sender());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgBatchCancelDerivativeOrders::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MsgBatchCancelDerivativeOrders::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgBatchCancelDerivativeOrders::GetClassData() const { return &_class_data_; }


void MsgBatchCancelDerivativeOrders::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MsgBatchCancelDerivativeOrders*>(&to_msg);
  auto& from = static_cast<const MsgBatchCancelDerivativeOrders&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.MsgBatchCancelDerivativeOrders)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_data()->MergeFrom(from._internal_data());
  if (!from._internal_sender().empty()) {
    _this->_internal_set_sender(from._internal_sender());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MsgBatchCancelDerivativeOrders::CopyFrom(const MsgBatchCancelDerivativeOrders& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.MsgBatchCancelDerivativeOrders)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgBatchCancelDerivativeOrders::IsInitialized() const {
  return true;
}

void MsgBatchCancelDerivativeOrders::InternalSwap(MsgBatchCancelDerivativeOrders* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_data()->InternalSwap(other->_internal_mutable_data());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.sender_, lhs_arena,
                                       &other->_impl_.sender_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgBatchCancelDerivativeOrders::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2ftx_2eproto[45]);
}
// ===================================================================

class MsgBatchCancelDerivativeOrdersResponse::_Internal {
 public:
};

MsgBatchCancelDerivativeOrdersResponse::MsgBatchCancelDerivativeOrdersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.MsgBatchCancelDerivativeOrdersResponse)
}
MsgBatchCancelDerivativeOrdersResponse::MsgBatchCancelDerivativeOrdersResponse(const MsgBatchCancelDerivativeOrdersResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MsgBatchCancelDerivativeOrdersResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.success_) { from._impl_.success_ }

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.MsgBatchCancelDerivativeOrdersResponse)
}

inline void MsgBatchCancelDerivativeOrdersResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.success_) { arena }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MsgBatchCancelDerivativeOrdersResponse::~MsgBatchCancelDerivativeOrdersResponse() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.MsgBatchCancelDerivativeOrdersResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MsgBatchCancelDerivativeOrdersResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.success_.~RepeatedField();
}

void MsgBatchCancelDerivativeOrdersResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MsgBatchCancelDerivativeOrdersResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.MsgBatchCancelDerivativeOrdersResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_success()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgBatchCancelDerivativeOrdersResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated bool success = 1 [json_name = "success"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_success(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::uint8_t>(tag) == 8) {
          _internal_add_success(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MsgBatchCancelDerivativeOrdersResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.MsgBatchCancelDerivativeOrdersResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bool success = 1 [json_name = "success"];
  if (this->_internal_success_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.MsgBatchCancelDerivativeOrdersResponse)
  return target;
}

::size_t MsgBatchCancelDerivativeOrdersResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.MsgBatchCancelDerivativeOrdersResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bool success = 1 [json_name = "success"];
  {
    std::size_t data_size = std::size_t{1} *
        ::_pbi::FromIntSize(this->_internal_success_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgBatchCancelDerivativeOrdersResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MsgBatchCancelDerivativeOrdersResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgBatchCancelDerivativeOrdersResponse::GetClassData() const { return &_class_data_; }


void MsgBatchCancelDerivativeOrdersResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MsgBatchCancelDerivativeOrdersResponse*>(&to_msg);
  auto& from = static_cast<const MsgBatchCancelDerivativeOrdersResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.MsgBatchCancelDerivativeOrdersResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.success_.MergeFrom(from._impl_.success_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MsgBatchCancelDerivativeOrdersResponse::CopyFrom(const MsgBatchCancelDerivativeOrdersResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.MsgBatchCancelDerivativeOrdersResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgBatchCancelDerivativeOrdersResponse::IsInitialized() const {
  return true;
}

void MsgBatchCancelDerivativeOrdersResponse::InternalSwap(MsgBatchCancelDerivativeOrdersResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.success_.InternalSwap(&other->_impl_.success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgBatchCancelDerivativeOrdersResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2ftx_2eproto[46]);
}
// ===================================================================

class MsgSubaccountTransfer::_Internal {
 public:
  using HasBits = decltype(std::declval<MsgSubaccountTransfer>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(MsgSubaccountTransfer, _impl_._has_bits_);
  static const ::cosmos::base::v1beta1::Coin& amount(const MsgSubaccountTransfer* msg);
  static void set_has_amount(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::cosmos::base::v1beta1::Coin&
MsgSubaccountTransfer::_Internal::amount(const MsgSubaccountTransfer* msg) {
  return *msg->_impl_.amount_;
}
void MsgSubaccountTransfer::clear_amount() {
  if (_impl_.amount_ != nullptr) _impl_.amount_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
MsgSubaccountTransfer::MsgSubaccountTransfer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.MsgSubaccountTransfer)
}
MsgSubaccountTransfer::MsgSubaccountTransfer(const MsgSubaccountTransfer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MsgSubaccountTransfer* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sender_) {}

    , decltype(_impl_.source_subaccount_id_) {}

    , decltype(_impl_.destination_subaccount_id_) {}

    , decltype(_impl_.amount_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.sender_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.sender_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sender().empty()) {
    _this->_impl_.sender_.Set(from._internal_sender(), _this->GetArenaForAllocation());
  }
  _impl_.source_subaccount_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.source_subaccount_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_source_subaccount_id().empty()) {
    _this->_impl_.source_subaccount_id_.Set(from._internal_source_subaccount_id(), _this->GetArenaForAllocation());
  }
  _impl_.destination_subaccount_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.destination_subaccount_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_destination_subaccount_id().empty()) {
    _this->_impl_.destination_subaccount_id_.Set(from._internal_destination_subaccount_id(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.amount_ = new ::cosmos::base::v1beta1::Coin(*from._impl_.amount_);
  }
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.MsgSubaccountTransfer)
}

inline void MsgSubaccountTransfer::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sender_) {}

    , decltype(_impl_.source_subaccount_id_) {}

    , decltype(_impl_.destination_subaccount_id_) {}

    , decltype(_impl_.amount_){nullptr}
  };
  _impl_.sender_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.sender_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.source_subaccount_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.source_subaccount_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.destination_subaccount_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.destination_subaccount_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MsgSubaccountTransfer::~MsgSubaccountTransfer() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.MsgSubaccountTransfer)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MsgSubaccountTransfer::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sender_.Destroy();
  _impl_.source_subaccount_id_.Destroy();
  _impl_.destination_subaccount_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.amount_;
}

void MsgSubaccountTransfer::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MsgSubaccountTransfer::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.MsgSubaccountTransfer)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sender_.ClearToEmpty();
  _impl_.source_subaccount_id_.ClearToEmpty();
  _impl_.destination_subaccount_id_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.amount_ != nullptr);
    _impl_.amount_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgSubaccountTransfer::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string sender = 1 [json_name = "sender"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sender();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.MsgSubaccountTransfer.sender"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string source_subaccount_id = 2 [json_name = "sourceSubaccountId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_source_subaccount_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.MsgSubaccountTransfer.source_subaccount_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string destination_subaccount_id = 3 [json_name = "destinationSubaccountId"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_destination_subaccount_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.MsgSubaccountTransfer.destination_subaccount_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .cosmos.base.v1beta1.Coin amount = 4 [json_name = "amount", (.gogoproto.nullable) = false];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_amount(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MsgSubaccountTransfer::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.MsgSubaccountTransfer)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string sender = 1 [json_name = "sender"];
  if (!this->_internal_sender().empty()) {
    const std::string& _s = this->_internal_sender();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.MsgSubaccountTransfer.sender");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string source_subaccount_id = 2 [json_name = "sourceSubaccountId"];
  if (!this->_internal_source_subaccount_id().empty()) {
    const std::string& _s = this->_internal_source_subaccount_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.MsgSubaccountTransfer.source_subaccount_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string destination_subaccount_id = 3 [json_name = "destinationSubaccountId"];
  if (!this->_internal_destination_subaccount_id().empty()) {
    const std::string& _s = this->_internal_destination_subaccount_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.MsgSubaccountTransfer.destination_subaccount_id");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .cosmos.base.v1beta1.Coin amount = 4 [json_name = "amount", (.gogoproto.nullable) = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::amount(this),
        _Internal::amount(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.MsgSubaccountTransfer)
  return target;
}

::size_t MsgSubaccountTransfer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.MsgSubaccountTransfer)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sender = 1 [json_name = "sender"];
  if (!this->_internal_sender().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_sender());
  }

  // string source_subaccount_id = 2 [json_name = "sourceSubaccountId"];
  if (!this->_internal_source_subaccount_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_source_subaccount_id());
  }

  // string destination_subaccount_id = 3 [json_name = "destinationSubaccountId"];
  if (!this->_internal_destination_subaccount_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_destination_subaccount_id());
  }

  // .cosmos.base.v1beta1.Coin amount = 4 [json_name = "amount", (.gogoproto.nullable) = false];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.amount_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgSubaccountTransfer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MsgSubaccountTransfer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgSubaccountTransfer::GetClassData() const { return &_class_data_; }


void MsgSubaccountTransfer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MsgSubaccountTransfer*>(&to_msg);
  auto& from = static_cast<const MsgSubaccountTransfer&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.MsgSubaccountTransfer)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_sender().empty()) {
    _this->_internal_set_sender(from._internal_sender());
  }
  if (!from._internal_source_subaccount_id().empty()) {
    _this->_internal_set_source_subaccount_id(from._internal_source_subaccount_id());
  }
  if (!from._internal_destination_subaccount_id().empty()) {
    _this->_internal_set_destination_subaccount_id(from._internal_destination_subaccount_id());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_amount()->::cosmos::base::v1beta1::Coin::MergeFrom(
        from._internal_amount());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MsgSubaccountTransfer::CopyFrom(const MsgSubaccountTransfer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.MsgSubaccountTransfer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgSubaccountTransfer::IsInitialized() const {
  return true;
}

void MsgSubaccountTransfer::InternalSwap(MsgSubaccountTransfer* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.sender_, lhs_arena,
                                       &other->_impl_.sender_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.source_subaccount_id_, lhs_arena,
                                       &other->_impl_.source_subaccount_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.destination_subaccount_id_, lhs_arena,
                                       &other->_impl_.destination_subaccount_id_, rhs_arena);
  swap(_impl_.amount_, other->_impl_.amount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgSubaccountTransfer::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2ftx_2eproto[47]);
}
// ===================================================================

class MsgSubaccountTransferResponse::_Internal {
 public:
};

MsgSubaccountTransferResponse::MsgSubaccountTransferResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.MsgSubaccountTransferResponse)
}
MsgSubaccountTransferResponse::MsgSubaccountTransferResponse(const MsgSubaccountTransferResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  MsgSubaccountTransferResponse* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.MsgSubaccountTransferResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgSubaccountTransferResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgSubaccountTransferResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata MsgSubaccountTransferResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2ftx_2eproto[48]);
}
// ===================================================================

class MsgExternalTransfer::_Internal {
 public:
  using HasBits = decltype(std::declval<MsgExternalTransfer>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(MsgExternalTransfer, _impl_._has_bits_);
  static const ::cosmos::base::v1beta1::Coin& amount(const MsgExternalTransfer* msg);
  static void set_has_amount(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::cosmos::base::v1beta1::Coin&
MsgExternalTransfer::_Internal::amount(const MsgExternalTransfer* msg) {
  return *msg->_impl_.amount_;
}
void MsgExternalTransfer::clear_amount() {
  if (_impl_.amount_ != nullptr) _impl_.amount_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
MsgExternalTransfer::MsgExternalTransfer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.MsgExternalTransfer)
}
MsgExternalTransfer::MsgExternalTransfer(const MsgExternalTransfer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MsgExternalTransfer* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sender_) {}

    , decltype(_impl_.source_subaccount_id_) {}

    , decltype(_impl_.destination_subaccount_id_) {}

    , decltype(_impl_.amount_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.sender_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.sender_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sender().empty()) {
    _this->_impl_.sender_.Set(from._internal_sender(), _this->GetArenaForAllocation());
  }
  _impl_.source_subaccount_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.source_subaccount_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_source_subaccount_id().empty()) {
    _this->_impl_.source_subaccount_id_.Set(from._internal_source_subaccount_id(), _this->GetArenaForAllocation());
  }
  _impl_.destination_subaccount_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.destination_subaccount_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_destination_subaccount_id().empty()) {
    _this->_impl_.destination_subaccount_id_.Set(from._internal_destination_subaccount_id(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.amount_ = new ::cosmos::base::v1beta1::Coin(*from._impl_.amount_);
  }
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.MsgExternalTransfer)
}

inline void MsgExternalTransfer::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sender_) {}

    , decltype(_impl_.source_subaccount_id_) {}

    , decltype(_impl_.destination_subaccount_id_) {}

    , decltype(_impl_.amount_){nullptr}
  };
  _impl_.sender_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.sender_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.source_subaccount_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.source_subaccount_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.destination_subaccount_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.destination_subaccount_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MsgExternalTransfer::~MsgExternalTransfer() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.MsgExternalTransfer)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MsgExternalTransfer::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sender_.Destroy();
  _impl_.source_subaccount_id_.Destroy();
  _impl_.destination_subaccount_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.amount_;
}

void MsgExternalTransfer::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MsgExternalTransfer::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.MsgExternalTransfer)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sender_.ClearToEmpty();
  _impl_.source_subaccount_id_.ClearToEmpty();
  _impl_.destination_subaccount_id_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.amount_ != nullptr);
    _impl_.amount_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgExternalTransfer::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string sender = 1 [json_name = "sender"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sender();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.MsgExternalTransfer.sender"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string source_subaccount_id = 2 [json_name = "sourceSubaccountId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_source_subaccount_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.MsgExternalTransfer.source_subaccount_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string destination_subaccount_id = 3 [json_name = "destinationSubaccountId"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_destination_subaccount_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.MsgExternalTransfer.destination_subaccount_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .cosmos.base.v1beta1.Coin amount = 4 [json_name = "amount", (.gogoproto.nullable) = false];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_amount(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MsgExternalTransfer::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.MsgExternalTransfer)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string sender = 1 [json_name = "sender"];
  if (!this->_internal_sender().empty()) {
    const std::string& _s = this->_internal_sender();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.MsgExternalTransfer.sender");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string source_subaccount_id = 2 [json_name = "sourceSubaccountId"];
  if (!this->_internal_source_subaccount_id().empty()) {
    const std::string& _s = this->_internal_source_subaccount_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.MsgExternalTransfer.source_subaccount_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string destination_subaccount_id = 3 [json_name = "destinationSubaccountId"];
  if (!this->_internal_destination_subaccount_id().empty()) {
    const std::string& _s = this->_internal_destination_subaccount_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.MsgExternalTransfer.destination_subaccount_id");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .cosmos.base.v1beta1.Coin amount = 4 [json_name = "amount", (.gogoproto.nullable) = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::amount(this),
        _Internal::amount(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.MsgExternalTransfer)
  return target;
}

::size_t MsgExternalTransfer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.MsgExternalTransfer)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sender = 1 [json_name = "sender"];
  if (!this->_internal_sender().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_sender());
  }

  // string source_subaccount_id = 2 [json_name = "sourceSubaccountId"];
  if (!this->_internal_source_subaccount_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_source_subaccount_id());
  }

  // string destination_subaccount_id = 3 [json_name = "destinationSubaccountId"];
  if (!this->_internal_destination_subaccount_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_destination_subaccount_id());
  }

  // .cosmos.base.v1beta1.Coin amount = 4 [json_name = "amount", (.gogoproto.nullable) = false];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.amount_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgExternalTransfer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MsgExternalTransfer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgExternalTransfer::GetClassData() const { return &_class_data_; }


void MsgExternalTransfer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MsgExternalTransfer*>(&to_msg);
  auto& from = static_cast<const MsgExternalTransfer&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.MsgExternalTransfer)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_sender().empty()) {
    _this->_internal_set_sender(from._internal_sender());
  }
  if (!from._internal_source_subaccount_id().empty()) {
    _this->_internal_set_source_subaccount_id(from._internal_source_subaccount_id());
  }
  if (!from._internal_destination_subaccount_id().empty()) {
    _this->_internal_set_destination_subaccount_id(from._internal_destination_subaccount_id());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_amount()->::cosmos::base::v1beta1::Coin::MergeFrom(
        from._internal_amount());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MsgExternalTransfer::CopyFrom(const MsgExternalTransfer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.MsgExternalTransfer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgExternalTransfer::IsInitialized() const {
  return true;
}

void MsgExternalTransfer::InternalSwap(MsgExternalTransfer* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.sender_, lhs_arena,
                                       &other->_impl_.sender_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.source_subaccount_id_, lhs_arena,
                                       &other->_impl_.source_subaccount_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.destination_subaccount_id_, lhs_arena,
                                       &other->_impl_.destination_subaccount_id_, rhs_arena);
  swap(_impl_.amount_, other->_impl_.amount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgExternalTransfer::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2ftx_2eproto[49]);
}
// ===================================================================

class MsgExternalTransferResponse::_Internal {
 public:
};

MsgExternalTransferResponse::MsgExternalTransferResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.MsgExternalTransferResponse)
}
MsgExternalTransferResponse::MsgExternalTransferResponse(const MsgExternalTransferResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  MsgExternalTransferResponse* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.MsgExternalTransferResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgExternalTransferResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgExternalTransferResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata MsgExternalTransferResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2ftx_2eproto[50]);
}
// ===================================================================

class MsgLiquidatePosition::_Internal {
 public:
  using HasBits = decltype(std::declval<MsgLiquidatePosition>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(MsgLiquidatePosition, _impl_._has_bits_);
  static const ::injective::exchange::v1beta1::DerivativeOrder& order(const MsgLiquidatePosition* msg);
  static void set_has_order(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::injective::exchange::v1beta1::DerivativeOrder&
MsgLiquidatePosition::_Internal::order(const MsgLiquidatePosition* msg) {
  return *msg->_impl_.order_;
}
void MsgLiquidatePosition::clear_order() {
  if (_impl_.order_ != nullptr) _impl_.order_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
MsgLiquidatePosition::MsgLiquidatePosition(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.MsgLiquidatePosition)
}
MsgLiquidatePosition::MsgLiquidatePosition(const MsgLiquidatePosition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MsgLiquidatePosition* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sender_) {}

    , decltype(_impl_.subaccount_id_) {}

    , decltype(_impl_.market_id_) {}

    , decltype(_impl_.order_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.sender_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.sender_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sender().empty()) {
    _this->_impl_.sender_.Set(from._internal_sender(), _this->GetArenaForAllocation());
  }
  _impl_.subaccount_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.subaccount_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_subaccount_id().empty()) {
    _this->_impl_.subaccount_id_.Set(from._internal_subaccount_id(), _this->GetArenaForAllocation());
  }
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_market_id().empty()) {
    _this->_impl_.market_id_.Set(from._internal_market_id(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.order_ = new ::injective::exchange::v1beta1::DerivativeOrder(*from._impl_.order_);
  }
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.MsgLiquidatePosition)
}

inline void MsgLiquidatePosition::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sender_) {}

    , decltype(_impl_.subaccount_id_) {}

    , decltype(_impl_.market_id_) {}

    , decltype(_impl_.order_){nullptr}
  };
  _impl_.sender_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.sender_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.subaccount_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.subaccount_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MsgLiquidatePosition::~MsgLiquidatePosition() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.MsgLiquidatePosition)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MsgLiquidatePosition::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sender_.Destroy();
  _impl_.subaccount_id_.Destroy();
  _impl_.market_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.order_;
}

void MsgLiquidatePosition::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MsgLiquidatePosition::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.MsgLiquidatePosition)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sender_.ClearToEmpty();
  _impl_.subaccount_id_.ClearToEmpty();
  _impl_.market_id_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.order_ != nullptr);
    _impl_.order_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgLiquidatePosition::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string sender = 1 [json_name = "sender"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sender();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.MsgLiquidatePosition.sender"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string subaccount_id = 2 [json_name = "subaccountId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_subaccount_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.MsgLiquidatePosition.subaccount_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string market_id = 3 [json_name = "marketId"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_market_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.MsgLiquidatePosition.market_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .injective.exchange.v1beta1.DerivativeOrder order = 4 [json_name = "order", (.gogoproto.nullable) = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_order(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MsgLiquidatePosition::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.MsgLiquidatePosition)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string sender = 1 [json_name = "sender"];
  if (!this->_internal_sender().empty()) {
    const std::string& _s = this->_internal_sender();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.MsgLiquidatePosition.sender");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string subaccount_id = 2 [json_name = "subaccountId"];
  if (!this->_internal_subaccount_id().empty()) {
    const std::string& _s = this->_internal_subaccount_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.MsgLiquidatePosition.subaccount_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string market_id = 3 [json_name = "marketId"];
  if (!this->_internal_market_id().empty()) {
    const std::string& _s = this->_internal_market_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.MsgLiquidatePosition.market_id");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .injective.exchange.v1beta1.DerivativeOrder order = 4 [json_name = "order", (.gogoproto.nullable) = true];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::order(this),
        _Internal::order(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.MsgLiquidatePosition)
  return target;
}

::size_t MsgLiquidatePosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.MsgLiquidatePosition)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sender = 1 [json_name = "sender"];
  if (!this->_internal_sender().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_sender());
  }

  // string subaccount_id = 2 [json_name = "subaccountId"];
  if (!this->_internal_subaccount_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_subaccount_id());
  }

  // string market_id = 3 [json_name = "marketId"];
  if (!this->_internal_market_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_market_id());
  }

  // .injective.exchange.v1beta1.DerivativeOrder order = 4 [json_name = "order", (.gogoproto.nullable) = true];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.order_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgLiquidatePosition::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MsgLiquidatePosition::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgLiquidatePosition::GetClassData() const { return &_class_data_; }


void MsgLiquidatePosition::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MsgLiquidatePosition*>(&to_msg);
  auto& from = static_cast<const MsgLiquidatePosition&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.MsgLiquidatePosition)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_sender().empty()) {
    _this->_internal_set_sender(from._internal_sender());
  }
  if (!from._internal_subaccount_id().empty()) {
    _this->_internal_set_subaccount_id(from._internal_subaccount_id());
  }
  if (!from._internal_market_id().empty()) {
    _this->_internal_set_market_id(from._internal_market_id());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_order()->::injective::exchange::v1beta1::DerivativeOrder::MergeFrom(
        from._internal_order());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MsgLiquidatePosition::CopyFrom(const MsgLiquidatePosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.MsgLiquidatePosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgLiquidatePosition::IsInitialized() const {
  return true;
}

void MsgLiquidatePosition::InternalSwap(MsgLiquidatePosition* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.sender_, lhs_arena,
                                       &other->_impl_.sender_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.subaccount_id_, lhs_arena,
                                       &other->_impl_.subaccount_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.market_id_, lhs_arena,
                                       &other->_impl_.market_id_, rhs_arena);
  swap(_impl_.order_, other->_impl_.order_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgLiquidatePosition::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2ftx_2eproto[51]);
}
// ===================================================================

class MsgLiquidatePositionResponse::_Internal {
 public:
};

MsgLiquidatePositionResponse::MsgLiquidatePositionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.MsgLiquidatePositionResponse)
}
MsgLiquidatePositionResponse::MsgLiquidatePositionResponse(const MsgLiquidatePositionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  MsgLiquidatePositionResponse* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.MsgLiquidatePositionResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgLiquidatePositionResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgLiquidatePositionResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata MsgLiquidatePositionResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2ftx_2eproto[52]);
}
// ===================================================================

class MsgIncreasePositionMargin::_Internal {
 public:
};

MsgIncreasePositionMargin::MsgIncreasePositionMargin(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.MsgIncreasePositionMargin)
}
MsgIncreasePositionMargin::MsgIncreasePositionMargin(const MsgIncreasePositionMargin& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MsgIncreasePositionMargin* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.sender_) {}

    , decltype(_impl_.source_subaccount_id_) {}

    , decltype(_impl_.destination_subaccount_id_) {}

    , decltype(_impl_.market_id_) {}

    , decltype(_impl_.amount_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.sender_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.sender_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sender().empty()) {
    _this->_impl_.sender_.Set(from._internal_sender(), _this->GetArenaForAllocation());
  }
  _impl_.source_subaccount_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.source_subaccount_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_source_subaccount_id().empty()) {
    _this->_impl_.source_subaccount_id_.Set(from._internal_source_subaccount_id(), _this->GetArenaForAllocation());
  }
  _impl_.destination_subaccount_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.destination_subaccount_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_destination_subaccount_id().empty()) {
    _this->_impl_.destination_subaccount_id_.Set(from._internal_destination_subaccount_id(), _this->GetArenaForAllocation());
  }
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_market_id().empty()) {
    _this->_impl_.market_id_.Set(from._internal_market_id(), _this->GetArenaForAllocation());
  }
  _impl_.amount_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.amount_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_amount().empty()) {
    _this->_impl_.amount_.Set(from._internal_amount(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.MsgIncreasePositionMargin)
}

inline void MsgIncreasePositionMargin::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.sender_) {}

    , decltype(_impl_.source_subaccount_id_) {}

    , decltype(_impl_.destination_subaccount_id_) {}

    , decltype(_impl_.market_id_) {}

    , decltype(_impl_.amount_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.sender_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.sender_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.source_subaccount_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.source_subaccount_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.destination_subaccount_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.destination_subaccount_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.amount_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.amount_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MsgIncreasePositionMargin::~MsgIncreasePositionMargin() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.MsgIncreasePositionMargin)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MsgIncreasePositionMargin::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sender_.Destroy();
  _impl_.source_subaccount_id_.Destroy();
  _impl_.destination_subaccount_id_.Destroy();
  _impl_.market_id_.Destroy();
  _impl_.amount_.Destroy();
}

void MsgIncreasePositionMargin::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MsgIncreasePositionMargin::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.MsgIncreasePositionMargin)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sender_.ClearToEmpty();
  _impl_.source_subaccount_id_.ClearToEmpty();
  _impl_.destination_subaccount_id_.ClearToEmpty();
  _impl_.market_id_.ClearToEmpty();
  _impl_.amount_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgIncreasePositionMargin::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string sender = 1 [json_name = "sender"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sender();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.MsgIncreasePositionMargin.sender"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string source_subaccount_id = 2 [json_name = "sourceSubaccountId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_source_subaccount_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.MsgIncreasePositionMargin.source_subaccount_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string destination_subaccount_id = 3 [json_name = "destinationSubaccountId"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_destination_subaccount_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.MsgIncreasePositionMargin.destination_subaccount_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string market_id = 4 [json_name = "marketId"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_market_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.MsgIncreasePositionMargin.market_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string amount = 5 [json_name = "amount", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_amount();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.MsgIncreasePositionMargin.amount"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MsgIncreasePositionMargin::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.MsgIncreasePositionMargin)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string sender = 1 [json_name = "sender"];
  if (!this->_internal_sender().empty()) {
    const std::string& _s = this->_internal_sender();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.MsgIncreasePositionMargin.sender");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string source_subaccount_id = 2 [json_name = "sourceSubaccountId"];
  if (!this->_internal_source_subaccount_id().empty()) {
    const std::string& _s = this->_internal_source_subaccount_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.MsgIncreasePositionMargin.source_subaccount_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string destination_subaccount_id = 3 [json_name = "destinationSubaccountId"];
  if (!this->_internal_destination_subaccount_id().empty()) {
    const std::string& _s = this->_internal_destination_subaccount_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.MsgIncreasePositionMargin.destination_subaccount_id");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string market_id = 4 [json_name = "marketId"];
  if (!this->_internal_market_id().empty()) {
    const std::string& _s = this->_internal_market_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.MsgIncreasePositionMargin.market_id");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // string amount = 5 [json_name = "amount", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_amount().empty()) {
    const std::string& _s = this->_internal_amount();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.MsgIncreasePositionMargin.amount");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.MsgIncreasePositionMargin)
  return target;
}

::size_t MsgIncreasePositionMargin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.MsgIncreasePositionMargin)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sender = 1 [json_name = "sender"];
  if (!this->_internal_sender().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_sender());
  }

  // string source_subaccount_id = 2 [json_name = "sourceSubaccountId"];
  if (!this->_internal_source_subaccount_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_source_subaccount_id());
  }

  // string destination_subaccount_id = 3 [json_name = "destinationSubaccountId"];
  if (!this->_internal_destination_subaccount_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_destination_subaccount_id());
  }

  // string market_id = 4 [json_name = "marketId"];
  if (!this->_internal_market_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_market_id());
  }

  // string amount = 5 [json_name = "amount", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_amount().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_amount());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgIncreasePositionMargin::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MsgIncreasePositionMargin::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgIncreasePositionMargin::GetClassData() const { return &_class_data_; }


void MsgIncreasePositionMargin::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MsgIncreasePositionMargin*>(&to_msg);
  auto& from = static_cast<const MsgIncreasePositionMargin&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.MsgIncreasePositionMargin)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_sender().empty()) {
    _this->_internal_set_sender(from._internal_sender());
  }
  if (!from._internal_source_subaccount_id().empty()) {
    _this->_internal_set_source_subaccount_id(from._internal_source_subaccount_id());
  }
  if (!from._internal_destination_subaccount_id().empty()) {
    _this->_internal_set_destination_subaccount_id(from._internal_destination_subaccount_id());
  }
  if (!from._internal_market_id().empty()) {
    _this->_internal_set_market_id(from._internal_market_id());
  }
  if (!from._internal_amount().empty()) {
    _this->_internal_set_amount(from._internal_amount());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MsgIncreasePositionMargin::CopyFrom(const MsgIncreasePositionMargin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.MsgIncreasePositionMargin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgIncreasePositionMargin::IsInitialized() const {
  return true;
}

void MsgIncreasePositionMargin::InternalSwap(MsgIncreasePositionMargin* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.sender_, lhs_arena,
                                       &other->_impl_.sender_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.source_subaccount_id_, lhs_arena,
                                       &other->_impl_.source_subaccount_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.destination_subaccount_id_, lhs_arena,
                                       &other->_impl_.destination_subaccount_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.market_id_, lhs_arena,
                                       &other->_impl_.market_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.amount_, lhs_arena,
                                       &other->_impl_.amount_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgIncreasePositionMargin::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2ftx_2eproto[53]);
}
// ===================================================================

class MsgIncreasePositionMarginResponse::_Internal {
 public:
};

MsgIncreasePositionMarginResponse::MsgIncreasePositionMarginResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.MsgIncreasePositionMarginResponse)
}
MsgIncreasePositionMarginResponse::MsgIncreasePositionMarginResponse(const MsgIncreasePositionMarginResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  MsgIncreasePositionMarginResponse* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.MsgIncreasePositionMarginResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgIncreasePositionMarginResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgIncreasePositionMarginResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata MsgIncreasePositionMarginResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2ftx_2eproto[54]);
}
// ===================================================================

class MsgPrivilegedExecuteContract::_Internal {
 public:
};

MsgPrivilegedExecuteContract::MsgPrivilegedExecuteContract(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.MsgPrivilegedExecuteContract)
}
MsgPrivilegedExecuteContract::MsgPrivilegedExecuteContract(const MsgPrivilegedExecuteContract& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MsgPrivilegedExecuteContract* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.sender_) {}

    , decltype(_impl_.funds_) {}

    , decltype(_impl_.contract_address_) {}

    , decltype(_impl_.data_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.sender_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.sender_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sender().empty()) {
    _this->_impl_.sender_.Set(from._internal_sender(), _this->GetArenaForAllocation());
  }
  _impl_.funds_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.funds_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_funds().empty()) {
    _this->_impl_.funds_.Set(from._internal_funds(), _this->GetArenaForAllocation());
  }
  _impl_.contract_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.contract_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_contract_address().empty()) {
    _this->_impl_.contract_address_.Set(from._internal_contract_address(), _this->GetArenaForAllocation());
  }
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.data_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.MsgPrivilegedExecuteContract)
}

inline void MsgPrivilegedExecuteContract::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.sender_) {}

    , decltype(_impl_.funds_) {}

    , decltype(_impl_.contract_address_) {}

    , decltype(_impl_.data_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.sender_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.sender_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.funds_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.funds_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.contract_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.contract_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.data_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MsgPrivilegedExecuteContract::~MsgPrivilegedExecuteContract() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.MsgPrivilegedExecuteContract)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MsgPrivilegedExecuteContract::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sender_.Destroy();
  _impl_.funds_.Destroy();
  _impl_.contract_address_.Destroy();
  _impl_.data_.Destroy();
}

void MsgPrivilegedExecuteContract::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MsgPrivilegedExecuteContract::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.MsgPrivilegedExecuteContract)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sender_.ClearToEmpty();
  _impl_.funds_.ClearToEmpty();
  _impl_.contract_address_.ClearToEmpty();
  _impl_.data_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgPrivilegedExecuteContract::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string sender = 1 [json_name = "sender"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sender();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.MsgPrivilegedExecuteContract.sender"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string funds = 2 [json_name = "funds"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_funds();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.MsgPrivilegedExecuteContract.funds"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string contract_address = 3 [json_name = "contractAddress"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_contract_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.MsgPrivilegedExecuteContract.contract_address"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string data = 4 [json_name = "data"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.MsgPrivilegedExecuteContract.data"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MsgPrivilegedExecuteContract::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.MsgPrivilegedExecuteContract)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string sender = 1 [json_name = "sender"];
  if (!this->_internal_sender().empty()) {
    const std::string& _s = this->_internal_sender();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.MsgPrivilegedExecuteContract.sender");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string funds = 2 [json_name = "funds"];
  if (!this->_internal_funds().empty()) {
    const std::string& _s = this->_internal_funds();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.MsgPrivilegedExecuteContract.funds");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string contract_address = 3 [json_name = "contractAddress"];
  if (!this->_internal_contract_address().empty()) {
    const std::string& _s = this->_internal_contract_address();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.MsgPrivilegedExecuteContract.contract_address");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string data = 4 [json_name = "data"];
  if (!this->_internal_data().empty()) {
    const std::string& _s = this->_internal_data();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.MsgPrivilegedExecuteContract.data");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.MsgPrivilegedExecuteContract)
  return target;
}

::size_t MsgPrivilegedExecuteContract::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.MsgPrivilegedExecuteContract)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sender = 1 [json_name = "sender"];
  if (!this->_internal_sender().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_sender());
  }

  // string funds = 2 [json_name = "funds"];
  if (!this->_internal_funds().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_funds());
  }

  // string contract_address = 3 [json_name = "contractAddress"];
  if (!this->_internal_contract_address().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_contract_address());
  }

  // string data = 4 [json_name = "data"];
  if (!this->_internal_data().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_data());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgPrivilegedExecuteContract::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MsgPrivilegedExecuteContract::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgPrivilegedExecuteContract::GetClassData() const { return &_class_data_; }


void MsgPrivilegedExecuteContract::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MsgPrivilegedExecuteContract*>(&to_msg);
  auto& from = static_cast<const MsgPrivilegedExecuteContract&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.MsgPrivilegedExecuteContract)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_sender().empty()) {
    _this->_internal_set_sender(from._internal_sender());
  }
  if (!from._internal_funds().empty()) {
    _this->_internal_set_funds(from._internal_funds());
  }
  if (!from._internal_contract_address().empty()) {
    _this->_internal_set_contract_address(from._internal_contract_address());
  }
  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MsgPrivilegedExecuteContract::CopyFrom(const MsgPrivilegedExecuteContract& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.MsgPrivilegedExecuteContract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPrivilegedExecuteContract::IsInitialized() const {
  return true;
}

void MsgPrivilegedExecuteContract::InternalSwap(MsgPrivilegedExecuteContract* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.sender_, lhs_arena,
                                       &other->_impl_.sender_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.funds_, lhs_arena,
                                       &other->_impl_.funds_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.contract_address_, lhs_arena,
                                       &other->_impl_.contract_address_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.data_, lhs_arena,
                                       &other->_impl_.data_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgPrivilegedExecuteContract::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2ftx_2eproto[55]);
}
// ===================================================================

class MsgPrivilegedExecuteContractResponse::_Internal {
 public:
};

void MsgPrivilegedExecuteContractResponse::clear_funds_diff() {
  _internal_mutable_funds_diff()->Clear();
}
MsgPrivilegedExecuteContractResponse::MsgPrivilegedExecuteContractResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.MsgPrivilegedExecuteContractResponse)
}
MsgPrivilegedExecuteContractResponse::MsgPrivilegedExecuteContractResponse(const MsgPrivilegedExecuteContractResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MsgPrivilegedExecuteContractResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.funds_diff_){from._impl_.funds_diff_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.MsgPrivilegedExecuteContractResponse)
}

inline void MsgPrivilegedExecuteContractResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.funds_diff_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MsgPrivilegedExecuteContractResponse::~MsgPrivilegedExecuteContractResponse() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.MsgPrivilegedExecuteContractResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MsgPrivilegedExecuteContractResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_funds_diff()->~RepeatedPtrField();
}

void MsgPrivilegedExecuteContractResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MsgPrivilegedExecuteContractResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.MsgPrivilegedExecuteContractResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_funds_diff()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgPrivilegedExecuteContractResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .cosmos.base.v1beta1.Coin funds_diff = 1 [json_name = "fundsDiff", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_funds_diff(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MsgPrivilegedExecuteContractResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.MsgPrivilegedExecuteContractResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cosmos.base.v1beta1.Coin funds_diff = 1 [json_name = "fundsDiff", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_funds_diff_size()); i < n; i++) {
    const auto& repfield = this->_internal_funds_diff(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.MsgPrivilegedExecuteContractResponse)
  return target;
}

::size_t MsgPrivilegedExecuteContractResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.MsgPrivilegedExecuteContractResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cosmos.base.v1beta1.Coin funds_diff = 1 [json_name = "fundsDiff", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];
  total_size += 1UL * this->_internal_funds_diff_size();
  for (const auto& msg : this->_internal_funds_diff()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgPrivilegedExecuteContractResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MsgPrivilegedExecuteContractResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgPrivilegedExecuteContractResponse::GetClassData() const { return &_class_data_; }


void MsgPrivilegedExecuteContractResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MsgPrivilegedExecuteContractResponse*>(&to_msg);
  auto& from = static_cast<const MsgPrivilegedExecuteContractResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.MsgPrivilegedExecuteContractResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_funds_diff()->MergeFrom(from._internal_funds_diff());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MsgPrivilegedExecuteContractResponse::CopyFrom(const MsgPrivilegedExecuteContractResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.MsgPrivilegedExecuteContractResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPrivilegedExecuteContractResponse::IsInitialized() const {
  return true;
}

void MsgPrivilegedExecuteContractResponse::InternalSwap(MsgPrivilegedExecuteContractResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_funds_diff()->InternalSwap(other->_internal_mutable_funds_diff());
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgPrivilegedExecuteContractResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2ftx_2eproto[56]);
}
// ===================================================================

class SpotMarketParamUpdateProposal::_Internal {
 public:
};

SpotMarketParamUpdateProposal::SpotMarketParamUpdateProposal(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.SpotMarketParamUpdateProposal)
}
SpotMarketParamUpdateProposal::SpotMarketParamUpdateProposal(const SpotMarketParamUpdateProposal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SpotMarketParamUpdateProposal* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.title_) {}

    , decltype(_impl_.description_) {}

    , decltype(_impl_.market_id_) {}

    , decltype(_impl_.maker_fee_rate_) {}

    , decltype(_impl_.taker_fee_rate_) {}

    , decltype(_impl_.relayer_fee_share_rate_) {}

    , decltype(_impl_.min_price_tick_size_) {}

    , decltype(_impl_.min_quantity_tick_size_) {}

    , decltype(_impl_.status_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.title_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_title().empty()) {
    _this->_impl_.title_.Set(from._internal_title(), _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.description_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), _this->GetArenaForAllocation());
  }
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_market_id().empty()) {
    _this->_impl_.market_id_.Set(from._internal_market_id(), _this->GetArenaForAllocation());
  }
  _impl_.maker_fee_rate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.maker_fee_rate_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_maker_fee_rate().empty()) {
    _this->_impl_.maker_fee_rate_.Set(from._internal_maker_fee_rate(), _this->GetArenaForAllocation());
  }
  _impl_.taker_fee_rate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.taker_fee_rate_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_taker_fee_rate().empty()) {
    _this->_impl_.taker_fee_rate_.Set(from._internal_taker_fee_rate(), _this->GetArenaForAllocation());
  }
  _impl_.relayer_fee_share_rate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.relayer_fee_share_rate_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_relayer_fee_share_rate().empty()) {
    _this->_impl_.relayer_fee_share_rate_.Set(from._internal_relayer_fee_share_rate(), _this->GetArenaForAllocation());
  }
  _impl_.min_price_tick_size_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.min_price_tick_size_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_min_price_tick_size().empty()) {
    _this->_impl_.min_price_tick_size_.Set(from._internal_min_price_tick_size(), _this->GetArenaForAllocation());
  }
  _impl_.min_quantity_tick_size_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.min_quantity_tick_size_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_min_quantity_tick_size().empty()) {
    _this->_impl_.min_quantity_tick_size_.Set(from._internal_min_quantity_tick_size(), _this->GetArenaForAllocation());
  }
  _this->_impl_.status_ = from._impl_.status_;
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.SpotMarketParamUpdateProposal)
}

inline void SpotMarketParamUpdateProposal::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.title_) {}

    , decltype(_impl_.description_) {}

    , decltype(_impl_.market_id_) {}

    , decltype(_impl_.maker_fee_rate_) {}

    , decltype(_impl_.taker_fee_rate_) {}

    , decltype(_impl_.relayer_fee_share_rate_) {}

    , decltype(_impl_.min_price_tick_size_) {}

    , decltype(_impl_.min_quantity_tick_size_) {}

    , decltype(_impl_.status_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.title_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.description_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.maker_fee_rate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.maker_fee_rate_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.taker_fee_rate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.taker_fee_rate_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.relayer_fee_share_rate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.relayer_fee_share_rate_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.min_price_tick_size_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.min_price_tick_size_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.min_quantity_tick_size_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.min_quantity_tick_size_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SpotMarketParamUpdateProposal::~SpotMarketParamUpdateProposal() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.SpotMarketParamUpdateProposal)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SpotMarketParamUpdateProposal::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.title_.Destroy();
  _impl_.description_.Destroy();
  _impl_.market_id_.Destroy();
  _impl_.maker_fee_rate_.Destroy();
  _impl_.taker_fee_rate_.Destroy();
  _impl_.relayer_fee_share_rate_.Destroy();
  _impl_.min_price_tick_size_.Destroy();
  _impl_.min_quantity_tick_size_.Destroy();
}

void SpotMarketParamUpdateProposal::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SpotMarketParamUpdateProposal::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.SpotMarketParamUpdateProposal)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.title_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  _impl_.market_id_.ClearToEmpty();
  _impl_.maker_fee_rate_.ClearToEmpty();
  _impl_.taker_fee_rate_.ClearToEmpty();
  _impl_.relayer_fee_share_rate_.ClearToEmpty();
  _impl_.min_price_tick_size_.ClearToEmpty();
  _impl_.min_quantity_tick_size_.ClearToEmpty();
  _impl_.status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpotMarketParamUpdateProposal::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string title = 1 [json_name = "title"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.SpotMarketParamUpdateProposal.title"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string description = 2 [json_name = "description"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.SpotMarketParamUpdateProposal.description"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string market_id = 3 [json_name = "marketId"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_market_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.SpotMarketParamUpdateProposal.market_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string maker_fee_rate = 4 [json_name = "makerFeeRate", (.gogoproto.nullable) = true, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_maker_fee_rate();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.SpotMarketParamUpdateProposal.maker_fee_rate"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string taker_fee_rate = 5 [json_name = "takerFeeRate", (.gogoproto.nullable) = true, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_taker_fee_rate();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.SpotMarketParamUpdateProposal.taker_fee_rate"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string relayer_fee_share_rate = 6 [json_name = "relayerFeeShareRate", (.gogoproto.nullable) = true, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_relayer_fee_share_rate();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.SpotMarketParamUpdateProposal.relayer_fee_share_rate"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string min_price_tick_size = 7 [json_name = "minPriceTickSize", (.gogoproto.nullable) = true, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_min_price_tick_size();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.SpotMarketParamUpdateProposal.min_price_tick_size"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string min_quantity_tick_size = 8 [json_name = "minQuantityTickSize", (.gogoproto.nullable) = true, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_min_quantity_tick_size();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.SpotMarketParamUpdateProposal.min_quantity_tick_size"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .injective.exchange.v1beta1.MarketStatus status = 9 [json_name = "status"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 72)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::injective::exchange::v1beta1::MarketStatus>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SpotMarketParamUpdateProposal::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.SpotMarketParamUpdateProposal)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string title = 1 [json_name = "title"];
  if (!this->_internal_title().empty()) {
    const std::string& _s = this->_internal_title();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.SpotMarketParamUpdateProposal.title");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string description = 2 [json_name = "description"];
  if (!this->_internal_description().empty()) {
    const std::string& _s = this->_internal_description();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.SpotMarketParamUpdateProposal.description");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string market_id = 3 [json_name = "marketId"];
  if (!this->_internal_market_id().empty()) {
    const std::string& _s = this->_internal_market_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.SpotMarketParamUpdateProposal.market_id");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string maker_fee_rate = 4 [json_name = "makerFeeRate", (.gogoproto.nullable) = true, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_maker_fee_rate().empty()) {
    const std::string& _s = this->_internal_maker_fee_rate();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.SpotMarketParamUpdateProposal.maker_fee_rate");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // string taker_fee_rate = 5 [json_name = "takerFeeRate", (.gogoproto.nullable) = true, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_taker_fee_rate().empty()) {
    const std::string& _s = this->_internal_taker_fee_rate();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.SpotMarketParamUpdateProposal.taker_fee_rate");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // string relayer_fee_share_rate = 6 [json_name = "relayerFeeShareRate", (.gogoproto.nullable) = true, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_relayer_fee_share_rate().empty()) {
    const std::string& _s = this->_internal_relayer_fee_share_rate();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.SpotMarketParamUpdateProposal.relayer_fee_share_rate");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  // string min_price_tick_size = 7 [json_name = "minPriceTickSize", (.gogoproto.nullable) = true, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_min_price_tick_size().empty()) {
    const std::string& _s = this->_internal_min_price_tick_size();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.SpotMarketParamUpdateProposal.min_price_tick_size");
    target = stream->WriteStringMaybeAliased(7, _s, target);
  }

  // string min_quantity_tick_size = 8 [json_name = "minQuantityTickSize", (.gogoproto.nullable) = true, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_min_quantity_tick_size().empty()) {
    const std::string& _s = this->_internal_min_quantity_tick_size();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.SpotMarketParamUpdateProposal.min_quantity_tick_size");
    target = stream->WriteStringMaybeAliased(8, _s, target);
  }

  // .injective.exchange.v1beta1.MarketStatus status = 9 [json_name = "status"];
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        9, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.SpotMarketParamUpdateProposal)
  return target;
}

::size_t SpotMarketParamUpdateProposal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.SpotMarketParamUpdateProposal)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string title = 1 [json_name = "title"];
  if (!this->_internal_title().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_title());
  }

  // string description = 2 [json_name = "description"];
  if (!this->_internal_description().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_description());
  }

  // string market_id = 3 [json_name = "marketId"];
  if (!this->_internal_market_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_market_id());
  }

  // string maker_fee_rate = 4 [json_name = "makerFeeRate", (.gogoproto.nullable) = true, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_maker_fee_rate().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_maker_fee_rate());
  }

  // string taker_fee_rate = 5 [json_name = "takerFeeRate", (.gogoproto.nullable) = true, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_taker_fee_rate().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_taker_fee_rate());
  }

  // string relayer_fee_share_rate = 6 [json_name = "relayerFeeShareRate", (.gogoproto.nullable) = true, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_relayer_fee_share_rate().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_relayer_fee_share_rate());
  }

  // string min_price_tick_size = 7 [json_name = "minPriceTickSize", (.gogoproto.nullable) = true, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_min_price_tick_size().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_min_price_tick_size());
  }

  // string min_quantity_tick_size = 8 [json_name = "minQuantityTickSize", (.gogoproto.nullable) = true, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_min_quantity_tick_size().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_min_quantity_tick_size());
  }

  // .injective.exchange.v1beta1.MarketStatus status = 9 [json_name = "status"];
  if (this->_internal_status() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SpotMarketParamUpdateProposal::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SpotMarketParamUpdateProposal::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SpotMarketParamUpdateProposal::GetClassData() const { return &_class_data_; }


void SpotMarketParamUpdateProposal::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SpotMarketParamUpdateProposal*>(&to_msg);
  auto& from = static_cast<const SpotMarketParamUpdateProposal&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.SpotMarketParamUpdateProposal)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_title().empty()) {
    _this->_internal_set_title(from._internal_title());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  if (!from._internal_market_id().empty()) {
    _this->_internal_set_market_id(from._internal_market_id());
  }
  if (!from._internal_maker_fee_rate().empty()) {
    _this->_internal_set_maker_fee_rate(from._internal_maker_fee_rate());
  }
  if (!from._internal_taker_fee_rate().empty()) {
    _this->_internal_set_taker_fee_rate(from._internal_taker_fee_rate());
  }
  if (!from._internal_relayer_fee_share_rate().empty()) {
    _this->_internal_set_relayer_fee_share_rate(from._internal_relayer_fee_share_rate());
  }
  if (!from._internal_min_price_tick_size().empty()) {
    _this->_internal_set_min_price_tick_size(from._internal_min_price_tick_size());
  }
  if (!from._internal_min_quantity_tick_size().empty()) {
    _this->_internal_set_min_quantity_tick_size(from._internal_min_quantity_tick_size());
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SpotMarketParamUpdateProposal::CopyFrom(const SpotMarketParamUpdateProposal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.SpotMarketParamUpdateProposal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpotMarketParamUpdateProposal::IsInitialized() const {
  return true;
}

void SpotMarketParamUpdateProposal::InternalSwap(SpotMarketParamUpdateProposal* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.title_, lhs_arena,
                                       &other->_impl_.title_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.description_, lhs_arena,
                                       &other->_impl_.description_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.market_id_, lhs_arena,
                                       &other->_impl_.market_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.maker_fee_rate_, lhs_arena,
                                       &other->_impl_.maker_fee_rate_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.taker_fee_rate_, lhs_arena,
                                       &other->_impl_.taker_fee_rate_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.relayer_fee_share_rate_, lhs_arena,
                                       &other->_impl_.relayer_fee_share_rate_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.min_price_tick_size_, lhs_arena,
                                       &other->_impl_.min_price_tick_size_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.min_quantity_tick_size_, lhs_arena,
                                       &other->_impl_.min_quantity_tick_size_, rhs_arena);
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SpotMarketParamUpdateProposal::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2ftx_2eproto[57]);
}
// ===================================================================

class ExchangeEnableProposal::_Internal {
 public:
};

ExchangeEnableProposal::ExchangeEnableProposal(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.ExchangeEnableProposal)
}
ExchangeEnableProposal::ExchangeEnableProposal(const ExchangeEnableProposal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ExchangeEnableProposal* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.title_) {}

    , decltype(_impl_.description_) {}

    , decltype(_impl_.exchangetype_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.title_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_title().empty()) {
    _this->_impl_.title_.Set(from._internal_title(), _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.description_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), _this->GetArenaForAllocation());
  }
  _this->_impl_.exchangetype_ = from._impl_.exchangetype_;
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.ExchangeEnableProposal)
}

inline void ExchangeEnableProposal::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.title_) {}

    , decltype(_impl_.description_) {}

    , decltype(_impl_.exchangetype_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.title_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.description_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ExchangeEnableProposal::~ExchangeEnableProposal() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.ExchangeEnableProposal)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ExchangeEnableProposal::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.title_.Destroy();
  _impl_.description_.Destroy();
}

void ExchangeEnableProposal::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ExchangeEnableProposal::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.ExchangeEnableProposal)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.title_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  _impl_.exchangetype_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExchangeEnableProposal::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string title = 1 [json_name = "title"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.ExchangeEnableProposal.title"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string description = 2 [json_name = "description"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.ExchangeEnableProposal.description"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .injective.exchange.v1beta1.ExchangeType exchangeType = 3 [json_name = "exchangeType"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_exchangetype(static_cast<::injective::exchange::v1beta1::ExchangeType>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ExchangeEnableProposal::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.ExchangeEnableProposal)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string title = 1 [json_name = "title"];
  if (!this->_internal_title().empty()) {
    const std::string& _s = this->_internal_title();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.ExchangeEnableProposal.title");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string description = 2 [json_name = "description"];
  if (!this->_internal_description().empty()) {
    const std::string& _s = this->_internal_description();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.ExchangeEnableProposal.description");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // .injective.exchange.v1beta1.ExchangeType exchangeType = 3 [json_name = "exchangeType"];
  if (this->_internal_exchangetype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        3, this->_internal_exchangetype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.ExchangeEnableProposal)
  return target;
}

::size_t ExchangeEnableProposal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.ExchangeEnableProposal)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string title = 1 [json_name = "title"];
  if (!this->_internal_title().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_title());
  }

  // string description = 2 [json_name = "description"];
  if (!this->_internal_description().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_description());
  }

  // .injective.exchange.v1beta1.ExchangeType exchangeType = 3 [json_name = "exchangeType"];
  if (this->_internal_exchangetype() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_exchangetype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExchangeEnableProposal::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ExchangeEnableProposal::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExchangeEnableProposal::GetClassData() const { return &_class_data_; }


void ExchangeEnableProposal::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ExchangeEnableProposal*>(&to_msg);
  auto& from = static_cast<const ExchangeEnableProposal&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.ExchangeEnableProposal)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_title().empty()) {
    _this->_internal_set_title(from._internal_title());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  if (from._internal_exchangetype() != 0) {
    _this->_internal_set_exchangetype(from._internal_exchangetype());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExchangeEnableProposal::CopyFrom(const ExchangeEnableProposal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.ExchangeEnableProposal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExchangeEnableProposal::IsInitialized() const {
  return true;
}

void ExchangeEnableProposal::InternalSwap(ExchangeEnableProposal* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.title_, lhs_arena,
                                       &other->_impl_.title_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.description_, lhs_arena,
                                       &other->_impl_.description_, rhs_arena);
  swap(_impl_.exchangetype_, other->_impl_.exchangetype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ExchangeEnableProposal::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2ftx_2eproto[58]);
}
// ===================================================================

class BatchExchangeModificationProposal::_Internal {
 public:
  using HasBits = decltype(std::declval<BatchExchangeModificationProposal>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(BatchExchangeModificationProposal, _impl_._has_bits_);
  static const ::injective::exchange::v1beta1::TradingRewardCampaignUpdateProposal& trading_reward_campaign_update_proposal(const BatchExchangeModificationProposal* msg);
  static void set_has_trading_reward_campaign_update_proposal(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::injective::exchange::v1beta1::UpdateDenomDecimalsProposal& denom_decimals_update_proposal(const BatchExchangeModificationProposal* msg);
  static void set_has_denom_decimals_update_proposal(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::injective::exchange::v1beta1::TradingRewardCampaignUpdateProposal&
BatchExchangeModificationProposal::_Internal::trading_reward_campaign_update_proposal(const BatchExchangeModificationProposal* msg) {
  return *msg->_impl_.trading_reward_campaign_update_proposal_;
}
const ::injective::exchange::v1beta1::UpdateDenomDecimalsProposal&
BatchExchangeModificationProposal::_Internal::denom_decimals_update_proposal(const BatchExchangeModificationProposal* msg) {
  return *msg->_impl_.denom_decimals_update_proposal_;
}
BatchExchangeModificationProposal::BatchExchangeModificationProposal(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.BatchExchangeModificationProposal)
}
BatchExchangeModificationProposal::BatchExchangeModificationProposal(const BatchExchangeModificationProposal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BatchExchangeModificationProposal* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.spot_market_param_update_proposals_){from._impl_.spot_market_param_update_proposals_}
    , decltype(_impl_.derivative_market_param_update_proposals_){from._impl_.derivative_market_param_update_proposals_}
    , decltype(_impl_.spot_market_launch_proposals_){from._impl_.spot_market_launch_proposals_}
    , decltype(_impl_.perpetual_market_launch_proposals_){from._impl_.perpetual_market_launch_proposals_}
    , decltype(_impl_.expiry_futures_market_launch_proposals_){from._impl_.expiry_futures_market_launch_proposals_}
    , decltype(_impl_.binary_options_market_launch_proposals_){from._impl_.binary_options_market_launch_proposals_}
    , decltype(_impl_.binary_options_param_update_proposals_){from._impl_.binary_options_param_update_proposals_}
    , decltype(_impl_.title_) {}

    , decltype(_impl_.description_) {}

    , decltype(_impl_.trading_reward_campaign_update_proposal_){nullptr}
    , decltype(_impl_.denom_decimals_update_proposal_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.title_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_title().empty()) {
    _this->_impl_.title_.Set(from._internal_title(), _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.description_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.trading_reward_campaign_update_proposal_ = new ::injective::exchange::v1beta1::TradingRewardCampaignUpdateProposal(*from._impl_.trading_reward_campaign_update_proposal_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.denom_decimals_update_proposal_ = new ::injective::exchange::v1beta1::UpdateDenomDecimalsProposal(*from._impl_.denom_decimals_update_proposal_);
  }
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.BatchExchangeModificationProposal)
}

inline void BatchExchangeModificationProposal::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.spot_market_param_update_proposals_){arena}
    , decltype(_impl_.derivative_market_param_update_proposals_){arena}
    , decltype(_impl_.spot_market_launch_proposals_){arena}
    , decltype(_impl_.perpetual_market_launch_proposals_){arena}
    , decltype(_impl_.expiry_futures_market_launch_proposals_){arena}
    , decltype(_impl_.binary_options_market_launch_proposals_){arena}
    , decltype(_impl_.binary_options_param_update_proposals_){arena}
    , decltype(_impl_.title_) {}

    , decltype(_impl_.description_) {}

    , decltype(_impl_.trading_reward_campaign_update_proposal_){nullptr}
    , decltype(_impl_.denom_decimals_update_proposal_){nullptr}
  };
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.title_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.description_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BatchExchangeModificationProposal::~BatchExchangeModificationProposal() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.BatchExchangeModificationProposal)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BatchExchangeModificationProposal::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_spot_market_param_update_proposals()->~RepeatedPtrField();
  _internal_mutable_derivative_market_param_update_proposals()->~RepeatedPtrField();
  _internal_mutable_spot_market_launch_proposals()->~RepeatedPtrField();
  _internal_mutable_perpetual_market_launch_proposals()->~RepeatedPtrField();
  _internal_mutable_expiry_futures_market_launch_proposals()->~RepeatedPtrField();
  _internal_mutable_binary_options_market_launch_proposals()->~RepeatedPtrField();
  _internal_mutable_binary_options_param_update_proposals()->~RepeatedPtrField();
  _impl_.title_.Destroy();
  _impl_.description_.Destroy();
  if (this != internal_default_instance()) delete _impl_.trading_reward_campaign_update_proposal_;
  if (this != internal_default_instance()) delete _impl_.denom_decimals_update_proposal_;
}

void BatchExchangeModificationProposal::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BatchExchangeModificationProposal::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.BatchExchangeModificationProposal)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_spot_market_param_update_proposals()->Clear();
  _internal_mutable_derivative_market_param_update_proposals()->Clear();
  _internal_mutable_spot_market_launch_proposals()->Clear();
  _internal_mutable_perpetual_market_launch_proposals()->Clear();
  _internal_mutable_expiry_futures_market_launch_proposals()->Clear();
  _internal_mutable_binary_options_market_launch_proposals()->Clear();
  _internal_mutable_binary_options_param_update_proposals()->Clear();
  _impl_.title_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.trading_reward_campaign_update_proposal_ != nullptr);
      _impl_.trading_reward_campaign_update_proposal_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.denom_decimals_update_proposal_ != nullptr);
      _impl_.denom_decimals_update_proposal_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BatchExchangeModificationProposal::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string title = 1 [json_name = "title"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.BatchExchangeModificationProposal.title"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string description = 2 [json_name = "description"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.BatchExchangeModificationProposal.description"));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .injective.exchange.v1beta1.SpotMarketParamUpdateProposal spot_market_param_update_proposals = 3 [json_name = "spotMarketParamUpdateProposals"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_spot_market_param_update_proposals(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .injective.exchange.v1beta1.DerivativeMarketParamUpdateProposal derivative_market_param_update_proposals = 4 [json_name = "derivativeMarketParamUpdateProposals"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_derivative_market_param_update_proposals(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .injective.exchange.v1beta1.SpotMarketLaunchProposal spot_market_launch_proposals = 5 [json_name = "spotMarketLaunchProposals"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_spot_market_launch_proposals(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .injective.exchange.v1beta1.PerpetualMarketLaunchProposal perpetual_market_launch_proposals = 6 [json_name = "perpetualMarketLaunchProposals"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_perpetual_market_launch_proposals(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .injective.exchange.v1beta1.ExpiryFuturesMarketLaunchProposal expiry_futures_market_launch_proposals = 7 [json_name = "expiryFuturesMarketLaunchProposals"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_expiry_futures_market_launch_proposals(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // .injective.exchange.v1beta1.TradingRewardCampaignUpdateProposal trading_reward_campaign_update_proposal = 8 [json_name = "tradingRewardCampaignUpdateProposal"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_trading_reward_campaign_update_proposal(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .injective.exchange.v1beta1.BinaryOptionsMarketLaunchProposal binary_options_market_launch_proposals = 9 [json_name = "binaryOptionsMarketLaunchProposals"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_binary_options_market_launch_proposals(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .injective.exchange.v1beta1.BinaryOptionsMarketParamUpdateProposal binary_options_param_update_proposals = 10 [json_name = "binaryOptionsParamUpdateProposals"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_binary_options_param_update_proposals(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // .injective.exchange.v1beta1.UpdateDenomDecimalsProposal denom_decimals_update_proposal = 11 [json_name = "denomDecimalsUpdateProposal"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_denom_decimals_update_proposal(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* BatchExchangeModificationProposal::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.BatchExchangeModificationProposal)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string title = 1 [json_name = "title"];
  if (!this->_internal_title().empty()) {
    const std::string& _s = this->_internal_title();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.BatchExchangeModificationProposal.title");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string description = 2 [json_name = "description"];
  if (!this->_internal_description().empty()) {
    const std::string& _s = this->_internal_description();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.BatchExchangeModificationProposal.description");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // repeated .injective.exchange.v1beta1.SpotMarketParamUpdateProposal spot_market_param_update_proposals = 3 [json_name = "spotMarketParamUpdateProposals"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_spot_market_param_update_proposals_size()); i < n; i++) {
    const auto& repfield = this->_internal_spot_market_param_update_proposals(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .injective.exchange.v1beta1.DerivativeMarketParamUpdateProposal derivative_market_param_update_proposals = 4 [json_name = "derivativeMarketParamUpdateProposals"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_derivative_market_param_update_proposals_size()); i < n; i++) {
    const auto& repfield = this->_internal_derivative_market_param_update_proposals(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .injective.exchange.v1beta1.SpotMarketLaunchProposal spot_market_launch_proposals = 5 [json_name = "spotMarketLaunchProposals"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_spot_market_launch_proposals_size()); i < n; i++) {
    const auto& repfield = this->_internal_spot_market_launch_proposals(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .injective.exchange.v1beta1.PerpetualMarketLaunchProposal perpetual_market_launch_proposals = 6 [json_name = "perpetualMarketLaunchProposals"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_perpetual_market_launch_proposals_size()); i < n; i++) {
    const auto& repfield = this->_internal_perpetual_market_launch_proposals(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .injective.exchange.v1beta1.ExpiryFuturesMarketLaunchProposal expiry_futures_market_launch_proposals = 7 [json_name = "expiryFuturesMarketLaunchProposals"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_expiry_futures_market_launch_proposals_size()); i < n; i++) {
    const auto& repfield = this->_internal_expiry_futures_market_launch_proposals(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .injective.exchange.v1beta1.TradingRewardCampaignUpdateProposal trading_reward_campaign_update_proposal = 8 [json_name = "tradingRewardCampaignUpdateProposal"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::trading_reward_campaign_update_proposal(this),
        _Internal::trading_reward_campaign_update_proposal(this).GetCachedSize(), target, stream);
  }

  // repeated .injective.exchange.v1beta1.BinaryOptionsMarketLaunchProposal binary_options_market_launch_proposals = 9 [json_name = "binaryOptionsMarketLaunchProposals"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_binary_options_market_launch_proposals_size()); i < n; i++) {
    const auto& repfield = this->_internal_binary_options_market_launch_proposals(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .injective.exchange.v1beta1.BinaryOptionsMarketParamUpdateProposal binary_options_param_update_proposals = 10 [json_name = "binaryOptionsParamUpdateProposals"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_binary_options_param_update_proposals_size()); i < n; i++) {
    const auto& repfield = this->_internal_binary_options_param_update_proposals(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(10, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .injective.exchange.v1beta1.UpdateDenomDecimalsProposal denom_decimals_update_proposal = 11 [json_name = "denomDecimalsUpdateProposal"];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::denom_decimals_update_proposal(this),
        _Internal::denom_decimals_update_proposal(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.BatchExchangeModificationProposal)
  return target;
}

::size_t BatchExchangeModificationProposal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.BatchExchangeModificationProposal)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .injective.exchange.v1beta1.SpotMarketParamUpdateProposal spot_market_param_update_proposals = 3 [json_name = "spotMarketParamUpdateProposals"];
  total_size += 1UL * this->_internal_spot_market_param_update_proposals_size();
  for (const auto& msg : this->_internal_spot_market_param_update_proposals()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .injective.exchange.v1beta1.DerivativeMarketParamUpdateProposal derivative_market_param_update_proposals = 4 [json_name = "derivativeMarketParamUpdateProposals"];
  total_size += 1UL * this->_internal_derivative_market_param_update_proposals_size();
  for (const auto& msg : this->_internal_derivative_market_param_update_proposals()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .injective.exchange.v1beta1.SpotMarketLaunchProposal spot_market_launch_proposals = 5 [json_name = "spotMarketLaunchProposals"];
  total_size += 1UL * this->_internal_spot_market_launch_proposals_size();
  for (const auto& msg : this->_internal_spot_market_launch_proposals()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .injective.exchange.v1beta1.PerpetualMarketLaunchProposal perpetual_market_launch_proposals = 6 [json_name = "perpetualMarketLaunchProposals"];
  total_size += 1UL * this->_internal_perpetual_market_launch_proposals_size();
  for (const auto& msg : this->_internal_perpetual_market_launch_proposals()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .injective.exchange.v1beta1.ExpiryFuturesMarketLaunchProposal expiry_futures_market_launch_proposals = 7 [json_name = "expiryFuturesMarketLaunchProposals"];
  total_size += 1UL * this->_internal_expiry_futures_market_launch_proposals_size();
  for (const auto& msg : this->_internal_expiry_futures_market_launch_proposals()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .injective.exchange.v1beta1.BinaryOptionsMarketLaunchProposal binary_options_market_launch_proposals = 9 [json_name = "binaryOptionsMarketLaunchProposals"];
  total_size += 1UL * this->_internal_binary_options_market_launch_proposals_size();
  for (const auto& msg : this->_internal_binary_options_market_launch_proposals()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .injective.exchange.v1beta1.BinaryOptionsMarketParamUpdateProposal binary_options_param_update_proposals = 10 [json_name = "binaryOptionsParamUpdateProposals"];
  total_size += 1UL * this->_internal_binary_options_param_update_proposals_size();
  for (const auto& msg : this->_internal_binary_options_param_update_proposals()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string title = 1 [json_name = "title"];
  if (!this->_internal_title().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_title());
  }

  // string description = 2 [json_name = "description"];
  if (!this->_internal_description().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_description());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .injective.exchange.v1beta1.TradingRewardCampaignUpdateProposal trading_reward_campaign_update_proposal = 8 [json_name = "tradingRewardCampaignUpdateProposal"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.trading_reward_campaign_update_proposal_);
    }

    // .injective.exchange.v1beta1.UpdateDenomDecimalsProposal denom_decimals_update_proposal = 11 [json_name = "denomDecimalsUpdateProposal"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.denom_decimals_update_proposal_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BatchExchangeModificationProposal::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BatchExchangeModificationProposal::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BatchExchangeModificationProposal::GetClassData() const { return &_class_data_; }


void BatchExchangeModificationProposal::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BatchExchangeModificationProposal*>(&to_msg);
  auto& from = static_cast<const BatchExchangeModificationProposal&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.BatchExchangeModificationProposal)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_spot_market_param_update_proposals()->MergeFrom(from._internal_spot_market_param_update_proposals());
  _this->_internal_mutable_derivative_market_param_update_proposals()->MergeFrom(from._internal_derivative_market_param_update_proposals());
  _this->_internal_mutable_spot_market_launch_proposals()->MergeFrom(from._internal_spot_market_launch_proposals());
  _this->_internal_mutable_perpetual_market_launch_proposals()->MergeFrom(from._internal_perpetual_market_launch_proposals());
  _this->_internal_mutable_expiry_futures_market_launch_proposals()->MergeFrom(from._internal_expiry_futures_market_launch_proposals());
  _this->_internal_mutable_binary_options_market_launch_proposals()->MergeFrom(from._internal_binary_options_market_launch_proposals());
  _this->_internal_mutable_binary_options_param_update_proposals()->MergeFrom(from._internal_binary_options_param_update_proposals());
  if (!from._internal_title().empty()) {
    _this->_internal_set_title(from._internal_title());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_trading_reward_campaign_update_proposal()->::injective::exchange::v1beta1::TradingRewardCampaignUpdateProposal::MergeFrom(
          from._internal_trading_reward_campaign_update_proposal());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_denom_decimals_update_proposal()->::injective::exchange::v1beta1::UpdateDenomDecimalsProposal::MergeFrom(
          from._internal_denom_decimals_update_proposal());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BatchExchangeModificationProposal::CopyFrom(const BatchExchangeModificationProposal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.BatchExchangeModificationProposal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchExchangeModificationProposal::IsInitialized() const {
  return true;
}

void BatchExchangeModificationProposal::InternalSwap(BatchExchangeModificationProposal* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_spot_market_param_update_proposals()->InternalSwap(other->_internal_mutable_spot_market_param_update_proposals());
  _internal_mutable_derivative_market_param_update_proposals()->InternalSwap(other->_internal_mutable_derivative_market_param_update_proposals());
  _internal_mutable_spot_market_launch_proposals()->InternalSwap(other->_internal_mutable_spot_market_launch_proposals());
  _internal_mutable_perpetual_market_launch_proposals()->InternalSwap(other->_internal_mutable_perpetual_market_launch_proposals());
  _internal_mutable_expiry_futures_market_launch_proposals()->InternalSwap(other->_internal_mutable_expiry_futures_market_launch_proposals());
  _internal_mutable_binary_options_market_launch_proposals()->InternalSwap(other->_internal_mutable_binary_options_market_launch_proposals());
  _internal_mutable_binary_options_param_update_proposals()->InternalSwap(other->_internal_mutable_binary_options_param_update_proposals());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.title_, lhs_arena,
                                       &other->_impl_.title_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.description_, lhs_arena,
                                       &other->_impl_.description_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BatchExchangeModificationProposal, _impl_.denom_decimals_update_proposal_)
      + sizeof(BatchExchangeModificationProposal::_impl_.denom_decimals_update_proposal_)
      - PROTOBUF_FIELD_OFFSET(BatchExchangeModificationProposal, _impl_.trading_reward_campaign_update_proposal_)>(
          reinterpret_cast<char*>(&_impl_.trading_reward_campaign_update_proposal_),
          reinterpret_cast<char*>(&other->_impl_.trading_reward_campaign_update_proposal_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BatchExchangeModificationProposal::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2ftx_2eproto[59]);
}
// ===================================================================

class SpotMarketLaunchProposal::_Internal {
 public:
};

SpotMarketLaunchProposal::SpotMarketLaunchProposal(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.SpotMarketLaunchProposal)
}
SpotMarketLaunchProposal::SpotMarketLaunchProposal(const SpotMarketLaunchProposal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SpotMarketLaunchProposal* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.title_) {}

    , decltype(_impl_.description_) {}

    , decltype(_impl_.ticker_) {}

    , decltype(_impl_.base_denom_) {}

    , decltype(_impl_.quote_denom_) {}

    , decltype(_impl_.min_price_tick_size_) {}

    , decltype(_impl_.min_quantity_tick_size_) {}

    , decltype(_impl_.maker_fee_rate_) {}

    , decltype(_impl_.taker_fee_rate_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.title_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_title().empty()) {
    _this->_impl_.title_.Set(from._internal_title(), _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.description_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), _this->GetArenaForAllocation());
  }
  _impl_.ticker_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.ticker_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ticker().empty()) {
    _this->_impl_.ticker_.Set(from._internal_ticker(), _this->GetArenaForAllocation());
  }
  _impl_.base_denom_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.base_denom_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_base_denom().empty()) {
    _this->_impl_.base_denom_.Set(from._internal_base_denom(), _this->GetArenaForAllocation());
  }
  _impl_.quote_denom_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.quote_denom_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_quote_denom().empty()) {
    _this->_impl_.quote_denom_.Set(from._internal_quote_denom(), _this->GetArenaForAllocation());
  }
  _impl_.min_price_tick_size_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.min_price_tick_size_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_min_price_tick_size().empty()) {
    _this->_impl_.min_price_tick_size_.Set(from._internal_min_price_tick_size(), _this->GetArenaForAllocation());
  }
  _impl_.min_quantity_tick_size_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.min_quantity_tick_size_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_min_quantity_tick_size().empty()) {
    _this->_impl_.min_quantity_tick_size_.Set(from._internal_min_quantity_tick_size(), _this->GetArenaForAllocation());
  }
  _impl_.maker_fee_rate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.maker_fee_rate_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_maker_fee_rate().empty()) {
    _this->_impl_.maker_fee_rate_.Set(from._internal_maker_fee_rate(), _this->GetArenaForAllocation());
  }
  _impl_.taker_fee_rate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.taker_fee_rate_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_taker_fee_rate().empty()) {
    _this->_impl_.taker_fee_rate_.Set(from._internal_taker_fee_rate(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.SpotMarketLaunchProposal)
}

inline void SpotMarketLaunchProposal::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.title_) {}

    , decltype(_impl_.description_) {}

    , decltype(_impl_.ticker_) {}

    , decltype(_impl_.base_denom_) {}

    , decltype(_impl_.quote_denom_) {}

    , decltype(_impl_.min_price_tick_size_) {}

    , decltype(_impl_.min_quantity_tick_size_) {}

    , decltype(_impl_.maker_fee_rate_) {}

    , decltype(_impl_.taker_fee_rate_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.title_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.description_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ticker_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.ticker_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.base_denom_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.base_denom_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.quote_denom_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.quote_denom_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.min_price_tick_size_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.min_price_tick_size_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.min_quantity_tick_size_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.min_quantity_tick_size_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.maker_fee_rate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.maker_fee_rate_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.taker_fee_rate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.taker_fee_rate_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SpotMarketLaunchProposal::~SpotMarketLaunchProposal() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.SpotMarketLaunchProposal)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SpotMarketLaunchProposal::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.title_.Destroy();
  _impl_.description_.Destroy();
  _impl_.ticker_.Destroy();
  _impl_.base_denom_.Destroy();
  _impl_.quote_denom_.Destroy();
  _impl_.min_price_tick_size_.Destroy();
  _impl_.min_quantity_tick_size_.Destroy();
  _impl_.maker_fee_rate_.Destroy();
  _impl_.taker_fee_rate_.Destroy();
}

void SpotMarketLaunchProposal::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SpotMarketLaunchProposal::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.SpotMarketLaunchProposal)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.title_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  _impl_.ticker_.ClearToEmpty();
  _impl_.base_denom_.ClearToEmpty();
  _impl_.quote_denom_.ClearToEmpty();
  _impl_.min_price_tick_size_.ClearToEmpty();
  _impl_.min_quantity_tick_size_.ClearToEmpty();
  _impl_.maker_fee_rate_.ClearToEmpty();
  _impl_.taker_fee_rate_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpotMarketLaunchProposal::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string title = 1 [json_name = "title"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.SpotMarketLaunchProposal.title"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string description = 2 [json_name = "description"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.SpotMarketLaunchProposal.description"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string ticker = 3 [json_name = "ticker"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_ticker();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.SpotMarketLaunchProposal.ticker"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string base_denom = 4 [json_name = "baseDenom"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_base_denom();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.SpotMarketLaunchProposal.base_denom"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string quote_denom = 5 [json_name = "quoteDenom"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_quote_denom();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.SpotMarketLaunchProposal.quote_denom"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string min_price_tick_size = 6 [json_name = "minPriceTickSize", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_min_price_tick_size();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.SpotMarketLaunchProposal.min_price_tick_size"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string min_quantity_tick_size = 7 [json_name = "minQuantityTickSize", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_min_quantity_tick_size();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.SpotMarketLaunchProposal.min_quantity_tick_size"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string maker_fee_rate = 8 [json_name = "makerFeeRate", (.gogoproto.nullable) = true, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_maker_fee_rate();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.SpotMarketLaunchProposal.maker_fee_rate"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string taker_fee_rate = 9 [json_name = "takerFeeRate", (.gogoproto.nullable) = true, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_taker_fee_rate();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.SpotMarketLaunchProposal.taker_fee_rate"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SpotMarketLaunchProposal::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.SpotMarketLaunchProposal)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string title = 1 [json_name = "title"];
  if (!this->_internal_title().empty()) {
    const std::string& _s = this->_internal_title();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.SpotMarketLaunchProposal.title");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string description = 2 [json_name = "description"];
  if (!this->_internal_description().empty()) {
    const std::string& _s = this->_internal_description();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.SpotMarketLaunchProposal.description");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string ticker = 3 [json_name = "ticker"];
  if (!this->_internal_ticker().empty()) {
    const std::string& _s = this->_internal_ticker();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.SpotMarketLaunchProposal.ticker");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string base_denom = 4 [json_name = "baseDenom"];
  if (!this->_internal_base_denom().empty()) {
    const std::string& _s = this->_internal_base_denom();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.SpotMarketLaunchProposal.base_denom");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // string quote_denom = 5 [json_name = "quoteDenom"];
  if (!this->_internal_quote_denom().empty()) {
    const std::string& _s = this->_internal_quote_denom();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.SpotMarketLaunchProposal.quote_denom");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // string min_price_tick_size = 6 [json_name = "minPriceTickSize", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_min_price_tick_size().empty()) {
    const std::string& _s = this->_internal_min_price_tick_size();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.SpotMarketLaunchProposal.min_price_tick_size");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  // string min_quantity_tick_size = 7 [json_name = "minQuantityTickSize", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_min_quantity_tick_size().empty()) {
    const std::string& _s = this->_internal_min_quantity_tick_size();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.SpotMarketLaunchProposal.min_quantity_tick_size");
    target = stream->WriteStringMaybeAliased(7, _s, target);
  }

  // string maker_fee_rate = 8 [json_name = "makerFeeRate", (.gogoproto.nullable) = true, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_maker_fee_rate().empty()) {
    const std::string& _s = this->_internal_maker_fee_rate();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.SpotMarketLaunchProposal.maker_fee_rate");
    target = stream->WriteStringMaybeAliased(8, _s, target);
  }

  // string taker_fee_rate = 9 [json_name = "takerFeeRate", (.gogoproto.nullable) = true, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_taker_fee_rate().empty()) {
    const std::string& _s = this->_internal_taker_fee_rate();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.SpotMarketLaunchProposal.taker_fee_rate");
    target = stream->WriteStringMaybeAliased(9, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.SpotMarketLaunchProposal)
  return target;
}

::size_t SpotMarketLaunchProposal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.SpotMarketLaunchProposal)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string title = 1 [json_name = "title"];
  if (!this->_internal_title().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_title());
  }

  // string description = 2 [json_name = "description"];
  if (!this->_internal_description().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_description());
  }

  // string ticker = 3 [json_name = "ticker"];
  if (!this->_internal_ticker().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_ticker());
  }

  // string base_denom = 4 [json_name = "baseDenom"];
  if (!this->_internal_base_denom().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_base_denom());
  }

  // string quote_denom = 5 [json_name = "quoteDenom"];
  if (!this->_internal_quote_denom().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_quote_denom());
  }

  // string min_price_tick_size = 6 [json_name = "minPriceTickSize", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_min_price_tick_size().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_min_price_tick_size());
  }

  // string min_quantity_tick_size = 7 [json_name = "minQuantityTickSize", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_min_quantity_tick_size().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_min_quantity_tick_size());
  }

  // string maker_fee_rate = 8 [json_name = "makerFeeRate", (.gogoproto.nullable) = true, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_maker_fee_rate().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_maker_fee_rate());
  }

  // string taker_fee_rate = 9 [json_name = "takerFeeRate", (.gogoproto.nullable) = true, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_taker_fee_rate().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_taker_fee_rate());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SpotMarketLaunchProposal::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SpotMarketLaunchProposal::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SpotMarketLaunchProposal::GetClassData() const { return &_class_data_; }


void SpotMarketLaunchProposal::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SpotMarketLaunchProposal*>(&to_msg);
  auto& from = static_cast<const SpotMarketLaunchProposal&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.SpotMarketLaunchProposal)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_title().empty()) {
    _this->_internal_set_title(from._internal_title());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  if (!from._internal_ticker().empty()) {
    _this->_internal_set_ticker(from._internal_ticker());
  }
  if (!from._internal_base_denom().empty()) {
    _this->_internal_set_base_denom(from._internal_base_denom());
  }
  if (!from._internal_quote_denom().empty()) {
    _this->_internal_set_quote_denom(from._internal_quote_denom());
  }
  if (!from._internal_min_price_tick_size().empty()) {
    _this->_internal_set_min_price_tick_size(from._internal_min_price_tick_size());
  }
  if (!from._internal_min_quantity_tick_size().empty()) {
    _this->_internal_set_min_quantity_tick_size(from._internal_min_quantity_tick_size());
  }
  if (!from._internal_maker_fee_rate().empty()) {
    _this->_internal_set_maker_fee_rate(from._internal_maker_fee_rate());
  }
  if (!from._internal_taker_fee_rate().empty()) {
    _this->_internal_set_taker_fee_rate(from._internal_taker_fee_rate());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SpotMarketLaunchProposal::CopyFrom(const SpotMarketLaunchProposal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.SpotMarketLaunchProposal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpotMarketLaunchProposal::IsInitialized() const {
  return true;
}

void SpotMarketLaunchProposal::InternalSwap(SpotMarketLaunchProposal* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.title_, lhs_arena,
                                       &other->_impl_.title_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.description_, lhs_arena,
                                       &other->_impl_.description_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.ticker_, lhs_arena,
                                       &other->_impl_.ticker_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.base_denom_, lhs_arena,
                                       &other->_impl_.base_denom_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.quote_denom_, lhs_arena,
                                       &other->_impl_.quote_denom_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.min_price_tick_size_, lhs_arena,
                                       &other->_impl_.min_price_tick_size_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.min_quantity_tick_size_, lhs_arena,
                                       &other->_impl_.min_quantity_tick_size_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.maker_fee_rate_, lhs_arena,
                                       &other->_impl_.maker_fee_rate_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.taker_fee_rate_, lhs_arena,
                                       &other->_impl_.taker_fee_rate_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata SpotMarketLaunchProposal::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2ftx_2eproto[60]);
}
// ===================================================================

class PerpetualMarketLaunchProposal::_Internal {
 public:
};

PerpetualMarketLaunchProposal::PerpetualMarketLaunchProposal(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.PerpetualMarketLaunchProposal)
}
PerpetualMarketLaunchProposal::PerpetualMarketLaunchProposal(const PerpetualMarketLaunchProposal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PerpetualMarketLaunchProposal* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.title_) {}

    , decltype(_impl_.description_) {}

    , decltype(_impl_.ticker_) {}

    , decltype(_impl_.quote_denom_) {}

    , decltype(_impl_.oracle_base_) {}

    , decltype(_impl_.oracle_quote_) {}

    , decltype(_impl_.initial_margin_ratio_) {}

    , decltype(_impl_.maintenance_margin_ratio_) {}

    , decltype(_impl_.maker_fee_rate_) {}

    , decltype(_impl_.taker_fee_rate_) {}

    , decltype(_impl_.min_price_tick_size_) {}

    , decltype(_impl_.min_quantity_tick_size_) {}

    , decltype(_impl_.oracle_scale_factor_) {}

    , decltype(_impl_.oracle_type_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.title_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_title().empty()) {
    _this->_impl_.title_.Set(from._internal_title(), _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.description_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), _this->GetArenaForAllocation());
  }
  _impl_.ticker_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.ticker_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ticker().empty()) {
    _this->_impl_.ticker_.Set(from._internal_ticker(), _this->GetArenaForAllocation());
  }
  _impl_.quote_denom_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.quote_denom_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_quote_denom().empty()) {
    _this->_impl_.quote_denom_.Set(from._internal_quote_denom(), _this->GetArenaForAllocation());
  }
  _impl_.oracle_base_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.oracle_base_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_oracle_base().empty()) {
    _this->_impl_.oracle_base_.Set(from._internal_oracle_base(), _this->GetArenaForAllocation());
  }
  _impl_.oracle_quote_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.oracle_quote_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_oracle_quote().empty()) {
    _this->_impl_.oracle_quote_.Set(from._internal_oracle_quote(), _this->GetArenaForAllocation());
  }
  _impl_.initial_margin_ratio_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.initial_margin_ratio_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_initial_margin_ratio().empty()) {
    _this->_impl_.initial_margin_ratio_.Set(from._internal_initial_margin_ratio(), _this->GetArenaForAllocation());
  }
  _impl_.maintenance_margin_ratio_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.maintenance_margin_ratio_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_maintenance_margin_ratio().empty()) {
    _this->_impl_.maintenance_margin_ratio_.Set(from._internal_maintenance_margin_ratio(), _this->GetArenaForAllocation());
  }
  _impl_.maker_fee_rate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.maker_fee_rate_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_maker_fee_rate().empty()) {
    _this->_impl_.maker_fee_rate_.Set(from._internal_maker_fee_rate(), _this->GetArenaForAllocation());
  }
  _impl_.taker_fee_rate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.taker_fee_rate_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_taker_fee_rate().empty()) {
    _this->_impl_.taker_fee_rate_.Set(from._internal_taker_fee_rate(), _this->GetArenaForAllocation());
  }
  _impl_.min_price_tick_size_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.min_price_tick_size_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_min_price_tick_size().empty()) {
    _this->_impl_.min_price_tick_size_.Set(from._internal_min_price_tick_size(), _this->GetArenaForAllocation());
  }
  _impl_.min_quantity_tick_size_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.min_quantity_tick_size_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_min_quantity_tick_size().empty()) {
    _this->_impl_.min_quantity_tick_size_.Set(from._internal_min_quantity_tick_size(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.oracle_scale_factor_, &from._impl_.oracle_scale_factor_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.oracle_type_) -
    reinterpret_cast<char*>(&_impl_.oracle_scale_factor_)) + sizeof(_impl_.oracle_type_));
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.PerpetualMarketLaunchProposal)
}

inline void PerpetualMarketLaunchProposal::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.title_) {}

    , decltype(_impl_.description_) {}

    , decltype(_impl_.ticker_) {}

    , decltype(_impl_.quote_denom_) {}

    , decltype(_impl_.oracle_base_) {}

    , decltype(_impl_.oracle_quote_) {}

    , decltype(_impl_.initial_margin_ratio_) {}

    , decltype(_impl_.maintenance_margin_ratio_) {}

    , decltype(_impl_.maker_fee_rate_) {}

    , decltype(_impl_.taker_fee_rate_) {}

    , decltype(_impl_.min_price_tick_size_) {}

    , decltype(_impl_.min_quantity_tick_size_) {}

    , decltype(_impl_.oracle_scale_factor_) { 0u }

    , decltype(_impl_.oracle_type_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.title_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.description_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ticker_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.ticker_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.quote_denom_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.quote_denom_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.oracle_base_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.oracle_base_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.oracle_quote_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.oracle_quote_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.initial_margin_ratio_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.initial_margin_ratio_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.maintenance_margin_ratio_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.maintenance_margin_ratio_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.maker_fee_rate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.maker_fee_rate_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.taker_fee_rate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.taker_fee_rate_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.min_price_tick_size_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.min_price_tick_size_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.min_quantity_tick_size_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.min_quantity_tick_size_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PerpetualMarketLaunchProposal::~PerpetualMarketLaunchProposal() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.PerpetualMarketLaunchProposal)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PerpetualMarketLaunchProposal::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.title_.Destroy();
  _impl_.description_.Destroy();
  _impl_.ticker_.Destroy();
  _impl_.quote_denom_.Destroy();
  _impl_.oracle_base_.Destroy();
  _impl_.oracle_quote_.Destroy();
  _impl_.initial_margin_ratio_.Destroy();
  _impl_.maintenance_margin_ratio_.Destroy();
  _impl_.maker_fee_rate_.Destroy();
  _impl_.taker_fee_rate_.Destroy();
  _impl_.min_price_tick_size_.Destroy();
  _impl_.min_quantity_tick_size_.Destroy();
}

void PerpetualMarketLaunchProposal::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PerpetualMarketLaunchProposal::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.PerpetualMarketLaunchProposal)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.title_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  _impl_.ticker_.ClearToEmpty();
  _impl_.quote_denom_.ClearToEmpty();
  _impl_.oracle_base_.ClearToEmpty();
  _impl_.oracle_quote_.ClearToEmpty();
  _impl_.initial_margin_ratio_.ClearToEmpty();
  _impl_.maintenance_margin_ratio_.ClearToEmpty();
  _impl_.maker_fee_rate_.ClearToEmpty();
  _impl_.taker_fee_rate_.ClearToEmpty();
  _impl_.min_price_tick_size_.ClearToEmpty();
  _impl_.min_quantity_tick_size_.ClearToEmpty();
  ::memset(&_impl_.oracle_scale_factor_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.oracle_type_) -
      reinterpret_cast<char*>(&_impl_.oracle_scale_factor_)) + sizeof(_impl_.oracle_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PerpetualMarketLaunchProposal::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string title = 1 [json_name = "title"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.PerpetualMarketLaunchProposal.title"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string description = 2 [json_name = "description"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.PerpetualMarketLaunchProposal.description"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string ticker = 3 [json_name = "ticker"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_ticker();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.PerpetualMarketLaunchProposal.ticker"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string quote_denom = 4 [json_name = "quoteDenom"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_quote_denom();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.PerpetualMarketLaunchProposal.quote_denom"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string oracle_base = 5 [json_name = "oracleBase"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_oracle_base();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.PerpetualMarketLaunchProposal.oracle_base"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string oracle_quote = 6 [json_name = "oracleQuote"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_oracle_quote();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.PerpetualMarketLaunchProposal.oracle_quote"));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 oracle_scale_factor = 7 [json_name = "oracleScaleFactor"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 56)) {
          _impl_.oracle_scale_factor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .injective.oracle.v1beta1.OracleType oracle_type = 8 [json_name = "oracleType"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 64)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_oracle_type(static_cast<::injective::oracle::v1beta1::OracleType>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // string initial_margin_ratio = 9 [json_name = "initialMarginRatio", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_initial_margin_ratio();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.PerpetualMarketLaunchProposal.initial_margin_ratio"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string maintenance_margin_ratio = 10 [json_name = "maintenanceMarginRatio", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_maintenance_margin_ratio();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.PerpetualMarketLaunchProposal.maintenance_margin_ratio"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string maker_fee_rate = 11 [json_name = "makerFeeRate", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_maker_fee_rate();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.PerpetualMarketLaunchProposal.maker_fee_rate"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string taker_fee_rate = 12 [json_name = "takerFeeRate", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_taker_fee_rate();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.PerpetualMarketLaunchProposal.taker_fee_rate"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string min_price_tick_size = 13 [json_name = "minPriceTickSize", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_min_price_tick_size();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.PerpetualMarketLaunchProposal.min_price_tick_size"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string min_quantity_tick_size = 14 [json_name = "minQuantityTickSize", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_min_quantity_tick_size();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.PerpetualMarketLaunchProposal.min_quantity_tick_size"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* PerpetualMarketLaunchProposal::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.PerpetualMarketLaunchProposal)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string title = 1 [json_name = "title"];
  if (!this->_internal_title().empty()) {
    const std::string& _s = this->_internal_title();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.PerpetualMarketLaunchProposal.title");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string description = 2 [json_name = "description"];
  if (!this->_internal_description().empty()) {
    const std::string& _s = this->_internal_description();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.PerpetualMarketLaunchProposal.description");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string ticker = 3 [json_name = "ticker"];
  if (!this->_internal_ticker().empty()) {
    const std::string& _s = this->_internal_ticker();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.PerpetualMarketLaunchProposal.ticker");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string quote_denom = 4 [json_name = "quoteDenom"];
  if (!this->_internal_quote_denom().empty()) {
    const std::string& _s = this->_internal_quote_denom();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.PerpetualMarketLaunchProposal.quote_denom");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // string oracle_base = 5 [json_name = "oracleBase"];
  if (!this->_internal_oracle_base().empty()) {
    const std::string& _s = this->_internal_oracle_base();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.PerpetualMarketLaunchProposal.oracle_base");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // string oracle_quote = 6 [json_name = "oracleQuote"];
  if (!this->_internal_oracle_quote().empty()) {
    const std::string& _s = this->_internal_oracle_quote();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.PerpetualMarketLaunchProposal.oracle_quote");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  // uint32 oracle_scale_factor = 7 [json_name = "oracleScaleFactor"];
  if (this->_internal_oracle_scale_factor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        7, this->_internal_oracle_scale_factor(), target);
  }

  // .injective.oracle.v1beta1.OracleType oracle_type = 8 [json_name = "oracleType"];
  if (this->_internal_oracle_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        8, this->_internal_oracle_type(), target);
  }

  // string initial_margin_ratio = 9 [json_name = "initialMarginRatio", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_initial_margin_ratio().empty()) {
    const std::string& _s = this->_internal_initial_margin_ratio();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.PerpetualMarketLaunchProposal.initial_margin_ratio");
    target = stream->WriteStringMaybeAliased(9, _s, target);
  }

  // string maintenance_margin_ratio = 10 [json_name = "maintenanceMarginRatio", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_maintenance_margin_ratio().empty()) {
    const std::string& _s = this->_internal_maintenance_margin_ratio();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.PerpetualMarketLaunchProposal.maintenance_margin_ratio");
    target = stream->WriteStringMaybeAliased(10, _s, target);
  }

  // string maker_fee_rate = 11 [json_name = "makerFeeRate", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_maker_fee_rate().empty()) {
    const std::string& _s = this->_internal_maker_fee_rate();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.PerpetualMarketLaunchProposal.maker_fee_rate");
    target = stream->WriteStringMaybeAliased(11, _s, target);
  }

  // string taker_fee_rate = 12 [json_name = "takerFeeRate", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_taker_fee_rate().empty()) {
    const std::string& _s = this->_internal_taker_fee_rate();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.PerpetualMarketLaunchProposal.taker_fee_rate");
    target = stream->WriteStringMaybeAliased(12, _s, target);
  }

  // string min_price_tick_size = 13 [json_name = "minPriceTickSize", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_min_price_tick_size().empty()) {
    const std::string& _s = this->_internal_min_price_tick_size();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.PerpetualMarketLaunchProposal.min_price_tick_size");
    target = stream->WriteStringMaybeAliased(13, _s, target);
  }

  // string min_quantity_tick_size = 14 [json_name = "minQuantityTickSize", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_min_quantity_tick_size().empty()) {
    const std::string& _s = this->_internal_min_quantity_tick_size();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.PerpetualMarketLaunchProposal.min_quantity_tick_size");
    target = stream->WriteStringMaybeAliased(14, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.PerpetualMarketLaunchProposal)
  return target;
}

::size_t PerpetualMarketLaunchProposal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.PerpetualMarketLaunchProposal)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string title = 1 [json_name = "title"];
  if (!this->_internal_title().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_title());
  }

  // string description = 2 [json_name = "description"];
  if (!this->_internal_description().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_description());
  }

  // string ticker = 3 [json_name = "ticker"];
  if (!this->_internal_ticker().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_ticker());
  }

  // string quote_denom = 4 [json_name = "quoteDenom"];
  if (!this->_internal_quote_denom().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_quote_denom());
  }

  // string oracle_base = 5 [json_name = "oracleBase"];
  if (!this->_internal_oracle_base().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_oracle_base());
  }

  // string oracle_quote = 6 [json_name = "oracleQuote"];
  if (!this->_internal_oracle_quote().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_oracle_quote());
  }

  // string initial_margin_ratio = 9 [json_name = "initialMarginRatio", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_initial_margin_ratio().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_initial_margin_ratio());
  }

  // string maintenance_margin_ratio = 10 [json_name = "maintenanceMarginRatio", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_maintenance_margin_ratio().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_maintenance_margin_ratio());
  }

  // string maker_fee_rate = 11 [json_name = "makerFeeRate", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_maker_fee_rate().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_maker_fee_rate());
  }

  // string taker_fee_rate = 12 [json_name = "takerFeeRate", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_taker_fee_rate().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_taker_fee_rate());
  }

  // string min_price_tick_size = 13 [json_name = "minPriceTickSize", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_min_price_tick_size().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_min_price_tick_size());
  }

  // string min_quantity_tick_size = 14 [json_name = "minQuantityTickSize", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_min_quantity_tick_size().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_min_quantity_tick_size());
  }

  // uint32 oracle_scale_factor = 7 [json_name = "oracleScaleFactor"];
  if (this->_internal_oracle_scale_factor() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_oracle_scale_factor());
  }

  // .injective.oracle.v1beta1.OracleType oracle_type = 8 [json_name = "oracleType"];
  if (this->_internal_oracle_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_oracle_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PerpetualMarketLaunchProposal::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PerpetualMarketLaunchProposal::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PerpetualMarketLaunchProposal::GetClassData() const { return &_class_data_; }


void PerpetualMarketLaunchProposal::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PerpetualMarketLaunchProposal*>(&to_msg);
  auto& from = static_cast<const PerpetualMarketLaunchProposal&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.PerpetualMarketLaunchProposal)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_title().empty()) {
    _this->_internal_set_title(from._internal_title());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  if (!from._internal_ticker().empty()) {
    _this->_internal_set_ticker(from._internal_ticker());
  }
  if (!from._internal_quote_denom().empty()) {
    _this->_internal_set_quote_denom(from._internal_quote_denom());
  }
  if (!from._internal_oracle_base().empty()) {
    _this->_internal_set_oracle_base(from._internal_oracle_base());
  }
  if (!from._internal_oracle_quote().empty()) {
    _this->_internal_set_oracle_quote(from._internal_oracle_quote());
  }
  if (!from._internal_initial_margin_ratio().empty()) {
    _this->_internal_set_initial_margin_ratio(from._internal_initial_margin_ratio());
  }
  if (!from._internal_maintenance_margin_ratio().empty()) {
    _this->_internal_set_maintenance_margin_ratio(from._internal_maintenance_margin_ratio());
  }
  if (!from._internal_maker_fee_rate().empty()) {
    _this->_internal_set_maker_fee_rate(from._internal_maker_fee_rate());
  }
  if (!from._internal_taker_fee_rate().empty()) {
    _this->_internal_set_taker_fee_rate(from._internal_taker_fee_rate());
  }
  if (!from._internal_min_price_tick_size().empty()) {
    _this->_internal_set_min_price_tick_size(from._internal_min_price_tick_size());
  }
  if (!from._internal_min_quantity_tick_size().empty()) {
    _this->_internal_set_min_quantity_tick_size(from._internal_min_quantity_tick_size());
  }
  if (from._internal_oracle_scale_factor() != 0) {
    _this->_internal_set_oracle_scale_factor(from._internal_oracle_scale_factor());
  }
  if (from._internal_oracle_type() != 0) {
    _this->_internal_set_oracle_type(from._internal_oracle_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PerpetualMarketLaunchProposal::CopyFrom(const PerpetualMarketLaunchProposal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.PerpetualMarketLaunchProposal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerpetualMarketLaunchProposal::IsInitialized() const {
  return true;
}

void PerpetualMarketLaunchProposal::InternalSwap(PerpetualMarketLaunchProposal* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.title_, lhs_arena,
                                       &other->_impl_.title_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.description_, lhs_arena,
                                       &other->_impl_.description_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.ticker_, lhs_arena,
                                       &other->_impl_.ticker_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.quote_denom_, lhs_arena,
                                       &other->_impl_.quote_denom_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.oracle_base_, lhs_arena,
                                       &other->_impl_.oracle_base_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.oracle_quote_, lhs_arena,
                                       &other->_impl_.oracle_quote_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.initial_margin_ratio_, lhs_arena,
                                       &other->_impl_.initial_margin_ratio_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.maintenance_margin_ratio_, lhs_arena,
                                       &other->_impl_.maintenance_margin_ratio_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.maker_fee_rate_, lhs_arena,
                                       &other->_impl_.maker_fee_rate_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.taker_fee_rate_, lhs_arena,
                                       &other->_impl_.taker_fee_rate_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.min_price_tick_size_, lhs_arena,
                                       &other->_impl_.min_price_tick_size_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.min_quantity_tick_size_, lhs_arena,
                                       &other->_impl_.min_quantity_tick_size_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PerpetualMarketLaunchProposal, _impl_.oracle_type_)
      + sizeof(PerpetualMarketLaunchProposal::_impl_.oracle_type_)
      - PROTOBUF_FIELD_OFFSET(PerpetualMarketLaunchProposal, _impl_.oracle_scale_factor_)>(
          reinterpret_cast<char*>(&_impl_.oracle_scale_factor_),
          reinterpret_cast<char*>(&other->_impl_.oracle_scale_factor_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PerpetualMarketLaunchProposal::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2ftx_2eproto[61]);
}
// ===================================================================

class BinaryOptionsMarketLaunchProposal::_Internal {
 public:
};

BinaryOptionsMarketLaunchProposal::BinaryOptionsMarketLaunchProposal(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.BinaryOptionsMarketLaunchProposal)
}
BinaryOptionsMarketLaunchProposal::BinaryOptionsMarketLaunchProposal(const BinaryOptionsMarketLaunchProposal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BinaryOptionsMarketLaunchProposal* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.title_) {}

    , decltype(_impl_.description_) {}

    , decltype(_impl_.ticker_) {}

    , decltype(_impl_.oracle_symbol_) {}

    , decltype(_impl_.oracle_provider_) {}

    , decltype(_impl_.admin_) {}

    , decltype(_impl_.quote_denom_) {}

    , decltype(_impl_.maker_fee_rate_) {}

    , decltype(_impl_.taker_fee_rate_) {}

    , decltype(_impl_.min_price_tick_size_) {}

    , decltype(_impl_.min_quantity_tick_size_) {}

    , decltype(_impl_.oracle_type_) {}

    , decltype(_impl_.oracle_scale_factor_) {}

    , decltype(_impl_.expiration_timestamp_) {}

    , decltype(_impl_.settlement_timestamp_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.title_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_title().empty()) {
    _this->_impl_.title_.Set(from._internal_title(), _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.description_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), _this->GetArenaForAllocation());
  }
  _impl_.ticker_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.ticker_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ticker().empty()) {
    _this->_impl_.ticker_.Set(from._internal_ticker(), _this->GetArenaForAllocation());
  }
  _impl_.oracle_symbol_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.oracle_symbol_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_oracle_symbol().empty()) {
    _this->_impl_.oracle_symbol_.Set(from._internal_oracle_symbol(), _this->GetArenaForAllocation());
  }
  _impl_.oracle_provider_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.oracle_provider_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_oracle_provider().empty()) {
    _this->_impl_.oracle_provider_.Set(from._internal_oracle_provider(), _this->GetArenaForAllocation());
  }
  _impl_.admin_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.admin_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_admin().empty()) {
    _this->_impl_.admin_.Set(from._internal_admin(), _this->GetArenaForAllocation());
  }
  _impl_.quote_denom_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.quote_denom_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_quote_denom().empty()) {
    _this->_impl_.quote_denom_.Set(from._internal_quote_denom(), _this->GetArenaForAllocation());
  }
  _impl_.maker_fee_rate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.maker_fee_rate_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_maker_fee_rate().empty()) {
    _this->_impl_.maker_fee_rate_.Set(from._internal_maker_fee_rate(), _this->GetArenaForAllocation());
  }
  _impl_.taker_fee_rate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.taker_fee_rate_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_taker_fee_rate().empty()) {
    _this->_impl_.taker_fee_rate_.Set(from._internal_taker_fee_rate(), _this->GetArenaForAllocation());
  }
  _impl_.min_price_tick_size_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.min_price_tick_size_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_min_price_tick_size().empty()) {
    _this->_impl_.min_price_tick_size_.Set(from._internal_min_price_tick_size(), _this->GetArenaForAllocation());
  }
  _impl_.min_quantity_tick_size_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.min_quantity_tick_size_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_min_quantity_tick_size().empty()) {
    _this->_impl_.min_quantity_tick_size_.Set(from._internal_min_quantity_tick_size(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.oracle_type_, &from._impl_.oracle_type_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.settlement_timestamp_) -
    reinterpret_cast<char*>(&_impl_.oracle_type_)) + sizeof(_impl_.settlement_timestamp_));
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.BinaryOptionsMarketLaunchProposal)
}

inline void BinaryOptionsMarketLaunchProposal::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.title_) {}

    , decltype(_impl_.description_) {}

    , decltype(_impl_.ticker_) {}

    , decltype(_impl_.oracle_symbol_) {}

    , decltype(_impl_.oracle_provider_) {}

    , decltype(_impl_.admin_) {}

    , decltype(_impl_.quote_denom_) {}

    , decltype(_impl_.maker_fee_rate_) {}

    , decltype(_impl_.taker_fee_rate_) {}

    , decltype(_impl_.min_price_tick_size_) {}

    , decltype(_impl_.min_quantity_tick_size_) {}

    , decltype(_impl_.oracle_type_) { 0 }

    , decltype(_impl_.oracle_scale_factor_) { 0u }

    , decltype(_impl_.expiration_timestamp_) { ::int64_t{0} }

    , decltype(_impl_.settlement_timestamp_) { ::int64_t{0} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.title_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.description_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ticker_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.ticker_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.oracle_symbol_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.oracle_symbol_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.oracle_provider_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.oracle_provider_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.admin_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.admin_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.quote_denom_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.quote_denom_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.maker_fee_rate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.maker_fee_rate_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.taker_fee_rate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.taker_fee_rate_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.min_price_tick_size_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.min_price_tick_size_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.min_quantity_tick_size_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.min_quantity_tick_size_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BinaryOptionsMarketLaunchProposal::~BinaryOptionsMarketLaunchProposal() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.BinaryOptionsMarketLaunchProposal)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BinaryOptionsMarketLaunchProposal::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.title_.Destroy();
  _impl_.description_.Destroy();
  _impl_.ticker_.Destroy();
  _impl_.oracle_symbol_.Destroy();
  _impl_.oracle_provider_.Destroy();
  _impl_.admin_.Destroy();
  _impl_.quote_denom_.Destroy();
  _impl_.maker_fee_rate_.Destroy();
  _impl_.taker_fee_rate_.Destroy();
  _impl_.min_price_tick_size_.Destroy();
  _impl_.min_quantity_tick_size_.Destroy();
}

void BinaryOptionsMarketLaunchProposal::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BinaryOptionsMarketLaunchProposal::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.BinaryOptionsMarketLaunchProposal)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.title_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  _impl_.ticker_.ClearToEmpty();
  _impl_.oracle_symbol_.ClearToEmpty();
  _impl_.oracle_provider_.ClearToEmpty();
  _impl_.admin_.ClearToEmpty();
  _impl_.quote_denom_.ClearToEmpty();
  _impl_.maker_fee_rate_.ClearToEmpty();
  _impl_.taker_fee_rate_.ClearToEmpty();
  _impl_.min_price_tick_size_.ClearToEmpty();
  _impl_.min_quantity_tick_size_.ClearToEmpty();
  ::memset(&_impl_.oracle_type_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.settlement_timestamp_) -
      reinterpret_cast<char*>(&_impl_.oracle_type_)) + sizeof(_impl_.settlement_timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BinaryOptionsMarketLaunchProposal::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string title = 1 [json_name = "title"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.BinaryOptionsMarketLaunchProposal.title"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string description = 2 [json_name = "description"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.BinaryOptionsMarketLaunchProposal.description"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string ticker = 3 [json_name = "ticker"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_ticker();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.BinaryOptionsMarketLaunchProposal.ticker"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string oracle_symbol = 4 [json_name = "oracleSymbol"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_oracle_symbol();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.BinaryOptionsMarketLaunchProposal.oracle_symbol"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string oracle_provider = 5 [json_name = "oracleProvider"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_oracle_provider();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.BinaryOptionsMarketLaunchProposal.oracle_provider"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .injective.oracle.v1beta1.OracleType oracle_type = 6 [json_name = "oracleType"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_oracle_type(static_cast<::injective::oracle::v1beta1::OracleType>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 oracle_scale_factor = 7 [json_name = "oracleScaleFactor"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 56)) {
          _impl_.oracle_scale_factor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 expiration_timestamp = 8 [json_name = "expirationTimestamp"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 64)) {
          _impl_.expiration_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 settlement_timestamp = 9 [json_name = "settlementTimestamp"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 72)) {
          _impl_.settlement_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string admin = 10 [json_name = "admin"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_admin();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.BinaryOptionsMarketLaunchProposal.admin"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string quote_denom = 11 [json_name = "quoteDenom"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_quote_denom();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.BinaryOptionsMarketLaunchProposal.quote_denom"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string maker_fee_rate = 12 [json_name = "makerFeeRate", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_maker_fee_rate();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.BinaryOptionsMarketLaunchProposal.maker_fee_rate"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string taker_fee_rate = 13 [json_name = "takerFeeRate", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_taker_fee_rate();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.BinaryOptionsMarketLaunchProposal.taker_fee_rate"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string min_price_tick_size = 14 [json_name = "minPriceTickSize", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_min_price_tick_size();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.BinaryOptionsMarketLaunchProposal.min_price_tick_size"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string min_quantity_tick_size = 15 [json_name = "minQuantityTickSize", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_min_quantity_tick_size();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.BinaryOptionsMarketLaunchProposal.min_quantity_tick_size"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* BinaryOptionsMarketLaunchProposal::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.BinaryOptionsMarketLaunchProposal)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string title = 1 [json_name = "title"];
  if (!this->_internal_title().empty()) {
    const std::string& _s = this->_internal_title();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.BinaryOptionsMarketLaunchProposal.title");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string description = 2 [json_name = "description"];
  if (!this->_internal_description().empty()) {
    const std::string& _s = this->_internal_description();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.BinaryOptionsMarketLaunchProposal.description");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string ticker = 3 [json_name = "ticker"];
  if (!this->_internal_ticker().empty()) {
    const std::string& _s = this->_internal_ticker();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.BinaryOptionsMarketLaunchProposal.ticker");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string oracle_symbol = 4 [json_name = "oracleSymbol"];
  if (!this->_internal_oracle_symbol().empty()) {
    const std::string& _s = this->_internal_oracle_symbol();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.BinaryOptionsMarketLaunchProposal.oracle_symbol");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // string oracle_provider = 5 [json_name = "oracleProvider"];
  if (!this->_internal_oracle_provider().empty()) {
    const std::string& _s = this->_internal_oracle_provider();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.BinaryOptionsMarketLaunchProposal.oracle_provider");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // .injective.oracle.v1beta1.OracleType oracle_type = 6 [json_name = "oracleType"];
  if (this->_internal_oracle_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        6, this->_internal_oracle_type(), target);
  }

  // uint32 oracle_scale_factor = 7 [json_name = "oracleScaleFactor"];
  if (this->_internal_oracle_scale_factor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        7, this->_internal_oracle_scale_factor(), target);
  }

  // int64 expiration_timestamp = 8 [json_name = "expirationTimestamp"];
  if (this->_internal_expiration_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        8, this->_internal_expiration_timestamp(), target);
  }

  // int64 settlement_timestamp = 9 [json_name = "settlementTimestamp"];
  if (this->_internal_settlement_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        9, this->_internal_settlement_timestamp(), target);
  }

  // string admin = 10 [json_name = "admin"];
  if (!this->_internal_admin().empty()) {
    const std::string& _s = this->_internal_admin();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.BinaryOptionsMarketLaunchProposal.admin");
    target = stream->WriteStringMaybeAliased(10, _s, target);
  }

  // string quote_denom = 11 [json_name = "quoteDenom"];
  if (!this->_internal_quote_denom().empty()) {
    const std::string& _s = this->_internal_quote_denom();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.BinaryOptionsMarketLaunchProposal.quote_denom");
    target = stream->WriteStringMaybeAliased(11, _s, target);
  }

  // string maker_fee_rate = 12 [json_name = "makerFeeRate", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_maker_fee_rate().empty()) {
    const std::string& _s = this->_internal_maker_fee_rate();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.BinaryOptionsMarketLaunchProposal.maker_fee_rate");
    target = stream->WriteStringMaybeAliased(12, _s, target);
  }

  // string taker_fee_rate = 13 [json_name = "takerFeeRate", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_taker_fee_rate().empty()) {
    const std::string& _s = this->_internal_taker_fee_rate();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.BinaryOptionsMarketLaunchProposal.taker_fee_rate");
    target = stream->WriteStringMaybeAliased(13, _s, target);
  }

  // string min_price_tick_size = 14 [json_name = "minPriceTickSize", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_min_price_tick_size().empty()) {
    const std::string& _s = this->_internal_min_price_tick_size();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.BinaryOptionsMarketLaunchProposal.min_price_tick_size");
    target = stream->WriteStringMaybeAliased(14, _s, target);
  }

  // string min_quantity_tick_size = 15 [json_name = "minQuantityTickSize", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_min_quantity_tick_size().empty()) {
    const std::string& _s = this->_internal_min_quantity_tick_size();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.BinaryOptionsMarketLaunchProposal.min_quantity_tick_size");
    target = stream->WriteStringMaybeAliased(15, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.BinaryOptionsMarketLaunchProposal)
  return target;
}

::size_t BinaryOptionsMarketLaunchProposal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.BinaryOptionsMarketLaunchProposal)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string title = 1 [json_name = "title"];
  if (!this->_internal_title().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_title());
  }

  // string description = 2 [json_name = "description"];
  if (!this->_internal_description().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_description());
  }

  // string ticker = 3 [json_name = "ticker"];
  if (!this->_internal_ticker().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_ticker());
  }

  // string oracle_symbol = 4 [json_name = "oracleSymbol"];
  if (!this->_internal_oracle_symbol().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_oracle_symbol());
  }

  // string oracle_provider = 5 [json_name = "oracleProvider"];
  if (!this->_internal_oracle_provider().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_oracle_provider());
  }

  // string admin = 10 [json_name = "admin"];
  if (!this->_internal_admin().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_admin());
  }

  // string quote_denom = 11 [json_name = "quoteDenom"];
  if (!this->_internal_quote_denom().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_quote_denom());
  }

  // string maker_fee_rate = 12 [json_name = "makerFeeRate", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_maker_fee_rate().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_maker_fee_rate());
  }

  // string taker_fee_rate = 13 [json_name = "takerFeeRate", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_taker_fee_rate().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_taker_fee_rate());
  }

  // string min_price_tick_size = 14 [json_name = "minPriceTickSize", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_min_price_tick_size().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_min_price_tick_size());
  }

  // string min_quantity_tick_size = 15 [json_name = "minQuantityTickSize", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_min_quantity_tick_size().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_min_quantity_tick_size());
  }

  // .injective.oracle.v1beta1.OracleType oracle_type = 6 [json_name = "oracleType"];
  if (this->_internal_oracle_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_oracle_type());
  }

  // uint32 oracle_scale_factor = 7 [json_name = "oracleScaleFactor"];
  if (this->_internal_oracle_scale_factor() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_oracle_scale_factor());
  }

  // int64 expiration_timestamp = 8 [json_name = "expirationTimestamp"];
  if (this->_internal_expiration_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_expiration_timestamp());
  }

  // int64 settlement_timestamp = 9 [json_name = "settlementTimestamp"];
  if (this->_internal_settlement_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_settlement_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BinaryOptionsMarketLaunchProposal::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BinaryOptionsMarketLaunchProposal::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BinaryOptionsMarketLaunchProposal::GetClassData() const { return &_class_data_; }


void BinaryOptionsMarketLaunchProposal::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BinaryOptionsMarketLaunchProposal*>(&to_msg);
  auto& from = static_cast<const BinaryOptionsMarketLaunchProposal&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.BinaryOptionsMarketLaunchProposal)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_title().empty()) {
    _this->_internal_set_title(from._internal_title());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  if (!from._internal_ticker().empty()) {
    _this->_internal_set_ticker(from._internal_ticker());
  }
  if (!from._internal_oracle_symbol().empty()) {
    _this->_internal_set_oracle_symbol(from._internal_oracle_symbol());
  }
  if (!from._internal_oracle_provider().empty()) {
    _this->_internal_set_oracle_provider(from._internal_oracle_provider());
  }
  if (!from._internal_admin().empty()) {
    _this->_internal_set_admin(from._internal_admin());
  }
  if (!from._internal_quote_denom().empty()) {
    _this->_internal_set_quote_denom(from._internal_quote_denom());
  }
  if (!from._internal_maker_fee_rate().empty()) {
    _this->_internal_set_maker_fee_rate(from._internal_maker_fee_rate());
  }
  if (!from._internal_taker_fee_rate().empty()) {
    _this->_internal_set_taker_fee_rate(from._internal_taker_fee_rate());
  }
  if (!from._internal_min_price_tick_size().empty()) {
    _this->_internal_set_min_price_tick_size(from._internal_min_price_tick_size());
  }
  if (!from._internal_min_quantity_tick_size().empty()) {
    _this->_internal_set_min_quantity_tick_size(from._internal_min_quantity_tick_size());
  }
  if (from._internal_oracle_type() != 0) {
    _this->_internal_set_oracle_type(from._internal_oracle_type());
  }
  if (from._internal_oracle_scale_factor() != 0) {
    _this->_internal_set_oracle_scale_factor(from._internal_oracle_scale_factor());
  }
  if (from._internal_expiration_timestamp() != 0) {
    _this->_internal_set_expiration_timestamp(from._internal_expiration_timestamp());
  }
  if (from._internal_settlement_timestamp() != 0) {
    _this->_internal_set_settlement_timestamp(from._internal_settlement_timestamp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BinaryOptionsMarketLaunchProposal::CopyFrom(const BinaryOptionsMarketLaunchProposal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.BinaryOptionsMarketLaunchProposal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BinaryOptionsMarketLaunchProposal::IsInitialized() const {
  return true;
}

void BinaryOptionsMarketLaunchProposal::InternalSwap(BinaryOptionsMarketLaunchProposal* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.title_, lhs_arena,
                                       &other->_impl_.title_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.description_, lhs_arena,
                                       &other->_impl_.description_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.ticker_, lhs_arena,
                                       &other->_impl_.ticker_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.oracle_symbol_, lhs_arena,
                                       &other->_impl_.oracle_symbol_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.oracle_provider_, lhs_arena,
                                       &other->_impl_.oracle_provider_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.admin_, lhs_arena,
                                       &other->_impl_.admin_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.quote_denom_, lhs_arena,
                                       &other->_impl_.quote_denom_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.maker_fee_rate_, lhs_arena,
                                       &other->_impl_.maker_fee_rate_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.taker_fee_rate_, lhs_arena,
                                       &other->_impl_.taker_fee_rate_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.min_price_tick_size_, lhs_arena,
                                       &other->_impl_.min_price_tick_size_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.min_quantity_tick_size_, lhs_arena,
                                       &other->_impl_.min_quantity_tick_size_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BinaryOptionsMarketLaunchProposal, _impl_.settlement_timestamp_)
      + sizeof(BinaryOptionsMarketLaunchProposal::_impl_.settlement_timestamp_)
      - PROTOBUF_FIELD_OFFSET(BinaryOptionsMarketLaunchProposal, _impl_.oracle_type_)>(
          reinterpret_cast<char*>(&_impl_.oracle_type_),
          reinterpret_cast<char*>(&other->_impl_.oracle_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BinaryOptionsMarketLaunchProposal::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2ftx_2eproto[62]);
}
// ===================================================================

class ExpiryFuturesMarketLaunchProposal::_Internal {
 public:
};

ExpiryFuturesMarketLaunchProposal::ExpiryFuturesMarketLaunchProposal(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.ExpiryFuturesMarketLaunchProposal)
}
ExpiryFuturesMarketLaunchProposal::ExpiryFuturesMarketLaunchProposal(const ExpiryFuturesMarketLaunchProposal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ExpiryFuturesMarketLaunchProposal* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.title_) {}

    , decltype(_impl_.description_) {}

    , decltype(_impl_.ticker_) {}

    , decltype(_impl_.quote_denom_) {}

    , decltype(_impl_.oracle_base_) {}

    , decltype(_impl_.oracle_quote_) {}

    , decltype(_impl_.initial_margin_ratio_) {}

    , decltype(_impl_.maintenance_margin_ratio_) {}

    , decltype(_impl_.maker_fee_rate_) {}

    , decltype(_impl_.taker_fee_rate_) {}

    , decltype(_impl_.min_price_tick_size_) {}

    , decltype(_impl_.min_quantity_tick_size_) {}

    , decltype(_impl_.oracle_scale_factor_) {}

    , decltype(_impl_.oracle_type_) {}

    , decltype(_impl_.expiry_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.title_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_title().empty()) {
    _this->_impl_.title_.Set(from._internal_title(), _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.description_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), _this->GetArenaForAllocation());
  }
  _impl_.ticker_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.ticker_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ticker().empty()) {
    _this->_impl_.ticker_.Set(from._internal_ticker(), _this->GetArenaForAllocation());
  }
  _impl_.quote_denom_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.quote_denom_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_quote_denom().empty()) {
    _this->_impl_.quote_denom_.Set(from._internal_quote_denom(), _this->GetArenaForAllocation());
  }
  _impl_.oracle_base_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.oracle_base_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_oracle_base().empty()) {
    _this->_impl_.oracle_base_.Set(from._internal_oracle_base(), _this->GetArenaForAllocation());
  }
  _impl_.oracle_quote_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.oracle_quote_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_oracle_quote().empty()) {
    _this->_impl_.oracle_quote_.Set(from._internal_oracle_quote(), _this->GetArenaForAllocation());
  }
  _impl_.initial_margin_ratio_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.initial_margin_ratio_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_initial_margin_ratio().empty()) {
    _this->_impl_.initial_margin_ratio_.Set(from._internal_initial_margin_ratio(), _this->GetArenaForAllocation());
  }
  _impl_.maintenance_margin_ratio_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.maintenance_margin_ratio_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_maintenance_margin_ratio().empty()) {
    _this->_impl_.maintenance_margin_ratio_.Set(from._internal_maintenance_margin_ratio(), _this->GetArenaForAllocation());
  }
  _impl_.maker_fee_rate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.maker_fee_rate_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_maker_fee_rate().empty()) {
    _this->_impl_.maker_fee_rate_.Set(from._internal_maker_fee_rate(), _this->GetArenaForAllocation());
  }
  _impl_.taker_fee_rate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.taker_fee_rate_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_taker_fee_rate().empty()) {
    _this->_impl_.taker_fee_rate_.Set(from._internal_taker_fee_rate(), _this->GetArenaForAllocation());
  }
  _impl_.min_price_tick_size_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.min_price_tick_size_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_min_price_tick_size().empty()) {
    _this->_impl_.min_price_tick_size_.Set(from._internal_min_price_tick_size(), _this->GetArenaForAllocation());
  }
  _impl_.min_quantity_tick_size_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.min_quantity_tick_size_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_min_quantity_tick_size().empty()) {
    _this->_impl_.min_quantity_tick_size_.Set(from._internal_min_quantity_tick_size(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.oracle_scale_factor_, &from._impl_.oracle_scale_factor_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.expiry_) -
    reinterpret_cast<char*>(&_impl_.oracle_scale_factor_)) + sizeof(_impl_.expiry_));
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.ExpiryFuturesMarketLaunchProposal)
}

inline void ExpiryFuturesMarketLaunchProposal::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.title_) {}

    , decltype(_impl_.description_) {}

    , decltype(_impl_.ticker_) {}

    , decltype(_impl_.quote_denom_) {}

    , decltype(_impl_.oracle_base_) {}

    , decltype(_impl_.oracle_quote_) {}

    , decltype(_impl_.initial_margin_ratio_) {}

    , decltype(_impl_.maintenance_margin_ratio_) {}

    , decltype(_impl_.maker_fee_rate_) {}

    , decltype(_impl_.taker_fee_rate_) {}

    , decltype(_impl_.min_price_tick_size_) {}

    , decltype(_impl_.min_quantity_tick_size_) {}

    , decltype(_impl_.oracle_scale_factor_) { 0u }

    , decltype(_impl_.oracle_type_) { 0 }

    , decltype(_impl_.expiry_) { ::int64_t{0} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.title_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.description_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ticker_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.ticker_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.quote_denom_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.quote_denom_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.oracle_base_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.oracle_base_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.oracle_quote_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.oracle_quote_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.initial_margin_ratio_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.initial_margin_ratio_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.maintenance_margin_ratio_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.maintenance_margin_ratio_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.maker_fee_rate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.maker_fee_rate_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.taker_fee_rate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.taker_fee_rate_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.min_price_tick_size_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.min_price_tick_size_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.min_quantity_tick_size_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.min_quantity_tick_size_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ExpiryFuturesMarketLaunchProposal::~ExpiryFuturesMarketLaunchProposal() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.ExpiryFuturesMarketLaunchProposal)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ExpiryFuturesMarketLaunchProposal::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.title_.Destroy();
  _impl_.description_.Destroy();
  _impl_.ticker_.Destroy();
  _impl_.quote_denom_.Destroy();
  _impl_.oracle_base_.Destroy();
  _impl_.oracle_quote_.Destroy();
  _impl_.initial_margin_ratio_.Destroy();
  _impl_.maintenance_margin_ratio_.Destroy();
  _impl_.maker_fee_rate_.Destroy();
  _impl_.taker_fee_rate_.Destroy();
  _impl_.min_price_tick_size_.Destroy();
  _impl_.min_quantity_tick_size_.Destroy();
}

void ExpiryFuturesMarketLaunchProposal::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ExpiryFuturesMarketLaunchProposal::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.ExpiryFuturesMarketLaunchProposal)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.title_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  _impl_.ticker_.ClearToEmpty();
  _impl_.quote_denom_.ClearToEmpty();
  _impl_.oracle_base_.ClearToEmpty();
  _impl_.oracle_quote_.ClearToEmpty();
  _impl_.initial_margin_ratio_.ClearToEmpty();
  _impl_.maintenance_margin_ratio_.ClearToEmpty();
  _impl_.maker_fee_rate_.ClearToEmpty();
  _impl_.taker_fee_rate_.ClearToEmpty();
  _impl_.min_price_tick_size_.ClearToEmpty();
  _impl_.min_quantity_tick_size_.ClearToEmpty();
  ::memset(&_impl_.oracle_scale_factor_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.expiry_) -
      reinterpret_cast<char*>(&_impl_.oracle_scale_factor_)) + sizeof(_impl_.expiry_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExpiryFuturesMarketLaunchProposal::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string title = 1 [json_name = "title"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.ExpiryFuturesMarketLaunchProposal.title"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string description = 2 [json_name = "description"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.ExpiryFuturesMarketLaunchProposal.description"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string ticker = 3 [json_name = "ticker"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_ticker();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.ExpiryFuturesMarketLaunchProposal.ticker"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string quote_denom = 4 [json_name = "quoteDenom"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_quote_denom();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.ExpiryFuturesMarketLaunchProposal.quote_denom"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string oracle_base = 5 [json_name = "oracleBase"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_oracle_base();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.ExpiryFuturesMarketLaunchProposal.oracle_base"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string oracle_quote = 6 [json_name = "oracleQuote"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_oracle_quote();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.ExpiryFuturesMarketLaunchProposal.oracle_quote"));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 oracle_scale_factor = 7 [json_name = "oracleScaleFactor"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 56)) {
          _impl_.oracle_scale_factor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .injective.oracle.v1beta1.OracleType oracle_type = 8 [json_name = "oracleType"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 64)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_oracle_type(static_cast<::injective::oracle::v1beta1::OracleType>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 expiry = 9 [json_name = "expiry"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 72)) {
          _impl_.expiry_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string initial_margin_ratio = 10 [json_name = "initialMarginRatio", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_initial_margin_ratio();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.ExpiryFuturesMarketLaunchProposal.initial_margin_ratio"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string maintenance_margin_ratio = 11 [json_name = "maintenanceMarginRatio", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_maintenance_margin_ratio();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.ExpiryFuturesMarketLaunchProposal.maintenance_margin_ratio"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string maker_fee_rate = 12 [json_name = "makerFeeRate", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_maker_fee_rate();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.ExpiryFuturesMarketLaunchProposal.maker_fee_rate"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string taker_fee_rate = 13 [json_name = "takerFeeRate", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_taker_fee_rate();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.ExpiryFuturesMarketLaunchProposal.taker_fee_rate"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string min_price_tick_size = 14 [json_name = "minPriceTickSize", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_min_price_tick_size();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.ExpiryFuturesMarketLaunchProposal.min_price_tick_size"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string min_quantity_tick_size = 15 [json_name = "minQuantityTickSize", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_min_quantity_tick_size();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.ExpiryFuturesMarketLaunchProposal.min_quantity_tick_size"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ExpiryFuturesMarketLaunchProposal::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.ExpiryFuturesMarketLaunchProposal)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string title = 1 [json_name = "title"];
  if (!this->_internal_title().empty()) {
    const std::string& _s = this->_internal_title();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.ExpiryFuturesMarketLaunchProposal.title");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string description = 2 [json_name = "description"];
  if (!this->_internal_description().empty()) {
    const std::string& _s = this->_internal_description();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.ExpiryFuturesMarketLaunchProposal.description");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string ticker = 3 [json_name = "ticker"];
  if (!this->_internal_ticker().empty()) {
    const std::string& _s = this->_internal_ticker();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.ExpiryFuturesMarketLaunchProposal.ticker");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string quote_denom = 4 [json_name = "quoteDenom"];
  if (!this->_internal_quote_denom().empty()) {
    const std::string& _s = this->_internal_quote_denom();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.ExpiryFuturesMarketLaunchProposal.quote_denom");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // string oracle_base = 5 [json_name = "oracleBase"];
  if (!this->_internal_oracle_base().empty()) {
    const std::string& _s = this->_internal_oracle_base();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.ExpiryFuturesMarketLaunchProposal.oracle_base");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // string oracle_quote = 6 [json_name = "oracleQuote"];
  if (!this->_internal_oracle_quote().empty()) {
    const std::string& _s = this->_internal_oracle_quote();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.ExpiryFuturesMarketLaunchProposal.oracle_quote");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  // uint32 oracle_scale_factor = 7 [json_name = "oracleScaleFactor"];
  if (this->_internal_oracle_scale_factor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        7, this->_internal_oracle_scale_factor(), target);
  }

  // .injective.oracle.v1beta1.OracleType oracle_type = 8 [json_name = "oracleType"];
  if (this->_internal_oracle_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        8, this->_internal_oracle_type(), target);
  }

  // int64 expiry = 9 [json_name = "expiry"];
  if (this->_internal_expiry() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        9, this->_internal_expiry(), target);
  }

  // string initial_margin_ratio = 10 [json_name = "initialMarginRatio", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_initial_margin_ratio().empty()) {
    const std::string& _s = this->_internal_initial_margin_ratio();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.ExpiryFuturesMarketLaunchProposal.initial_margin_ratio");
    target = stream->WriteStringMaybeAliased(10, _s, target);
  }

  // string maintenance_margin_ratio = 11 [json_name = "maintenanceMarginRatio", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_maintenance_margin_ratio().empty()) {
    const std::string& _s = this->_internal_maintenance_margin_ratio();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.ExpiryFuturesMarketLaunchProposal.maintenance_margin_ratio");
    target = stream->WriteStringMaybeAliased(11, _s, target);
  }

  // string maker_fee_rate = 12 [json_name = "makerFeeRate", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_maker_fee_rate().empty()) {
    const std::string& _s = this->_internal_maker_fee_rate();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.ExpiryFuturesMarketLaunchProposal.maker_fee_rate");
    target = stream->WriteStringMaybeAliased(12, _s, target);
  }

  // string taker_fee_rate = 13 [json_name = "takerFeeRate", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_taker_fee_rate().empty()) {
    const std::string& _s = this->_internal_taker_fee_rate();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.ExpiryFuturesMarketLaunchProposal.taker_fee_rate");
    target = stream->WriteStringMaybeAliased(13, _s, target);
  }

  // string min_price_tick_size = 14 [json_name = "minPriceTickSize", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_min_price_tick_size().empty()) {
    const std::string& _s = this->_internal_min_price_tick_size();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.ExpiryFuturesMarketLaunchProposal.min_price_tick_size");
    target = stream->WriteStringMaybeAliased(14, _s, target);
  }

  // string min_quantity_tick_size = 15 [json_name = "minQuantityTickSize", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_min_quantity_tick_size().empty()) {
    const std::string& _s = this->_internal_min_quantity_tick_size();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.ExpiryFuturesMarketLaunchProposal.min_quantity_tick_size");
    target = stream->WriteStringMaybeAliased(15, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.ExpiryFuturesMarketLaunchProposal)
  return target;
}

::size_t ExpiryFuturesMarketLaunchProposal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.ExpiryFuturesMarketLaunchProposal)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string title = 1 [json_name = "title"];
  if (!this->_internal_title().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_title());
  }

  // string description = 2 [json_name = "description"];
  if (!this->_internal_description().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_description());
  }

  // string ticker = 3 [json_name = "ticker"];
  if (!this->_internal_ticker().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_ticker());
  }

  // string quote_denom = 4 [json_name = "quoteDenom"];
  if (!this->_internal_quote_denom().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_quote_denom());
  }

  // string oracle_base = 5 [json_name = "oracleBase"];
  if (!this->_internal_oracle_base().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_oracle_base());
  }

  // string oracle_quote = 6 [json_name = "oracleQuote"];
  if (!this->_internal_oracle_quote().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_oracle_quote());
  }

  // string initial_margin_ratio = 10 [json_name = "initialMarginRatio", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_initial_margin_ratio().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_initial_margin_ratio());
  }

  // string maintenance_margin_ratio = 11 [json_name = "maintenanceMarginRatio", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_maintenance_margin_ratio().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_maintenance_margin_ratio());
  }

  // string maker_fee_rate = 12 [json_name = "makerFeeRate", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_maker_fee_rate().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_maker_fee_rate());
  }

  // string taker_fee_rate = 13 [json_name = "takerFeeRate", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_taker_fee_rate().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_taker_fee_rate());
  }

  // string min_price_tick_size = 14 [json_name = "minPriceTickSize", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_min_price_tick_size().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_min_price_tick_size());
  }

  // string min_quantity_tick_size = 15 [json_name = "minQuantityTickSize", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_min_quantity_tick_size().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_min_quantity_tick_size());
  }

  // uint32 oracle_scale_factor = 7 [json_name = "oracleScaleFactor"];
  if (this->_internal_oracle_scale_factor() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_oracle_scale_factor());
  }

  // .injective.oracle.v1beta1.OracleType oracle_type = 8 [json_name = "oracleType"];
  if (this->_internal_oracle_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_oracle_type());
  }

  // int64 expiry = 9 [json_name = "expiry"];
  if (this->_internal_expiry() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_expiry());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExpiryFuturesMarketLaunchProposal::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ExpiryFuturesMarketLaunchProposal::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExpiryFuturesMarketLaunchProposal::GetClassData() const { return &_class_data_; }


void ExpiryFuturesMarketLaunchProposal::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ExpiryFuturesMarketLaunchProposal*>(&to_msg);
  auto& from = static_cast<const ExpiryFuturesMarketLaunchProposal&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.ExpiryFuturesMarketLaunchProposal)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_title().empty()) {
    _this->_internal_set_title(from._internal_title());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  if (!from._internal_ticker().empty()) {
    _this->_internal_set_ticker(from._internal_ticker());
  }
  if (!from._internal_quote_denom().empty()) {
    _this->_internal_set_quote_denom(from._internal_quote_denom());
  }
  if (!from._internal_oracle_base().empty()) {
    _this->_internal_set_oracle_base(from._internal_oracle_base());
  }
  if (!from._internal_oracle_quote().empty()) {
    _this->_internal_set_oracle_quote(from._internal_oracle_quote());
  }
  if (!from._internal_initial_margin_ratio().empty()) {
    _this->_internal_set_initial_margin_ratio(from._internal_initial_margin_ratio());
  }
  if (!from._internal_maintenance_margin_ratio().empty()) {
    _this->_internal_set_maintenance_margin_ratio(from._internal_maintenance_margin_ratio());
  }
  if (!from._internal_maker_fee_rate().empty()) {
    _this->_internal_set_maker_fee_rate(from._internal_maker_fee_rate());
  }
  if (!from._internal_taker_fee_rate().empty()) {
    _this->_internal_set_taker_fee_rate(from._internal_taker_fee_rate());
  }
  if (!from._internal_min_price_tick_size().empty()) {
    _this->_internal_set_min_price_tick_size(from._internal_min_price_tick_size());
  }
  if (!from._internal_min_quantity_tick_size().empty()) {
    _this->_internal_set_min_quantity_tick_size(from._internal_min_quantity_tick_size());
  }
  if (from._internal_oracle_scale_factor() != 0) {
    _this->_internal_set_oracle_scale_factor(from._internal_oracle_scale_factor());
  }
  if (from._internal_oracle_type() != 0) {
    _this->_internal_set_oracle_type(from._internal_oracle_type());
  }
  if (from._internal_expiry() != 0) {
    _this->_internal_set_expiry(from._internal_expiry());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExpiryFuturesMarketLaunchProposal::CopyFrom(const ExpiryFuturesMarketLaunchProposal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.ExpiryFuturesMarketLaunchProposal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExpiryFuturesMarketLaunchProposal::IsInitialized() const {
  return true;
}

void ExpiryFuturesMarketLaunchProposal::InternalSwap(ExpiryFuturesMarketLaunchProposal* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.title_, lhs_arena,
                                       &other->_impl_.title_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.description_, lhs_arena,
                                       &other->_impl_.description_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.ticker_, lhs_arena,
                                       &other->_impl_.ticker_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.quote_denom_, lhs_arena,
                                       &other->_impl_.quote_denom_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.oracle_base_, lhs_arena,
                                       &other->_impl_.oracle_base_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.oracle_quote_, lhs_arena,
                                       &other->_impl_.oracle_quote_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.initial_margin_ratio_, lhs_arena,
                                       &other->_impl_.initial_margin_ratio_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.maintenance_margin_ratio_, lhs_arena,
                                       &other->_impl_.maintenance_margin_ratio_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.maker_fee_rate_, lhs_arena,
                                       &other->_impl_.maker_fee_rate_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.taker_fee_rate_, lhs_arena,
                                       &other->_impl_.taker_fee_rate_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.min_price_tick_size_, lhs_arena,
                                       &other->_impl_.min_price_tick_size_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.min_quantity_tick_size_, lhs_arena,
                                       &other->_impl_.min_quantity_tick_size_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ExpiryFuturesMarketLaunchProposal, _impl_.expiry_)
      + sizeof(ExpiryFuturesMarketLaunchProposal::_impl_.expiry_)
      - PROTOBUF_FIELD_OFFSET(ExpiryFuturesMarketLaunchProposal, _impl_.oracle_scale_factor_)>(
          reinterpret_cast<char*>(&_impl_.oracle_scale_factor_),
          reinterpret_cast<char*>(&other->_impl_.oracle_scale_factor_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ExpiryFuturesMarketLaunchProposal::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2ftx_2eproto[63]);
}
// ===================================================================

class DerivativeMarketParamUpdateProposal::_Internal {
 public:
  using HasBits = decltype(std::declval<DerivativeMarketParamUpdateProposal>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(DerivativeMarketParamUpdateProposal, _impl_._has_bits_);
  static const ::injective::exchange::v1beta1::OracleParams& oracle_params(const DerivativeMarketParamUpdateProposal* msg);
  static void set_has_oracle_params(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::injective::exchange::v1beta1::OracleParams&
DerivativeMarketParamUpdateProposal::_Internal::oracle_params(const DerivativeMarketParamUpdateProposal* msg) {
  return *msg->_impl_.oracle_params_;
}
DerivativeMarketParamUpdateProposal::DerivativeMarketParamUpdateProposal(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.DerivativeMarketParamUpdateProposal)
}
DerivativeMarketParamUpdateProposal::DerivativeMarketParamUpdateProposal(const DerivativeMarketParamUpdateProposal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DerivativeMarketParamUpdateProposal* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.title_) {}

    , decltype(_impl_.description_) {}

    , decltype(_impl_.market_id_) {}

    , decltype(_impl_.initial_margin_ratio_) {}

    , decltype(_impl_.maintenance_margin_ratio_) {}

    , decltype(_impl_.maker_fee_rate_) {}

    , decltype(_impl_.taker_fee_rate_) {}

    , decltype(_impl_.relayer_fee_share_rate_) {}

    , decltype(_impl_.min_price_tick_size_) {}

    , decltype(_impl_.min_quantity_tick_size_) {}

    , decltype(_impl_.hourlyinterestrate_) {}

    , decltype(_impl_.hourlyfundingratecap_) {}

    , decltype(_impl_.oracle_params_){nullptr}
    , decltype(_impl_.status_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.title_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_title().empty()) {
    _this->_impl_.title_.Set(from._internal_title(), _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.description_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), _this->GetArenaForAllocation());
  }
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_market_id().empty()) {
    _this->_impl_.market_id_.Set(from._internal_market_id(), _this->GetArenaForAllocation());
  }
  _impl_.initial_margin_ratio_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.initial_margin_ratio_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_initial_margin_ratio().empty()) {
    _this->_impl_.initial_margin_ratio_.Set(from._internal_initial_margin_ratio(), _this->GetArenaForAllocation());
  }
  _impl_.maintenance_margin_ratio_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.maintenance_margin_ratio_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_maintenance_margin_ratio().empty()) {
    _this->_impl_.maintenance_margin_ratio_.Set(from._internal_maintenance_margin_ratio(), _this->GetArenaForAllocation());
  }
  _impl_.maker_fee_rate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.maker_fee_rate_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_maker_fee_rate().empty()) {
    _this->_impl_.maker_fee_rate_.Set(from._internal_maker_fee_rate(), _this->GetArenaForAllocation());
  }
  _impl_.taker_fee_rate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.taker_fee_rate_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_taker_fee_rate().empty()) {
    _this->_impl_.taker_fee_rate_.Set(from._internal_taker_fee_rate(), _this->GetArenaForAllocation());
  }
  _impl_.relayer_fee_share_rate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.relayer_fee_share_rate_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_relayer_fee_share_rate().empty()) {
    _this->_impl_.relayer_fee_share_rate_.Set(from._internal_relayer_fee_share_rate(), _this->GetArenaForAllocation());
  }
  _impl_.min_price_tick_size_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.min_price_tick_size_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_min_price_tick_size().empty()) {
    _this->_impl_.min_price_tick_size_.Set(from._internal_min_price_tick_size(), _this->GetArenaForAllocation());
  }
  _impl_.min_quantity_tick_size_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.min_quantity_tick_size_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_min_quantity_tick_size().empty()) {
    _this->_impl_.min_quantity_tick_size_.Set(from._internal_min_quantity_tick_size(), _this->GetArenaForAllocation());
  }
  _impl_.hourlyinterestrate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.hourlyinterestrate_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hourlyinterestrate().empty()) {
    _this->_impl_.hourlyinterestrate_.Set(from._internal_hourlyinterestrate(), _this->GetArenaForAllocation());
  }
  _impl_.hourlyfundingratecap_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.hourlyfundingratecap_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hourlyfundingratecap().empty()) {
    _this->_impl_.hourlyfundingratecap_.Set(from._internal_hourlyfundingratecap(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.oracle_params_ = new ::injective::exchange::v1beta1::OracleParams(*from._impl_.oracle_params_);
  }
  _this->_impl_.status_ = from._impl_.status_;
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.DerivativeMarketParamUpdateProposal)
}

inline void DerivativeMarketParamUpdateProposal::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.title_) {}

    , decltype(_impl_.description_) {}

    , decltype(_impl_.market_id_) {}

    , decltype(_impl_.initial_margin_ratio_) {}

    , decltype(_impl_.maintenance_margin_ratio_) {}

    , decltype(_impl_.maker_fee_rate_) {}

    , decltype(_impl_.taker_fee_rate_) {}

    , decltype(_impl_.relayer_fee_share_rate_) {}

    , decltype(_impl_.min_price_tick_size_) {}

    , decltype(_impl_.min_quantity_tick_size_) {}

    , decltype(_impl_.hourlyinterestrate_) {}

    , decltype(_impl_.hourlyfundingratecap_) {}

    , decltype(_impl_.oracle_params_){nullptr}
    , decltype(_impl_.status_) { 0 }

  };
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.title_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.description_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.initial_margin_ratio_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.initial_margin_ratio_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.maintenance_margin_ratio_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.maintenance_margin_ratio_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.maker_fee_rate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.maker_fee_rate_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.taker_fee_rate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.taker_fee_rate_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.relayer_fee_share_rate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.relayer_fee_share_rate_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.min_price_tick_size_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.min_price_tick_size_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.min_quantity_tick_size_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.min_quantity_tick_size_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.hourlyinterestrate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.hourlyinterestrate_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.hourlyfundingratecap_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.hourlyfundingratecap_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DerivativeMarketParamUpdateProposal::~DerivativeMarketParamUpdateProposal() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.DerivativeMarketParamUpdateProposal)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DerivativeMarketParamUpdateProposal::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.title_.Destroy();
  _impl_.description_.Destroy();
  _impl_.market_id_.Destroy();
  _impl_.initial_margin_ratio_.Destroy();
  _impl_.maintenance_margin_ratio_.Destroy();
  _impl_.maker_fee_rate_.Destroy();
  _impl_.taker_fee_rate_.Destroy();
  _impl_.relayer_fee_share_rate_.Destroy();
  _impl_.min_price_tick_size_.Destroy();
  _impl_.min_quantity_tick_size_.Destroy();
  _impl_.hourlyinterestrate_.Destroy();
  _impl_.hourlyfundingratecap_.Destroy();
  if (this != internal_default_instance()) delete _impl_.oracle_params_;
}

void DerivativeMarketParamUpdateProposal::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DerivativeMarketParamUpdateProposal::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.DerivativeMarketParamUpdateProposal)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.title_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  _impl_.market_id_.ClearToEmpty();
  _impl_.initial_margin_ratio_.ClearToEmpty();
  _impl_.maintenance_margin_ratio_.ClearToEmpty();
  _impl_.maker_fee_rate_.ClearToEmpty();
  _impl_.taker_fee_rate_.ClearToEmpty();
  _impl_.relayer_fee_share_rate_.ClearToEmpty();
  _impl_.min_price_tick_size_.ClearToEmpty();
  _impl_.min_quantity_tick_size_.ClearToEmpty();
  _impl_.hourlyinterestrate_.ClearToEmpty();
  _impl_.hourlyfundingratecap_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.oracle_params_ != nullptr);
    _impl_.oracle_params_->Clear();
  }
  _impl_.status_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DerivativeMarketParamUpdateProposal::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string title = 1 [json_name = "title"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.DerivativeMarketParamUpdateProposal.title"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string description = 2 [json_name = "description"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.DerivativeMarketParamUpdateProposal.description"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string market_id = 3 [json_name = "marketId"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_market_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.DerivativeMarketParamUpdateProposal.market_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string initial_margin_ratio = 4 [json_name = "initialMarginRatio", (.gogoproto.nullable) = true, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_initial_margin_ratio();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.DerivativeMarketParamUpdateProposal.initial_margin_ratio"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string maintenance_margin_ratio = 5 [json_name = "maintenanceMarginRatio", (.gogoproto.nullable) = true, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_maintenance_margin_ratio();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.DerivativeMarketParamUpdateProposal.maintenance_margin_ratio"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string maker_fee_rate = 6 [json_name = "makerFeeRate", (.gogoproto.nullable) = true, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_maker_fee_rate();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.DerivativeMarketParamUpdateProposal.maker_fee_rate"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string taker_fee_rate = 7 [json_name = "takerFeeRate", (.gogoproto.nullable) = true, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_taker_fee_rate();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.DerivativeMarketParamUpdateProposal.taker_fee_rate"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string relayer_fee_share_rate = 8 [json_name = "relayerFeeShareRate", (.gogoproto.nullable) = true, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_relayer_fee_share_rate();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.DerivativeMarketParamUpdateProposal.relayer_fee_share_rate"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string min_price_tick_size = 9 [json_name = "minPriceTickSize", (.gogoproto.nullable) = true, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_min_price_tick_size();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.DerivativeMarketParamUpdateProposal.min_price_tick_size"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string min_quantity_tick_size = 10 [json_name = "minQuantityTickSize", (.gogoproto.nullable) = true, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_min_quantity_tick_size();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.DerivativeMarketParamUpdateProposal.min_quantity_tick_size"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string HourlyInterestRate = 11 [json_name = "HourlyInterestRate", (.gogoproto.nullable) = true, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_hourlyinterestrate();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.DerivativeMarketParamUpdateProposal.HourlyInterestRate"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string HourlyFundingRateCap = 12 [json_name = "HourlyFundingRateCap", (.gogoproto.nullable) = true, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_hourlyfundingratecap();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.DerivativeMarketParamUpdateProposal.HourlyFundingRateCap"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .injective.exchange.v1beta1.MarketStatus status = 13 [json_name = "status"];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 104)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::injective::exchange::v1beta1::MarketStatus>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // .injective.exchange.v1beta1.OracleParams oracle_params = 14 [json_name = "oracleParams"];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_oracle_params(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* DerivativeMarketParamUpdateProposal::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.DerivativeMarketParamUpdateProposal)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string title = 1 [json_name = "title"];
  if (!this->_internal_title().empty()) {
    const std::string& _s = this->_internal_title();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.DerivativeMarketParamUpdateProposal.title");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string description = 2 [json_name = "description"];
  if (!this->_internal_description().empty()) {
    const std::string& _s = this->_internal_description();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.DerivativeMarketParamUpdateProposal.description");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string market_id = 3 [json_name = "marketId"];
  if (!this->_internal_market_id().empty()) {
    const std::string& _s = this->_internal_market_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.DerivativeMarketParamUpdateProposal.market_id");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string initial_margin_ratio = 4 [json_name = "initialMarginRatio", (.gogoproto.nullable) = true, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_initial_margin_ratio().empty()) {
    const std::string& _s = this->_internal_initial_margin_ratio();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.DerivativeMarketParamUpdateProposal.initial_margin_ratio");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // string maintenance_margin_ratio = 5 [json_name = "maintenanceMarginRatio", (.gogoproto.nullable) = true, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_maintenance_margin_ratio().empty()) {
    const std::string& _s = this->_internal_maintenance_margin_ratio();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.DerivativeMarketParamUpdateProposal.maintenance_margin_ratio");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // string maker_fee_rate = 6 [json_name = "makerFeeRate", (.gogoproto.nullable) = true, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_maker_fee_rate().empty()) {
    const std::string& _s = this->_internal_maker_fee_rate();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.DerivativeMarketParamUpdateProposal.maker_fee_rate");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  // string taker_fee_rate = 7 [json_name = "takerFeeRate", (.gogoproto.nullable) = true, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_taker_fee_rate().empty()) {
    const std::string& _s = this->_internal_taker_fee_rate();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.DerivativeMarketParamUpdateProposal.taker_fee_rate");
    target = stream->WriteStringMaybeAliased(7, _s, target);
  }

  // string relayer_fee_share_rate = 8 [json_name = "relayerFeeShareRate", (.gogoproto.nullable) = true, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_relayer_fee_share_rate().empty()) {
    const std::string& _s = this->_internal_relayer_fee_share_rate();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.DerivativeMarketParamUpdateProposal.relayer_fee_share_rate");
    target = stream->WriteStringMaybeAliased(8, _s, target);
  }

  // string min_price_tick_size = 9 [json_name = "minPriceTickSize", (.gogoproto.nullable) = true, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_min_price_tick_size().empty()) {
    const std::string& _s = this->_internal_min_price_tick_size();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.DerivativeMarketParamUpdateProposal.min_price_tick_size");
    target = stream->WriteStringMaybeAliased(9, _s, target);
  }

  // string min_quantity_tick_size = 10 [json_name = "minQuantityTickSize", (.gogoproto.nullable) = true, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_min_quantity_tick_size().empty()) {
    const std::string& _s = this->_internal_min_quantity_tick_size();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.DerivativeMarketParamUpdateProposal.min_quantity_tick_size");
    target = stream->WriteStringMaybeAliased(10, _s, target);
  }

  // string HourlyInterestRate = 11 [json_name = "HourlyInterestRate", (.gogoproto.nullable) = true, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_hourlyinterestrate().empty()) {
    const std::string& _s = this->_internal_hourlyinterestrate();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.DerivativeMarketParamUpdateProposal.HourlyInterestRate");
    target = stream->WriteStringMaybeAliased(11, _s, target);
  }

  // string HourlyFundingRateCap = 12 [json_name = "HourlyFundingRateCap", (.gogoproto.nullable) = true, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_hourlyfundingratecap().empty()) {
    const std::string& _s = this->_internal_hourlyfundingratecap();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.DerivativeMarketParamUpdateProposal.HourlyFundingRateCap");
    target = stream->WriteStringMaybeAliased(12, _s, target);
  }

  // .injective.exchange.v1beta1.MarketStatus status = 13 [json_name = "status"];
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        13, this->_internal_status(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .injective.exchange.v1beta1.OracleParams oracle_params = 14 [json_name = "oracleParams"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::oracle_params(this),
        _Internal::oracle_params(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.DerivativeMarketParamUpdateProposal)
  return target;
}

::size_t DerivativeMarketParamUpdateProposal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.DerivativeMarketParamUpdateProposal)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string title = 1 [json_name = "title"];
  if (!this->_internal_title().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_title());
  }

  // string description = 2 [json_name = "description"];
  if (!this->_internal_description().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_description());
  }

  // string market_id = 3 [json_name = "marketId"];
  if (!this->_internal_market_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_market_id());
  }

  // string initial_margin_ratio = 4 [json_name = "initialMarginRatio", (.gogoproto.nullable) = true, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_initial_margin_ratio().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_initial_margin_ratio());
  }

  // string maintenance_margin_ratio = 5 [json_name = "maintenanceMarginRatio", (.gogoproto.nullable) = true, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_maintenance_margin_ratio().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_maintenance_margin_ratio());
  }

  // string maker_fee_rate = 6 [json_name = "makerFeeRate", (.gogoproto.nullable) = true, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_maker_fee_rate().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_maker_fee_rate());
  }

  // string taker_fee_rate = 7 [json_name = "takerFeeRate", (.gogoproto.nullable) = true, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_taker_fee_rate().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_taker_fee_rate());
  }

  // string relayer_fee_share_rate = 8 [json_name = "relayerFeeShareRate", (.gogoproto.nullable) = true, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_relayer_fee_share_rate().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_relayer_fee_share_rate());
  }

  // string min_price_tick_size = 9 [json_name = "minPriceTickSize", (.gogoproto.nullable) = true, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_min_price_tick_size().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_min_price_tick_size());
  }

  // string min_quantity_tick_size = 10 [json_name = "minQuantityTickSize", (.gogoproto.nullable) = true, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_min_quantity_tick_size().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_min_quantity_tick_size());
  }

  // string HourlyInterestRate = 11 [json_name = "HourlyInterestRate", (.gogoproto.nullable) = true, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_hourlyinterestrate().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_hourlyinterestrate());
  }

  // string HourlyFundingRateCap = 12 [json_name = "HourlyFundingRateCap", (.gogoproto.nullable) = true, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_hourlyfundingratecap().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_hourlyfundingratecap());
  }

  // .injective.exchange.v1beta1.OracleParams oracle_params = 14 [json_name = "oracleParams"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.oracle_params_);
  }

  // .injective.exchange.v1beta1.MarketStatus status = 13 [json_name = "status"];
  if (this->_internal_status() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DerivativeMarketParamUpdateProposal::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DerivativeMarketParamUpdateProposal::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DerivativeMarketParamUpdateProposal::GetClassData() const { return &_class_data_; }


void DerivativeMarketParamUpdateProposal::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DerivativeMarketParamUpdateProposal*>(&to_msg);
  auto& from = static_cast<const DerivativeMarketParamUpdateProposal&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.DerivativeMarketParamUpdateProposal)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_title().empty()) {
    _this->_internal_set_title(from._internal_title());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  if (!from._internal_market_id().empty()) {
    _this->_internal_set_market_id(from._internal_market_id());
  }
  if (!from._internal_initial_margin_ratio().empty()) {
    _this->_internal_set_initial_margin_ratio(from._internal_initial_margin_ratio());
  }
  if (!from._internal_maintenance_margin_ratio().empty()) {
    _this->_internal_set_maintenance_margin_ratio(from._internal_maintenance_margin_ratio());
  }
  if (!from._internal_maker_fee_rate().empty()) {
    _this->_internal_set_maker_fee_rate(from._internal_maker_fee_rate());
  }
  if (!from._internal_taker_fee_rate().empty()) {
    _this->_internal_set_taker_fee_rate(from._internal_taker_fee_rate());
  }
  if (!from._internal_relayer_fee_share_rate().empty()) {
    _this->_internal_set_relayer_fee_share_rate(from._internal_relayer_fee_share_rate());
  }
  if (!from._internal_min_price_tick_size().empty()) {
    _this->_internal_set_min_price_tick_size(from._internal_min_price_tick_size());
  }
  if (!from._internal_min_quantity_tick_size().empty()) {
    _this->_internal_set_min_quantity_tick_size(from._internal_min_quantity_tick_size());
  }
  if (!from._internal_hourlyinterestrate().empty()) {
    _this->_internal_set_hourlyinterestrate(from._internal_hourlyinterestrate());
  }
  if (!from._internal_hourlyfundingratecap().empty()) {
    _this->_internal_set_hourlyfundingratecap(from._internal_hourlyfundingratecap());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_oracle_params()->::injective::exchange::v1beta1::OracleParams::MergeFrom(
        from._internal_oracle_params());
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DerivativeMarketParamUpdateProposal::CopyFrom(const DerivativeMarketParamUpdateProposal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.DerivativeMarketParamUpdateProposal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DerivativeMarketParamUpdateProposal::IsInitialized() const {
  return true;
}

void DerivativeMarketParamUpdateProposal::InternalSwap(DerivativeMarketParamUpdateProposal* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.title_, lhs_arena,
                                       &other->_impl_.title_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.description_, lhs_arena,
                                       &other->_impl_.description_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.market_id_, lhs_arena,
                                       &other->_impl_.market_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.initial_margin_ratio_, lhs_arena,
                                       &other->_impl_.initial_margin_ratio_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.maintenance_margin_ratio_, lhs_arena,
                                       &other->_impl_.maintenance_margin_ratio_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.maker_fee_rate_, lhs_arena,
                                       &other->_impl_.maker_fee_rate_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.taker_fee_rate_, lhs_arena,
                                       &other->_impl_.taker_fee_rate_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.relayer_fee_share_rate_, lhs_arena,
                                       &other->_impl_.relayer_fee_share_rate_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.min_price_tick_size_, lhs_arena,
                                       &other->_impl_.min_price_tick_size_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.min_quantity_tick_size_, lhs_arena,
                                       &other->_impl_.min_quantity_tick_size_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.hourlyinterestrate_, lhs_arena,
                                       &other->_impl_.hourlyinterestrate_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.hourlyfundingratecap_, lhs_arena,
                                       &other->_impl_.hourlyfundingratecap_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DerivativeMarketParamUpdateProposal, _impl_.status_)
      + sizeof(DerivativeMarketParamUpdateProposal::_impl_.status_)
      - PROTOBUF_FIELD_OFFSET(DerivativeMarketParamUpdateProposal, _impl_.oracle_params_)>(
          reinterpret_cast<char*>(&_impl_.oracle_params_),
          reinterpret_cast<char*>(&other->_impl_.oracle_params_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DerivativeMarketParamUpdateProposal::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2ftx_2eproto[64]);
}
// ===================================================================

class MarketForcedSettlementProposal::_Internal {
 public:
};

MarketForcedSettlementProposal::MarketForcedSettlementProposal(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.MarketForcedSettlementProposal)
}
MarketForcedSettlementProposal::MarketForcedSettlementProposal(const MarketForcedSettlementProposal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MarketForcedSettlementProposal* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.title_) {}

    , decltype(_impl_.description_) {}

    , decltype(_impl_.market_id_) {}

    , decltype(_impl_.settlement_price_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.title_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_title().empty()) {
    _this->_impl_.title_.Set(from._internal_title(), _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.description_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), _this->GetArenaForAllocation());
  }
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_market_id().empty()) {
    _this->_impl_.market_id_.Set(from._internal_market_id(), _this->GetArenaForAllocation());
  }
  _impl_.settlement_price_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.settlement_price_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_settlement_price().empty()) {
    _this->_impl_.settlement_price_.Set(from._internal_settlement_price(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.MarketForcedSettlementProposal)
}

inline void MarketForcedSettlementProposal::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.title_) {}

    , decltype(_impl_.description_) {}

    , decltype(_impl_.market_id_) {}

    , decltype(_impl_.settlement_price_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.title_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.description_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.settlement_price_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.settlement_price_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MarketForcedSettlementProposal::~MarketForcedSettlementProposal() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.MarketForcedSettlementProposal)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MarketForcedSettlementProposal::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.title_.Destroy();
  _impl_.description_.Destroy();
  _impl_.market_id_.Destroy();
  _impl_.settlement_price_.Destroy();
}

void MarketForcedSettlementProposal::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MarketForcedSettlementProposal::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.MarketForcedSettlementProposal)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.title_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  _impl_.market_id_.ClearToEmpty();
  _impl_.settlement_price_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MarketForcedSettlementProposal::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string title = 1 [json_name = "title"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.MarketForcedSettlementProposal.title"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string description = 2 [json_name = "description"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.MarketForcedSettlementProposal.description"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string market_id = 3 [json_name = "marketId"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_market_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.MarketForcedSettlementProposal.market_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string settlement_price = 4 [json_name = "settlementPrice", (.gogoproto.nullable) = true, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_settlement_price();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.MarketForcedSettlementProposal.settlement_price"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MarketForcedSettlementProposal::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.MarketForcedSettlementProposal)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string title = 1 [json_name = "title"];
  if (!this->_internal_title().empty()) {
    const std::string& _s = this->_internal_title();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.MarketForcedSettlementProposal.title");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string description = 2 [json_name = "description"];
  if (!this->_internal_description().empty()) {
    const std::string& _s = this->_internal_description();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.MarketForcedSettlementProposal.description");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string market_id = 3 [json_name = "marketId"];
  if (!this->_internal_market_id().empty()) {
    const std::string& _s = this->_internal_market_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.MarketForcedSettlementProposal.market_id");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string settlement_price = 4 [json_name = "settlementPrice", (.gogoproto.nullable) = true, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_settlement_price().empty()) {
    const std::string& _s = this->_internal_settlement_price();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.MarketForcedSettlementProposal.settlement_price");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.MarketForcedSettlementProposal)
  return target;
}

::size_t MarketForcedSettlementProposal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.MarketForcedSettlementProposal)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string title = 1 [json_name = "title"];
  if (!this->_internal_title().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_title());
  }

  // string description = 2 [json_name = "description"];
  if (!this->_internal_description().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_description());
  }

  // string market_id = 3 [json_name = "marketId"];
  if (!this->_internal_market_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_market_id());
  }

  // string settlement_price = 4 [json_name = "settlementPrice", (.gogoproto.nullable) = true, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_settlement_price().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_settlement_price());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MarketForcedSettlementProposal::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MarketForcedSettlementProposal::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MarketForcedSettlementProposal::GetClassData() const { return &_class_data_; }


void MarketForcedSettlementProposal::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MarketForcedSettlementProposal*>(&to_msg);
  auto& from = static_cast<const MarketForcedSettlementProposal&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.MarketForcedSettlementProposal)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_title().empty()) {
    _this->_internal_set_title(from._internal_title());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  if (!from._internal_market_id().empty()) {
    _this->_internal_set_market_id(from._internal_market_id());
  }
  if (!from._internal_settlement_price().empty()) {
    _this->_internal_set_settlement_price(from._internal_settlement_price());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MarketForcedSettlementProposal::CopyFrom(const MarketForcedSettlementProposal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.MarketForcedSettlementProposal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketForcedSettlementProposal::IsInitialized() const {
  return true;
}

void MarketForcedSettlementProposal::InternalSwap(MarketForcedSettlementProposal* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.title_, lhs_arena,
                                       &other->_impl_.title_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.description_, lhs_arena,
                                       &other->_impl_.description_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.market_id_, lhs_arena,
                                       &other->_impl_.market_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.settlement_price_, lhs_arena,
                                       &other->_impl_.settlement_price_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata MarketForcedSettlementProposal::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2ftx_2eproto[65]);
}
// ===================================================================

class UpdateDenomDecimalsProposal::_Internal {
 public:
};

void UpdateDenomDecimalsProposal::clear_denom_decimals() {
  _internal_mutable_denom_decimals()->Clear();
}
UpdateDenomDecimalsProposal::UpdateDenomDecimalsProposal(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.UpdateDenomDecimalsProposal)
}
UpdateDenomDecimalsProposal::UpdateDenomDecimalsProposal(const UpdateDenomDecimalsProposal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UpdateDenomDecimalsProposal* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.denom_decimals_){from._impl_.denom_decimals_}
    , decltype(_impl_.title_) {}

    , decltype(_impl_.description_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.title_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_title().empty()) {
    _this->_impl_.title_.Set(from._internal_title(), _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.description_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.UpdateDenomDecimalsProposal)
}

inline void UpdateDenomDecimalsProposal::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.denom_decimals_){arena}
    , decltype(_impl_.title_) {}

    , decltype(_impl_.description_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.title_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.description_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UpdateDenomDecimalsProposal::~UpdateDenomDecimalsProposal() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.UpdateDenomDecimalsProposal)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UpdateDenomDecimalsProposal::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_denom_decimals()->~RepeatedPtrField();
  _impl_.title_.Destroy();
  _impl_.description_.Destroy();
}

void UpdateDenomDecimalsProposal::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UpdateDenomDecimalsProposal::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.UpdateDenomDecimalsProposal)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_denom_decimals()->Clear();
  _impl_.title_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateDenomDecimalsProposal::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string title = 1 [json_name = "title"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.UpdateDenomDecimalsProposal.title"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string description = 2 [json_name = "description"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.UpdateDenomDecimalsProposal.description"));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .injective.exchange.v1beta1.DenomDecimals denom_decimals = 3 [json_name = "denomDecimals"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_denom_decimals(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* UpdateDenomDecimalsProposal::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.UpdateDenomDecimalsProposal)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string title = 1 [json_name = "title"];
  if (!this->_internal_title().empty()) {
    const std::string& _s = this->_internal_title();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.UpdateDenomDecimalsProposal.title");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string description = 2 [json_name = "description"];
  if (!this->_internal_description().empty()) {
    const std::string& _s = this->_internal_description();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.UpdateDenomDecimalsProposal.description");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // repeated .injective.exchange.v1beta1.DenomDecimals denom_decimals = 3 [json_name = "denomDecimals"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_denom_decimals_size()); i < n; i++) {
    const auto& repfield = this->_internal_denom_decimals(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.UpdateDenomDecimalsProposal)
  return target;
}

::size_t UpdateDenomDecimalsProposal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.UpdateDenomDecimalsProposal)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .injective.exchange.v1beta1.DenomDecimals denom_decimals = 3 [json_name = "denomDecimals"];
  total_size += 1UL * this->_internal_denom_decimals_size();
  for (const auto& msg : this->_internal_denom_decimals()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string title = 1 [json_name = "title"];
  if (!this->_internal_title().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_title());
  }

  // string description = 2 [json_name = "description"];
  if (!this->_internal_description().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_description());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateDenomDecimalsProposal::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UpdateDenomDecimalsProposal::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateDenomDecimalsProposal::GetClassData() const { return &_class_data_; }


void UpdateDenomDecimalsProposal::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UpdateDenomDecimalsProposal*>(&to_msg);
  auto& from = static_cast<const UpdateDenomDecimalsProposal&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.UpdateDenomDecimalsProposal)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_denom_decimals()->MergeFrom(from._internal_denom_decimals());
  if (!from._internal_title().empty()) {
    _this->_internal_set_title(from._internal_title());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateDenomDecimalsProposal::CopyFrom(const UpdateDenomDecimalsProposal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.UpdateDenomDecimalsProposal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateDenomDecimalsProposal::IsInitialized() const {
  return true;
}

void UpdateDenomDecimalsProposal::InternalSwap(UpdateDenomDecimalsProposal* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_denom_decimals()->InternalSwap(other->_internal_mutable_denom_decimals());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.title_, lhs_arena,
                                       &other->_impl_.title_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.description_, lhs_arena,
                                       &other->_impl_.description_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateDenomDecimalsProposal::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2ftx_2eproto[66]);
}
// ===================================================================

class BinaryOptionsMarketParamUpdateProposal::_Internal {
 public:
  using HasBits = decltype(std::declval<BinaryOptionsMarketParamUpdateProposal>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(BinaryOptionsMarketParamUpdateProposal, _impl_._has_bits_);
  static const ::injective::exchange::v1beta1::ProviderOracleParams& oracle_params(const BinaryOptionsMarketParamUpdateProposal* msg);
  static void set_has_oracle_params(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::injective::exchange::v1beta1::ProviderOracleParams&
BinaryOptionsMarketParamUpdateProposal::_Internal::oracle_params(const BinaryOptionsMarketParamUpdateProposal* msg) {
  return *msg->_impl_.oracle_params_;
}
BinaryOptionsMarketParamUpdateProposal::BinaryOptionsMarketParamUpdateProposal(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.BinaryOptionsMarketParamUpdateProposal)
}
BinaryOptionsMarketParamUpdateProposal::BinaryOptionsMarketParamUpdateProposal(const BinaryOptionsMarketParamUpdateProposal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BinaryOptionsMarketParamUpdateProposal* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.title_) {}

    , decltype(_impl_.description_) {}

    , decltype(_impl_.market_id_) {}

    , decltype(_impl_.maker_fee_rate_) {}

    , decltype(_impl_.taker_fee_rate_) {}

    , decltype(_impl_.relayer_fee_share_rate_) {}

    , decltype(_impl_.min_price_tick_size_) {}

    , decltype(_impl_.min_quantity_tick_size_) {}

    , decltype(_impl_.settlement_price_) {}

    , decltype(_impl_.admin_) {}

    , decltype(_impl_.oracle_params_){nullptr}
    , decltype(_impl_.expiration_timestamp_) {}

    , decltype(_impl_.settlement_timestamp_) {}

    , decltype(_impl_.status_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.title_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_title().empty()) {
    _this->_impl_.title_.Set(from._internal_title(), _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.description_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), _this->GetArenaForAllocation());
  }
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_market_id().empty()) {
    _this->_impl_.market_id_.Set(from._internal_market_id(), _this->GetArenaForAllocation());
  }
  _impl_.maker_fee_rate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.maker_fee_rate_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_maker_fee_rate().empty()) {
    _this->_impl_.maker_fee_rate_.Set(from._internal_maker_fee_rate(), _this->GetArenaForAllocation());
  }
  _impl_.taker_fee_rate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.taker_fee_rate_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_taker_fee_rate().empty()) {
    _this->_impl_.taker_fee_rate_.Set(from._internal_taker_fee_rate(), _this->GetArenaForAllocation());
  }
  _impl_.relayer_fee_share_rate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.relayer_fee_share_rate_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_relayer_fee_share_rate().empty()) {
    _this->_impl_.relayer_fee_share_rate_.Set(from._internal_relayer_fee_share_rate(), _this->GetArenaForAllocation());
  }
  _impl_.min_price_tick_size_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.min_price_tick_size_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_min_price_tick_size().empty()) {
    _this->_impl_.min_price_tick_size_.Set(from._internal_min_price_tick_size(), _this->GetArenaForAllocation());
  }
  _impl_.min_quantity_tick_size_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.min_quantity_tick_size_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_min_quantity_tick_size().empty()) {
    _this->_impl_.min_quantity_tick_size_.Set(from._internal_min_quantity_tick_size(), _this->GetArenaForAllocation());
  }
  _impl_.settlement_price_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.settlement_price_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_settlement_price().empty()) {
    _this->_impl_.settlement_price_.Set(from._internal_settlement_price(), _this->GetArenaForAllocation());
  }
  _impl_.admin_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.admin_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_admin().empty()) {
    _this->_impl_.admin_.Set(from._internal_admin(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.oracle_params_ = new ::injective::exchange::v1beta1::ProviderOracleParams(*from._impl_.oracle_params_);
  }
  ::memcpy(&_impl_.expiration_timestamp_, &from._impl_.expiration_timestamp_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.status_) -
    reinterpret_cast<char*>(&_impl_.expiration_timestamp_)) + sizeof(_impl_.status_));
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.BinaryOptionsMarketParamUpdateProposal)
}

inline void BinaryOptionsMarketParamUpdateProposal::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.title_) {}

    , decltype(_impl_.description_) {}

    , decltype(_impl_.market_id_) {}

    , decltype(_impl_.maker_fee_rate_) {}

    , decltype(_impl_.taker_fee_rate_) {}

    , decltype(_impl_.relayer_fee_share_rate_) {}

    , decltype(_impl_.min_price_tick_size_) {}

    , decltype(_impl_.min_quantity_tick_size_) {}

    , decltype(_impl_.settlement_price_) {}

    , decltype(_impl_.admin_) {}

    , decltype(_impl_.oracle_params_){nullptr}
    , decltype(_impl_.expiration_timestamp_) { ::int64_t{0} }

    , decltype(_impl_.settlement_timestamp_) { ::int64_t{0} }

    , decltype(_impl_.status_) { 0 }

  };
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.title_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.description_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.maker_fee_rate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.maker_fee_rate_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.taker_fee_rate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.taker_fee_rate_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.relayer_fee_share_rate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.relayer_fee_share_rate_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.min_price_tick_size_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.min_price_tick_size_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.min_quantity_tick_size_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.min_quantity_tick_size_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.settlement_price_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.settlement_price_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.admin_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.admin_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BinaryOptionsMarketParamUpdateProposal::~BinaryOptionsMarketParamUpdateProposal() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.BinaryOptionsMarketParamUpdateProposal)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BinaryOptionsMarketParamUpdateProposal::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.title_.Destroy();
  _impl_.description_.Destroy();
  _impl_.market_id_.Destroy();
  _impl_.maker_fee_rate_.Destroy();
  _impl_.taker_fee_rate_.Destroy();
  _impl_.relayer_fee_share_rate_.Destroy();
  _impl_.min_price_tick_size_.Destroy();
  _impl_.min_quantity_tick_size_.Destroy();
  _impl_.settlement_price_.Destroy();
  _impl_.admin_.Destroy();
  if (this != internal_default_instance()) delete _impl_.oracle_params_;
}

void BinaryOptionsMarketParamUpdateProposal::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BinaryOptionsMarketParamUpdateProposal::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.BinaryOptionsMarketParamUpdateProposal)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.title_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  _impl_.market_id_.ClearToEmpty();
  _impl_.maker_fee_rate_.ClearToEmpty();
  _impl_.taker_fee_rate_.ClearToEmpty();
  _impl_.relayer_fee_share_rate_.ClearToEmpty();
  _impl_.min_price_tick_size_.ClearToEmpty();
  _impl_.min_quantity_tick_size_.ClearToEmpty();
  _impl_.settlement_price_.ClearToEmpty();
  _impl_.admin_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.oracle_params_ != nullptr);
    _impl_.oracle_params_->Clear();
  }
  ::memset(&_impl_.expiration_timestamp_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.status_) -
      reinterpret_cast<char*>(&_impl_.expiration_timestamp_)) + sizeof(_impl_.status_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BinaryOptionsMarketParamUpdateProposal::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string title = 1 [json_name = "title"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.BinaryOptionsMarketParamUpdateProposal.title"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string description = 2 [json_name = "description"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.BinaryOptionsMarketParamUpdateProposal.description"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string market_id = 3 [json_name = "marketId"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_market_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.BinaryOptionsMarketParamUpdateProposal.market_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string maker_fee_rate = 4 [json_name = "makerFeeRate", (.gogoproto.nullable) = true, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_maker_fee_rate();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.BinaryOptionsMarketParamUpdateProposal.maker_fee_rate"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string taker_fee_rate = 5 [json_name = "takerFeeRate", (.gogoproto.nullable) = true, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_taker_fee_rate();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.BinaryOptionsMarketParamUpdateProposal.taker_fee_rate"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string relayer_fee_share_rate = 6 [json_name = "relayerFeeShareRate", (.gogoproto.nullable) = true, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_relayer_fee_share_rate();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.BinaryOptionsMarketParamUpdateProposal.relayer_fee_share_rate"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string min_price_tick_size = 7 [json_name = "minPriceTickSize", (.gogoproto.nullable) = true, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_min_price_tick_size();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.BinaryOptionsMarketParamUpdateProposal.min_price_tick_size"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string min_quantity_tick_size = 8 [json_name = "minQuantityTickSize", (.gogoproto.nullable) = true, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_min_quantity_tick_size();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.BinaryOptionsMarketParamUpdateProposal.min_quantity_tick_size"));
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 expiration_timestamp = 9 [json_name = "expirationTimestamp"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 72)) {
          _impl_.expiration_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 settlement_timestamp = 10 [json_name = "settlementTimestamp"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 80)) {
          _impl_.settlement_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string settlement_price = 11 [json_name = "settlementPrice", (.gogoproto.nullable) = true, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_settlement_price();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.BinaryOptionsMarketParamUpdateProposal.settlement_price"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string admin = 12 [json_name = "admin"];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_admin();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.BinaryOptionsMarketParamUpdateProposal.admin"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .injective.exchange.v1beta1.MarketStatus status = 13 [json_name = "status"];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 104)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::injective::exchange::v1beta1::MarketStatus>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // .injective.exchange.v1beta1.ProviderOracleParams oracle_params = 14 [json_name = "oracleParams"];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_oracle_params(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* BinaryOptionsMarketParamUpdateProposal::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.BinaryOptionsMarketParamUpdateProposal)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string title = 1 [json_name = "title"];
  if (!this->_internal_title().empty()) {
    const std::string& _s = this->_internal_title();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.BinaryOptionsMarketParamUpdateProposal.title");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string description = 2 [json_name = "description"];
  if (!this->_internal_description().empty()) {
    const std::string& _s = this->_internal_description();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.BinaryOptionsMarketParamUpdateProposal.description");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string market_id = 3 [json_name = "marketId"];
  if (!this->_internal_market_id().empty()) {
    const std::string& _s = this->_internal_market_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.BinaryOptionsMarketParamUpdateProposal.market_id");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string maker_fee_rate = 4 [json_name = "makerFeeRate", (.gogoproto.nullable) = true, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_maker_fee_rate().empty()) {
    const std::string& _s = this->_internal_maker_fee_rate();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.BinaryOptionsMarketParamUpdateProposal.maker_fee_rate");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // string taker_fee_rate = 5 [json_name = "takerFeeRate", (.gogoproto.nullable) = true, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_taker_fee_rate().empty()) {
    const std::string& _s = this->_internal_taker_fee_rate();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.BinaryOptionsMarketParamUpdateProposal.taker_fee_rate");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // string relayer_fee_share_rate = 6 [json_name = "relayerFeeShareRate", (.gogoproto.nullable) = true, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_relayer_fee_share_rate().empty()) {
    const std::string& _s = this->_internal_relayer_fee_share_rate();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.BinaryOptionsMarketParamUpdateProposal.relayer_fee_share_rate");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  // string min_price_tick_size = 7 [json_name = "minPriceTickSize", (.gogoproto.nullable) = true, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_min_price_tick_size().empty()) {
    const std::string& _s = this->_internal_min_price_tick_size();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.BinaryOptionsMarketParamUpdateProposal.min_price_tick_size");
    target = stream->WriteStringMaybeAliased(7, _s, target);
  }

  // string min_quantity_tick_size = 8 [json_name = "minQuantityTickSize", (.gogoproto.nullable) = true, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_min_quantity_tick_size().empty()) {
    const std::string& _s = this->_internal_min_quantity_tick_size();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.BinaryOptionsMarketParamUpdateProposal.min_quantity_tick_size");
    target = stream->WriteStringMaybeAliased(8, _s, target);
  }

  // int64 expiration_timestamp = 9 [json_name = "expirationTimestamp"];
  if (this->_internal_expiration_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        9, this->_internal_expiration_timestamp(), target);
  }

  // int64 settlement_timestamp = 10 [json_name = "settlementTimestamp"];
  if (this->_internal_settlement_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        10, this->_internal_settlement_timestamp(), target);
  }

  // string settlement_price = 11 [json_name = "settlementPrice", (.gogoproto.nullable) = true, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_settlement_price().empty()) {
    const std::string& _s = this->_internal_settlement_price();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.BinaryOptionsMarketParamUpdateProposal.settlement_price");
    target = stream->WriteStringMaybeAliased(11, _s, target);
  }

  // string admin = 12 [json_name = "admin"];
  if (!this->_internal_admin().empty()) {
    const std::string& _s = this->_internal_admin();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.BinaryOptionsMarketParamUpdateProposal.admin");
    target = stream->WriteStringMaybeAliased(12, _s, target);
  }

  // .injective.exchange.v1beta1.MarketStatus status = 13 [json_name = "status"];
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        13, this->_internal_status(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .injective.exchange.v1beta1.ProviderOracleParams oracle_params = 14 [json_name = "oracleParams"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::oracle_params(this),
        _Internal::oracle_params(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.BinaryOptionsMarketParamUpdateProposal)
  return target;
}

::size_t BinaryOptionsMarketParamUpdateProposal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.BinaryOptionsMarketParamUpdateProposal)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string title = 1 [json_name = "title"];
  if (!this->_internal_title().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_title());
  }

  // string description = 2 [json_name = "description"];
  if (!this->_internal_description().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_description());
  }

  // string market_id = 3 [json_name = "marketId"];
  if (!this->_internal_market_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_market_id());
  }

  // string maker_fee_rate = 4 [json_name = "makerFeeRate", (.gogoproto.nullable) = true, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_maker_fee_rate().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_maker_fee_rate());
  }

  // string taker_fee_rate = 5 [json_name = "takerFeeRate", (.gogoproto.nullable) = true, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_taker_fee_rate().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_taker_fee_rate());
  }

  // string relayer_fee_share_rate = 6 [json_name = "relayerFeeShareRate", (.gogoproto.nullable) = true, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_relayer_fee_share_rate().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_relayer_fee_share_rate());
  }

  // string min_price_tick_size = 7 [json_name = "minPriceTickSize", (.gogoproto.nullable) = true, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_min_price_tick_size().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_min_price_tick_size());
  }

  // string min_quantity_tick_size = 8 [json_name = "minQuantityTickSize", (.gogoproto.nullable) = true, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_min_quantity_tick_size().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_min_quantity_tick_size());
  }

  // string settlement_price = 11 [json_name = "settlementPrice", (.gogoproto.nullable) = true, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_settlement_price().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_settlement_price());
  }

  // string admin = 12 [json_name = "admin"];
  if (!this->_internal_admin().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_admin());
  }

  // .injective.exchange.v1beta1.ProviderOracleParams oracle_params = 14 [json_name = "oracleParams"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.oracle_params_);
  }

  // int64 expiration_timestamp = 9 [json_name = "expirationTimestamp"];
  if (this->_internal_expiration_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_expiration_timestamp());
  }

  // int64 settlement_timestamp = 10 [json_name = "settlementTimestamp"];
  if (this->_internal_settlement_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_settlement_timestamp());
  }

  // .injective.exchange.v1beta1.MarketStatus status = 13 [json_name = "status"];
  if (this->_internal_status() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BinaryOptionsMarketParamUpdateProposal::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BinaryOptionsMarketParamUpdateProposal::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BinaryOptionsMarketParamUpdateProposal::GetClassData() const { return &_class_data_; }


void BinaryOptionsMarketParamUpdateProposal::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BinaryOptionsMarketParamUpdateProposal*>(&to_msg);
  auto& from = static_cast<const BinaryOptionsMarketParamUpdateProposal&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.BinaryOptionsMarketParamUpdateProposal)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_title().empty()) {
    _this->_internal_set_title(from._internal_title());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  if (!from._internal_market_id().empty()) {
    _this->_internal_set_market_id(from._internal_market_id());
  }
  if (!from._internal_maker_fee_rate().empty()) {
    _this->_internal_set_maker_fee_rate(from._internal_maker_fee_rate());
  }
  if (!from._internal_taker_fee_rate().empty()) {
    _this->_internal_set_taker_fee_rate(from._internal_taker_fee_rate());
  }
  if (!from._internal_relayer_fee_share_rate().empty()) {
    _this->_internal_set_relayer_fee_share_rate(from._internal_relayer_fee_share_rate());
  }
  if (!from._internal_min_price_tick_size().empty()) {
    _this->_internal_set_min_price_tick_size(from._internal_min_price_tick_size());
  }
  if (!from._internal_min_quantity_tick_size().empty()) {
    _this->_internal_set_min_quantity_tick_size(from._internal_min_quantity_tick_size());
  }
  if (!from._internal_settlement_price().empty()) {
    _this->_internal_set_settlement_price(from._internal_settlement_price());
  }
  if (!from._internal_admin().empty()) {
    _this->_internal_set_admin(from._internal_admin());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_oracle_params()->::injective::exchange::v1beta1::ProviderOracleParams::MergeFrom(
        from._internal_oracle_params());
  }
  if (from._internal_expiration_timestamp() != 0) {
    _this->_internal_set_expiration_timestamp(from._internal_expiration_timestamp());
  }
  if (from._internal_settlement_timestamp() != 0) {
    _this->_internal_set_settlement_timestamp(from._internal_settlement_timestamp());
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BinaryOptionsMarketParamUpdateProposal::CopyFrom(const BinaryOptionsMarketParamUpdateProposal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.BinaryOptionsMarketParamUpdateProposal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BinaryOptionsMarketParamUpdateProposal::IsInitialized() const {
  return true;
}

void BinaryOptionsMarketParamUpdateProposal::InternalSwap(BinaryOptionsMarketParamUpdateProposal* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.title_, lhs_arena,
                                       &other->_impl_.title_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.description_, lhs_arena,
                                       &other->_impl_.description_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.market_id_, lhs_arena,
                                       &other->_impl_.market_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.maker_fee_rate_, lhs_arena,
                                       &other->_impl_.maker_fee_rate_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.taker_fee_rate_, lhs_arena,
                                       &other->_impl_.taker_fee_rate_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.relayer_fee_share_rate_, lhs_arena,
                                       &other->_impl_.relayer_fee_share_rate_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.min_price_tick_size_, lhs_arena,
                                       &other->_impl_.min_price_tick_size_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.min_quantity_tick_size_, lhs_arena,
                                       &other->_impl_.min_quantity_tick_size_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.settlement_price_, lhs_arena,
                                       &other->_impl_.settlement_price_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.admin_, lhs_arena,
                                       &other->_impl_.admin_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BinaryOptionsMarketParamUpdateProposal, _impl_.status_)
      + sizeof(BinaryOptionsMarketParamUpdateProposal::_impl_.status_)
      - PROTOBUF_FIELD_OFFSET(BinaryOptionsMarketParamUpdateProposal, _impl_.oracle_params_)>(
          reinterpret_cast<char*>(&_impl_.oracle_params_),
          reinterpret_cast<char*>(&other->_impl_.oracle_params_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BinaryOptionsMarketParamUpdateProposal::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2ftx_2eproto[67]);
}
// ===================================================================

class ProviderOracleParams::_Internal {
 public:
};

ProviderOracleParams::ProviderOracleParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.ProviderOracleParams)
}
ProviderOracleParams::ProviderOracleParams(const ProviderOracleParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ProviderOracleParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.symbol_) {}

    , decltype(_impl_.provider_) {}

    , decltype(_impl_.oracle_scale_factor_) {}

    , decltype(_impl_.oracle_type_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.symbol_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.symbol_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_symbol().empty()) {
    _this->_impl_.symbol_.Set(from._internal_symbol(), _this->GetArenaForAllocation());
  }
  _impl_.provider_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.provider_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_provider().empty()) {
    _this->_impl_.provider_.Set(from._internal_provider(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.oracle_scale_factor_, &from._impl_.oracle_scale_factor_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.oracle_type_) -
    reinterpret_cast<char*>(&_impl_.oracle_scale_factor_)) + sizeof(_impl_.oracle_type_));
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.ProviderOracleParams)
}

inline void ProviderOracleParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.symbol_) {}

    , decltype(_impl_.provider_) {}

    , decltype(_impl_.oracle_scale_factor_) { 0u }

    , decltype(_impl_.oracle_type_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.symbol_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.symbol_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.provider_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.provider_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ProviderOracleParams::~ProviderOracleParams() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.ProviderOracleParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProviderOracleParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.symbol_.Destroy();
  _impl_.provider_.Destroy();
}

void ProviderOracleParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProviderOracleParams::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.ProviderOracleParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.symbol_.ClearToEmpty();
  _impl_.provider_.ClearToEmpty();
  ::memset(&_impl_.oracle_scale_factor_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.oracle_type_) -
      reinterpret_cast<char*>(&_impl_.oracle_scale_factor_)) + sizeof(_impl_.oracle_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProviderOracleParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string symbol = 1 [json_name = "symbol"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_symbol();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.ProviderOracleParams.symbol"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string provider = 2 [json_name = "provider"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_provider();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.ProviderOracleParams.provider"));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 oracle_scale_factor = 3 [json_name = "oracleScaleFactor"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.oracle_scale_factor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .injective.oracle.v1beta1.OracleType oracle_type = 4 [json_name = "oracleType"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_oracle_type(static_cast<::injective::oracle::v1beta1::OracleType>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ProviderOracleParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.ProviderOracleParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string symbol = 1 [json_name = "symbol"];
  if (!this->_internal_symbol().empty()) {
    const std::string& _s = this->_internal_symbol();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.ProviderOracleParams.symbol");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string provider = 2 [json_name = "provider"];
  if (!this->_internal_provider().empty()) {
    const std::string& _s = this->_internal_provider();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.ProviderOracleParams.provider");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // uint32 oracle_scale_factor = 3 [json_name = "oracleScaleFactor"];
  if (this->_internal_oracle_scale_factor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_oracle_scale_factor(), target);
  }

  // .injective.oracle.v1beta1.OracleType oracle_type = 4 [json_name = "oracleType"];
  if (this->_internal_oracle_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        4, this->_internal_oracle_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.ProviderOracleParams)
  return target;
}

::size_t ProviderOracleParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.ProviderOracleParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string symbol = 1 [json_name = "symbol"];
  if (!this->_internal_symbol().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_symbol());
  }

  // string provider = 2 [json_name = "provider"];
  if (!this->_internal_provider().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_provider());
  }

  // uint32 oracle_scale_factor = 3 [json_name = "oracleScaleFactor"];
  if (this->_internal_oracle_scale_factor() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_oracle_scale_factor());
  }

  // .injective.oracle.v1beta1.OracleType oracle_type = 4 [json_name = "oracleType"];
  if (this->_internal_oracle_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_oracle_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProviderOracleParams::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ProviderOracleParams::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProviderOracleParams::GetClassData() const { return &_class_data_; }


void ProviderOracleParams::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ProviderOracleParams*>(&to_msg);
  auto& from = static_cast<const ProviderOracleParams&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.ProviderOracleParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_symbol().empty()) {
    _this->_internal_set_symbol(from._internal_symbol());
  }
  if (!from._internal_provider().empty()) {
    _this->_internal_set_provider(from._internal_provider());
  }
  if (from._internal_oracle_scale_factor() != 0) {
    _this->_internal_set_oracle_scale_factor(from._internal_oracle_scale_factor());
  }
  if (from._internal_oracle_type() != 0) {
    _this->_internal_set_oracle_type(from._internal_oracle_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProviderOracleParams::CopyFrom(const ProviderOracleParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.ProviderOracleParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProviderOracleParams::IsInitialized() const {
  return true;
}

void ProviderOracleParams::InternalSwap(ProviderOracleParams* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.symbol_, lhs_arena,
                                       &other->_impl_.symbol_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.provider_, lhs_arena,
                                       &other->_impl_.provider_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProviderOracleParams, _impl_.oracle_type_)
      + sizeof(ProviderOracleParams::_impl_.oracle_type_)
      - PROTOBUF_FIELD_OFFSET(ProviderOracleParams, _impl_.oracle_scale_factor_)>(
          reinterpret_cast<char*>(&_impl_.oracle_scale_factor_),
          reinterpret_cast<char*>(&other->_impl_.oracle_scale_factor_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProviderOracleParams::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2ftx_2eproto[68]);
}
// ===================================================================

class OracleParams::_Internal {
 public:
};

OracleParams::OracleParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.OracleParams)
}
OracleParams::OracleParams(const OracleParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OracleParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.oracle_base_) {}

    , decltype(_impl_.oracle_quote_) {}

    , decltype(_impl_.oracle_scale_factor_) {}

    , decltype(_impl_.oracle_type_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.oracle_base_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.oracle_base_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_oracle_base().empty()) {
    _this->_impl_.oracle_base_.Set(from._internal_oracle_base(), _this->GetArenaForAllocation());
  }
  _impl_.oracle_quote_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.oracle_quote_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_oracle_quote().empty()) {
    _this->_impl_.oracle_quote_.Set(from._internal_oracle_quote(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.oracle_scale_factor_, &from._impl_.oracle_scale_factor_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.oracle_type_) -
    reinterpret_cast<char*>(&_impl_.oracle_scale_factor_)) + sizeof(_impl_.oracle_type_));
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.OracleParams)
}

inline void OracleParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.oracle_base_) {}

    , decltype(_impl_.oracle_quote_) {}

    , decltype(_impl_.oracle_scale_factor_) { 0u }

    , decltype(_impl_.oracle_type_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.oracle_base_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.oracle_base_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.oracle_quote_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.oracle_quote_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

OracleParams::~OracleParams() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.OracleParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OracleParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.oracle_base_.Destroy();
  _impl_.oracle_quote_.Destroy();
}

void OracleParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OracleParams::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.OracleParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.oracle_base_.ClearToEmpty();
  _impl_.oracle_quote_.ClearToEmpty();
  ::memset(&_impl_.oracle_scale_factor_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.oracle_type_) -
      reinterpret_cast<char*>(&_impl_.oracle_scale_factor_)) + sizeof(_impl_.oracle_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OracleParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string oracle_base = 1 [json_name = "oracleBase"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_oracle_base();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.OracleParams.oracle_base"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string oracle_quote = 2 [json_name = "oracleQuote"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_oracle_quote();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.OracleParams.oracle_quote"));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 oracle_scale_factor = 3 [json_name = "oracleScaleFactor"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.oracle_scale_factor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .injective.oracle.v1beta1.OracleType oracle_type = 4 [json_name = "oracleType"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_oracle_type(static_cast<::injective::oracle::v1beta1::OracleType>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* OracleParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.OracleParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string oracle_base = 1 [json_name = "oracleBase"];
  if (!this->_internal_oracle_base().empty()) {
    const std::string& _s = this->_internal_oracle_base();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.OracleParams.oracle_base");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string oracle_quote = 2 [json_name = "oracleQuote"];
  if (!this->_internal_oracle_quote().empty()) {
    const std::string& _s = this->_internal_oracle_quote();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.OracleParams.oracle_quote");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // uint32 oracle_scale_factor = 3 [json_name = "oracleScaleFactor"];
  if (this->_internal_oracle_scale_factor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_oracle_scale_factor(), target);
  }

  // .injective.oracle.v1beta1.OracleType oracle_type = 4 [json_name = "oracleType"];
  if (this->_internal_oracle_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        4, this->_internal_oracle_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.OracleParams)
  return target;
}

::size_t OracleParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.OracleParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string oracle_base = 1 [json_name = "oracleBase"];
  if (!this->_internal_oracle_base().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_oracle_base());
  }

  // string oracle_quote = 2 [json_name = "oracleQuote"];
  if (!this->_internal_oracle_quote().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_oracle_quote());
  }

  // uint32 oracle_scale_factor = 3 [json_name = "oracleScaleFactor"];
  if (this->_internal_oracle_scale_factor() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_oracle_scale_factor());
  }

  // .injective.oracle.v1beta1.OracleType oracle_type = 4 [json_name = "oracleType"];
  if (this->_internal_oracle_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_oracle_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OracleParams::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OracleParams::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OracleParams::GetClassData() const { return &_class_data_; }


void OracleParams::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OracleParams*>(&to_msg);
  auto& from = static_cast<const OracleParams&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.OracleParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_oracle_base().empty()) {
    _this->_internal_set_oracle_base(from._internal_oracle_base());
  }
  if (!from._internal_oracle_quote().empty()) {
    _this->_internal_set_oracle_quote(from._internal_oracle_quote());
  }
  if (from._internal_oracle_scale_factor() != 0) {
    _this->_internal_set_oracle_scale_factor(from._internal_oracle_scale_factor());
  }
  if (from._internal_oracle_type() != 0) {
    _this->_internal_set_oracle_type(from._internal_oracle_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OracleParams::CopyFrom(const OracleParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.OracleParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OracleParams::IsInitialized() const {
  return true;
}

void OracleParams::InternalSwap(OracleParams* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.oracle_base_, lhs_arena,
                                       &other->_impl_.oracle_base_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.oracle_quote_, lhs_arena,
                                       &other->_impl_.oracle_quote_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OracleParams, _impl_.oracle_type_)
      + sizeof(OracleParams::_impl_.oracle_type_)
      - PROTOBUF_FIELD_OFFSET(OracleParams, _impl_.oracle_scale_factor_)>(
          reinterpret_cast<char*>(&_impl_.oracle_scale_factor_),
          reinterpret_cast<char*>(&other->_impl_.oracle_scale_factor_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OracleParams::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2ftx_2eproto[69]);
}
// ===================================================================

class TradingRewardCampaignLaunchProposal::_Internal {
 public:
  using HasBits = decltype(std::declval<TradingRewardCampaignLaunchProposal>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TradingRewardCampaignLaunchProposal, _impl_._has_bits_);
  static const ::injective::exchange::v1beta1::TradingRewardCampaignInfo& campaign_info(const TradingRewardCampaignLaunchProposal* msg);
  static void set_has_campaign_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::injective::exchange::v1beta1::TradingRewardCampaignInfo&
TradingRewardCampaignLaunchProposal::_Internal::campaign_info(const TradingRewardCampaignLaunchProposal* msg) {
  return *msg->_impl_.campaign_info_;
}
void TradingRewardCampaignLaunchProposal::clear_campaign_info() {
  if (_impl_.campaign_info_ != nullptr) _impl_.campaign_info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void TradingRewardCampaignLaunchProposal::clear_campaign_reward_pools() {
  _internal_mutable_campaign_reward_pools()->Clear();
}
TradingRewardCampaignLaunchProposal::TradingRewardCampaignLaunchProposal(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.TradingRewardCampaignLaunchProposal)
}
TradingRewardCampaignLaunchProposal::TradingRewardCampaignLaunchProposal(const TradingRewardCampaignLaunchProposal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TradingRewardCampaignLaunchProposal* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.campaign_reward_pools_){from._impl_.campaign_reward_pools_}
    , decltype(_impl_.title_) {}

    , decltype(_impl_.description_) {}

    , decltype(_impl_.campaign_info_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.title_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_title().empty()) {
    _this->_impl_.title_.Set(from._internal_title(), _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.description_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.campaign_info_ = new ::injective::exchange::v1beta1::TradingRewardCampaignInfo(*from._impl_.campaign_info_);
  }
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.TradingRewardCampaignLaunchProposal)
}

inline void TradingRewardCampaignLaunchProposal::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.campaign_reward_pools_){arena}
    , decltype(_impl_.title_) {}

    , decltype(_impl_.description_) {}

    , decltype(_impl_.campaign_info_){nullptr}
  };
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.title_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.description_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TradingRewardCampaignLaunchProposal::~TradingRewardCampaignLaunchProposal() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.TradingRewardCampaignLaunchProposal)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TradingRewardCampaignLaunchProposal::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_campaign_reward_pools()->~RepeatedPtrField();
  _impl_.title_.Destroy();
  _impl_.description_.Destroy();
  if (this != internal_default_instance()) delete _impl_.campaign_info_;
}

void TradingRewardCampaignLaunchProposal::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TradingRewardCampaignLaunchProposal::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.TradingRewardCampaignLaunchProposal)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_campaign_reward_pools()->Clear();
  _impl_.title_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.campaign_info_ != nullptr);
    _impl_.campaign_info_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TradingRewardCampaignLaunchProposal::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string title = 1 [json_name = "title"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.TradingRewardCampaignLaunchProposal.title"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string description = 2 [json_name = "description"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.TradingRewardCampaignLaunchProposal.description"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .injective.exchange.v1beta1.TradingRewardCampaignInfo campaign_info = 3 [json_name = "campaignInfo"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_campaign_info(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .injective.exchange.v1beta1.CampaignRewardPool campaign_reward_pools = 4 [json_name = "campaignRewardPools"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_campaign_reward_pools(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* TradingRewardCampaignLaunchProposal::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.TradingRewardCampaignLaunchProposal)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string title = 1 [json_name = "title"];
  if (!this->_internal_title().empty()) {
    const std::string& _s = this->_internal_title();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.TradingRewardCampaignLaunchProposal.title");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string description = 2 [json_name = "description"];
  if (!this->_internal_description().empty()) {
    const std::string& _s = this->_internal_description();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.TradingRewardCampaignLaunchProposal.description");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .injective.exchange.v1beta1.TradingRewardCampaignInfo campaign_info = 3 [json_name = "campaignInfo"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::campaign_info(this),
        _Internal::campaign_info(this).GetCachedSize(), target, stream);
  }

  // repeated .injective.exchange.v1beta1.CampaignRewardPool campaign_reward_pools = 4 [json_name = "campaignRewardPools"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_campaign_reward_pools_size()); i < n; i++) {
    const auto& repfield = this->_internal_campaign_reward_pools(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.TradingRewardCampaignLaunchProposal)
  return target;
}

::size_t TradingRewardCampaignLaunchProposal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.TradingRewardCampaignLaunchProposal)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .injective.exchange.v1beta1.CampaignRewardPool campaign_reward_pools = 4 [json_name = "campaignRewardPools"];
  total_size += 1UL * this->_internal_campaign_reward_pools_size();
  for (const auto& msg : this->_internal_campaign_reward_pools()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string title = 1 [json_name = "title"];
  if (!this->_internal_title().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_title());
  }

  // string description = 2 [json_name = "description"];
  if (!this->_internal_description().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_description());
  }

  // .injective.exchange.v1beta1.TradingRewardCampaignInfo campaign_info = 3 [json_name = "campaignInfo"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.campaign_info_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TradingRewardCampaignLaunchProposal::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TradingRewardCampaignLaunchProposal::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TradingRewardCampaignLaunchProposal::GetClassData() const { return &_class_data_; }


void TradingRewardCampaignLaunchProposal::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TradingRewardCampaignLaunchProposal*>(&to_msg);
  auto& from = static_cast<const TradingRewardCampaignLaunchProposal&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.TradingRewardCampaignLaunchProposal)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_campaign_reward_pools()->MergeFrom(from._internal_campaign_reward_pools());
  if (!from._internal_title().empty()) {
    _this->_internal_set_title(from._internal_title());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_campaign_info()->::injective::exchange::v1beta1::TradingRewardCampaignInfo::MergeFrom(
        from._internal_campaign_info());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TradingRewardCampaignLaunchProposal::CopyFrom(const TradingRewardCampaignLaunchProposal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.TradingRewardCampaignLaunchProposal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TradingRewardCampaignLaunchProposal::IsInitialized() const {
  return true;
}

void TradingRewardCampaignLaunchProposal::InternalSwap(TradingRewardCampaignLaunchProposal* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_campaign_reward_pools()->InternalSwap(other->_internal_mutable_campaign_reward_pools());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.title_, lhs_arena,
                                       &other->_impl_.title_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.description_, lhs_arena,
                                       &other->_impl_.description_, rhs_arena);
  swap(_impl_.campaign_info_, other->_impl_.campaign_info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TradingRewardCampaignLaunchProposal::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2ftx_2eproto[70]);
}
// ===================================================================

class TradingRewardCampaignUpdateProposal::_Internal {
 public:
  using HasBits = decltype(std::declval<TradingRewardCampaignUpdateProposal>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TradingRewardCampaignUpdateProposal, _impl_._has_bits_);
  static const ::injective::exchange::v1beta1::TradingRewardCampaignInfo& campaign_info(const TradingRewardCampaignUpdateProposal* msg);
  static void set_has_campaign_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::injective::exchange::v1beta1::TradingRewardCampaignInfo&
TradingRewardCampaignUpdateProposal::_Internal::campaign_info(const TradingRewardCampaignUpdateProposal* msg) {
  return *msg->_impl_.campaign_info_;
}
void TradingRewardCampaignUpdateProposal::clear_campaign_info() {
  if (_impl_.campaign_info_ != nullptr) _impl_.campaign_info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void TradingRewardCampaignUpdateProposal::clear_campaign_reward_pools_additions() {
  _internal_mutable_campaign_reward_pools_additions()->Clear();
}
void TradingRewardCampaignUpdateProposal::clear_campaign_reward_pools_updates() {
  _internal_mutable_campaign_reward_pools_updates()->Clear();
}
TradingRewardCampaignUpdateProposal::TradingRewardCampaignUpdateProposal(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.TradingRewardCampaignUpdateProposal)
}
TradingRewardCampaignUpdateProposal::TradingRewardCampaignUpdateProposal(const TradingRewardCampaignUpdateProposal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TradingRewardCampaignUpdateProposal* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.campaign_reward_pools_additions_){from._impl_.campaign_reward_pools_additions_}
    , decltype(_impl_.campaign_reward_pools_updates_){from._impl_.campaign_reward_pools_updates_}
    , decltype(_impl_.title_) {}

    , decltype(_impl_.description_) {}

    , decltype(_impl_.campaign_info_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.title_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_title().empty()) {
    _this->_impl_.title_.Set(from._internal_title(), _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.description_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.campaign_info_ = new ::injective::exchange::v1beta1::TradingRewardCampaignInfo(*from._impl_.campaign_info_);
  }
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.TradingRewardCampaignUpdateProposal)
}

inline void TradingRewardCampaignUpdateProposal::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.campaign_reward_pools_additions_){arena}
    , decltype(_impl_.campaign_reward_pools_updates_){arena}
    , decltype(_impl_.title_) {}

    , decltype(_impl_.description_) {}

    , decltype(_impl_.campaign_info_){nullptr}
  };
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.title_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.description_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TradingRewardCampaignUpdateProposal::~TradingRewardCampaignUpdateProposal() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.TradingRewardCampaignUpdateProposal)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TradingRewardCampaignUpdateProposal::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_campaign_reward_pools_additions()->~RepeatedPtrField();
  _internal_mutable_campaign_reward_pools_updates()->~RepeatedPtrField();
  _impl_.title_.Destroy();
  _impl_.description_.Destroy();
  if (this != internal_default_instance()) delete _impl_.campaign_info_;
}

void TradingRewardCampaignUpdateProposal::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TradingRewardCampaignUpdateProposal::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.TradingRewardCampaignUpdateProposal)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_campaign_reward_pools_additions()->Clear();
  _internal_mutable_campaign_reward_pools_updates()->Clear();
  _impl_.title_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.campaign_info_ != nullptr);
    _impl_.campaign_info_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TradingRewardCampaignUpdateProposal::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string title = 1 [json_name = "title"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.TradingRewardCampaignUpdateProposal.title"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string description = 2 [json_name = "description"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.TradingRewardCampaignUpdateProposal.description"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .injective.exchange.v1beta1.TradingRewardCampaignInfo campaign_info = 3 [json_name = "campaignInfo"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_campaign_info(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .injective.exchange.v1beta1.CampaignRewardPool campaign_reward_pools_additions = 4 [json_name = "campaignRewardPoolsAdditions"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_campaign_reward_pools_additions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .injective.exchange.v1beta1.CampaignRewardPool campaign_reward_pools_updates = 5 [json_name = "campaignRewardPoolsUpdates"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_campaign_reward_pools_updates(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* TradingRewardCampaignUpdateProposal::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.TradingRewardCampaignUpdateProposal)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string title = 1 [json_name = "title"];
  if (!this->_internal_title().empty()) {
    const std::string& _s = this->_internal_title();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.TradingRewardCampaignUpdateProposal.title");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string description = 2 [json_name = "description"];
  if (!this->_internal_description().empty()) {
    const std::string& _s = this->_internal_description();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.TradingRewardCampaignUpdateProposal.description");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .injective.exchange.v1beta1.TradingRewardCampaignInfo campaign_info = 3 [json_name = "campaignInfo"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::campaign_info(this),
        _Internal::campaign_info(this).GetCachedSize(), target, stream);
  }

  // repeated .injective.exchange.v1beta1.CampaignRewardPool campaign_reward_pools_additions = 4 [json_name = "campaignRewardPoolsAdditions"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_campaign_reward_pools_additions_size()); i < n; i++) {
    const auto& repfield = this->_internal_campaign_reward_pools_additions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .injective.exchange.v1beta1.CampaignRewardPool campaign_reward_pools_updates = 5 [json_name = "campaignRewardPoolsUpdates"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_campaign_reward_pools_updates_size()); i < n; i++) {
    const auto& repfield = this->_internal_campaign_reward_pools_updates(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.TradingRewardCampaignUpdateProposal)
  return target;
}

::size_t TradingRewardCampaignUpdateProposal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.TradingRewardCampaignUpdateProposal)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .injective.exchange.v1beta1.CampaignRewardPool campaign_reward_pools_additions = 4 [json_name = "campaignRewardPoolsAdditions"];
  total_size += 1UL * this->_internal_campaign_reward_pools_additions_size();
  for (const auto& msg : this->_internal_campaign_reward_pools_additions()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .injective.exchange.v1beta1.CampaignRewardPool campaign_reward_pools_updates = 5 [json_name = "campaignRewardPoolsUpdates"];
  total_size += 1UL * this->_internal_campaign_reward_pools_updates_size();
  for (const auto& msg : this->_internal_campaign_reward_pools_updates()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string title = 1 [json_name = "title"];
  if (!this->_internal_title().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_title());
  }

  // string description = 2 [json_name = "description"];
  if (!this->_internal_description().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_description());
  }

  // .injective.exchange.v1beta1.TradingRewardCampaignInfo campaign_info = 3 [json_name = "campaignInfo"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.campaign_info_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TradingRewardCampaignUpdateProposal::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TradingRewardCampaignUpdateProposal::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TradingRewardCampaignUpdateProposal::GetClassData() const { return &_class_data_; }


void TradingRewardCampaignUpdateProposal::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TradingRewardCampaignUpdateProposal*>(&to_msg);
  auto& from = static_cast<const TradingRewardCampaignUpdateProposal&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.TradingRewardCampaignUpdateProposal)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_campaign_reward_pools_additions()->MergeFrom(from._internal_campaign_reward_pools_additions());
  _this->_internal_mutable_campaign_reward_pools_updates()->MergeFrom(from._internal_campaign_reward_pools_updates());
  if (!from._internal_title().empty()) {
    _this->_internal_set_title(from._internal_title());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_campaign_info()->::injective::exchange::v1beta1::TradingRewardCampaignInfo::MergeFrom(
        from._internal_campaign_info());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TradingRewardCampaignUpdateProposal::CopyFrom(const TradingRewardCampaignUpdateProposal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.TradingRewardCampaignUpdateProposal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TradingRewardCampaignUpdateProposal::IsInitialized() const {
  return true;
}

void TradingRewardCampaignUpdateProposal::InternalSwap(TradingRewardCampaignUpdateProposal* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_campaign_reward_pools_additions()->InternalSwap(other->_internal_mutable_campaign_reward_pools_additions());
  _internal_mutable_campaign_reward_pools_updates()->InternalSwap(other->_internal_mutable_campaign_reward_pools_updates());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.title_, lhs_arena,
                                       &other->_impl_.title_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.description_, lhs_arena,
                                       &other->_impl_.description_, rhs_arena);
  swap(_impl_.campaign_info_, other->_impl_.campaign_info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TradingRewardCampaignUpdateProposal::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2ftx_2eproto[71]);
}
// ===================================================================

class RewardPointUpdate::_Internal {
 public:
};

RewardPointUpdate::RewardPointUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.RewardPointUpdate)
}
RewardPointUpdate::RewardPointUpdate(const RewardPointUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RewardPointUpdate* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.account_address_) {}

    , decltype(_impl_.new_points_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.account_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.account_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_account_address().empty()) {
    _this->_impl_.account_address_.Set(from._internal_account_address(), _this->GetArenaForAllocation());
  }
  _impl_.new_points_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.new_points_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_new_points().empty()) {
    _this->_impl_.new_points_.Set(from._internal_new_points(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.RewardPointUpdate)
}

inline void RewardPointUpdate::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.account_address_) {}

    , decltype(_impl_.new_points_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.account_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.account_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.new_points_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.new_points_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RewardPointUpdate::~RewardPointUpdate() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.RewardPointUpdate)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RewardPointUpdate::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.account_address_.Destroy();
  _impl_.new_points_.Destroy();
}

void RewardPointUpdate::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RewardPointUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.RewardPointUpdate)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.account_address_.ClearToEmpty();
  _impl_.new_points_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RewardPointUpdate::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string account_address = 1 [json_name = "accountAddress"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_account_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.RewardPointUpdate.account_address"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string new_points = 12 [json_name = "newPoints", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_new_points();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.RewardPointUpdate.new_points"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* RewardPointUpdate::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.RewardPointUpdate)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string account_address = 1 [json_name = "accountAddress"];
  if (!this->_internal_account_address().empty()) {
    const std::string& _s = this->_internal_account_address();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.RewardPointUpdate.account_address");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string new_points = 12 [json_name = "newPoints", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_new_points().empty()) {
    const std::string& _s = this->_internal_new_points();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.RewardPointUpdate.new_points");
    target = stream->WriteStringMaybeAliased(12, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.RewardPointUpdate)
  return target;
}

::size_t RewardPointUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.RewardPointUpdate)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string account_address = 1 [json_name = "accountAddress"];
  if (!this->_internal_account_address().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_account_address());
  }

  // string new_points = 12 [json_name = "newPoints", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_new_points().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_new_points());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RewardPointUpdate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RewardPointUpdate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RewardPointUpdate::GetClassData() const { return &_class_data_; }


void RewardPointUpdate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RewardPointUpdate*>(&to_msg);
  auto& from = static_cast<const RewardPointUpdate&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.RewardPointUpdate)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_account_address().empty()) {
    _this->_internal_set_account_address(from._internal_account_address());
  }
  if (!from._internal_new_points().empty()) {
    _this->_internal_set_new_points(from._internal_new_points());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RewardPointUpdate::CopyFrom(const RewardPointUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.RewardPointUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RewardPointUpdate::IsInitialized() const {
  return true;
}

void RewardPointUpdate::InternalSwap(RewardPointUpdate* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.account_address_, lhs_arena,
                                       &other->_impl_.account_address_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.new_points_, lhs_arena,
                                       &other->_impl_.new_points_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata RewardPointUpdate::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2ftx_2eproto[72]);
}
// ===================================================================

class TradingRewardPendingPointsUpdateProposal::_Internal {
 public:
};

TradingRewardPendingPointsUpdateProposal::TradingRewardPendingPointsUpdateProposal(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.TradingRewardPendingPointsUpdateProposal)
}
TradingRewardPendingPointsUpdateProposal::TradingRewardPendingPointsUpdateProposal(const TradingRewardPendingPointsUpdateProposal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TradingRewardPendingPointsUpdateProposal* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.reward_point_updates_){from._impl_.reward_point_updates_}
    , decltype(_impl_.title_) {}

    , decltype(_impl_.description_) {}

    , decltype(_impl_.pending_pool_timestamp_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.title_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_title().empty()) {
    _this->_impl_.title_.Set(from._internal_title(), _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.description_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), _this->GetArenaForAllocation());
  }
  _this->_impl_.pending_pool_timestamp_ = from._impl_.pending_pool_timestamp_;
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.TradingRewardPendingPointsUpdateProposal)
}

inline void TradingRewardPendingPointsUpdateProposal::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.reward_point_updates_){arena}
    , decltype(_impl_.title_) {}

    , decltype(_impl_.description_) {}

    , decltype(_impl_.pending_pool_timestamp_) { ::int64_t{0} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.title_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.description_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TradingRewardPendingPointsUpdateProposal::~TradingRewardPendingPointsUpdateProposal() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.TradingRewardPendingPointsUpdateProposal)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TradingRewardPendingPointsUpdateProposal::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_reward_point_updates()->~RepeatedPtrField();
  _impl_.title_.Destroy();
  _impl_.description_.Destroy();
}

void TradingRewardPendingPointsUpdateProposal::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TradingRewardPendingPointsUpdateProposal::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.TradingRewardPendingPointsUpdateProposal)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_reward_point_updates()->Clear();
  _impl_.title_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  _impl_.pending_pool_timestamp_ = ::int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TradingRewardPendingPointsUpdateProposal::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string title = 1 [json_name = "title"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.TradingRewardPendingPointsUpdateProposal.title"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string description = 2 [json_name = "description"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.TradingRewardPendingPointsUpdateProposal.description"));
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 pending_pool_timestamp = 3 [json_name = "pendingPoolTimestamp"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.pending_pool_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .injective.exchange.v1beta1.RewardPointUpdate reward_point_updates = 4 [json_name = "rewardPointUpdates"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_reward_point_updates(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* TradingRewardPendingPointsUpdateProposal::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.TradingRewardPendingPointsUpdateProposal)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string title = 1 [json_name = "title"];
  if (!this->_internal_title().empty()) {
    const std::string& _s = this->_internal_title();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.TradingRewardPendingPointsUpdateProposal.title");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string description = 2 [json_name = "description"];
  if (!this->_internal_description().empty()) {
    const std::string& _s = this->_internal_description();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.TradingRewardPendingPointsUpdateProposal.description");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // int64 pending_pool_timestamp = 3 [json_name = "pendingPoolTimestamp"];
  if (this->_internal_pending_pool_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        3, this->_internal_pending_pool_timestamp(), target);
  }

  // repeated .injective.exchange.v1beta1.RewardPointUpdate reward_point_updates = 4 [json_name = "rewardPointUpdates"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_reward_point_updates_size()); i < n; i++) {
    const auto& repfield = this->_internal_reward_point_updates(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.TradingRewardPendingPointsUpdateProposal)
  return target;
}

::size_t TradingRewardPendingPointsUpdateProposal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.TradingRewardPendingPointsUpdateProposal)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .injective.exchange.v1beta1.RewardPointUpdate reward_point_updates = 4 [json_name = "rewardPointUpdates"];
  total_size += 1UL * this->_internal_reward_point_updates_size();
  for (const auto& msg : this->_internal_reward_point_updates()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string title = 1 [json_name = "title"];
  if (!this->_internal_title().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_title());
  }

  // string description = 2 [json_name = "description"];
  if (!this->_internal_description().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_description());
  }

  // int64 pending_pool_timestamp = 3 [json_name = "pendingPoolTimestamp"];
  if (this->_internal_pending_pool_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_pending_pool_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TradingRewardPendingPointsUpdateProposal::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TradingRewardPendingPointsUpdateProposal::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TradingRewardPendingPointsUpdateProposal::GetClassData() const { return &_class_data_; }


void TradingRewardPendingPointsUpdateProposal::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TradingRewardPendingPointsUpdateProposal*>(&to_msg);
  auto& from = static_cast<const TradingRewardPendingPointsUpdateProposal&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.TradingRewardPendingPointsUpdateProposal)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_reward_point_updates()->MergeFrom(from._internal_reward_point_updates());
  if (!from._internal_title().empty()) {
    _this->_internal_set_title(from._internal_title());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  if (from._internal_pending_pool_timestamp() != 0) {
    _this->_internal_set_pending_pool_timestamp(from._internal_pending_pool_timestamp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TradingRewardPendingPointsUpdateProposal::CopyFrom(const TradingRewardPendingPointsUpdateProposal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.TradingRewardPendingPointsUpdateProposal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TradingRewardPendingPointsUpdateProposal::IsInitialized() const {
  return true;
}

void TradingRewardPendingPointsUpdateProposal::InternalSwap(TradingRewardPendingPointsUpdateProposal* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_reward_point_updates()->InternalSwap(other->_internal_mutable_reward_point_updates());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.title_, lhs_arena,
                                       &other->_impl_.title_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.description_, lhs_arena,
                                       &other->_impl_.description_, rhs_arena);

  swap(_impl_.pending_pool_timestamp_, other->_impl_.pending_pool_timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TradingRewardPendingPointsUpdateProposal::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2ftx_2eproto[73]);
}
// ===================================================================

class FeeDiscountProposal::_Internal {
 public:
  using HasBits = decltype(std::declval<FeeDiscountProposal>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(FeeDiscountProposal, _impl_._has_bits_);
  static const ::injective::exchange::v1beta1::FeeDiscountSchedule& schedule(const FeeDiscountProposal* msg);
  static void set_has_schedule(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::injective::exchange::v1beta1::FeeDiscountSchedule&
FeeDiscountProposal::_Internal::schedule(const FeeDiscountProposal* msg) {
  return *msg->_impl_.schedule_;
}
void FeeDiscountProposal::clear_schedule() {
  if (_impl_.schedule_ != nullptr) _impl_.schedule_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
FeeDiscountProposal::FeeDiscountProposal(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.FeeDiscountProposal)
}
FeeDiscountProposal::FeeDiscountProposal(const FeeDiscountProposal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FeeDiscountProposal* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.title_) {}

    , decltype(_impl_.description_) {}

    , decltype(_impl_.schedule_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.title_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_title().empty()) {
    _this->_impl_.title_.Set(from._internal_title(), _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.description_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.schedule_ = new ::injective::exchange::v1beta1::FeeDiscountSchedule(*from._impl_.schedule_);
  }
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.FeeDiscountProposal)
}

inline void FeeDiscountProposal::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.title_) {}

    , decltype(_impl_.description_) {}

    , decltype(_impl_.schedule_){nullptr}
  };
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.title_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.description_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FeeDiscountProposal::~FeeDiscountProposal() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.FeeDiscountProposal)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FeeDiscountProposal::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.title_.Destroy();
  _impl_.description_.Destroy();
  if (this != internal_default_instance()) delete _impl_.schedule_;
}

void FeeDiscountProposal::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FeeDiscountProposal::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.FeeDiscountProposal)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.title_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.schedule_ != nullptr);
    _impl_.schedule_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FeeDiscountProposal::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string title = 1 [json_name = "title"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.FeeDiscountProposal.title"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string description = 2 [json_name = "description"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.FeeDiscountProposal.description"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .injective.exchange.v1beta1.FeeDiscountSchedule schedule = 3 [json_name = "schedule"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_schedule(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* FeeDiscountProposal::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.FeeDiscountProposal)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string title = 1 [json_name = "title"];
  if (!this->_internal_title().empty()) {
    const std::string& _s = this->_internal_title();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.FeeDiscountProposal.title");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string description = 2 [json_name = "description"];
  if (!this->_internal_description().empty()) {
    const std::string& _s = this->_internal_description();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.FeeDiscountProposal.description");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .injective.exchange.v1beta1.FeeDiscountSchedule schedule = 3 [json_name = "schedule"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::schedule(this),
        _Internal::schedule(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.FeeDiscountProposal)
  return target;
}

::size_t FeeDiscountProposal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.FeeDiscountProposal)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string title = 1 [json_name = "title"];
  if (!this->_internal_title().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_title());
  }

  // string description = 2 [json_name = "description"];
  if (!this->_internal_description().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_description());
  }

  // .injective.exchange.v1beta1.FeeDiscountSchedule schedule = 3 [json_name = "schedule"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.schedule_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FeeDiscountProposal::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FeeDiscountProposal::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FeeDiscountProposal::GetClassData() const { return &_class_data_; }


void FeeDiscountProposal::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FeeDiscountProposal*>(&to_msg);
  auto& from = static_cast<const FeeDiscountProposal&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.FeeDiscountProposal)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_title().empty()) {
    _this->_internal_set_title(from._internal_title());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_schedule()->::injective::exchange::v1beta1::FeeDiscountSchedule::MergeFrom(
        from._internal_schedule());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FeeDiscountProposal::CopyFrom(const FeeDiscountProposal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.FeeDiscountProposal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeeDiscountProposal::IsInitialized() const {
  return true;
}

void FeeDiscountProposal::InternalSwap(FeeDiscountProposal* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.title_, lhs_arena,
                                       &other->_impl_.title_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.description_, lhs_arena,
                                       &other->_impl_.description_, rhs_arena);
  swap(_impl_.schedule_, other->_impl_.schedule_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FeeDiscountProposal::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2ftx_2eproto[74]);
}
// ===================================================================

class BatchCommunityPoolSpendProposal::_Internal {
 public:
};

void BatchCommunityPoolSpendProposal::clear_proposals() {
  _internal_mutable_proposals()->Clear();
}
BatchCommunityPoolSpendProposal::BatchCommunityPoolSpendProposal(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.BatchCommunityPoolSpendProposal)
}
BatchCommunityPoolSpendProposal::BatchCommunityPoolSpendProposal(const BatchCommunityPoolSpendProposal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BatchCommunityPoolSpendProposal* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.proposals_){from._impl_.proposals_}
    , decltype(_impl_.title_) {}

    , decltype(_impl_.description_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.title_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_title().empty()) {
    _this->_impl_.title_.Set(from._internal_title(), _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.description_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.BatchCommunityPoolSpendProposal)
}

inline void BatchCommunityPoolSpendProposal::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.proposals_){arena}
    , decltype(_impl_.title_) {}

    , decltype(_impl_.description_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.title_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.description_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BatchCommunityPoolSpendProposal::~BatchCommunityPoolSpendProposal() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.BatchCommunityPoolSpendProposal)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BatchCommunityPoolSpendProposal::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_proposals()->~RepeatedPtrField();
  _impl_.title_.Destroy();
  _impl_.description_.Destroy();
}

void BatchCommunityPoolSpendProposal::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BatchCommunityPoolSpendProposal::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.BatchCommunityPoolSpendProposal)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_proposals()->Clear();
  _impl_.title_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BatchCommunityPoolSpendProposal::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string title = 1 [json_name = "title"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.BatchCommunityPoolSpendProposal.title"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string description = 2 [json_name = "description"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.BatchCommunityPoolSpendProposal.description"));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .cosmos.distribution.v1beta1.CommunityPoolSpendProposal proposals = 3 [json_name = "proposals"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_proposals(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* BatchCommunityPoolSpendProposal::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.BatchCommunityPoolSpendProposal)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string title = 1 [json_name = "title"];
  if (!this->_internal_title().empty()) {
    const std::string& _s = this->_internal_title();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.BatchCommunityPoolSpendProposal.title");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string description = 2 [json_name = "description"];
  if (!this->_internal_description().empty()) {
    const std::string& _s = this->_internal_description();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.BatchCommunityPoolSpendProposal.description");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // repeated .cosmos.distribution.v1beta1.CommunityPoolSpendProposal proposals = 3 [json_name = "proposals"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_proposals_size()); i < n; i++) {
    const auto& repfield = this->_internal_proposals(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.BatchCommunityPoolSpendProposal)
  return target;
}

::size_t BatchCommunityPoolSpendProposal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.BatchCommunityPoolSpendProposal)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cosmos.distribution.v1beta1.CommunityPoolSpendProposal proposals = 3 [json_name = "proposals"];
  total_size += 1UL * this->_internal_proposals_size();
  for (const auto& msg : this->_internal_proposals()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string title = 1 [json_name = "title"];
  if (!this->_internal_title().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_title());
  }

  // string description = 2 [json_name = "description"];
  if (!this->_internal_description().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_description());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BatchCommunityPoolSpendProposal::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BatchCommunityPoolSpendProposal::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BatchCommunityPoolSpendProposal::GetClassData() const { return &_class_data_; }


void BatchCommunityPoolSpendProposal::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BatchCommunityPoolSpendProposal*>(&to_msg);
  auto& from = static_cast<const BatchCommunityPoolSpendProposal&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.BatchCommunityPoolSpendProposal)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_proposals()->MergeFrom(from._internal_proposals());
  if (!from._internal_title().empty()) {
    _this->_internal_set_title(from._internal_title());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BatchCommunityPoolSpendProposal::CopyFrom(const BatchCommunityPoolSpendProposal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.BatchCommunityPoolSpendProposal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchCommunityPoolSpendProposal::IsInitialized() const {
  return true;
}

void BatchCommunityPoolSpendProposal::InternalSwap(BatchCommunityPoolSpendProposal* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_proposals()->InternalSwap(other->_internal_mutable_proposals());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.title_, lhs_arena,
                                       &other->_impl_.title_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.description_, lhs_arena,
                                       &other->_impl_.description_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata BatchCommunityPoolSpendProposal::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2ftx_2eproto[75]);
}
// ===================================================================

class MsgRewardsOptOut::_Internal {
 public:
};

MsgRewardsOptOut::MsgRewardsOptOut(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.MsgRewardsOptOut)
}
MsgRewardsOptOut::MsgRewardsOptOut(const MsgRewardsOptOut& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MsgRewardsOptOut* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.sender_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.sender_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.sender_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sender().empty()) {
    _this->_impl_.sender_.Set(from._internal_sender(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.MsgRewardsOptOut)
}

inline void MsgRewardsOptOut::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.sender_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.sender_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.sender_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MsgRewardsOptOut::~MsgRewardsOptOut() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.MsgRewardsOptOut)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MsgRewardsOptOut::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sender_.Destroy();
}

void MsgRewardsOptOut::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MsgRewardsOptOut::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.MsgRewardsOptOut)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sender_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgRewardsOptOut::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string sender = 1 [json_name = "sender"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sender();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.MsgRewardsOptOut.sender"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MsgRewardsOptOut::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.MsgRewardsOptOut)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string sender = 1 [json_name = "sender"];
  if (!this->_internal_sender().empty()) {
    const std::string& _s = this->_internal_sender();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.MsgRewardsOptOut.sender");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.MsgRewardsOptOut)
  return target;
}

::size_t MsgRewardsOptOut::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.MsgRewardsOptOut)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sender = 1 [json_name = "sender"];
  if (!this->_internal_sender().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_sender());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgRewardsOptOut::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MsgRewardsOptOut::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgRewardsOptOut::GetClassData() const { return &_class_data_; }


void MsgRewardsOptOut::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MsgRewardsOptOut*>(&to_msg);
  auto& from = static_cast<const MsgRewardsOptOut&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.MsgRewardsOptOut)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_sender().empty()) {
    _this->_internal_set_sender(from._internal_sender());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MsgRewardsOptOut::CopyFrom(const MsgRewardsOptOut& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.MsgRewardsOptOut)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgRewardsOptOut::IsInitialized() const {
  return true;
}

void MsgRewardsOptOut::InternalSwap(MsgRewardsOptOut* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.sender_, lhs_arena,
                                       &other->_impl_.sender_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgRewardsOptOut::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2ftx_2eproto[76]);
}
// ===================================================================

class MsgRewardsOptOutResponse::_Internal {
 public:
};

MsgRewardsOptOutResponse::MsgRewardsOptOutResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.MsgRewardsOptOutResponse)
}
MsgRewardsOptOutResponse::MsgRewardsOptOutResponse(const MsgRewardsOptOutResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  MsgRewardsOptOutResponse* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.MsgRewardsOptOutResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgRewardsOptOutResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgRewardsOptOutResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata MsgRewardsOptOutResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2ftx_2eproto[77]);
}
// ===================================================================

class MsgReclaimLockedFunds::_Internal {
 public:
};

MsgReclaimLockedFunds::MsgReclaimLockedFunds(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.MsgReclaimLockedFunds)
}
MsgReclaimLockedFunds::MsgReclaimLockedFunds(const MsgReclaimLockedFunds& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MsgReclaimLockedFunds* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.sender_) {}

    , decltype(_impl_.lockedaccountpubkey_) {}

    , decltype(_impl_.signature_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.sender_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.sender_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sender().empty()) {
    _this->_impl_.sender_.Set(from._internal_sender(), _this->GetArenaForAllocation());
  }
  _impl_.lockedaccountpubkey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.lockedaccountpubkey_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_lockedaccountpubkey().empty()) {
    _this->_impl_.lockedaccountpubkey_.Set(from._internal_lockedaccountpubkey(), _this->GetArenaForAllocation());
  }
  _impl_.signature_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.signature_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_signature().empty()) {
    _this->_impl_.signature_.Set(from._internal_signature(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.MsgReclaimLockedFunds)
}

inline void MsgReclaimLockedFunds::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.sender_) {}

    , decltype(_impl_.lockedaccountpubkey_) {}

    , decltype(_impl_.signature_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.sender_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.sender_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.lockedaccountpubkey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.lockedaccountpubkey_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.signature_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.signature_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MsgReclaimLockedFunds::~MsgReclaimLockedFunds() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.MsgReclaimLockedFunds)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MsgReclaimLockedFunds::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sender_.Destroy();
  _impl_.lockedaccountpubkey_.Destroy();
  _impl_.signature_.Destroy();
}

void MsgReclaimLockedFunds::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MsgReclaimLockedFunds::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.MsgReclaimLockedFunds)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sender_.ClearToEmpty();
  _impl_.lockedaccountpubkey_.ClearToEmpty();
  _impl_.signature_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgReclaimLockedFunds::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string sender = 1 [json_name = "sender"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sender();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.MsgReclaimLockedFunds.sender"));
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes lockedAccountPubKey = 2 [json_name = "lockedAccountPubKey"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_lockedaccountpubkey();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes signature = 3 [json_name = "signature"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_signature();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MsgReclaimLockedFunds::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.MsgReclaimLockedFunds)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string sender = 1 [json_name = "sender"];
  if (!this->_internal_sender().empty()) {
    const std::string& _s = this->_internal_sender();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.MsgReclaimLockedFunds.sender");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // bytes lockedAccountPubKey = 2 [json_name = "lockedAccountPubKey"];
  if (!this->_internal_lockedaccountpubkey().empty()) {
    const std::string& _s = this->_internal_lockedaccountpubkey();
    target = stream->WriteBytesMaybeAliased(2, _s, target);
  }

  // bytes signature = 3 [json_name = "signature"];
  if (!this->_internal_signature().empty()) {
    const std::string& _s = this->_internal_signature();
    target = stream->WriteBytesMaybeAliased(3, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.MsgReclaimLockedFunds)
  return target;
}

::size_t MsgReclaimLockedFunds::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.MsgReclaimLockedFunds)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sender = 1 [json_name = "sender"];
  if (!this->_internal_sender().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_sender());
  }

  // bytes lockedAccountPubKey = 2 [json_name = "lockedAccountPubKey"];
  if (!this->_internal_lockedaccountpubkey().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_lockedaccountpubkey());
  }

  // bytes signature = 3 [json_name = "signature"];
  if (!this->_internal_signature().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_signature());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgReclaimLockedFunds::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MsgReclaimLockedFunds::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgReclaimLockedFunds::GetClassData() const { return &_class_data_; }


void MsgReclaimLockedFunds::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MsgReclaimLockedFunds*>(&to_msg);
  auto& from = static_cast<const MsgReclaimLockedFunds&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.MsgReclaimLockedFunds)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_sender().empty()) {
    _this->_internal_set_sender(from._internal_sender());
  }
  if (!from._internal_lockedaccountpubkey().empty()) {
    _this->_internal_set_lockedaccountpubkey(from._internal_lockedaccountpubkey());
  }
  if (!from._internal_signature().empty()) {
    _this->_internal_set_signature(from._internal_signature());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MsgReclaimLockedFunds::CopyFrom(const MsgReclaimLockedFunds& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.MsgReclaimLockedFunds)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgReclaimLockedFunds::IsInitialized() const {
  return true;
}

void MsgReclaimLockedFunds::InternalSwap(MsgReclaimLockedFunds* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.sender_, lhs_arena,
                                       &other->_impl_.sender_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.lockedaccountpubkey_, lhs_arena,
                                       &other->_impl_.lockedaccountpubkey_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.signature_, lhs_arena,
                                       &other->_impl_.signature_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgReclaimLockedFunds::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2ftx_2eproto[78]);
}
// ===================================================================

class MsgReclaimLockedFundsResponse::_Internal {
 public:
};

MsgReclaimLockedFundsResponse::MsgReclaimLockedFundsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.MsgReclaimLockedFundsResponse)
}
MsgReclaimLockedFundsResponse::MsgReclaimLockedFundsResponse(const MsgReclaimLockedFundsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  MsgReclaimLockedFundsResponse* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.MsgReclaimLockedFundsResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgReclaimLockedFundsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgReclaimLockedFundsResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata MsgReclaimLockedFundsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2ftx_2eproto[79]);
}
// ===================================================================

class MsgSignData::_Internal {
 public:
};

MsgSignData::MsgSignData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.MsgSignData)
}
MsgSignData::MsgSignData(const MsgSignData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MsgSignData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.signer_) {}

    , decltype(_impl_.data_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.signer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.signer_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_signer().empty()) {
    _this->_impl_.signer_.Set(from._internal_signer(), _this->GetArenaForAllocation());
  }
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.data_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.MsgSignData)
}

inline void MsgSignData::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.signer_) {}

    , decltype(_impl_.data_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.signer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.signer_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.data_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MsgSignData::~MsgSignData() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.MsgSignData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MsgSignData::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.signer_.Destroy();
  _impl_.data_.Destroy();
}

void MsgSignData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MsgSignData::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.MsgSignData)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.signer_.ClearToEmpty();
  _impl_.data_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgSignData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes Signer = 1 [json_name = "Signer", (.gogoproto.jsontag) = "signer", (.gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_signer();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes Data = 2 [json_name = "Data", (.gogoproto.jsontag) = "data"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MsgSignData::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.MsgSignData)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes Signer = 1 [json_name = "Signer", (.gogoproto.jsontag) = "signer", (.gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress"];
  if (!this->_internal_signer().empty()) {
    const std::string& _s = this->_internal_signer();
    target = stream->WriteBytesMaybeAliased(1, _s, target);
  }

  // bytes Data = 2 [json_name = "Data", (.gogoproto.jsontag) = "data"];
  if (!this->_internal_data().empty()) {
    const std::string& _s = this->_internal_data();
    target = stream->WriteBytesMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.MsgSignData)
  return target;
}

::size_t MsgSignData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.MsgSignData)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes Signer = 1 [json_name = "Signer", (.gogoproto.jsontag) = "signer", (.gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress"];
  if (!this->_internal_signer().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_signer());
  }

  // bytes Data = 2 [json_name = "Data", (.gogoproto.jsontag) = "data"];
  if (!this->_internal_data().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_data());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgSignData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MsgSignData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgSignData::GetClassData() const { return &_class_data_; }


void MsgSignData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MsgSignData*>(&to_msg);
  auto& from = static_cast<const MsgSignData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.MsgSignData)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_signer().empty()) {
    _this->_internal_set_signer(from._internal_signer());
  }
  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MsgSignData::CopyFrom(const MsgSignData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.MsgSignData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgSignData::IsInitialized() const {
  return true;
}

void MsgSignData::InternalSwap(MsgSignData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.signer_, lhs_arena,
                                       &other->_impl_.signer_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.data_, lhs_arena,
                                       &other->_impl_.data_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgSignData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2ftx_2eproto[80]);
}
// ===================================================================

class MsgSignDoc::_Internal {
 public:
  using HasBits = decltype(std::declval<MsgSignDoc>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(MsgSignDoc, _impl_._has_bits_);
  static const ::injective::exchange::v1beta1::MsgSignData& value(const MsgSignDoc* msg);
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::injective::exchange::v1beta1::MsgSignData&
MsgSignDoc::_Internal::value(const MsgSignDoc* msg) {
  return *msg->_impl_.value_;
}
MsgSignDoc::MsgSignDoc(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.MsgSignDoc)
}
MsgSignDoc::MsgSignDoc(const MsgSignDoc& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MsgSignDoc* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sign_type_) {}

    , decltype(_impl_.value_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.sign_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.sign_type_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sign_type().empty()) {
    _this->_impl_.sign_type_.Set(from._internal_sign_type(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.value_ = new ::injective::exchange::v1beta1::MsgSignData(*from._impl_.value_);
  }
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.MsgSignDoc)
}

inline void MsgSignDoc::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sign_type_) {}

    , decltype(_impl_.value_){nullptr}
  };
  _impl_.sign_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.sign_type_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MsgSignDoc::~MsgSignDoc() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.MsgSignDoc)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MsgSignDoc::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sign_type_.Destroy();
  if (this != internal_default_instance()) delete _impl_.value_;
}

void MsgSignDoc::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MsgSignDoc::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.MsgSignDoc)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sign_type_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.value_ != nullptr);
    _impl_.value_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgSignDoc::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string sign_type = 1 [json_name = "signType", (.gogoproto.jsontag) = "type"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sign_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.MsgSignDoc.sign_type"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .injective.exchange.v1beta1.MsgSignData value = 2 [json_name = "value", (.gogoproto.nullable) = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MsgSignDoc::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.MsgSignDoc)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string sign_type = 1 [json_name = "signType", (.gogoproto.jsontag) = "type"];
  if (!this->_internal_sign_type().empty()) {
    const std::string& _s = this->_internal_sign_type();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.MsgSignDoc.sign_type");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .injective.exchange.v1beta1.MsgSignData value = 2 [json_name = "value", (.gogoproto.nullable) = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::value(this),
        _Internal::value(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.MsgSignDoc)
  return target;
}

::size_t MsgSignDoc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.MsgSignDoc)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sign_type = 1 [json_name = "signType", (.gogoproto.jsontag) = "type"];
  if (!this->_internal_sign_type().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_sign_type());
  }

  // .injective.exchange.v1beta1.MsgSignData value = 2 [json_name = "value", (.gogoproto.nullable) = false];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.value_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgSignDoc::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MsgSignDoc::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgSignDoc::GetClassData() const { return &_class_data_; }


void MsgSignDoc::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MsgSignDoc*>(&to_msg);
  auto& from = static_cast<const MsgSignDoc&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.MsgSignDoc)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_sign_type().empty()) {
    _this->_internal_set_sign_type(from._internal_sign_type());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_value()->::injective::exchange::v1beta1::MsgSignData::MergeFrom(
        from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MsgSignDoc::CopyFrom(const MsgSignDoc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.MsgSignDoc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgSignDoc::IsInitialized() const {
  return true;
}

void MsgSignDoc::InternalSwap(MsgSignDoc* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.sign_type_, lhs_arena,
                                       &other->_impl_.sign_type_, rhs_arena);
  swap(_impl_.value_, other->_impl_.value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgSignDoc::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2ftx_2eproto[81]);
}
// ===================================================================

class MsgAdminUpdateBinaryOptionsMarket::_Internal {
 public:
};

MsgAdminUpdateBinaryOptionsMarket::MsgAdminUpdateBinaryOptionsMarket(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.MsgAdminUpdateBinaryOptionsMarket)
}
MsgAdminUpdateBinaryOptionsMarket::MsgAdminUpdateBinaryOptionsMarket(const MsgAdminUpdateBinaryOptionsMarket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MsgAdminUpdateBinaryOptionsMarket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.sender_) {}

    , decltype(_impl_.market_id_) {}

    , decltype(_impl_.settlement_price_) {}

    , decltype(_impl_.expiration_timestamp_) {}

    , decltype(_impl_.settlement_timestamp_) {}

    , decltype(_impl_.status_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.sender_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.sender_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sender().empty()) {
    _this->_impl_.sender_.Set(from._internal_sender(), _this->GetArenaForAllocation());
  }
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_market_id().empty()) {
    _this->_impl_.market_id_.Set(from._internal_market_id(), _this->GetArenaForAllocation());
  }
  _impl_.settlement_price_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.settlement_price_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_settlement_price().empty()) {
    _this->_impl_.settlement_price_.Set(from._internal_settlement_price(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.expiration_timestamp_, &from._impl_.expiration_timestamp_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.status_) -
    reinterpret_cast<char*>(&_impl_.expiration_timestamp_)) + sizeof(_impl_.status_));
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.MsgAdminUpdateBinaryOptionsMarket)
}

inline void MsgAdminUpdateBinaryOptionsMarket::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.sender_) {}

    , decltype(_impl_.market_id_) {}

    , decltype(_impl_.settlement_price_) {}

    , decltype(_impl_.expiration_timestamp_) { ::int64_t{0} }

    , decltype(_impl_.settlement_timestamp_) { ::int64_t{0} }

    , decltype(_impl_.status_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.sender_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.sender_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.settlement_price_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.settlement_price_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MsgAdminUpdateBinaryOptionsMarket::~MsgAdminUpdateBinaryOptionsMarket() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.MsgAdminUpdateBinaryOptionsMarket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MsgAdminUpdateBinaryOptionsMarket::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sender_.Destroy();
  _impl_.market_id_.Destroy();
  _impl_.settlement_price_.Destroy();
}

void MsgAdminUpdateBinaryOptionsMarket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MsgAdminUpdateBinaryOptionsMarket::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.MsgAdminUpdateBinaryOptionsMarket)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sender_.ClearToEmpty();
  _impl_.market_id_.ClearToEmpty();
  _impl_.settlement_price_.ClearToEmpty();
  ::memset(&_impl_.expiration_timestamp_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.status_) -
      reinterpret_cast<char*>(&_impl_.expiration_timestamp_)) + sizeof(_impl_.status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgAdminUpdateBinaryOptionsMarket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string sender = 1 [json_name = "sender"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sender();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.MsgAdminUpdateBinaryOptionsMarket.sender"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string market_id = 2 [json_name = "marketId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_market_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.MsgAdminUpdateBinaryOptionsMarket.market_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string settlement_price = 3 [json_name = "settlementPrice", (.gogoproto.nullable) = true, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_settlement_price();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.MsgAdminUpdateBinaryOptionsMarket.settlement_price"));
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 expiration_timestamp = 4 [json_name = "expirationTimestamp"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _impl_.expiration_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 settlement_timestamp = 5 [json_name = "settlementTimestamp"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _impl_.settlement_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .injective.exchange.v1beta1.MarketStatus status = 6 [json_name = "status"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::injective::exchange::v1beta1::MarketStatus>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MsgAdminUpdateBinaryOptionsMarket::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.MsgAdminUpdateBinaryOptionsMarket)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string sender = 1 [json_name = "sender"];
  if (!this->_internal_sender().empty()) {
    const std::string& _s = this->_internal_sender();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.MsgAdminUpdateBinaryOptionsMarket.sender");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string market_id = 2 [json_name = "marketId"];
  if (!this->_internal_market_id().empty()) {
    const std::string& _s = this->_internal_market_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.MsgAdminUpdateBinaryOptionsMarket.market_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string settlement_price = 3 [json_name = "settlementPrice", (.gogoproto.nullable) = true, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_settlement_price().empty()) {
    const std::string& _s = this->_internal_settlement_price();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.MsgAdminUpdateBinaryOptionsMarket.settlement_price");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // int64 expiration_timestamp = 4 [json_name = "expirationTimestamp"];
  if (this->_internal_expiration_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        4, this->_internal_expiration_timestamp(), target);
  }

  // int64 settlement_timestamp = 5 [json_name = "settlementTimestamp"];
  if (this->_internal_settlement_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        5, this->_internal_settlement_timestamp(), target);
  }

  // .injective.exchange.v1beta1.MarketStatus status = 6 [json_name = "status"];
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        6, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.MsgAdminUpdateBinaryOptionsMarket)
  return target;
}

::size_t MsgAdminUpdateBinaryOptionsMarket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.MsgAdminUpdateBinaryOptionsMarket)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sender = 1 [json_name = "sender"];
  if (!this->_internal_sender().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_sender());
  }

  // string market_id = 2 [json_name = "marketId"];
  if (!this->_internal_market_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_market_id());
  }

  // string settlement_price = 3 [json_name = "settlementPrice", (.gogoproto.nullable) = true, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_settlement_price().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_settlement_price());
  }

  // int64 expiration_timestamp = 4 [json_name = "expirationTimestamp"];
  if (this->_internal_expiration_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_expiration_timestamp());
  }

  // int64 settlement_timestamp = 5 [json_name = "settlementTimestamp"];
  if (this->_internal_settlement_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_settlement_timestamp());
  }

  // .injective.exchange.v1beta1.MarketStatus status = 6 [json_name = "status"];
  if (this->_internal_status() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgAdminUpdateBinaryOptionsMarket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MsgAdminUpdateBinaryOptionsMarket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgAdminUpdateBinaryOptionsMarket::GetClassData() const { return &_class_data_; }


void MsgAdminUpdateBinaryOptionsMarket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MsgAdminUpdateBinaryOptionsMarket*>(&to_msg);
  auto& from = static_cast<const MsgAdminUpdateBinaryOptionsMarket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.MsgAdminUpdateBinaryOptionsMarket)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_sender().empty()) {
    _this->_internal_set_sender(from._internal_sender());
  }
  if (!from._internal_market_id().empty()) {
    _this->_internal_set_market_id(from._internal_market_id());
  }
  if (!from._internal_settlement_price().empty()) {
    _this->_internal_set_settlement_price(from._internal_settlement_price());
  }
  if (from._internal_expiration_timestamp() != 0) {
    _this->_internal_set_expiration_timestamp(from._internal_expiration_timestamp());
  }
  if (from._internal_settlement_timestamp() != 0) {
    _this->_internal_set_settlement_timestamp(from._internal_settlement_timestamp());
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MsgAdminUpdateBinaryOptionsMarket::CopyFrom(const MsgAdminUpdateBinaryOptionsMarket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.MsgAdminUpdateBinaryOptionsMarket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgAdminUpdateBinaryOptionsMarket::IsInitialized() const {
  return true;
}

void MsgAdminUpdateBinaryOptionsMarket::InternalSwap(MsgAdminUpdateBinaryOptionsMarket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.sender_, lhs_arena,
                                       &other->_impl_.sender_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.market_id_, lhs_arena,
                                       &other->_impl_.market_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.settlement_price_, lhs_arena,
                                       &other->_impl_.settlement_price_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgAdminUpdateBinaryOptionsMarket, _impl_.status_)
      + sizeof(MsgAdminUpdateBinaryOptionsMarket::_impl_.status_)
      - PROTOBUF_FIELD_OFFSET(MsgAdminUpdateBinaryOptionsMarket, _impl_.expiration_timestamp_)>(
          reinterpret_cast<char*>(&_impl_.expiration_timestamp_),
          reinterpret_cast<char*>(&other->_impl_.expiration_timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgAdminUpdateBinaryOptionsMarket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2ftx_2eproto[82]);
}
// ===================================================================

class MsgAdminUpdateBinaryOptionsMarketResponse::_Internal {
 public:
};

MsgAdminUpdateBinaryOptionsMarketResponse::MsgAdminUpdateBinaryOptionsMarketResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.MsgAdminUpdateBinaryOptionsMarketResponse)
}
MsgAdminUpdateBinaryOptionsMarketResponse::MsgAdminUpdateBinaryOptionsMarketResponse(const MsgAdminUpdateBinaryOptionsMarketResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  MsgAdminUpdateBinaryOptionsMarketResponse* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.MsgAdminUpdateBinaryOptionsMarketResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgAdminUpdateBinaryOptionsMarketResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgAdminUpdateBinaryOptionsMarketResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata MsgAdminUpdateBinaryOptionsMarketResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2ftx_2eproto[83]);
}
// ===================================================================

class AtomicMarketOrderFeeMultiplierScheduleProposal::_Internal {
 public:
};

void AtomicMarketOrderFeeMultiplierScheduleProposal::clear_market_fee_multipliers() {
  _internal_mutable_market_fee_multipliers()->Clear();
}
AtomicMarketOrderFeeMultiplierScheduleProposal::AtomicMarketOrderFeeMultiplierScheduleProposal(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.AtomicMarketOrderFeeMultiplierScheduleProposal)
}
AtomicMarketOrderFeeMultiplierScheduleProposal::AtomicMarketOrderFeeMultiplierScheduleProposal(const AtomicMarketOrderFeeMultiplierScheduleProposal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AtomicMarketOrderFeeMultiplierScheduleProposal* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.market_fee_multipliers_){from._impl_.market_fee_multipliers_}
    , decltype(_impl_.title_) {}

    , decltype(_impl_.description_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.title_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_title().empty()) {
    _this->_impl_.title_.Set(from._internal_title(), _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.description_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.AtomicMarketOrderFeeMultiplierScheduleProposal)
}

inline void AtomicMarketOrderFeeMultiplierScheduleProposal::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.market_fee_multipliers_){arena}
    , decltype(_impl_.title_) {}

    , decltype(_impl_.description_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.title_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.description_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AtomicMarketOrderFeeMultiplierScheduleProposal::~AtomicMarketOrderFeeMultiplierScheduleProposal() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.AtomicMarketOrderFeeMultiplierScheduleProposal)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AtomicMarketOrderFeeMultiplierScheduleProposal::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_market_fee_multipliers()->~RepeatedPtrField();
  _impl_.title_.Destroy();
  _impl_.description_.Destroy();
}

void AtomicMarketOrderFeeMultiplierScheduleProposal::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AtomicMarketOrderFeeMultiplierScheduleProposal::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.AtomicMarketOrderFeeMultiplierScheduleProposal)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_market_fee_multipliers()->Clear();
  _impl_.title_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AtomicMarketOrderFeeMultiplierScheduleProposal::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string title = 1 [json_name = "title"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.AtomicMarketOrderFeeMultiplierScheduleProposal.title"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string description = 2 [json_name = "description"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.AtomicMarketOrderFeeMultiplierScheduleProposal.description"));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .injective.exchange.v1beta1.MarketFeeMultiplier market_fee_multipliers = 3 [json_name = "marketFeeMultipliers"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_market_fee_multipliers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* AtomicMarketOrderFeeMultiplierScheduleProposal::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.AtomicMarketOrderFeeMultiplierScheduleProposal)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string title = 1 [json_name = "title"];
  if (!this->_internal_title().empty()) {
    const std::string& _s = this->_internal_title();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.AtomicMarketOrderFeeMultiplierScheduleProposal.title");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string description = 2 [json_name = "description"];
  if (!this->_internal_description().empty()) {
    const std::string& _s = this->_internal_description();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.AtomicMarketOrderFeeMultiplierScheduleProposal.description");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // repeated .injective.exchange.v1beta1.MarketFeeMultiplier market_fee_multipliers = 3 [json_name = "marketFeeMultipliers"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_market_fee_multipliers_size()); i < n; i++) {
    const auto& repfield = this->_internal_market_fee_multipliers(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.AtomicMarketOrderFeeMultiplierScheduleProposal)
  return target;
}

::size_t AtomicMarketOrderFeeMultiplierScheduleProposal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.AtomicMarketOrderFeeMultiplierScheduleProposal)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .injective.exchange.v1beta1.MarketFeeMultiplier market_fee_multipliers = 3 [json_name = "marketFeeMultipliers"];
  total_size += 1UL * this->_internal_market_fee_multipliers_size();
  for (const auto& msg : this->_internal_market_fee_multipliers()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string title = 1 [json_name = "title"];
  if (!this->_internal_title().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_title());
  }

  // string description = 2 [json_name = "description"];
  if (!this->_internal_description().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_description());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AtomicMarketOrderFeeMultiplierScheduleProposal::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AtomicMarketOrderFeeMultiplierScheduleProposal::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AtomicMarketOrderFeeMultiplierScheduleProposal::GetClassData() const { return &_class_data_; }


void AtomicMarketOrderFeeMultiplierScheduleProposal::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AtomicMarketOrderFeeMultiplierScheduleProposal*>(&to_msg);
  auto& from = static_cast<const AtomicMarketOrderFeeMultiplierScheduleProposal&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.AtomicMarketOrderFeeMultiplierScheduleProposal)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_market_fee_multipliers()->MergeFrom(from._internal_market_fee_multipliers());
  if (!from._internal_title().empty()) {
    _this->_internal_set_title(from._internal_title());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AtomicMarketOrderFeeMultiplierScheduleProposal::CopyFrom(const AtomicMarketOrderFeeMultiplierScheduleProposal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.AtomicMarketOrderFeeMultiplierScheduleProposal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AtomicMarketOrderFeeMultiplierScheduleProposal::IsInitialized() const {
  return true;
}

void AtomicMarketOrderFeeMultiplierScheduleProposal::InternalSwap(AtomicMarketOrderFeeMultiplierScheduleProposal* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_market_fee_multipliers()->InternalSwap(other->_internal_mutable_market_fee_multipliers());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.title_, lhs_arena,
                                       &other->_impl_.title_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.description_, lhs_arena,
                                       &other->_impl_.description_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata AtomicMarketOrderFeeMultiplierScheduleProposal::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2ftx_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2ftx_2eproto[84]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1beta1
}  // namespace exchange
}  // namespace injective
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::MsgUpdateParams*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::MsgUpdateParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::MsgUpdateParams >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::MsgUpdateParamsResponse*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::MsgUpdateParamsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::MsgUpdateParamsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::MsgDeposit*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::MsgDeposit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::MsgDeposit >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::MsgDepositResponse*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::MsgDepositResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::MsgDepositResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::MsgWithdraw*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::MsgWithdraw >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::MsgWithdraw >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::MsgWithdrawResponse*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::MsgWithdrawResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::MsgWithdrawResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::MsgCreateSpotLimitOrder*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::MsgCreateSpotLimitOrder >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::MsgCreateSpotLimitOrder >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::MsgCreateSpotLimitOrderResponse*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::MsgCreateSpotLimitOrderResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::MsgCreateSpotLimitOrderResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::MsgBatchCreateSpotLimitOrders*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::MsgBatchCreateSpotLimitOrders >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::MsgBatchCreateSpotLimitOrders >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::MsgBatchCreateSpotLimitOrdersResponse*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::MsgBatchCreateSpotLimitOrdersResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::MsgBatchCreateSpotLimitOrdersResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::MsgInstantSpotMarketLaunch*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::MsgInstantSpotMarketLaunch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::MsgInstantSpotMarketLaunch >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::MsgInstantSpotMarketLaunchResponse*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::MsgInstantSpotMarketLaunchResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::MsgInstantSpotMarketLaunchResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::MsgInstantPerpetualMarketLaunch*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::MsgInstantPerpetualMarketLaunch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::MsgInstantPerpetualMarketLaunch >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::MsgInstantPerpetualMarketLaunchResponse*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::MsgInstantPerpetualMarketLaunchResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::MsgInstantPerpetualMarketLaunchResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::MsgInstantBinaryOptionsMarketLaunch*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::MsgInstantBinaryOptionsMarketLaunch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::MsgInstantBinaryOptionsMarketLaunch >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::MsgInstantBinaryOptionsMarketLaunchResponse*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::MsgInstantBinaryOptionsMarketLaunchResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::MsgInstantBinaryOptionsMarketLaunchResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::MsgInstantExpiryFuturesMarketLaunch*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::MsgInstantExpiryFuturesMarketLaunch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::MsgInstantExpiryFuturesMarketLaunch >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::MsgInstantExpiryFuturesMarketLaunchResponse*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::MsgInstantExpiryFuturesMarketLaunchResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::MsgInstantExpiryFuturesMarketLaunchResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::MsgCreateSpotMarketOrder*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::MsgCreateSpotMarketOrder >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::MsgCreateSpotMarketOrder >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::MsgCreateSpotMarketOrderResponse*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::MsgCreateSpotMarketOrderResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::MsgCreateSpotMarketOrderResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::SpotMarketOrderResults*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::SpotMarketOrderResults >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::SpotMarketOrderResults >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::MsgCreateDerivativeLimitOrder*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::MsgCreateDerivativeLimitOrder >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::MsgCreateDerivativeLimitOrder >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::MsgCreateDerivativeLimitOrderResponse*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::MsgCreateDerivativeLimitOrderResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::MsgCreateDerivativeLimitOrderResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::MsgCreateBinaryOptionsLimitOrder*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::MsgCreateBinaryOptionsLimitOrder >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::MsgCreateBinaryOptionsLimitOrder >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::MsgCreateBinaryOptionsLimitOrderResponse*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::MsgCreateBinaryOptionsLimitOrderResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::MsgCreateBinaryOptionsLimitOrderResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::MsgBatchCreateDerivativeLimitOrders*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::MsgBatchCreateDerivativeLimitOrders >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::MsgBatchCreateDerivativeLimitOrders >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::MsgBatchCreateDerivativeLimitOrdersResponse*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::MsgBatchCreateDerivativeLimitOrdersResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::MsgBatchCreateDerivativeLimitOrdersResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::MsgCancelSpotOrder*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::MsgCancelSpotOrder >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::MsgCancelSpotOrder >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::MsgCancelSpotOrderResponse*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::MsgCancelSpotOrderResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::MsgCancelSpotOrderResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::MsgBatchCancelSpotOrders*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::MsgBatchCancelSpotOrders >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::MsgBatchCancelSpotOrders >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::MsgBatchCancelSpotOrdersResponse*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::MsgBatchCancelSpotOrdersResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::MsgBatchCancelSpotOrdersResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::MsgBatchCancelBinaryOptionsOrders*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::MsgBatchCancelBinaryOptionsOrders >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::MsgBatchCancelBinaryOptionsOrders >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::MsgBatchCancelBinaryOptionsOrdersResponse*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::MsgBatchCancelBinaryOptionsOrdersResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::MsgBatchCancelBinaryOptionsOrdersResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::MsgBatchUpdateOrders*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::MsgBatchUpdateOrders >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::MsgBatchUpdateOrders >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::MsgBatchUpdateOrdersResponse*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::MsgBatchUpdateOrdersResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::MsgBatchUpdateOrdersResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::MsgCreateDerivativeMarketOrder*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::MsgCreateDerivativeMarketOrder >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::MsgCreateDerivativeMarketOrder >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::MsgCreateDerivativeMarketOrderResponse*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::MsgCreateDerivativeMarketOrderResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::MsgCreateDerivativeMarketOrderResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::DerivativeMarketOrderResults*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::DerivativeMarketOrderResults >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::DerivativeMarketOrderResults >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::MsgCreateBinaryOptionsMarketOrder*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::MsgCreateBinaryOptionsMarketOrder >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::MsgCreateBinaryOptionsMarketOrder >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::MsgCreateBinaryOptionsMarketOrderResponse*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::MsgCreateBinaryOptionsMarketOrderResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::MsgCreateBinaryOptionsMarketOrderResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::MsgCancelDerivativeOrder*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::MsgCancelDerivativeOrder >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::MsgCancelDerivativeOrder >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::MsgCancelDerivativeOrderResponse*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::MsgCancelDerivativeOrderResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::MsgCancelDerivativeOrderResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::MsgCancelBinaryOptionsOrder*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::MsgCancelBinaryOptionsOrder >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::MsgCancelBinaryOptionsOrder >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::MsgCancelBinaryOptionsOrderResponse*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::MsgCancelBinaryOptionsOrderResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::MsgCancelBinaryOptionsOrderResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::OrderData*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::OrderData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::OrderData >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::MsgBatchCancelDerivativeOrders*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::MsgBatchCancelDerivativeOrders >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::MsgBatchCancelDerivativeOrders >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::MsgBatchCancelDerivativeOrdersResponse*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::MsgBatchCancelDerivativeOrdersResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::MsgBatchCancelDerivativeOrdersResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::MsgSubaccountTransfer*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::MsgSubaccountTransfer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::MsgSubaccountTransfer >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::MsgSubaccountTransferResponse*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::MsgSubaccountTransferResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::MsgSubaccountTransferResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::MsgExternalTransfer*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::MsgExternalTransfer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::MsgExternalTransfer >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::MsgExternalTransferResponse*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::MsgExternalTransferResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::MsgExternalTransferResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::MsgLiquidatePosition*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::MsgLiquidatePosition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::MsgLiquidatePosition >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::MsgLiquidatePositionResponse*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::MsgLiquidatePositionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::MsgLiquidatePositionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::MsgIncreasePositionMargin*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::MsgIncreasePositionMargin >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::MsgIncreasePositionMargin >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::MsgIncreasePositionMarginResponse*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::MsgIncreasePositionMarginResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::MsgIncreasePositionMarginResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::MsgPrivilegedExecuteContract*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::MsgPrivilegedExecuteContract >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::MsgPrivilegedExecuteContract >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::MsgPrivilegedExecuteContractResponse*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::MsgPrivilegedExecuteContractResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::MsgPrivilegedExecuteContractResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::SpotMarketParamUpdateProposal*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::SpotMarketParamUpdateProposal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::SpotMarketParamUpdateProposal >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::ExchangeEnableProposal*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::ExchangeEnableProposal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::ExchangeEnableProposal >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::BatchExchangeModificationProposal*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::BatchExchangeModificationProposal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::BatchExchangeModificationProposal >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::SpotMarketLaunchProposal*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::SpotMarketLaunchProposal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::SpotMarketLaunchProposal >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::PerpetualMarketLaunchProposal*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::PerpetualMarketLaunchProposal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::PerpetualMarketLaunchProposal >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::BinaryOptionsMarketLaunchProposal*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::BinaryOptionsMarketLaunchProposal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::BinaryOptionsMarketLaunchProposal >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::ExpiryFuturesMarketLaunchProposal*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::ExpiryFuturesMarketLaunchProposal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::ExpiryFuturesMarketLaunchProposal >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::DerivativeMarketParamUpdateProposal*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::DerivativeMarketParamUpdateProposal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::DerivativeMarketParamUpdateProposal >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::MarketForcedSettlementProposal*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::MarketForcedSettlementProposal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::MarketForcedSettlementProposal >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::UpdateDenomDecimalsProposal*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::UpdateDenomDecimalsProposal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::UpdateDenomDecimalsProposal >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::BinaryOptionsMarketParamUpdateProposal*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::BinaryOptionsMarketParamUpdateProposal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::BinaryOptionsMarketParamUpdateProposal >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::ProviderOracleParams*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::ProviderOracleParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::ProviderOracleParams >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::OracleParams*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::OracleParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::OracleParams >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::TradingRewardCampaignLaunchProposal*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::TradingRewardCampaignLaunchProposal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::TradingRewardCampaignLaunchProposal >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::TradingRewardCampaignUpdateProposal*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::TradingRewardCampaignUpdateProposal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::TradingRewardCampaignUpdateProposal >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::RewardPointUpdate*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::RewardPointUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::RewardPointUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::TradingRewardPendingPointsUpdateProposal*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::TradingRewardPendingPointsUpdateProposal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::TradingRewardPendingPointsUpdateProposal >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::FeeDiscountProposal*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::FeeDiscountProposal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::FeeDiscountProposal >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::BatchCommunityPoolSpendProposal*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::BatchCommunityPoolSpendProposal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::BatchCommunityPoolSpendProposal >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::MsgRewardsOptOut*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::MsgRewardsOptOut >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::MsgRewardsOptOut >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::MsgRewardsOptOutResponse*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::MsgRewardsOptOutResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::MsgRewardsOptOutResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::MsgReclaimLockedFunds*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::MsgReclaimLockedFunds >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::MsgReclaimLockedFunds >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::MsgReclaimLockedFundsResponse*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::MsgReclaimLockedFundsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::MsgReclaimLockedFundsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::MsgSignData*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::MsgSignData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::MsgSignData >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::MsgSignDoc*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::MsgSignDoc >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::MsgSignDoc >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::MsgAdminUpdateBinaryOptionsMarket*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::MsgAdminUpdateBinaryOptionsMarket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::MsgAdminUpdateBinaryOptionsMarket >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::MsgAdminUpdateBinaryOptionsMarketResponse*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::MsgAdminUpdateBinaryOptionsMarketResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::MsgAdminUpdateBinaryOptionsMarketResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::AtomicMarketOrderFeeMultiplierScheduleProposal*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::AtomicMarketOrderFeeMultiplierScheduleProposal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::AtomicMarketOrderFeeMultiplierScheduleProposal >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

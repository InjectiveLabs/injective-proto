// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: injective/exchange/v1beta1/authz.proto

#include "injective/exchange/v1beta1/authz.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace injective {
namespace exchange {
namespace v1beta1 {
template <typename>
PROTOBUF_CONSTEXPR CreateSpotLimitOrderAuthz::CreateSpotLimitOrderAuthz(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.market_ids_)*/{}
  , /*decltype(_impl_.subaccount_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CreateSpotLimitOrderAuthzDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateSpotLimitOrderAuthzDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateSpotLimitOrderAuthzDefaultTypeInternal() {}
  union {
    CreateSpotLimitOrderAuthz _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateSpotLimitOrderAuthzDefaultTypeInternal _CreateSpotLimitOrderAuthz_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR CreateSpotMarketOrderAuthz::CreateSpotMarketOrderAuthz(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.market_ids_)*/{}
  , /*decltype(_impl_.subaccount_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CreateSpotMarketOrderAuthzDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateSpotMarketOrderAuthzDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateSpotMarketOrderAuthzDefaultTypeInternal() {}
  union {
    CreateSpotMarketOrderAuthz _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateSpotMarketOrderAuthzDefaultTypeInternal _CreateSpotMarketOrderAuthz_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR BatchCreateSpotLimitOrdersAuthz::BatchCreateSpotLimitOrdersAuthz(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.market_ids_)*/{}
  , /*decltype(_impl_.subaccount_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BatchCreateSpotLimitOrdersAuthzDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BatchCreateSpotLimitOrdersAuthzDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BatchCreateSpotLimitOrdersAuthzDefaultTypeInternal() {}
  union {
    BatchCreateSpotLimitOrdersAuthz _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BatchCreateSpotLimitOrdersAuthzDefaultTypeInternal _BatchCreateSpotLimitOrdersAuthz_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR CancelSpotOrderAuthz::CancelSpotOrderAuthz(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.market_ids_)*/{}
  , /*decltype(_impl_.subaccount_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CancelSpotOrderAuthzDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CancelSpotOrderAuthzDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CancelSpotOrderAuthzDefaultTypeInternal() {}
  union {
    CancelSpotOrderAuthz _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CancelSpotOrderAuthzDefaultTypeInternal _CancelSpotOrderAuthz_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR BatchCancelSpotOrdersAuthz::BatchCancelSpotOrdersAuthz(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.market_ids_)*/{}
  , /*decltype(_impl_.subaccount_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BatchCancelSpotOrdersAuthzDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BatchCancelSpotOrdersAuthzDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BatchCancelSpotOrdersAuthzDefaultTypeInternal() {}
  union {
    BatchCancelSpotOrdersAuthz _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BatchCancelSpotOrdersAuthzDefaultTypeInternal _BatchCancelSpotOrdersAuthz_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR CreateDerivativeLimitOrderAuthz::CreateDerivativeLimitOrderAuthz(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.market_ids_)*/{}
  , /*decltype(_impl_.subaccount_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CreateDerivativeLimitOrderAuthzDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateDerivativeLimitOrderAuthzDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateDerivativeLimitOrderAuthzDefaultTypeInternal() {}
  union {
    CreateDerivativeLimitOrderAuthz _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateDerivativeLimitOrderAuthzDefaultTypeInternal _CreateDerivativeLimitOrderAuthz_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR CreateDerivativeMarketOrderAuthz::CreateDerivativeMarketOrderAuthz(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.market_ids_)*/{}
  , /*decltype(_impl_.subaccount_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CreateDerivativeMarketOrderAuthzDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateDerivativeMarketOrderAuthzDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateDerivativeMarketOrderAuthzDefaultTypeInternal() {}
  union {
    CreateDerivativeMarketOrderAuthz _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateDerivativeMarketOrderAuthzDefaultTypeInternal _CreateDerivativeMarketOrderAuthz_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR BatchCreateDerivativeLimitOrdersAuthz::BatchCreateDerivativeLimitOrdersAuthz(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.market_ids_)*/{}
  , /*decltype(_impl_.subaccount_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BatchCreateDerivativeLimitOrdersAuthzDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BatchCreateDerivativeLimitOrdersAuthzDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BatchCreateDerivativeLimitOrdersAuthzDefaultTypeInternal() {}
  union {
    BatchCreateDerivativeLimitOrdersAuthz _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BatchCreateDerivativeLimitOrdersAuthzDefaultTypeInternal _BatchCreateDerivativeLimitOrdersAuthz_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR CancelDerivativeOrderAuthz::CancelDerivativeOrderAuthz(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.market_ids_)*/{}
  , /*decltype(_impl_.subaccount_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CancelDerivativeOrderAuthzDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CancelDerivativeOrderAuthzDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CancelDerivativeOrderAuthzDefaultTypeInternal() {}
  union {
    CancelDerivativeOrderAuthz _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CancelDerivativeOrderAuthzDefaultTypeInternal _CancelDerivativeOrderAuthz_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR BatchCancelDerivativeOrdersAuthz::BatchCancelDerivativeOrdersAuthz(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.market_ids_)*/{}
  , /*decltype(_impl_.subaccount_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BatchCancelDerivativeOrdersAuthzDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BatchCancelDerivativeOrdersAuthzDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BatchCancelDerivativeOrdersAuthzDefaultTypeInternal() {}
  union {
    BatchCancelDerivativeOrdersAuthz _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BatchCancelDerivativeOrdersAuthzDefaultTypeInternal _BatchCancelDerivativeOrdersAuthz_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR BatchUpdateOrdersAuthz::BatchUpdateOrdersAuthz(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.spot_markets_)*/{}
  , /*decltype(_impl_.derivative_markets_)*/{}
  , /*decltype(_impl_.subaccount_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BatchUpdateOrdersAuthzDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BatchUpdateOrdersAuthzDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BatchUpdateOrdersAuthzDefaultTypeInternal() {}
  union {
    BatchUpdateOrdersAuthz _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BatchUpdateOrdersAuthzDefaultTypeInternal _BatchUpdateOrdersAuthz_default_instance_;
}  // namespace v1beta1
}  // namespace exchange
}  // namespace injective
static ::_pb::Metadata file_level_metadata_injective_2fexchange_2fv1beta1_2fauthz_2eproto[11];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_injective_2fexchange_2fv1beta1_2fauthz_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_injective_2fexchange_2fv1beta1_2fauthz_2eproto = nullptr;
const ::uint32_t TableStruct_injective_2fexchange_2fv1beta1_2fauthz_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::CreateSpotLimitOrderAuthz, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::CreateSpotLimitOrderAuthz, _impl_.subaccount_id_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::CreateSpotLimitOrderAuthz, _impl_.market_ids_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::CreateSpotMarketOrderAuthz, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::CreateSpotMarketOrderAuthz, _impl_.subaccount_id_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::CreateSpotMarketOrderAuthz, _impl_.market_ids_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::BatchCreateSpotLimitOrdersAuthz, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::BatchCreateSpotLimitOrdersAuthz, _impl_.subaccount_id_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::BatchCreateSpotLimitOrdersAuthz, _impl_.market_ids_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::CancelSpotOrderAuthz, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::CancelSpotOrderAuthz, _impl_.subaccount_id_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::CancelSpotOrderAuthz, _impl_.market_ids_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::BatchCancelSpotOrdersAuthz, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::BatchCancelSpotOrdersAuthz, _impl_.subaccount_id_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::BatchCancelSpotOrdersAuthz, _impl_.market_ids_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::CreateDerivativeLimitOrderAuthz, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::CreateDerivativeLimitOrderAuthz, _impl_.subaccount_id_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::CreateDerivativeLimitOrderAuthz, _impl_.market_ids_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::CreateDerivativeMarketOrderAuthz, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::CreateDerivativeMarketOrderAuthz, _impl_.subaccount_id_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::CreateDerivativeMarketOrderAuthz, _impl_.market_ids_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::BatchCreateDerivativeLimitOrdersAuthz, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::BatchCreateDerivativeLimitOrdersAuthz, _impl_.subaccount_id_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::BatchCreateDerivativeLimitOrdersAuthz, _impl_.market_ids_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::CancelDerivativeOrderAuthz, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::CancelDerivativeOrderAuthz, _impl_.subaccount_id_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::CancelDerivativeOrderAuthz, _impl_.market_ids_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::BatchCancelDerivativeOrdersAuthz, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::BatchCancelDerivativeOrdersAuthz, _impl_.subaccount_id_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::BatchCancelDerivativeOrdersAuthz, _impl_.market_ids_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::BatchUpdateOrdersAuthz, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::BatchUpdateOrdersAuthz, _impl_.subaccount_id_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::BatchUpdateOrdersAuthz, _impl_.spot_markets_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::BatchUpdateOrdersAuthz, _impl_.derivative_markets_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::injective::exchange::v1beta1::CreateSpotLimitOrderAuthz)},
        { 10, -1, -1, sizeof(::injective::exchange::v1beta1::CreateSpotMarketOrderAuthz)},
        { 20, -1, -1, sizeof(::injective::exchange::v1beta1::BatchCreateSpotLimitOrdersAuthz)},
        { 30, -1, -1, sizeof(::injective::exchange::v1beta1::CancelSpotOrderAuthz)},
        { 40, -1, -1, sizeof(::injective::exchange::v1beta1::BatchCancelSpotOrdersAuthz)},
        { 50, -1, -1, sizeof(::injective::exchange::v1beta1::CreateDerivativeLimitOrderAuthz)},
        { 60, -1, -1, sizeof(::injective::exchange::v1beta1::CreateDerivativeMarketOrderAuthz)},
        { 70, -1, -1, sizeof(::injective::exchange::v1beta1::BatchCreateDerivativeLimitOrdersAuthz)},
        { 80, -1, -1, sizeof(::injective::exchange::v1beta1::CancelDerivativeOrderAuthz)},
        { 90, -1, -1, sizeof(::injective::exchange::v1beta1::BatchCancelDerivativeOrdersAuthz)},
        { 100, -1, -1, sizeof(::injective::exchange::v1beta1::BatchUpdateOrdersAuthz)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::injective::exchange::v1beta1::_CreateSpotLimitOrderAuthz_default_instance_._instance,
    &::injective::exchange::v1beta1::_CreateSpotMarketOrderAuthz_default_instance_._instance,
    &::injective::exchange::v1beta1::_BatchCreateSpotLimitOrdersAuthz_default_instance_._instance,
    &::injective::exchange::v1beta1::_CancelSpotOrderAuthz_default_instance_._instance,
    &::injective::exchange::v1beta1::_BatchCancelSpotOrdersAuthz_default_instance_._instance,
    &::injective::exchange::v1beta1::_CreateDerivativeLimitOrderAuthz_default_instance_._instance,
    &::injective::exchange::v1beta1::_CreateDerivativeMarketOrderAuthz_default_instance_._instance,
    &::injective::exchange::v1beta1::_BatchCreateDerivativeLimitOrdersAuthz_default_instance_._instance,
    &::injective::exchange::v1beta1::_CancelDerivativeOrderAuthz_default_instance_._instance,
    &::injective::exchange::v1beta1::_BatchCancelDerivativeOrdersAuthz_default_instance_._instance,
    &::injective::exchange::v1beta1::_BatchUpdateOrdersAuthz_default_instance_._instance,
};
const char descriptor_table_protodef_injective_2fexchange_2fv1beta1_2fauthz_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n&injective/exchange/v1beta1/authz.proto"
    "\022\032injective.exchange.v1beta1\032\031cosmos_pro"
    "to/cosmos.proto\"r\n\031CreateSpotLimitOrderA"
    "uthz\022#\n\rsubaccount_id\030\001 \001(\tR\014subaccountI"
    "d\022\035\n\nmarket_ids\030\002 \003(\tR\tmarketIds:\021\312\264-\rAu"
    "thorization\"s\n\032CreateSpotMarketOrderAuth"
    "z\022#\n\rsubaccount_id\030\001 \001(\tR\014subaccountId\022\035"
    "\n\nmarket_ids\030\002 \003(\tR\tmarketIds:\021\312\264-\rAutho"
    "rization\"x\n\037BatchCreateSpotLimitOrdersAu"
    "thz\022#\n\rsubaccount_id\030\001 \001(\tR\014subaccountId"
    "\022\035\n\nmarket_ids\030\002 \003(\tR\tmarketIds:\021\312\264-\rAut"
    "horization\"m\n\024CancelSpotOrderAuthz\022#\n\rsu"
    "baccount_id\030\001 \001(\tR\014subaccountId\022\035\n\nmarke"
    "t_ids\030\002 \003(\tR\tmarketIds:\021\312\264-\rAuthorizatio"
    "n\"s\n\032BatchCancelSpotOrdersAuthz\022#\n\rsubac"
    "count_id\030\001 \001(\tR\014subaccountId\022\035\n\nmarket_i"
    "ds\030\002 \003(\tR\tmarketIds:\021\312\264-\rAuthorization\"x"
    "\n\037CreateDerivativeLimitOrderAuthz\022#\n\rsub"
    "account_id\030\001 \001(\tR\014subaccountId\022\035\n\nmarket"
    "_ids\030\002 \003(\tR\tmarketIds:\021\312\264-\rAuthorization"
    "\"y\n CreateDerivativeMarketOrderAuthz\022#\n\r"
    "subaccount_id\030\001 \001(\tR\014subaccountId\022\035\n\nmar"
    "ket_ids\030\002 \003(\tR\tmarketIds:\021\312\264-\rAuthorizat"
    "ion\"~\n%BatchCreateDerivativeLimitOrdersA"
    "uthz\022#\n\rsubaccount_id\030\001 \001(\tR\014subaccountI"
    "d\022\035\n\nmarket_ids\030\002 \003(\tR\tmarketIds:\021\312\264-\rAu"
    "thorization\"s\n\032CancelDerivativeOrderAuth"
    "z\022#\n\rsubaccount_id\030\001 \001(\tR\014subaccountId\022\035"
    "\n\nmarket_ids\030\002 \003(\tR\tmarketIds:\021\312\264-\rAutho"
    "rization\"y\n BatchCancelDerivativeOrdersA"
    "uthz\022#\n\rsubaccount_id\030\001 \001(\tR\014subaccountI"
    "d\022\035\n\nmarket_ids\030\002 \003(\tR\tmarketIds:\021\312\264-\rAu"
    "thorization\"\242\001\n\026BatchUpdateOrdersAuthz\022#"
    "\n\rsubaccount_id\030\001 \001(\tR\014subaccountId\022!\n\014s"
    "pot_markets\030\002 \003(\tR\013spotMarkets\022-\n\022deriva"
    "tive_markets\030\003 \003(\tR\021derivativeMarkets:\021\312"
    "\264-\rAuthorizationB\206\002\n\036com.injective.excha"
    "nge.v1beta1B\nAuthzProtoP\001ZNgithub.com/In"
    "jectiveLabs/injective-core/injective-cha"
    "in/modules/exchange/types\242\002\003IEX\252\002\032Inject"
    "ive.Exchange.V1beta1\312\002\032Injective\\Exchang"
    "e\\V1beta1\342\002&Injective\\Exchange\\V1beta1\\G"
    "PBMetadata\352\002\034Injective::Exchange::V1beta"
    "1b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_injective_2fexchange_2fv1beta1_2fauthz_2eproto_deps[1] =
    {
        &::descriptor_table_cosmos_5fproto_2fcosmos_2eproto,
};
static ::absl::once_flag descriptor_table_injective_2fexchange_2fv1beta1_2fauthz_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_injective_2fexchange_2fv1beta1_2fauthz_2eproto = {
    false,
    false,
    1729,
    descriptor_table_protodef_injective_2fexchange_2fv1beta1_2fauthz_2eproto,
    "injective/exchange/v1beta1/authz.proto",
    &descriptor_table_injective_2fexchange_2fv1beta1_2fauthz_2eproto_once,
    descriptor_table_injective_2fexchange_2fv1beta1_2fauthz_2eproto_deps,
    1,
    11,
    schemas,
    file_default_instances,
    TableStruct_injective_2fexchange_2fv1beta1_2fauthz_2eproto::offsets,
    file_level_metadata_injective_2fexchange_2fv1beta1_2fauthz_2eproto,
    file_level_enum_descriptors_injective_2fexchange_2fv1beta1_2fauthz_2eproto,
    file_level_service_descriptors_injective_2fexchange_2fv1beta1_2fauthz_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_injective_2fexchange_2fv1beta1_2fauthz_2eproto_getter() {
  return &descriptor_table_injective_2fexchange_2fv1beta1_2fauthz_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_injective_2fexchange_2fv1beta1_2fauthz_2eproto(&descriptor_table_injective_2fexchange_2fv1beta1_2fauthz_2eproto);
namespace injective {
namespace exchange {
namespace v1beta1 {
// ===================================================================

class CreateSpotLimitOrderAuthz::_Internal {
 public:
};

CreateSpotLimitOrderAuthz::CreateSpotLimitOrderAuthz(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.CreateSpotLimitOrderAuthz)
}
CreateSpotLimitOrderAuthz::CreateSpotLimitOrderAuthz(const CreateSpotLimitOrderAuthz& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CreateSpotLimitOrderAuthz* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.market_ids_){from._impl_.market_ids_}
    , decltype(_impl_.subaccount_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.subaccount_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.subaccount_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_subaccount_id().empty()) {
    _this->_impl_.subaccount_id_.Set(from._internal_subaccount_id(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.CreateSpotLimitOrderAuthz)
}

inline void CreateSpotLimitOrderAuthz::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.market_ids_){arena}
    , decltype(_impl_.subaccount_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.subaccount_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.subaccount_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CreateSpotLimitOrderAuthz::~CreateSpotLimitOrderAuthz() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.CreateSpotLimitOrderAuthz)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CreateSpotLimitOrderAuthz::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_market_ids()->~RepeatedPtrField();
  _impl_.subaccount_id_.Destroy();
}

void CreateSpotLimitOrderAuthz::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CreateSpotLimitOrderAuthz::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.CreateSpotLimitOrderAuthz)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_market_ids()->Clear();
  _impl_.subaccount_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateSpotLimitOrderAuthz::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string subaccount_id = 1 [json_name = "subaccountId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_subaccount_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.CreateSpotLimitOrderAuthz.subaccount_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string market_ids = 2 [json_name = "marketIds"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_market_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.CreateSpotLimitOrderAuthz.market_ids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* CreateSpotLimitOrderAuthz::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.CreateSpotLimitOrderAuthz)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string subaccount_id = 1 [json_name = "subaccountId"];
  if (!this->_internal_subaccount_id().empty()) {
    const std::string& _s = this->_internal_subaccount_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.CreateSpotLimitOrderAuthz.subaccount_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // repeated string market_ids = 2 [json_name = "marketIds"];
  for (int i = 0, n = this->_internal_market_ids_size(); i < n; ++i) {
    const auto& s = this->_internal_market_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.CreateSpotLimitOrderAuthz.market_ids");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.CreateSpotLimitOrderAuthz)
  return target;
}

::size_t CreateSpotLimitOrderAuthz::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.CreateSpotLimitOrderAuthz)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string market_ids = 2 [json_name = "marketIds"];
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_market_ids().size());
  for (int i = 0, n = _internal_market_ids().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_market_ids().Get(i));
  }

  // string subaccount_id = 1 [json_name = "subaccountId"];
  if (!this->_internal_subaccount_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_subaccount_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateSpotLimitOrderAuthz::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CreateSpotLimitOrderAuthz::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateSpotLimitOrderAuthz::GetClassData() const { return &_class_data_; }


void CreateSpotLimitOrderAuthz::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CreateSpotLimitOrderAuthz*>(&to_msg);
  auto& from = static_cast<const CreateSpotLimitOrderAuthz&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.CreateSpotLimitOrderAuthz)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_market_ids()->MergeFrom(from._internal_market_ids());
  if (!from._internal_subaccount_id().empty()) {
    _this->_internal_set_subaccount_id(from._internal_subaccount_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateSpotLimitOrderAuthz::CopyFrom(const CreateSpotLimitOrderAuthz& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.CreateSpotLimitOrderAuthz)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateSpotLimitOrderAuthz::IsInitialized() const {
  return true;
}

void CreateSpotLimitOrderAuthz::InternalSwap(CreateSpotLimitOrderAuthz* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_market_ids()->InternalSwap(
      other->_internal_mutable_market_ids());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.subaccount_id_, lhs_arena,
                                       &other->_impl_.subaccount_id_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateSpotLimitOrderAuthz::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2fauthz_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2fauthz_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2fauthz_2eproto[0]);
}
// ===================================================================

class CreateSpotMarketOrderAuthz::_Internal {
 public:
};

CreateSpotMarketOrderAuthz::CreateSpotMarketOrderAuthz(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.CreateSpotMarketOrderAuthz)
}
CreateSpotMarketOrderAuthz::CreateSpotMarketOrderAuthz(const CreateSpotMarketOrderAuthz& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CreateSpotMarketOrderAuthz* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.market_ids_){from._impl_.market_ids_}
    , decltype(_impl_.subaccount_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.subaccount_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.subaccount_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_subaccount_id().empty()) {
    _this->_impl_.subaccount_id_.Set(from._internal_subaccount_id(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.CreateSpotMarketOrderAuthz)
}

inline void CreateSpotMarketOrderAuthz::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.market_ids_){arena}
    , decltype(_impl_.subaccount_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.subaccount_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.subaccount_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CreateSpotMarketOrderAuthz::~CreateSpotMarketOrderAuthz() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.CreateSpotMarketOrderAuthz)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CreateSpotMarketOrderAuthz::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_market_ids()->~RepeatedPtrField();
  _impl_.subaccount_id_.Destroy();
}

void CreateSpotMarketOrderAuthz::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CreateSpotMarketOrderAuthz::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.CreateSpotMarketOrderAuthz)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_market_ids()->Clear();
  _impl_.subaccount_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateSpotMarketOrderAuthz::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string subaccount_id = 1 [json_name = "subaccountId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_subaccount_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.CreateSpotMarketOrderAuthz.subaccount_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string market_ids = 2 [json_name = "marketIds"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_market_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.CreateSpotMarketOrderAuthz.market_ids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* CreateSpotMarketOrderAuthz::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.CreateSpotMarketOrderAuthz)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string subaccount_id = 1 [json_name = "subaccountId"];
  if (!this->_internal_subaccount_id().empty()) {
    const std::string& _s = this->_internal_subaccount_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.CreateSpotMarketOrderAuthz.subaccount_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // repeated string market_ids = 2 [json_name = "marketIds"];
  for (int i = 0, n = this->_internal_market_ids_size(); i < n; ++i) {
    const auto& s = this->_internal_market_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.CreateSpotMarketOrderAuthz.market_ids");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.CreateSpotMarketOrderAuthz)
  return target;
}

::size_t CreateSpotMarketOrderAuthz::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.CreateSpotMarketOrderAuthz)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string market_ids = 2 [json_name = "marketIds"];
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_market_ids().size());
  for (int i = 0, n = _internal_market_ids().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_market_ids().Get(i));
  }

  // string subaccount_id = 1 [json_name = "subaccountId"];
  if (!this->_internal_subaccount_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_subaccount_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateSpotMarketOrderAuthz::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CreateSpotMarketOrderAuthz::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateSpotMarketOrderAuthz::GetClassData() const { return &_class_data_; }


void CreateSpotMarketOrderAuthz::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CreateSpotMarketOrderAuthz*>(&to_msg);
  auto& from = static_cast<const CreateSpotMarketOrderAuthz&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.CreateSpotMarketOrderAuthz)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_market_ids()->MergeFrom(from._internal_market_ids());
  if (!from._internal_subaccount_id().empty()) {
    _this->_internal_set_subaccount_id(from._internal_subaccount_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateSpotMarketOrderAuthz::CopyFrom(const CreateSpotMarketOrderAuthz& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.CreateSpotMarketOrderAuthz)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateSpotMarketOrderAuthz::IsInitialized() const {
  return true;
}

void CreateSpotMarketOrderAuthz::InternalSwap(CreateSpotMarketOrderAuthz* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_market_ids()->InternalSwap(
      other->_internal_mutable_market_ids());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.subaccount_id_, lhs_arena,
                                       &other->_impl_.subaccount_id_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateSpotMarketOrderAuthz::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2fauthz_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2fauthz_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2fauthz_2eproto[1]);
}
// ===================================================================

class BatchCreateSpotLimitOrdersAuthz::_Internal {
 public:
};

BatchCreateSpotLimitOrdersAuthz::BatchCreateSpotLimitOrdersAuthz(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.BatchCreateSpotLimitOrdersAuthz)
}
BatchCreateSpotLimitOrdersAuthz::BatchCreateSpotLimitOrdersAuthz(const BatchCreateSpotLimitOrdersAuthz& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BatchCreateSpotLimitOrdersAuthz* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.market_ids_){from._impl_.market_ids_}
    , decltype(_impl_.subaccount_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.subaccount_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.subaccount_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_subaccount_id().empty()) {
    _this->_impl_.subaccount_id_.Set(from._internal_subaccount_id(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.BatchCreateSpotLimitOrdersAuthz)
}

inline void BatchCreateSpotLimitOrdersAuthz::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.market_ids_){arena}
    , decltype(_impl_.subaccount_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.subaccount_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.subaccount_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BatchCreateSpotLimitOrdersAuthz::~BatchCreateSpotLimitOrdersAuthz() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.BatchCreateSpotLimitOrdersAuthz)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BatchCreateSpotLimitOrdersAuthz::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_market_ids()->~RepeatedPtrField();
  _impl_.subaccount_id_.Destroy();
}

void BatchCreateSpotLimitOrdersAuthz::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BatchCreateSpotLimitOrdersAuthz::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.BatchCreateSpotLimitOrdersAuthz)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_market_ids()->Clear();
  _impl_.subaccount_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BatchCreateSpotLimitOrdersAuthz::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string subaccount_id = 1 [json_name = "subaccountId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_subaccount_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.BatchCreateSpotLimitOrdersAuthz.subaccount_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string market_ids = 2 [json_name = "marketIds"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_market_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.BatchCreateSpotLimitOrdersAuthz.market_ids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* BatchCreateSpotLimitOrdersAuthz::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.BatchCreateSpotLimitOrdersAuthz)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string subaccount_id = 1 [json_name = "subaccountId"];
  if (!this->_internal_subaccount_id().empty()) {
    const std::string& _s = this->_internal_subaccount_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.BatchCreateSpotLimitOrdersAuthz.subaccount_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // repeated string market_ids = 2 [json_name = "marketIds"];
  for (int i = 0, n = this->_internal_market_ids_size(); i < n; ++i) {
    const auto& s = this->_internal_market_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.BatchCreateSpotLimitOrdersAuthz.market_ids");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.BatchCreateSpotLimitOrdersAuthz)
  return target;
}

::size_t BatchCreateSpotLimitOrdersAuthz::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.BatchCreateSpotLimitOrdersAuthz)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string market_ids = 2 [json_name = "marketIds"];
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_market_ids().size());
  for (int i = 0, n = _internal_market_ids().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_market_ids().Get(i));
  }

  // string subaccount_id = 1 [json_name = "subaccountId"];
  if (!this->_internal_subaccount_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_subaccount_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BatchCreateSpotLimitOrdersAuthz::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BatchCreateSpotLimitOrdersAuthz::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BatchCreateSpotLimitOrdersAuthz::GetClassData() const { return &_class_data_; }


void BatchCreateSpotLimitOrdersAuthz::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BatchCreateSpotLimitOrdersAuthz*>(&to_msg);
  auto& from = static_cast<const BatchCreateSpotLimitOrdersAuthz&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.BatchCreateSpotLimitOrdersAuthz)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_market_ids()->MergeFrom(from._internal_market_ids());
  if (!from._internal_subaccount_id().empty()) {
    _this->_internal_set_subaccount_id(from._internal_subaccount_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BatchCreateSpotLimitOrdersAuthz::CopyFrom(const BatchCreateSpotLimitOrdersAuthz& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.BatchCreateSpotLimitOrdersAuthz)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchCreateSpotLimitOrdersAuthz::IsInitialized() const {
  return true;
}

void BatchCreateSpotLimitOrdersAuthz::InternalSwap(BatchCreateSpotLimitOrdersAuthz* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_market_ids()->InternalSwap(
      other->_internal_mutable_market_ids());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.subaccount_id_, lhs_arena,
                                       &other->_impl_.subaccount_id_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata BatchCreateSpotLimitOrdersAuthz::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2fauthz_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2fauthz_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2fauthz_2eproto[2]);
}
// ===================================================================

class CancelSpotOrderAuthz::_Internal {
 public:
};

CancelSpotOrderAuthz::CancelSpotOrderAuthz(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.CancelSpotOrderAuthz)
}
CancelSpotOrderAuthz::CancelSpotOrderAuthz(const CancelSpotOrderAuthz& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CancelSpotOrderAuthz* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.market_ids_){from._impl_.market_ids_}
    , decltype(_impl_.subaccount_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.subaccount_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.subaccount_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_subaccount_id().empty()) {
    _this->_impl_.subaccount_id_.Set(from._internal_subaccount_id(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.CancelSpotOrderAuthz)
}

inline void CancelSpotOrderAuthz::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.market_ids_){arena}
    , decltype(_impl_.subaccount_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.subaccount_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.subaccount_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CancelSpotOrderAuthz::~CancelSpotOrderAuthz() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.CancelSpotOrderAuthz)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CancelSpotOrderAuthz::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_market_ids()->~RepeatedPtrField();
  _impl_.subaccount_id_.Destroy();
}

void CancelSpotOrderAuthz::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CancelSpotOrderAuthz::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.CancelSpotOrderAuthz)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_market_ids()->Clear();
  _impl_.subaccount_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CancelSpotOrderAuthz::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string subaccount_id = 1 [json_name = "subaccountId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_subaccount_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.CancelSpotOrderAuthz.subaccount_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string market_ids = 2 [json_name = "marketIds"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_market_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.CancelSpotOrderAuthz.market_ids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* CancelSpotOrderAuthz::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.CancelSpotOrderAuthz)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string subaccount_id = 1 [json_name = "subaccountId"];
  if (!this->_internal_subaccount_id().empty()) {
    const std::string& _s = this->_internal_subaccount_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.CancelSpotOrderAuthz.subaccount_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // repeated string market_ids = 2 [json_name = "marketIds"];
  for (int i = 0, n = this->_internal_market_ids_size(); i < n; ++i) {
    const auto& s = this->_internal_market_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.CancelSpotOrderAuthz.market_ids");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.CancelSpotOrderAuthz)
  return target;
}

::size_t CancelSpotOrderAuthz::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.CancelSpotOrderAuthz)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string market_ids = 2 [json_name = "marketIds"];
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_market_ids().size());
  for (int i = 0, n = _internal_market_ids().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_market_ids().Get(i));
  }

  // string subaccount_id = 1 [json_name = "subaccountId"];
  if (!this->_internal_subaccount_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_subaccount_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CancelSpotOrderAuthz::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CancelSpotOrderAuthz::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CancelSpotOrderAuthz::GetClassData() const { return &_class_data_; }


void CancelSpotOrderAuthz::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CancelSpotOrderAuthz*>(&to_msg);
  auto& from = static_cast<const CancelSpotOrderAuthz&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.CancelSpotOrderAuthz)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_market_ids()->MergeFrom(from._internal_market_ids());
  if (!from._internal_subaccount_id().empty()) {
    _this->_internal_set_subaccount_id(from._internal_subaccount_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CancelSpotOrderAuthz::CopyFrom(const CancelSpotOrderAuthz& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.CancelSpotOrderAuthz)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CancelSpotOrderAuthz::IsInitialized() const {
  return true;
}

void CancelSpotOrderAuthz::InternalSwap(CancelSpotOrderAuthz* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_market_ids()->InternalSwap(
      other->_internal_mutable_market_ids());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.subaccount_id_, lhs_arena,
                                       &other->_impl_.subaccount_id_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata CancelSpotOrderAuthz::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2fauthz_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2fauthz_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2fauthz_2eproto[3]);
}
// ===================================================================

class BatchCancelSpotOrdersAuthz::_Internal {
 public:
};

BatchCancelSpotOrdersAuthz::BatchCancelSpotOrdersAuthz(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.BatchCancelSpotOrdersAuthz)
}
BatchCancelSpotOrdersAuthz::BatchCancelSpotOrdersAuthz(const BatchCancelSpotOrdersAuthz& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BatchCancelSpotOrdersAuthz* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.market_ids_){from._impl_.market_ids_}
    , decltype(_impl_.subaccount_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.subaccount_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.subaccount_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_subaccount_id().empty()) {
    _this->_impl_.subaccount_id_.Set(from._internal_subaccount_id(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.BatchCancelSpotOrdersAuthz)
}

inline void BatchCancelSpotOrdersAuthz::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.market_ids_){arena}
    , decltype(_impl_.subaccount_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.subaccount_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.subaccount_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BatchCancelSpotOrdersAuthz::~BatchCancelSpotOrdersAuthz() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.BatchCancelSpotOrdersAuthz)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BatchCancelSpotOrdersAuthz::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_market_ids()->~RepeatedPtrField();
  _impl_.subaccount_id_.Destroy();
}

void BatchCancelSpotOrdersAuthz::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BatchCancelSpotOrdersAuthz::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.BatchCancelSpotOrdersAuthz)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_market_ids()->Clear();
  _impl_.subaccount_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BatchCancelSpotOrdersAuthz::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string subaccount_id = 1 [json_name = "subaccountId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_subaccount_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.BatchCancelSpotOrdersAuthz.subaccount_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string market_ids = 2 [json_name = "marketIds"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_market_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.BatchCancelSpotOrdersAuthz.market_ids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* BatchCancelSpotOrdersAuthz::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.BatchCancelSpotOrdersAuthz)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string subaccount_id = 1 [json_name = "subaccountId"];
  if (!this->_internal_subaccount_id().empty()) {
    const std::string& _s = this->_internal_subaccount_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.BatchCancelSpotOrdersAuthz.subaccount_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // repeated string market_ids = 2 [json_name = "marketIds"];
  for (int i = 0, n = this->_internal_market_ids_size(); i < n; ++i) {
    const auto& s = this->_internal_market_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.BatchCancelSpotOrdersAuthz.market_ids");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.BatchCancelSpotOrdersAuthz)
  return target;
}

::size_t BatchCancelSpotOrdersAuthz::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.BatchCancelSpotOrdersAuthz)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string market_ids = 2 [json_name = "marketIds"];
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_market_ids().size());
  for (int i = 0, n = _internal_market_ids().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_market_ids().Get(i));
  }

  // string subaccount_id = 1 [json_name = "subaccountId"];
  if (!this->_internal_subaccount_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_subaccount_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BatchCancelSpotOrdersAuthz::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BatchCancelSpotOrdersAuthz::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BatchCancelSpotOrdersAuthz::GetClassData() const { return &_class_data_; }


void BatchCancelSpotOrdersAuthz::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BatchCancelSpotOrdersAuthz*>(&to_msg);
  auto& from = static_cast<const BatchCancelSpotOrdersAuthz&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.BatchCancelSpotOrdersAuthz)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_market_ids()->MergeFrom(from._internal_market_ids());
  if (!from._internal_subaccount_id().empty()) {
    _this->_internal_set_subaccount_id(from._internal_subaccount_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BatchCancelSpotOrdersAuthz::CopyFrom(const BatchCancelSpotOrdersAuthz& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.BatchCancelSpotOrdersAuthz)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchCancelSpotOrdersAuthz::IsInitialized() const {
  return true;
}

void BatchCancelSpotOrdersAuthz::InternalSwap(BatchCancelSpotOrdersAuthz* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_market_ids()->InternalSwap(
      other->_internal_mutable_market_ids());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.subaccount_id_, lhs_arena,
                                       &other->_impl_.subaccount_id_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata BatchCancelSpotOrdersAuthz::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2fauthz_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2fauthz_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2fauthz_2eproto[4]);
}
// ===================================================================

class CreateDerivativeLimitOrderAuthz::_Internal {
 public:
};

CreateDerivativeLimitOrderAuthz::CreateDerivativeLimitOrderAuthz(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.CreateDerivativeLimitOrderAuthz)
}
CreateDerivativeLimitOrderAuthz::CreateDerivativeLimitOrderAuthz(const CreateDerivativeLimitOrderAuthz& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CreateDerivativeLimitOrderAuthz* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.market_ids_){from._impl_.market_ids_}
    , decltype(_impl_.subaccount_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.subaccount_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.subaccount_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_subaccount_id().empty()) {
    _this->_impl_.subaccount_id_.Set(from._internal_subaccount_id(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.CreateDerivativeLimitOrderAuthz)
}

inline void CreateDerivativeLimitOrderAuthz::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.market_ids_){arena}
    , decltype(_impl_.subaccount_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.subaccount_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.subaccount_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CreateDerivativeLimitOrderAuthz::~CreateDerivativeLimitOrderAuthz() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.CreateDerivativeLimitOrderAuthz)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CreateDerivativeLimitOrderAuthz::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_market_ids()->~RepeatedPtrField();
  _impl_.subaccount_id_.Destroy();
}

void CreateDerivativeLimitOrderAuthz::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CreateDerivativeLimitOrderAuthz::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.CreateDerivativeLimitOrderAuthz)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_market_ids()->Clear();
  _impl_.subaccount_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateDerivativeLimitOrderAuthz::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string subaccount_id = 1 [json_name = "subaccountId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_subaccount_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.CreateDerivativeLimitOrderAuthz.subaccount_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string market_ids = 2 [json_name = "marketIds"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_market_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.CreateDerivativeLimitOrderAuthz.market_ids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* CreateDerivativeLimitOrderAuthz::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.CreateDerivativeLimitOrderAuthz)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string subaccount_id = 1 [json_name = "subaccountId"];
  if (!this->_internal_subaccount_id().empty()) {
    const std::string& _s = this->_internal_subaccount_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.CreateDerivativeLimitOrderAuthz.subaccount_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // repeated string market_ids = 2 [json_name = "marketIds"];
  for (int i = 0, n = this->_internal_market_ids_size(); i < n; ++i) {
    const auto& s = this->_internal_market_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.CreateDerivativeLimitOrderAuthz.market_ids");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.CreateDerivativeLimitOrderAuthz)
  return target;
}

::size_t CreateDerivativeLimitOrderAuthz::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.CreateDerivativeLimitOrderAuthz)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string market_ids = 2 [json_name = "marketIds"];
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_market_ids().size());
  for (int i = 0, n = _internal_market_ids().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_market_ids().Get(i));
  }

  // string subaccount_id = 1 [json_name = "subaccountId"];
  if (!this->_internal_subaccount_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_subaccount_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateDerivativeLimitOrderAuthz::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CreateDerivativeLimitOrderAuthz::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateDerivativeLimitOrderAuthz::GetClassData() const { return &_class_data_; }


void CreateDerivativeLimitOrderAuthz::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CreateDerivativeLimitOrderAuthz*>(&to_msg);
  auto& from = static_cast<const CreateDerivativeLimitOrderAuthz&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.CreateDerivativeLimitOrderAuthz)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_market_ids()->MergeFrom(from._internal_market_ids());
  if (!from._internal_subaccount_id().empty()) {
    _this->_internal_set_subaccount_id(from._internal_subaccount_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateDerivativeLimitOrderAuthz::CopyFrom(const CreateDerivativeLimitOrderAuthz& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.CreateDerivativeLimitOrderAuthz)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateDerivativeLimitOrderAuthz::IsInitialized() const {
  return true;
}

void CreateDerivativeLimitOrderAuthz::InternalSwap(CreateDerivativeLimitOrderAuthz* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_market_ids()->InternalSwap(
      other->_internal_mutable_market_ids());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.subaccount_id_, lhs_arena,
                                       &other->_impl_.subaccount_id_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateDerivativeLimitOrderAuthz::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2fauthz_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2fauthz_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2fauthz_2eproto[5]);
}
// ===================================================================

class CreateDerivativeMarketOrderAuthz::_Internal {
 public:
};

CreateDerivativeMarketOrderAuthz::CreateDerivativeMarketOrderAuthz(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.CreateDerivativeMarketOrderAuthz)
}
CreateDerivativeMarketOrderAuthz::CreateDerivativeMarketOrderAuthz(const CreateDerivativeMarketOrderAuthz& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CreateDerivativeMarketOrderAuthz* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.market_ids_){from._impl_.market_ids_}
    , decltype(_impl_.subaccount_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.subaccount_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.subaccount_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_subaccount_id().empty()) {
    _this->_impl_.subaccount_id_.Set(from._internal_subaccount_id(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.CreateDerivativeMarketOrderAuthz)
}

inline void CreateDerivativeMarketOrderAuthz::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.market_ids_){arena}
    , decltype(_impl_.subaccount_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.subaccount_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.subaccount_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CreateDerivativeMarketOrderAuthz::~CreateDerivativeMarketOrderAuthz() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.CreateDerivativeMarketOrderAuthz)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CreateDerivativeMarketOrderAuthz::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_market_ids()->~RepeatedPtrField();
  _impl_.subaccount_id_.Destroy();
}

void CreateDerivativeMarketOrderAuthz::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CreateDerivativeMarketOrderAuthz::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.CreateDerivativeMarketOrderAuthz)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_market_ids()->Clear();
  _impl_.subaccount_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateDerivativeMarketOrderAuthz::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string subaccount_id = 1 [json_name = "subaccountId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_subaccount_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.CreateDerivativeMarketOrderAuthz.subaccount_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string market_ids = 2 [json_name = "marketIds"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_market_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.CreateDerivativeMarketOrderAuthz.market_ids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* CreateDerivativeMarketOrderAuthz::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.CreateDerivativeMarketOrderAuthz)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string subaccount_id = 1 [json_name = "subaccountId"];
  if (!this->_internal_subaccount_id().empty()) {
    const std::string& _s = this->_internal_subaccount_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.CreateDerivativeMarketOrderAuthz.subaccount_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // repeated string market_ids = 2 [json_name = "marketIds"];
  for (int i = 0, n = this->_internal_market_ids_size(); i < n; ++i) {
    const auto& s = this->_internal_market_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.CreateDerivativeMarketOrderAuthz.market_ids");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.CreateDerivativeMarketOrderAuthz)
  return target;
}

::size_t CreateDerivativeMarketOrderAuthz::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.CreateDerivativeMarketOrderAuthz)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string market_ids = 2 [json_name = "marketIds"];
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_market_ids().size());
  for (int i = 0, n = _internal_market_ids().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_market_ids().Get(i));
  }

  // string subaccount_id = 1 [json_name = "subaccountId"];
  if (!this->_internal_subaccount_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_subaccount_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateDerivativeMarketOrderAuthz::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CreateDerivativeMarketOrderAuthz::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateDerivativeMarketOrderAuthz::GetClassData() const { return &_class_data_; }


void CreateDerivativeMarketOrderAuthz::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CreateDerivativeMarketOrderAuthz*>(&to_msg);
  auto& from = static_cast<const CreateDerivativeMarketOrderAuthz&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.CreateDerivativeMarketOrderAuthz)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_market_ids()->MergeFrom(from._internal_market_ids());
  if (!from._internal_subaccount_id().empty()) {
    _this->_internal_set_subaccount_id(from._internal_subaccount_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateDerivativeMarketOrderAuthz::CopyFrom(const CreateDerivativeMarketOrderAuthz& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.CreateDerivativeMarketOrderAuthz)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateDerivativeMarketOrderAuthz::IsInitialized() const {
  return true;
}

void CreateDerivativeMarketOrderAuthz::InternalSwap(CreateDerivativeMarketOrderAuthz* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_market_ids()->InternalSwap(
      other->_internal_mutable_market_ids());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.subaccount_id_, lhs_arena,
                                       &other->_impl_.subaccount_id_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateDerivativeMarketOrderAuthz::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2fauthz_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2fauthz_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2fauthz_2eproto[6]);
}
// ===================================================================

class BatchCreateDerivativeLimitOrdersAuthz::_Internal {
 public:
};

BatchCreateDerivativeLimitOrdersAuthz::BatchCreateDerivativeLimitOrdersAuthz(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.BatchCreateDerivativeLimitOrdersAuthz)
}
BatchCreateDerivativeLimitOrdersAuthz::BatchCreateDerivativeLimitOrdersAuthz(const BatchCreateDerivativeLimitOrdersAuthz& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BatchCreateDerivativeLimitOrdersAuthz* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.market_ids_){from._impl_.market_ids_}
    , decltype(_impl_.subaccount_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.subaccount_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.subaccount_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_subaccount_id().empty()) {
    _this->_impl_.subaccount_id_.Set(from._internal_subaccount_id(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.BatchCreateDerivativeLimitOrdersAuthz)
}

inline void BatchCreateDerivativeLimitOrdersAuthz::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.market_ids_){arena}
    , decltype(_impl_.subaccount_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.subaccount_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.subaccount_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BatchCreateDerivativeLimitOrdersAuthz::~BatchCreateDerivativeLimitOrdersAuthz() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.BatchCreateDerivativeLimitOrdersAuthz)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BatchCreateDerivativeLimitOrdersAuthz::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_market_ids()->~RepeatedPtrField();
  _impl_.subaccount_id_.Destroy();
}

void BatchCreateDerivativeLimitOrdersAuthz::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BatchCreateDerivativeLimitOrdersAuthz::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.BatchCreateDerivativeLimitOrdersAuthz)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_market_ids()->Clear();
  _impl_.subaccount_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BatchCreateDerivativeLimitOrdersAuthz::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string subaccount_id = 1 [json_name = "subaccountId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_subaccount_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.BatchCreateDerivativeLimitOrdersAuthz.subaccount_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string market_ids = 2 [json_name = "marketIds"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_market_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.BatchCreateDerivativeLimitOrdersAuthz.market_ids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* BatchCreateDerivativeLimitOrdersAuthz::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.BatchCreateDerivativeLimitOrdersAuthz)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string subaccount_id = 1 [json_name = "subaccountId"];
  if (!this->_internal_subaccount_id().empty()) {
    const std::string& _s = this->_internal_subaccount_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.BatchCreateDerivativeLimitOrdersAuthz.subaccount_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // repeated string market_ids = 2 [json_name = "marketIds"];
  for (int i = 0, n = this->_internal_market_ids_size(); i < n; ++i) {
    const auto& s = this->_internal_market_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.BatchCreateDerivativeLimitOrdersAuthz.market_ids");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.BatchCreateDerivativeLimitOrdersAuthz)
  return target;
}

::size_t BatchCreateDerivativeLimitOrdersAuthz::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.BatchCreateDerivativeLimitOrdersAuthz)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string market_ids = 2 [json_name = "marketIds"];
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_market_ids().size());
  for (int i = 0, n = _internal_market_ids().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_market_ids().Get(i));
  }

  // string subaccount_id = 1 [json_name = "subaccountId"];
  if (!this->_internal_subaccount_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_subaccount_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BatchCreateDerivativeLimitOrdersAuthz::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BatchCreateDerivativeLimitOrdersAuthz::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BatchCreateDerivativeLimitOrdersAuthz::GetClassData() const { return &_class_data_; }


void BatchCreateDerivativeLimitOrdersAuthz::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BatchCreateDerivativeLimitOrdersAuthz*>(&to_msg);
  auto& from = static_cast<const BatchCreateDerivativeLimitOrdersAuthz&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.BatchCreateDerivativeLimitOrdersAuthz)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_market_ids()->MergeFrom(from._internal_market_ids());
  if (!from._internal_subaccount_id().empty()) {
    _this->_internal_set_subaccount_id(from._internal_subaccount_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BatchCreateDerivativeLimitOrdersAuthz::CopyFrom(const BatchCreateDerivativeLimitOrdersAuthz& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.BatchCreateDerivativeLimitOrdersAuthz)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchCreateDerivativeLimitOrdersAuthz::IsInitialized() const {
  return true;
}

void BatchCreateDerivativeLimitOrdersAuthz::InternalSwap(BatchCreateDerivativeLimitOrdersAuthz* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_market_ids()->InternalSwap(
      other->_internal_mutable_market_ids());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.subaccount_id_, lhs_arena,
                                       &other->_impl_.subaccount_id_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata BatchCreateDerivativeLimitOrdersAuthz::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2fauthz_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2fauthz_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2fauthz_2eproto[7]);
}
// ===================================================================

class CancelDerivativeOrderAuthz::_Internal {
 public:
};

CancelDerivativeOrderAuthz::CancelDerivativeOrderAuthz(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.CancelDerivativeOrderAuthz)
}
CancelDerivativeOrderAuthz::CancelDerivativeOrderAuthz(const CancelDerivativeOrderAuthz& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CancelDerivativeOrderAuthz* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.market_ids_){from._impl_.market_ids_}
    , decltype(_impl_.subaccount_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.subaccount_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.subaccount_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_subaccount_id().empty()) {
    _this->_impl_.subaccount_id_.Set(from._internal_subaccount_id(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.CancelDerivativeOrderAuthz)
}

inline void CancelDerivativeOrderAuthz::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.market_ids_){arena}
    , decltype(_impl_.subaccount_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.subaccount_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.subaccount_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CancelDerivativeOrderAuthz::~CancelDerivativeOrderAuthz() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.CancelDerivativeOrderAuthz)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CancelDerivativeOrderAuthz::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_market_ids()->~RepeatedPtrField();
  _impl_.subaccount_id_.Destroy();
}

void CancelDerivativeOrderAuthz::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CancelDerivativeOrderAuthz::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.CancelDerivativeOrderAuthz)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_market_ids()->Clear();
  _impl_.subaccount_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CancelDerivativeOrderAuthz::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string subaccount_id = 1 [json_name = "subaccountId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_subaccount_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.CancelDerivativeOrderAuthz.subaccount_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string market_ids = 2 [json_name = "marketIds"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_market_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.CancelDerivativeOrderAuthz.market_ids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* CancelDerivativeOrderAuthz::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.CancelDerivativeOrderAuthz)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string subaccount_id = 1 [json_name = "subaccountId"];
  if (!this->_internal_subaccount_id().empty()) {
    const std::string& _s = this->_internal_subaccount_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.CancelDerivativeOrderAuthz.subaccount_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // repeated string market_ids = 2 [json_name = "marketIds"];
  for (int i = 0, n = this->_internal_market_ids_size(); i < n; ++i) {
    const auto& s = this->_internal_market_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.CancelDerivativeOrderAuthz.market_ids");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.CancelDerivativeOrderAuthz)
  return target;
}

::size_t CancelDerivativeOrderAuthz::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.CancelDerivativeOrderAuthz)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string market_ids = 2 [json_name = "marketIds"];
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_market_ids().size());
  for (int i = 0, n = _internal_market_ids().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_market_ids().Get(i));
  }

  // string subaccount_id = 1 [json_name = "subaccountId"];
  if (!this->_internal_subaccount_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_subaccount_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CancelDerivativeOrderAuthz::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CancelDerivativeOrderAuthz::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CancelDerivativeOrderAuthz::GetClassData() const { return &_class_data_; }


void CancelDerivativeOrderAuthz::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CancelDerivativeOrderAuthz*>(&to_msg);
  auto& from = static_cast<const CancelDerivativeOrderAuthz&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.CancelDerivativeOrderAuthz)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_market_ids()->MergeFrom(from._internal_market_ids());
  if (!from._internal_subaccount_id().empty()) {
    _this->_internal_set_subaccount_id(from._internal_subaccount_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CancelDerivativeOrderAuthz::CopyFrom(const CancelDerivativeOrderAuthz& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.CancelDerivativeOrderAuthz)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CancelDerivativeOrderAuthz::IsInitialized() const {
  return true;
}

void CancelDerivativeOrderAuthz::InternalSwap(CancelDerivativeOrderAuthz* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_market_ids()->InternalSwap(
      other->_internal_mutable_market_ids());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.subaccount_id_, lhs_arena,
                                       &other->_impl_.subaccount_id_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata CancelDerivativeOrderAuthz::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2fauthz_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2fauthz_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2fauthz_2eproto[8]);
}
// ===================================================================

class BatchCancelDerivativeOrdersAuthz::_Internal {
 public:
};

BatchCancelDerivativeOrdersAuthz::BatchCancelDerivativeOrdersAuthz(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.BatchCancelDerivativeOrdersAuthz)
}
BatchCancelDerivativeOrdersAuthz::BatchCancelDerivativeOrdersAuthz(const BatchCancelDerivativeOrdersAuthz& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BatchCancelDerivativeOrdersAuthz* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.market_ids_){from._impl_.market_ids_}
    , decltype(_impl_.subaccount_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.subaccount_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.subaccount_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_subaccount_id().empty()) {
    _this->_impl_.subaccount_id_.Set(from._internal_subaccount_id(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.BatchCancelDerivativeOrdersAuthz)
}

inline void BatchCancelDerivativeOrdersAuthz::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.market_ids_){arena}
    , decltype(_impl_.subaccount_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.subaccount_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.subaccount_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BatchCancelDerivativeOrdersAuthz::~BatchCancelDerivativeOrdersAuthz() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.BatchCancelDerivativeOrdersAuthz)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BatchCancelDerivativeOrdersAuthz::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_market_ids()->~RepeatedPtrField();
  _impl_.subaccount_id_.Destroy();
}

void BatchCancelDerivativeOrdersAuthz::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BatchCancelDerivativeOrdersAuthz::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.BatchCancelDerivativeOrdersAuthz)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_market_ids()->Clear();
  _impl_.subaccount_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BatchCancelDerivativeOrdersAuthz::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string subaccount_id = 1 [json_name = "subaccountId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_subaccount_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.BatchCancelDerivativeOrdersAuthz.subaccount_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string market_ids = 2 [json_name = "marketIds"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_market_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.BatchCancelDerivativeOrdersAuthz.market_ids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* BatchCancelDerivativeOrdersAuthz::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.BatchCancelDerivativeOrdersAuthz)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string subaccount_id = 1 [json_name = "subaccountId"];
  if (!this->_internal_subaccount_id().empty()) {
    const std::string& _s = this->_internal_subaccount_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.BatchCancelDerivativeOrdersAuthz.subaccount_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // repeated string market_ids = 2 [json_name = "marketIds"];
  for (int i = 0, n = this->_internal_market_ids_size(); i < n; ++i) {
    const auto& s = this->_internal_market_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.BatchCancelDerivativeOrdersAuthz.market_ids");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.BatchCancelDerivativeOrdersAuthz)
  return target;
}

::size_t BatchCancelDerivativeOrdersAuthz::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.BatchCancelDerivativeOrdersAuthz)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string market_ids = 2 [json_name = "marketIds"];
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_market_ids().size());
  for (int i = 0, n = _internal_market_ids().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_market_ids().Get(i));
  }

  // string subaccount_id = 1 [json_name = "subaccountId"];
  if (!this->_internal_subaccount_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_subaccount_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BatchCancelDerivativeOrdersAuthz::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BatchCancelDerivativeOrdersAuthz::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BatchCancelDerivativeOrdersAuthz::GetClassData() const { return &_class_data_; }


void BatchCancelDerivativeOrdersAuthz::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BatchCancelDerivativeOrdersAuthz*>(&to_msg);
  auto& from = static_cast<const BatchCancelDerivativeOrdersAuthz&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.BatchCancelDerivativeOrdersAuthz)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_market_ids()->MergeFrom(from._internal_market_ids());
  if (!from._internal_subaccount_id().empty()) {
    _this->_internal_set_subaccount_id(from._internal_subaccount_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BatchCancelDerivativeOrdersAuthz::CopyFrom(const BatchCancelDerivativeOrdersAuthz& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.BatchCancelDerivativeOrdersAuthz)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchCancelDerivativeOrdersAuthz::IsInitialized() const {
  return true;
}

void BatchCancelDerivativeOrdersAuthz::InternalSwap(BatchCancelDerivativeOrdersAuthz* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_market_ids()->InternalSwap(
      other->_internal_mutable_market_ids());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.subaccount_id_, lhs_arena,
                                       &other->_impl_.subaccount_id_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata BatchCancelDerivativeOrdersAuthz::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2fauthz_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2fauthz_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2fauthz_2eproto[9]);
}
// ===================================================================

class BatchUpdateOrdersAuthz::_Internal {
 public:
};

BatchUpdateOrdersAuthz::BatchUpdateOrdersAuthz(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.BatchUpdateOrdersAuthz)
}
BatchUpdateOrdersAuthz::BatchUpdateOrdersAuthz(const BatchUpdateOrdersAuthz& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BatchUpdateOrdersAuthz* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.spot_markets_){from._impl_.spot_markets_}
    , decltype(_impl_.derivative_markets_){from._impl_.derivative_markets_}
    , decltype(_impl_.subaccount_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.subaccount_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.subaccount_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_subaccount_id().empty()) {
    _this->_impl_.subaccount_id_.Set(from._internal_subaccount_id(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.BatchUpdateOrdersAuthz)
}

inline void BatchUpdateOrdersAuthz::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.spot_markets_){arena}
    , decltype(_impl_.derivative_markets_){arena}
    , decltype(_impl_.subaccount_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.subaccount_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.subaccount_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BatchUpdateOrdersAuthz::~BatchUpdateOrdersAuthz() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.BatchUpdateOrdersAuthz)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BatchUpdateOrdersAuthz::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_spot_markets()->~RepeatedPtrField();
  _internal_mutable_derivative_markets()->~RepeatedPtrField();
  _impl_.subaccount_id_.Destroy();
}

void BatchUpdateOrdersAuthz::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BatchUpdateOrdersAuthz::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.BatchUpdateOrdersAuthz)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_spot_markets()->Clear();
  _internal_mutable_derivative_markets()->Clear();
  _impl_.subaccount_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BatchUpdateOrdersAuthz::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string subaccount_id = 1 [json_name = "subaccountId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_subaccount_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.BatchUpdateOrdersAuthz.subaccount_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string spot_markets = 2 [json_name = "spotMarkets"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_spot_markets();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.BatchUpdateOrdersAuthz.spot_markets"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string derivative_markets = 3 [json_name = "derivativeMarkets"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_derivative_markets();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.BatchUpdateOrdersAuthz.derivative_markets"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* BatchUpdateOrdersAuthz::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.BatchUpdateOrdersAuthz)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string subaccount_id = 1 [json_name = "subaccountId"];
  if (!this->_internal_subaccount_id().empty()) {
    const std::string& _s = this->_internal_subaccount_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.BatchUpdateOrdersAuthz.subaccount_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // repeated string spot_markets = 2 [json_name = "spotMarkets"];
  for (int i = 0, n = this->_internal_spot_markets_size(); i < n; ++i) {
    const auto& s = this->_internal_spot_markets(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.BatchUpdateOrdersAuthz.spot_markets");
    target = stream->WriteString(2, s, target);
  }

  // repeated string derivative_markets = 3 [json_name = "derivativeMarkets"];
  for (int i = 0, n = this->_internal_derivative_markets_size(); i < n; ++i) {
    const auto& s = this->_internal_derivative_markets(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.BatchUpdateOrdersAuthz.derivative_markets");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.BatchUpdateOrdersAuthz)
  return target;
}

::size_t BatchUpdateOrdersAuthz::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.BatchUpdateOrdersAuthz)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string spot_markets = 2 [json_name = "spotMarkets"];
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_spot_markets().size());
  for (int i = 0, n = _internal_spot_markets().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_spot_markets().Get(i));
  }

  // repeated string derivative_markets = 3 [json_name = "derivativeMarkets"];
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_derivative_markets().size());
  for (int i = 0, n = _internal_derivative_markets().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_derivative_markets().Get(i));
  }

  // string subaccount_id = 1 [json_name = "subaccountId"];
  if (!this->_internal_subaccount_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_subaccount_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BatchUpdateOrdersAuthz::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BatchUpdateOrdersAuthz::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BatchUpdateOrdersAuthz::GetClassData() const { return &_class_data_; }


void BatchUpdateOrdersAuthz::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BatchUpdateOrdersAuthz*>(&to_msg);
  auto& from = static_cast<const BatchUpdateOrdersAuthz&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.BatchUpdateOrdersAuthz)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_spot_markets()->MergeFrom(from._internal_spot_markets());
  _this->_internal_mutable_derivative_markets()->MergeFrom(from._internal_derivative_markets());
  if (!from._internal_subaccount_id().empty()) {
    _this->_internal_set_subaccount_id(from._internal_subaccount_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BatchUpdateOrdersAuthz::CopyFrom(const BatchUpdateOrdersAuthz& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.BatchUpdateOrdersAuthz)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchUpdateOrdersAuthz::IsInitialized() const {
  return true;
}

void BatchUpdateOrdersAuthz::InternalSwap(BatchUpdateOrdersAuthz* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_spot_markets()->InternalSwap(
      other->_internal_mutable_spot_markets());
  _internal_mutable_derivative_markets()->InternalSwap(
      other->_internal_mutable_derivative_markets());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.subaccount_id_, lhs_arena,
                                       &other->_impl_.subaccount_id_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata BatchUpdateOrdersAuthz::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2fauthz_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2fauthz_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2fauthz_2eproto[10]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1beta1
}  // namespace exchange
}  // namespace injective
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::CreateSpotLimitOrderAuthz*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::CreateSpotLimitOrderAuthz >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::CreateSpotLimitOrderAuthz >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::CreateSpotMarketOrderAuthz*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::CreateSpotMarketOrderAuthz >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::CreateSpotMarketOrderAuthz >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::BatchCreateSpotLimitOrdersAuthz*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::BatchCreateSpotLimitOrdersAuthz >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::BatchCreateSpotLimitOrdersAuthz >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::CancelSpotOrderAuthz*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::CancelSpotOrderAuthz >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::CancelSpotOrderAuthz >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::BatchCancelSpotOrdersAuthz*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::BatchCancelSpotOrdersAuthz >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::BatchCancelSpotOrdersAuthz >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::CreateDerivativeLimitOrderAuthz*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::CreateDerivativeLimitOrderAuthz >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::CreateDerivativeLimitOrderAuthz >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::CreateDerivativeMarketOrderAuthz*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::CreateDerivativeMarketOrderAuthz >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::CreateDerivativeMarketOrderAuthz >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::BatchCreateDerivativeLimitOrdersAuthz*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::BatchCreateDerivativeLimitOrdersAuthz >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::BatchCreateDerivativeLimitOrdersAuthz >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::CancelDerivativeOrderAuthz*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::CancelDerivativeOrderAuthz >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::CancelDerivativeOrderAuthz >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::BatchCancelDerivativeOrdersAuthz*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::BatchCancelDerivativeOrdersAuthz >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::BatchCancelDerivativeOrdersAuthz >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::BatchUpdateOrdersAuthz*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::BatchUpdateOrdersAuthz >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::BatchUpdateOrdersAuthz >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: injective/exchange/v1beta1/query.proto

#include "injective/exchange/v1beta1/query.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace injective {
namespace exchange {
namespace v1beta1 {
template <typename>
PROTOBUF_CONSTEXPR Subaccount::Subaccount(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.trader_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.subaccount_nonce_)*/ 0u

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SubaccountDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubaccountDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubaccountDefaultTypeInternal() {}
  union {
    Subaccount _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubaccountDefaultTypeInternal _Subaccount_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QuerySubaccountOrdersRequest::QuerySubaccountOrdersRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.subaccount_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.market_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QuerySubaccountOrdersRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QuerySubaccountOrdersRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QuerySubaccountOrdersRequestDefaultTypeInternal() {}
  union {
    QuerySubaccountOrdersRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QuerySubaccountOrdersRequestDefaultTypeInternal _QuerySubaccountOrdersRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QuerySubaccountOrdersResponse::QuerySubaccountOrdersResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.buy_orders_)*/{}
  , /*decltype(_impl_.sell_orders_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QuerySubaccountOrdersResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QuerySubaccountOrdersResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QuerySubaccountOrdersResponseDefaultTypeInternal() {}
  union {
    QuerySubaccountOrdersResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QuerySubaccountOrdersResponseDefaultTypeInternal _QuerySubaccountOrdersResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR SubaccountOrderbookMetadataWithMarket::SubaccountOrderbookMetadataWithMarket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.market_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.metadata_)*/nullptr
  , /*decltype(_impl_.isbuy_)*/ false
} {}
struct SubaccountOrderbookMetadataWithMarketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubaccountOrderbookMetadataWithMarketDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubaccountOrderbookMetadataWithMarketDefaultTypeInternal() {}
  union {
    SubaccountOrderbookMetadataWithMarket _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubaccountOrderbookMetadataWithMarketDefaultTypeInternal _SubaccountOrderbookMetadataWithMarket_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryExchangeParamsRequest::QueryExchangeParamsRequest(
    ::_pbi::ConstantInitialized) {}
struct QueryExchangeParamsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryExchangeParamsRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryExchangeParamsRequestDefaultTypeInternal() {}
  union {
    QueryExchangeParamsRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryExchangeParamsRequestDefaultTypeInternal _QueryExchangeParamsRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryExchangeParamsResponse::QueryExchangeParamsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.params_)*/nullptr} {}
struct QueryExchangeParamsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryExchangeParamsResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryExchangeParamsResponseDefaultTypeInternal() {}
  union {
    QueryExchangeParamsResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryExchangeParamsResponseDefaultTypeInternal _QueryExchangeParamsResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QuerySubaccountDepositsRequest::QuerySubaccountDepositsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.subaccount_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.subaccount_)*/nullptr} {}
struct QuerySubaccountDepositsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QuerySubaccountDepositsRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QuerySubaccountDepositsRequestDefaultTypeInternal() {}
  union {
    QuerySubaccountDepositsRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QuerySubaccountDepositsRequestDefaultTypeInternal _QuerySubaccountDepositsRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QuerySubaccountDepositsResponse_DepositsEntry_DoNotUse::QuerySubaccountDepositsResponse_DepositsEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct QuerySubaccountDepositsResponse_DepositsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QuerySubaccountDepositsResponse_DepositsEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QuerySubaccountDepositsResponse_DepositsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    QuerySubaccountDepositsResponse_DepositsEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QuerySubaccountDepositsResponse_DepositsEntry_DoNotUseDefaultTypeInternal _QuerySubaccountDepositsResponse_DepositsEntry_DoNotUse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QuerySubaccountDepositsResponse::QuerySubaccountDepositsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.deposits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QuerySubaccountDepositsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QuerySubaccountDepositsResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QuerySubaccountDepositsResponseDefaultTypeInternal() {}
  union {
    QuerySubaccountDepositsResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QuerySubaccountDepositsResponseDefaultTypeInternal _QuerySubaccountDepositsResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryExchangeBalancesRequest::QueryExchangeBalancesRequest(
    ::_pbi::ConstantInitialized) {}
struct QueryExchangeBalancesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryExchangeBalancesRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryExchangeBalancesRequestDefaultTypeInternal() {}
  union {
    QueryExchangeBalancesRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryExchangeBalancesRequestDefaultTypeInternal _QueryExchangeBalancesRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryExchangeBalancesResponse::QueryExchangeBalancesResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.balances_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QueryExchangeBalancesResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryExchangeBalancesResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryExchangeBalancesResponseDefaultTypeInternal() {}
  union {
    QueryExchangeBalancesResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryExchangeBalancesResponseDefaultTypeInternal _QueryExchangeBalancesResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryAggregateVolumeRequest::QueryAggregateVolumeRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.account_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QueryAggregateVolumeRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryAggregateVolumeRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryAggregateVolumeRequestDefaultTypeInternal() {}
  union {
    QueryAggregateVolumeRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryAggregateVolumeRequestDefaultTypeInternal _QueryAggregateVolumeRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryAggregateVolumeResponse::QueryAggregateVolumeResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.aggregate_volumes_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QueryAggregateVolumeResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryAggregateVolumeResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryAggregateVolumeResponseDefaultTypeInternal() {}
  union {
    QueryAggregateVolumeResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryAggregateVolumeResponseDefaultTypeInternal _QueryAggregateVolumeResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryAggregateVolumesRequest::QueryAggregateVolumesRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.accounts_)*/{}
  , /*decltype(_impl_.market_ids_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QueryAggregateVolumesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryAggregateVolumesRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryAggregateVolumesRequestDefaultTypeInternal() {}
  union {
    QueryAggregateVolumesRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryAggregateVolumesRequestDefaultTypeInternal _QueryAggregateVolumesRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryAggregateVolumesResponse::QueryAggregateVolumesResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.aggregate_account_volumes_)*/{}
  , /*decltype(_impl_.aggregate_market_volumes_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QueryAggregateVolumesResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryAggregateVolumesResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryAggregateVolumesResponseDefaultTypeInternal() {}
  union {
    QueryAggregateVolumesResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryAggregateVolumesResponseDefaultTypeInternal _QueryAggregateVolumesResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryAggregateMarketVolumeRequest::QueryAggregateMarketVolumeRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.market_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QueryAggregateMarketVolumeRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryAggregateMarketVolumeRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryAggregateMarketVolumeRequestDefaultTypeInternal() {}
  union {
    QueryAggregateMarketVolumeRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryAggregateMarketVolumeRequestDefaultTypeInternal _QueryAggregateMarketVolumeRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryAggregateMarketVolumeResponse::QueryAggregateMarketVolumeResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.volume_)*/nullptr} {}
struct QueryAggregateMarketVolumeResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryAggregateMarketVolumeResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryAggregateMarketVolumeResponseDefaultTypeInternal() {}
  union {
    QueryAggregateMarketVolumeResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryAggregateMarketVolumeResponseDefaultTypeInternal _QueryAggregateMarketVolumeResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryDenomDecimalRequest::QueryDenomDecimalRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.denom_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QueryDenomDecimalRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryDenomDecimalRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryDenomDecimalRequestDefaultTypeInternal() {}
  union {
    QueryDenomDecimalRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryDenomDecimalRequestDefaultTypeInternal _QueryDenomDecimalRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryDenomDecimalResponse::QueryDenomDecimalResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.decimal_)*/ ::uint64_t{0u}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QueryDenomDecimalResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryDenomDecimalResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryDenomDecimalResponseDefaultTypeInternal() {}
  union {
    QueryDenomDecimalResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryDenomDecimalResponseDefaultTypeInternal _QueryDenomDecimalResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryDenomDecimalsRequest::QueryDenomDecimalsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.denoms_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QueryDenomDecimalsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryDenomDecimalsRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryDenomDecimalsRequestDefaultTypeInternal() {}
  union {
    QueryDenomDecimalsRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryDenomDecimalsRequestDefaultTypeInternal _QueryDenomDecimalsRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryDenomDecimalsResponse::QueryDenomDecimalsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.denom_decimals_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QueryDenomDecimalsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryDenomDecimalsResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryDenomDecimalsResponseDefaultTypeInternal() {}
  union {
    QueryDenomDecimalsResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryDenomDecimalsResponseDefaultTypeInternal _QueryDenomDecimalsResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryAggregateMarketVolumesRequest::QueryAggregateMarketVolumesRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.market_ids_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QueryAggregateMarketVolumesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryAggregateMarketVolumesRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryAggregateMarketVolumesRequestDefaultTypeInternal() {}
  union {
    QueryAggregateMarketVolumesRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryAggregateMarketVolumesRequestDefaultTypeInternal _QueryAggregateMarketVolumesRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryAggregateMarketVolumesResponse::QueryAggregateMarketVolumesResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.volumes_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QueryAggregateMarketVolumesResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryAggregateMarketVolumesResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryAggregateMarketVolumesResponseDefaultTypeInternal() {}
  union {
    QueryAggregateMarketVolumesResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryAggregateMarketVolumesResponseDefaultTypeInternal _QueryAggregateMarketVolumesResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QuerySubaccountDepositRequest::QuerySubaccountDepositRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.subaccount_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.denom_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QuerySubaccountDepositRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QuerySubaccountDepositRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QuerySubaccountDepositRequestDefaultTypeInternal() {}
  union {
    QuerySubaccountDepositRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QuerySubaccountDepositRequestDefaultTypeInternal _QuerySubaccountDepositRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QuerySubaccountDepositResponse::QuerySubaccountDepositResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.deposits_)*/nullptr} {}
struct QuerySubaccountDepositResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QuerySubaccountDepositResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QuerySubaccountDepositResponseDefaultTypeInternal() {}
  union {
    QuerySubaccountDepositResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QuerySubaccountDepositResponseDefaultTypeInternal _QuerySubaccountDepositResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QuerySpotMarketsRequest::QuerySpotMarketsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.market_ids_)*/{}
  , /*decltype(_impl_.status_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QuerySpotMarketsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QuerySpotMarketsRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QuerySpotMarketsRequestDefaultTypeInternal() {}
  union {
    QuerySpotMarketsRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QuerySpotMarketsRequestDefaultTypeInternal _QuerySpotMarketsRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QuerySpotMarketsResponse::QuerySpotMarketsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.markets_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QuerySpotMarketsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QuerySpotMarketsResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QuerySpotMarketsResponseDefaultTypeInternal() {}
  union {
    QuerySpotMarketsResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QuerySpotMarketsResponseDefaultTypeInternal _QuerySpotMarketsResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QuerySpotMarketRequest::QuerySpotMarketRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.market_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QuerySpotMarketRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QuerySpotMarketRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QuerySpotMarketRequestDefaultTypeInternal() {}
  union {
    QuerySpotMarketRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QuerySpotMarketRequestDefaultTypeInternal _QuerySpotMarketRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QuerySpotMarketResponse::QuerySpotMarketResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.market_)*/nullptr} {}
struct QuerySpotMarketResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QuerySpotMarketResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QuerySpotMarketResponseDefaultTypeInternal() {}
  union {
    QuerySpotMarketResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QuerySpotMarketResponseDefaultTypeInternal _QuerySpotMarketResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QuerySpotOrderbookRequest::QuerySpotOrderbookRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.market_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.limit_cumulative_notional_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.limit_cumulative_quantity_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.limit_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.order_side_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QuerySpotOrderbookRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QuerySpotOrderbookRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QuerySpotOrderbookRequestDefaultTypeInternal() {}
  union {
    QuerySpotOrderbookRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QuerySpotOrderbookRequestDefaultTypeInternal _QuerySpotOrderbookRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QuerySpotOrderbookResponse::QuerySpotOrderbookResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.buys_price_level_)*/{}
  , /*decltype(_impl_.sells_price_level_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QuerySpotOrderbookResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QuerySpotOrderbookResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QuerySpotOrderbookResponseDefaultTypeInternal() {}
  union {
    QuerySpotOrderbookResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QuerySpotOrderbookResponseDefaultTypeInternal _QuerySpotOrderbookResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR FullSpotMarket::FullSpotMarket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.market_)*/nullptr
  , /*decltype(_impl_.mid_price_and_tob_)*/nullptr} {}
struct FullSpotMarketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FullSpotMarketDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FullSpotMarketDefaultTypeInternal() {}
  union {
    FullSpotMarket _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FullSpotMarketDefaultTypeInternal _FullSpotMarket_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryFullSpotMarketsRequest::QueryFullSpotMarketsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.market_ids_)*/{}
  , /*decltype(_impl_.status_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.with_mid_price_and_tob_)*/ false

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QueryFullSpotMarketsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryFullSpotMarketsRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryFullSpotMarketsRequestDefaultTypeInternal() {}
  union {
    QueryFullSpotMarketsRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryFullSpotMarketsRequestDefaultTypeInternal _QueryFullSpotMarketsRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryFullSpotMarketsResponse::QueryFullSpotMarketsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.markets_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QueryFullSpotMarketsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryFullSpotMarketsResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryFullSpotMarketsResponseDefaultTypeInternal() {}
  union {
    QueryFullSpotMarketsResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryFullSpotMarketsResponseDefaultTypeInternal _QueryFullSpotMarketsResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryFullSpotMarketRequest::QueryFullSpotMarketRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.market_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.with_mid_price_and_tob_)*/ false

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QueryFullSpotMarketRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryFullSpotMarketRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryFullSpotMarketRequestDefaultTypeInternal() {}
  union {
    QueryFullSpotMarketRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryFullSpotMarketRequestDefaultTypeInternal _QueryFullSpotMarketRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryFullSpotMarketResponse::QueryFullSpotMarketResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.market_)*/nullptr} {}
struct QueryFullSpotMarketResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryFullSpotMarketResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryFullSpotMarketResponseDefaultTypeInternal() {}
  union {
    QueryFullSpotMarketResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryFullSpotMarketResponseDefaultTypeInternal _QueryFullSpotMarketResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QuerySpotOrdersByHashesRequest::QuerySpotOrdersByHashesRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.order_hashes_)*/{}
  , /*decltype(_impl_.market_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.subaccount_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QuerySpotOrdersByHashesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QuerySpotOrdersByHashesRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QuerySpotOrdersByHashesRequestDefaultTypeInternal() {}
  union {
    QuerySpotOrdersByHashesRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QuerySpotOrdersByHashesRequestDefaultTypeInternal _QuerySpotOrdersByHashesRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QuerySpotOrdersByHashesResponse::QuerySpotOrdersByHashesResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.orders_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QuerySpotOrdersByHashesResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QuerySpotOrdersByHashesResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QuerySpotOrdersByHashesResponseDefaultTypeInternal() {}
  union {
    QuerySpotOrdersByHashesResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QuerySpotOrdersByHashesResponseDefaultTypeInternal _QuerySpotOrdersByHashesResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryTraderSpotOrdersRequest::QueryTraderSpotOrdersRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.market_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.subaccount_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QueryTraderSpotOrdersRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryTraderSpotOrdersRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryTraderSpotOrdersRequestDefaultTypeInternal() {}
  union {
    QueryTraderSpotOrdersRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryTraderSpotOrdersRequestDefaultTypeInternal _QueryTraderSpotOrdersRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryAccountAddressSpotOrdersRequest::QueryAccountAddressSpotOrdersRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.market_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.account_address_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QueryAccountAddressSpotOrdersRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryAccountAddressSpotOrdersRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryAccountAddressSpotOrdersRequestDefaultTypeInternal() {}
  union {
    QueryAccountAddressSpotOrdersRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryAccountAddressSpotOrdersRequestDefaultTypeInternal _QueryAccountAddressSpotOrdersRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR TrimmedSpotLimitOrder::TrimmedSpotLimitOrder(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.price_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.quantity_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.fillable_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.order_hash_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.isbuy_)*/ false

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TrimmedSpotLimitOrderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrimmedSpotLimitOrderDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrimmedSpotLimitOrderDefaultTypeInternal() {}
  union {
    TrimmedSpotLimitOrder _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrimmedSpotLimitOrderDefaultTypeInternal _TrimmedSpotLimitOrder_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryTraderSpotOrdersResponse::QueryTraderSpotOrdersResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.orders_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QueryTraderSpotOrdersResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryTraderSpotOrdersResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryTraderSpotOrdersResponseDefaultTypeInternal() {}
  union {
    QueryTraderSpotOrdersResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryTraderSpotOrdersResponseDefaultTypeInternal _QueryTraderSpotOrdersResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryAccountAddressSpotOrdersResponse::QueryAccountAddressSpotOrdersResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.orders_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QueryAccountAddressSpotOrdersResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryAccountAddressSpotOrdersResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryAccountAddressSpotOrdersResponseDefaultTypeInternal() {}
  union {
    QueryAccountAddressSpotOrdersResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryAccountAddressSpotOrdersResponseDefaultTypeInternal _QueryAccountAddressSpotOrdersResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QuerySpotMidPriceAndTOBRequest::QuerySpotMidPriceAndTOBRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.market_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QuerySpotMidPriceAndTOBRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QuerySpotMidPriceAndTOBRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QuerySpotMidPriceAndTOBRequestDefaultTypeInternal() {}
  union {
    QuerySpotMidPriceAndTOBRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QuerySpotMidPriceAndTOBRequestDefaultTypeInternal _QuerySpotMidPriceAndTOBRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QuerySpotMidPriceAndTOBResponse::QuerySpotMidPriceAndTOBResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.mid_price_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.best_buy_price_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.best_sell_price_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QuerySpotMidPriceAndTOBResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QuerySpotMidPriceAndTOBResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QuerySpotMidPriceAndTOBResponseDefaultTypeInternal() {}
  union {
    QuerySpotMidPriceAndTOBResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QuerySpotMidPriceAndTOBResponseDefaultTypeInternal _QuerySpotMidPriceAndTOBResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryDerivativeMidPriceAndTOBRequest::QueryDerivativeMidPriceAndTOBRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.market_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QueryDerivativeMidPriceAndTOBRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryDerivativeMidPriceAndTOBRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryDerivativeMidPriceAndTOBRequestDefaultTypeInternal() {}
  union {
    QueryDerivativeMidPriceAndTOBRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryDerivativeMidPriceAndTOBRequestDefaultTypeInternal _QueryDerivativeMidPriceAndTOBRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryDerivativeMidPriceAndTOBResponse::QueryDerivativeMidPriceAndTOBResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.mid_price_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.best_buy_price_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.best_sell_price_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QueryDerivativeMidPriceAndTOBResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryDerivativeMidPriceAndTOBResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryDerivativeMidPriceAndTOBResponseDefaultTypeInternal() {}
  union {
    QueryDerivativeMidPriceAndTOBResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryDerivativeMidPriceAndTOBResponseDefaultTypeInternal _QueryDerivativeMidPriceAndTOBResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryDerivativeOrderbookRequest::QueryDerivativeOrderbookRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.market_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.limit_cumulative_notional_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.limit_)*/ ::uint64_t{0u}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QueryDerivativeOrderbookRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryDerivativeOrderbookRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryDerivativeOrderbookRequestDefaultTypeInternal() {}
  union {
    QueryDerivativeOrderbookRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryDerivativeOrderbookRequestDefaultTypeInternal _QueryDerivativeOrderbookRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryDerivativeOrderbookResponse::QueryDerivativeOrderbookResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.buys_price_level_)*/{}
  , /*decltype(_impl_.sells_price_level_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QueryDerivativeOrderbookResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryDerivativeOrderbookResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryDerivativeOrderbookResponseDefaultTypeInternal() {}
  union {
    QueryDerivativeOrderbookResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryDerivativeOrderbookResponseDefaultTypeInternal _QueryDerivativeOrderbookResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryTraderSpotOrdersToCancelUpToAmountRequest::QueryTraderSpotOrdersToCancelUpToAmountRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.market_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.subaccount_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.base_amount_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.quote_amount_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.reference_price_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.strategy_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QueryTraderSpotOrdersToCancelUpToAmountRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryTraderSpotOrdersToCancelUpToAmountRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryTraderSpotOrdersToCancelUpToAmountRequestDefaultTypeInternal() {}
  union {
    QueryTraderSpotOrdersToCancelUpToAmountRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryTraderSpotOrdersToCancelUpToAmountRequestDefaultTypeInternal _QueryTraderSpotOrdersToCancelUpToAmountRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryTraderDerivativeOrdersToCancelUpToAmountRequest::QueryTraderDerivativeOrdersToCancelUpToAmountRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.market_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.subaccount_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.quote_amount_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.reference_price_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.strategy_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QueryTraderDerivativeOrdersToCancelUpToAmountRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryTraderDerivativeOrdersToCancelUpToAmountRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryTraderDerivativeOrdersToCancelUpToAmountRequestDefaultTypeInternal() {}
  union {
    QueryTraderDerivativeOrdersToCancelUpToAmountRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryTraderDerivativeOrdersToCancelUpToAmountRequestDefaultTypeInternal _QueryTraderDerivativeOrdersToCancelUpToAmountRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryTraderDerivativeOrdersRequest::QueryTraderDerivativeOrdersRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.market_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.subaccount_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QueryTraderDerivativeOrdersRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryTraderDerivativeOrdersRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryTraderDerivativeOrdersRequestDefaultTypeInternal() {}
  union {
    QueryTraderDerivativeOrdersRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryTraderDerivativeOrdersRequestDefaultTypeInternal _QueryTraderDerivativeOrdersRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryAccountAddressDerivativeOrdersRequest::QueryAccountAddressDerivativeOrdersRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.market_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.account_address_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QueryAccountAddressDerivativeOrdersRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryAccountAddressDerivativeOrdersRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryAccountAddressDerivativeOrdersRequestDefaultTypeInternal() {}
  union {
    QueryAccountAddressDerivativeOrdersRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryAccountAddressDerivativeOrdersRequestDefaultTypeInternal _QueryAccountAddressDerivativeOrdersRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR TrimmedDerivativeLimitOrder::TrimmedDerivativeLimitOrder(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.price_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.quantity_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.margin_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.fillable_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.order_hash_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.isbuy_)*/ false

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TrimmedDerivativeLimitOrderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrimmedDerivativeLimitOrderDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrimmedDerivativeLimitOrderDefaultTypeInternal() {}
  union {
    TrimmedDerivativeLimitOrder _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrimmedDerivativeLimitOrderDefaultTypeInternal _TrimmedDerivativeLimitOrder_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryTraderDerivativeOrdersResponse::QueryTraderDerivativeOrdersResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.orders_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QueryTraderDerivativeOrdersResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryTraderDerivativeOrdersResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryTraderDerivativeOrdersResponseDefaultTypeInternal() {}
  union {
    QueryTraderDerivativeOrdersResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryTraderDerivativeOrdersResponseDefaultTypeInternal _QueryTraderDerivativeOrdersResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryAccountAddressDerivativeOrdersResponse::QueryAccountAddressDerivativeOrdersResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.orders_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QueryAccountAddressDerivativeOrdersResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryAccountAddressDerivativeOrdersResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryAccountAddressDerivativeOrdersResponseDefaultTypeInternal() {}
  union {
    QueryAccountAddressDerivativeOrdersResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryAccountAddressDerivativeOrdersResponseDefaultTypeInternal _QueryAccountAddressDerivativeOrdersResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryDerivativeOrdersByHashesRequest::QueryDerivativeOrdersByHashesRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.order_hashes_)*/{}
  , /*decltype(_impl_.market_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.subaccount_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QueryDerivativeOrdersByHashesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryDerivativeOrdersByHashesRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryDerivativeOrdersByHashesRequestDefaultTypeInternal() {}
  union {
    QueryDerivativeOrdersByHashesRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryDerivativeOrdersByHashesRequestDefaultTypeInternal _QueryDerivativeOrdersByHashesRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryDerivativeOrdersByHashesResponse::QueryDerivativeOrdersByHashesResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.orders_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QueryDerivativeOrdersByHashesResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryDerivativeOrdersByHashesResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryDerivativeOrdersByHashesResponseDefaultTypeInternal() {}
  union {
    QueryDerivativeOrdersByHashesResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryDerivativeOrdersByHashesResponseDefaultTypeInternal _QueryDerivativeOrdersByHashesResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryDerivativeMarketsRequest::QueryDerivativeMarketsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.market_ids_)*/{}
  , /*decltype(_impl_.status_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.with_mid_price_and_tob_)*/ false

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QueryDerivativeMarketsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryDerivativeMarketsRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryDerivativeMarketsRequestDefaultTypeInternal() {}
  union {
    QueryDerivativeMarketsRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryDerivativeMarketsRequestDefaultTypeInternal _QueryDerivativeMarketsRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR PriceLevel::PriceLevel(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.price_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.quantity_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PriceLevelDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PriceLevelDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PriceLevelDefaultTypeInternal() {}
  union {
    PriceLevel _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PriceLevelDefaultTypeInternal _PriceLevel_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR PerpetualMarketState::PerpetualMarketState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.market_info_)*/nullptr
  , /*decltype(_impl_.funding_info_)*/nullptr} {}
struct PerpetualMarketStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PerpetualMarketStateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PerpetualMarketStateDefaultTypeInternal() {}
  union {
    PerpetualMarketState _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PerpetualMarketStateDefaultTypeInternal _PerpetualMarketState_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR FullDerivativeMarket::FullDerivativeMarket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.mark_price_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.market_)*/nullptr
  , /*decltype(_impl_.mid_price_and_tob_)*/nullptr
  , /*decltype(_impl_.info_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct FullDerivativeMarketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FullDerivativeMarketDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FullDerivativeMarketDefaultTypeInternal() {}
  union {
    FullDerivativeMarket _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FullDerivativeMarketDefaultTypeInternal _FullDerivativeMarket_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryDerivativeMarketsResponse::QueryDerivativeMarketsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.markets_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QueryDerivativeMarketsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryDerivativeMarketsResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryDerivativeMarketsResponseDefaultTypeInternal() {}
  union {
    QueryDerivativeMarketsResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryDerivativeMarketsResponseDefaultTypeInternal _QueryDerivativeMarketsResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryDerivativeMarketRequest::QueryDerivativeMarketRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.market_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QueryDerivativeMarketRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryDerivativeMarketRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryDerivativeMarketRequestDefaultTypeInternal() {}
  union {
    QueryDerivativeMarketRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryDerivativeMarketRequestDefaultTypeInternal _QueryDerivativeMarketRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryDerivativeMarketResponse::QueryDerivativeMarketResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.market_)*/nullptr} {}
struct QueryDerivativeMarketResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryDerivativeMarketResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryDerivativeMarketResponseDefaultTypeInternal() {}
  union {
    QueryDerivativeMarketResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryDerivativeMarketResponseDefaultTypeInternal _QueryDerivativeMarketResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryDerivativeMarketAddressRequest::QueryDerivativeMarketAddressRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.market_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QueryDerivativeMarketAddressRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryDerivativeMarketAddressRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryDerivativeMarketAddressRequestDefaultTypeInternal() {}
  union {
    QueryDerivativeMarketAddressRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryDerivativeMarketAddressRequestDefaultTypeInternal _QueryDerivativeMarketAddressRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryDerivativeMarketAddressResponse::QueryDerivativeMarketAddressResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.address_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.subaccount_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QueryDerivativeMarketAddressResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryDerivativeMarketAddressResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryDerivativeMarketAddressResponseDefaultTypeInternal() {}
  union {
    QueryDerivativeMarketAddressResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryDerivativeMarketAddressResponseDefaultTypeInternal _QueryDerivativeMarketAddressResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QuerySubaccountTradeNonceRequest::QuerySubaccountTradeNonceRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.subaccount_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QuerySubaccountTradeNonceRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QuerySubaccountTradeNonceRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QuerySubaccountTradeNonceRequestDefaultTypeInternal() {}
  union {
    QuerySubaccountTradeNonceRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QuerySubaccountTradeNonceRequestDefaultTypeInternal _QuerySubaccountTradeNonceRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QuerySubaccountPositionsRequest::QuerySubaccountPositionsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.subaccount_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QuerySubaccountPositionsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QuerySubaccountPositionsRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QuerySubaccountPositionsRequestDefaultTypeInternal() {}
  union {
    QuerySubaccountPositionsRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QuerySubaccountPositionsRequestDefaultTypeInternal _QuerySubaccountPositionsRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QuerySubaccountPositionInMarketRequest::QuerySubaccountPositionInMarketRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.subaccount_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.market_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QuerySubaccountPositionInMarketRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QuerySubaccountPositionInMarketRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QuerySubaccountPositionInMarketRequestDefaultTypeInternal() {}
  union {
    QuerySubaccountPositionInMarketRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QuerySubaccountPositionInMarketRequestDefaultTypeInternal _QuerySubaccountPositionInMarketRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QuerySubaccountEffectivePositionInMarketRequest::QuerySubaccountEffectivePositionInMarketRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.subaccount_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.market_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QuerySubaccountEffectivePositionInMarketRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QuerySubaccountEffectivePositionInMarketRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QuerySubaccountEffectivePositionInMarketRequestDefaultTypeInternal() {}
  union {
    QuerySubaccountEffectivePositionInMarketRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QuerySubaccountEffectivePositionInMarketRequestDefaultTypeInternal _QuerySubaccountEffectivePositionInMarketRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QuerySubaccountOrderMetadataRequest::QuerySubaccountOrderMetadataRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.subaccount_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QuerySubaccountOrderMetadataRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QuerySubaccountOrderMetadataRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QuerySubaccountOrderMetadataRequestDefaultTypeInternal() {}
  union {
    QuerySubaccountOrderMetadataRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QuerySubaccountOrderMetadataRequestDefaultTypeInternal _QuerySubaccountOrderMetadataRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QuerySubaccountPositionsResponse::QuerySubaccountPositionsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.state_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QuerySubaccountPositionsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QuerySubaccountPositionsResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QuerySubaccountPositionsResponseDefaultTypeInternal() {}
  union {
    QuerySubaccountPositionsResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QuerySubaccountPositionsResponseDefaultTypeInternal _QuerySubaccountPositionsResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QuerySubaccountPositionInMarketResponse::QuerySubaccountPositionInMarketResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.state_)*/nullptr} {}
struct QuerySubaccountPositionInMarketResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QuerySubaccountPositionInMarketResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QuerySubaccountPositionInMarketResponseDefaultTypeInternal() {}
  union {
    QuerySubaccountPositionInMarketResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QuerySubaccountPositionInMarketResponseDefaultTypeInternal _QuerySubaccountPositionInMarketResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR EffectivePosition::EffectivePosition(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.quantity_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.entry_price_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.effective_margin_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.is_long_)*/ false

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EffectivePositionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EffectivePositionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EffectivePositionDefaultTypeInternal() {}
  union {
    EffectivePosition _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EffectivePositionDefaultTypeInternal _EffectivePosition_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QuerySubaccountEffectivePositionInMarketResponse::QuerySubaccountEffectivePositionInMarketResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.state_)*/nullptr} {}
struct QuerySubaccountEffectivePositionInMarketResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QuerySubaccountEffectivePositionInMarketResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QuerySubaccountEffectivePositionInMarketResponseDefaultTypeInternal() {}
  union {
    QuerySubaccountEffectivePositionInMarketResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QuerySubaccountEffectivePositionInMarketResponseDefaultTypeInternal _QuerySubaccountEffectivePositionInMarketResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryPerpetualMarketInfoRequest::QueryPerpetualMarketInfoRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.market_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QueryPerpetualMarketInfoRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryPerpetualMarketInfoRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryPerpetualMarketInfoRequestDefaultTypeInternal() {}
  union {
    QueryPerpetualMarketInfoRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryPerpetualMarketInfoRequestDefaultTypeInternal _QueryPerpetualMarketInfoRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryPerpetualMarketInfoResponse::QueryPerpetualMarketInfoResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.info_)*/nullptr} {}
struct QueryPerpetualMarketInfoResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryPerpetualMarketInfoResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryPerpetualMarketInfoResponseDefaultTypeInternal() {}
  union {
    QueryPerpetualMarketInfoResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryPerpetualMarketInfoResponseDefaultTypeInternal _QueryPerpetualMarketInfoResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryExpiryFuturesMarketInfoRequest::QueryExpiryFuturesMarketInfoRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.market_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QueryExpiryFuturesMarketInfoRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryExpiryFuturesMarketInfoRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryExpiryFuturesMarketInfoRequestDefaultTypeInternal() {}
  union {
    QueryExpiryFuturesMarketInfoRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryExpiryFuturesMarketInfoRequestDefaultTypeInternal _QueryExpiryFuturesMarketInfoRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryExpiryFuturesMarketInfoResponse::QueryExpiryFuturesMarketInfoResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.info_)*/nullptr} {}
struct QueryExpiryFuturesMarketInfoResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryExpiryFuturesMarketInfoResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryExpiryFuturesMarketInfoResponseDefaultTypeInternal() {}
  union {
    QueryExpiryFuturesMarketInfoResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryExpiryFuturesMarketInfoResponseDefaultTypeInternal _QueryExpiryFuturesMarketInfoResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryPerpetualMarketFundingRequest::QueryPerpetualMarketFundingRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.market_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QueryPerpetualMarketFundingRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryPerpetualMarketFundingRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryPerpetualMarketFundingRequestDefaultTypeInternal() {}
  union {
    QueryPerpetualMarketFundingRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryPerpetualMarketFundingRequestDefaultTypeInternal _QueryPerpetualMarketFundingRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryPerpetualMarketFundingResponse::QueryPerpetualMarketFundingResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.state_)*/nullptr} {}
struct QueryPerpetualMarketFundingResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryPerpetualMarketFundingResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryPerpetualMarketFundingResponseDefaultTypeInternal() {}
  union {
    QueryPerpetualMarketFundingResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryPerpetualMarketFundingResponseDefaultTypeInternal _QueryPerpetualMarketFundingResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QuerySubaccountOrderMetadataResponse::QuerySubaccountOrderMetadataResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.metadata_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QuerySubaccountOrderMetadataResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QuerySubaccountOrderMetadataResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QuerySubaccountOrderMetadataResponseDefaultTypeInternal() {}
  union {
    QuerySubaccountOrderMetadataResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QuerySubaccountOrderMetadataResponseDefaultTypeInternal _QuerySubaccountOrderMetadataResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QuerySubaccountTradeNonceResponse::QuerySubaccountTradeNonceResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.nonce_)*/ 0u

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QuerySubaccountTradeNonceResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QuerySubaccountTradeNonceResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QuerySubaccountTradeNonceResponseDefaultTypeInternal() {}
  union {
    QuerySubaccountTradeNonceResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QuerySubaccountTradeNonceResponseDefaultTypeInternal _QuerySubaccountTradeNonceResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryModuleStateRequest::QueryModuleStateRequest(
    ::_pbi::ConstantInitialized) {}
struct QueryModuleStateRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryModuleStateRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryModuleStateRequestDefaultTypeInternal() {}
  union {
    QueryModuleStateRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryModuleStateRequestDefaultTypeInternal _QueryModuleStateRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryModuleStateResponse::QueryModuleStateResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.state_)*/nullptr} {}
struct QueryModuleStateResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryModuleStateResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryModuleStateResponseDefaultTypeInternal() {}
  union {
    QueryModuleStateResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryModuleStateResponseDefaultTypeInternal _QueryModuleStateResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryPositionsRequest::QueryPositionsRequest(
    ::_pbi::ConstantInitialized) {}
struct QueryPositionsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryPositionsRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryPositionsRequestDefaultTypeInternal() {}
  union {
    QueryPositionsRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryPositionsRequestDefaultTypeInternal _QueryPositionsRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryPositionsResponse::QueryPositionsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.state_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QueryPositionsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryPositionsResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryPositionsResponseDefaultTypeInternal() {}
  union {
    QueryPositionsResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryPositionsResponseDefaultTypeInternal _QueryPositionsResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryTradeRewardPointsRequest::QueryTradeRewardPointsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.accounts_)*/{}
  , /*decltype(_impl_.pending_pool_timestamp_)*/ ::int64_t{0}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QueryTradeRewardPointsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryTradeRewardPointsRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryTradeRewardPointsRequestDefaultTypeInternal() {}
  union {
    QueryTradeRewardPointsRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryTradeRewardPointsRequestDefaultTypeInternal _QueryTradeRewardPointsRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryTradeRewardPointsResponse::QueryTradeRewardPointsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.account_trade_reward_points_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QueryTradeRewardPointsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryTradeRewardPointsResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryTradeRewardPointsResponseDefaultTypeInternal() {}
  union {
    QueryTradeRewardPointsResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryTradeRewardPointsResponseDefaultTypeInternal _QueryTradeRewardPointsResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryTradeRewardCampaignRequest::QueryTradeRewardCampaignRequest(
    ::_pbi::ConstantInitialized) {}
struct QueryTradeRewardCampaignRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryTradeRewardCampaignRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryTradeRewardCampaignRequestDefaultTypeInternal() {}
  union {
    QueryTradeRewardCampaignRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryTradeRewardCampaignRequestDefaultTypeInternal _QueryTradeRewardCampaignRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryTradeRewardCampaignResponse::QueryTradeRewardCampaignResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.trading_reward_pool_campaign_schedule_)*/{}
  , /*decltype(_impl_.pending_trading_reward_pool_campaign_schedule_)*/{}
  , /*decltype(_impl_.pending_total_trade_reward_points_)*/{}
  , /*decltype(_impl_.total_trade_reward_points_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.trading_reward_campaign_info_)*/nullptr} {}
struct QueryTradeRewardCampaignResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryTradeRewardCampaignResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryTradeRewardCampaignResponseDefaultTypeInternal() {}
  union {
    QueryTradeRewardCampaignResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryTradeRewardCampaignResponseDefaultTypeInternal _QueryTradeRewardCampaignResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryIsOptedOutOfRewardsRequest::QueryIsOptedOutOfRewardsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.account_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QueryIsOptedOutOfRewardsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryIsOptedOutOfRewardsRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryIsOptedOutOfRewardsRequestDefaultTypeInternal() {}
  union {
    QueryIsOptedOutOfRewardsRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryIsOptedOutOfRewardsRequestDefaultTypeInternal _QueryIsOptedOutOfRewardsRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryIsOptedOutOfRewardsResponse::QueryIsOptedOutOfRewardsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.is_opted_out_)*/ false

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QueryIsOptedOutOfRewardsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryIsOptedOutOfRewardsResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryIsOptedOutOfRewardsResponseDefaultTypeInternal() {}
  union {
    QueryIsOptedOutOfRewardsResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryIsOptedOutOfRewardsResponseDefaultTypeInternal _QueryIsOptedOutOfRewardsResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryOptedOutOfRewardsAccountsRequest::QueryOptedOutOfRewardsAccountsRequest(
    ::_pbi::ConstantInitialized) {}
struct QueryOptedOutOfRewardsAccountsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryOptedOutOfRewardsAccountsRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryOptedOutOfRewardsAccountsRequestDefaultTypeInternal() {}
  union {
    QueryOptedOutOfRewardsAccountsRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryOptedOutOfRewardsAccountsRequestDefaultTypeInternal _QueryOptedOutOfRewardsAccountsRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryOptedOutOfRewardsAccountsResponse::QueryOptedOutOfRewardsAccountsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.accounts_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QueryOptedOutOfRewardsAccountsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryOptedOutOfRewardsAccountsResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryOptedOutOfRewardsAccountsResponseDefaultTypeInternal() {}
  union {
    QueryOptedOutOfRewardsAccountsResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryOptedOutOfRewardsAccountsResponseDefaultTypeInternal _QueryOptedOutOfRewardsAccountsResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryFeeDiscountAccountInfoRequest::QueryFeeDiscountAccountInfoRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.account_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QueryFeeDiscountAccountInfoRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryFeeDiscountAccountInfoRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryFeeDiscountAccountInfoRequestDefaultTypeInternal() {}
  union {
    QueryFeeDiscountAccountInfoRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryFeeDiscountAccountInfoRequestDefaultTypeInternal _QueryFeeDiscountAccountInfoRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryFeeDiscountAccountInfoResponse::QueryFeeDiscountAccountInfoResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.account_info_)*/nullptr
  , /*decltype(_impl_.account_ttl_)*/nullptr
  , /*decltype(_impl_.tier_level_)*/ ::uint64_t{0u}
} {}
struct QueryFeeDiscountAccountInfoResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryFeeDiscountAccountInfoResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryFeeDiscountAccountInfoResponseDefaultTypeInternal() {}
  union {
    QueryFeeDiscountAccountInfoResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryFeeDiscountAccountInfoResponseDefaultTypeInternal _QueryFeeDiscountAccountInfoResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryFeeDiscountScheduleRequest::QueryFeeDiscountScheduleRequest(
    ::_pbi::ConstantInitialized) {}
struct QueryFeeDiscountScheduleRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryFeeDiscountScheduleRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryFeeDiscountScheduleRequestDefaultTypeInternal() {}
  union {
    QueryFeeDiscountScheduleRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryFeeDiscountScheduleRequestDefaultTypeInternal _QueryFeeDiscountScheduleRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryFeeDiscountScheduleResponse::QueryFeeDiscountScheduleResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.fee_discount_schedule_)*/nullptr} {}
struct QueryFeeDiscountScheduleResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryFeeDiscountScheduleResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryFeeDiscountScheduleResponseDefaultTypeInternal() {}
  union {
    QueryFeeDiscountScheduleResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryFeeDiscountScheduleResponseDefaultTypeInternal _QueryFeeDiscountScheduleResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryBalanceMismatchesRequest::QueryBalanceMismatchesRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.dust_factor_)*/ ::int64_t{0}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QueryBalanceMismatchesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryBalanceMismatchesRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryBalanceMismatchesRequestDefaultTypeInternal() {}
  union {
    QueryBalanceMismatchesRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryBalanceMismatchesRequestDefaultTypeInternal _QueryBalanceMismatchesRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR BalanceMismatch::BalanceMismatch(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.subaccountid_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.denom_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.available_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.total_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.balance_hold_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.expected_total_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.difference_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BalanceMismatchDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BalanceMismatchDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BalanceMismatchDefaultTypeInternal() {}
  union {
    BalanceMismatch _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BalanceMismatchDefaultTypeInternal _BalanceMismatch_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryBalanceMismatchesResponse::QueryBalanceMismatchesResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.balance_mismatches_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QueryBalanceMismatchesResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryBalanceMismatchesResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryBalanceMismatchesResponseDefaultTypeInternal() {}
  union {
    QueryBalanceMismatchesResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryBalanceMismatchesResponseDefaultTypeInternal _QueryBalanceMismatchesResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryBalanceWithBalanceHoldsRequest::QueryBalanceWithBalanceHoldsRequest(
    ::_pbi::ConstantInitialized) {}
struct QueryBalanceWithBalanceHoldsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryBalanceWithBalanceHoldsRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryBalanceWithBalanceHoldsRequestDefaultTypeInternal() {}
  union {
    QueryBalanceWithBalanceHoldsRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryBalanceWithBalanceHoldsRequestDefaultTypeInternal _QueryBalanceWithBalanceHoldsRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR BalanceWithMarginHold::BalanceWithMarginHold(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.subaccountid_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.denom_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.available_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.total_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.balance_hold_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BalanceWithMarginHoldDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BalanceWithMarginHoldDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BalanceWithMarginHoldDefaultTypeInternal() {}
  union {
    BalanceWithMarginHold _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BalanceWithMarginHoldDefaultTypeInternal _BalanceWithMarginHold_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryBalanceWithBalanceHoldsResponse::QueryBalanceWithBalanceHoldsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.balance_with_balance_holds_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QueryBalanceWithBalanceHoldsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryBalanceWithBalanceHoldsResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryBalanceWithBalanceHoldsResponseDefaultTypeInternal() {}
  union {
    QueryBalanceWithBalanceHoldsResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryBalanceWithBalanceHoldsResponseDefaultTypeInternal _QueryBalanceWithBalanceHoldsResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryFeeDiscountTierStatisticsRequest::QueryFeeDiscountTierStatisticsRequest(
    ::_pbi::ConstantInitialized) {}
struct QueryFeeDiscountTierStatisticsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryFeeDiscountTierStatisticsRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryFeeDiscountTierStatisticsRequestDefaultTypeInternal() {}
  union {
    QueryFeeDiscountTierStatisticsRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryFeeDiscountTierStatisticsRequestDefaultTypeInternal _QueryFeeDiscountTierStatisticsRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR TierStatistic::TierStatistic(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tier_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.count_)*/ ::uint64_t{0u}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TierStatisticDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TierStatisticDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TierStatisticDefaultTypeInternal() {}
  union {
    TierStatistic _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TierStatisticDefaultTypeInternal _TierStatistic_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryFeeDiscountTierStatisticsResponse::QueryFeeDiscountTierStatisticsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.statistics_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QueryFeeDiscountTierStatisticsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryFeeDiscountTierStatisticsResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryFeeDiscountTierStatisticsResponseDefaultTypeInternal() {}
  union {
    QueryFeeDiscountTierStatisticsResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryFeeDiscountTierStatisticsResponseDefaultTypeInternal _QueryFeeDiscountTierStatisticsResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MitoVaultInfosRequest::MitoVaultInfosRequest(
    ::_pbi::ConstantInitialized) {}
struct MitoVaultInfosRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MitoVaultInfosRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MitoVaultInfosRequestDefaultTypeInternal() {}
  union {
    MitoVaultInfosRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MitoVaultInfosRequestDefaultTypeInternal _MitoVaultInfosRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MitoVaultInfosResponse::MitoVaultInfosResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.master_addresses_)*/{}
  , /*decltype(_impl_.derivative_addresses_)*/{}
  , /*decltype(_impl_.spot_addresses_)*/{}
  , /*decltype(_impl_.cw20_addresses_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MitoVaultInfosResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MitoVaultInfosResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MitoVaultInfosResponseDefaultTypeInternal() {}
  union {
    MitoVaultInfosResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MitoVaultInfosResponseDefaultTypeInternal _MitoVaultInfosResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryMarketIDFromVaultRequest::QueryMarketIDFromVaultRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.vault_address_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QueryMarketIDFromVaultRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryMarketIDFromVaultRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryMarketIDFromVaultRequestDefaultTypeInternal() {}
  union {
    QueryMarketIDFromVaultRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryMarketIDFromVaultRequestDefaultTypeInternal _QueryMarketIDFromVaultRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryMarketIDFromVaultResponse::QueryMarketIDFromVaultResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.market_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QueryMarketIDFromVaultResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryMarketIDFromVaultResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryMarketIDFromVaultResponseDefaultTypeInternal() {}
  union {
    QueryMarketIDFromVaultResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryMarketIDFromVaultResponseDefaultTypeInternal _QueryMarketIDFromVaultResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryHistoricalTradeRecordsRequest::QueryHistoricalTradeRecordsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.market_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QueryHistoricalTradeRecordsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryHistoricalTradeRecordsRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryHistoricalTradeRecordsRequestDefaultTypeInternal() {}
  union {
    QueryHistoricalTradeRecordsRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryHistoricalTradeRecordsRequestDefaultTypeInternal _QueryHistoricalTradeRecordsRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryHistoricalTradeRecordsResponse::QueryHistoricalTradeRecordsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.trade_records_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QueryHistoricalTradeRecordsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryHistoricalTradeRecordsResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryHistoricalTradeRecordsResponseDefaultTypeInternal() {}
  union {
    QueryHistoricalTradeRecordsResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryHistoricalTradeRecordsResponseDefaultTypeInternal _QueryHistoricalTradeRecordsResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR TradeHistoryOptions::TradeHistoryOptions(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.trade_grouping_sec_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.max_age_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.include_raw_history_)*/ false

  , /*decltype(_impl_.include_metadata_)*/ false

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TradeHistoryOptionsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TradeHistoryOptionsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TradeHistoryOptionsDefaultTypeInternal() {}
  union {
    TradeHistoryOptions _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TradeHistoryOptionsDefaultTypeInternal _TradeHistoryOptions_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryMarketVolatilityRequest::QueryMarketVolatilityRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.market_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.trade_history_options_)*/nullptr} {}
struct QueryMarketVolatilityRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryMarketVolatilityRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryMarketVolatilityRequestDefaultTypeInternal() {}
  union {
    QueryMarketVolatilityRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryMarketVolatilityRequestDefaultTypeInternal _QueryMarketVolatilityRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryMarketVolatilityResponse::QueryMarketVolatilityResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.raw_history_)*/{}
  , /*decltype(_impl_.volatility_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.history_metadata_)*/nullptr} {}
struct QueryMarketVolatilityResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryMarketVolatilityResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryMarketVolatilityResponseDefaultTypeInternal() {}
  union {
    QueryMarketVolatilityResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryMarketVolatilityResponseDefaultTypeInternal _QueryMarketVolatilityResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryBinaryMarketsRequest::QueryBinaryMarketsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.status_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QueryBinaryMarketsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryBinaryMarketsRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryBinaryMarketsRequestDefaultTypeInternal() {}
  union {
    QueryBinaryMarketsRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryBinaryMarketsRequestDefaultTypeInternal _QueryBinaryMarketsRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryBinaryMarketsResponse::QueryBinaryMarketsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.markets_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QueryBinaryMarketsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryBinaryMarketsResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryBinaryMarketsResponseDefaultTypeInternal() {}
  union {
    QueryBinaryMarketsResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryBinaryMarketsResponseDefaultTypeInternal _QueryBinaryMarketsResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryTraderDerivativeConditionalOrdersRequest::QueryTraderDerivativeConditionalOrdersRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.subaccount_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.market_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QueryTraderDerivativeConditionalOrdersRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryTraderDerivativeConditionalOrdersRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryTraderDerivativeConditionalOrdersRequestDefaultTypeInternal() {}
  union {
    QueryTraderDerivativeConditionalOrdersRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryTraderDerivativeConditionalOrdersRequestDefaultTypeInternal _QueryTraderDerivativeConditionalOrdersRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR TrimmedDerivativeConditionalOrder::TrimmedDerivativeConditionalOrder(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.price_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.quantity_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.margin_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.triggerprice_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.order_hash_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.isbuy_)*/ false

  , /*decltype(_impl_.islimit_)*/ false

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TrimmedDerivativeConditionalOrderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrimmedDerivativeConditionalOrderDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrimmedDerivativeConditionalOrderDefaultTypeInternal() {}
  union {
    TrimmedDerivativeConditionalOrder _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrimmedDerivativeConditionalOrderDefaultTypeInternal _TrimmedDerivativeConditionalOrder_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryTraderDerivativeConditionalOrdersResponse::QueryTraderDerivativeConditionalOrdersResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.orders_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QueryTraderDerivativeConditionalOrdersResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryTraderDerivativeConditionalOrdersResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryTraderDerivativeConditionalOrdersResponseDefaultTypeInternal() {}
  union {
    QueryTraderDerivativeConditionalOrdersResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryTraderDerivativeConditionalOrdersResponseDefaultTypeInternal _QueryTraderDerivativeConditionalOrdersResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryMarketAtomicExecutionFeeMultiplierRequest::QueryMarketAtomicExecutionFeeMultiplierRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.market_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QueryMarketAtomicExecutionFeeMultiplierRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryMarketAtomicExecutionFeeMultiplierRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryMarketAtomicExecutionFeeMultiplierRequestDefaultTypeInternal() {}
  union {
    QueryMarketAtomicExecutionFeeMultiplierRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryMarketAtomicExecutionFeeMultiplierRequestDefaultTypeInternal _QueryMarketAtomicExecutionFeeMultiplierRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryMarketAtomicExecutionFeeMultiplierResponse::QueryMarketAtomicExecutionFeeMultiplierResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.multiplier_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QueryMarketAtomicExecutionFeeMultiplierResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryMarketAtomicExecutionFeeMultiplierResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryMarketAtomicExecutionFeeMultiplierResponseDefaultTypeInternal() {}
  union {
    QueryMarketAtomicExecutionFeeMultiplierResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryMarketAtomicExecutionFeeMultiplierResponseDefaultTypeInternal _QueryMarketAtomicExecutionFeeMultiplierResponse_default_instance_;
}  // namespace v1beta1
}  // namespace exchange
}  // namespace injective
static ::_pb::Metadata file_level_metadata_injective_2fexchange_2fv1beta1_2fquery_2eproto[125];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_injective_2fexchange_2fv1beta1_2fquery_2eproto[2];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_injective_2fexchange_2fv1beta1_2fquery_2eproto = nullptr;
const ::uint32_t TableStruct_injective_2fexchange_2fv1beta1_2fquery_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::Subaccount, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::Subaccount, _impl_.trader_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::Subaccount, _impl_.subaccount_nonce_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QuerySubaccountOrdersRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QuerySubaccountOrdersRequest, _impl_.subaccount_id_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QuerySubaccountOrdersRequest, _impl_.market_id_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QuerySubaccountOrdersResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QuerySubaccountOrdersResponse, _impl_.buy_orders_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QuerySubaccountOrdersResponse, _impl_.sell_orders_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::SubaccountOrderbookMetadataWithMarket, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::SubaccountOrderbookMetadataWithMarket, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::SubaccountOrderbookMetadataWithMarket, _impl_.metadata_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::SubaccountOrderbookMetadataWithMarket, _impl_.market_id_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::SubaccountOrderbookMetadataWithMarket, _impl_.isbuy_),
    0,
    ~0u,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryExchangeParamsRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryExchangeParamsResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryExchangeParamsResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryExchangeParamsResponse, _impl_.params_),
    0,
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QuerySubaccountDepositsRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QuerySubaccountDepositsRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QuerySubaccountDepositsRequest, _impl_.subaccount_id_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QuerySubaccountDepositsRequest, _impl_.subaccount_),
    ~0u,
    0,
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QuerySubaccountDepositsResponse_DepositsEntry_DoNotUse, _has_bits_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QuerySubaccountDepositsResponse_DepositsEntry_DoNotUse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QuerySubaccountDepositsResponse_DepositsEntry_DoNotUse, key_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QuerySubaccountDepositsResponse_DepositsEntry_DoNotUse, value_),
    0,
    1,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QuerySubaccountDepositsResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QuerySubaccountDepositsResponse, _impl_.deposits_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryExchangeBalancesRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryExchangeBalancesResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryExchangeBalancesResponse, _impl_.balances_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryAggregateVolumeRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryAggregateVolumeRequest, _impl_.account_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryAggregateVolumeResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryAggregateVolumeResponse, _impl_.aggregate_volumes_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryAggregateVolumesRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryAggregateVolumesRequest, _impl_.accounts_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryAggregateVolumesRequest, _impl_.market_ids_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryAggregateVolumesResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryAggregateVolumesResponse, _impl_.aggregate_account_volumes_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryAggregateVolumesResponse, _impl_.aggregate_market_volumes_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryAggregateMarketVolumeRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryAggregateMarketVolumeRequest, _impl_.market_id_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryAggregateMarketVolumeResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryAggregateMarketVolumeResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryAggregateMarketVolumeResponse, _impl_.volume_),
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryDenomDecimalRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryDenomDecimalRequest, _impl_.denom_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryDenomDecimalResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryDenomDecimalResponse, _impl_.decimal_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryDenomDecimalsRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryDenomDecimalsRequest, _impl_.denoms_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryDenomDecimalsResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryDenomDecimalsResponse, _impl_.denom_decimals_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryAggregateMarketVolumesRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryAggregateMarketVolumesRequest, _impl_.market_ids_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryAggregateMarketVolumesResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryAggregateMarketVolumesResponse, _impl_.volumes_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QuerySubaccountDepositRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QuerySubaccountDepositRequest, _impl_.subaccount_id_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QuerySubaccountDepositRequest, _impl_.denom_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QuerySubaccountDepositResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QuerySubaccountDepositResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QuerySubaccountDepositResponse, _impl_.deposits_),
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QuerySpotMarketsRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QuerySpotMarketsRequest, _impl_.status_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QuerySpotMarketsRequest, _impl_.market_ids_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QuerySpotMarketsResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QuerySpotMarketsResponse, _impl_.markets_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QuerySpotMarketRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QuerySpotMarketRequest, _impl_.market_id_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QuerySpotMarketResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QuerySpotMarketResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QuerySpotMarketResponse, _impl_.market_),
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QuerySpotOrderbookRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QuerySpotOrderbookRequest, _impl_.market_id_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QuerySpotOrderbookRequest, _impl_.limit_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QuerySpotOrderbookRequest, _impl_.order_side_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QuerySpotOrderbookRequest, _impl_.limit_cumulative_notional_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QuerySpotOrderbookRequest, _impl_.limit_cumulative_quantity_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QuerySpotOrderbookResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QuerySpotOrderbookResponse, _impl_.buys_price_level_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QuerySpotOrderbookResponse, _impl_.sells_price_level_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::FullSpotMarket, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::FullSpotMarket, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::FullSpotMarket, _impl_.market_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::FullSpotMarket, _impl_.mid_price_and_tob_),
    0,
    1,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryFullSpotMarketsRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryFullSpotMarketsRequest, _impl_.status_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryFullSpotMarketsRequest, _impl_.market_ids_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryFullSpotMarketsRequest, _impl_.with_mid_price_and_tob_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryFullSpotMarketsResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryFullSpotMarketsResponse, _impl_.markets_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryFullSpotMarketRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryFullSpotMarketRequest, _impl_.market_id_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryFullSpotMarketRequest, _impl_.with_mid_price_and_tob_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryFullSpotMarketResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryFullSpotMarketResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryFullSpotMarketResponse, _impl_.market_),
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QuerySpotOrdersByHashesRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QuerySpotOrdersByHashesRequest, _impl_.market_id_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QuerySpotOrdersByHashesRequest, _impl_.subaccount_id_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QuerySpotOrdersByHashesRequest, _impl_.order_hashes_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QuerySpotOrdersByHashesResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QuerySpotOrdersByHashesResponse, _impl_.orders_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryTraderSpotOrdersRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryTraderSpotOrdersRequest, _impl_.market_id_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryTraderSpotOrdersRequest, _impl_.subaccount_id_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryAccountAddressSpotOrdersRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryAccountAddressSpotOrdersRequest, _impl_.market_id_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryAccountAddressSpotOrdersRequest, _impl_.account_address_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::TrimmedSpotLimitOrder, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::TrimmedSpotLimitOrder, _impl_.price_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::TrimmedSpotLimitOrder, _impl_.quantity_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::TrimmedSpotLimitOrder, _impl_.fillable_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::TrimmedSpotLimitOrder, _impl_.isbuy_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::TrimmedSpotLimitOrder, _impl_.order_hash_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryTraderSpotOrdersResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryTraderSpotOrdersResponse, _impl_.orders_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryAccountAddressSpotOrdersResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryAccountAddressSpotOrdersResponse, _impl_.orders_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QuerySpotMidPriceAndTOBRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QuerySpotMidPriceAndTOBRequest, _impl_.market_id_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QuerySpotMidPriceAndTOBResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QuerySpotMidPriceAndTOBResponse, _impl_.mid_price_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QuerySpotMidPriceAndTOBResponse, _impl_.best_buy_price_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QuerySpotMidPriceAndTOBResponse, _impl_.best_sell_price_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryDerivativeMidPriceAndTOBRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryDerivativeMidPriceAndTOBRequest, _impl_.market_id_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryDerivativeMidPriceAndTOBResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryDerivativeMidPriceAndTOBResponse, _impl_.mid_price_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryDerivativeMidPriceAndTOBResponse, _impl_.best_buy_price_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryDerivativeMidPriceAndTOBResponse, _impl_.best_sell_price_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryDerivativeOrderbookRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryDerivativeOrderbookRequest, _impl_.market_id_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryDerivativeOrderbookRequest, _impl_.limit_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryDerivativeOrderbookRequest, _impl_.limit_cumulative_notional_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryDerivativeOrderbookResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryDerivativeOrderbookResponse, _impl_.buys_price_level_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryDerivativeOrderbookResponse, _impl_.sells_price_level_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryTraderSpotOrdersToCancelUpToAmountRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryTraderSpotOrdersToCancelUpToAmountRequest, _impl_.market_id_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryTraderSpotOrdersToCancelUpToAmountRequest, _impl_.subaccount_id_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryTraderSpotOrdersToCancelUpToAmountRequest, _impl_.base_amount_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryTraderSpotOrdersToCancelUpToAmountRequest, _impl_.quote_amount_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryTraderSpotOrdersToCancelUpToAmountRequest, _impl_.strategy_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryTraderSpotOrdersToCancelUpToAmountRequest, _impl_.reference_price_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryTraderDerivativeOrdersToCancelUpToAmountRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryTraderDerivativeOrdersToCancelUpToAmountRequest, _impl_.market_id_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryTraderDerivativeOrdersToCancelUpToAmountRequest, _impl_.subaccount_id_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryTraderDerivativeOrdersToCancelUpToAmountRequest, _impl_.quote_amount_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryTraderDerivativeOrdersToCancelUpToAmountRequest, _impl_.strategy_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryTraderDerivativeOrdersToCancelUpToAmountRequest, _impl_.reference_price_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryTraderDerivativeOrdersRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryTraderDerivativeOrdersRequest, _impl_.market_id_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryTraderDerivativeOrdersRequest, _impl_.subaccount_id_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryAccountAddressDerivativeOrdersRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryAccountAddressDerivativeOrdersRequest, _impl_.market_id_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryAccountAddressDerivativeOrdersRequest, _impl_.account_address_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::TrimmedDerivativeLimitOrder, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::TrimmedDerivativeLimitOrder, _impl_.price_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::TrimmedDerivativeLimitOrder, _impl_.quantity_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::TrimmedDerivativeLimitOrder, _impl_.margin_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::TrimmedDerivativeLimitOrder, _impl_.fillable_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::TrimmedDerivativeLimitOrder, _impl_.isbuy_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::TrimmedDerivativeLimitOrder, _impl_.order_hash_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryTraderDerivativeOrdersResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryTraderDerivativeOrdersResponse, _impl_.orders_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryAccountAddressDerivativeOrdersResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryAccountAddressDerivativeOrdersResponse, _impl_.orders_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryDerivativeOrdersByHashesRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryDerivativeOrdersByHashesRequest, _impl_.market_id_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryDerivativeOrdersByHashesRequest, _impl_.subaccount_id_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryDerivativeOrdersByHashesRequest, _impl_.order_hashes_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryDerivativeOrdersByHashesResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryDerivativeOrdersByHashesResponse, _impl_.orders_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryDerivativeMarketsRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryDerivativeMarketsRequest, _impl_.status_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryDerivativeMarketsRequest, _impl_.market_ids_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryDerivativeMarketsRequest, _impl_.with_mid_price_and_tob_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::PriceLevel, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::PriceLevel, _impl_.price_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::PriceLevel, _impl_.quantity_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::PerpetualMarketState, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::PerpetualMarketState, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::PerpetualMarketState, _impl_.market_info_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::PerpetualMarketState, _impl_.funding_info_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::FullDerivativeMarket, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::FullDerivativeMarket, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::FullDerivativeMarket, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::FullDerivativeMarket, _impl_.market_),
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::FullDerivativeMarket, _impl_.mark_price_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::FullDerivativeMarket, _impl_.mid_price_and_tob_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::FullDerivativeMarket, _impl_.info_),
    0,
    ~0u,
    ~0u,
    ~0u,
    1,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryDerivativeMarketsResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryDerivativeMarketsResponse, _impl_.markets_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryDerivativeMarketRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryDerivativeMarketRequest, _impl_.market_id_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryDerivativeMarketResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryDerivativeMarketResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryDerivativeMarketResponse, _impl_.market_),
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryDerivativeMarketAddressRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryDerivativeMarketAddressRequest, _impl_.market_id_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryDerivativeMarketAddressResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryDerivativeMarketAddressResponse, _impl_.address_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryDerivativeMarketAddressResponse, _impl_.subaccount_id_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QuerySubaccountTradeNonceRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QuerySubaccountTradeNonceRequest, _impl_.subaccount_id_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QuerySubaccountPositionsRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QuerySubaccountPositionsRequest, _impl_.subaccount_id_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QuerySubaccountPositionInMarketRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QuerySubaccountPositionInMarketRequest, _impl_.subaccount_id_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QuerySubaccountPositionInMarketRequest, _impl_.market_id_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QuerySubaccountEffectivePositionInMarketRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QuerySubaccountEffectivePositionInMarketRequest, _impl_.subaccount_id_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QuerySubaccountEffectivePositionInMarketRequest, _impl_.market_id_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QuerySubaccountOrderMetadataRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QuerySubaccountOrderMetadataRequest, _impl_.subaccount_id_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QuerySubaccountPositionsResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QuerySubaccountPositionsResponse, _impl_.state_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QuerySubaccountPositionInMarketResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QuerySubaccountPositionInMarketResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QuerySubaccountPositionInMarketResponse, _impl_.state_),
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::EffectivePosition, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::EffectivePosition, _impl_.is_long_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::EffectivePosition, _impl_.quantity_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::EffectivePosition, _impl_.entry_price_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::EffectivePosition, _impl_.effective_margin_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QuerySubaccountEffectivePositionInMarketResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QuerySubaccountEffectivePositionInMarketResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QuerySubaccountEffectivePositionInMarketResponse, _impl_.state_),
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryPerpetualMarketInfoRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryPerpetualMarketInfoRequest, _impl_.market_id_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryPerpetualMarketInfoResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryPerpetualMarketInfoResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryPerpetualMarketInfoResponse, _impl_.info_),
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryExpiryFuturesMarketInfoRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryExpiryFuturesMarketInfoRequest, _impl_.market_id_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryExpiryFuturesMarketInfoResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryExpiryFuturesMarketInfoResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryExpiryFuturesMarketInfoResponse, _impl_.info_),
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryPerpetualMarketFundingRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryPerpetualMarketFundingRequest, _impl_.market_id_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryPerpetualMarketFundingResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryPerpetualMarketFundingResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryPerpetualMarketFundingResponse, _impl_.state_),
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QuerySubaccountOrderMetadataResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QuerySubaccountOrderMetadataResponse, _impl_.metadata_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QuerySubaccountTradeNonceResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QuerySubaccountTradeNonceResponse, _impl_.nonce_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryModuleStateRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryModuleStateResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryModuleStateResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryModuleStateResponse, _impl_.state_),
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryPositionsRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryPositionsResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryPositionsResponse, _impl_.state_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryTradeRewardPointsRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryTradeRewardPointsRequest, _impl_.accounts_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryTradeRewardPointsRequest, _impl_.pending_pool_timestamp_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryTradeRewardPointsResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryTradeRewardPointsResponse, _impl_.account_trade_reward_points_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryTradeRewardCampaignRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryTradeRewardCampaignResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryTradeRewardCampaignResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryTradeRewardCampaignResponse, _impl_.trading_reward_campaign_info_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryTradeRewardCampaignResponse, _impl_.trading_reward_pool_campaign_schedule_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryTradeRewardCampaignResponse, _impl_.total_trade_reward_points_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryTradeRewardCampaignResponse, _impl_.pending_trading_reward_pool_campaign_schedule_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryTradeRewardCampaignResponse, _impl_.pending_total_trade_reward_points_),
    0,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryIsOptedOutOfRewardsRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryIsOptedOutOfRewardsRequest, _impl_.account_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryIsOptedOutOfRewardsResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryIsOptedOutOfRewardsResponse, _impl_.is_opted_out_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryOptedOutOfRewardsAccountsRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryOptedOutOfRewardsAccountsResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryOptedOutOfRewardsAccountsResponse, _impl_.accounts_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryFeeDiscountAccountInfoRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryFeeDiscountAccountInfoRequest, _impl_.account_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryFeeDiscountAccountInfoResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryFeeDiscountAccountInfoResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryFeeDiscountAccountInfoResponse, _impl_.tier_level_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryFeeDiscountAccountInfoResponse, _impl_.account_info_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryFeeDiscountAccountInfoResponse, _impl_.account_ttl_),
    ~0u,
    0,
    1,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryFeeDiscountScheduleRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryFeeDiscountScheduleResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryFeeDiscountScheduleResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryFeeDiscountScheduleResponse, _impl_.fee_discount_schedule_),
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryBalanceMismatchesRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryBalanceMismatchesRequest, _impl_.dust_factor_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::BalanceMismatch, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::BalanceMismatch, _impl_.subaccountid_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::BalanceMismatch, _impl_.denom_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::BalanceMismatch, _impl_.available_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::BalanceMismatch, _impl_.total_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::BalanceMismatch, _impl_.balance_hold_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::BalanceMismatch, _impl_.expected_total_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::BalanceMismatch, _impl_.difference_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryBalanceMismatchesResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryBalanceMismatchesResponse, _impl_.balance_mismatches_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryBalanceWithBalanceHoldsRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::BalanceWithMarginHold, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::BalanceWithMarginHold, _impl_.subaccountid_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::BalanceWithMarginHold, _impl_.denom_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::BalanceWithMarginHold, _impl_.available_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::BalanceWithMarginHold, _impl_.total_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::BalanceWithMarginHold, _impl_.balance_hold_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryBalanceWithBalanceHoldsResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryBalanceWithBalanceHoldsResponse, _impl_.balance_with_balance_holds_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryFeeDiscountTierStatisticsRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::TierStatistic, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::TierStatistic, _impl_.tier_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::TierStatistic, _impl_.count_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryFeeDiscountTierStatisticsResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryFeeDiscountTierStatisticsResponse, _impl_.statistics_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MitoVaultInfosRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MitoVaultInfosResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MitoVaultInfosResponse, _impl_.master_addresses_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MitoVaultInfosResponse, _impl_.derivative_addresses_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MitoVaultInfosResponse, _impl_.spot_addresses_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::MitoVaultInfosResponse, _impl_.cw20_addresses_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryMarketIDFromVaultRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryMarketIDFromVaultRequest, _impl_.vault_address_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryMarketIDFromVaultResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryMarketIDFromVaultResponse, _impl_.market_id_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryHistoricalTradeRecordsRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryHistoricalTradeRecordsRequest, _impl_.market_id_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryHistoricalTradeRecordsResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryHistoricalTradeRecordsResponse, _impl_.trade_records_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::TradeHistoryOptions, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::TradeHistoryOptions, _impl_.trade_grouping_sec_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::TradeHistoryOptions, _impl_.max_age_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::TradeHistoryOptions, _impl_.include_raw_history_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::TradeHistoryOptions, _impl_.include_metadata_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryMarketVolatilityRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryMarketVolatilityRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryMarketVolatilityRequest, _impl_.market_id_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryMarketVolatilityRequest, _impl_.trade_history_options_),
    ~0u,
    0,
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryMarketVolatilityResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryMarketVolatilityResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryMarketVolatilityResponse, _impl_.volatility_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryMarketVolatilityResponse, _impl_.history_metadata_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryMarketVolatilityResponse, _impl_.raw_history_),
    ~0u,
    0,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryBinaryMarketsRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryBinaryMarketsRequest, _impl_.status_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryBinaryMarketsResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryBinaryMarketsResponse, _impl_.markets_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryTraderDerivativeConditionalOrdersRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryTraderDerivativeConditionalOrdersRequest, _impl_.subaccount_id_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryTraderDerivativeConditionalOrdersRequest, _impl_.market_id_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::TrimmedDerivativeConditionalOrder, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::TrimmedDerivativeConditionalOrder, _impl_.price_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::TrimmedDerivativeConditionalOrder, _impl_.quantity_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::TrimmedDerivativeConditionalOrder, _impl_.margin_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::TrimmedDerivativeConditionalOrder, _impl_.triggerprice_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::TrimmedDerivativeConditionalOrder, _impl_.isbuy_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::TrimmedDerivativeConditionalOrder, _impl_.islimit_),
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::TrimmedDerivativeConditionalOrder, _impl_.order_hash_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryTraderDerivativeConditionalOrdersResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryTraderDerivativeConditionalOrdersResponse, _impl_.orders_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryMarketAtomicExecutionFeeMultiplierRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryMarketAtomicExecutionFeeMultiplierRequest, _impl_.market_id_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryMarketAtomicExecutionFeeMultiplierResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::QueryMarketAtomicExecutionFeeMultiplierResponse, _impl_.multiplier_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::injective::exchange::v1beta1::Subaccount)},
        { 10, -1, -1, sizeof(::injective::exchange::v1beta1::QuerySubaccountOrdersRequest)},
        { 20, -1, -1, sizeof(::injective::exchange::v1beta1::QuerySubaccountOrdersResponse)},
        { 30, 41, -1, sizeof(::injective::exchange::v1beta1::SubaccountOrderbookMetadataWithMarket)},
        { 44, -1, -1, sizeof(::injective::exchange::v1beta1::QueryExchangeParamsRequest)},
        { 52, 61, -1, sizeof(::injective::exchange::v1beta1::QueryExchangeParamsResponse)},
        { 62, 72, -1, sizeof(::injective::exchange::v1beta1::QuerySubaccountDepositsRequest)},
        { 74, 84, -1, sizeof(::injective::exchange::v1beta1::QuerySubaccountDepositsResponse_DepositsEntry_DoNotUse)},
        { 86, -1, -1, sizeof(::injective::exchange::v1beta1::QuerySubaccountDepositsResponse)},
        { 95, -1, -1, sizeof(::injective::exchange::v1beta1::QueryExchangeBalancesRequest)},
        { 103, -1, -1, sizeof(::injective::exchange::v1beta1::QueryExchangeBalancesResponse)},
        { 112, -1, -1, sizeof(::injective::exchange::v1beta1::QueryAggregateVolumeRequest)},
        { 121, -1, -1, sizeof(::injective::exchange::v1beta1::QueryAggregateVolumeResponse)},
        { 130, -1, -1, sizeof(::injective::exchange::v1beta1::QueryAggregateVolumesRequest)},
        { 140, -1, -1, sizeof(::injective::exchange::v1beta1::QueryAggregateVolumesResponse)},
        { 150, -1, -1, sizeof(::injective::exchange::v1beta1::QueryAggregateMarketVolumeRequest)},
        { 159, 168, -1, sizeof(::injective::exchange::v1beta1::QueryAggregateMarketVolumeResponse)},
        { 169, -1, -1, sizeof(::injective::exchange::v1beta1::QueryDenomDecimalRequest)},
        { 178, -1, -1, sizeof(::injective::exchange::v1beta1::QueryDenomDecimalResponse)},
        { 187, -1, -1, sizeof(::injective::exchange::v1beta1::QueryDenomDecimalsRequest)},
        { 196, -1, -1, sizeof(::injective::exchange::v1beta1::QueryDenomDecimalsResponse)},
        { 205, -1, -1, sizeof(::injective::exchange::v1beta1::QueryAggregateMarketVolumesRequest)},
        { 214, -1, -1, sizeof(::injective::exchange::v1beta1::QueryAggregateMarketVolumesResponse)},
        { 223, -1, -1, sizeof(::injective::exchange::v1beta1::QuerySubaccountDepositRequest)},
        { 233, 242, -1, sizeof(::injective::exchange::v1beta1::QuerySubaccountDepositResponse)},
        { 243, -1, -1, sizeof(::injective::exchange::v1beta1::QuerySpotMarketsRequest)},
        { 253, -1, -1, sizeof(::injective::exchange::v1beta1::QuerySpotMarketsResponse)},
        { 262, -1, -1, sizeof(::injective::exchange::v1beta1::QuerySpotMarketRequest)},
        { 271, 280, -1, sizeof(::injective::exchange::v1beta1::QuerySpotMarketResponse)},
        { 281, -1, -1, sizeof(::injective::exchange::v1beta1::QuerySpotOrderbookRequest)},
        { 294, -1, -1, sizeof(::injective::exchange::v1beta1::QuerySpotOrderbookResponse)},
        { 304, 314, -1, sizeof(::injective::exchange::v1beta1::FullSpotMarket)},
        { 316, -1, -1, sizeof(::injective::exchange::v1beta1::QueryFullSpotMarketsRequest)},
        { 327, -1, -1, sizeof(::injective::exchange::v1beta1::QueryFullSpotMarketsResponse)},
        { 336, -1, -1, sizeof(::injective::exchange::v1beta1::QueryFullSpotMarketRequest)},
        { 346, 355, -1, sizeof(::injective::exchange::v1beta1::QueryFullSpotMarketResponse)},
        { 356, -1, -1, sizeof(::injective::exchange::v1beta1::QuerySpotOrdersByHashesRequest)},
        { 367, -1, -1, sizeof(::injective::exchange::v1beta1::QuerySpotOrdersByHashesResponse)},
        { 376, -1, -1, sizeof(::injective::exchange::v1beta1::QueryTraderSpotOrdersRequest)},
        { 386, -1, -1, sizeof(::injective::exchange::v1beta1::QueryAccountAddressSpotOrdersRequest)},
        { 396, -1, -1, sizeof(::injective::exchange::v1beta1::TrimmedSpotLimitOrder)},
        { 409, -1, -1, sizeof(::injective::exchange::v1beta1::QueryTraderSpotOrdersResponse)},
        { 418, -1, -1, sizeof(::injective::exchange::v1beta1::QueryAccountAddressSpotOrdersResponse)},
        { 427, -1, -1, sizeof(::injective::exchange::v1beta1::QuerySpotMidPriceAndTOBRequest)},
        { 436, -1, -1, sizeof(::injective::exchange::v1beta1::QuerySpotMidPriceAndTOBResponse)},
        { 447, -1, -1, sizeof(::injective::exchange::v1beta1::QueryDerivativeMidPriceAndTOBRequest)},
        { 456, -1, -1, sizeof(::injective::exchange::v1beta1::QueryDerivativeMidPriceAndTOBResponse)},
        { 467, -1, -1, sizeof(::injective::exchange::v1beta1::QueryDerivativeOrderbookRequest)},
        { 478, -1, -1, sizeof(::injective::exchange::v1beta1::QueryDerivativeOrderbookResponse)},
        { 488, -1, -1, sizeof(::injective::exchange::v1beta1::QueryTraderSpotOrdersToCancelUpToAmountRequest)},
        { 502, -1, -1, sizeof(::injective::exchange::v1beta1::QueryTraderDerivativeOrdersToCancelUpToAmountRequest)},
        { 515, -1, -1, sizeof(::injective::exchange::v1beta1::QueryTraderDerivativeOrdersRequest)},
        { 525, -1, -1, sizeof(::injective::exchange::v1beta1::QueryAccountAddressDerivativeOrdersRequest)},
        { 535, -1, -1, sizeof(::injective::exchange::v1beta1::TrimmedDerivativeLimitOrder)},
        { 549, -1, -1, sizeof(::injective::exchange::v1beta1::QueryTraderDerivativeOrdersResponse)},
        { 558, -1, -1, sizeof(::injective::exchange::v1beta1::QueryAccountAddressDerivativeOrdersResponse)},
        { 567, -1, -1, sizeof(::injective::exchange::v1beta1::QueryDerivativeOrdersByHashesRequest)},
        { 578, -1, -1, sizeof(::injective::exchange::v1beta1::QueryDerivativeOrdersByHashesResponse)},
        { 587, -1, -1, sizeof(::injective::exchange::v1beta1::QueryDerivativeMarketsRequest)},
        { 598, -1, -1, sizeof(::injective::exchange::v1beta1::PriceLevel)},
        { 608, 618, -1, sizeof(::injective::exchange::v1beta1::PerpetualMarketState)},
        { 620, 634, -1, sizeof(::injective::exchange::v1beta1::FullDerivativeMarket)},
        { 639, -1, -1, sizeof(::injective::exchange::v1beta1::QueryDerivativeMarketsResponse)},
        { 648, -1, -1, sizeof(::injective::exchange::v1beta1::QueryDerivativeMarketRequest)},
        { 657, 666, -1, sizeof(::injective::exchange::v1beta1::QueryDerivativeMarketResponse)},
        { 667, -1, -1, sizeof(::injective::exchange::v1beta1::QueryDerivativeMarketAddressRequest)},
        { 676, -1, -1, sizeof(::injective::exchange::v1beta1::QueryDerivativeMarketAddressResponse)},
        { 686, -1, -1, sizeof(::injective::exchange::v1beta1::QuerySubaccountTradeNonceRequest)},
        { 695, -1, -1, sizeof(::injective::exchange::v1beta1::QuerySubaccountPositionsRequest)},
        { 704, -1, -1, sizeof(::injective::exchange::v1beta1::QuerySubaccountPositionInMarketRequest)},
        { 714, -1, -1, sizeof(::injective::exchange::v1beta1::QuerySubaccountEffectivePositionInMarketRequest)},
        { 724, -1, -1, sizeof(::injective::exchange::v1beta1::QuerySubaccountOrderMetadataRequest)},
        { 733, -1, -1, sizeof(::injective::exchange::v1beta1::QuerySubaccountPositionsResponse)},
        { 742, 751, -1, sizeof(::injective::exchange::v1beta1::QuerySubaccountPositionInMarketResponse)},
        { 752, -1, -1, sizeof(::injective::exchange::v1beta1::EffectivePosition)},
        { 764, 773, -1, sizeof(::injective::exchange::v1beta1::QuerySubaccountEffectivePositionInMarketResponse)},
        { 774, -1, -1, sizeof(::injective::exchange::v1beta1::QueryPerpetualMarketInfoRequest)},
        { 783, 792, -1, sizeof(::injective::exchange::v1beta1::QueryPerpetualMarketInfoResponse)},
        { 793, -1, -1, sizeof(::injective::exchange::v1beta1::QueryExpiryFuturesMarketInfoRequest)},
        { 802, 811, -1, sizeof(::injective::exchange::v1beta1::QueryExpiryFuturesMarketInfoResponse)},
        { 812, -1, -1, sizeof(::injective::exchange::v1beta1::QueryPerpetualMarketFundingRequest)},
        { 821, 830, -1, sizeof(::injective::exchange::v1beta1::QueryPerpetualMarketFundingResponse)},
        { 831, -1, -1, sizeof(::injective::exchange::v1beta1::QuerySubaccountOrderMetadataResponse)},
        { 840, -1, -1, sizeof(::injective::exchange::v1beta1::QuerySubaccountTradeNonceResponse)},
        { 849, -1, -1, sizeof(::injective::exchange::v1beta1::QueryModuleStateRequest)},
        { 857, 866, -1, sizeof(::injective::exchange::v1beta1::QueryModuleStateResponse)},
        { 867, -1, -1, sizeof(::injective::exchange::v1beta1::QueryPositionsRequest)},
        { 875, -1, -1, sizeof(::injective::exchange::v1beta1::QueryPositionsResponse)},
        { 884, -1, -1, sizeof(::injective::exchange::v1beta1::QueryTradeRewardPointsRequest)},
        { 894, -1, -1, sizeof(::injective::exchange::v1beta1::QueryTradeRewardPointsResponse)},
        { 903, -1, -1, sizeof(::injective::exchange::v1beta1::QueryTradeRewardCampaignRequest)},
        { 911, 924, -1, sizeof(::injective::exchange::v1beta1::QueryTradeRewardCampaignResponse)},
        { 929, -1, -1, sizeof(::injective::exchange::v1beta1::QueryIsOptedOutOfRewardsRequest)},
        { 938, -1, -1, sizeof(::injective::exchange::v1beta1::QueryIsOptedOutOfRewardsResponse)},
        { 947, -1, -1, sizeof(::injective::exchange::v1beta1::QueryOptedOutOfRewardsAccountsRequest)},
        { 955, -1, -1, sizeof(::injective::exchange::v1beta1::QueryOptedOutOfRewardsAccountsResponse)},
        { 964, -1, -1, sizeof(::injective::exchange::v1beta1::QueryFeeDiscountAccountInfoRequest)},
        { 973, 984, -1, sizeof(::injective::exchange::v1beta1::QueryFeeDiscountAccountInfoResponse)},
        { 987, -1, -1, sizeof(::injective::exchange::v1beta1::QueryFeeDiscountScheduleRequest)},
        { 995, 1004, -1, sizeof(::injective::exchange::v1beta1::QueryFeeDiscountScheduleResponse)},
        { 1005, -1, -1, sizeof(::injective::exchange::v1beta1::QueryBalanceMismatchesRequest)},
        { 1014, -1, -1, sizeof(::injective::exchange::v1beta1::BalanceMismatch)},
        { 1029, -1, -1, sizeof(::injective::exchange::v1beta1::QueryBalanceMismatchesResponse)},
        { 1038, -1, -1, sizeof(::injective::exchange::v1beta1::QueryBalanceWithBalanceHoldsRequest)},
        { 1046, -1, -1, sizeof(::injective::exchange::v1beta1::BalanceWithMarginHold)},
        { 1059, -1, -1, sizeof(::injective::exchange::v1beta1::QueryBalanceWithBalanceHoldsResponse)},
        { 1068, -1, -1, sizeof(::injective::exchange::v1beta1::QueryFeeDiscountTierStatisticsRequest)},
        { 1076, -1, -1, sizeof(::injective::exchange::v1beta1::TierStatistic)},
        { 1086, -1, -1, sizeof(::injective::exchange::v1beta1::QueryFeeDiscountTierStatisticsResponse)},
        { 1095, -1, -1, sizeof(::injective::exchange::v1beta1::MitoVaultInfosRequest)},
        { 1103, -1, -1, sizeof(::injective::exchange::v1beta1::MitoVaultInfosResponse)},
        { 1115, -1, -1, sizeof(::injective::exchange::v1beta1::QueryMarketIDFromVaultRequest)},
        { 1124, -1, -1, sizeof(::injective::exchange::v1beta1::QueryMarketIDFromVaultResponse)},
        { 1133, -1, -1, sizeof(::injective::exchange::v1beta1::QueryHistoricalTradeRecordsRequest)},
        { 1142, -1, -1, sizeof(::injective::exchange::v1beta1::QueryHistoricalTradeRecordsResponse)},
        { 1151, -1, -1, sizeof(::injective::exchange::v1beta1::TradeHistoryOptions)},
        { 1163, 1173, -1, sizeof(::injective::exchange::v1beta1::QueryMarketVolatilityRequest)},
        { 1175, 1186, -1, sizeof(::injective::exchange::v1beta1::QueryMarketVolatilityResponse)},
        { 1189, -1, -1, sizeof(::injective::exchange::v1beta1::QueryBinaryMarketsRequest)},
        { 1198, -1, -1, sizeof(::injective::exchange::v1beta1::QueryBinaryMarketsResponse)},
        { 1207, -1, -1, sizeof(::injective::exchange::v1beta1::QueryTraderDerivativeConditionalOrdersRequest)},
        { 1217, -1, -1, sizeof(::injective::exchange::v1beta1::TrimmedDerivativeConditionalOrder)},
        { 1232, -1, -1, sizeof(::injective::exchange::v1beta1::QueryTraderDerivativeConditionalOrdersResponse)},
        { 1241, -1, -1, sizeof(::injective::exchange::v1beta1::QueryMarketAtomicExecutionFeeMultiplierRequest)},
        { 1250, -1, -1, sizeof(::injective::exchange::v1beta1::QueryMarketAtomicExecutionFeeMultiplierResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::injective::exchange::v1beta1::_Subaccount_default_instance_._instance,
    &::injective::exchange::v1beta1::_QuerySubaccountOrdersRequest_default_instance_._instance,
    &::injective::exchange::v1beta1::_QuerySubaccountOrdersResponse_default_instance_._instance,
    &::injective::exchange::v1beta1::_SubaccountOrderbookMetadataWithMarket_default_instance_._instance,
    &::injective::exchange::v1beta1::_QueryExchangeParamsRequest_default_instance_._instance,
    &::injective::exchange::v1beta1::_QueryExchangeParamsResponse_default_instance_._instance,
    &::injective::exchange::v1beta1::_QuerySubaccountDepositsRequest_default_instance_._instance,
    &::injective::exchange::v1beta1::_QuerySubaccountDepositsResponse_DepositsEntry_DoNotUse_default_instance_._instance,
    &::injective::exchange::v1beta1::_QuerySubaccountDepositsResponse_default_instance_._instance,
    &::injective::exchange::v1beta1::_QueryExchangeBalancesRequest_default_instance_._instance,
    &::injective::exchange::v1beta1::_QueryExchangeBalancesResponse_default_instance_._instance,
    &::injective::exchange::v1beta1::_QueryAggregateVolumeRequest_default_instance_._instance,
    &::injective::exchange::v1beta1::_QueryAggregateVolumeResponse_default_instance_._instance,
    &::injective::exchange::v1beta1::_QueryAggregateVolumesRequest_default_instance_._instance,
    &::injective::exchange::v1beta1::_QueryAggregateVolumesResponse_default_instance_._instance,
    &::injective::exchange::v1beta1::_QueryAggregateMarketVolumeRequest_default_instance_._instance,
    &::injective::exchange::v1beta1::_QueryAggregateMarketVolumeResponse_default_instance_._instance,
    &::injective::exchange::v1beta1::_QueryDenomDecimalRequest_default_instance_._instance,
    &::injective::exchange::v1beta1::_QueryDenomDecimalResponse_default_instance_._instance,
    &::injective::exchange::v1beta1::_QueryDenomDecimalsRequest_default_instance_._instance,
    &::injective::exchange::v1beta1::_QueryDenomDecimalsResponse_default_instance_._instance,
    &::injective::exchange::v1beta1::_QueryAggregateMarketVolumesRequest_default_instance_._instance,
    &::injective::exchange::v1beta1::_QueryAggregateMarketVolumesResponse_default_instance_._instance,
    &::injective::exchange::v1beta1::_QuerySubaccountDepositRequest_default_instance_._instance,
    &::injective::exchange::v1beta1::_QuerySubaccountDepositResponse_default_instance_._instance,
    &::injective::exchange::v1beta1::_QuerySpotMarketsRequest_default_instance_._instance,
    &::injective::exchange::v1beta1::_QuerySpotMarketsResponse_default_instance_._instance,
    &::injective::exchange::v1beta1::_QuerySpotMarketRequest_default_instance_._instance,
    &::injective::exchange::v1beta1::_QuerySpotMarketResponse_default_instance_._instance,
    &::injective::exchange::v1beta1::_QuerySpotOrderbookRequest_default_instance_._instance,
    &::injective::exchange::v1beta1::_QuerySpotOrderbookResponse_default_instance_._instance,
    &::injective::exchange::v1beta1::_FullSpotMarket_default_instance_._instance,
    &::injective::exchange::v1beta1::_QueryFullSpotMarketsRequest_default_instance_._instance,
    &::injective::exchange::v1beta1::_QueryFullSpotMarketsResponse_default_instance_._instance,
    &::injective::exchange::v1beta1::_QueryFullSpotMarketRequest_default_instance_._instance,
    &::injective::exchange::v1beta1::_QueryFullSpotMarketResponse_default_instance_._instance,
    &::injective::exchange::v1beta1::_QuerySpotOrdersByHashesRequest_default_instance_._instance,
    &::injective::exchange::v1beta1::_QuerySpotOrdersByHashesResponse_default_instance_._instance,
    &::injective::exchange::v1beta1::_QueryTraderSpotOrdersRequest_default_instance_._instance,
    &::injective::exchange::v1beta1::_QueryAccountAddressSpotOrdersRequest_default_instance_._instance,
    &::injective::exchange::v1beta1::_TrimmedSpotLimitOrder_default_instance_._instance,
    &::injective::exchange::v1beta1::_QueryTraderSpotOrdersResponse_default_instance_._instance,
    &::injective::exchange::v1beta1::_QueryAccountAddressSpotOrdersResponse_default_instance_._instance,
    &::injective::exchange::v1beta1::_QuerySpotMidPriceAndTOBRequest_default_instance_._instance,
    &::injective::exchange::v1beta1::_QuerySpotMidPriceAndTOBResponse_default_instance_._instance,
    &::injective::exchange::v1beta1::_QueryDerivativeMidPriceAndTOBRequest_default_instance_._instance,
    &::injective::exchange::v1beta1::_QueryDerivativeMidPriceAndTOBResponse_default_instance_._instance,
    &::injective::exchange::v1beta1::_QueryDerivativeOrderbookRequest_default_instance_._instance,
    &::injective::exchange::v1beta1::_QueryDerivativeOrderbookResponse_default_instance_._instance,
    &::injective::exchange::v1beta1::_QueryTraderSpotOrdersToCancelUpToAmountRequest_default_instance_._instance,
    &::injective::exchange::v1beta1::_QueryTraderDerivativeOrdersToCancelUpToAmountRequest_default_instance_._instance,
    &::injective::exchange::v1beta1::_QueryTraderDerivativeOrdersRequest_default_instance_._instance,
    &::injective::exchange::v1beta1::_QueryAccountAddressDerivativeOrdersRequest_default_instance_._instance,
    &::injective::exchange::v1beta1::_TrimmedDerivativeLimitOrder_default_instance_._instance,
    &::injective::exchange::v1beta1::_QueryTraderDerivativeOrdersResponse_default_instance_._instance,
    &::injective::exchange::v1beta1::_QueryAccountAddressDerivativeOrdersResponse_default_instance_._instance,
    &::injective::exchange::v1beta1::_QueryDerivativeOrdersByHashesRequest_default_instance_._instance,
    &::injective::exchange::v1beta1::_QueryDerivativeOrdersByHashesResponse_default_instance_._instance,
    &::injective::exchange::v1beta1::_QueryDerivativeMarketsRequest_default_instance_._instance,
    &::injective::exchange::v1beta1::_PriceLevel_default_instance_._instance,
    &::injective::exchange::v1beta1::_PerpetualMarketState_default_instance_._instance,
    &::injective::exchange::v1beta1::_FullDerivativeMarket_default_instance_._instance,
    &::injective::exchange::v1beta1::_QueryDerivativeMarketsResponse_default_instance_._instance,
    &::injective::exchange::v1beta1::_QueryDerivativeMarketRequest_default_instance_._instance,
    &::injective::exchange::v1beta1::_QueryDerivativeMarketResponse_default_instance_._instance,
    &::injective::exchange::v1beta1::_QueryDerivativeMarketAddressRequest_default_instance_._instance,
    &::injective::exchange::v1beta1::_QueryDerivativeMarketAddressResponse_default_instance_._instance,
    &::injective::exchange::v1beta1::_QuerySubaccountTradeNonceRequest_default_instance_._instance,
    &::injective::exchange::v1beta1::_QuerySubaccountPositionsRequest_default_instance_._instance,
    &::injective::exchange::v1beta1::_QuerySubaccountPositionInMarketRequest_default_instance_._instance,
    &::injective::exchange::v1beta1::_QuerySubaccountEffectivePositionInMarketRequest_default_instance_._instance,
    &::injective::exchange::v1beta1::_QuerySubaccountOrderMetadataRequest_default_instance_._instance,
    &::injective::exchange::v1beta1::_QuerySubaccountPositionsResponse_default_instance_._instance,
    &::injective::exchange::v1beta1::_QuerySubaccountPositionInMarketResponse_default_instance_._instance,
    &::injective::exchange::v1beta1::_EffectivePosition_default_instance_._instance,
    &::injective::exchange::v1beta1::_QuerySubaccountEffectivePositionInMarketResponse_default_instance_._instance,
    &::injective::exchange::v1beta1::_QueryPerpetualMarketInfoRequest_default_instance_._instance,
    &::injective::exchange::v1beta1::_QueryPerpetualMarketInfoResponse_default_instance_._instance,
    &::injective::exchange::v1beta1::_QueryExpiryFuturesMarketInfoRequest_default_instance_._instance,
    &::injective::exchange::v1beta1::_QueryExpiryFuturesMarketInfoResponse_default_instance_._instance,
    &::injective::exchange::v1beta1::_QueryPerpetualMarketFundingRequest_default_instance_._instance,
    &::injective::exchange::v1beta1::_QueryPerpetualMarketFundingResponse_default_instance_._instance,
    &::injective::exchange::v1beta1::_QuerySubaccountOrderMetadataResponse_default_instance_._instance,
    &::injective::exchange::v1beta1::_QuerySubaccountTradeNonceResponse_default_instance_._instance,
    &::injective::exchange::v1beta1::_QueryModuleStateRequest_default_instance_._instance,
    &::injective::exchange::v1beta1::_QueryModuleStateResponse_default_instance_._instance,
    &::injective::exchange::v1beta1::_QueryPositionsRequest_default_instance_._instance,
    &::injective::exchange::v1beta1::_QueryPositionsResponse_default_instance_._instance,
    &::injective::exchange::v1beta1::_QueryTradeRewardPointsRequest_default_instance_._instance,
    &::injective::exchange::v1beta1::_QueryTradeRewardPointsResponse_default_instance_._instance,
    &::injective::exchange::v1beta1::_QueryTradeRewardCampaignRequest_default_instance_._instance,
    &::injective::exchange::v1beta1::_QueryTradeRewardCampaignResponse_default_instance_._instance,
    &::injective::exchange::v1beta1::_QueryIsOptedOutOfRewardsRequest_default_instance_._instance,
    &::injective::exchange::v1beta1::_QueryIsOptedOutOfRewardsResponse_default_instance_._instance,
    &::injective::exchange::v1beta1::_QueryOptedOutOfRewardsAccountsRequest_default_instance_._instance,
    &::injective::exchange::v1beta1::_QueryOptedOutOfRewardsAccountsResponse_default_instance_._instance,
    &::injective::exchange::v1beta1::_QueryFeeDiscountAccountInfoRequest_default_instance_._instance,
    &::injective::exchange::v1beta1::_QueryFeeDiscountAccountInfoResponse_default_instance_._instance,
    &::injective::exchange::v1beta1::_QueryFeeDiscountScheduleRequest_default_instance_._instance,
    &::injective::exchange::v1beta1::_QueryFeeDiscountScheduleResponse_default_instance_._instance,
    &::injective::exchange::v1beta1::_QueryBalanceMismatchesRequest_default_instance_._instance,
    &::injective::exchange::v1beta1::_BalanceMismatch_default_instance_._instance,
    &::injective::exchange::v1beta1::_QueryBalanceMismatchesResponse_default_instance_._instance,
    &::injective::exchange::v1beta1::_QueryBalanceWithBalanceHoldsRequest_default_instance_._instance,
    &::injective::exchange::v1beta1::_BalanceWithMarginHold_default_instance_._instance,
    &::injective::exchange::v1beta1::_QueryBalanceWithBalanceHoldsResponse_default_instance_._instance,
    &::injective::exchange::v1beta1::_QueryFeeDiscountTierStatisticsRequest_default_instance_._instance,
    &::injective::exchange::v1beta1::_TierStatistic_default_instance_._instance,
    &::injective::exchange::v1beta1::_QueryFeeDiscountTierStatisticsResponse_default_instance_._instance,
    &::injective::exchange::v1beta1::_MitoVaultInfosRequest_default_instance_._instance,
    &::injective::exchange::v1beta1::_MitoVaultInfosResponse_default_instance_._instance,
    &::injective::exchange::v1beta1::_QueryMarketIDFromVaultRequest_default_instance_._instance,
    &::injective::exchange::v1beta1::_QueryMarketIDFromVaultResponse_default_instance_._instance,
    &::injective::exchange::v1beta1::_QueryHistoricalTradeRecordsRequest_default_instance_._instance,
    &::injective::exchange::v1beta1::_QueryHistoricalTradeRecordsResponse_default_instance_._instance,
    &::injective::exchange::v1beta1::_TradeHistoryOptions_default_instance_._instance,
    &::injective::exchange::v1beta1::_QueryMarketVolatilityRequest_default_instance_._instance,
    &::injective::exchange::v1beta1::_QueryMarketVolatilityResponse_default_instance_._instance,
    &::injective::exchange::v1beta1::_QueryBinaryMarketsRequest_default_instance_._instance,
    &::injective::exchange::v1beta1::_QueryBinaryMarketsResponse_default_instance_._instance,
    &::injective::exchange::v1beta1::_QueryTraderDerivativeConditionalOrdersRequest_default_instance_._instance,
    &::injective::exchange::v1beta1::_TrimmedDerivativeConditionalOrder_default_instance_._instance,
    &::injective::exchange::v1beta1::_QueryTraderDerivativeConditionalOrdersResponse_default_instance_._instance,
    &::injective::exchange::v1beta1::_QueryMarketAtomicExecutionFeeMultiplierRequest_default_instance_._instance,
    &::injective::exchange::v1beta1::_QueryMarketAtomicExecutionFeeMultiplierResponse_default_instance_._instance,
};
const char descriptor_table_protodef_injective_2fexchange_2fv1beta1_2fquery_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n&injective/exchange/v1beta1/query.proto"
    "\022\032injective.exchange.v1beta1\032\034google/api"
    "/annotations.proto\032)injective/exchange/v"
    "1beta1/exchange.proto\032(injective/exchang"
    "e/v1beta1/genesis.proto\032%injective/oracl"
    "e/v1beta1/oracle.proto\032\024gogoproto/gogo.p"
    "roto\"O\n\nSubaccount\022\026\n\006trader\030\001 \001(\tR\006trad"
    "er\022)\n\020subaccount_nonce\030\002 \001(\rR\017subaccount"
    "Nonce\"`\n\034QuerySubaccountOrdersRequest\022#\n"
    "\rsubaccount_id\030\001 \001(\tR\014subaccountId\022\033\n\tma"
    "rket_id\030\002 \001(\tR\010marketId\"\301\001\n\035QuerySubacco"
    "untOrdersResponse\022N\n\nbuy_orders\030\001 \003(\0132/."
    "injective.exchange.v1beta1.SubaccountOrd"
    "erDataR\tbuyOrders\022P\n\013sell_orders\030\002 \003(\0132/"
    ".injective.exchange.v1beta1.SubaccountOr"
    "derDataR\nsellOrders\"\257\001\n%SubaccountOrderb"
    "ookMetadataWithMarket\022S\n\010metadata\030\001 \001(\0132"
    "7.injective.exchange.v1beta1.SubaccountO"
    "rderbookMetadataR\010metadata\022\033\n\tmarket_id\030"
    "\002 \001(\tR\010marketId\022\024\n\005isBuy\030\003 \001(\010R\005isBuy\"\034\n"
    "\032QueryExchangeParamsRequest\"_\n\033QueryExch"
    "angeParamsResponse\022@\n\006params\030\001 \001(\0132\".inj"
    "ective.exchange.v1beta1.ParamsB\004\310\336\037\000R\006pa"
    "rams\"\223\001\n\036QuerySubaccountDepositsRequest\022"
    "#\n\rsubaccount_id\030\001 \001(\tR\014subaccountId\022L\n\n"
    "subaccount\030\002 \001(\0132&.injective.exchange.v1"
    "beta1.SubaccountB\004\310\336\037\001R\nsubaccount\"\352\001\n\037Q"
    "uerySubaccountDepositsResponse\022e\n\010deposi"
    "ts\030\001 \003(\0132I.injective.exchange.v1beta1.Qu"
    "erySubaccountDepositsResponse.DepositsEn"
    "tryR\010deposits\032`\n\rDepositsEntry\022\020\n\003key\030\001 "
    "\001(\tR\003key\0229\n\005value\030\002 \001(\0132#.injective.exch"
    "ange.v1beta1.DepositR\005value:\0028\001\"\036\n\034Query"
    "ExchangeBalancesRequest\"f\n\035QueryExchange"
    "BalancesResponse\022E\n\010balances\030\001 \003(\0132#.inj"
    "ective.exchange.v1beta1.BalanceB\004\310\336\037\000R\010b"
    "alances\"7\n\033QueryAggregateVolumeRequest\022\030"
    "\n\007account\030\001 \001(\tR\007account\"u\n\034QueryAggrega"
    "teVolumeResponse\022U\n\021aggregate_volumes\030\001 "
    "\003(\0132(.injective.exchange.v1beta1.MarketV"
    "olumeR\020aggregateVolumes\"Y\n\034QueryAggregat"
    "eVolumesRequest\022\032\n\010accounts\030\001 \003(\tR\010accou"
    "nts\022\035\n\nmarket_ids\030\002 \003(\tR\tmarketIds\"\371\001\n\035Q"
    "ueryAggregateVolumesResponse\022t\n\031aggregat"
    "e_account_volumes\030\001 \003(\01328.injective.exch"
    "ange.v1beta1.AggregateAccountVolumeRecor"
    "dR\027aggregateAccountVolumes\022b\n\030aggregate_"
    "market_volumes\030\002 \003(\0132(.injective.exchang"
    "e.v1beta1.MarketVolumeR\026aggregateMarketV"
    "olumes\"@\n!QueryAggregateMarketVolumeRequ"
    "est\022\033\n\tmarket_id\030\001 \001(\tR\010marketId\"l\n\"Quer"
    "yAggregateMarketVolumeResponse\022F\n\006volume"
    "\030\001 \001(\0132(.injective.exchange.v1beta1.Volu"
    "meRecordB\004\310\336\037\000R\006volume\"0\n\030QueryDenomDeci"
    "malRequest\022\024\n\005denom\030\001 \001(\tR\005denom\"5\n\031Quer"
    "yDenomDecimalResponse\022\030\n\007decimal\030\001 \001(\004R\007"
    "decimal\"3\n\031QueryDenomDecimalsRequest\022\026\n\006"
    "denoms\030\001 \003(\tR\006denoms\"t\n\032QueryDenomDecima"
    "lsResponse\022V\n\016denom_decimals\030\001 \003(\0132).inj"
    "ective.exchange.v1beta1.DenomDecimalsB\004\310"
    "\336\037\000R\rdenomDecimals\"C\n\"QueryAggregateMark"
    "etVolumesRequest\022\035\n\nmarket_ids\030\001 \003(\tR\tma"
    "rketIds\"i\n#QueryAggregateMarketVolumesRe"
    "sponse\022B\n\007volumes\030\001 \003(\0132(.injective.exch"
    "ange.v1beta1.MarketVolumeR\007volumes\"Z\n\035Qu"
    "erySubaccountDepositRequest\022#\n\rsubaccoun"
    "t_id\030\001 \001(\tR\014subaccountId\022\024\n\005denom\030\002 \001(\tR"
    "\005denom\"a\n\036QuerySubaccountDepositResponse"
    "\022\?\n\010deposits\030\001 \001(\0132#.injective.exchange."
    "v1beta1.DepositR\010deposits\"P\n\027QuerySpotMa"
    "rketsRequest\022\026\n\006status\030\001 \001(\tR\006status\022\035\n\n"
    "market_ids\030\002 \003(\tR\tmarketIds\"\\\n\030QuerySpot"
    "MarketsResponse\022@\n\007markets\030\001 \003(\0132&.injec"
    "tive.exchange.v1beta1.SpotMarketR\007market"
    "s\"5\n\026QuerySpotMarketRequest\022\033\n\tmarket_id"
    "\030\001 \001(\tR\010marketId\"Y\n\027QuerySpotMarketRespo"
    "nse\022>\n\006market\030\001 \001(\0132&.injective.exchange"
    ".v1beta1.SpotMarketR\006market\"\354\002\n\031QuerySpo"
    "tOrderbookRequest\022\033\n\tmarket_id\030\001 \001(\tR\010ma"
    "rketId\022\024\n\005limit\030\002 \001(\004R\005limit\022D\n\norder_si"
    "de\030\003 \001(\0162%.injective.exchange.v1beta1.Or"
    "derSideR\torderSide\022j\n\031limit_cumulative_n"
    "otional\030\004 \001(\tB.\310\336\037\001\332\336\037&github.com/cosmos"
    "/cosmos-sdk/types.DecR\027limitCumulativeNo"
    "tional\022j\n\031limit_cumulative_quantity\030\005 \001("
    "\tB.\310\336\037\001\332\336\037&github.com/cosmos/cosmos-sdk/"
    "types.DecR\027limitCumulativeQuantity\"\270\001\n\032Q"
    "uerySpotOrderbookResponse\022K\n\020buys_price_"
    "level\030\001 \003(\0132!.injective.exchange.v1beta1"
    ".LevelR\016buysPriceLevel\022M\n\021sells_price_le"
    "vel\030\002 \003(\0132!.injective.exchange.v1beta1.L"
    "evelR\017sellsPriceLevel\"\255\001\n\016FullSpotMarket"
    "\022>\n\006market\030\001 \001(\0132&.injective.exchange.v1"
    "beta1.SpotMarketR\006market\022[\n\021mid_price_an"
    "d_tob\030\002 \001(\0132*.injective.exchange.v1beta1"
    ".MidPriceAndTOBB\004\310\336\037\001R\016midPriceAndTob\"\210\001"
    "\n\033QueryFullSpotMarketsRequest\022\026\n\006status\030"
    "\001 \001(\tR\006status\022\035\n\nmarket_ids\030\002 \003(\tR\tmarke"
    "tIds\0222\n\026with_mid_price_and_tob\030\003 \001(\010R\022wi"
    "thMidPriceAndTob\"d\n\034QueryFullSpotMarkets"
    "Response\022D\n\007markets\030\001 \003(\0132*.injective.ex"
    "change.v1beta1.FullSpotMarketR\007markets\"m"
    "\n\032QueryFullSpotMarketRequest\022\033\n\tmarket_i"
    "d\030\001 \001(\tR\010marketId\0222\n\026with_mid_price_and_"
    "tob\030\002 \001(\010R\022withMidPriceAndTob\"a\n\033QueryFu"
    "llSpotMarketResponse\022B\n\006market\030\001 \001(\0132*.i"
    "njective.exchange.v1beta1.FullSpotMarket"
    "R\006market\"\205\001\n\036QuerySpotOrdersByHashesRequ"
    "est\022\033\n\tmarket_id\030\001 \001(\tR\010marketId\022#\n\rsuba"
    "ccount_id\030\002 \001(\tR\014subaccountId\022!\n\014order_h"
    "ashes\030\003 \003(\tR\013orderHashes\"l\n\037QuerySpotOrd"
    "ersByHashesResponse\022I\n\006orders\030\001 \003(\01321.in"
    "jective.exchange.v1beta1.TrimmedSpotLimi"
    "tOrderR\006orders\"`\n\034QueryTraderSpotOrdersR"
    "equest\022\033\n\tmarket_id\030\001 \001(\tR\010marketId\022#\n\rs"
    "ubaccount_id\030\002 \001(\tR\014subaccountId\"l\n$Quer"
    "yAccountAddressSpotOrdersRequest\022\033\n\tmark"
    "et_id\030\001 \001(\tR\010marketId\022\'\n\017account_address"
    "\030\002 \001(\tR\016accountAddress\"\252\002\n\025TrimmedSpotLi"
    "mitOrder\022D\n\005price\030\001 \001(\tB.\310\336\037\000\332\336\037&github."
    "com/cosmos/cosmos-sdk/types.DecR\005price\022J"
    "\n\010quantity\030\002 \001(\tB.\310\336\037\000\332\336\037&github.com/cos"
    "mos/cosmos-sdk/types.DecR\010quantity\022J\n\010fi"
    "llable\030\003 \001(\tB.\310\336\037\000\332\336\037&github.com/cosmos/"
    "cosmos-sdk/types.DecR\010fillable\022\024\n\005isBuy\030"
    "\004 \001(\010R\005isBuy\022\035\n\norder_hash\030\005 \001(\tR\torderH"
    "ash\"j\n\035QueryTraderSpotOrdersResponse\022I\n\006"
    "orders\030\001 \003(\01321.injective.exchange.v1beta"
    "1.TrimmedSpotLimitOrderR\006orders\"r\n%Query"
    "AccountAddressSpotOrdersResponse\022I\n\006orde"
    "rs\030\001 \003(\01321.injective.exchange.v1beta1.Tr"
    "immedSpotLimitOrderR\006orders\"=\n\036QuerySpot"
    "MidPriceAndTOBRequest\022\033\n\tmarket_id\030\001 \001(\t"
    "R\010marketId\"\234\002\n\037QuerySpotMidPriceAndTOBRe"
    "sponse\022K\n\tmid_price\030\001 \001(\tB.\310\336\037\001\332\336\037&githu"
    "b.com/cosmos/cosmos-sdk/types.DecR\010midPr"
    "ice\022T\n\016best_buy_price\030\002 \001(\tB.\310\336\037\001\332\336\037&git"
    "hub.com/cosmos/cosmos-sdk/types.DecR\014bes"
    "tBuyPrice\022V\n\017best_sell_price\030\003 \001(\tB.\310\336\037\001"
    "\332\336\037&github.com/cosmos/cosmos-sdk/types.D"
    "ecR\rbestSellPrice\"C\n$QueryDerivativeMidP"
    "riceAndTOBRequest\022\033\n\tmarket_id\030\001 \001(\tR\010ma"
    "rketId\"\242\002\n%QueryDerivativeMidPriceAndTOB"
    "Response\022K\n\tmid_price\030\001 \001(\tB.\310\336\037\001\332\336\037&git"
    "hub.com/cosmos/cosmos-sdk/types.DecR\010mid"
    "Price\022T\n\016best_buy_price\030\002 \001(\tB.\310\336\037\001\332\336\037&g"
    "ithub.com/cosmos/cosmos-sdk/types.DecR\014b"
    "estBuyPrice\022V\n\017best_sell_price\030\003 \001(\tB.\310\336"
    "\037\001\332\336\037&github.com/cosmos/cosmos-sdk/types"
    ".DecR\rbestSellPrice\"\300\001\n\037QueryDerivativeO"
    "rderbookRequest\022\033\n\tmarket_id\030\001 \001(\tR\010mark"
    "etId\022\024\n\005limit\030\002 \001(\004R\005limit\022j\n\031limit_cumu"
    "lative_notional\030\003 \001(\tB.\310\336\037\001\332\336\037&github.co"
    "m/cosmos/cosmos-sdk/types.DecR\027limitCumu"
    "lativeNotional\"\276\001\n QueryDerivativeOrderb"
    "ookResponse\022K\n\020buys_price_level\030\001 \003(\0132!."
    "injective.exchange.v1beta1.LevelR\016buysPr"
    "iceLevel\022M\n\021sells_price_level\030\002 \003(\0132!.in"
    "jective.exchange.v1beta1.LevelR\017sellsPri"
    "ceLevel\"\275\003\n.QueryTraderSpotOrdersToCance"
    "lUpToAmountRequest\022\033\n\tmarket_id\030\001 \001(\tR\010m"
    "arketId\022#\n\rsubaccount_id\030\002 \001(\tR\014subaccou"
    "ntId\022O\n\013base_amount\030\003 \001(\tB.\310\336\037\000\332\336\037&githu"
    "b.com/cosmos/cosmos-sdk/types.DecR\nbaseA"
    "mount\022Q\n\014quote_amount\030\004 \001(\tB.\310\336\037\000\332\336\037&git"
    "hub.com/cosmos/cosmos-sdk/types.DecR\013quo"
    "teAmount\022L\n\010strategy\030\005 \001(\01620.injective.e"
    "xchange.v1beta1.CancellationStrategyR\010st"
    "rategy\022W\n\017reference_price\030\006 \001(\tB.\310\336\037\001\332\336\037"
    "&github.com/cosmos/cosmos-sdk/types.DecR"
    "\016referencePrice\"\362\002\n4QueryTraderDerivativ"
    "eOrdersToCancelUpToAmountRequest\022\033\n\tmark"
    "et_id\030\001 \001(\tR\010marketId\022#\n\rsubaccount_id\030\002"
    " \001(\tR\014subaccountId\022Q\n\014quote_amount\030\003 \001(\t"
    "B.\310\336\037\000\332\336\037&github.com/cosmos/cosmos-sdk/t"
    "ypes.DecR\013quoteAmount\022L\n\010strategy\030\004 \001(\0162"
    "0.injective.exchange.v1beta1.Cancellatio"
    "nStrategyR\010strategy\022W\n\017reference_price\030\005"
    " \001(\tB.\310\336\037\001\332\336\037&github.com/cosmos/cosmos-s"
    "dk/types.DecR\016referencePrice\"f\n\"QueryTra"
    "derDerivativeOrdersRequest\022\033\n\tmarket_id\030"
    "\001 \001(\tR\010marketId\022#\n\rsubaccount_id\030\002 \001(\tR\014"
    "subaccountId\"r\n*QueryAccountAddressDeriv"
    "ativeOrdersRequest\022\033\n\tmarket_id\030\001 \001(\tR\010m"
    "arketId\022\'\n\017account_address\030\002 \001(\tR\016accoun"
    "tAddress\"\203\003\n\033TrimmedDerivativeLimitOrder"
    "\022D\n\005price\030\001 \001(\tB.\310\336\037\000\332\336\037&github.com/cosm"
    "os/cosmos-sdk/types.DecR\005price\022J\n\010quanti"
    "ty\030\002 \001(\tB.\310\336\037\000\332\336\037&github.com/cosmos/cosm"
    "os-sdk/types.DecR\010quantity\022F\n\006margin\030\003 \001"
    "(\tB.\310\336\037\000\332\336\037&github.com/cosmos/cosmos-sdk"
    "/types.DecR\006margin\022J\n\010fillable\030\004 \001(\tB.\310\336"
    "\037\000\332\336\037&github.com/cosmos/cosmos-sdk/types"
    ".DecR\010fillable\022\037\n\005isBuy\030\005 \001(\010B\t\352\336\037\005isBuy"
    "R\005isBuy\022\035\n\norder_hash\030\006 \001(\tR\torderHash\"v"
    "\n#QueryTraderDerivativeOrdersResponse\022O\n"
    "\006orders\030\001 \003(\01327.injective.exchange.v1bet"
    "a1.TrimmedDerivativeLimitOrderR\006orders\"~"
    "\n+QueryAccountAddressDerivativeOrdersRes"
    "ponse\022O\n\006orders\030\001 \003(\01327.injective.exchan"
    "ge.v1beta1.TrimmedDerivativeLimitOrderR\006"
    "orders\"\213\001\n$QueryDerivativeOrdersByHashes"
    "Request\022\033\n\tmarket_id\030\001 \001(\tR\010marketId\022#\n\r"
    "subaccount_id\030\002 \001(\tR\014subaccountId\022!\n\014ord"
    "er_hashes\030\003 \003(\tR\013orderHashes\"x\n%QueryDer"
    "ivativeOrdersByHashesResponse\022O\n\006orders\030"
    "\001 \003(\01327.injective.exchange.v1beta1.Trimm"
    "edDerivativeLimitOrderR\006orders\"\212\001\n\035Query"
    "DerivativeMarketsRequest\022\026\n\006status\030\001 \001(\t"
    "R\006status\022\035\n\nmarket_ids\030\002 \003(\tR\tmarketIds\022"
    "2\n\026with_mid_price_and_tob\030\003 \001(\010R\022withMid"
    "PriceAndTob\"\236\001\n\nPriceLevel\022D\n\005price\030\001 \001("
    "\tB.\310\336\037\000\332\336\037&github.com/cosmos/cosmos-sdk/"
    "types.DecR\005price\022J\n\010quantity\030\002 \001(\tB.\310\336\037\000"
    "\332\336\037&github.com/cosmos/cosmos-sdk/types.D"
    "ecR\010quantity\"\277\001\n\024PerpetualMarketState\022P\n"
    "\013market_info\030\001 \001(\0132/.injective.exchange."
    "v1beta1.PerpetualMarketInfoR\nmarketInfo\022"
    "U\n\014funding_info\030\002 \001(\01322.injective.exchan"
    "ge.v1beta1.PerpetualMarketFundingR\013fundi"
    "ngInfo\"\305\003\n\024FullDerivativeMarket\022D\n\006marke"
    "t\030\001 \001(\0132,.injective.exchange.v1beta1.Der"
    "ivativeMarketR\006market\022Y\n\016perpetual_info\030"
    "\002 \001(\01320.injective.exchange.v1beta1.Perpe"
    "tualMarketStateH\000R\rperpetualInfo\022X\n\014futu"
    "res_info\030\003 \001(\01323.injective.exchange.v1be"
    "ta1.ExpiryFuturesMarketInfoH\000R\013futuresIn"
    "fo\022M\n\nmark_price\030\004 \001(\tB.\310\336\037\000\332\336\037&github.c"
    "om/cosmos/cosmos-sdk/types.DecR\tmarkPric"
    "e\022[\n\021mid_price_and_tob\030\005 \001(\0132*.injective"
    ".exchange.v1beta1.MidPriceAndTOBB\004\310\336\037\001R\016"
    "midPriceAndTobB\006\n\004info\"l\n\036QueryDerivativ"
    "eMarketsResponse\022J\n\007markets\030\001 \003(\01320.inje"
    "ctive.exchange.v1beta1.FullDerivativeMar"
    "ketR\007markets\";\n\034QueryDerivativeMarketReq"
    "uest\022\033\n\tmarket_id\030\001 \001(\tR\010marketId\"i\n\035Que"
    "ryDerivativeMarketResponse\022H\n\006market\030\001 \001"
    "(\01320.injective.exchange.v1beta1.FullDeri"
    "vativeMarketR\006market\"B\n#QueryDerivativeM"
    "arketAddressRequest\022\033\n\tmarket_id\030\001 \001(\tR\010"
    "marketId\"e\n$QueryDerivativeMarketAddress"
    "Response\022\030\n\007address\030\001 \001(\tR\007address\022#\n\rsu"
    "baccount_id\030\002 \001(\tR\014subaccountId\"G\n Query"
    "SubaccountTradeNonceRequest\022#\n\rsubaccoun"
    "t_id\030\001 \001(\tR\014subaccountId\"F\n\037QuerySubacco"
    "untPositionsRequest\022#\n\rsubaccount_id\030\001 \001"
    "(\tR\014subaccountId\"j\n&QuerySubaccountPosit"
    "ionInMarketRequest\022#\n\rsubaccount_id\030\001 \001("
    "\tR\014subaccountId\022\033\n\tmarket_id\030\002 \001(\tR\010mark"
    "etId\"s\n/QuerySubaccountEffectivePosition"
    "InMarketRequest\022#\n\rsubaccount_id\030\001 \001(\tR\014"
    "subaccountId\022\033\n\tmarket_id\030\002 \001(\tR\010marketI"
    "d\"J\n#QuerySubaccountOrderMetadataRequest"
    "\022#\n\rsubaccount_id\030\001 \001(\tR\014subaccountId\"n\n"
    " QuerySubaccountPositionsResponse\022J\n\005sta"
    "te\030\001 \003(\0132..injective.exchange.v1beta1.De"
    "rivativePositionB\004\310\336\037\000R\005state\"k\n\'QuerySu"
    "baccountPositionInMarketResponse\022@\n\005stat"
    "e\030\001 \001(\0132$.injective.exchange.v1beta1.Pos"
    "itionB\004\310\336\037\001R\005state\"\244\002\n\021EffectivePosition"
    "\022\027\n\007is_long\030\001 \001(\010R\006isLong\022J\n\010quantity\030\002 "
    "\001(\tB.\310\336\037\000\332\336\037&github.com/cosmos/cosmos-sd"
    "k/types.DecR\010quantity\022O\n\013entry_price\030\003 \001"
    "(\tB.\310\336\037\000\332\336\037&github.com/cosmos/cosmos-sdk"
    "/types.DecR\nentryPrice\022Y\n\020effective_marg"
    "in\030\004 \001(\tB.\310\336\037\000\332\336\037&github.com/cosmos/cosm"
    "os-sdk/types.DecR\017effectiveMargin\"}\n0Que"
    "rySubaccountEffectivePositionInMarketRes"
    "ponse\022I\n\005state\030\001 \001(\0132-.injective.exchang"
    "e.v1beta1.EffectivePositionB\004\310\336\037\001R\005state"
    "\">\n\037QueryPerpetualMarketInfoRequest\022\033\n\tm"
    "arket_id\030\001 \001(\tR\010marketId\"m\n QueryPerpetu"
    "alMarketInfoResponse\022I\n\004info\030\001 \001(\0132/.inj"
    "ective.exchange.v1beta1.PerpetualMarketI"
    "nfoB\004\310\336\037\000R\004info\"B\n#QueryExpiryFuturesMar"
    "ketInfoRequest\022\033\n\tmarket_id\030\001 \001(\tR\010marke"
    "tId\"u\n$QueryExpiryFuturesMarketInfoRespo"
    "nse\022M\n\004info\030\001 \001(\01323.injective.exchange.v"
    "1beta1.ExpiryFuturesMarketInfoB\004\310\336\037\000R\004in"
    "fo\"A\n\"QueryPerpetualMarketFundingRequest"
    "\022\033\n\tmarket_id\030\001 \001(\tR\010marketId\"u\n#QueryPe"
    "rpetualMarketFundingResponse\022N\n\005state\030\001 "
    "\001(\01322.injective.exchange.v1beta1.Perpetu"
    "alMarketFundingB\004\310\336\037\000R\005state\"\213\001\n$QuerySu"
    "baccountOrderMetadataResponse\022c\n\010metadat"
    "a\030\001 \003(\0132A.injective.exchange.v1beta1.Sub"
    "accountOrderbookMetadataWithMarketB\004\310\336\037\000"
    "R\010metadata\"9\n!QuerySubaccountTradeNonceR"
    "esponse\022\024\n\005nonce\030\001 \001(\rR\005nonce\"\031\n\027QueryMo"
    "duleStateRequest\"Z\n\030QueryModuleStateResp"
    "onse\022>\n\005state\030\001 \001(\0132(.injective.exchange"
    ".v1beta1.GenesisStateR\005state\"\027\n\025QueryPos"
    "itionsRequest\"d\n\026QueryPositionsResponse\022"
    "J\n\005state\030\001 \003(\0132..injective.exchange.v1be"
    "ta1.DerivativePositionB\004\310\336\037\000R\005state\"q\n\035Q"
    "ueryTradeRewardPointsRequest\022\032\n\010accounts"
    "\030\001 \003(\tR\010accounts\0224\n\026pending_pool_timesta"
    "mp\030\002 \001(\003R\024pendingPoolTimestamp\"\217\001\n\036Query"
    "TradeRewardPointsResponse\022m\n\033account_tra"
    "de_reward_points\030\001 \003(\tB.\310\336\037\000\332\336\037&github.c"
    "om/cosmos/cosmos-sdk/types.DecR\030accountT"
    "radeRewardPoints\"!\n\037QueryTradeRewardCamp"
    "aignRequest\"\224\005\n QueryTradeRewardCampaign"
    "Response\022v\n\034trading_reward_campaign_info"
    "\030\001 \001(\01325.injective.exchange.v1beta1.Trad"
    "ingRewardCampaignInfoR\031tradingRewardCamp"
    "aignInfo\022\200\001\n%trading_reward_pool_campaig"
    "n_schedule\030\002 \003(\0132..injective.exchange.v1"
    "beta1.CampaignRewardPoolR!tradingRewardP"
    "oolCampaignSchedule\022i\n\031total_trade_rewar"
    "d_points\030\003 \001(\tB.\310\336\037\000\332\336\037&github.com/cosmo"
    "s/cosmos-sdk/types.DecR\026totalTradeReward"
    "Points\022\217\001\n-pending_trading_reward_pool_c"
    "ampaign_schedule\030\004 \003(\0132..injective.excha"
    "nge.v1beta1.CampaignRewardPoolR(pendingT"
    "radingRewardPoolCampaignSchedule\022x\n!pend"
    "ing_total_trade_reward_points\030\005 \003(\tB.\310\336\037"
    "\000\332\336\037&github.com/cosmos/cosmos-sdk/types."
    "DecR\035pendingTotalTradeRewardPoints\";\n\037Qu"
    "eryIsOptedOutOfRewardsRequest\022\030\n\007account"
    "\030\001 \001(\tR\007account\"D\n QueryIsOptedOutOfRewa"
    "rdsResponse\022 \n\014is_opted_out\030\001 \001(\010R\nisOpt"
    "edOut\"\'\n%QueryOptedOutOfRewardsAccountsR"
    "equest\"D\n&QueryOptedOutOfRewardsAccounts"
    "Response\022\032\n\010accounts\030\001 \003(\tR\010accounts\">\n\""
    "QueryFeeDiscountAccountInfoRequest\022\030\n\007ac"
    "count\030\001 \001(\tR\007account\"\351\001\n#QueryFeeDiscoun"
    "tAccountInfoResponse\022\035\n\ntier_level\030\001 \001(\004"
    "R\ttierLevel\022R\n\014account_info\030\002 \001(\0132/.inje"
    "ctive.exchange.v1beta1.FeeDiscountTierIn"
    "foR\013accountInfo\022O\n\013account_ttl\030\003 \001(\0132..i"
    "njective.exchange.v1beta1.FeeDiscountTie"
    "rTTLR\naccountTtl\"!\n\037QueryFeeDiscountSche"
    "duleRequest\"\207\001\n QueryFeeDiscountSchedule"
    "Response\022c\n\025fee_discount_schedule\030\001 \001(\0132"
    "/.injective.exchange.v1beta1.FeeDiscount"
    "ScheduleR\023feeDiscountSchedule\"@\n\035QueryBa"
    "lanceMismatchesRequest\022\037\n\013dust_factor\030\001 "
    "\001(\003R\ndustFactor\"\331\003\n\017BalanceMismatch\022\"\n\014s"
    "ubaccountId\030\001 \001(\tR\014subaccountId\022\024\n\005denom"
    "\030\002 \001(\tR\005denom\022L\n\tavailable\030\003 \001(\tB.\310\336\037\000\332\336"
    "\037&github.com/cosmos/cosmos-sdk/types.Dec"
    "R\tavailable\022D\n\005total\030\004 \001(\tB.\310\336\037\000\332\336\037&gith"
    "ub.com/cosmos/cosmos-sdk/types.DecR\005tota"
    "l\022Q\n\014balance_hold\030\005 \001(\tB.\310\336\037\000\332\336\037&github."
    "com/cosmos/cosmos-sdk/types.DecR\013balance"
    "Hold\022U\n\016expected_total\030\006 \001(\tB.\310\336\037\000\332\336\037&gi"
    "thub.com/cosmos/cosmos-sdk/types.DecR\rex"
    "pectedTotal\022N\n\ndifference\030\007 \001(\tB.\310\336\037\000\332\336\037"
    "&github.com/cosmos/cosmos-sdk/types.DecR"
    "\ndifference\"|\n\036QueryBalanceMismatchesRes"
    "ponse\022Z\n\022balance_mismatches\030\001 \003(\0132+.inje"
    "ctive.exchange.v1beta1.BalanceMismatchR\021"
    "balanceMismatches\"%\n#QueryBalanceWithBal"
    "anceHoldsRequest\"\270\002\n\025BalanceWithMarginHo"
    "ld\022\"\n\014subaccountId\030\001 \001(\tR\014subaccountId\022\024"
    "\n\005denom\030\002 \001(\tR\005denom\022L\n\tavailable\030\003 \001(\tB"
    ".\310\336\037\000\332\336\037&github.com/cosmos/cosmos-sdk/ty"
    "pes.DecR\tavailable\022D\n\005total\030\004 \001(\tB.\310\336\037\000\332"
    "\336\037&github.com/cosmos/cosmos-sdk/types.De"
    "cR\005total\022Q\n\014balance_hold\030\005 \001(\tB.\310\336\037\000\332\336\037&"
    "github.com/cosmos/cosmos-sdk/types.DecR\013"
    "balanceHold\"\226\001\n$QueryBalanceWithBalanceH"
    "oldsResponse\022n\n\032balance_with_balance_hol"
    "ds\030\001 \003(\01321.injective.exchange.v1beta1.Ba"
    "lanceWithMarginHoldR\027balanceWithBalanceH"
    "olds\"\'\n%QueryFeeDiscountTierStatisticsRe"
    "quest\"9\n\rTierStatistic\022\022\n\004tier\030\001 \001(\004R\004ti"
    "er\022\024\n\005count\030\002 \001(\004R\005count\"s\n&QueryFeeDisc"
    "ountTierStatisticsResponse\022I\n\nstatistics"
    "\030\001 \003(\0132).injective.exchange.v1beta1.Tier"
    "StatisticR\nstatistics\"\027\n\025MitoVaultInfosR"
    "equest\"\304\001\n\026MitoVaultInfosResponse\022)\n\020mas"
    "ter_addresses\030\001 \003(\tR\017masterAddresses\0221\n\024"
    "derivative_addresses\030\002 \003(\tR\023derivativeAd"
    "dresses\022%\n\016spot_addresses\030\003 \003(\tR\rspotAdd"
    "resses\022%\n\016cw20_addresses\030\004 \003(\tR\rcw20Addr"
    "esses\"D\n\035QueryMarketIDFromVaultRequest\022#"
    "\n\rvault_address\030\001 \001(\tR\014vaultAddress\"=\n\036Q"
    "ueryMarketIDFromVaultResponse\022\033\n\tmarket_"
    "id\030\001 \001(\tR\010marketId\"A\n\"QueryHistoricalTra"
    "deRecordsRequest\022\033\n\tmarket_id\030\001 \001(\tR\010mar"
    "ketId\"t\n#QueryHistoricalTradeRecordsResp"
    "onse\022M\n\rtrade_records\030\001 \003(\0132(.injective."
    "exchange.v1beta1.TradeRecordsR\014tradeReco"
    "rds\"\267\001\n\023TradeHistoryOptions\022,\n\022trade_gro"
    "uping_sec\030\001 \001(\004R\020tradeGroupingSec\022\027\n\007max"
    "_age\030\002 \001(\004R\006maxAge\022.\n\023include_raw_histor"
    "y\030\004 \001(\010R\021includeRawHistory\022)\n\020include_me"
    "tadata\030\005 \001(\010R\017includeMetadata\"\240\001\n\034QueryM"
    "arketVolatilityRequest\022\033\n\tmarket_id\030\001 \001("
    "\tR\010marketId\022c\n\025trade_history_options\030\002 \001"
    "(\0132/.injective.exchange.v1beta1.TradeHis"
    "toryOptionsR\023tradeHistoryOptions\"\216\002\n\035Que"
    "ryMarketVolatilityResponse\022J\n\nvolatility"
    "\030\001 \001(\tB*\332\336\037&github.com/cosmos/cosmos-sdk"
    "/types.DecR\nvolatility\022W\n\020history_metada"
    "ta\030\002 \001(\0132,.injective.oracle.v1beta1.Meta"
    "dataStatisticsR\017historyMetadata\022H\n\013raw_h"
    "istory\030\003 \003(\0132\'.injective.exchange.v1beta"
    "1.TradeRecordR\nrawHistory\"3\n\031QueryBinary"
    "MarketsRequest\022\026\n\006status\030\001 \001(\tR\006status\"g"
    "\n\032QueryBinaryMarketsResponse\022I\n\007markets\030"
    "\001 \003(\0132/.injective.exchange.v1beta1.Binar"
    "yOptionsMarketR\007markets\"q\n-QueryTraderDe"
    "rivativeConditionalOrdersRequest\022#\n\rsuba"
    "ccount_id\030\001 \001(\tR\014subaccountId\022\033\n\tmarket_"
    "id\030\002 \001(\tR\010marketId\"\270\003\n!TrimmedDerivative"
    "ConditionalOrder\022D\n\005price\030\001 \001(\tB.\310\336\037\000\332\336\037"
    "&github.com/cosmos/cosmos-sdk/types.DecR"
    "\005price\022J\n\010quantity\030\002 \001(\tB.\310\336\037\000\332\336\037&github"
    ".com/cosmos/cosmos-sdk/types.DecR\010quanti"
    "ty\022F\n\006margin\030\003 \001(\tB.\310\336\037\000\332\336\037&github.com/c"
    "osmos/cosmos-sdk/types.DecR\006margin\022R\n\014tr"
    "iggerPrice\030\004 \001(\tB.\310\336\037\000\332\336\037&github.com/cos"
    "mos/cosmos-sdk/types.DecR\014triggerPrice\022\037"
    "\n\005isBuy\030\005 \001(\010B\t\352\336\037\005isBuyR\005isBuy\022%\n\007isLim"
    "it\030\006 \001(\010B\013\352\336\037\007isLimitR\007isLimit\022\035\n\norder_"
    "hash\030\007 \001(\tR\torderHash\"\207\001\n.QueryTraderDer"
    "ivativeConditionalOrdersResponse\022U\n\006orde"
    "rs\030\001 \003(\0132=.injective.exchange.v1beta1.Tr"
    "immedDerivativeConditionalOrderR\006orders\""
    "M\n.QueryMarketAtomicExecutionFeeMultipli"
    "erRequest\022\033\n\tmarket_id\030\001 \001(\tR\010marketId\"\201"
    "\001\n/QueryMarketAtomicExecutionFeeMultipli"
    "erResponse\022N\n\nmultiplier\030\001 \001(\tB.\310\336\037\000\332\336\037&"
    "github.com/cosmos/cosmos-sdk/types.DecR\n"
    "multiplier*4\n\tOrderSide\022\024\n\020Side_Unspecif"
    "ied\020\000\022\007\n\003Buy\020\001\022\010\n\004Sell\020\002*V\n\024Cancellation"
    "Strategy\022\024\n\020UnspecifiedOrder\020\000\022\023\n\017FromWo"
    "rstToBest\020\001\022\023\n\017FromBestToWorst\020\0022\315`\n\005Que"
    "ry\022\272\001\n\023QueryExchangeParams\0226.injective.e"
    "xchange.v1beta1.QueryExchangeParamsReque"
    "st\0327.injective.exchange.v1beta1.QueryExc"
    "hangeParamsResponse\"2\202\323\344\223\002,\022*/injective/"
    "exchange/v1beta1/exchangeParams\022\316\001\n\022Suba"
    "ccountDeposits\022:.injective.exchange.v1be"
    "ta1.QuerySubaccountDepositsRequest\032;.inj"
    "ective.exchange.v1beta1.QuerySubaccountD"
    "epositsResponse\"\?\202\323\344\223\0029\0227/injective/exch"
    "ange/v1beta1/exchange/subaccountDeposits"
    "\022\312\001\n\021SubaccountDeposit\0229.injective.excha"
    "nge.v1beta1.QuerySubaccountDepositReques"
    "t\032:.injective.exchange.v1beta1.QuerySuba"
    "ccountDepositResponse\">\202\323\344\223\0028\0226/injectiv"
    "e/exchange/v1beta1/exchange/subaccountDe"
    "posit\022\306\001\n\020ExchangeBalances\0228.injective.e"
    "xchange.v1beta1.QueryExchangeBalancesReq"
    "uest\0329.injective.exchange.v1beta1.QueryE"
    "xchangeBalancesResponse\"=\202\323\344\223\0027\0225/inject"
    "ive/exchange/v1beta1/exchange/exchangeBa"
    "lances\022\314\001\n\017AggregateVolume\0227.injective.e"
    "xchange.v1beta1.QueryAggregateVolumeRequ"
    "est\0328.injective.exchange.v1beta1.QueryAg"
    "gregateVolumeResponse\"F\202\323\344\223\002@\022>/injectiv"
    "e/exchange/v1beta1/exchange/aggregateVol"
    "ume/{account}\022\306\001\n\020AggregateVolumes\0228.inj"
    "ective.exchange.v1beta1.QueryAggregateVo"
    "lumesRequest\0329.injective.exchange.v1beta"
    "1.QueryAggregateVolumesResponse\"=\202\323\344\223\0027\022"
    "5/injective/exchange/v1beta1/exchange/ag"
    "gregateVolumes\022\346\001\n\025AggregateMarketVolume"
    "\022=.injective.exchange.v1beta1.QueryAggre"
    "gateMarketVolumeRequest\032>.injective.exch"
    "ange.v1beta1.QueryAggregateMarketVolumeR"
    "esponse\"N\202\323\344\223\002H\022F/injective/exchange/v1b"
    "eta1/exchange/aggregateMarketVolume/{mar"
    "ket_id}\022\336\001\n\026AggregateMarketVolumes\022>.inj"
    "ective.exchange.v1beta1.QueryAggregateMa"
    "rketVolumesRequest\032\?.injective.exchange."
    "v1beta1.QueryAggregateMarketVolumesRespo"
    "nse\"C\202\323\344\223\002=\022;/injective/exchange/v1beta1"
    "/exchange/aggregateMarketVolumes\022\277\001\n\014Den"
    "omDecimal\0224.injective.exchange.v1beta1.Q"
    "ueryDenomDecimalRequest\0325.injective.exch"
    "ange.v1beta1.QueryDenomDecimalResponse\"B"
    "\202\323\344\223\002<\022:/injective/exchange/v1beta1/exch"
    "ange/denom_decimal/{denom}\022\273\001\n\rDenomDeci"
    "mals\0225.injective.exchange.v1beta1.QueryD"
    "enomDecimalsRequest\0326.injective.exchange"
    ".v1beta1.QueryDenomDecimalsResponse\";\202\323\344"
    "\223\0025\0223/injective/exchange/v1beta1/exchang"
    "e/denom_decimals\022\252\001\n\013SpotMarkets\0223.injec"
    "tive.exchange.v1beta1.QuerySpotMarketsRe"
    "quest\0324.injective.exchange.v1beta1.Query"
    "SpotMarketsResponse\"0\202\323\344\223\002*\022(/injective/"
    "exchange/v1beta1/spot/markets\022\263\001\n\nSpotMa"
    "rket\0222.injective.exchange.v1beta1.QueryS"
    "potMarketRequest\0323.injective.exchange.v1"
    "beta1.QuerySpotMarketResponse\"<\202\323\344\223\0026\0224/"
    "injective/exchange/v1beta1/spot/markets/"
    "{market_id}\022\273\001\n\017FullSpotMarkets\0227.inject"
    "ive.exchange.v1beta1.QueryFullSpotMarket"
    "sRequest\0328.injective.exchange.v1beta1.Qu"
    "eryFullSpotMarketsResponse\"5\202\323\344\223\002/\022-/inj"
    "ective/exchange/v1beta1/spot/full_market"
    "s\022\303\001\n\016FullSpotMarket\0226.injective.exchang"
    "e.v1beta1.QueryFullSpotMarketRequest\0327.i"
    "njective.exchange.v1beta1.QueryFullSpotM"
    "arketResponse\"@\202\323\344\223\002:\0228/injective/exchan"
    "ge/v1beta1/spot/full_market/{market_id}\022"
    "\276\001\n\rSpotOrderbook\0225.injective.exchange.v"
    "1beta1.QuerySpotOrderbookRequest\0326.injec"
    "tive.exchange.v1beta1.QuerySpotOrderbook"
    "Response\">\202\323\344\223\0028\0226/injective/exchange/v1"
    "beta1/spot/orderbook/{market_id}\022\324\001\n\020Tra"
    "derSpotOrders\0228.injective.exchange.v1bet"
    "a1.QueryTraderSpotOrdersRequest\0329.inject"
    "ive.exchange.v1beta1.QueryTraderSpotOrde"
    "rsResponse\"K\202\323\344\223\002E\022C/injective/exchange/"
    "v1beta1/spot/orders/{market_id}/{subacco"
    "unt_id}\022\366\001\n\030AccountAddressSpotOrders\022@.i"
    "njective.exchange.v1beta1.QueryAccountAd"
    "dressSpotOrdersRequest\032A.injective.excha"
    "nge.v1beta1.QueryAccountAddressSpotOrder"
    "sResponse\"U\202\323\344\223\002O\022M/injective/exchange/v"
    "1beta1/spot/orders/{market_id}/account/{"
    "account_address}\022\344\001\n\022SpotOrdersByHashes\022"
    ":.injective.exchange.v1beta1.QuerySpotOr"
    "dersByHashesRequest\032;.injective.exchange"
    ".v1beta1.QuerySpotOrdersByHashesResponse"
    "\"U\202\323\344\223\002O\022M/injective/exchange/v1beta1/sp"
    "ot/orders_by_hashes/{market_id}/{subacco"
    "unt_id}\022\303\001\n\020SubaccountOrders\0228.injective"
    ".exchange.v1beta1.QuerySubaccountOrdersR"
    "equest\0329.injective.exchange.v1beta1.Quer"
    "ySubaccountOrdersResponse\":\202\323\344\223\0024\0222/inje"
    "ctive/exchange/v1beta1/orders/{subaccoun"
    "t_id}\022\347\001\n\031TraderSpotTransientOrders\0228.in"
    "jective.exchange.v1beta1.QueryTraderSpot"
    "OrdersRequest\0329.injective.exchange.v1bet"
    "a1.QueryTraderSpotOrdersResponse\"U\202\323\344\223\002O"
    "\022M/injective/exchange/v1beta1/spot/trans"
    "ient_orders/{market_id}/{subaccount_id}\022"
    "\325\001\n\022SpotMidPriceAndTOB\022:.injective.excha"
    "nge.v1beta1.QuerySpotMidPriceAndTOBReque"
    "st\032;.injective.exchange.v1beta1.QuerySpo"
    "tMidPriceAndTOBResponse\"F\202\323\344\223\002@\022>/inject"
    "ive/exchange/v1beta1/spot/mid_price_and_"
    "tob/{market_id}\022\355\001\n\030DerivativeMidPriceAn"
    "dTOB\022@.injective.exchange.v1beta1.QueryD"
    "erivativeMidPriceAndTOBRequest\032A.injecti"
    "ve.exchange.v1beta1.QueryDerivativeMidPr"
    "iceAndTOBResponse\"L\202\323\344\223\002F\022D/injective/ex"
    "change/v1beta1/derivative/mid_price_and_"
    "tob/{market_id}\022\326\001\n\023DerivativeOrderbook\022"
    ";.injective.exchange.v1beta1.QueryDeriva"
    "tiveOrderbookRequest\032<.injective.exchang"
    "e.v1beta1.QueryDerivativeOrderbookRespon"
    "se\"D\202\323\344\223\002>\022</injective/exchange/v1beta1/"
    "derivative/orderbook/{market_id}\022\354\001\n\026Tra"
    "derDerivativeOrders\022>.injective.exchange"
    ".v1beta1.QueryTraderDerivativeOrdersRequ"
    "est\032\?.injective.exchange.v1beta1.QueryTr"
    "aderDerivativeOrdersResponse\"Q\202\323\344\223\002K\022I/i"
    "njective/exchange/v1beta1/derivative/ord"
    "ers/{market_id}/{subaccount_id}\022\216\002\n\036Acco"
    "untAddressDerivativeOrders\022F.injective.e"
    "xchange.v1beta1.QueryAccountAddressDeriv"
    "ativeOrdersRequest\032G.injective.exchange."
    "v1beta1.QueryAccountAddressDerivativeOrd"
    "ersResponse\"[\202\323\344\223\002U\022S/injective/exchange"
    "/v1beta1/derivative/orders/{market_id}/a"
    "ccount/{account_address}\022\374\001\n\030DerivativeO"
    "rdersByHashes\022@.injective.exchange.v1bet"
    "a1.QueryDerivativeOrdersByHashesRequest\032"
    "A.injective.exchange.v1beta1.QueryDeriva"
    "tiveOrdersByHashesResponse\"[\202\323\344\223\002U\022S/inj"
    "ective/exchange/v1beta1/derivative/order"
    "s_by_hashes/{market_id}/{subaccount_id}\022"
    "\377\001\n\037TraderDerivativeTransientOrders\022>.in"
    "jective.exchange.v1beta1.QueryTraderDeri"
    "vativeOrdersRequest\032\?.injective.exchange"
    ".v1beta1.QueryTraderDerivativeOrdersResp"
    "onse\"[\202\323\344\223\002U\022S/injective/exchange/v1beta"
    "1/derivative/transient_orders/{market_id"
    "}/{subaccount_id}\022\302\001\n\021DerivativeMarkets\022"
    "9.injective.exchange.v1beta1.QueryDeriva"
    "tiveMarketsRequest\032:.injective.exchange."
    "v1beta1.QueryDerivativeMarketsResponse\"6"
    "\202\323\344\223\0020\022./injective/exchange/v1beta1/deri"
    "vative/markets\022\313\001\n\020DerivativeMarket\0228.in"
    "jective.exchange.v1beta1.QueryDerivative"
    "MarketRequest\0329.injective.exchange.v1bet"
    "a1.QueryDerivativeMarketResponse\"B\202\323\344\223\002<"
    "\022:/injective/exchange/v1beta1/derivative"
    "/markets/{market_id}\022\347\001\n\027DerivativeMarke"
    "tAddress\022\?.injective.exchange.v1beta1.Qu"
    "eryDerivativeMarketAddressRequest\032@.inje"
    "ctive.exchange.v1beta1.QueryDerivativeMa"
    "rketAddressResponse\"I\202\323\344\223\002C\022A/injective/"
    "exchange/v1beta1/derivative/market_addre"
    "ss/{market_id}\022\321\001\n\024SubaccountTradeNonce\022"
    "<.injective.exchange.v1beta1.QuerySubacc"
    "ountTradeNonceRequest\032=.injective.exchan"
    "ge.v1beta1.QuerySubaccountTradeNonceResp"
    "onse\"<\202\323\344\223\0026\0224/injective/exchange/v1beta"
    "1/exchange/{subaccount_id}\022\262\001\n\023ExchangeM"
    "oduleState\0223.injective.exchange.v1beta1."
    "QueryModuleStateRequest\0324.injective.exch"
    "ange.v1beta1.QueryModuleStateResponse\"0\202"
    "\323\344\223\002*\022(/injective/exchange/v1beta1/modul"
    "e_state\022\241\001\n\tPositions\0221.injective.exchan"
    "ge.v1beta1.QueryPositionsRequest\0322.injec"
    "tive.exchange.v1beta1.QueryPositionsResp"
    "onse\"-\202\323\344\223\002\'\022%/injective/exchange/v1beta"
    "1/positions\022\317\001\n\023SubaccountPositions\022;.in"
    "jective.exchange.v1beta1.QuerySubaccount"
    "PositionsRequest\032<.injective.exchange.v1"
    "beta1.QuerySubaccountPositionsResponse\"="
    "\202\323\344\223\0027\0225/injective/exchange/v1beta1/posi"
    "tions/{subaccount_id}\022\360\001\n\032SubaccountPosi"
    "tionInMarket\022B.injective.exchange.v1beta"
    "1.QuerySubaccountPositionInMarketRequest"
    "\032C.injective.exchange.v1beta1.QuerySubac"
    "countPositionInMarketResponse\"I\202\323\344\223\002C\022A/"
    "injective/exchange/v1beta1/positions/{su"
    "baccount_id}/{market_id}\022\225\002\n#SubaccountE"
    "ffectivePositionInMarket\022K.injective.exc"
    "hange.v1beta1.QuerySubaccountEffectivePo"
    "sitionInMarketRequest\032L.injective.exchan"
    "ge.v1beta1.QuerySubaccountEffectivePosit"
    "ionInMarketResponse\"S\202\323\344\223\002M\022K/injective/"
    "exchange/v1beta1/effective_positions/{su"
    "baccount_id}/{market_id}\022\327\001\n\023PerpetualMa"
    "rketInfo\022;.injective.exchange.v1beta1.Qu"
    "eryPerpetualMarketInfoRequest\032<.injectiv"
    "e.exchange.v1beta1.QueryPerpetualMarketI"
    "nfoResponse\"E\202\323\344\223\002\?\022=/injective/exchange"
    "/v1beta1/perpetual_market_info/{market_i"
    "d}\022\340\001\n\027ExpiryFuturesMarketInfo\022\?.injecti"
    "ve.exchange.v1beta1.QueryExpiryFuturesMa"
    "rketInfoRequest\032@.injective.exchange.v1b"
    "eta1.QueryExpiryFuturesMarketInfoRespons"
    "e\"B\202\323\344\223\002<\022:/injective/exchange/v1beta1/e"
    "xpiry_market_info/{market_id}\022\343\001\n\026Perpet"
    "ualMarketFunding\022>.injective.exchange.v1"
    "beta1.QueryPerpetualMarketFundingRequest"
    "\032\?.injective.exchange.v1beta1.QueryPerpe"
    "tualMarketFundingResponse\"H\202\323\344\223\002B\022@/inje"
    "ctive/exchange/v1beta1/perpetual_market_"
    "funding/{market_id}\022\340\001\n\027SubaccountOrderM"
    "etadata\022\?.injective.exchange.v1beta1.Que"
    "rySubaccountOrderMetadataRequest\032@.injec"
    "tive.exchange.v1beta1.QuerySubaccountOrd"
    "erMetadataResponse\"B\202\323\344\223\002<\022:/injective/e"
    "xchange/v1beta1/order_metadata/{subaccou"
    "nt_id}\022\303\001\n\021TradeRewardPoints\0229.injective"
    ".exchange.v1beta1.QueryTradeRewardPoints"
    "Request\032:.injective.exchange.v1beta1.Que"
    "ryTradeRewardPointsResponse\"7\202\323\344\223\0021\022//in"
    "jective/exchange/v1beta1/trade_reward_po"
    "ints\022\322\001\n\030PendingTradeRewardPoints\0229.inje"
    "ctive.exchange.v1beta1.QueryTradeRewardP"
    "ointsRequest\032:.injective.exchange.v1beta"
    "1.QueryTradeRewardPointsResponse\"\?\202\323\344\223\0029"
    "\0227/injective/exchange/v1beta1/pending_tr"
    "ade_reward_points\022\313\001\n\023TradeRewardCampaig"
    "n\022;.injective.exchange.v1beta1.QueryTrad"
    "eRewardCampaignRequest\032<.injective.excha"
    "nge.v1beta1.QueryTradeRewardCampaignResp"
    "onse\"9\202\323\344\223\0023\0221/injective/exchange/v1beta"
    "1/trade_reward_campaign\022\342\001\n\026FeeDiscountA"
    "ccountInfo\022>.injective.exchange.v1beta1."
    "QueryFeeDiscountAccountInfoRequest\032\?.inj"
    "ective.exchange.v1beta1.QueryFeeDiscount"
    "AccountInfoResponse\"G\202\323\344\223\002A\022\?/injective/"
    "exchange/v1beta1/fee_discount_account_in"
    "fo/{account}\022\313\001\n\023FeeDiscountSchedule\022;.i"
    "njective.exchange.v1beta1.QueryFeeDiscou"
    "ntScheduleRequest\032<.injective.exchange.v"
    "1beta1.QueryFeeDiscountScheduleResponse\""
    "9\202\323\344\223\0023\0221/injective/exchange/v1beta1/fee"
    "_discount_schedule\022\320\001\n\021BalanceMismatches"
    "\0229.injective.exchange.v1beta1.QueryBalan"
    "ceMismatchesRequest\032:.injective.exchange"
    ".v1beta1.QueryBalanceMismatchesResponse\""
    "D\202\323\344\223\002>\022</injective/exchange/v1beta1/bal"
    "ance_mismatches/{dust_factor}\022\335\001\n\027Balanc"
    "eWithBalanceHolds\022\?.injective.exchange.v"
    "1beta1.QueryBalanceWithBalanceHoldsReque"
    "st\032@.injective.exchange.v1beta1.QueryBal"
    "anceWithBalanceHoldsResponse\"\?\202\323\344\223\0029\0227/i"
    "njective/exchange/v1beta1/balances_with_"
    "balance_holds\022\337\001\n\031FeeDiscountTierStatist"
    "ics\022A.injective.exchange.v1beta1.QueryFe"
    "eDiscountTierStatisticsRequest\032B.injecti"
    "ve.exchange.v1beta1.QueryFeeDiscountTier"
    "StatisticsResponse\";\202\323\344\223\0025\0223/injective/e"
    "xchange/v1beta1/fee_discount_tier_stats\022"
    "\255\001\n\016MitoVaultInfos\0221.injective.exchange."
    "v1beta1.MitoVaultInfosRequest\0322.injectiv"
    "e.exchange.v1beta1.MitoVaultInfosRespons"
    "e\"4\202\323\344\223\002.\022,/injective/exchange/v1beta1/m"
    "ito_vault_infos\022\324\001\n\026QueryMarketIDFromVau"
    "lt\0229.injective.exchange.v1beta1.QueryMar"
    "ketIDFromVaultRequest\032:.injective.exchan"
    "ge.v1beta1.QueryMarketIDFromVaultRespons"
    "e\"C\202\323\344\223\002=\022;/injective/exchange/v1beta1/v"
    "ault_market_id/{vault_address}\022\327\001\n\026Histo"
    "ricalTradeRecords\022>.injective.exchange.v"
    "1beta1.QueryHistoricalTradeRecordsReques"
    "t\032\?.injective.exchange.v1beta1.QueryHist"
    "oricalTradeRecordsResponse\"<\202\323\344\223\0026\0224/inj"
    "ective/exchange/v1beta1/historical_trade"
    "_records\022\327\001\n\023IsOptedOutOfRewards\022;.injec"
    "tive.exchange.v1beta1.QueryIsOptedOutOfR"
    "ewardsRequest\032<.injective.exchange.v1bet"
    "a1.QueryIsOptedOutOfRewardsResponse\"E\202\323\344"
    "\223\002\?\022=/injective/exchange/v1beta1/is_opte"
    "d_out_of_rewards/{account}\022\345\001\n\031OptedOutO"
    "fRewardsAccounts\022A.injective.exchange.v1"
    "beta1.QueryOptedOutOfRewardsAccountsRequ"
    "est\032B.injective.exchange.v1beta1.QueryOp"
    "tedOutOfRewardsAccountsResponse\"A\202\323\344\223\002;\022"
    "9/injective/exchange/v1beta1/opted_out_o"
    "f_rewards_accounts\022\312\001\n\020MarketVolatility\022"
    "8.injective.exchange.v1beta1.QueryMarket"
    "VolatilityRequest\0329.injective.exchange.v"
    "1beta1.QueryMarketVolatilityResponse\"A\202\323"
    "\344\223\002;\0229/injective/exchange/v1beta1/market"
    "_volatility/{market_id}\022\301\001\n\024BinaryOption"
    "sMarkets\0225.injective.exchange.v1beta1.Qu"
    "eryBinaryMarketsRequest\0326.injective.exch"
    "ange.v1beta1.QueryBinaryMarketsResponse\""
    ":\202\323\344\223\0024\0222/injective/exchange/v1beta1/bin"
    "ary_options/markets\022\231\002\n!TraderDerivative"
    "ConditionalOrders\022I.injective.exchange.v"
    "1beta1.QueryTraderDerivativeConditionalO"
    "rdersRequest\032J.injective.exchange.v1beta"
    "1.QueryTraderDerivativeConditionalOrders"
    "Response\"]\202\323\344\223\002W\022U/injective/exchange/v1"
    "beta1/derivative/orders/conditional/{mar"
    "ket_id}/{subaccount_id}\022\376\001\n\"MarketAtomic"
    "ExecutionFeeMultiplier\022J.injective.excha"
    "nge.v1beta1.QueryMarketAtomicExecutionFe"
    "eMultiplierRequest\032K.injective.exchange."
    "v1beta1.QueryMarketAtomicExecutionFeeMul"
    "tiplierResponse\"\?\202\323\344\223\0029\0227/injective/exch"
    "ange/v1beta1/atomic_order_fee_multiplier"
    "B\206\002\n\036com.injective.exchange.v1beta1B\nQue"
    "ryProtoP\001ZNgithub.com/InjectiveLabs/inje"
    "ctive-core/injective-chain/modules/excha"
    "nge/types\242\002\003IEX\252\002\032Injective.Exchange.V1b"
    "eta1\312\002\032Injective\\Exchange\\V1beta1\342\002&Inje"
    "ctive\\Exchange\\V1beta1\\GPBMetadata\352\002\034Inj"
    "ective::Exchange::V1beta1b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_deps[5] =
    {
        &::descriptor_table_gogoproto_2fgogo_2eproto,
        &::descriptor_table_google_2fapi_2fannotations_2eproto,
        &::descriptor_table_injective_2fexchange_2fv1beta1_2fexchange_2eproto,
        &::descriptor_table_injective_2fexchange_2fv1beta1_2fgenesis_2eproto,
        &::descriptor_table_injective_2foracle_2fv1beta1_2foracle_2eproto,
};
static ::absl::once_flag descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto = {
    false,
    false,
    29873,
    descriptor_table_protodef_injective_2fexchange_2fv1beta1_2fquery_2eproto,
    "injective/exchange/v1beta1/query.proto",
    &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_once,
    descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_deps,
    5,
    125,
    schemas,
    file_default_instances,
    TableStruct_injective_2fexchange_2fv1beta1_2fquery_2eproto::offsets,
    file_level_metadata_injective_2fexchange_2fv1beta1_2fquery_2eproto,
    file_level_enum_descriptors_injective_2fexchange_2fv1beta1_2fquery_2eproto,
    file_level_service_descriptors_injective_2fexchange_2fv1beta1_2fquery_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_getter() {
  return &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_injective_2fexchange_2fv1beta1_2fquery_2eproto(&descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto);
namespace injective {
namespace exchange {
namespace v1beta1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OrderSide_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto);
  return file_level_enum_descriptors_injective_2fexchange_2fv1beta1_2fquery_2eproto[0];
}
bool OrderSide_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CancellationStrategy_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto);
  return file_level_enum_descriptors_injective_2fexchange_2fv1beta1_2fquery_2eproto[1];
}
bool CancellationStrategy_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}
// ===================================================================

class Subaccount::_Internal {
 public:
};

Subaccount::Subaccount(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.Subaccount)
}
Subaccount::Subaccount(const Subaccount& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Subaccount* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.trader_) {}

    , decltype(_impl_.subaccount_nonce_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.trader_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.trader_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_trader().empty()) {
    _this->_impl_.trader_.Set(from._internal_trader(), _this->GetArenaForAllocation());
  }
  _this->_impl_.subaccount_nonce_ = from._impl_.subaccount_nonce_;
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.Subaccount)
}

inline void Subaccount::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.trader_) {}

    , decltype(_impl_.subaccount_nonce_) { 0u }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.trader_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.trader_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Subaccount::~Subaccount() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.Subaccount)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Subaccount::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.trader_.Destroy();
}

void Subaccount::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Subaccount::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.Subaccount)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.trader_.ClearToEmpty();
  _impl_.subaccount_nonce_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Subaccount::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string trader = 1 [json_name = "trader"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_trader();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.Subaccount.trader"));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 subaccount_nonce = 2 [json_name = "subaccountNonce"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.subaccount_nonce_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Subaccount::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.Subaccount)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string trader = 1 [json_name = "trader"];
  if (!this->_internal_trader().empty()) {
    const std::string& _s = this->_internal_trader();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.Subaccount.trader");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // uint32 subaccount_nonce = 2 [json_name = "subaccountNonce"];
  if (this->_internal_subaccount_nonce() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_subaccount_nonce(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.Subaccount)
  return target;
}

::size_t Subaccount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.Subaccount)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string trader = 1 [json_name = "trader"];
  if (!this->_internal_trader().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_trader());
  }

  // uint32 subaccount_nonce = 2 [json_name = "subaccountNonce"];
  if (this->_internal_subaccount_nonce() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_subaccount_nonce());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Subaccount::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Subaccount::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Subaccount::GetClassData() const { return &_class_data_; }


void Subaccount::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Subaccount*>(&to_msg);
  auto& from = static_cast<const Subaccount&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.Subaccount)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_trader().empty()) {
    _this->_internal_set_trader(from._internal_trader());
  }
  if (from._internal_subaccount_nonce() != 0) {
    _this->_internal_set_subaccount_nonce(from._internal_subaccount_nonce());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Subaccount::CopyFrom(const Subaccount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.Subaccount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Subaccount::IsInitialized() const {
  return true;
}

void Subaccount::InternalSwap(Subaccount* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.trader_, lhs_arena,
                                       &other->_impl_.trader_, rhs_arena);

  swap(_impl_.subaccount_nonce_, other->_impl_.subaccount_nonce_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Subaccount::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2fquery_2eproto[0]);
}
// ===================================================================

class QuerySubaccountOrdersRequest::_Internal {
 public:
};

QuerySubaccountOrdersRequest::QuerySubaccountOrdersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.QuerySubaccountOrdersRequest)
}
QuerySubaccountOrdersRequest::QuerySubaccountOrdersRequest(const QuerySubaccountOrdersRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QuerySubaccountOrdersRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.subaccount_id_) {}

    , decltype(_impl_.market_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.subaccount_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.subaccount_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_subaccount_id().empty()) {
    _this->_impl_.subaccount_id_.Set(from._internal_subaccount_id(), _this->GetArenaForAllocation());
  }
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_market_id().empty()) {
    _this->_impl_.market_id_.Set(from._internal_market_id(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.QuerySubaccountOrdersRequest)
}

inline void QuerySubaccountOrdersRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.subaccount_id_) {}

    , decltype(_impl_.market_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.subaccount_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.subaccount_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

QuerySubaccountOrdersRequest::~QuerySubaccountOrdersRequest() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.QuerySubaccountOrdersRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QuerySubaccountOrdersRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.subaccount_id_.Destroy();
  _impl_.market_id_.Destroy();
}

void QuerySubaccountOrdersRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QuerySubaccountOrdersRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.QuerySubaccountOrdersRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.subaccount_id_.ClearToEmpty();
  _impl_.market_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QuerySubaccountOrdersRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string subaccount_id = 1 [json_name = "subaccountId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_subaccount_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.QuerySubaccountOrdersRequest.subaccount_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string market_id = 2 [json_name = "marketId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_market_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.QuerySubaccountOrdersRequest.market_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QuerySubaccountOrdersRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.QuerySubaccountOrdersRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string subaccount_id = 1 [json_name = "subaccountId"];
  if (!this->_internal_subaccount_id().empty()) {
    const std::string& _s = this->_internal_subaccount_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.QuerySubaccountOrdersRequest.subaccount_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string market_id = 2 [json_name = "marketId"];
  if (!this->_internal_market_id().empty()) {
    const std::string& _s = this->_internal_market_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.QuerySubaccountOrdersRequest.market_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.QuerySubaccountOrdersRequest)
  return target;
}

::size_t QuerySubaccountOrdersRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.QuerySubaccountOrdersRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string subaccount_id = 1 [json_name = "subaccountId"];
  if (!this->_internal_subaccount_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_subaccount_id());
  }

  // string market_id = 2 [json_name = "marketId"];
  if (!this->_internal_market_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_market_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QuerySubaccountOrdersRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QuerySubaccountOrdersRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QuerySubaccountOrdersRequest::GetClassData() const { return &_class_data_; }


void QuerySubaccountOrdersRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QuerySubaccountOrdersRequest*>(&to_msg);
  auto& from = static_cast<const QuerySubaccountOrdersRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.QuerySubaccountOrdersRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_subaccount_id().empty()) {
    _this->_internal_set_subaccount_id(from._internal_subaccount_id());
  }
  if (!from._internal_market_id().empty()) {
    _this->_internal_set_market_id(from._internal_market_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QuerySubaccountOrdersRequest::CopyFrom(const QuerySubaccountOrdersRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.QuerySubaccountOrdersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuerySubaccountOrdersRequest::IsInitialized() const {
  return true;
}

void QuerySubaccountOrdersRequest::InternalSwap(QuerySubaccountOrdersRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.subaccount_id_, lhs_arena,
                                       &other->_impl_.subaccount_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.market_id_, lhs_arena,
                                       &other->_impl_.market_id_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata QuerySubaccountOrdersRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2fquery_2eproto[1]);
}
// ===================================================================

class QuerySubaccountOrdersResponse::_Internal {
 public:
};

void QuerySubaccountOrdersResponse::clear_buy_orders() {
  _internal_mutable_buy_orders()->Clear();
}
void QuerySubaccountOrdersResponse::clear_sell_orders() {
  _internal_mutable_sell_orders()->Clear();
}
QuerySubaccountOrdersResponse::QuerySubaccountOrdersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.QuerySubaccountOrdersResponse)
}
QuerySubaccountOrdersResponse::QuerySubaccountOrdersResponse(const QuerySubaccountOrdersResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QuerySubaccountOrdersResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.buy_orders_){from._impl_.buy_orders_}
    , decltype(_impl_.sell_orders_){from._impl_.sell_orders_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.QuerySubaccountOrdersResponse)
}

inline void QuerySubaccountOrdersResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.buy_orders_){arena}
    , decltype(_impl_.sell_orders_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

QuerySubaccountOrdersResponse::~QuerySubaccountOrdersResponse() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.QuerySubaccountOrdersResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QuerySubaccountOrdersResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_buy_orders()->~RepeatedPtrField();
  _internal_mutable_sell_orders()->~RepeatedPtrField();
}

void QuerySubaccountOrdersResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QuerySubaccountOrdersResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.QuerySubaccountOrdersResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_buy_orders()->Clear();
  _internal_mutable_sell_orders()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QuerySubaccountOrdersResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .injective.exchange.v1beta1.SubaccountOrderData buy_orders = 1 [json_name = "buyOrders"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_buy_orders(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .injective.exchange.v1beta1.SubaccountOrderData sell_orders = 2 [json_name = "sellOrders"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sell_orders(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QuerySubaccountOrdersResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.QuerySubaccountOrdersResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .injective.exchange.v1beta1.SubaccountOrderData buy_orders = 1 [json_name = "buyOrders"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_buy_orders_size()); i < n; i++) {
    const auto& repfield = this->_internal_buy_orders(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .injective.exchange.v1beta1.SubaccountOrderData sell_orders = 2 [json_name = "sellOrders"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_sell_orders_size()); i < n; i++) {
    const auto& repfield = this->_internal_sell_orders(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.QuerySubaccountOrdersResponse)
  return target;
}

::size_t QuerySubaccountOrdersResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.QuerySubaccountOrdersResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .injective.exchange.v1beta1.SubaccountOrderData buy_orders = 1 [json_name = "buyOrders"];
  total_size += 1UL * this->_internal_buy_orders_size();
  for (const auto& msg : this->_internal_buy_orders()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .injective.exchange.v1beta1.SubaccountOrderData sell_orders = 2 [json_name = "sellOrders"];
  total_size += 1UL * this->_internal_sell_orders_size();
  for (const auto& msg : this->_internal_sell_orders()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QuerySubaccountOrdersResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QuerySubaccountOrdersResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QuerySubaccountOrdersResponse::GetClassData() const { return &_class_data_; }


void QuerySubaccountOrdersResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QuerySubaccountOrdersResponse*>(&to_msg);
  auto& from = static_cast<const QuerySubaccountOrdersResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.QuerySubaccountOrdersResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_buy_orders()->MergeFrom(from._internal_buy_orders());
  _this->_internal_mutable_sell_orders()->MergeFrom(from._internal_sell_orders());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QuerySubaccountOrdersResponse::CopyFrom(const QuerySubaccountOrdersResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.QuerySubaccountOrdersResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuerySubaccountOrdersResponse::IsInitialized() const {
  return true;
}

void QuerySubaccountOrdersResponse::InternalSwap(QuerySubaccountOrdersResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_buy_orders()->InternalSwap(other->_internal_mutable_buy_orders());
  _internal_mutable_sell_orders()->InternalSwap(other->_internal_mutable_sell_orders());
}

::PROTOBUF_NAMESPACE_ID::Metadata QuerySubaccountOrdersResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2fquery_2eproto[2]);
}
// ===================================================================

class SubaccountOrderbookMetadataWithMarket::_Internal {
 public:
  using HasBits = decltype(std::declval<SubaccountOrderbookMetadataWithMarket>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SubaccountOrderbookMetadataWithMarket, _impl_._has_bits_);
  static const ::injective::exchange::v1beta1::SubaccountOrderbookMetadata& metadata(const SubaccountOrderbookMetadataWithMarket* msg);
  static void set_has_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::injective::exchange::v1beta1::SubaccountOrderbookMetadata&
SubaccountOrderbookMetadataWithMarket::_Internal::metadata(const SubaccountOrderbookMetadataWithMarket* msg) {
  return *msg->_impl_.metadata_;
}
void SubaccountOrderbookMetadataWithMarket::clear_metadata() {
  if (_impl_.metadata_ != nullptr) _impl_.metadata_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
SubaccountOrderbookMetadataWithMarket::SubaccountOrderbookMetadataWithMarket(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.SubaccountOrderbookMetadataWithMarket)
}
SubaccountOrderbookMetadataWithMarket::SubaccountOrderbookMetadataWithMarket(const SubaccountOrderbookMetadataWithMarket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SubaccountOrderbookMetadataWithMarket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.market_id_) {}

    , decltype(_impl_.metadata_){nullptr}
    , decltype(_impl_.isbuy_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_market_id().empty()) {
    _this->_impl_.market_id_.Set(from._internal_market_id(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.metadata_ = new ::injective::exchange::v1beta1::SubaccountOrderbookMetadata(*from._impl_.metadata_);
  }
  _this->_impl_.isbuy_ = from._impl_.isbuy_;
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.SubaccountOrderbookMetadataWithMarket)
}

inline void SubaccountOrderbookMetadataWithMarket::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.market_id_) {}

    , decltype(_impl_.metadata_){nullptr}
    , decltype(_impl_.isbuy_) { false }

  };
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SubaccountOrderbookMetadataWithMarket::~SubaccountOrderbookMetadataWithMarket() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.SubaccountOrderbookMetadataWithMarket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SubaccountOrderbookMetadataWithMarket::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.market_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.metadata_;
}

void SubaccountOrderbookMetadataWithMarket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SubaccountOrderbookMetadataWithMarket::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.SubaccountOrderbookMetadataWithMarket)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.market_id_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.metadata_ != nullptr);
    _impl_.metadata_->Clear();
  }
  _impl_.isbuy_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubaccountOrderbookMetadataWithMarket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .injective.exchange.v1beta1.SubaccountOrderbookMetadata metadata = 1 [json_name = "metadata"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string market_id = 2 [json_name = "marketId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_market_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.SubaccountOrderbookMetadataWithMarket.market_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // bool isBuy = 3 [json_name = "isBuy"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.isbuy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SubaccountOrderbookMetadataWithMarket::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.SubaccountOrderbookMetadataWithMarket)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .injective.exchange.v1beta1.SubaccountOrderbookMetadata metadata = 1 [json_name = "metadata"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::metadata(this),
        _Internal::metadata(this).GetCachedSize(), target, stream);
  }

  // string market_id = 2 [json_name = "marketId"];
  if (!this->_internal_market_id().empty()) {
    const std::string& _s = this->_internal_market_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.SubaccountOrderbookMetadataWithMarket.market_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // bool isBuy = 3 [json_name = "isBuy"];
  if (this->_internal_isbuy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        3, this->_internal_isbuy(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.SubaccountOrderbookMetadataWithMarket)
  return target;
}

::size_t SubaccountOrderbookMetadataWithMarket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.SubaccountOrderbookMetadataWithMarket)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string market_id = 2 [json_name = "marketId"];
  if (!this->_internal_market_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_market_id());
  }

  // .injective.exchange.v1beta1.SubaccountOrderbookMetadata metadata = 1 [json_name = "metadata"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.metadata_);
  }

  // bool isBuy = 3 [json_name = "isBuy"];
  if (this->_internal_isbuy() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SubaccountOrderbookMetadataWithMarket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SubaccountOrderbookMetadataWithMarket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SubaccountOrderbookMetadataWithMarket::GetClassData() const { return &_class_data_; }


void SubaccountOrderbookMetadataWithMarket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SubaccountOrderbookMetadataWithMarket*>(&to_msg);
  auto& from = static_cast<const SubaccountOrderbookMetadataWithMarket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.SubaccountOrderbookMetadataWithMarket)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_market_id().empty()) {
    _this->_internal_set_market_id(from._internal_market_id());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_metadata()->::injective::exchange::v1beta1::SubaccountOrderbookMetadata::MergeFrom(
        from._internal_metadata());
  }
  if (from._internal_isbuy() != 0) {
    _this->_internal_set_isbuy(from._internal_isbuy());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SubaccountOrderbookMetadataWithMarket::CopyFrom(const SubaccountOrderbookMetadataWithMarket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.SubaccountOrderbookMetadataWithMarket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubaccountOrderbookMetadataWithMarket::IsInitialized() const {
  return true;
}

void SubaccountOrderbookMetadataWithMarket::InternalSwap(SubaccountOrderbookMetadataWithMarket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.market_id_, lhs_arena,
                                       &other->_impl_.market_id_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SubaccountOrderbookMetadataWithMarket, _impl_.isbuy_)
      + sizeof(SubaccountOrderbookMetadataWithMarket::_impl_.isbuy_)
      - PROTOBUF_FIELD_OFFSET(SubaccountOrderbookMetadataWithMarket, _impl_.metadata_)>(
          reinterpret_cast<char*>(&_impl_.metadata_),
          reinterpret_cast<char*>(&other->_impl_.metadata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SubaccountOrderbookMetadataWithMarket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2fquery_2eproto[3]);
}
// ===================================================================

class QueryExchangeParamsRequest::_Internal {
 public:
};

QueryExchangeParamsRequest::QueryExchangeParamsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.QueryExchangeParamsRequest)
}
QueryExchangeParamsRequest::QueryExchangeParamsRequest(const QueryExchangeParamsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  QueryExchangeParamsRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.QueryExchangeParamsRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryExchangeParamsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryExchangeParamsRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata QueryExchangeParamsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2fquery_2eproto[4]);
}
// ===================================================================

class QueryExchangeParamsResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<QueryExchangeParamsResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(QueryExchangeParamsResponse, _impl_._has_bits_);
  static const ::injective::exchange::v1beta1::Params& params(const QueryExchangeParamsResponse* msg);
  static void set_has_params(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::injective::exchange::v1beta1::Params&
QueryExchangeParamsResponse::_Internal::params(const QueryExchangeParamsResponse* msg) {
  return *msg->_impl_.params_;
}
void QueryExchangeParamsResponse::clear_params() {
  if (_impl_.params_ != nullptr) _impl_.params_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
QueryExchangeParamsResponse::QueryExchangeParamsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.QueryExchangeParamsResponse)
}
QueryExchangeParamsResponse::QueryExchangeParamsResponse(const QueryExchangeParamsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryExchangeParamsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.params_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.params_ = new ::injective::exchange::v1beta1::Params(*from._impl_.params_);
  }
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.QueryExchangeParamsResponse)
}

inline void QueryExchangeParamsResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.params_){nullptr}
  };
}

QueryExchangeParamsResponse::~QueryExchangeParamsResponse() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.QueryExchangeParamsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryExchangeParamsResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.params_;
}

void QueryExchangeParamsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryExchangeParamsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.QueryExchangeParamsResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.params_ != nullptr);
    _impl_.params_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryExchangeParamsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .injective.exchange.v1beta1.Params params = 1 [json_name = "params", (.gogoproto.nullable) = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_params(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryExchangeParamsResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.QueryExchangeParamsResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .injective.exchange.v1beta1.Params params = 1 [json_name = "params", (.gogoproto.nullable) = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::params(this),
        _Internal::params(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.QueryExchangeParamsResponse)
  return target;
}

::size_t QueryExchangeParamsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.QueryExchangeParamsResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .injective.exchange.v1beta1.Params params = 1 [json_name = "params", (.gogoproto.nullable) = false];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.params_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryExchangeParamsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryExchangeParamsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryExchangeParamsResponse::GetClassData() const { return &_class_data_; }


void QueryExchangeParamsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryExchangeParamsResponse*>(&to_msg);
  auto& from = static_cast<const QueryExchangeParamsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.QueryExchangeParamsResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_params()->::injective::exchange::v1beta1::Params::MergeFrom(
        from._internal_params());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryExchangeParamsResponse::CopyFrom(const QueryExchangeParamsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.QueryExchangeParamsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryExchangeParamsResponse::IsInitialized() const {
  return true;
}

void QueryExchangeParamsResponse::InternalSwap(QueryExchangeParamsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.params_, other->_impl_.params_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryExchangeParamsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2fquery_2eproto[5]);
}
// ===================================================================

class QuerySubaccountDepositsRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<QuerySubaccountDepositsRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(QuerySubaccountDepositsRequest, _impl_._has_bits_);
  static const ::injective::exchange::v1beta1::Subaccount& subaccount(const QuerySubaccountDepositsRequest* msg);
  static void set_has_subaccount(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::injective::exchange::v1beta1::Subaccount&
QuerySubaccountDepositsRequest::_Internal::subaccount(const QuerySubaccountDepositsRequest* msg) {
  return *msg->_impl_.subaccount_;
}
QuerySubaccountDepositsRequest::QuerySubaccountDepositsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.QuerySubaccountDepositsRequest)
}
QuerySubaccountDepositsRequest::QuerySubaccountDepositsRequest(const QuerySubaccountDepositsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QuerySubaccountDepositsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.subaccount_id_) {}

    , decltype(_impl_.subaccount_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.subaccount_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.subaccount_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_subaccount_id().empty()) {
    _this->_impl_.subaccount_id_.Set(from._internal_subaccount_id(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.subaccount_ = new ::injective::exchange::v1beta1::Subaccount(*from._impl_.subaccount_);
  }
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.QuerySubaccountDepositsRequest)
}

inline void QuerySubaccountDepositsRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.subaccount_id_) {}

    , decltype(_impl_.subaccount_){nullptr}
  };
  _impl_.subaccount_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.subaccount_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

QuerySubaccountDepositsRequest::~QuerySubaccountDepositsRequest() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.QuerySubaccountDepositsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QuerySubaccountDepositsRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.subaccount_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.subaccount_;
}

void QuerySubaccountDepositsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QuerySubaccountDepositsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.QuerySubaccountDepositsRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.subaccount_id_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.subaccount_ != nullptr);
    _impl_.subaccount_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QuerySubaccountDepositsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string subaccount_id = 1 [json_name = "subaccountId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_subaccount_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.QuerySubaccountDepositsRequest.subaccount_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .injective.exchange.v1beta1.Subaccount subaccount = 2 [json_name = "subaccount", (.gogoproto.nullable) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_subaccount(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QuerySubaccountDepositsRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.QuerySubaccountDepositsRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string subaccount_id = 1 [json_name = "subaccountId"];
  if (!this->_internal_subaccount_id().empty()) {
    const std::string& _s = this->_internal_subaccount_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.QuerySubaccountDepositsRequest.subaccount_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .injective.exchange.v1beta1.Subaccount subaccount = 2 [json_name = "subaccount", (.gogoproto.nullable) = true];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::subaccount(this),
        _Internal::subaccount(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.QuerySubaccountDepositsRequest)
  return target;
}

::size_t QuerySubaccountDepositsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.QuerySubaccountDepositsRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string subaccount_id = 1 [json_name = "subaccountId"];
  if (!this->_internal_subaccount_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_subaccount_id());
  }

  // .injective.exchange.v1beta1.Subaccount subaccount = 2 [json_name = "subaccount", (.gogoproto.nullable) = true];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.subaccount_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QuerySubaccountDepositsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QuerySubaccountDepositsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QuerySubaccountDepositsRequest::GetClassData() const { return &_class_data_; }


void QuerySubaccountDepositsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QuerySubaccountDepositsRequest*>(&to_msg);
  auto& from = static_cast<const QuerySubaccountDepositsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.QuerySubaccountDepositsRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_subaccount_id().empty()) {
    _this->_internal_set_subaccount_id(from._internal_subaccount_id());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_subaccount()->::injective::exchange::v1beta1::Subaccount::MergeFrom(
        from._internal_subaccount());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QuerySubaccountDepositsRequest::CopyFrom(const QuerySubaccountDepositsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.QuerySubaccountDepositsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuerySubaccountDepositsRequest::IsInitialized() const {
  return true;
}

void QuerySubaccountDepositsRequest::InternalSwap(QuerySubaccountDepositsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.subaccount_id_, lhs_arena,
                                       &other->_impl_.subaccount_id_, rhs_arena);
  swap(_impl_.subaccount_, other->_impl_.subaccount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QuerySubaccountDepositsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2fquery_2eproto[6]);
}
// ===================================================================

QuerySubaccountDepositsResponse_DepositsEntry_DoNotUse::QuerySubaccountDepositsResponse_DepositsEntry_DoNotUse() {}
QuerySubaccountDepositsResponse_DepositsEntry_DoNotUse::QuerySubaccountDepositsResponse_DepositsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void QuerySubaccountDepositsResponse_DepositsEntry_DoNotUse::MergeFrom(const QuerySubaccountDepositsResponse_DepositsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata QuerySubaccountDepositsResponse_DepositsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2fquery_2eproto[7]);
}
// ===================================================================

class QuerySubaccountDepositsResponse::_Internal {
 public:
};

void QuerySubaccountDepositsResponse::clear_deposits() {
  _impl_.deposits_.Clear();
}
QuerySubaccountDepositsResponse::QuerySubaccountDepositsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.QuerySubaccountDepositsResponse)
}
QuerySubaccountDepositsResponse::QuerySubaccountDepositsResponse(const QuerySubaccountDepositsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QuerySubaccountDepositsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.deposits_)*/{}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.deposits_.MergeFrom(from._impl_.deposits_);
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.QuerySubaccountDepositsResponse)
}

inline void QuerySubaccountDepositsResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      /*decltype(_impl_.deposits_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

QuerySubaccountDepositsResponse::~QuerySubaccountDepositsResponse() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.QuerySubaccountDepositsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QuerySubaccountDepositsResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.deposits_.~MapField();
}

void QuerySubaccountDepositsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QuerySubaccountDepositsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.QuerySubaccountDepositsResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.deposits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QuerySubaccountDepositsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<string, .injective.exchange.v1beta1.Deposit> deposits = 1 [json_name = "deposits"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.deposits_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QuerySubaccountDepositsResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.QuerySubaccountDepositsResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .injective.exchange.v1beta1.Deposit> deposits = 1 [json_name = "deposits"];
  if (!this->_internal_deposits().empty()) {
    using MapType = ::_pb::Map<std::string, ::injective::exchange::v1beta1::Deposit>;
    using WireHelper = QuerySubaccountDepositsResponse_DepositsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_deposits();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          entry.first.data(), static_cast<int>(entry.first.length()),
 ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.QuerySubaccountDepositsResponse.deposits");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.QuerySubaccountDepositsResponse)
  return target;
}

::size_t QuerySubaccountDepositsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.QuerySubaccountDepositsResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .injective.exchange.v1beta1.Deposit> deposits = 1 [json_name = "deposits"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_deposits_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::injective::exchange::v1beta1::Deposit >::const_iterator
      it = this->_internal_deposits().begin();
      it != this->_internal_deposits().end(); ++it) {
    total_size += QuerySubaccountDepositsResponse_DepositsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QuerySubaccountDepositsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QuerySubaccountDepositsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QuerySubaccountDepositsResponse::GetClassData() const { return &_class_data_; }


void QuerySubaccountDepositsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QuerySubaccountDepositsResponse*>(&to_msg);
  auto& from = static_cast<const QuerySubaccountDepositsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.QuerySubaccountDepositsResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.deposits_.MergeFrom(from._impl_.deposits_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QuerySubaccountDepositsResponse::CopyFrom(const QuerySubaccountDepositsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.QuerySubaccountDepositsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuerySubaccountDepositsResponse::IsInitialized() const {
  return true;
}

void QuerySubaccountDepositsResponse::InternalSwap(QuerySubaccountDepositsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.deposits_.InternalSwap(&other->_impl_.deposits_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QuerySubaccountDepositsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2fquery_2eproto[8]);
}
// ===================================================================

class QueryExchangeBalancesRequest::_Internal {
 public:
};

QueryExchangeBalancesRequest::QueryExchangeBalancesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.QueryExchangeBalancesRequest)
}
QueryExchangeBalancesRequest::QueryExchangeBalancesRequest(const QueryExchangeBalancesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  QueryExchangeBalancesRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.QueryExchangeBalancesRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryExchangeBalancesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryExchangeBalancesRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata QueryExchangeBalancesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2fquery_2eproto[9]);
}
// ===================================================================

class QueryExchangeBalancesResponse::_Internal {
 public:
};

void QueryExchangeBalancesResponse::clear_balances() {
  _internal_mutable_balances()->Clear();
}
QueryExchangeBalancesResponse::QueryExchangeBalancesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.QueryExchangeBalancesResponse)
}
QueryExchangeBalancesResponse::QueryExchangeBalancesResponse(const QueryExchangeBalancesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryExchangeBalancesResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.balances_){from._impl_.balances_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.QueryExchangeBalancesResponse)
}

inline void QueryExchangeBalancesResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.balances_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

QueryExchangeBalancesResponse::~QueryExchangeBalancesResponse() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.QueryExchangeBalancesResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryExchangeBalancesResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_balances()->~RepeatedPtrField();
}

void QueryExchangeBalancesResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryExchangeBalancesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.QueryExchangeBalancesResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_balances()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryExchangeBalancesResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .injective.exchange.v1beta1.Balance balances = 1 [json_name = "balances", (.gogoproto.nullable) = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_balances(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryExchangeBalancesResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.QueryExchangeBalancesResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .injective.exchange.v1beta1.Balance balances = 1 [json_name = "balances", (.gogoproto.nullable) = false];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_balances_size()); i < n; i++) {
    const auto& repfield = this->_internal_balances(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.QueryExchangeBalancesResponse)
  return target;
}

::size_t QueryExchangeBalancesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.QueryExchangeBalancesResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .injective.exchange.v1beta1.Balance balances = 1 [json_name = "balances", (.gogoproto.nullable) = false];
  total_size += 1UL * this->_internal_balances_size();
  for (const auto& msg : this->_internal_balances()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryExchangeBalancesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryExchangeBalancesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryExchangeBalancesResponse::GetClassData() const { return &_class_data_; }


void QueryExchangeBalancesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryExchangeBalancesResponse*>(&to_msg);
  auto& from = static_cast<const QueryExchangeBalancesResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.QueryExchangeBalancesResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_balances()->MergeFrom(from._internal_balances());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryExchangeBalancesResponse::CopyFrom(const QueryExchangeBalancesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.QueryExchangeBalancesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryExchangeBalancesResponse::IsInitialized() const {
  return true;
}

void QueryExchangeBalancesResponse::InternalSwap(QueryExchangeBalancesResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_balances()->InternalSwap(other->_internal_mutable_balances());
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryExchangeBalancesResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2fquery_2eproto[10]);
}
// ===================================================================

class QueryAggregateVolumeRequest::_Internal {
 public:
};

QueryAggregateVolumeRequest::QueryAggregateVolumeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.QueryAggregateVolumeRequest)
}
QueryAggregateVolumeRequest::QueryAggregateVolumeRequest(const QueryAggregateVolumeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryAggregateVolumeRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.account_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.account_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.account_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_account().empty()) {
    _this->_impl_.account_.Set(from._internal_account(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.QueryAggregateVolumeRequest)
}

inline void QueryAggregateVolumeRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.account_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.account_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.account_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

QueryAggregateVolumeRequest::~QueryAggregateVolumeRequest() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.QueryAggregateVolumeRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryAggregateVolumeRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.account_.Destroy();
}

void QueryAggregateVolumeRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryAggregateVolumeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.QueryAggregateVolumeRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.account_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryAggregateVolumeRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string account = 1 [json_name = "account"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_account();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.QueryAggregateVolumeRequest.account"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryAggregateVolumeRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.QueryAggregateVolumeRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string account = 1 [json_name = "account"];
  if (!this->_internal_account().empty()) {
    const std::string& _s = this->_internal_account();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.QueryAggregateVolumeRequest.account");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.QueryAggregateVolumeRequest)
  return target;
}

::size_t QueryAggregateVolumeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.QueryAggregateVolumeRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string account = 1 [json_name = "account"];
  if (!this->_internal_account().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_account());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryAggregateVolumeRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryAggregateVolumeRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryAggregateVolumeRequest::GetClassData() const { return &_class_data_; }


void QueryAggregateVolumeRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryAggregateVolumeRequest*>(&to_msg);
  auto& from = static_cast<const QueryAggregateVolumeRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.QueryAggregateVolumeRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_account().empty()) {
    _this->_internal_set_account(from._internal_account());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryAggregateVolumeRequest::CopyFrom(const QueryAggregateVolumeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.QueryAggregateVolumeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryAggregateVolumeRequest::IsInitialized() const {
  return true;
}

void QueryAggregateVolumeRequest::InternalSwap(QueryAggregateVolumeRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.account_, lhs_arena,
                                       &other->_impl_.account_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryAggregateVolumeRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2fquery_2eproto[11]);
}
// ===================================================================

class QueryAggregateVolumeResponse::_Internal {
 public:
};

void QueryAggregateVolumeResponse::clear_aggregate_volumes() {
  _internal_mutable_aggregate_volumes()->Clear();
}
QueryAggregateVolumeResponse::QueryAggregateVolumeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.QueryAggregateVolumeResponse)
}
QueryAggregateVolumeResponse::QueryAggregateVolumeResponse(const QueryAggregateVolumeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryAggregateVolumeResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.aggregate_volumes_){from._impl_.aggregate_volumes_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.QueryAggregateVolumeResponse)
}

inline void QueryAggregateVolumeResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.aggregate_volumes_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

QueryAggregateVolumeResponse::~QueryAggregateVolumeResponse() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.QueryAggregateVolumeResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryAggregateVolumeResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_aggregate_volumes()->~RepeatedPtrField();
}

void QueryAggregateVolumeResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryAggregateVolumeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.QueryAggregateVolumeResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_aggregate_volumes()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryAggregateVolumeResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .injective.exchange.v1beta1.MarketVolume aggregate_volumes = 1 [json_name = "aggregateVolumes"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_aggregate_volumes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryAggregateVolumeResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.QueryAggregateVolumeResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .injective.exchange.v1beta1.MarketVolume aggregate_volumes = 1 [json_name = "aggregateVolumes"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_aggregate_volumes_size()); i < n; i++) {
    const auto& repfield = this->_internal_aggregate_volumes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.QueryAggregateVolumeResponse)
  return target;
}

::size_t QueryAggregateVolumeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.QueryAggregateVolumeResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .injective.exchange.v1beta1.MarketVolume aggregate_volumes = 1 [json_name = "aggregateVolumes"];
  total_size += 1UL * this->_internal_aggregate_volumes_size();
  for (const auto& msg : this->_internal_aggregate_volumes()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryAggregateVolumeResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryAggregateVolumeResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryAggregateVolumeResponse::GetClassData() const { return &_class_data_; }


void QueryAggregateVolumeResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryAggregateVolumeResponse*>(&to_msg);
  auto& from = static_cast<const QueryAggregateVolumeResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.QueryAggregateVolumeResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_aggregate_volumes()->MergeFrom(from._internal_aggregate_volumes());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryAggregateVolumeResponse::CopyFrom(const QueryAggregateVolumeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.QueryAggregateVolumeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryAggregateVolumeResponse::IsInitialized() const {
  return true;
}

void QueryAggregateVolumeResponse::InternalSwap(QueryAggregateVolumeResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_aggregate_volumes()->InternalSwap(other->_internal_mutable_aggregate_volumes());
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryAggregateVolumeResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2fquery_2eproto[12]);
}
// ===================================================================

class QueryAggregateVolumesRequest::_Internal {
 public:
};

QueryAggregateVolumesRequest::QueryAggregateVolumesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.QueryAggregateVolumesRequest)
}
QueryAggregateVolumesRequest::QueryAggregateVolumesRequest(const QueryAggregateVolumesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryAggregateVolumesRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.accounts_){from._impl_.accounts_}
    , decltype(_impl_.market_ids_){from._impl_.market_ids_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.QueryAggregateVolumesRequest)
}

inline void QueryAggregateVolumesRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.accounts_){arena}
    , decltype(_impl_.market_ids_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

QueryAggregateVolumesRequest::~QueryAggregateVolumesRequest() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.QueryAggregateVolumesRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryAggregateVolumesRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_accounts()->~RepeatedPtrField();
  _internal_mutable_market_ids()->~RepeatedPtrField();
}

void QueryAggregateVolumesRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryAggregateVolumesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.QueryAggregateVolumesRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_accounts()->Clear();
  _internal_mutable_market_ids()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryAggregateVolumesRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string accounts = 1 [json_name = "accounts"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_accounts();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.QueryAggregateVolumesRequest.accounts"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string market_ids = 2 [json_name = "marketIds"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_market_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.QueryAggregateVolumesRequest.market_ids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryAggregateVolumesRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.QueryAggregateVolumesRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string accounts = 1 [json_name = "accounts"];
  for (int i = 0, n = this->_internal_accounts_size(); i < n; ++i) {
    const auto& s = this->_internal_accounts(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.QueryAggregateVolumesRequest.accounts");
    target = stream->WriteString(1, s, target);
  }

  // repeated string market_ids = 2 [json_name = "marketIds"];
  for (int i = 0, n = this->_internal_market_ids_size(); i < n; ++i) {
    const auto& s = this->_internal_market_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.QueryAggregateVolumesRequest.market_ids");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.QueryAggregateVolumesRequest)
  return target;
}

::size_t QueryAggregateVolumesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.QueryAggregateVolumesRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string accounts = 1 [json_name = "accounts"];
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_accounts().size());
  for (int i = 0, n = _internal_accounts().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_accounts().Get(i));
  }

  // repeated string market_ids = 2 [json_name = "marketIds"];
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_market_ids().size());
  for (int i = 0, n = _internal_market_ids().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_market_ids().Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryAggregateVolumesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryAggregateVolumesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryAggregateVolumesRequest::GetClassData() const { return &_class_data_; }


void QueryAggregateVolumesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryAggregateVolumesRequest*>(&to_msg);
  auto& from = static_cast<const QueryAggregateVolumesRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.QueryAggregateVolumesRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_accounts()->MergeFrom(from._internal_accounts());
  _this->_internal_mutable_market_ids()->MergeFrom(from._internal_market_ids());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryAggregateVolumesRequest::CopyFrom(const QueryAggregateVolumesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.QueryAggregateVolumesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryAggregateVolumesRequest::IsInitialized() const {
  return true;
}

void QueryAggregateVolumesRequest::InternalSwap(QueryAggregateVolumesRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_accounts()->InternalSwap(
      other->_internal_mutable_accounts());
  _internal_mutable_market_ids()->InternalSwap(
      other->_internal_mutable_market_ids());
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryAggregateVolumesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2fquery_2eproto[13]);
}
// ===================================================================

class QueryAggregateVolumesResponse::_Internal {
 public:
};

void QueryAggregateVolumesResponse::clear_aggregate_account_volumes() {
  _internal_mutable_aggregate_account_volumes()->Clear();
}
void QueryAggregateVolumesResponse::clear_aggregate_market_volumes() {
  _internal_mutable_aggregate_market_volumes()->Clear();
}
QueryAggregateVolumesResponse::QueryAggregateVolumesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.QueryAggregateVolumesResponse)
}
QueryAggregateVolumesResponse::QueryAggregateVolumesResponse(const QueryAggregateVolumesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryAggregateVolumesResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.aggregate_account_volumes_){from._impl_.aggregate_account_volumes_}
    , decltype(_impl_.aggregate_market_volumes_){from._impl_.aggregate_market_volumes_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.QueryAggregateVolumesResponse)
}

inline void QueryAggregateVolumesResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.aggregate_account_volumes_){arena}
    , decltype(_impl_.aggregate_market_volumes_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

QueryAggregateVolumesResponse::~QueryAggregateVolumesResponse() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.QueryAggregateVolumesResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryAggregateVolumesResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_aggregate_account_volumes()->~RepeatedPtrField();
  _internal_mutable_aggregate_market_volumes()->~RepeatedPtrField();
}

void QueryAggregateVolumesResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryAggregateVolumesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.QueryAggregateVolumesResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_aggregate_account_volumes()->Clear();
  _internal_mutable_aggregate_market_volumes()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryAggregateVolumesResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .injective.exchange.v1beta1.AggregateAccountVolumeRecord aggregate_account_volumes = 1 [json_name = "aggregateAccountVolumes"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_aggregate_account_volumes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .injective.exchange.v1beta1.MarketVolume aggregate_market_volumes = 2 [json_name = "aggregateMarketVolumes"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_aggregate_market_volumes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryAggregateVolumesResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.QueryAggregateVolumesResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .injective.exchange.v1beta1.AggregateAccountVolumeRecord aggregate_account_volumes = 1 [json_name = "aggregateAccountVolumes"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_aggregate_account_volumes_size()); i < n; i++) {
    const auto& repfield = this->_internal_aggregate_account_volumes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .injective.exchange.v1beta1.MarketVolume aggregate_market_volumes = 2 [json_name = "aggregateMarketVolumes"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_aggregate_market_volumes_size()); i < n; i++) {
    const auto& repfield = this->_internal_aggregate_market_volumes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.QueryAggregateVolumesResponse)
  return target;
}

::size_t QueryAggregateVolumesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.QueryAggregateVolumesResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .injective.exchange.v1beta1.AggregateAccountVolumeRecord aggregate_account_volumes = 1 [json_name = "aggregateAccountVolumes"];
  total_size += 1UL * this->_internal_aggregate_account_volumes_size();
  for (const auto& msg : this->_internal_aggregate_account_volumes()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .injective.exchange.v1beta1.MarketVolume aggregate_market_volumes = 2 [json_name = "aggregateMarketVolumes"];
  total_size += 1UL * this->_internal_aggregate_market_volumes_size();
  for (const auto& msg : this->_internal_aggregate_market_volumes()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryAggregateVolumesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryAggregateVolumesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryAggregateVolumesResponse::GetClassData() const { return &_class_data_; }


void QueryAggregateVolumesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryAggregateVolumesResponse*>(&to_msg);
  auto& from = static_cast<const QueryAggregateVolumesResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.QueryAggregateVolumesResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_aggregate_account_volumes()->MergeFrom(from._internal_aggregate_account_volumes());
  _this->_internal_mutable_aggregate_market_volumes()->MergeFrom(from._internal_aggregate_market_volumes());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryAggregateVolumesResponse::CopyFrom(const QueryAggregateVolumesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.QueryAggregateVolumesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryAggregateVolumesResponse::IsInitialized() const {
  return true;
}

void QueryAggregateVolumesResponse::InternalSwap(QueryAggregateVolumesResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_aggregate_account_volumes()->InternalSwap(other->_internal_mutable_aggregate_account_volumes());
  _internal_mutable_aggregate_market_volumes()->InternalSwap(other->_internal_mutable_aggregate_market_volumes());
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryAggregateVolumesResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2fquery_2eproto[14]);
}
// ===================================================================

class QueryAggregateMarketVolumeRequest::_Internal {
 public:
};

QueryAggregateMarketVolumeRequest::QueryAggregateMarketVolumeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.QueryAggregateMarketVolumeRequest)
}
QueryAggregateMarketVolumeRequest::QueryAggregateMarketVolumeRequest(const QueryAggregateMarketVolumeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryAggregateMarketVolumeRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.market_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_market_id().empty()) {
    _this->_impl_.market_id_.Set(from._internal_market_id(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.QueryAggregateMarketVolumeRequest)
}

inline void QueryAggregateMarketVolumeRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.market_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

QueryAggregateMarketVolumeRequest::~QueryAggregateMarketVolumeRequest() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.QueryAggregateMarketVolumeRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryAggregateMarketVolumeRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.market_id_.Destroy();
}

void QueryAggregateMarketVolumeRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryAggregateMarketVolumeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.QueryAggregateMarketVolumeRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.market_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryAggregateMarketVolumeRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string market_id = 1 [json_name = "marketId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_market_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.QueryAggregateMarketVolumeRequest.market_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryAggregateMarketVolumeRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.QueryAggregateMarketVolumeRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string market_id = 1 [json_name = "marketId"];
  if (!this->_internal_market_id().empty()) {
    const std::string& _s = this->_internal_market_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.QueryAggregateMarketVolumeRequest.market_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.QueryAggregateMarketVolumeRequest)
  return target;
}

::size_t QueryAggregateMarketVolumeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.QueryAggregateMarketVolumeRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string market_id = 1 [json_name = "marketId"];
  if (!this->_internal_market_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_market_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryAggregateMarketVolumeRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryAggregateMarketVolumeRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryAggregateMarketVolumeRequest::GetClassData() const { return &_class_data_; }


void QueryAggregateMarketVolumeRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryAggregateMarketVolumeRequest*>(&to_msg);
  auto& from = static_cast<const QueryAggregateMarketVolumeRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.QueryAggregateMarketVolumeRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_market_id().empty()) {
    _this->_internal_set_market_id(from._internal_market_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryAggregateMarketVolumeRequest::CopyFrom(const QueryAggregateMarketVolumeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.QueryAggregateMarketVolumeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryAggregateMarketVolumeRequest::IsInitialized() const {
  return true;
}

void QueryAggregateMarketVolumeRequest::InternalSwap(QueryAggregateMarketVolumeRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.market_id_, lhs_arena,
                                       &other->_impl_.market_id_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryAggregateMarketVolumeRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2fquery_2eproto[15]);
}
// ===================================================================

class QueryAggregateMarketVolumeResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<QueryAggregateMarketVolumeResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(QueryAggregateMarketVolumeResponse, _impl_._has_bits_);
  static const ::injective::exchange::v1beta1::VolumeRecord& volume(const QueryAggregateMarketVolumeResponse* msg);
  static void set_has_volume(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::injective::exchange::v1beta1::VolumeRecord&
QueryAggregateMarketVolumeResponse::_Internal::volume(const QueryAggregateMarketVolumeResponse* msg) {
  return *msg->_impl_.volume_;
}
void QueryAggregateMarketVolumeResponse::clear_volume() {
  if (_impl_.volume_ != nullptr) _impl_.volume_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
QueryAggregateMarketVolumeResponse::QueryAggregateMarketVolumeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.QueryAggregateMarketVolumeResponse)
}
QueryAggregateMarketVolumeResponse::QueryAggregateMarketVolumeResponse(const QueryAggregateMarketVolumeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryAggregateMarketVolumeResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.volume_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.volume_ = new ::injective::exchange::v1beta1::VolumeRecord(*from._impl_.volume_);
  }
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.QueryAggregateMarketVolumeResponse)
}

inline void QueryAggregateMarketVolumeResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.volume_){nullptr}
  };
}

QueryAggregateMarketVolumeResponse::~QueryAggregateMarketVolumeResponse() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.QueryAggregateMarketVolumeResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryAggregateMarketVolumeResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.volume_;
}

void QueryAggregateMarketVolumeResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryAggregateMarketVolumeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.QueryAggregateMarketVolumeResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.volume_ != nullptr);
    _impl_.volume_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryAggregateMarketVolumeResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .injective.exchange.v1beta1.VolumeRecord volume = 1 [json_name = "volume", (.gogoproto.nullable) = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_volume(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryAggregateMarketVolumeResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.QueryAggregateMarketVolumeResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .injective.exchange.v1beta1.VolumeRecord volume = 1 [json_name = "volume", (.gogoproto.nullable) = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::volume(this),
        _Internal::volume(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.QueryAggregateMarketVolumeResponse)
  return target;
}

::size_t QueryAggregateMarketVolumeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.QueryAggregateMarketVolumeResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .injective.exchange.v1beta1.VolumeRecord volume = 1 [json_name = "volume", (.gogoproto.nullable) = false];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.volume_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryAggregateMarketVolumeResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryAggregateMarketVolumeResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryAggregateMarketVolumeResponse::GetClassData() const { return &_class_data_; }


void QueryAggregateMarketVolumeResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryAggregateMarketVolumeResponse*>(&to_msg);
  auto& from = static_cast<const QueryAggregateMarketVolumeResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.QueryAggregateMarketVolumeResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_volume()->::injective::exchange::v1beta1::VolumeRecord::MergeFrom(
        from._internal_volume());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryAggregateMarketVolumeResponse::CopyFrom(const QueryAggregateMarketVolumeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.QueryAggregateMarketVolumeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryAggregateMarketVolumeResponse::IsInitialized() const {
  return true;
}

void QueryAggregateMarketVolumeResponse::InternalSwap(QueryAggregateMarketVolumeResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.volume_, other->_impl_.volume_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryAggregateMarketVolumeResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2fquery_2eproto[16]);
}
// ===================================================================

class QueryDenomDecimalRequest::_Internal {
 public:
};

QueryDenomDecimalRequest::QueryDenomDecimalRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.QueryDenomDecimalRequest)
}
QueryDenomDecimalRequest::QueryDenomDecimalRequest(const QueryDenomDecimalRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryDenomDecimalRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.denom_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.denom_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.denom_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_denom().empty()) {
    _this->_impl_.denom_.Set(from._internal_denom(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.QueryDenomDecimalRequest)
}

inline void QueryDenomDecimalRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.denom_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.denom_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.denom_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

QueryDenomDecimalRequest::~QueryDenomDecimalRequest() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.QueryDenomDecimalRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryDenomDecimalRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.denom_.Destroy();
}

void QueryDenomDecimalRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryDenomDecimalRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.QueryDenomDecimalRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.denom_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryDenomDecimalRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string denom = 1 [json_name = "denom"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_denom();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.QueryDenomDecimalRequest.denom"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryDenomDecimalRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.QueryDenomDecimalRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string denom = 1 [json_name = "denom"];
  if (!this->_internal_denom().empty()) {
    const std::string& _s = this->_internal_denom();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.QueryDenomDecimalRequest.denom");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.QueryDenomDecimalRequest)
  return target;
}

::size_t QueryDenomDecimalRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.QueryDenomDecimalRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string denom = 1 [json_name = "denom"];
  if (!this->_internal_denom().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_denom());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryDenomDecimalRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryDenomDecimalRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryDenomDecimalRequest::GetClassData() const { return &_class_data_; }


void QueryDenomDecimalRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryDenomDecimalRequest*>(&to_msg);
  auto& from = static_cast<const QueryDenomDecimalRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.QueryDenomDecimalRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_denom().empty()) {
    _this->_internal_set_denom(from._internal_denom());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryDenomDecimalRequest::CopyFrom(const QueryDenomDecimalRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.QueryDenomDecimalRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryDenomDecimalRequest::IsInitialized() const {
  return true;
}

void QueryDenomDecimalRequest::InternalSwap(QueryDenomDecimalRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.denom_, lhs_arena,
                                       &other->_impl_.denom_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryDenomDecimalRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2fquery_2eproto[17]);
}
// ===================================================================

class QueryDenomDecimalResponse::_Internal {
 public:
};

QueryDenomDecimalResponse::QueryDenomDecimalResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.QueryDenomDecimalResponse)
}
QueryDenomDecimalResponse::QueryDenomDecimalResponse(const QueryDenomDecimalResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.QueryDenomDecimalResponse)
}

inline void QueryDenomDecimalResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.decimal_) { ::uint64_t{0u} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

QueryDenomDecimalResponse::~QueryDenomDecimalResponse() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.QueryDenomDecimalResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryDenomDecimalResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void QueryDenomDecimalResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryDenomDecimalResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.QueryDenomDecimalResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.decimal_ = ::uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryDenomDecimalResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 decimal = 1 [json_name = "decimal"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.decimal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryDenomDecimalResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.QueryDenomDecimalResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 decimal = 1 [json_name = "decimal"];
  if (this->_internal_decimal() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_decimal(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.QueryDenomDecimalResponse)
  return target;
}

::size_t QueryDenomDecimalResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.QueryDenomDecimalResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 decimal = 1 [json_name = "decimal"];
  if (this->_internal_decimal() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_decimal());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryDenomDecimalResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryDenomDecimalResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryDenomDecimalResponse::GetClassData() const { return &_class_data_; }


void QueryDenomDecimalResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryDenomDecimalResponse*>(&to_msg);
  auto& from = static_cast<const QueryDenomDecimalResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.QueryDenomDecimalResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_decimal() != 0) {
    _this->_internal_set_decimal(from._internal_decimal());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryDenomDecimalResponse::CopyFrom(const QueryDenomDecimalResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.QueryDenomDecimalResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryDenomDecimalResponse::IsInitialized() const {
  return true;
}

void QueryDenomDecimalResponse::InternalSwap(QueryDenomDecimalResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);

  swap(_impl_.decimal_, other->_impl_.decimal_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryDenomDecimalResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2fquery_2eproto[18]);
}
// ===================================================================

class QueryDenomDecimalsRequest::_Internal {
 public:
};

QueryDenomDecimalsRequest::QueryDenomDecimalsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.QueryDenomDecimalsRequest)
}
QueryDenomDecimalsRequest::QueryDenomDecimalsRequest(const QueryDenomDecimalsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryDenomDecimalsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.denoms_){from._impl_.denoms_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.QueryDenomDecimalsRequest)
}

inline void QueryDenomDecimalsRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.denoms_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

QueryDenomDecimalsRequest::~QueryDenomDecimalsRequest() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.QueryDenomDecimalsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryDenomDecimalsRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_denoms()->~RepeatedPtrField();
}

void QueryDenomDecimalsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryDenomDecimalsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.QueryDenomDecimalsRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_denoms()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryDenomDecimalsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string denoms = 1 [json_name = "denoms"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_denoms();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.QueryDenomDecimalsRequest.denoms"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryDenomDecimalsRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.QueryDenomDecimalsRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string denoms = 1 [json_name = "denoms"];
  for (int i = 0, n = this->_internal_denoms_size(); i < n; ++i) {
    const auto& s = this->_internal_denoms(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.QueryDenomDecimalsRequest.denoms");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.QueryDenomDecimalsRequest)
  return target;
}

::size_t QueryDenomDecimalsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.QueryDenomDecimalsRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string denoms = 1 [json_name = "denoms"];
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_denoms().size());
  for (int i = 0, n = _internal_denoms().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_denoms().Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryDenomDecimalsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryDenomDecimalsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryDenomDecimalsRequest::GetClassData() const { return &_class_data_; }


void QueryDenomDecimalsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryDenomDecimalsRequest*>(&to_msg);
  auto& from = static_cast<const QueryDenomDecimalsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.QueryDenomDecimalsRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_denoms()->MergeFrom(from._internal_denoms());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryDenomDecimalsRequest::CopyFrom(const QueryDenomDecimalsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.QueryDenomDecimalsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryDenomDecimalsRequest::IsInitialized() const {
  return true;
}

void QueryDenomDecimalsRequest::InternalSwap(QueryDenomDecimalsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_denoms()->InternalSwap(
      other->_internal_mutable_denoms());
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryDenomDecimalsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2fquery_2eproto[19]);
}
// ===================================================================

class QueryDenomDecimalsResponse::_Internal {
 public:
};

void QueryDenomDecimalsResponse::clear_denom_decimals() {
  _internal_mutable_denom_decimals()->Clear();
}
QueryDenomDecimalsResponse::QueryDenomDecimalsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.QueryDenomDecimalsResponse)
}
QueryDenomDecimalsResponse::QueryDenomDecimalsResponse(const QueryDenomDecimalsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryDenomDecimalsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.denom_decimals_){from._impl_.denom_decimals_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.QueryDenomDecimalsResponse)
}

inline void QueryDenomDecimalsResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.denom_decimals_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

QueryDenomDecimalsResponse::~QueryDenomDecimalsResponse() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.QueryDenomDecimalsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryDenomDecimalsResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_denom_decimals()->~RepeatedPtrField();
}

void QueryDenomDecimalsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryDenomDecimalsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.QueryDenomDecimalsResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_denom_decimals()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryDenomDecimalsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .injective.exchange.v1beta1.DenomDecimals denom_decimals = 1 [json_name = "denomDecimals", (.gogoproto.nullable) = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_denom_decimals(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryDenomDecimalsResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.QueryDenomDecimalsResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .injective.exchange.v1beta1.DenomDecimals denom_decimals = 1 [json_name = "denomDecimals", (.gogoproto.nullable) = false];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_denom_decimals_size()); i < n; i++) {
    const auto& repfield = this->_internal_denom_decimals(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.QueryDenomDecimalsResponse)
  return target;
}

::size_t QueryDenomDecimalsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.QueryDenomDecimalsResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .injective.exchange.v1beta1.DenomDecimals denom_decimals = 1 [json_name = "denomDecimals", (.gogoproto.nullable) = false];
  total_size += 1UL * this->_internal_denom_decimals_size();
  for (const auto& msg : this->_internal_denom_decimals()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryDenomDecimalsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryDenomDecimalsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryDenomDecimalsResponse::GetClassData() const { return &_class_data_; }


void QueryDenomDecimalsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryDenomDecimalsResponse*>(&to_msg);
  auto& from = static_cast<const QueryDenomDecimalsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.QueryDenomDecimalsResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_denom_decimals()->MergeFrom(from._internal_denom_decimals());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryDenomDecimalsResponse::CopyFrom(const QueryDenomDecimalsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.QueryDenomDecimalsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryDenomDecimalsResponse::IsInitialized() const {
  return true;
}

void QueryDenomDecimalsResponse::InternalSwap(QueryDenomDecimalsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_denom_decimals()->InternalSwap(other->_internal_mutable_denom_decimals());
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryDenomDecimalsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2fquery_2eproto[20]);
}
// ===================================================================

class QueryAggregateMarketVolumesRequest::_Internal {
 public:
};

QueryAggregateMarketVolumesRequest::QueryAggregateMarketVolumesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.QueryAggregateMarketVolumesRequest)
}
QueryAggregateMarketVolumesRequest::QueryAggregateMarketVolumesRequest(const QueryAggregateMarketVolumesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryAggregateMarketVolumesRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.market_ids_){from._impl_.market_ids_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.QueryAggregateMarketVolumesRequest)
}

inline void QueryAggregateMarketVolumesRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.market_ids_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

QueryAggregateMarketVolumesRequest::~QueryAggregateMarketVolumesRequest() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.QueryAggregateMarketVolumesRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryAggregateMarketVolumesRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_market_ids()->~RepeatedPtrField();
}

void QueryAggregateMarketVolumesRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryAggregateMarketVolumesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.QueryAggregateMarketVolumesRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_market_ids()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryAggregateMarketVolumesRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string market_ids = 1 [json_name = "marketIds"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_market_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.QueryAggregateMarketVolumesRequest.market_ids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryAggregateMarketVolumesRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.QueryAggregateMarketVolumesRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string market_ids = 1 [json_name = "marketIds"];
  for (int i = 0, n = this->_internal_market_ids_size(); i < n; ++i) {
    const auto& s = this->_internal_market_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.QueryAggregateMarketVolumesRequest.market_ids");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.QueryAggregateMarketVolumesRequest)
  return target;
}

::size_t QueryAggregateMarketVolumesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.QueryAggregateMarketVolumesRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string market_ids = 1 [json_name = "marketIds"];
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_market_ids().size());
  for (int i = 0, n = _internal_market_ids().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_market_ids().Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryAggregateMarketVolumesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryAggregateMarketVolumesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryAggregateMarketVolumesRequest::GetClassData() const { return &_class_data_; }


void QueryAggregateMarketVolumesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryAggregateMarketVolumesRequest*>(&to_msg);
  auto& from = static_cast<const QueryAggregateMarketVolumesRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.QueryAggregateMarketVolumesRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_market_ids()->MergeFrom(from._internal_market_ids());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryAggregateMarketVolumesRequest::CopyFrom(const QueryAggregateMarketVolumesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.QueryAggregateMarketVolumesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryAggregateMarketVolumesRequest::IsInitialized() const {
  return true;
}

void QueryAggregateMarketVolumesRequest::InternalSwap(QueryAggregateMarketVolumesRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_market_ids()->InternalSwap(
      other->_internal_mutable_market_ids());
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryAggregateMarketVolumesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2fquery_2eproto[21]);
}
// ===================================================================

class QueryAggregateMarketVolumesResponse::_Internal {
 public:
};

void QueryAggregateMarketVolumesResponse::clear_volumes() {
  _internal_mutable_volumes()->Clear();
}
QueryAggregateMarketVolumesResponse::QueryAggregateMarketVolumesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.QueryAggregateMarketVolumesResponse)
}
QueryAggregateMarketVolumesResponse::QueryAggregateMarketVolumesResponse(const QueryAggregateMarketVolumesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryAggregateMarketVolumesResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.volumes_){from._impl_.volumes_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.QueryAggregateMarketVolumesResponse)
}

inline void QueryAggregateMarketVolumesResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.volumes_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

QueryAggregateMarketVolumesResponse::~QueryAggregateMarketVolumesResponse() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.QueryAggregateMarketVolumesResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryAggregateMarketVolumesResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_volumes()->~RepeatedPtrField();
}

void QueryAggregateMarketVolumesResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryAggregateMarketVolumesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.QueryAggregateMarketVolumesResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_volumes()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryAggregateMarketVolumesResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .injective.exchange.v1beta1.MarketVolume volumes = 1 [json_name = "volumes"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_volumes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryAggregateMarketVolumesResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.QueryAggregateMarketVolumesResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .injective.exchange.v1beta1.MarketVolume volumes = 1 [json_name = "volumes"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_volumes_size()); i < n; i++) {
    const auto& repfield = this->_internal_volumes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.QueryAggregateMarketVolumesResponse)
  return target;
}

::size_t QueryAggregateMarketVolumesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.QueryAggregateMarketVolumesResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .injective.exchange.v1beta1.MarketVolume volumes = 1 [json_name = "volumes"];
  total_size += 1UL * this->_internal_volumes_size();
  for (const auto& msg : this->_internal_volumes()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryAggregateMarketVolumesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryAggregateMarketVolumesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryAggregateMarketVolumesResponse::GetClassData() const { return &_class_data_; }


void QueryAggregateMarketVolumesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryAggregateMarketVolumesResponse*>(&to_msg);
  auto& from = static_cast<const QueryAggregateMarketVolumesResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.QueryAggregateMarketVolumesResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_volumes()->MergeFrom(from._internal_volumes());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryAggregateMarketVolumesResponse::CopyFrom(const QueryAggregateMarketVolumesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.QueryAggregateMarketVolumesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryAggregateMarketVolumesResponse::IsInitialized() const {
  return true;
}

void QueryAggregateMarketVolumesResponse::InternalSwap(QueryAggregateMarketVolumesResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_volumes()->InternalSwap(other->_internal_mutable_volumes());
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryAggregateMarketVolumesResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2fquery_2eproto[22]);
}
// ===================================================================

class QuerySubaccountDepositRequest::_Internal {
 public:
};

QuerySubaccountDepositRequest::QuerySubaccountDepositRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.QuerySubaccountDepositRequest)
}
QuerySubaccountDepositRequest::QuerySubaccountDepositRequest(const QuerySubaccountDepositRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QuerySubaccountDepositRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.subaccount_id_) {}

    , decltype(_impl_.denom_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.subaccount_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.subaccount_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_subaccount_id().empty()) {
    _this->_impl_.subaccount_id_.Set(from._internal_subaccount_id(), _this->GetArenaForAllocation());
  }
  _impl_.denom_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.denom_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_denom().empty()) {
    _this->_impl_.denom_.Set(from._internal_denom(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.QuerySubaccountDepositRequest)
}

inline void QuerySubaccountDepositRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.subaccount_id_) {}

    , decltype(_impl_.denom_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.subaccount_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.subaccount_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.denom_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.denom_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

QuerySubaccountDepositRequest::~QuerySubaccountDepositRequest() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.QuerySubaccountDepositRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QuerySubaccountDepositRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.subaccount_id_.Destroy();
  _impl_.denom_.Destroy();
}

void QuerySubaccountDepositRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QuerySubaccountDepositRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.QuerySubaccountDepositRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.subaccount_id_.ClearToEmpty();
  _impl_.denom_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QuerySubaccountDepositRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string subaccount_id = 1 [json_name = "subaccountId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_subaccount_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.QuerySubaccountDepositRequest.subaccount_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string denom = 2 [json_name = "denom"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_denom();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.QuerySubaccountDepositRequest.denom"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QuerySubaccountDepositRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.QuerySubaccountDepositRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string subaccount_id = 1 [json_name = "subaccountId"];
  if (!this->_internal_subaccount_id().empty()) {
    const std::string& _s = this->_internal_subaccount_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.QuerySubaccountDepositRequest.subaccount_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string denom = 2 [json_name = "denom"];
  if (!this->_internal_denom().empty()) {
    const std::string& _s = this->_internal_denom();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.QuerySubaccountDepositRequest.denom");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.QuerySubaccountDepositRequest)
  return target;
}

::size_t QuerySubaccountDepositRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.QuerySubaccountDepositRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string subaccount_id = 1 [json_name = "subaccountId"];
  if (!this->_internal_subaccount_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_subaccount_id());
  }

  // string denom = 2 [json_name = "denom"];
  if (!this->_internal_denom().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_denom());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QuerySubaccountDepositRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QuerySubaccountDepositRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QuerySubaccountDepositRequest::GetClassData() const { return &_class_data_; }


void QuerySubaccountDepositRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QuerySubaccountDepositRequest*>(&to_msg);
  auto& from = static_cast<const QuerySubaccountDepositRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.QuerySubaccountDepositRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_subaccount_id().empty()) {
    _this->_internal_set_subaccount_id(from._internal_subaccount_id());
  }
  if (!from._internal_denom().empty()) {
    _this->_internal_set_denom(from._internal_denom());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QuerySubaccountDepositRequest::CopyFrom(const QuerySubaccountDepositRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.QuerySubaccountDepositRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuerySubaccountDepositRequest::IsInitialized() const {
  return true;
}

void QuerySubaccountDepositRequest::InternalSwap(QuerySubaccountDepositRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.subaccount_id_, lhs_arena,
                                       &other->_impl_.subaccount_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.denom_, lhs_arena,
                                       &other->_impl_.denom_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata QuerySubaccountDepositRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2fquery_2eproto[23]);
}
// ===================================================================

class QuerySubaccountDepositResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<QuerySubaccountDepositResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(QuerySubaccountDepositResponse, _impl_._has_bits_);
  static const ::injective::exchange::v1beta1::Deposit& deposits(const QuerySubaccountDepositResponse* msg);
  static void set_has_deposits(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::injective::exchange::v1beta1::Deposit&
QuerySubaccountDepositResponse::_Internal::deposits(const QuerySubaccountDepositResponse* msg) {
  return *msg->_impl_.deposits_;
}
void QuerySubaccountDepositResponse::clear_deposits() {
  if (_impl_.deposits_ != nullptr) _impl_.deposits_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
QuerySubaccountDepositResponse::QuerySubaccountDepositResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.QuerySubaccountDepositResponse)
}
QuerySubaccountDepositResponse::QuerySubaccountDepositResponse(const QuerySubaccountDepositResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QuerySubaccountDepositResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.deposits_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.deposits_ = new ::injective::exchange::v1beta1::Deposit(*from._impl_.deposits_);
  }
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.QuerySubaccountDepositResponse)
}

inline void QuerySubaccountDepositResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.deposits_){nullptr}
  };
}

QuerySubaccountDepositResponse::~QuerySubaccountDepositResponse() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.QuerySubaccountDepositResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QuerySubaccountDepositResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.deposits_;
}

void QuerySubaccountDepositResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QuerySubaccountDepositResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.QuerySubaccountDepositResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.deposits_ != nullptr);
    _impl_.deposits_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QuerySubaccountDepositResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .injective.exchange.v1beta1.Deposit deposits = 1 [json_name = "deposits"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_deposits(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QuerySubaccountDepositResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.QuerySubaccountDepositResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .injective.exchange.v1beta1.Deposit deposits = 1 [json_name = "deposits"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::deposits(this),
        _Internal::deposits(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.QuerySubaccountDepositResponse)
  return target;
}

::size_t QuerySubaccountDepositResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.QuerySubaccountDepositResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .injective.exchange.v1beta1.Deposit deposits = 1 [json_name = "deposits"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.deposits_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QuerySubaccountDepositResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QuerySubaccountDepositResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QuerySubaccountDepositResponse::GetClassData() const { return &_class_data_; }


void QuerySubaccountDepositResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QuerySubaccountDepositResponse*>(&to_msg);
  auto& from = static_cast<const QuerySubaccountDepositResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.QuerySubaccountDepositResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_deposits()->::injective::exchange::v1beta1::Deposit::MergeFrom(
        from._internal_deposits());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QuerySubaccountDepositResponse::CopyFrom(const QuerySubaccountDepositResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.QuerySubaccountDepositResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuerySubaccountDepositResponse::IsInitialized() const {
  return true;
}

void QuerySubaccountDepositResponse::InternalSwap(QuerySubaccountDepositResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.deposits_, other->_impl_.deposits_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QuerySubaccountDepositResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2fquery_2eproto[24]);
}
// ===================================================================

class QuerySpotMarketsRequest::_Internal {
 public:
};

QuerySpotMarketsRequest::QuerySpotMarketsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.QuerySpotMarketsRequest)
}
QuerySpotMarketsRequest::QuerySpotMarketsRequest(const QuerySpotMarketsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QuerySpotMarketsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.market_ids_){from._impl_.market_ids_}
    , decltype(_impl_.status_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.status_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.status_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_status().empty()) {
    _this->_impl_.status_.Set(from._internal_status(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.QuerySpotMarketsRequest)
}

inline void QuerySpotMarketsRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.market_ids_){arena}
    , decltype(_impl_.status_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.status_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.status_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

QuerySpotMarketsRequest::~QuerySpotMarketsRequest() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.QuerySpotMarketsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QuerySpotMarketsRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_market_ids()->~RepeatedPtrField();
  _impl_.status_.Destroy();
}

void QuerySpotMarketsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QuerySpotMarketsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.QuerySpotMarketsRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_market_ids()->Clear();
  _impl_.status_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QuerySpotMarketsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string status = 1 [json_name = "status"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_status();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.QuerySpotMarketsRequest.status"));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string market_ids = 2 [json_name = "marketIds"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_market_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.QuerySpotMarketsRequest.market_ids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QuerySpotMarketsRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.QuerySpotMarketsRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string status = 1 [json_name = "status"];
  if (!this->_internal_status().empty()) {
    const std::string& _s = this->_internal_status();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.QuerySpotMarketsRequest.status");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // repeated string market_ids = 2 [json_name = "marketIds"];
  for (int i = 0, n = this->_internal_market_ids_size(); i < n; ++i) {
    const auto& s = this->_internal_market_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.QuerySpotMarketsRequest.market_ids");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.QuerySpotMarketsRequest)
  return target;
}

::size_t QuerySpotMarketsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.QuerySpotMarketsRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string market_ids = 2 [json_name = "marketIds"];
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_market_ids().size());
  for (int i = 0, n = _internal_market_ids().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_market_ids().Get(i));
  }

  // string status = 1 [json_name = "status"];
  if (!this->_internal_status().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QuerySpotMarketsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QuerySpotMarketsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QuerySpotMarketsRequest::GetClassData() const { return &_class_data_; }


void QuerySpotMarketsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QuerySpotMarketsRequest*>(&to_msg);
  auto& from = static_cast<const QuerySpotMarketsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.QuerySpotMarketsRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_market_ids()->MergeFrom(from._internal_market_ids());
  if (!from._internal_status().empty()) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QuerySpotMarketsRequest::CopyFrom(const QuerySpotMarketsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.QuerySpotMarketsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuerySpotMarketsRequest::IsInitialized() const {
  return true;
}

void QuerySpotMarketsRequest::InternalSwap(QuerySpotMarketsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_market_ids()->InternalSwap(
      other->_internal_mutable_market_ids());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.status_, lhs_arena,
                                       &other->_impl_.status_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata QuerySpotMarketsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2fquery_2eproto[25]);
}
// ===================================================================

class QuerySpotMarketsResponse::_Internal {
 public:
};

void QuerySpotMarketsResponse::clear_markets() {
  _internal_mutable_markets()->Clear();
}
QuerySpotMarketsResponse::QuerySpotMarketsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.QuerySpotMarketsResponse)
}
QuerySpotMarketsResponse::QuerySpotMarketsResponse(const QuerySpotMarketsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QuerySpotMarketsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.markets_){from._impl_.markets_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.QuerySpotMarketsResponse)
}

inline void QuerySpotMarketsResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.markets_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

QuerySpotMarketsResponse::~QuerySpotMarketsResponse() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.QuerySpotMarketsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QuerySpotMarketsResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_markets()->~RepeatedPtrField();
}

void QuerySpotMarketsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QuerySpotMarketsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.QuerySpotMarketsResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_markets()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QuerySpotMarketsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .injective.exchange.v1beta1.SpotMarket markets = 1 [json_name = "markets"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_markets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QuerySpotMarketsResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.QuerySpotMarketsResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .injective.exchange.v1beta1.SpotMarket markets = 1 [json_name = "markets"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_markets_size()); i < n; i++) {
    const auto& repfield = this->_internal_markets(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.QuerySpotMarketsResponse)
  return target;
}

::size_t QuerySpotMarketsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.QuerySpotMarketsResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .injective.exchange.v1beta1.SpotMarket markets = 1 [json_name = "markets"];
  total_size += 1UL * this->_internal_markets_size();
  for (const auto& msg : this->_internal_markets()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QuerySpotMarketsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QuerySpotMarketsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QuerySpotMarketsResponse::GetClassData() const { return &_class_data_; }


void QuerySpotMarketsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QuerySpotMarketsResponse*>(&to_msg);
  auto& from = static_cast<const QuerySpotMarketsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.QuerySpotMarketsResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_markets()->MergeFrom(from._internal_markets());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QuerySpotMarketsResponse::CopyFrom(const QuerySpotMarketsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.QuerySpotMarketsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuerySpotMarketsResponse::IsInitialized() const {
  return true;
}

void QuerySpotMarketsResponse::InternalSwap(QuerySpotMarketsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_markets()->InternalSwap(other->_internal_mutable_markets());
}

::PROTOBUF_NAMESPACE_ID::Metadata QuerySpotMarketsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2fquery_2eproto[26]);
}
// ===================================================================

class QuerySpotMarketRequest::_Internal {
 public:
};

QuerySpotMarketRequest::QuerySpotMarketRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.QuerySpotMarketRequest)
}
QuerySpotMarketRequest::QuerySpotMarketRequest(const QuerySpotMarketRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QuerySpotMarketRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.market_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_market_id().empty()) {
    _this->_impl_.market_id_.Set(from._internal_market_id(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.QuerySpotMarketRequest)
}

inline void QuerySpotMarketRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.market_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

QuerySpotMarketRequest::~QuerySpotMarketRequest() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.QuerySpotMarketRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QuerySpotMarketRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.market_id_.Destroy();
}

void QuerySpotMarketRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QuerySpotMarketRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.QuerySpotMarketRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.market_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QuerySpotMarketRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string market_id = 1 [json_name = "marketId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_market_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.QuerySpotMarketRequest.market_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QuerySpotMarketRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.QuerySpotMarketRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string market_id = 1 [json_name = "marketId"];
  if (!this->_internal_market_id().empty()) {
    const std::string& _s = this->_internal_market_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.QuerySpotMarketRequest.market_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.QuerySpotMarketRequest)
  return target;
}

::size_t QuerySpotMarketRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.QuerySpotMarketRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string market_id = 1 [json_name = "marketId"];
  if (!this->_internal_market_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_market_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QuerySpotMarketRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QuerySpotMarketRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QuerySpotMarketRequest::GetClassData() const { return &_class_data_; }


void QuerySpotMarketRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QuerySpotMarketRequest*>(&to_msg);
  auto& from = static_cast<const QuerySpotMarketRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.QuerySpotMarketRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_market_id().empty()) {
    _this->_internal_set_market_id(from._internal_market_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QuerySpotMarketRequest::CopyFrom(const QuerySpotMarketRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.QuerySpotMarketRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuerySpotMarketRequest::IsInitialized() const {
  return true;
}

void QuerySpotMarketRequest::InternalSwap(QuerySpotMarketRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.market_id_, lhs_arena,
                                       &other->_impl_.market_id_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata QuerySpotMarketRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2fquery_2eproto[27]);
}
// ===================================================================

class QuerySpotMarketResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<QuerySpotMarketResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(QuerySpotMarketResponse, _impl_._has_bits_);
  static const ::injective::exchange::v1beta1::SpotMarket& market(const QuerySpotMarketResponse* msg);
  static void set_has_market(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::injective::exchange::v1beta1::SpotMarket&
QuerySpotMarketResponse::_Internal::market(const QuerySpotMarketResponse* msg) {
  return *msg->_impl_.market_;
}
void QuerySpotMarketResponse::clear_market() {
  if (_impl_.market_ != nullptr) _impl_.market_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
QuerySpotMarketResponse::QuerySpotMarketResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.QuerySpotMarketResponse)
}
QuerySpotMarketResponse::QuerySpotMarketResponse(const QuerySpotMarketResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QuerySpotMarketResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.market_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.market_ = new ::injective::exchange::v1beta1::SpotMarket(*from._impl_.market_);
  }
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.QuerySpotMarketResponse)
}

inline void QuerySpotMarketResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.market_){nullptr}
  };
}

QuerySpotMarketResponse::~QuerySpotMarketResponse() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.QuerySpotMarketResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QuerySpotMarketResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.market_;
}

void QuerySpotMarketResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QuerySpotMarketResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.QuerySpotMarketResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.market_ != nullptr);
    _impl_.market_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QuerySpotMarketResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .injective.exchange.v1beta1.SpotMarket market = 1 [json_name = "market"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_market(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QuerySpotMarketResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.QuerySpotMarketResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .injective.exchange.v1beta1.SpotMarket market = 1 [json_name = "market"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::market(this),
        _Internal::market(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.QuerySpotMarketResponse)
  return target;
}

::size_t QuerySpotMarketResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.QuerySpotMarketResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .injective.exchange.v1beta1.SpotMarket market = 1 [json_name = "market"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.market_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QuerySpotMarketResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QuerySpotMarketResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QuerySpotMarketResponse::GetClassData() const { return &_class_data_; }


void QuerySpotMarketResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QuerySpotMarketResponse*>(&to_msg);
  auto& from = static_cast<const QuerySpotMarketResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.QuerySpotMarketResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_market()->::injective::exchange::v1beta1::SpotMarket::MergeFrom(
        from._internal_market());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QuerySpotMarketResponse::CopyFrom(const QuerySpotMarketResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.QuerySpotMarketResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuerySpotMarketResponse::IsInitialized() const {
  return true;
}

void QuerySpotMarketResponse::InternalSwap(QuerySpotMarketResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.market_, other->_impl_.market_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QuerySpotMarketResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2fquery_2eproto[28]);
}
// ===================================================================

class QuerySpotOrderbookRequest::_Internal {
 public:
};

QuerySpotOrderbookRequest::QuerySpotOrderbookRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.QuerySpotOrderbookRequest)
}
QuerySpotOrderbookRequest::QuerySpotOrderbookRequest(const QuerySpotOrderbookRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QuerySpotOrderbookRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.market_id_) {}

    , decltype(_impl_.limit_cumulative_notional_) {}

    , decltype(_impl_.limit_cumulative_quantity_) {}

    , decltype(_impl_.limit_) {}

    , decltype(_impl_.order_side_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_market_id().empty()) {
    _this->_impl_.market_id_.Set(from._internal_market_id(), _this->GetArenaForAllocation());
  }
  _impl_.limit_cumulative_notional_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.limit_cumulative_notional_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_limit_cumulative_notional().empty()) {
    _this->_impl_.limit_cumulative_notional_.Set(from._internal_limit_cumulative_notional(), _this->GetArenaForAllocation());
  }
  _impl_.limit_cumulative_quantity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.limit_cumulative_quantity_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_limit_cumulative_quantity().empty()) {
    _this->_impl_.limit_cumulative_quantity_.Set(from._internal_limit_cumulative_quantity(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.limit_, &from._impl_.limit_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.order_side_) -
    reinterpret_cast<char*>(&_impl_.limit_)) + sizeof(_impl_.order_side_));
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.QuerySpotOrderbookRequest)
}

inline void QuerySpotOrderbookRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.market_id_) {}

    , decltype(_impl_.limit_cumulative_notional_) {}

    , decltype(_impl_.limit_cumulative_quantity_) {}

    , decltype(_impl_.limit_) { ::uint64_t{0u} }

    , decltype(_impl_.order_side_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.limit_cumulative_notional_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.limit_cumulative_notional_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.limit_cumulative_quantity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.limit_cumulative_quantity_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

QuerySpotOrderbookRequest::~QuerySpotOrderbookRequest() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.QuerySpotOrderbookRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QuerySpotOrderbookRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.market_id_.Destroy();
  _impl_.limit_cumulative_notional_.Destroy();
  _impl_.limit_cumulative_quantity_.Destroy();
}

void QuerySpotOrderbookRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QuerySpotOrderbookRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.QuerySpotOrderbookRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.market_id_.ClearToEmpty();
  _impl_.limit_cumulative_notional_.ClearToEmpty();
  _impl_.limit_cumulative_quantity_.ClearToEmpty();
  ::memset(&_impl_.limit_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.order_side_) -
      reinterpret_cast<char*>(&_impl_.limit_)) + sizeof(_impl_.order_side_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QuerySpotOrderbookRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string market_id = 1 [json_name = "marketId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_market_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.QuerySpotOrderbookRequest.market_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 limit = 2 [json_name = "limit"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .injective.exchange.v1beta1.OrderSide order_side = 3 [json_name = "orderSide"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_order_side(static_cast<::injective::exchange::v1beta1::OrderSide>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // string limit_cumulative_notional = 4 [json_name = "limitCumulativeNotional", (.gogoproto.nullable) = true, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_limit_cumulative_notional();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.QuerySpotOrderbookRequest.limit_cumulative_notional"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string limit_cumulative_quantity = 5 [json_name = "limitCumulativeQuantity", (.gogoproto.nullable) = true, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_limit_cumulative_quantity();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.QuerySpotOrderbookRequest.limit_cumulative_quantity"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QuerySpotOrderbookRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.QuerySpotOrderbookRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string market_id = 1 [json_name = "marketId"];
  if (!this->_internal_market_id().empty()) {
    const std::string& _s = this->_internal_market_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.QuerySpotOrderbookRequest.market_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // uint64 limit = 2 [json_name = "limit"];
  if (this->_internal_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_limit(), target);
  }

  // .injective.exchange.v1beta1.OrderSide order_side = 3 [json_name = "orderSide"];
  if (this->_internal_order_side() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        3, this->_internal_order_side(), target);
  }

  // string limit_cumulative_notional = 4 [json_name = "limitCumulativeNotional", (.gogoproto.nullable) = true, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_limit_cumulative_notional().empty()) {
    const std::string& _s = this->_internal_limit_cumulative_notional();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.QuerySpotOrderbookRequest.limit_cumulative_notional");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // string limit_cumulative_quantity = 5 [json_name = "limitCumulativeQuantity", (.gogoproto.nullable) = true, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_limit_cumulative_quantity().empty()) {
    const std::string& _s = this->_internal_limit_cumulative_quantity();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.QuerySpotOrderbookRequest.limit_cumulative_quantity");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.QuerySpotOrderbookRequest)
  return target;
}

::size_t QuerySpotOrderbookRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.QuerySpotOrderbookRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string market_id = 1 [json_name = "marketId"];
  if (!this->_internal_market_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_market_id());
  }

  // string limit_cumulative_notional = 4 [json_name = "limitCumulativeNotional", (.gogoproto.nullable) = true, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_limit_cumulative_notional().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_limit_cumulative_notional());
  }

  // string limit_cumulative_quantity = 5 [json_name = "limitCumulativeQuantity", (.gogoproto.nullable) = true, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_limit_cumulative_quantity().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_limit_cumulative_quantity());
  }

  // uint64 limit = 2 [json_name = "limit"];
  if (this->_internal_limit() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_limit());
  }

  // .injective.exchange.v1beta1.OrderSide order_side = 3 [json_name = "orderSide"];
  if (this->_internal_order_side() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_order_side());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QuerySpotOrderbookRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QuerySpotOrderbookRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QuerySpotOrderbookRequest::GetClassData() const { return &_class_data_; }


void QuerySpotOrderbookRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QuerySpotOrderbookRequest*>(&to_msg);
  auto& from = static_cast<const QuerySpotOrderbookRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.QuerySpotOrderbookRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_market_id().empty()) {
    _this->_internal_set_market_id(from._internal_market_id());
  }
  if (!from._internal_limit_cumulative_notional().empty()) {
    _this->_internal_set_limit_cumulative_notional(from._internal_limit_cumulative_notional());
  }
  if (!from._internal_limit_cumulative_quantity().empty()) {
    _this->_internal_set_limit_cumulative_quantity(from._internal_limit_cumulative_quantity());
  }
  if (from._internal_limit() != 0) {
    _this->_internal_set_limit(from._internal_limit());
  }
  if (from._internal_order_side() != 0) {
    _this->_internal_set_order_side(from._internal_order_side());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QuerySpotOrderbookRequest::CopyFrom(const QuerySpotOrderbookRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.QuerySpotOrderbookRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuerySpotOrderbookRequest::IsInitialized() const {
  return true;
}

void QuerySpotOrderbookRequest::InternalSwap(QuerySpotOrderbookRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.market_id_, lhs_arena,
                                       &other->_impl_.market_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.limit_cumulative_notional_, lhs_arena,
                                       &other->_impl_.limit_cumulative_notional_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.limit_cumulative_quantity_, lhs_arena,
                                       &other->_impl_.limit_cumulative_quantity_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(QuerySpotOrderbookRequest, _impl_.order_side_)
      + sizeof(QuerySpotOrderbookRequest::_impl_.order_side_)
      - PROTOBUF_FIELD_OFFSET(QuerySpotOrderbookRequest, _impl_.limit_)>(
          reinterpret_cast<char*>(&_impl_.limit_),
          reinterpret_cast<char*>(&other->_impl_.limit_));
}

::PROTOBUF_NAMESPACE_ID::Metadata QuerySpotOrderbookRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2fquery_2eproto[29]);
}
// ===================================================================

class QuerySpotOrderbookResponse::_Internal {
 public:
};

void QuerySpotOrderbookResponse::clear_buys_price_level() {
  _internal_mutable_buys_price_level()->Clear();
}
void QuerySpotOrderbookResponse::clear_sells_price_level() {
  _internal_mutable_sells_price_level()->Clear();
}
QuerySpotOrderbookResponse::QuerySpotOrderbookResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.QuerySpotOrderbookResponse)
}
QuerySpotOrderbookResponse::QuerySpotOrderbookResponse(const QuerySpotOrderbookResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QuerySpotOrderbookResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.buys_price_level_){from._impl_.buys_price_level_}
    , decltype(_impl_.sells_price_level_){from._impl_.sells_price_level_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.QuerySpotOrderbookResponse)
}

inline void QuerySpotOrderbookResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.buys_price_level_){arena}
    , decltype(_impl_.sells_price_level_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

QuerySpotOrderbookResponse::~QuerySpotOrderbookResponse() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.QuerySpotOrderbookResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QuerySpotOrderbookResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_buys_price_level()->~RepeatedPtrField();
  _internal_mutable_sells_price_level()->~RepeatedPtrField();
}

void QuerySpotOrderbookResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QuerySpotOrderbookResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.QuerySpotOrderbookResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_buys_price_level()->Clear();
  _internal_mutable_sells_price_level()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QuerySpotOrderbookResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .injective.exchange.v1beta1.Level buys_price_level = 1 [json_name = "buysPriceLevel"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_buys_price_level(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .injective.exchange.v1beta1.Level sells_price_level = 2 [json_name = "sellsPriceLevel"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sells_price_level(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QuerySpotOrderbookResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.QuerySpotOrderbookResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .injective.exchange.v1beta1.Level buys_price_level = 1 [json_name = "buysPriceLevel"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_buys_price_level_size()); i < n; i++) {
    const auto& repfield = this->_internal_buys_price_level(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .injective.exchange.v1beta1.Level sells_price_level = 2 [json_name = "sellsPriceLevel"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_sells_price_level_size()); i < n; i++) {
    const auto& repfield = this->_internal_sells_price_level(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.QuerySpotOrderbookResponse)
  return target;
}

::size_t QuerySpotOrderbookResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.QuerySpotOrderbookResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .injective.exchange.v1beta1.Level buys_price_level = 1 [json_name = "buysPriceLevel"];
  total_size += 1UL * this->_internal_buys_price_level_size();
  for (const auto& msg : this->_internal_buys_price_level()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .injective.exchange.v1beta1.Level sells_price_level = 2 [json_name = "sellsPriceLevel"];
  total_size += 1UL * this->_internal_sells_price_level_size();
  for (const auto& msg : this->_internal_sells_price_level()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QuerySpotOrderbookResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QuerySpotOrderbookResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QuerySpotOrderbookResponse::GetClassData() const { return &_class_data_; }


void QuerySpotOrderbookResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QuerySpotOrderbookResponse*>(&to_msg);
  auto& from = static_cast<const QuerySpotOrderbookResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.QuerySpotOrderbookResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_buys_price_level()->MergeFrom(from._internal_buys_price_level());
  _this->_internal_mutable_sells_price_level()->MergeFrom(from._internal_sells_price_level());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QuerySpotOrderbookResponse::CopyFrom(const QuerySpotOrderbookResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.QuerySpotOrderbookResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuerySpotOrderbookResponse::IsInitialized() const {
  return true;
}

void QuerySpotOrderbookResponse::InternalSwap(QuerySpotOrderbookResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_buys_price_level()->InternalSwap(other->_internal_mutable_buys_price_level());
  _internal_mutable_sells_price_level()->InternalSwap(other->_internal_mutable_sells_price_level());
}

::PROTOBUF_NAMESPACE_ID::Metadata QuerySpotOrderbookResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2fquery_2eproto[30]);
}
// ===================================================================

class FullSpotMarket::_Internal {
 public:
  using HasBits = decltype(std::declval<FullSpotMarket>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(FullSpotMarket, _impl_._has_bits_);
  static const ::injective::exchange::v1beta1::SpotMarket& market(const FullSpotMarket* msg);
  static void set_has_market(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::injective::exchange::v1beta1::MidPriceAndTOB& mid_price_and_tob(const FullSpotMarket* msg);
  static void set_has_mid_price_and_tob(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::injective::exchange::v1beta1::SpotMarket&
FullSpotMarket::_Internal::market(const FullSpotMarket* msg) {
  return *msg->_impl_.market_;
}
const ::injective::exchange::v1beta1::MidPriceAndTOB&
FullSpotMarket::_Internal::mid_price_and_tob(const FullSpotMarket* msg) {
  return *msg->_impl_.mid_price_and_tob_;
}
void FullSpotMarket::clear_market() {
  if (_impl_.market_ != nullptr) _impl_.market_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void FullSpotMarket::clear_mid_price_and_tob() {
  if (_impl_.mid_price_and_tob_ != nullptr) _impl_.mid_price_and_tob_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
FullSpotMarket::FullSpotMarket(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.FullSpotMarket)
}
FullSpotMarket::FullSpotMarket(const FullSpotMarket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FullSpotMarket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.market_){nullptr}
    , decltype(_impl_.mid_price_and_tob_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.market_ = new ::injective::exchange::v1beta1::SpotMarket(*from._impl_.market_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.mid_price_and_tob_ = new ::injective::exchange::v1beta1::MidPriceAndTOB(*from._impl_.mid_price_and_tob_);
  }
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.FullSpotMarket)
}

inline void FullSpotMarket::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.market_){nullptr}
    , decltype(_impl_.mid_price_and_tob_){nullptr}
  };
}

FullSpotMarket::~FullSpotMarket() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.FullSpotMarket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FullSpotMarket::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.market_;
  if (this != internal_default_instance()) delete _impl_.mid_price_and_tob_;
}

void FullSpotMarket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FullSpotMarket::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.FullSpotMarket)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.market_ != nullptr);
      _impl_.market_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.mid_price_and_tob_ != nullptr);
      _impl_.mid_price_and_tob_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FullSpotMarket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .injective.exchange.v1beta1.SpotMarket market = 1 [json_name = "market"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_market(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .injective.exchange.v1beta1.MidPriceAndTOB mid_price_and_tob = 2 [json_name = "midPriceAndTob", (.gogoproto.nullable) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_mid_price_and_tob(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* FullSpotMarket::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.FullSpotMarket)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .injective.exchange.v1beta1.SpotMarket market = 1 [json_name = "market"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::market(this),
        _Internal::market(this).GetCachedSize(), target, stream);
  }

  // .injective.exchange.v1beta1.MidPriceAndTOB mid_price_and_tob = 2 [json_name = "midPriceAndTob", (.gogoproto.nullable) = true];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::mid_price_and_tob(this),
        _Internal::mid_price_and_tob(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.FullSpotMarket)
  return target;
}

::size_t FullSpotMarket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.FullSpotMarket)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .injective.exchange.v1beta1.SpotMarket market = 1 [json_name = "market"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.market_);
    }

    // .injective.exchange.v1beta1.MidPriceAndTOB mid_price_and_tob = 2 [json_name = "midPriceAndTob", (.gogoproto.nullable) = true];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.mid_price_and_tob_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FullSpotMarket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FullSpotMarket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FullSpotMarket::GetClassData() const { return &_class_data_; }


void FullSpotMarket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FullSpotMarket*>(&to_msg);
  auto& from = static_cast<const FullSpotMarket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.FullSpotMarket)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_market()->::injective::exchange::v1beta1::SpotMarket::MergeFrom(
          from._internal_market());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_mid_price_and_tob()->::injective::exchange::v1beta1::MidPriceAndTOB::MergeFrom(
          from._internal_mid_price_and_tob());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FullSpotMarket::CopyFrom(const FullSpotMarket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.FullSpotMarket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FullSpotMarket::IsInitialized() const {
  return true;
}

void FullSpotMarket::InternalSwap(FullSpotMarket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FullSpotMarket, _impl_.mid_price_and_tob_)
      + sizeof(FullSpotMarket::_impl_.mid_price_and_tob_)
      - PROTOBUF_FIELD_OFFSET(FullSpotMarket, _impl_.market_)>(
          reinterpret_cast<char*>(&_impl_.market_),
          reinterpret_cast<char*>(&other->_impl_.market_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FullSpotMarket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2fquery_2eproto[31]);
}
// ===================================================================

class QueryFullSpotMarketsRequest::_Internal {
 public:
};

QueryFullSpotMarketsRequest::QueryFullSpotMarketsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.QueryFullSpotMarketsRequest)
}
QueryFullSpotMarketsRequest::QueryFullSpotMarketsRequest(const QueryFullSpotMarketsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryFullSpotMarketsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.market_ids_){from._impl_.market_ids_}
    , decltype(_impl_.status_) {}

    , decltype(_impl_.with_mid_price_and_tob_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.status_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.status_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_status().empty()) {
    _this->_impl_.status_.Set(from._internal_status(), _this->GetArenaForAllocation());
  }
  _this->_impl_.with_mid_price_and_tob_ = from._impl_.with_mid_price_and_tob_;
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.QueryFullSpotMarketsRequest)
}

inline void QueryFullSpotMarketsRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.market_ids_){arena}
    , decltype(_impl_.status_) {}

    , decltype(_impl_.with_mid_price_and_tob_) { false }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.status_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.status_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

QueryFullSpotMarketsRequest::~QueryFullSpotMarketsRequest() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.QueryFullSpotMarketsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryFullSpotMarketsRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_market_ids()->~RepeatedPtrField();
  _impl_.status_.Destroy();
}

void QueryFullSpotMarketsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryFullSpotMarketsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.QueryFullSpotMarketsRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_market_ids()->Clear();
  _impl_.status_.ClearToEmpty();
  _impl_.with_mid_price_and_tob_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryFullSpotMarketsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string status = 1 [json_name = "status"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_status();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.QueryFullSpotMarketsRequest.status"));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string market_ids = 2 [json_name = "marketIds"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_market_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.QueryFullSpotMarketsRequest.market_ids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // bool with_mid_price_and_tob = 3 [json_name = "withMidPriceAndTob"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.with_mid_price_and_tob_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryFullSpotMarketsRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.QueryFullSpotMarketsRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string status = 1 [json_name = "status"];
  if (!this->_internal_status().empty()) {
    const std::string& _s = this->_internal_status();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.QueryFullSpotMarketsRequest.status");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // repeated string market_ids = 2 [json_name = "marketIds"];
  for (int i = 0, n = this->_internal_market_ids_size(); i < n; ++i) {
    const auto& s = this->_internal_market_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.QueryFullSpotMarketsRequest.market_ids");
    target = stream->WriteString(2, s, target);
  }

  // bool with_mid_price_and_tob = 3 [json_name = "withMidPriceAndTob"];
  if (this->_internal_with_mid_price_and_tob() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        3, this->_internal_with_mid_price_and_tob(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.QueryFullSpotMarketsRequest)
  return target;
}

::size_t QueryFullSpotMarketsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.QueryFullSpotMarketsRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string market_ids = 2 [json_name = "marketIds"];
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_market_ids().size());
  for (int i = 0, n = _internal_market_ids().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_market_ids().Get(i));
  }

  // string status = 1 [json_name = "status"];
  if (!this->_internal_status().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_status());
  }

  // bool with_mid_price_and_tob = 3 [json_name = "withMidPriceAndTob"];
  if (this->_internal_with_mid_price_and_tob() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryFullSpotMarketsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryFullSpotMarketsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryFullSpotMarketsRequest::GetClassData() const { return &_class_data_; }


void QueryFullSpotMarketsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryFullSpotMarketsRequest*>(&to_msg);
  auto& from = static_cast<const QueryFullSpotMarketsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.QueryFullSpotMarketsRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_market_ids()->MergeFrom(from._internal_market_ids());
  if (!from._internal_status().empty()) {
    _this->_internal_set_status(from._internal_status());
  }
  if (from._internal_with_mid_price_and_tob() != 0) {
    _this->_internal_set_with_mid_price_and_tob(from._internal_with_mid_price_and_tob());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryFullSpotMarketsRequest::CopyFrom(const QueryFullSpotMarketsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.QueryFullSpotMarketsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryFullSpotMarketsRequest::IsInitialized() const {
  return true;
}

void QueryFullSpotMarketsRequest::InternalSwap(QueryFullSpotMarketsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_market_ids()->InternalSwap(
      other->_internal_mutable_market_ids());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.status_, lhs_arena,
                                       &other->_impl_.status_, rhs_arena);

  swap(_impl_.with_mid_price_and_tob_, other->_impl_.with_mid_price_and_tob_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryFullSpotMarketsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2fquery_2eproto[32]);
}
// ===================================================================

class QueryFullSpotMarketsResponse::_Internal {
 public:
};

QueryFullSpotMarketsResponse::QueryFullSpotMarketsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.QueryFullSpotMarketsResponse)
}
QueryFullSpotMarketsResponse::QueryFullSpotMarketsResponse(const QueryFullSpotMarketsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryFullSpotMarketsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.markets_){from._impl_.markets_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.QueryFullSpotMarketsResponse)
}

inline void QueryFullSpotMarketsResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.markets_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

QueryFullSpotMarketsResponse::~QueryFullSpotMarketsResponse() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.QueryFullSpotMarketsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryFullSpotMarketsResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_markets()->~RepeatedPtrField();
}

void QueryFullSpotMarketsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryFullSpotMarketsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.QueryFullSpotMarketsResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_markets()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryFullSpotMarketsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .injective.exchange.v1beta1.FullSpotMarket markets = 1 [json_name = "markets"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_markets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryFullSpotMarketsResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.QueryFullSpotMarketsResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .injective.exchange.v1beta1.FullSpotMarket markets = 1 [json_name = "markets"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_markets_size()); i < n; i++) {
    const auto& repfield = this->_internal_markets(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.QueryFullSpotMarketsResponse)
  return target;
}

::size_t QueryFullSpotMarketsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.QueryFullSpotMarketsResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .injective.exchange.v1beta1.FullSpotMarket markets = 1 [json_name = "markets"];
  total_size += 1UL * this->_internal_markets_size();
  for (const auto& msg : this->_internal_markets()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryFullSpotMarketsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryFullSpotMarketsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryFullSpotMarketsResponse::GetClassData() const { return &_class_data_; }


void QueryFullSpotMarketsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryFullSpotMarketsResponse*>(&to_msg);
  auto& from = static_cast<const QueryFullSpotMarketsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.QueryFullSpotMarketsResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_markets()->MergeFrom(from._internal_markets());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryFullSpotMarketsResponse::CopyFrom(const QueryFullSpotMarketsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.QueryFullSpotMarketsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryFullSpotMarketsResponse::IsInitialized() const {
  return true;
}

void QueryFullSpotMarketsResponse::InternalSwap(QueryFullSpotMarketsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_markets()->InternalSwap(other->_internal_mutable_markets());
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryFullSpotMarketsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2fquery_2eproto[33]);
}
// ===================================================================

class QueryFullSpotMarketRequest::_Internal {
 public:
};

QueryFullSpotMarketRequest::QueryFullSpotMarketRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.QueryFullSpotMarketRequest)
}
QueryFullSpotMarketRequest::QueryFullSpotMarketRequest(const QueryFullSpotMarketRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryFullSpotMarketRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.market_id_) {}

    , decltype(_impl_.with_mid_price_and_tob_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_market_id().empty()) {
    _this->_impl_.market_id_.Set(from._internal_market_id(), _this->GetArenaForAllocation());
  }
  _this->_impl_.with_mid_price_and_tob_ = from._impl_.with_mid_price_and_tob_;
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.QueryFullSpotMarketRequest)
}

inline void QueryFullSpotMarketRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.market_id_) {}

    , decltype(_impl_.with_mid_price_and_tob_) { false }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

QueryFullSpotMarketRequest::~QueryFullSpotMarketRequest() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.QueryFullSpotMarketRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryFullSpotMarketRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.market_id_.Destroy();
}

void QueryFullSpotMarketRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryFullSpotMarketRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.QueryFullSpotMarketRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.market_id_.ClearToEmpty();
  _impl_.with_mid_price_and_tob_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryFullSpotMarketRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string market_id = 1 [json_name = "marketId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_market_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.QueryFullSpotMarketRequest.market_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // bool with_mid_price_and_tob = 2 [json_name = "withMidPriceAndTob"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.with_mid_price_and_tob_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryFullSpotMarketRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.QueryFullSpotMarketRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string market_id = 1 [json_name = "marketId"];
  if (!this->_internal_market_id().empty()) {
    const std::string& _s = this->_internal_market_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.QueryFullSpotMarketRequest.market_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // bool with_mid_price_and_tob = 2 [json_name = "withMidPriceAndTob"];
  if (this->_internal_with_mid_price_and_tob() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        2, this->_internal_with_mid_price_and_tob(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.QueryFullSpotMarketRequest)
  return target;
}

::size_t QueryFullSpotMarketRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.QueryFullSpotMarketRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string market_id = 1 [json_name = "marketId"];
  if (!this->_internal_market_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_market_id());
  }

  // bool with_mid_price_and_tob = 2 [json_name = "withMidPriceAndTob"];
  if (this->_internal_with_mid_price_and_tob() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryFullSpotMarketRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryFullSpotMarketRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryFullSpotMarketRequest::GetClassData() const { return &_class_data_; }


void QueryFullSpotMarketRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryFullSpotMarketRequest*>(&to_msg);
  auto& from = static_cast<const QueryFullSpotMarketRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.QueryFullSpotMarketRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_market_id().empty()) {
    _this->_internal_set_market_id(from._internal_market_id());
  }
  if (from._internal_with_mid_price_and_tob() != 0) {
    _this->_internal_set_with_mid_price_and_tob(from._internal_with_mid_price_and_tob());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryFullSpotMarketRequest::CopyFrom(const QueryFullSpotMarketRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.QueryFullSpotMarketRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryFullSpotMarketRequest::IsInitialized() const {
  return true;
}

void QueryFullSpotMarketRequest::InternalSwap(QueryFullSpotMarketRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.market_id_, lhs_arena,
                                       &other->_impl_.market_id_, rhs_arena);

  swap(_impl_.with_mid_price_and_tob_, other->_impl_.with_mid_price_and_tob_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryFullSpotMarketRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2fquery_2eproto[34]);
}
// ===================================================================

class QueryFullSpotMarketResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<QueryFullSpotMarketResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(QueryFullSpotMarketResponse, _impl_._has_bits_);
  static const ::injective::exchange::v1beta1::FullSpotMarket& market(const QueryFullSpotMarketResponse* msg);
  static void set_has_market(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::injective::exchange::v1beta1::FullSpotMarket&
QueryFullSpotMarketResponse::_Internal::market(const QueryFullSpotMarketResponse* msg) {
  return *msg->_impl_.market_;
}
QueryFullSpotMarketResponse::QueryFullSpotMarketResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.QueryFullSpotMarketResponse)
}
QueryFullSpotMarketResponse::QueryFullSpotMarketResponse(const QueryFullSpotMarketResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryFullSpotMarketResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.market_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.market_ = new ::injective::exchange::v1beta1::FullSpotMarket(*from._impl_.market_);
  }
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.QueryFullSpotMarketResponse)
}

inline void QueryFullSpotMarketResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.market_){nullptr}
  };
}

QueryFullSpotMarketResponse::~QueryFullSpotMarketResponse() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.QueryFullSpotMarketResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryFullSpotMarketResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.market_;
}

void QueryFullSpotMarketResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryFullSpotMarketResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.QueryFullSpotMarketResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.market_ != nullptr);
    _impl_.market_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryFullSpotMarketResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .injective.exchange.v1beta1.FullSpotMarket market = 1 [json_name = "market"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_market(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryFullSpotMarketResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.QueryFullSpotMarketResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .injective.exchange.v1beta1.FullSpotMarket market = 1 [json_name = "market"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::market(this),
        _Internal::market(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.QueryFullSpotMarketResponse)
  return target;
}

::size_t QueryFullSpotMarketResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.QueryFullSpotMarketResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .injective.exchange.v1beta1.FullSpotMarket market = 1 [json_name = "market"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.market_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryFullSpotMarketResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryFullSpotMarketResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryFullSpotMarketResponse::GetClassData() const { return &_class_data_; }


void QueryFullSpotMarketResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryFullSpotMarketResponse*>(&to_msg);
  auto& from = static_cast<const QueryFullSpotMarketResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.QueryFullSpotMarketResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_market()->::injective::exchange::v1beta1::FullSpotMarket::MergeFrom(
        from._internal_market());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryFullSpotMarketResponse::CopyFrom(const QueryFullSpotMarketResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.QueryFullSpotMarketResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryFullSpotMarketResponse::IsInitialized() const {
  return true;
}

void QueryFullSpotMarketResponse::InternalSwap(QueryFullSpotMarketResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.market_, other->_impl_.market_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryFullSpotMarketResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2fquery_2eproto[35]);
}
// ===================================================================

class QuerySpotOrdersByHashesRequest::_Internal {
 public:
};

QuerySpotOrdersByHashesRequest::QuerySpotOrdersByHashesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.QuerySpotOrdersByHashesRequest)
}
QuerySpotOrdersByHashesRequest::QuerySpotOrdersByHashesRequest(const QuerySpotOrdersByHashesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QuerySpotOrdersByHashesRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.order_hashes_){from._impl_.order_hashes_}
    , decltype(_impl_.market_id_) {}

    , decltype(_impl_.subaccount_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_market_id().empty()) {
    _this->_impl_.market_id_.Set(from._internal_market_id(), _this->GetArenaForAllocation());
  }
  _impl_.subaccount_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.subaccount_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_subaccount_id().empty()) {
    _this->_impl_.subaccount_id_.Set(from._internal_subaccount_id(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.QuerySpotOrdersByHashesRequest)
}

inline void QuerySpotOrdersByHashesRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.order_hashes_){arena}
    , decltype(_impl_.market_id_) {}

    , decltype(_impl_.subaccount_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.subaccount_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.subaccount_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

QuerySpotOrdersByHashesRequest::~QuerySpotOrdersByHashesRequest() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.QuerySpotOrdersByHashesRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QuerySpotOrdersByHashesRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_order_hashes()->~RepeatedPtrField();
  _impl_.market_id_.Destroy();
  _impl_.subaccount_id_.Destroy();
}

void QuerySpotOrdersByHashesRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QuerySpotOrdersByHashesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.QuerySpotOrdersByHashesRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_order_hashes()->Clear();
  _impl_.market_id_.ClearToEmpty();
  _impl_.subaccount_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QuerySpotOrdersByHashesRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string market_id = 1 [json_name = "marketId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_market_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.QuerySpotOrdersByHashesRequest.market_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string subaccount_id = 2 [json_name = "subaccountId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_subaccount_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.QuerySpotOrdersByHashesRequest.subaccount_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string order_hashes = 3 [json_name = "orderHashes"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_order_hashes();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.QuerySpotOrdersByHashesRequest.order_hashes"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QuerySpotOrdersByHashesRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.QuerySpotOrdersByHashesRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string market_id = 1 [json_name = "marketId"];
  if (!this->_internal_market_id().empty()) {
    const std::string& _s = this->_internal_market_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.QuerySpotOrdersByHashesRequest.market_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string subaccount_id = 2 [json_name = "subaccountId"];
  if (!this->_internal_subaccount_id().empty()) {
    const std::string& _s = this->_internal_subaccount_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.QuerySpotOrdersByHashesRequest.subaccount_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // repeated string order_hashes = 3 [json_name = "orderHashes"];
  for (int i = 0, n = this->_internal_order_hashes_size(); i < n; ++i) {
    const auto& s = this->_internal_order_hashes(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.QuerySpotOrdersByHashesRequest.order_hashes");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.QuerySpotOrdersByHashesRequest)
  return target;
}

::size_t QuerySpotOrdersByHashesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.QuerySpotOrdersByHashesRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string order_hashes = 3 [json_name = "orderHashes"];
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_order_hashes().size());
  for (int i = 0, n = _internal_order_hashes().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_order_hashes().Get(i));
  }

  // string market_id = 1 [json_name = "marketId"];
  if (!this->_internal_market_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_market_id());
  }

  // string subaccount_id = 2 [json_name = "subaccountId"];
  if (!this->_internal_subaccount_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_subaccount_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QuerySpotOrdersByHashesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QuerySpotOrdersByHashesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QuerySpotOrdersByHashesRequest::GetClassData() const { return &_class_data_; }


void QuerySpotOrdersByHashesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QuerySpotOrdersByHashesRequest*>(&to_msg);
  auto& from = static_cast<const QuerySpotOrdersByHashesRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.QuerySpotOrdersByHashesRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_order_hashes()->MergeFrom(from._internal_order_hashes());
  if (!from._internal_market_id().empty()) {
    _this->_internal_set_market_id(from._internal_market_id());
  }
  if (!from._internal_subaccount_id().empty()) {
    _this->_internal_set_subaccount_id(from._internal_subaccount_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QuerySpotOrdersByHashesRequest::CopyFrom(const QuerySpotOrdersByHashesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.QuerySpotOrdersByHashesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuerySpotOrdersByHashesRequest::IsInitialized() const {
  return true;
}

void QuerySpotOrdersByHashesRequest::InternalSwap(QuerySpotOrdersByHashesRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_order_hashes()->InternalSwap(
      other->_internal_mutable_order_hashes());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.market_id_, lhs_arena,
                                       &other->_impl_.market_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.subaccount_id_, lhs_arena,
                                       &other->_impl_.subaccount_id_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata QuerySpotOrdersByHashesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2fquery_2eproto[36]);
}
// ===================================================================

class QuerySpotOrdersByHashesResponse::_Internal {
 public:
};

QuerySpotOrdersByHashesResponse::QuerySpotOrdersByHashesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.QuerySpotOrdersByHashesResponse)
}
QuerySpotOrdersByHashesResponse::QuerySpotOrdersByHashesResponse(const QuerySpotOrdersByHashesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QuerySpotOrdersByHashesResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.orders_){from._impl_.orders_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.QuerySpotOrdersByHashesResponse)
}

inline void QuerySpotOrdersByHashesResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.orders_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

QuerySpotOrdersByHashesResponse::~QuerySpotOrdersByHashesResponse() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.QuerySpotOrdersByHashesResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QuerySpotOrdersByHashesResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_orders()->~RepeatedPtrField();
}

void QuerySpotOrdersByHashesResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QuerySpotOrdersByHashesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.QuerySpotOrdersByHashesResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_orders()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QuerySpotOrdersByHashesResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .injective.exchange.v1beta1.TrimmedSpotLimitOrder orders = 1 [json_name = "orders"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_orders(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QuerySpotOrdersByHashesResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.QuerySpotOrdersByHashesResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .injective.exchange.v1beta1.TrimmedSpotLimitOrder orders = 1 [json_name = "orders"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_orders_size()); i < n; i++) {
    const auto& repfield = this->_internal_orders(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.QuerySpotOrdersByHashesResponse)
  return target;
}

::size_t QuerySpotOrdersByHashesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.QuerySpotOrdersByHashesResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .injective.exchange.v1beta1.TrimmedSpotLimitOrder orders = 1 [json_name = "orders"];
  total_size += 1UL * this->_internal_orders_size();
  for (const auto& msg : this->_internal_orders()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QuerySpotOrdersByHashesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QuerySpotOrdersByHashesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QuerySpotOrdersByHashesResponse::GetClassData() const { return &_class_data_; }


void QuerySpotOrdersByHashesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QuerySpotOrdersByHashesResponse*>(&to_msg);
  auto& from = static_cast<const QuerySpotOrdersByHashesResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.QuerySpotOrdersByHashesResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_orders()->MergeFrom(from._internal_orders());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QuerySpotOrdersByHashesResponse::CopyFrom(const QuerySpotOrdersByHashesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.QuerySpotOrdersByHashesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuerySpotOrdersByHashesResponse::IsInitialized() const {
  return true;
}

void QuerySpotOrdersByHashesResponse::InternalSwap(QuerySpotOrdersByHashesResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_orders()->InternalSwap(other->_internal_mutable_orders());
}

::PROTOBUF_NAMESPACE_ID::Metadata QuerySpotOrdersByHashesResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2fquery_2eproto[37]);
}
// ===================================================================

class QueryTraderSpotOrdersRequest::_Internal {
 public:
};

QueryTraderSpotOrdersRequest::QueryTraderSpotOrdersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.QueryTraderSpotOrdersRequest)
}
QueryTraderSpotOrdersRequest::QueryTraderSpotOrdersRequest(const QueryTraderSpotOrdersRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryTraderSpotOrdersRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.market_id_) {}

    , decltype(_impl_.subaccount_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_market_id().empty()) {
    _this->_impl_.market_id_.Set(from._internal_market_id(), _this->GetArenaForAllocation());
  }
  _impl_.subaccount_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.subaccount_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_subaccount_id().empty()) {
    _this->_impl_.subaccount_id_.Set(from._internal_subaccount_id(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.QueryTraderSpotOrdersRequest)
}

inline void QueryTraderSpotOrdersRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.market_id_) {}

    , decltype(_impl_.subaccount_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.subaccount_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.subaccount_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

QueryTraderSpotOrdersRequest::~QueryTraderSpotOrdersRequest() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.QueryTraderSpotOrdersRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryTraderSpotOrdersRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.market_id_.Destroy();
  _impl_.subaccount_id_.Destroy();
}

void QueryTraderSpotOrdersRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryTraderSpotOrdersRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.QueryTraderSpotOrdersRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.market_id_.ClearToEmpty();
  _impl_.subaccount_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryTraderSpotOrdersRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string market_id = 1 [json_name = "marketId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_market_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.QueryTraderSpotOrdersRequest.market_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string subaccount_id = 2 [json_name = "subaccountId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_subaccount_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.QueryTraderSpotOrdersRequest.subaccount_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryTraderSpotOrdersRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.QueryTraderSpotOrdersRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string market_id = 1 [json_name = "marketId"];
  if (!this->_internal_market_id().empty()) {
    const std::string& _s = this->_internal_market_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.QueryTraderSpotOrdersRequest.market_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string subaccount_id = 2 [json_name = "subaccountId"];
  if (!this->_internal_subaccount_id().empty()) {
    const std::string& _s = this->_internal_subaccount_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.QueryTraderSpotOrdersRequest.subaccount_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.QueryTraderSpotOrdersRequest)
  return target;
}

::size_t QueryTraderSpotOrdersRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.QueryTraderSpotOrdersRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string market_id = 1 [json_name = "marketId"];
  if (!this->_internal_market_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_market_id());
  }

  // string subaccount_id = 2 [json_name = "subaccountId"];
  if (!this->_internal_subaccount_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_subaccount_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryTraderSpotOrdersRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryTraderSpotOrdersRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryTraderSpotOrdersRequest::GetClassData() const { return &_class_data_; }


void QueryTraderSpotOrdersRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryTraderSpotOrdersRequest*>(&to_msg);
  auto& from = static_cast<const QueryTraderSpotOrdersRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.QueryTraderSpotOrdersRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_market_id().empty()) {
    _this->_internal_set_market_id(from._internal_market_id());
  }
  if (!from._internal_subaccount_id().empty()) {
    _this->_internal_set_subaccount_id(from._internal_subaccount_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryTraderSpotOrdersRequest::CopyFrom(const QueryTraderSpotOrdersRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.QueryTraderSpotOrdersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryTraderSpotOrdersRequest::IsInitialized() const {
  return true;
}

void QueryTraderSpotOrdersRequest::InternalSwap(QueryTraderSpotOrdersRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.market_id_, lhs_arena,
                                       &other->_impl_.market_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.subaccount_id_, lhs_arena,
                                       &other->_impl_.subaccount_id_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryTraderSpotOrdersRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2fquery_2eproto[38]);
}
// ===================================================================

class QueryAccountAddressSpotOrdersRequest::_Internal {
 public:
};

QueryAccountAddressSpotOrdersRequest::QueryAccountAddressSpotOrdersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.QueryAccountAddressSpotOrdersRequest)
}
QueryAccountAddressSpotOrdersRequest::QueryAccountAddressSpotOrdersRequest(const QueryAccountAddressSpotOrdersRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryAccountAddressSpotOrdersRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.market_id_) {}

    , decltype(_impl_.account_address_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_market_id().empty()) {
    _this->_impl_.market_id_.Set(from._internal_market_id(), _this->GetArenaForAllocation());
  }
  _impl_.account_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.account_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_account_address().empty()) {
    _this->_impl_.account_address_.Set(from._internal_account_address(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.QueryAccountAddressSpotOrdersRequest)
}

inline void QueryAccountAddressSpotOrdersRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.market_id_) {}

    , decltype(_impl_.account_address_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.account_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.account_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

QueryAccountAddressSpotOrdersRequest::~QueryAccountAddressSpotOrdersRequest() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.QueryAccountAddressSpotOrdersRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryAccountAddressSpotOrdersRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.market_id_.Destroy();
  _impl_.account_address_.Destroy();
}

void QueryAccountAddressSpotOrdersRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryAccountAddressSpotOrdersRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.QueryAccountAddressSpotOrdersRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.market_id_.ClearToEmpty();
  _impl_.account_address_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryAccountAddressSpotOrdersRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string market_id = 1 [json_name = "marketId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_market_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.QueryAccountAddressSpotOrdersRequest.market_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string account_address = 2 [json_name = "accountAddress"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_account_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.QueryAccountAddressSpotOrdersRequest.account_address"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryAccountAddressSpotOrdersRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.QueryAccountAddressSpotOrdersRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string market_id = 1 [json_name = "marketId"];
  if (!this->_internal_market_id().empty()) {
    const std::string& _s = this->_internal_market_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.QueryAccountAddressSpotOrdersRequest.market_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string account_address = 2 [json_name = "accountAddress"];
  if (!this->_internal_account_address().empty()) {
    const std::string& _s = this->_internal_account_address();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.QueryAccountAddressSpotOrdersRequest.account_address");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.QueryAccountAddressSpotOrdersRequest)
  return target;
}

::size_t QueryAccountAddressSpotOrdersRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.QueryAccountAddressSpotOrdersRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string market_id = 1 [json_name = "marketId"];
  if (!this->_internal_market_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_market_id());
  }

  // string account_address = 2 [json_name = "accountAddress"];
  if (!this->_internal_account_address().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_account_address());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryAccountAddressSpotOrdersRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryAccountAddressSpotOrdersRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryAccountAddressSpotOrdersRequest::GetClassData() const { return &_class_data_; }


void QueryAccountAddressSpotOrdersRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryAccountAddressSpotOrdersRequest*>(&to_msg);
  auto& from = static_cast<const QueryAccountAddressSpotOrdersRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.QueryAccountAddressSpotOrdersRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_market_id().empty()) {
    _this->_internal_set_market_id(from._internal_market_id());
  }
  if (!from._internal_account_address().empty()) {
    _this->_internal_set_account_address(from._internal_account_address());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryAccountAddressSpotOrdersRequest::CopyFrom(const QueryAccountAddressSpotOrdersRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.QueryAccountAddressSpotOrdersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryAccountAddressSpotOrdersRequest::IsInitialized() const {
  return true;
}

void QueryAccountAddressSpotOrdersRequest::InternalSwap(QueryAccountAddressSpotOrdersRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.market_id_, lhs_arena,
                                       &other->_impl_.market_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.account_address_, lhs_arena,
                                       &other->_impl_.account_address_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryAccountAddressSpotOrdersRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2fquery_2eproto[39]);
}
// ===================================================================

class TrimmedSpotLimitOrder::_Internal {
 public:
};

TrimmedSpotLimitOrder::TrimmedSpotLimitOrder(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.TrimmedSpotLimitOrder)
}
TrimmedSpotLimitOrder::TrimmedSpotLimitOrder(const TrimmedSpotLimitOrder& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TrimmedSpotLimitOrder* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.price_) {}

    , decltype(_impl_.quantity_) {}

    , decltype(_impl_.fillable_) {}

    , decltype(_impl_.order_hash_) {}

    , decltype(_impl_.isbuy_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.price_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.price_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_price().empty()) {
    _this->_impl_.price_.Set(from._internal_price(), _this->GetArenaForAllocation());
  }
  _impl_.quantity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.quantity_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_quantity().empty()) {
    _this->_impl_.quantity_.Set(from._internal_quantity(), _this->GetArenaForAllocation());
  }
  _impl_.fillable_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.fillable_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_fillable().empty()) {
    _this->_impl_.fillable_.Set(from._internal_fillable(), _this->GetArenaForAllocation());
  }
  _impl_.order_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.order_hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_order_hash().empty()) {
    _this->_impl_.order_hash_.Set(from._internal_order_hash(), _this->GetArenaForAllocation());
  }
  _this->_impl_.isbuy_ = from._impl_.isbuy_;
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.TrimmedSpotLimitOrder)
}

inline void TrimmedSpotLimitOrder::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.price_) {}

    , decltype(_impl_.quantity_) {}

    , decltype(_impl_.fillable_) {}

    , decltype(_impl_.order_hash_) {}

    , decltype(_impl_.isbuy_) { false }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.price_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.price_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.quantity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.quantity_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.fillable_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.fillable_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.order_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.order_hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TrimmedSpotLimitOrder::~TrimmedSpotLimitOrder() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.TrimmedSpotLimitOrder)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TrimmedSpotLimitOrder::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.price_.Destroy();
  _impl_.quantity_.Destroy();
  _impl_.fillable_.Destroy();
  _impl_.order_hash_.Destroy();
}

void TrimmedSpotLimitOrder::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TrimmedSpotLimitOrder::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.TrimmedSpotLimitOrder)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.price_.ClearToEmpty();
  _impl_.quantity_.ClearToEmpty();
  _impl_.fillable_.ClearToEmpty();
  _impl_.order_hash_.ClearToEmpty();
  _impl_.isbuy_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrimmedSpotLimitOrder::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string price = 1 [json_name = "price", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_price();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.TrimmedSpotLimitOrder.price"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string quantity = 2 [json_name = "quantity", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_quantity();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.TrimmedSpotLimitOrder.quantity"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string fillable = 3 [json_name = "fillable", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_fillable();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.TrimmedSpotLimitOrder.fillable"));
        } else {
          goto handle_unusual;
        }
        continue;
      // bool isBuy = 4 [json_name = "isBuy"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _impl_.isbuy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string order_hash = 5 [json_name = "orderHash"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_order_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.TrimmedSpotLimitOrder.order_hash"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* TrimmedSpotLimitOrder::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.TrimmedSpotLimitOrder)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string price = 1 [json_name = "price", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_price().empty()) {
    const std::string& _s = this->_internal_price();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.TrimmedSpotLimitOrder.price");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string quantity = 2 [json_name = "quantity", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_quantity().empty()) {
    const std::string& _s = this->_internal_quantity();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.TrimmedSpotLimitOrder.quantity");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string fillable = 3 [json_name = "fillable", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_fillable().empty()) {
    const std::string& _s = this->_internal_fillable();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.TrimmedSpotLimitOrder.fillable");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // bool isBuy = 4 [json_name = "isBuy"];
  if (this->_internal_isbuy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        4, this->_internal_isbuy(), target);
  }

  // string order_hash = 5 [json_name = "orderHash"];
  if (!this->_internal_order_hash().empty()) {
    const std::string& _s = this->_internal_order_hash();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.TrimmedSpotLimitOrder.order_hash");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.TrimmedSpotLimitOrder)
  return target;
}

::size_t TrimmedSpotLimitOrder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.TrimmedSpotLimitOrder)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string price = 1 [json_name = "price", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_price().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_price());
  }

  // string quantity = 2 [json_name = "quantity", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_quantity().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_quantity());
  }

  // string fillable = 3 [json_name = "fillable", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_fillable().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_fillable());
  }

  // string order_hash = 5 [json_name = "orderHash"];
  if (!this->_internal_order_hash().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_order_hash());
  }

  // bool isBuy = 4 [json_name = "isBuy"];
  if (this->_internal_isbuy() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrimmedSpotLimitOrder::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TrimmedSpotLimitOrder::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrimmedSpotLimitOrder::GetClassData() const { return &_class_data_; }


void TrimmedSpotLimitOrder::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TrimmedSpotLimitOrder*>(&to_msg);
  auto& from = static_cast<const TrimmedSpotLimitOrder&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.TrimmedSpotLimitOrder)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_price().empty()) {
    _this->_internal_set_price(from._internal_price());
  }
  if (!from._internal_quantity().empty()) {
    _this->_internal_set_quantity(from._internal_quantity());
  }
  if (!from._internal_fillable().empty()) {
    _this->_internal_set_fillable(from._internal_fillable());
  }
  if (!from._internal_order_hash().empty()) {
    _this->_internal_set_order_hash(from._internal_order_hash());
  }
  if (from._internal_isbuy() != 0) {
    _this->_internal_set_isbuy(from._internal_isbuy());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrimmedSpotLimitOrder::CopyFrom(const TrimmedSpotLimitOrder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.TrimmedSpotLimitOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrimmedSpotLimitOrder::IsInitialized() const {
  return true;
}

void TrimmedSpotLimitOrder::InternalSwap(TrimmedSpotLimitOrder* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.price_, lhs_arena,
                                       &other->_impl_.price_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.quantity_, lhs_arena,
                                       &other->_impl_.quantity_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.fillable_, lhs_arena,
                                       &other->_impl_.fillable_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.order_hash_, lhs_arena,
                                       &other->_impl_.order_hash_, rhs_arena);

  swap(_impl_.isbuy_, other->_impl_.isbuy_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrimmedSpotLimitOrder::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2fquery_2eproto[40]);
}
// ===================================================================

class QueryTraderSpotOrdersResponse::_Internal {
 public:
};

QueryTraderSpotOrdersResponse::QueryTraderSpotOrdersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.QueryTraderSpotOrdersResponse)
}
QueryTraderSpotOrdersResponse::QueryTraderSpotOrdersResponse(const QueryTraderSpotOrdersResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryTraderSpotOrdersResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.orders_){from._impl_.orders_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.QueryTraderSpotOrdersResponse)
}

inline void QueryTraderSpotOrdersResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.orders_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

QueryTraderSpotOrdersResponse::~QueryTraderSpotOrdersResponse() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.QueryTraderSpotOrdersResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryTraderSpotOrdersResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_orders()->~RepeatedPtrField();
}

void QueryTraderSpotOrdersResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryTraderSpotOrdersResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.QueryTraderSpotOrdersResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_orders()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryTraderSpotOrdersResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .injective.exchange.v1beta1.TrimmedSpotLimitOrder orders = 1 [json_name = "orders"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_orders(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryTraderSpotOrdersResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.QueryTraderSpotOrdersResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .injective.exchange.v1beta1.TrimmedSpotLimitOrder orders = 1 [json_name = "orders"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_orders_size()); i < n; i++) {
    const auto& repfield = this->_internal_orders(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.QueryTraderSpotOrdersResponse)
  return target;
}

::size_t QueryTraderSpotOrdersResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.QueryTraderSpotOrdersResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .injective.exchange.v1beta1.TrimmedSpotLimitOrder orders = 1 [json_name = "orders"];
  total_size += 1UL * this->_internal_orders_size();
  for (const auto& msg : this->_internal_orders()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryTraderSpotOrdersResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryTraderSpotOrdersResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryTraderSpotOrdersResponse::GetClassData() const { return &_class_data_; }


void QueryTraderSpotOrdersResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryTraderSpotOrdersResponse*>(&to_msg);
  auto& from = static_cast<const QueryTraderSpotOrdersResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.QueryTraderSpotOrdersResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_orders()->MergeFrom(from._internal_orders());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryTraderSpotOrdersResponse::CopyFrom(const QueryTraderSpotOrdersResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.QueryTraderSpotOrdersResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryTraderSpotOrdersResponse::IsInitialized() const {
  return true;
}

void QueryTraderSpotOrdersResponse::InternalSwap(QueryTraderSpotOrdersResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_orders()->InternalSwap(other->_internal_mutable_orders());
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryTraderSpotOrdersResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2fquery_2eproto[41]);
}
// ===================================================================

class QueryAccountAddressSpotOrdersResponse::_Internal {
 public:
};

QueryAccountAddressSpotOrdersResponse::QueryAccountAddressSpotOrdersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.QueryAccountAddressSpotOrdersResponse)
}
QueryAccountAddressSpotOrdersResponse::QueryAccountAddressSpotOrdersResponse(const QueryAccountAddressSpotOrdersResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryAccountAddressSpotOrdersResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.orders_){from._impl_.orders_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.QueryAccountAddressSpotOrdersResponse)
}

inline void QueryAccountAddressSpotOrdersResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.orders_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

QueryAccountAddressSpotOrdersResponse::~QueryAccountAddressSpotOrdersResponse() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.QueryAccountAddressSpotOrdersResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryAccountAddressSpotOrdersResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_orders()->~RepeatedPtrField();
}

void QueryAccountAddressSpotOrdersResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryAccountAddressSpotOrdersResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.QueryAccountAddressSpotOrdersResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_orders()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryAccountAddressSpotOrdersResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .injective.exchange.v1beta1.TrimmedSpotLimitOrder orders = 1 [json_name = "orders"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_orders(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryAccountAddressSpotOrdersResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.QueryAccountAddressSpotOrdersResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .injective.exchange.v1beta1.TrimmedSpotLimitOrder orders = 1 [json_name = "orders"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_orders_size()); i < n; i++) {
    const auto& repfield = this->_internal_orders(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.QueryAccountAddressSpotOrdersResponse)
  return target;
}

::size_t QueryAccountAddressSpotOrdersResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.QueryAccountAddressSpotOrdersResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .injective.exchange.v1beta1.TrimmedSpotLimitOrder orders = 1 [json_name = "orders"];
  total_size += 1UL * this->_internal_orders_size();
  for (const auto& msg : this->_internal_orders()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryAccountAddressSpotOrdersResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryAccountAddressSpotOrdersResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryAccountAddressSpotOrdersResponse::GetClassData() const { return &_class_data_; }


void QueryAccountAddressSpotOrdersResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryAccountAddressSpotOrdersResponse*>(&to_msg);
  auto& from = static_cast<const QueryAccountAddressSpotOrdersResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.QueryAccountAddressSpotOrdersResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_orders()->MergeFrom(from._internal_orders());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryAccountAddressSpotOrdersResponse::CopyFrom(const QueryAccountAddressSpotOrdersResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.QueryAccountAddressSpotOrdersResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryAccountAddressSpotOrdersResponse::IsInitialized() const {
  return true;
}

void QueryAccountAddressSpotOrdersResponse::InternalSwap(QueryAccountAddressSpotOrdersResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_orders()->InternalSwap(other->_internal_mutable_orders());
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryAccountAddressSpotOrdersResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2fquery_2eproto[42]);
}
// ===================================================================

class QuerySpotMidPriceAndTOBRequest::_Internal {
 public:
};

QuerySpotMidPriceAndTOBRequest::QuerySpotMidPriceAndTOBRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.QuerySpotMidPriceAndTOBRequest)
}
QuerySpotMidPriceAndTOBRequest::QuerySpotMidPriceAndTOBRequest(const QuerySpotMidPriceAndTOBRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QuerySpotMidPriceAndTOBRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.market_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_market_id().empty()) {
    _this->_impl_.market_id_.Set(from._internal_market_id(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.QuerySpotMidPriceAndTOBRequest)
}

inline void QuerySpotMidPriceAndTOBRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.market_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

QuerySpotMidPriceAndTOBRequest::~QuerySpotMidPriceAndTOBRequest() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.QuerySpotMidPriceAndTOBRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QuerySpotMidPriceAndTOBRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.market_id_.Destroy();
}

void QuerySpotMidPriceAndTOBRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QuerySpotMidPriceAndTOBRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.QuerySpotMidPriceAndTOBRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.market_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QuerySpotMidPriceAndTOBRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string market_id = 1 [json_name = "marketId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_market_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.QuerySpotMidPriceAndTOBRequest.market_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QuerySpotMidPriceAndTOBRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.QuerySpotMidPriceAndTOBRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string market_id = 1 [json_name = "marketId"];
  if (!this->_internal_market_id().empty()) {
    const std::string& _s = this->_internal_market_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.QuerySpotMidPriceAndTOBRequest.market_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.QuerySpotMidPriceAndTOBRequest)
  return target;
}

::size_t QuerySpotMidPriceAndTOBRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.QuerySpotMidPriceAndTOBRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string market_id = 1 [json_name = "marketId"];
  if (!this->_internal_market_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_market_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QuerySpotMidPriceAndTOBRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QuerySpotMidPriceAndTOBRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QuerySpotMidPriceAndTOBRequest::GetClassData() const { return &_class_data_; }


void QuerySpotMidPriceAndTOBRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QuerySpotMidPriceAndTOBRequest*>(&to_msg);
  auto& from = static_cast<const QuerySpotMidPriceAndTOBRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.QuerySpotMidPriceAndTOBRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_market_id().empty()) {
    _this->_internal_set_market_id(from._internal_market_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QuerySpotMidPriceAndTOBRequest::CopyFrom(const QuerySpotMidPriceAndTOBRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.QuerySpotMidPriceAndTOBRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuerySpotMidPriceAndTOBRequest::IsInitialized() const {
  return true;
}

void QuerySpotMidPriceAndTOBRequest::InternalSwap(QuerySpotMidPriceAndTOBRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.market_id_, lhs_arena,
                                       &other->_impl_.market_id_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata QuerySpotMidPriceAndTOBRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2fquery_2eproto[43]);
}
// ===================================================================

class QuerySpotMidPriceAndTOBResponse::_Internal {
 public:
};

QuerySpotMidPriceAndTOBResponse::QuerySpotMidPriceAndTOBResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.QuerySpotMidPriceAndTOBResponse)
}
QuerySpotMidPriceAndTOBResponse::QuerySpotMidPriceAndTOBResponse(const QuerySpotMidPriceAndTOBResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QuerySpotMidPriceAndTOBResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.mid_price_) {}

    , decltype(_impl_.best_buy_price_) {}

    , decltype(_impl_.best_sell_price_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.mid_price_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.mid_price_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mid_price().empty()) {
    _this->_impl_.mid_price_.Set(from._internal_mid_price(), _this->GetArenaForAllocation());
  }
  _impl_.best_buy_price_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.best_buy_price_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_best_buy_price().empty()) {
    _this->_impl_.best_buy_price_.Set(from._internal_best_buy_price(), _this->GetArenaForAllocation());
  }
  _impl_.best_sell_price_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.best_sell_price_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_best_sell_price().empty()) {
    _this->_impl_.best_sell_price_.Set(from._internal_best_sell_price(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.QuerySpotMidPriceAndTOBResponse)
}

inline void QuerySpotMidPriceAndTOBResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.mid_price_) {}

    , decltype(_impl_.best_buy_price_) {}

    , decltype(_impl_.best_sell_price_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.mid_price_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.mid_price_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.best_buy_price_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.best_buy_price_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.best_sell_price_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.best_sell_price_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

QuerySpotMidPriceAndTOBResponse::~QuerySpotMidPriceAndTOBResponse() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.QuerySpotMidPriceAndTOBResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QuerySpotMidPriceAndTOBResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.mid_price_.Destroy();
  _impl_.best_buy_price_.Destroy();
  _impl_.best_sell_price_.Destroy();
}

void QuerySpotMidPriceAndTOBResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QuerySpotMidPriceAndTOBResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.QuerySpotMidPriceAndTOBResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.mid_price_.ClearToEmpty();
  _impl_.best_buy_price_.ClearToEmpty();
  _impl_.best_sell_price_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QuerySpotMidPriceAndTOBResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string mid_price = 1 [json_name = "midPrice", (.gogoproto.nullable) = true, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_mid_price();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.QuerySpotMidPriceAndTOBResponse.mid_price"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string best_buy_price = 2 [json_name = "bestBuyPrice", (.gogoproto.nullable) = true, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_best_buy_price();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.QuerySpotMidPriceAndTOBResponse.best_buy_price"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string best_sell_price = 3 [json_name = "bestSellPrice", (.gogoproto.nullable) = true, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_best_sell_price();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.QuerySpotMidPriceAndTOBResponse.best_sell_price"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QuerySpotMidPriceAndTOBResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.QuerySpotMidPriceAndTOBResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string mid_price = 1 [json_name = "midPrice", (.gogoproto.nullable) = true, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_mid_price().empty()) {
    const std::string& _s = this->_internal_mid_price();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.QuerySpotMidPriceAndTOBResponse.mid_price");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string best_buy_price = 2 [json_name = "bestBuyPrice", (.gogoproto.nullable) = true, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_best_buy_price().empty()) {
    const std::string& _s = this->_internal_best_buy_price();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.QuerySpotMidPriceAndTOBResponse.best_buy_price");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string best_sell_price = 3 [json_name = "bestSellPrice", (.gogoproto.nullable) = true, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_best_sell_price().empty()) {
    const std::string& _s = this->_internal_best_sell_price();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.QuerySpotMidPriceAndTOBResponse.best_sell_price");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.QuerySpotMidPriceAndTOBResponse)
  return target;
}

::size_t QuerySpotMidPriceAndTOBResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.QuerySpotMidPriceAndTOBResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string mid_price = 1 [json_name = "midPrice", (.gogoproto.nullable) = true, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_mid_price().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_mid_price());
  }

  // string best_buy_price = 2 [json_name = "bestBuyPrice", (.gogoproto.nullable) = true, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_best_buy_price().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_best_buy_price());
  }

  // string best_sell_price = 3 [json_name = "bestSellPrice", (.gogoproto.nullable) = true, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_best_sell_price().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_best_sell_price());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QuerySpotMidPriceAndTOBResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QuerySpotMidPriceAndTOBResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QuerySpotMidPriceAndTOBResponse::GetClassData() const { return &_class_data_; }


void QuerySpotMidPriceAndTOBResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QuerySpotMidPriceAndTOBResponse*>(&to_msg);
  auto& from = static_cast<const QuerySpotMidPriceAndTOBResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.QuerySpotMidPriceAndTOBResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_mid_price().empty()) {
    _this->_internal_set_mid_price(from._internal_mid_price());
  }
  if (!from._internal_best_buy_price().empty()) {
    _this->_internal_set_best_buy_price(from._internal_best_buy_price());
  }
  if (!from._internal_best_sell_price().empty()) {
    _this->_internal_set_best_sell_price(from._internal_best_sell_price());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QuerySpotMidPriceAndTOBResponse::CopyFrom(const QuerySpotMidPriceAndTOBResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.QuerySpotMidPriceAndTOBResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuerySpotMidPriceAndTOBResponse::IsInitialized() const {
  return true;
}

void QuerySpotMidPriceAndTOBResponse::InternalSwap(QuerySpotMidPriceAndTOBResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.mid_price_, lhs_arena,
                                       &other->_impl_.mid_price_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.best_buy_price_, lhs_arena,
                                       &other->_impl_.best_buy_price_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.best_sell_price_, lhs_arena,
                                       &other->_impl_.best_sell_price_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata QuerySpotMidPriceAndTOBResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2fquery_2eproto[44]);
}
// ===================================================================

class QueryDerivativeMidPriceAndTOBRequest::_Internal {
 public:
};

QueryDerivativeMidPriceAndTOBRequest::QueryDerivativeMidPriceAndTOBRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.QueryDerivativeMidPriceAndTOBRequest)
}
QueryDerivativeMidPriceAndTOBRequest::QueryDerivativeMidPriceAndTOBRequest(const QueryDerivativeMidPriceAndTOBRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryDerivativeMidPriceAndTOBRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.market_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_market_id().empty()) {
    _this->_impl_.market_id_.Set(from._internal_market_id(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.QueryDerivativeMidPriceAndTOBRequest)
}

inline void QueryDerivativeMidPriceAndTOBRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.market_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

QueryDerivativeMidPriceAndTOBRequest::~QueryDerivativeMidPriceAndTOBRequest() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.QueryDerivativeMidPriceAndTOBRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryDerivativeMidPriceAndTOBRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.market_id_.Destroy();
}

void QueryDerivativeMidPriceAndTOBRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryDerivativeMidPriceAndTOBRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.QueryDerivativeMidPriceAndTOBRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.market_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryDerivativeMidPriceAndTOBRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string market_id = 1 [json_name = "marketId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_market_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.QueryDerivativeMidPriceAndTOBRequest.market_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryDerivativeMidPriceAndTOBRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.QueryDerivativeMidPriceAndTOBRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string market_id = 1 [json_name = "marketId"];
  if (!this->_internal_market_id().empty()) {
    const std::string& _s = this->_internal_market_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.QueryDerivativeMidPriceAndTOBRequest.market_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.QueryDerivativeMidPriceAndTOBRequest)
  return target;
}

::size_t QueryDerivativeMidPriceAndTOBRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.QueryDerivativeMidPriceAndTOBRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string market_id = 1 [json_name = "marketId"];
  if (!this->_internal_market_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_market_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryDerivativeMidPriceAndTOBRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryDerivativeMidPriceAndTOBRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryDerivativeMidPriceAndTOBRequest::GetClassData() const { return &_class_data_; }


void QueryDerivativeMidPriceAndTOBRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryDerivativeMidPriceAndTOBRequest*>(&to_msg);
  auto& from = static_cast<const QueryDerivativeMidPriceAndTOBRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.QueryDerivativeMidPriceAndTOBRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_market_id().empty()) {
    _this->_internal_set_market_id(from._internal_market_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryDerivativeMidPriceAndTOBRequest::CopyFrom(const QueryDerivativeMidPriceAndTOBRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.QueryDerivativeMidPriceAndTOBRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryDerivativeMidPriceAndTOBRequest::IsInitialized() const {
  return true;
}

void QueryDerivativeMidPriceAndTOBRequest::InternalSwap(QueryDerivativeMidPriceAndTOBRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.market_id_, lhs_arena,
                                       &other->_impl_.market_id_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryDerivativeMidPriceAndTOBRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2fquery_2eproto[45]);
}
// ===================================================================

class QueryDerivativeMidPriceAndTOBResponse::_Internal {
 public:
};

QueryDerivativeMidPriceAndTOBResponse::QueryDerivativeMidPriceAndTOBResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.QueryDerivativeMidPriceAndTOBResponse)
}
QueryDerivativeMidPriceAndTOBResponse::QueryDerivativeMidPriceAndTOBResponse(const QueryDerivativeMidPriceAndTOBResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryDerivativeMidPriceAndTOBResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.mid_price_) {}

    , decltype(_impl_.best_buy_price_) {}

    , decltype(_impl_.best_sell_price_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.mid_price_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.mid_price_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mid_price().empty()) {
    _this->_impl_.mid_price_.Set(from._internal_mid_price(), _this->GetArenaForAllocation());
  }
  _impl_.best_buy_price_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.best_buy_price_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_best_buy_price().empty()) {
    _this->_impl_.best_buy_price_.Set(from._internal_best_buy_price(), _this->GetArenaForAllocation());
  }
  _impl_.best_sell_price_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.best_sell_price_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_best_sell_price().empty()) {
    _this->_impl_.best_sell_price_.Set(from._internal_best_sell_price(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.QueryDerivativeMidPriceAndTOBResponse)
}

inline void QueryDerivativeMidPriceAndTOBResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.mid_price_) {}

    , decltype(_impl_.best_buy_price_) {}

    , decltype(_impl_.best_sell_price_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.mid_price_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.mid_price_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.best_buy_price_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.best_buy_price_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.best_sell_price_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.best_sell_price_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

QueryDerivativeMidPriceAndTOBResponse::~QueryDerivativeMidPriceAndTOBResponse() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.QueryDerivativeMidPriceAndTOBResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryDerivativeMidPriceAndTOBResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.mid_price_.Destroy();
  _impl_.best_buy_price_.Destroy();
  _impl_.best_sell_price_.Destroy();
}

void QueryDerivativeMidPriceAndTOBResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryDerivativeMidPriceAndTOBResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.QueryDerivativeMidPriceAndTOBResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.mid_price_.ClearToEmpty();
  _impl_.best_buy_price_.ClearToEmpty();
  _impl_.best_sell_price_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryDerivativeMidPriceAndTOBResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string mid_price = 1 [json_name = "midPrice", (.gogoproto.nullable) = true, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_mid_price();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.QueryDerivativeMidPriceAndTOBResponse.mid_price"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string best_buy_price = 2 [json_name = "bestBuyPrice", (.gogoproto.nullable) = true, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_best_buy_price();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.QueryDerivativeMidPriceAndTOBResponse.best_buy_price"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string best_sell_price = 3 [json_name = "bestSellPrice", (.gogoproto.nullable) = true, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_best_sell_price();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.QueryDerivativeMidPriceAndTOBResponse.best_sell_price"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryDerivativeMidPriceAndTOBResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.QueryDerivativeMidPriceAndTOBResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string mid_price = 1 [json_name = "midPrice", (.gogoproto.nullable) = true, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_mid_price().empty()) {
    const std::string& _s = this->_internal_mid_price();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.QueryDerivativeMidPriceAndTOBResponse.mid_price");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string best_buy_price = 2 [json_name = "bestBuyPrice", (.gogoproto.nullable) = true, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_best_buy_price().empty()) {
    const std::string& _s = this->_internal_best_buy_price();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.QueryDerivativeMidPriceAndTOBResponse.best_buy_price");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string best_sell_price = 3 [json_name = "bestSellPrice", (.gogoproto.nullable) = true, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_best_sell_price().empty()) {
    const std::string& _s = this->_internal_best_sell_price();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.QueryDerivativeMidPriceAndTOBResponse.best_sell_price");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.QueryDerivativeMidPriceAndTOBResponse)
  return target;
}

::size_t QueryDerivativeMidPriceAndTOBResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.QueryDerivativeMidPriceAndTOBResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string mid_price = 1 [json_name = "midPrice", (.gogoproto.nullable) = true, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_mid_price().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_mid_price());
  }

  // string best_buy_price = 2 [json_name = "bestBuyPrice", (.gogoproto.nullable) = true, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_best_buy_price().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_best_buy_price());
  }

  // string best_sell_price = 3 [json_name = "bestSellPrice", (.gogoproto.nullable) = true, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_best_sell_price().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_best_sell_price());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryDerivativeMidPriceAndTOBResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryDerivativeMidPriceAndTOBResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryDerivativeMidPriceAndTOBResponse::GetClassData() const { return &_class_data_; }


void QueryDerivativeMidPriceAndTOBResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryDerivativeMidPriceAndTOBResponse*>(&to_msg);
  auto& from = static_cast<const QueryDerivativeMidPriceAndTOBResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.QueryDerivativeMidPriceAndTOBResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_mid_price().empty()) {
    _this->_internal_set_mid_price(from._internal_mid_price());
  }
  if (!from._internal_best_buy_price().empty()) {
    _this->_internal_set_best_buy_price(from._internal_best_buy_price());
  }
  if (!from._internal_best_sell_price().empty()) {
    _this->_internal_set_best_sell_price(from._internal_best_sell_price());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryDerivativeMidPriceAndTOBResponse::CopyFrom(const QueryDerivativeMidPriceAndTOBResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.QueryDerivativeMidPriceAndTOBResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryDerivativeMidPriceAndTOBResponse::IsInitialized() const {
  return true;
}

void QueryDerivativeMidPriceAndTOBResponse::InternalSwap(QueryDerivativeMidPriceAndTOBResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.mid_price_, lhs_arena,
                                       &other->_impl_.mid_price_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.best_buy_price_, lhs_arena,
                                       &other->_impl_.best_buy_price_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.best_sell_price_, lhs_arena,
                                       &other->_impl_.best_sell_price_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryDerivativeMidPriceAndTOBResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2fquery_2eproto[46]);
}
// ===================================================================

class QueryDerivativeOrderbookRequest::_Internal {
 public:
};

QueryDerivativeOrderbookRequest::QueryDerivativeOrderbookRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.QueryDerivativeOrderbookRequest)
}
QueryDerivativeOrderbookRequest::QueryDerivativeOrderbookRequest(const QueryDerivativeOrderbookRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryDerivativeOrderbookRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.market_id_) {}

    , decltype(_impl_.limit_cumulative_notional_) {}

    , decltype(_impl_.limit_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_market_id().empty()) {
    _this->_impl_.market_id_.Set(from._internal_market_id(), _this->GetArenaForAllocation());
  }
  _impl_.limit_cumulative_notional_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.limit_cumulative_notional_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_limit_cumulative_notional().empty()) {
    _this->_impl_.limit_cumulative_notional_.Set(from._internal_limit_cumulative_notional(), _this->GetArenaForAllocation());
  }
  _this->_impl_.limit_ = from._impl_.limit_;
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.QueryDerivativeOrderbookRequest)
}

inline void QueryDerivativeOrderbookRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.market_id_) {}

    , decltype(_impl_.limit_cumulative_notional_) {}

    , decltype(_impl_.limit_) { ::uint64_t{0u} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.limit_cumulative_notional_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.limit_cumulative_notional_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

QueryDerivativeOrderbookRequest::~QueryDerivativeOrderbookRequest() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.QueryDerivativeOrderbookRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryDerivativeOrderbookRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.market_id_.Destroy();
  _impl_.limit_cumulative_notional_.Destroy();
}

void QueryDerivativeOrderbookRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryDerivativeOrderbookRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.QueryDerivativeOrderbookRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.market_id_.ClearToEmpty();
  _impl_.limit_cumulative_notional_.ClearToEmpty();
  _impl_.limit_ = ::uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryDerivativeOrderbookRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string market_id = 1 [json_name = "marketId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_market_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.QueryDerivativeOrderbookRequest.market_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 limit = 2 [json_name = "limit"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string limit_cumulative_notional = 3 [json_name = "limitCumulativeNotional", (.gogoproto.nullable) = true, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_limit_cumulative_notional();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.QueryDerivativeOrderbookRequest.limit_cumulative_notional"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryDerivativeOrderbookRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.QueryDerivativeOrderbookRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string market_id = 1 [json_name = "marketId"];
  if (!this->_internal_market_id().empty()) {
    const std::string& _s = this->_internal_market_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.QueryDerivativeOrderbookRequest.market_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // uint64 limit = 2 [json_name = "limit"];
  if (this->_internal_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_limit(), target);
  }

  // string limit_cumulative_notional = 3 [json_name = "limitCumulativeNotional", (.gogoproto.nullable) = true, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_limit_cumulative_notional().empty()) {
    const std::string& _s = this->_internal_limit_cumulative_notional();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.QueryDerivativeOrderbookRequest.limit_cumulative_notional");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.QueryDerivativeOrderbookRequest)
  return target;
}

::size_t QueryDerivativeOrderbookRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.QueryDerivativeOrderbookRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string market_id = 1 [json_name = "marketId"];
  if (!this->_internal_market_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_market_id());
  }

  // string limit_cumulative_notional = 3 [json_name = "limitCumulativeNotional", (.gogoproto.nullable) = true, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_limit_cumulative_notional().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_limit_cumulative_notional());
  }

  // uint64 limit = 2 [json_name = "limit"];
  if (this->_internal_limit() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_limit());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryDerivativeOrderbookRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryDerivativeOrderbookRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryDerivativeOrderbookRequest::GetClassData() const { return &_class_data_; }


void QueryDerivativeOrderbookRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryDerivativeOrderbookRequest*>(&to_msg);
  auto& from = static_cast<const QueryDerivativeOrderbookRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.QueryDerivativeOrderbookRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_market_id().empty()) {
    _this->_internal_set_market_id(from._internal_market_id());
  }
  if (!from._internal_limit_cumulative_notional().empty()) {
    _this->_internal_set_limit_cumulative_notional(from._internal_limit_cumulative_notional());
  }
  if (from._internal_limit() != 0) {
    _this->_internal_set_limit(from._internal_limit());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryDerivativeOrderbookRequest::CopyFrom(const QueryDerivativeOrderbookRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.QueryDerivativeOrderbookRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryDerivativeOrderbookRequest::IsInitialized() const {
  return true;
}

void QueryDerivativeOrderbookRequest::InternalSwap(QueryDerivativeOrderbookRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.market_id_, lhs_arena,
                                       &other->_impl_.market_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.limit_cumulative_notional_, lhs_arena,
                                       &other->_impl_.limit_cumulative_notional_, rhs_arena);

  swap(_impl_.limit_, other->_impl_.limit_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryDerivativeOrderbookRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2fquery_2eproto[47]);
}
// ===================================================================

class QueryDerivativeOrderbookResponse::_Internal {
 public:
};

void QueryDerivativeOrderbookResponse::clear_buys_price_level() {
  _internal_mutable_buys_price_level()->Clear();
}
void QueryDerivativeOrderbookResponse::clear_sells_price_level() {
  _internal_mutable_sells_price_level()->Clear();
}
QueryDerivativeOrderbookResponse::QueryDerivativeOrderbookResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.QueryDerivativeOrderbookResponse)
}
QueryDerivativeOrderbookResponse::QueryDerivativeOrderbookResponse(const QueryDerivativeOrderbookResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryDerivativeOrderbookResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.buys_price_level_){from._impl_.buys_price_level_}
    , decltype(_impl_.sells_price_level_){from._impl_.sells_price_level_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.QueryDerivativeOrderbookResponse)
}

inline void QueryDerivativeOrderbookResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.buys_price_level_){arena}
    , decltype(_impl_.sells_price_level_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

QueryDerivativeOrderbookResponse::~QueryDerivativeOrderbookResponse() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.QueryDerivativeOrderbookResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryDerivativeOrderbookResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_buys_price_level()->~RepeatedPtrField();
  _internal_mutable_sells_price_level()->~RepeatedPtrField();
}

void QueryDerivativeOrderbookResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryDerivativeOrderbookResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.QueryDerivativeOrderbookResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_buys_price_level()->Clear();
  _internal_mutable_sells_price_level()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryDerivativeOrderbookResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .injective.exchange.v1beta1.Level buys_price_level = 1 [json_name = "buysPriceLevel"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_buys_price_level(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .injective.exchange.v1beta1.Level sells_price_level = 2 [json_name = "sellsPriceLevel"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sells_price_level(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryDerivativeOrderbookResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.QueryDerivativeOrderbookResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .injective.exchange.v1beta1.Level buys_price_level = 1 [json_name = "buysPriceLevel"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_buys_price_level_size()); i < n; i++) {
    const auto& repfield = this->_internal_buys_price_level(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .injective.exchange.v1beta1.Level sells_price_level = 2 [json_name = "sellsPriceLevel"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_sells_price_level_size()); i < n; i++) {
    const auto& repfield = this->_internal_sells_price_level(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.QueryDerivativeOrderbookResponse)
  return target;
}

::size_t QueryDerivativeOrderbookResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.QueryDerivativeOrderbookResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .injective.exchange.v1beta1.Level buys_price_level = 1 [json_name = "buysPriceLevel"];
  total_size += 1UL * this->_internal_buys_price_level_size();
  for (const auto& msg : this->_internal_buys_price_level()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .injective.exchange.v1beta1.Level sells_price_level = 2 [json_name = "sellsPriceLevel"];
  total_size += 1UL * this->_internal_sells_price_level_size();
  for (const auto& msg : this->_internal_sells_price_level()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryDerivativeOrderbookResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryDerivativeOrderbookResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryDerivativeOrderbookResponse::GetClassData() const { return &_class_data_; }


void QueryDerivativeOrderbookResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryDerivativeOrderbookResponse*>(&to_msg);
  auto& from = static_cast<const QueryDerivativeOrderbookResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.QueryDerivativeOrderbookResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_buys_price_level()->MergeFrom(from._internal_buys_price_level());
  _this->_internal_mutable_sells_price_level()->MergeFrom(from._internal_sells_price_level());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryDerivativeOrderbookResponse::CopyFrom(const QueryDerivativeOrderbookResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.QueryDerivativeOrderbookResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryDerivativeOrderbookResponse::IsInitialized() const {
  return true;
}

void QueryDerivativeOrderbookResponse::InternalSwap(QueryDerivativeOrderbookResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_buys_price_level()->InternalSwap(other->_internal_mutable_buys_price_level());
  _internal_mutable_sells_price_level()->InternalSwap(other->_internal_mutable_sells_price_level());
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryDerivativeOrderbookResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2fquery_2eproto[48]);
}
// ===================================================================

class QueryTraderSpotOrdersToCancelUpToAmountRequest::_Internal {
 public:
};

QueryTraderSpotOrdersToCancelUpToAmountRequest::QueryTraderSpotOrdersToCancelUpToAmountRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.QueryTraderSpotOrdersToCancelUpToAmountRequest)
}
QueryTraderSpotOrdersToCancelUpToAmountRequest::QueryTraderSpotOrdersToCancelUpToAmountRequest(const QueryTraderSpotOrdersToCancelUpToAmountRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryTraderSpotOrdersToCancelUpToAmountRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.market_id_) {}

    , decltype(_impl_.subaccount_id_) {}

    , decltype(_impl_.base_amount_) {}

    , decltype(_impl_.quote_amount_) {}

    , decltype(_impl_.reference_price_) {}

    , decltype(_impl_.strategy_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_market_id().empty()) {
    _this->_impl_.market_id_.Set(from._internal_market_id(), _this->GetArenaForAllocation());
  }
  _impl_.subaccount_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.subaccount_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_subaccount_id().empty()) {
    _this->_impl_.subaccount_id_.Set(from._internal_subaccount_id(), _this->GetArenaForAllocation());
  }
  _impl_.base_amount_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.base_amount_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_base_amount().empty()) {
    _this->_impl_.base_amount_.Set(from._internal_base_amount(), _this->GetArenaForAllocation());
  }
  _impl_.quote_amount_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.quote_amount_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_quote_amount().empty()) {
    _this->_impl_.quote_amount_.Set(from._internal_quote_amount(), _this->GetArenaForAllocation());
  }
  _impl_.reference_price_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.reference_price_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_reference_price().empty()) {
    _this->_impl_.reference_price_.Set(from._internal_reference_price(), _this->GetArenaForAllocation());
  }
  _this->_impl_.strategy_ = from._impl_.strategy_;
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.QueryTraderSpotOrdersToCancelUpToAmountRequest)
}

inline void QueryTraderSpotOrdersToCancelUpToAmountRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.market_id_) {}

    , decltype(_impl_.subaccount_id_) {}

    , decltype(_impl_.base_amount_) {}

    , decltype(_impl_.quote_amount_) {}

    , decltype(_impl_.reference_price_) {}

    , decltype(_impl_.strategy_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.subaccount_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.subaccount_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.base_amount_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.base_amount_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.quote_amount_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.quote_amount_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.reference_price_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.reference_price_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

QueryTraderSpotOrdersToCancelUpToAmountRequest::~QueryTraderSpotOrdersToCancelUpToAmountRequest() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.QueryTraderSpotOrdersToCancelUpToAmountRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryTraderSpotOrdersToCancelUpToAmountRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.market_id_.Destroy();
  _impl_.subaccount_id_.Destroy();
  _impl_.base_amount_.Destroy();
  _impl_.quote_amount_.Destroy();
  _impl_.reference_price_.Destroy();
}

void QueryTraderSpotOrdersToCancelUpToAmountRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryTraderSpotOrdersToCancelUpToAmountRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.QueryTraderSpotOrdersToCancelUpToAmountRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.market_id_.ClearToEmpty();
  _impl_.subaccount_id_.ClearToEmpty();
  _impl_.base_amount_.ClearToEmpty();
  _impl_.quote_amount_.ClearToEmpty();
  _impl_.reference_price_.ClearToEmpty();
  _impl_.strategy_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryTraderSpotOrdersToCancelUpToAmountRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string market_id = 1 [json_name = "marketId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_market_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.QueryTraderSpotOrdersToCancelUpToAmountRequest.market_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string subaccount_id = 2 [json_name = "subaccountId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_subaccount_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.QueryTraderSpotOrdersToCancelUpToAmountRequest.subaccount_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string base_amount = 3 [json_name = "baseAmount", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_base_amount();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.QueryTraderSpotOrdersToCancelUpToAmountRequest.base_amount"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string quote_amount = 4 [json_name = "quoteAmount", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_quote_amount();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.QueryTraderSpotOrdersToCancelUpToAmountRequest.quote_amount"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .injective.exchange.v1beta1.CancellationStrategy strategy = 5 [json_name = "strategy"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_strategy(static_cast<::injective::exchange::v1beta1::CancellationStrategy>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // string reference_price = 6 [json_name = "referencePrice", (.gogoproto.nullable) = true, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_reference_price();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.QueryTraderSpotOrdersToCancelUpToAmountRequest.reference_price"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryTraderSpotOrdersToCancelUpToAmountRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.QueryTraderSpotOrdersToCancelUpToAmountRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string market_id = 1 [json_name = "marketId"];
  if (!this->_internal_market_id().empty()) {
    const std::string& _s = this->_internal_market_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.QueryTraderSpotOrdersToCancelUpToAmountRequest.market_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string subaccount_id = 2 [json_name = "subaccountId"];
  if (!this->_internal_subaccount_id().empty()) {
    const std::string& _s = this->_internal_subaccount_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.QueryTraderSpotOrdersToCancelUpToAmountRequest.subaccount_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string base_amount = 3 [json_name = "baseAmount", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_base_amount().empty()) {
    const std::string& _s = this->_internal_base_amount();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.QueryTraderSpotOrdersToCancelUpToAmountRequest.base_amount");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string quote_amount = 4 [json_name = "quoteAmount", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_quote_amount().empty()) {
    const std::string& _s = this->_internal_quote_amount();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.QueryTraderSpotOrdersToCancelUpToAmountRequest.quote_amount");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // .injective.exchange.v1beta1.CancellationStrategy strategy = 5 [json_name = "strategy"];
  if (this->_internal_strategy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        5, this->_internal_strategy(), target);
  }

  // string reference_price = 6 [json_name = "referencePrice", (.gogoproto.nullable) = true, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_reference_price().empty()) {
    const std::string& _s = this->_internal_reference_price();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.QueryTraderSpotOrdersToCancelUpToAmountRequest.reference_price");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.QueryTraderSpotOrdersToCancelUpToAmountRequest)
  return target;
}

::size_t QueryTraderSpotOrdersToCancelUpToAmountRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.QueryTraderSpotOrdersToCancelUpToAmountRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string market_id = 1 [json_name = "marketId"];
  if (!this->_internal_market_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_market_id());
  }

  // string subaccount_id = 2 [json_name = "subaccountId"];
  if (!this->_internal_subaccount_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_subaccount_id());
  }

  // string base_amount = 3 [json_name = "baseAmount", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_base_amount().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_base_amount());
  }

  // string quote_amount = 4 [json_name = "quoteAmount", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_quote_amount().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_quote_amount());
  }

  // string reference_price = 6 [json_name = "referencePrice", (.gogoproto.nullable) = true, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_reference_price().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_reference_price());
  }

  // .injective.exchange.v1beta1.CancellationStrategy strategy = 5 [json_name = "strategy"];
  if (this->_internal_strategy() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_strategy());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryTraderSpotOrdersToCancelUpToAmountRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryTraderSpotOrdersToCancelUpToAmountRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryTraderSpotOrdersToCancelUpToAmountRequest::GetClassData() const { return &_class_data_; }


void QueryTraderSpotOrdersToCancelUpToAmountRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryTraderSpotOrdersToCancelUpToAmountRequest*>(&to_msg);
  auto& from = static_cast<const QueryTraderSpotOrdersToCancelUpToAmountRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.QueryTraderSpotOrdersToCancelUpToAmountRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_market_id().empty()) {
    _this->_internal_set_market_id(from._internal_market_id());
  }
  if (!from._internal_subaccount_id().empty()) {
    _this->_internal_set_subaccount_id(from._internal_subaccount_id());
  }
  if (!from._internal_base_amount().empty()) {
    _this->_internal_set_base_amount(from._internal_base_amount());
  }
  if (!from._internal_quote_amount().empty()) {
    _this->_internal_set_quote_amount(from._internal_quote_amount());
  }
  if (!from._internal_reference_price().empty()) {
    _this->_internal_set_reference_price(from._internal_reference_price());
  }
  if (from._internal_strategy() != 0) {
    _this->_internal_set_strategy(from._internal_strategy());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryTraderSpotOrdersToCancelUpToAmountRequest::CopyFrom(const QueryTraderSpotOrdersToCancelUpToAmountRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.QueryTraderSpotOrdersToCancelUpToAmountRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryTraderSpotOrdersToCancelUpToAmountRequest::IsInitialized() const {
  return true;
}

void QueryTraderSpotOrdersToCancelUpToAmountRequest::InternalSwap(QueryTraderSpotOrdersToCancelUpToAmountRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.market_id_, lhs_arena,
                                       &other->_impl_.market_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.subaccount_id_, lhs_arena,
                                       &other->_impl_.subaccount_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.base_amount_, lhs_arena,
                                       &other->_impl_.base_amount_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.quote_amount_, lhs_arena,
                                       &other->_impl_.quote_amount_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.reference_price_, lhs_arena,
                                       &other->_impl_.reference_price_, rhs_arena);
  swap(_impl_.strategy_, other->_impl_.strategy_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryTraderSpotOrdersToCancelUpToAmountRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2fquery_2eproto[49]);
}
// ===================================================================

class QueryTraderDerivativeOrdersToCancelUpToAmountRequest::_Internal {
 public:
};

QueryTraderDerivativeOrdersToCancelUpToAmountRequest::QueryTraderDerivativeOrdersToCancelUpToAmountRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.QueryTraderDerivativeOrdersToCancelUpToAmountRequest)
}
QueryTraderDerivativeOrdersToCancelUpToAmountRequest::QueryTraderDerivativeOrdersToCancelUpToAmountRequest(const QueryTraderDerivativeOrdersToCancelUpToAmountRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryTraderDerivativeOrdersToCancelUpToAmountRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.market_id_) {}

    , decltype(_impl_.subaccount_id_) {}

    , decltype(_impl_.quote_amount_) {}

    , decltype(_impl_.reference_price_) {}

    , decltype(_impl_.strategy_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_market_id().empty()) {
    _this->_impl_.market_id_.Set(from._internal_market_id(), _this->GetArenaForAllocation());
  }
  _impl_.subaccount_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.subaccount_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_subaccount_id().empty()) {
    _this->_impl_.subaccount_id_.Set(from._internal_subaccount_id(), _this->GetArenaForAllocation());
  }
  _impl_.quote_amount_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.quote_amount_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_quote_amount().empty()) {
    _this->_impl_.quote_amount_.Set(from._internal_quote_amount(), _this->GetArenaForAllocation());
  }
  _impl_.reference_price_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.reference_price_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_reference_price().empty()) {
    _this->_impl_.reference_price_.Set(from._internal_reference_price(), _this->GetArenaForAllocation());
  }
  _this->_impl_.strategy_ = from._impl_.strategy_;
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.QueryTraderDerivativeOrdersToCancelUpToAmountRequest)
}

inline void QueryTraderDerivativeOrdersToCancelUpToAmountRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.market_id_) {}

    , decltype(_impl_.subaccount_id_) {}

    , decltype(_impl_.quote_amount_) {}

    , decltype(_impl_.reference_price_) {}

    , decltype(_impl_.strategy_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.subaccount_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.subaccount_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.quote_amount_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.quote_amount_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.reference_price_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.reference_price_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

QueryTraderDerivativeOrdersToCancelUpToAmountRequest::~QueryTraderDerivativeOrdersToCancelUpToAmountRequest() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.QueryTraderDerivativeOrdersToCancelUpToAmountRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryTraderDerivativeOrdersToCancelUpToAmountRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.market_id_.Destroy();
  _impl_.subaccount_id_.Destroy();
  _impl_.quote_amount_.Destroy();
  _impl_.reference_price_.Destroy();
}

void QueryTraderDerivativeOrdersToCancelUpToAmountRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryTraderDerivativeOrdersToCancelUpToAmountRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.QueryTraderDerivativeOrdersToCancelUpToAmountRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.market_id_.ClearToEmpty();
  _impl_.subaccount_id_.ClearToEmpty();
  _impl_.quote_amount_.ClearToEmpty();
  _impl_.reference_price_.ClearToEmpty();
  _impl_.strategy_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryTraderDerivativeOrdersToCancelUpToAmountRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string market_id = 1 [json_name = "marketId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_market_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.QueryTraderDerivativeOrdersToCancelUpToAmountRequest.market_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string subaccount_id = 2 [json_name = "subaccountId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_subaccount_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.QueryTraderDerivativeOrdersToCancelUpToAmountRequest.subaccount_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string quote_amount = 3 [json_name = "quoteAmount", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_quote_amount();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.QueryTraderDerivativeOrdersToCancelUpToAmountRequest.quote_amount"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .injective.exchange.v1beta1.CancellationStrategy strategy = 4 [json_name = "strategy"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_strategy(static_cast<::injective::exchange::v1beta1::CancellationStrategy>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // string reference_price = 5 [json_name = "referencePrice", (.gogoproto.nullable) = true, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_reference_price();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.QueryTraderDerivativeOrdersToCancelUpToAmountRequest.reference_price"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryTraderDerivativeOrdersToCancelUpToAmountRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.QueryTraderDerivativeOrdersToCancelUpToAmountRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string market_id = 1 [json_name = "marketId"];
  if (!this->_internal_market_id().empty()) {
    const std::string& _s = this->_internal_market_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.QueryTraderDerivativeOrdersToCancelUpToAmountRequest.market_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string subaccount_id = 2 [json_name = "subaccountId"];
  if (!this->_internal_subaccount_id().empty()) {
    const std::string& _s = this->_internal_subaccount_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.QueryTraderDerivativeOrdersToCancelUpToAmountRequest.subaccount_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string quote_amount = 3 [json_name = "quoteAmount", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_quote_amount().empty()) {
    const std::string& _s = this->_internal_quote_amount();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.QueryTraderDerivativeOrdersToCancelUpToAmountRequest.quote_amount");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // .injective.exchange.v1beta1.CancellationStrategy strategy = 4 [json_name = "strategy"];
  if (this->_internal_strategy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        4, this->_internal_strategy(), target);
  }

  // string reference_price = 5 [json_name = "referencePrice", (.gogoproto.nullable) = true, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_reference_price().empty()) {
    const std::string& _s = this->_internal_reference_price();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.QueryTraderDerivativeOrdersToCancelUpToAmountRequest.reference_price");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.QueryTraderDerivativeOrdersToCancelUpToAmountRequest)
  return target;
}

::size_t QueryTraderDerivativeOrdersToCancelUpToAmountRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.QueryTraderDerivativeOrdersToCancelUpToAmountRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string market_id = 1 [json_name = "marketId"];
  if (!this->_internal_market_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_market_id());
  }

  // string subaccount_id = 2 [json_name = "subaccountId"];
  if (!this->_internal_subaccount_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_subaccount_id());
  }

  // string quote_amount = 3 [json_name = "quoteAmount", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_quote_amount().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_quote_amount());
  }

  // string reference_price = 5 [json_name = "referencePrice", (.gogoproto.nullable) = true, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_reference_price().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_reference_price());
  }

  // .injective.exchange.v1beta1.CancellationStrategy strategy = 4 [json_name = "strategy"];
  if (this->_internal_strategy() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_strategy());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryTraderDerivativeOrdersToCancelUpToAmountRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryTraderDerivativeOrdersToCancelUpToAmountRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryTraderDerivativeOrdersToCancelUpToAmountRequest::GetClassData() const { return &_class_data_; }


void QueryTraderDerivativeOrdersToCancelUpToAmountRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryTraderDerivativeOrdersToCancelUpToAmountRequest*>(&to_msg);
  auto& from = static_cast<const QueryTraderDerivativeOrdersToCancelUpToAmountRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.QueryTraderDerivativeOrdersToCancelUpToAmountRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_market_id().empty()) {
    _this->_internal_set_market_id(from._internal_market_id());
  }
  if (!from._internal_subaccount_id().empty()) {
    _this->_internal_set_subaccount_id(from._internal_subaccount_id());
  }
  if (!from._internal_quote_amount().empty()) {
    _this->_internal_set_quote_amount(from._internal_quote_amount());
  }
  if (!from._internal_reference_price().empty()) {
    _this->_internal_set_reference_price(from._internal_reference_price());
  }
  if (from._internal_strategy() != 0) {
    _this->_internal_set_strategy(from._internal_strategy());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryTraderDerivativeOrdersToCancelUpToAmountRequest::CopyFrom(const QueryTraderDerivativeOrdersToCancelUpToAmountRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.QueryTraderDerivativeOrdersToCancelUpToAmountRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryTraderDerivativeOrdersToCancelUpToAmountRequest::IsInitialized() const {
  return true;
}

void QueryTraderDerivativeOrdersToCancelUpToAmountRequest::InternalSwap(QueryTraderDerivativeOrdersToCancelUpToAmountRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.market_id_, lhs_arena,
                                       &other->_impl_.market_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.subaccount_id_, lhs_arena,
                                       &other->_impl_.subaccount_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.quote_amount_, lhs_arena,
                                       &other->_impl_.quote_amount_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.reference_price_, lhs_arena,
                                       &other->_impl_.reference_price_, rhs_arena);
  swap(_impl_.strategy_, other->_impl_.strategy_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryTraderDerivativeOrdersToCancelUpToAmountRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2fquery_2eproto[50]);
}
// ===================================================================

class QueryTraderDerivativeOrdersRequest::_Internal {
 public:
};

QueryTraderDerivativeOrdersRequest::QueryTraderDerivativeOrdersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.QueryTraderDerivativeOrdersRequest)
}
QueryTraderDerivativeOrdersRequest::QueryTraderDerivativeOrdersRequest(const QueryTraderDerivativeOrdersRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryTraderDerivativeOrdersRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.market_id_) {}

    , decltype(_impl_.subaccount_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_market_id().empty()) {
    _this->_impl_.market_id_.Set(from._internal_market_id(), _this->GetArenaForAllocation());
  }
  _impl_.subaccount_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.subaccount_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_subaccount_id().empty()) {
    _this->_impl_.subaccount_id_.Set(from._internal_subaccount_id(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.QueryTraderDerivativeOrdersRequest)
}

inline void QueryTraderDerivativeOrdersRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.market_id_) {}

    , decltype(_impl_.subaccount_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.subaccount_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.subaccount_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

QueryTraderDerivativeOrdersRequest::~QueryTraderDerivativeOrdersRequest() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.QueryTraderDerivativeOrdersRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryTraderDerivativeOrdersRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.market_id_.Destroy();
  _impl_.subaccount_id_.Destroy();
}

void QueryTraderDerivativeOrdersRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryTraderDerivativeOrdersRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.QueryTraderDerivativeOrdersRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.market_id_.ClearToEmpty();
  _impl_.subaccount_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryTraderDerivativeOrdersRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string market_id = 1 [json_name = "marketId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_market_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.QueryTraderDerivativeOrdersRequest.market_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string subaccount_id = 2 [json_name = "subaccountId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_subaccount_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.QueryTraderDerivativeOrdersRequest.subaccount_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryTraderDerivativeOrdersRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.QueryTraderDerivativeOrdersRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string market_id = 1 [json_name = "marketId"];
  if (!this->_internal_market_id().empty()) {
    const std::string& _s = this->_internal_market_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.QueryTraderDerivativeOrdersRequest.market_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string subaccount_id = 2 [json_name = "subaccountId"];
  if (!this->_internal_subaccount_id().empty()) {
    const std::string& _s = this->_internal_subaccount_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.QueryTraderDerivativeOrdersRequest.subaccount_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.QueryTraderDerivativeOrdersRequest)
  return target;
}

::size_t QueryTraderDerivativeOrdersRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.QueryTraderDerivativeOrdersRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string market_id = 1 [json_name = "marketId"];
  if (!this->_internal_market_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_market_id());
  }

  // string subaccount_id = 2 [json_name = "subaccountId"];
  if (!this->_internal_subaccount_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_subaccount_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryTraderDerivativeOrdersRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryTraderDerivativeOrdersRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryTraderDerivativeOrdersRequest::GetClassData() const { return &_class_data_; }


void QueryTraderDerivativeOrdersRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryTraderDerivativeOrdersRequest*>(&to_msg);
  auto& from = static_cast<const QueryTraderDerivativeOrdersRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.QueryTraderDerivativeOrdersRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_market_id().empty()) {
    _this->_internal_set_market_id(from._internal_market_id());
  }
  if (!from._internal_subaccount_id().empty()) {
    _this->_internal_set_subaccount_id(from._internal_subaccount_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryTraderDerivativeOrdersRequest::CopyFrom(const QueryTraderDerivativeOrdersRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.QueryTraderDerivativeOrdersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryTraderDerivativeOrdersRequest::IsInitialized() const {
  return true;
}

void QueryTraderDerivativeOrdersRequest::InternalSwap(QueryTraderDerivativeOrdersRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.market_id_, lhs_arena,
                                       &other->_impl_.market_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.subaccount_id_, lhs_arena,
                                       &other->_impl_.subaccount_id_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryTraderDerivativeOrdersRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2fquery_2eproto[51]);
}
// ===================================================================

class QueryAccountAddressDerivativeOrdersRequest::_Internal {
 public:
};

QueryAccountAddressDerivativeOrdersRequest::QueryAccountAddressDerivativeOrdersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.QueryAccountAddressDerivativeOrdersRequest)
}
QueryAccountAddressDerivativeOrdersRequest::QueryAccountAddressDerivativeOrdersRequest(const QueryAccountAddressDerivativeOrdersRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryAccountAddressDerivativeOrdersRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.market_id_) {}

    , decltype(_impl_.account_address_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_market_id().empty()) {
    _this->_impl_.market_id_.Set(from._internal_market_id(), _this->GetArenaForAllocation());
  }
  _impl_.account_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.account_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_account_address().empty()) {
    _this->_impl_.account_address_.Set(from._internal_account_address(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.QueryAccountAddressDerivativeOrdersRequest)
}

inline void QueryAccountAddressDerivativeOrdersRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.market_id_) {}

    , decltype(_impl_.account_address_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.account_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.account_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

QueryAccountAddressDerivativeOrdersRequest::~QueryAccountAddressDerivativeOrdersRequest() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.QueryAccountAddressDerivativeOrdersRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryAccountAddressDerivativeOrdersRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.market_id_.Destroy();
  _impl_.account_address_.Destroy();
}

void QueryAccountAddressDerivativeOrdersRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryAccountAddressDerivativeOrdersRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.QueryAccountAddressDerivativeOrdersRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.market_id_.ClearToEmpty();
  _impl_.account_address_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryAccountAddressDerivativeOrdersRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string market_id = 1 [json_name = "marketId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_market_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.QueryAccountAddressDerivativeOrdersRequest.market_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string account_address = 2 [json_name = "accountAddress"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_account_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.QueryAccountAddressDerivativeOrdersRequest.account_address"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryAccountAddressDerivativeOrdersRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.QueryAccountAddressDerivativeOrdersRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string market_id = 1 [json_name = "marketId"];
  if (!this->_internal_market_id().empty()) {
    const std::string& _s = this->_internal_market_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.QueryAccountAddressDerivativeOrdersRequest.market_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string account_address = 2 [json_name = "accountAddress"];
  if (!this->_internal_account_address().empty()) {
    const std::string& _s = this->_internal_account_address();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.QueryAccountAddressDerivativeOrdersRequest.account_address");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.QueryAccountAddressDerivativeOrdersRequest)
  return target;
}

::size_t QueryAccountAddressDerivativeOrdersRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.QueryAccountAddressDerivativeOrdersRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string market_id = 1 [json_name = "marketId"];
  if (!this->_internal_market_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_market_id());
  }

  // string account_address = 2 [json_name = "accountAddress"];
  if (!this->_internal_account_address().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_account_address());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryAccountAddressDerivativeOrdersRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryAccountAddressDerivativeOrdersRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryAccountAddressDerivativeOrdersRequest::GetClassData() const { return &_class_data_; }


void QueryAccountAddressDerivativeOrdersRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryAccountAddressDerivativeOrdersRequest*>(&to_msg);
  auto& from = static_cast<const QueryAccountAddressDerivativeOrdersRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.QueryAccountAddressDerivativeOrdersRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_market_id().empty()) {
    _this->_internal_set_market_id(from._internal_market_id());
  }
  if (!from._internal_account_address().empty()) {
    _this->_internal_set_account_address(from._internal_account_address());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryAccountAddressDerivativeOrdersRequest::CopyFrom(const QueryAccountAddressDerivativeOrdersRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.QueryAccountAddressDerivativeOrdersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryAccountAddressDerivativeOrdersRequest::IsInitialized() const {
  return true;
}

void QueryAccountAddressDerivativeOrdersRequest::InternalSwap(QueryAccountAddressDerivativeOrdersRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.market_id_, lhs_arena,
                                       &other->_impl_.market_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.account_address_, lhs_arena,
                                       &other->_impl_.account_address_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryAccountAddressDerivativeOrdersRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2fquery_2eproto[52]);
}
// ===================================================================

class TrimmedDerivativeLimitOrder::_Internal {
 public:
};

TrimmedDerivativeLimitOrder::TrimmedDerivativeLimitOrder(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.TrimmedDerivativeLimitOrder)
}
TrimmedDerivativeLimitOrder::TrimmedDerivativeLimitOrder(const TrimmedDerivativeLimitOrder& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TrimmedDerivativeLimitOrder* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.price_) {}

    , decltype(_impl_.quantity_) {}

    , decltype(_impl_.margin_) {}

    , decltype(_impl_.fillable_) {}

    , decltype(_impl_.order_hash_) {}

    , decltype(_impl_.isbuy_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.price_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.price_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_price().empty()) {
    _this->_impl_.price_.Set(from._internal_price(), _this->GetArenaForAllocation());
  }
  _impl_.quantity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.quantity_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_quantity().empty()) {
    _this->_impl_.quantity_.Set(from._internal_quantity(), _this->GetArenaForAllocation());
  }
  _impl_.margin_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.margin_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_margin().empty()) {
    _this->_impl_.margin_.Set(from._internal_margin(), _this->GetArenaForAllocation());
  }
  _impl_.fillable_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.fillable_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_fillable().empty()) {
    _this->_impl_.fillable_.Set(from._internal_fillable(), _this->GetArenaForAllocation());
  }
  _impl_.order_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.order_hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_order_hash().empty()) {
    _this->_impl_.order_hash_.Set(from._internal_order_hash(), _this->GetArenaForAllocation());
  }
  _this->_impl_.isbuy_ = from._impl_.isbuy_;
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.TrimmedDerivativeLimitOrder)
}

inline void TrimmedDerivativeLimitOrder::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.price_) {}

    , decltype(_impl_.quantity_) {}

    , decltype(_impl_.margin_) {}

    , decltype(_impl_.fillable_) {}

    , decltype(_impl_.order_hash_) {}

    , decltype(_impl_.isbuy_) { false }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.price_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.price_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.quantity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.quantity_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.margin_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.margin_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.fillable_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.fillable_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.order_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.order_hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TrimmedDerivativeLimitOrder::~TrimmedDerivativeLimitOrder() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.TrimmedDerivativeLimitOrder)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TrimmedDerivativeLimitOrder::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.price_.Destroy();
  _impl_.quantity_.Destroy();
  _impl_.margin_.Destroy();
  _impl_.fillable_.Destroy();
  _impl_.order_hash_.Destroy();
}

void TrimmedDerivativeLimitOrder::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TrimmedDerivativeLimitOrder::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.TrimmedDerivativeLimitOrder)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.price_.ClearToEmpty();
  _impl_.quantity_.ClearToEmpty();
  _impl_.margin_.ClearToEmpty();
  _impl_.fillable_.ClearToEmpty();
  _impl_.order_hash_.ClearToEmpty();
  _impl_.isbuy_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrimmedDerivativeLimitOrder::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string price = 1 [json_name = "price", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_price();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.TrimmedDerivativeLimitOrder.price"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string quantity = 2 [json_name = "quantity", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_quantity();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.TrimmedDerivativeLimitOrder.quantity"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string margin = 3 [json_name = "margin", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_margin();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.TrimmedDerivativeLimitOrder.margin"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string fillable = 4 [json_name = "fillable", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_fillable();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.TrimmedDerivativeLimitOrder.fillable"));
        } else {
          goto handle_unusual;
        }
        continue;
      // bool isBuy = 5 [json_name = "isBuy", (.gogoproto.jsontag) = "isBuy"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _impl_.isbuy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string order_hash = 6 [json_name = "orderHash"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_order_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.TrimmedDerivativeLimitOrder.order_hash"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* TrimmedDerivativeLimitOrder::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.TrimmedDerivativeLimitOrder)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string price = 1 [json_name = "price", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_price().empty()) {
    const std::string& _s = this->_internal_price();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.TrimmedDerivativeLimitOrder.price");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string quantity = 2 [json_name = "quantity", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_quantity().empty()) {
    const std::string& _s = this->_internal_quantity();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.TrimmedDerivativeLimitOrder.quantity");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string margin = 3 [json_name = "margin", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_margin().empty()) {
    const std::string& _s = this->_internal_margin();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.TrimmedDerivativeLimitOrder.margin");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string fillable = 4 [json_name = "fillable", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_fillable().empty()) {
    const std::string& _s = this->_internal_fillable();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.TrimmedDerivativeLimitOrder.fillable");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // bool isBuy = 5 [json_name = "isBuy", (.gogoproto.jsontag) = "isBuy"];
  if (this->_internal_isbuy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        5, this->_internal_isbuy(), target);
  }

  // string order_hash = 6 [json_name = "orderHash"];
  if (!this->_internal_order_hash().empty()) {
    const std::string& _s = this->_internal_order_hash();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.TrimmedDerivativeLimitOrder.order_hash");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.TrimmedDerivativeLimitOrder)
  return target;
}

::size_t TrimmedDerivativeLimitOrder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.TrimmedDerivativeLimitOrder)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string price = 1 [json_name = "price", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_price().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_price());
  }

  // string quantity = 2 [json_name = "quantity", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_quantity().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_quantity());
  }

  // string margin = 3 [json_name = "margin", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_margin().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_margin());
  }

  // string fillable = 4 [json_name = "fillable", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_fillable().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_fillable());
  }

  // string order_hash = 6 [json_name = "orderHash"];
  if (!this->_internal_order_hash().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_order_hash());
  }

  // bool isBuy = 5 [json_name = "isBuy", (.gogoproto.jsontag) = "isBuy"];
  if (this->_internal_isbuy() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrimmedDerivativeLimitOrder::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TrimmedDerivativeLimitOrder::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrimmedDerivativeLimitOrder::GetClassData() const { return &_class_data_; }


void TrimmedDerivativeLimitOrder::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TrimmedDerivativeLimitOrder*>(&to_msg);
  auto& from = static_cast<const TrimmedDerivativeLimitOrder&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.TrimmedDerivativeLimitOrder)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_price().empty()) {
    _this->_internal_set_price(from._internal_price());
  }
  if (!from._internal_quantity().empty()) {
    _this->_internal_set_quantity(from._internal_quantity());
  }
  if (!from._internal_margin().empty()) {
    _this->_internal_set_margin(from._internal_margin());
  }
  if (!from._internal_fillable().empty()) {
    _this->_internal_set_fillable(from._internal_fillable());
  }
  if (!from._internal_order_hash().empty()) {
    _this->_internal_set_order_hash(from._internal_order_hash());
  }
  if (from._internal_isbuy() != 0) {
    _this->_internal_set_isbuy(from._internal_isbuy());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrimmedDerivativeLimitOrder::CopyFrom(const TrimmedDerivativeLimitOrder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.TrimmedDerivativeLimitOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrimmedDerivativeLimitOrder::IsInitialized() const {
  return true;
}

void TrimmedDerivativeLimitOrder::InternalSwap(TrimmedDerivativeLimitOrder* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.price_, lhs_arena,
                                       &other->_impl_.price_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.quantity_, lhs_arena,
                                       &other->_impl_.quantity_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.margin_, lhs_arena,
                                       &other->_impl_.margin_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.fillable_, lhs_arena,
                                       &other->_impl_.fillable_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.order_hash_, lhs_arena,
                                       &other->_impl_.order_hash_, rhs_arena);

  swap(_impl_.isbuy_, other->_impl_.isbuy_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrimmedDerivativeLimitOrder::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2fquery_2eproto[53]);
}
// ===================================================================

class QueryTraderDerivativeOrdersResponse::_Internal {
 public:
};

QueryTraderDerivativeOrdersResponse::QueryTraderDerivativeOrdersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.QueryTraderDerivativeOrdersResponse)
}
QueryTraderDerivativeOrdersResponse::QueryTraderDerivativeOrdersResponse(const QueryTraderDerivativeOrdersResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryTraderDerivativeOrdersResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.orders_){from._impl_.orders_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.QueryTraderDerivativeOrdersResponse)
}

inline void QueryTraderDerivativeOrdersResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.orders_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

QueryTraderDerivativeOrdersResponse::~QueryTraderDerivativeOrdersResponse() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.QueryTraderDerivativeOrdersResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryTraderDerivativeOrdersResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_orders()->~RepeatedPtrField();
}

void QueryTraderDerivativeOrdersResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryTraderDerivativeOrdersResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.QueryTraderDerivativeOrdersResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_orders()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryTraderDerivativeOrdersResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .injective.exchange.v1beta1.TrimmedDerivativeLimitOrder orders = 1 [json_name = "orders"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_orders(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryTraderDerivativeOrdersResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.QueryTraderDerivativeOrdersResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .injective.exchange.v1beta1.TrimmedDerivativeLimitOrder orders = 1 [json_name = "orders"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_orders_size()); i < n; i++) {
    const auto& repfield = this->_internal_orders(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.QueryTraderDerivativeOrdersResponse)
  return target;
}

::size_t QueryTraderDerivativeOrdersResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.QueryTraderDerivativeOrdersResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .injective.exchange.v1beta1.TrimmedDerivativeLimitOrder orders = 1 [json_name = "orders"];
  total_size += 1UL * this->_internal_orders_size();
  for (const auto& msg : this->_internal_orders()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryTraderDerivativeOrdersResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryTraderDerivativeOrdersResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryTraderDerivativeOrdersResponse::GetClassData() const { return &_class_data_; }


void QueryTraderDerivativeOrdersResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryTraderDerivativeOrdersResponse*>(&to_msg);
  auto& from = static_cast<const QueryTraderDerivativeOrdersResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.QueryTraderDerivativeOrdersResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_orders()->MergeFrom(from._internal_orders());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryTraderDerivativeOrdersResponse::CopyFrom(const QueryTraderDerivativeOrdersResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.QueryTraderDerivativeOrdersResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryTraderDerivativeOrdersResponse::IsInitialized() const {
  return true;
}

void QueryTraderDerivativeOrdersResponse::InternalSwap(QueryTraderDerivativeOrdersResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_orders()->InternalSwap(other->_internal_mutable_orders());
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryTraderDerivativeOrdersResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2fquery_2eproto[54]);
}
// ===================================================================

class QueryAccountAddressDerivativeOrdersResponse::_Internal {
 public:
};

QueryAccountAddressDerivativeOrdersResponse::QueryAccountAddressDerivativeOrdersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.QueryAccountAddressDerivativeOrdersResponse)
}
QueryAccountAddressDerivativeOrdersResponse::QueryAccountAddressDerivativeOrdersResponse(const QueryAccountAddressDerivativeOrdersResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryAccountAddressDerivativeOrdersResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.orders_){from._impl_.orders_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.QueryAccountAddressDerivativeOrdersResponse)
}

inline void QueryAccountAddressDerivativeOrdersResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.orders_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

QueryAccountAddressDerivativeOrdersResponse::~QueryAccountAddressDerivativeOrdersResponse() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.QueryAccountAddressDerivativeOrdersResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryAccountAddressDerivativeOrdersResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_orders()->~RepeatedPtrField();
}

void QueryAccountAddressDerivativeOrdersResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryAccountAddressDerivativeOrdersResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.QueryAccountAddressDerivativeOrdersResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_orders()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryAccountAddressDerivativeOrdersResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .injective.exchange.v1beta1.TrimmedDerivativeLimitOrder orders = 1 [json_name = "orders"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_orders(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryAccountAddressDerivativeOrdersResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.QueryAccountAddressDerivativeOrdersResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .injective.exchange.v1beta1.TrimmedDerivativeLimitOrder orders = 1 [json_name = "orders"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_orders_size()); i < n; i++) {
    const auto& repfield = this->_internal_orders(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.QueryAccountAddressDerivativeOrdersResponse)
  return target;
}

::size_t QueryAccountAddressDerivativeOrdersResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.QueryAccountAddressDerivativeOrdersResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .injective.exchange.v1beta1.TrimmedDerivativeLimitOrder orders = 1 [json_name = "orders"];
  total_size += 1UL * this->_internal_orders_size();
  for (const auto& msg : this->_internal_orders()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryAccountAddressDerivativeOrdersResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryAccountAddressDerivativeOrdersResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryAccountAddressDerivativeOrdersResponse::GetClassData() const { return &_class_data_; }


void QueryAccountAddressDerivativeOrdersResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryAccountAddressDerivativeOrdersResponse*>(&to_msg);
  auto& from = static_cast<const QueryAccountAddressDerivativeOrdersResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.QueryAccountAddressDerivativeOrdersResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_orders()->MergeFrom(from._internal_orders());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryAccountAddressDerivativeOrdersResponse::CopyFrom(const QueryAccountAddressDerivativeOrdersResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.QueryAccountAddressDerivativeOrdersResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryAccountAddressDerivativeOrdersResponse::IsInitialized() const {
  return true;
}

void QueryAccountAddressDerivativeOrdersResponse::InternalSwap(QueryAccountAddressDerivativeOrdersResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_orders()->InternalSwap(other->_internal_mutable_orders());
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryAccountAddressDerivativeOrdersResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2fquery_2eproto[55]);
}
// ===================================================================

class QueryDerivativeOrdersByHashesRequest::_Internal {
 public:
};

QueryDerivativeOrdersByHashesRequest::QueryDerivativeOrdersByHashesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.QueryDerivativeOrdersByHashesRequest)
}
QueryDerivativeOrdersByHashesRequest::QueryDerivativeOrdersByHashesRequest(const QueryDerivativeOrdersByHashesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryDerivativeOrdersByHashesRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.order_hashes_){from._impl_.order_hashes_}
    , decltype(_impl_.market_id_) {}

    , decltype(_impl_.subaccount_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_market_id().empty()) {
    _this->_impl_.market_id_.Set(from._internal_market_id(), _this->GetArenaForAllocation());
  }
  _impl_.subaccount_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.subaccount_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_subaccount_id().empty()) {
    _this->_impl_.subaccount_id_.Set(from._internal_subaccount_id(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.QueryDerivativeOrdersByHashesRequest)
}

inline void QueryDerivativeOrdersByHashesRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.order_hashes_){arena}
    , decltype(_impl_.market_id_) {}

    , decltype(_impl_.subaccount_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.subaccount_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.subaccount_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

QueryDerivativeOrdersByHashesRequest::~QueryDerivativeOrdersByHashesRequest() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.QueryDerivativeOrdersByHashesRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryDerivativeOrdersByHashesRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_order_hashes()->~RepeatedPtrField();
  _impl_.market_id_.Destroy();
  _impl_.subaccount_id_.Destroy();
}

void QueryDerivativeOrdersByHashesRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryDerivativeOrdersByHashesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.QueryDerivativeOrdersByHashesRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_order_hashes()->Clear();
  _impl_.market_id_.ClearToEmpty();
  _impl_.subaccount_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryDerivativeOrdersByHashesRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string market_id = 1 [json_name = "marketId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_market_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.QueryDerivativeOrdersByHashesRequest.market_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string subaccount_id = 2 [json_name = "subaccountId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_subaccount_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.QueryDerivativeOrdersByHashesRequest.subaccount_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string order_hashes = 3 [json_name = "orderHashes"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_order_hashes();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.QueryDerivativeOrdersByHashesRequest.order_hashes"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryDerivativeOrdersByHashesRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.QueryDerivativeOrdersByHashesRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string market_id = 1 [json_name = "marketId"];
  if (!this->_internal_market_id().empty()) {
    const std::string& _s = this->_internal_market_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.QueryDerivativeOrdersByHashesRequest.market_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string subaccount_id = 2 [json_name = "subaccountId"];
  if (!this->_internal_subaccount_id().empty()) {
    const std::string& _s = this->_internal_subaccount_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.QueryDerivativeOrdersByHashesRequest.subaccount_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // repeated string order_hashes = 3 [json_name = "orderHashes"];
  for (int i = 0, n = this->_internal_order_hashes_size(); i < n; ++i) {
    const auto& s = this->_internal_order_hashes(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.QueryDerivativeOrdersByHashesRequest.order_hashes");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.QueryDerivativeOrdersByHashesRequest)
  return target;
}

::size_t QueryDerivativeOrdersByHashesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.QueryDerivativeOrdersByHashesRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string order_hashes = 3 [json_name = "orderHashes"];
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_order_hashes().size());
  for (int i = 0, n = _internal_order_hashes().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_order_hashes().Get(i));
  }

  // string market_id = 1 [json_name = "marketId"];
  if (!this->_internal_market_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_market_id());
  }

  // string subaccount_id = 2 [json_name = "subaccountId"];
  if (!this->_internal_subaccount_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_subaccount_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryDerivativeOrdersByHashesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryDerivativeOrdersByHashesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryDerivativeOrdersByHashesRequest::GetClassData() const { return &_class_data_; }


void QueryDerivativeOrdersByHashesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryDerivativeOrdersByHashesRequest*>(&to_msg);
  auto& from = static_cast<const QueryDerivativeOrdersByHashesRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.QueryDerivativeOrdersByHashesRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_order_hashes()->MergeFrom(from._internal_order_hashes());
  if (!from._internal_market_id().empty()) {
    _this->_internal_set_market_id(from._internal_market_id());
  }
  if (!from._internal_subaccount_id().empty()) {
    _this->_internal_set_subaccount_id(from._internal_subaccount_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryDerivativeOrdersByHashesRequest::CopyFrom(const QueryDerivativeOrdersByHashesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.QueryDerivativeOrdersByHashesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryDerivativeOrdersByHashesRequest::IsInitialized() const {
  return true;
}

void QueryDerivativeOrdersByHashesRequest::InternalSwap(QueryDerivativeOrdersByHashesRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_order_hashes()->InternalSwap(
      other->_internal_mutable_order_hashes());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.market_id_, lhs_arena,
                                       &other->_impl_.market_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.subaccount_id_, lhs_arena,
                                       &other->_impl_.subaccount_id_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryDerivativeOrdersByHashesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2fquery_2eproto[56]);
}
// ===================================================================

class QueryDerivativeOrdersByHashesResponse::_Internal {
 public:
};

QueryDerivativeOrdersByHashesResponse::QueryDerivativeOrdersByHashesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.QueryDerivativeOrdersByHashesResponse)
}
QueryDerivativeOrdersByHashesResponse::QueryDerivativeOrdersByHashesResponse(const QueryDerivativeOrdersByHashesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryDerivativeOrdersByHashesResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.orders_){from._impl_.orders_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.QueryDerivativeOrdersByHashesResponse)
}

inline void QueryDerivativeOrdersByHashesResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.orders_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

QueryDerivativeOrdersByHashesResponse::~QueryDerivativeOrdersByHashesResponse() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.QueryDerivativeOrdersByHashesResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryDerivativeOrdersByHashesResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_orders()->~RepeatedPtrField();
}

void QueryDerivativeOrdersByHashesResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryDerivativeOrdersByHashesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.QueryDerivativeOrdersByHashesResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_orders()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryDerivativeOrdersByHashesResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .injective.exchange.v1beta1.TrimmedDerivativeLimitOrder orders = 1 [json_name = "orders"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_orders(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryDerivativeOrdersByHashesResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.QueryDerivativeOrdersByHashesResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .injective.exchange.v1beta1.TrimmedDerivativeLimitOrder orders = 1 [json_name = "orders"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_orders_size()); i < n; i++) {
    const auto& repfield = this->_internal_orders(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.QueryDerivativeOrdersByHashesResponse)
  return target;
}

::size_t QueryDerivativeOrdersByHashesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.QueryDerivativeOrdersByHashesResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .injective.exchange.v1beta1.TrimmedDerivativeLimitOrder orders = 1 [json_name = "orders"];
  total_size += 1UL * this->_internal_orders_size();
  for (const auto& msg : this->_internal_orders()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryDerivativeOrdersByHashesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryDerivativeOrdersByHashesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryDerivativeOrdersByHashesResponse::GetClassData() const { return &_class_data_; }


void QueryDerivativeOrdersByHashesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryDerivativeOrdersByHashesResponse*>(&to_msg);
  auto& from = static_cast<const QueryDerivativeOrdersByHashesResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.QueryDerivativeOrdersByHashesResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_orders()->MergeFrom(from._internal_orders());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryDerivativeOrdersByHashesResponse::CopyFrom(const QueryDerivativeOrdersByHashesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.QueryDerivativeOrdersByHashesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryDerivativeOrdersByHashesResponse::IsInitialized() const {
  return true;
}

void QueryDerivativeOrdersByHashesResponse::InternalSwap(QueryDerivativeOrdersByHashesResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_orders()->InternalSwap(other->_internal_mutable_orders());
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryDerivativeOrdersByHashesResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2fquery_2eproto[57]);
}
// ===================================================================

class QueryDerivativeMarketsRequest::_Internal {
 public:
};

QueryDerivativeMarketsRequest::QueryDerivativeMarketsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.QueryDerivativeMarketsRequest)
}
QueryDerivativeMarketsRequest::QueryDerivativeMarketsRequest(const QueryDerivativeMarketsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryDerivativeMarketsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.market_ids_){from._impl_.market_ids_}
    , decltype(_impl_.status_) {}

    , decltype(_impl_.with_mid_price_and_tob_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.status_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.status_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_status().empty()) {
    _this->_impl_.status_.Set(from._internal_status(), _this->GetArenaForAllocation());
  }
  _this->_impl_.with_mid_price_and_tob_ = from._impl_.with_mid_price_and_tob_;
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.QueryDerivativeMarketsRequest)
}

inline void QueryDerivativeMarketsRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.market_ids_){arena}
    , decltype(_impl_.status_) {}

    , decltype(_impl_.with_mid_price_and_tob_) { false }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.status_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.status_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

QueryDerivativeMarketsRequest::~QueryDerivativeMarketsRequest() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.QueryDerivativeMarketsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryDerivativeMarketsRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_market_ids()->~RepeatedPtrField();
  _impl_.status_.Destroy();
}

void QueryDerivativeMarketsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryDerivativeMarketsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.QueryDerivativeMarketsRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_market_ids()->Clear();
  _impl_.status_.ClearToEmpty();
  _impl_.with_mid_price_and_tob_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryDerivativeMarketsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string status = 1 [json_name = "status"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_status();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.QueryDerivativeMarketsRequest.status"));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string market_ids = 2 [json_name = "marketIds"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_market_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.QueryDerivativeMarketsRequest.market_ids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // bool with_mid_price_and_tob = 3 [json_name = "withMidPriceAndTob"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.with_mid_price_and_tob_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryDerivativeMarketsRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.QueryDerivativeMarketsRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string status = 1 [json_name = "status"];
  if (!this->_internal_status().empty()) {
    const std::string& _s = this->_internal_status();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.QueryDerivativeMarketsRequest.status");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // repeated string market_ids = 2 [json_name = "marketIds"];
  for (int i = 0, n = this->_internal_market_ids_size(); i < n; ++i) {
    const auto& s = this->_internal_market_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.QueryDerivativeMarketsRequest.market_ids");
    target = stream->WriteString(2, s, target);
  }

  // bool with_mid_price_and_tob = 3 [json_name = "withMidPriceAndTob"];
  if (this->_internal_with_mid_price_and_tob() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        3, this->_internal_with_mid_price_and_tob(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.QueryDerivativeMarketsRequest)
  return target;
}

::size_t QueryDerivativeMarketsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.QueryDerivativeMarketsRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string market_ids = 2 [json_name = "marketIds"];
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_market_ids().size());
  for (int i = 0, n = _internal_market_ids().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_market_ids().Get(i));
  }

  // string status = 1 [json_name = "status"];
  if (!this->_internal_status().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_status());
  }

  // bool with_mid_price_and_tob = 3 [json_name = "withMidPriceAndTob"];
  if (this->_internal_with_mid_price_and_tob() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryDerivativeMarketsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryDerivativeMarketsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryDerivativeMarketsRequest::GetClassData() const { return &_class_data_; }


void QueryDerivativeMarketsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryDerivativeMarketsRequest*>(&to_msg);
  auto& from = static_cast<const QueryDerivativeMarketsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.QueryDerivativeMarketsRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_market_ids()->MergeFrom(from._internal_market_ids());
  if (!from._internal_status().empty()) {
    _this->_internal_set_status(from._internal_status());
  }
  if (from._internal_with_mid_price_and_tob() != 0) {
    _this->_internal_set_with_mid_price_and_tob(from._internal_with_mid_price_and_tob());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryDerivativeMarketsRequest::CopyFrom(const QueryDerivativeMarketsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.QueryDerivativeMarketsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryDerivativeMarketsRequest::IsInitialized() const {
  return true;
}

void QueryDerivativeMarketsRequest::InternalSwap(QueryDerivativeMarketsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_market_ids()->InternalSwap(
      other->_internal_mutable_market_ids());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.status_, lhs_arena,
                                       &other->_impl_.status_, rhs_arena);

  swap(_impl_.with_mid_price_and_tob_, other->_impl_.with_mid_price_and_tob_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryDerivativeMarketsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2fquery_2eproto[58]);
}
// ===================================================================

class PriceLevel::_Internal {
 public:
};

PriceLevel::PriceLevel(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.PriceLevel)
}
PriceLevel::PriceLevel(const PriceLevel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PriceLevel* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.price_) {}

    , decltype(_impl_.quantity_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.price_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.price_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_price().empty()) {
    _this->_impl_.price_.Set(from._internal_price(), _this->GetArenaForAllocation());
  }
  _impl_.quantity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.quantity_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_quantity().empty()) {
    _this->_impl_.quantity_.Set(from._internal_quantity(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.PriceLevel)
}

inline void PriceLevel::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.price_) {}

    , decltype(_impl_.quantity_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.price_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.price_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.quantity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.quantity_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PriceLevel::~PriceLevel() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.PriceLevel)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PriceLevel::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.price_.Destroy();
  _impl_.quantity_.Destroy();
}

void PriceLevel::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PriceLevel::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.PriceLevel)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.price_.ClearToEmpty();
  _impl_.quantity_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PriceLevel::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string price = 1 [json_name = "price", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_price();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.PriceLevel.price"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string quantity = 2 [json_name = "quantity", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_quantity();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.PriceLevel.quantity"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* PriceLevel::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.PriceLevel)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string price = 1 [json_name = "price", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_price().empty()) {
    const std::string& _s = this->_internal_price();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.PriceLevel.price");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string quantity = 2 [json_name = "quantity", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_quantity().empty()) {
    const std::string& _s = this->_internal_quantity();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.PriceLevel.quantity");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.PriceLevel)
  return target;
}

::size_t PriceLevel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.PriceLevel)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string price = 1 [json_name = "price", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_price().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_price());
  }

  // string quantity = 2 [json_name = "quantity", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_quantity().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_quantity());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PriceLevel::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PriceLevel::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PriceLevel::GetClassData() const { return &_class_data_; }


void PriceLevel::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PriceLevel*>(&to_msg);
  auto& from = static_cast<const PriceLevel&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.PriceLevel)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_price().empty()) {
    _this->_internal_set_price(from._internal_price());
  }
  if (!from._internal_quantity().empty()) {
    _this->_internal_set_quantity(from._internal_quantity());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PriceLevel::CopyFrom(const PriceLevel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.PriceLevel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PriceLevel::IsInitialized() const {
  return true;
}

void PriceLevel::InternalSwap(PriceLevel* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.price_, lhs_arena,
                                       &other->_impl_.price_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.quantity_, lhs_arena,
                                       &other->_impl_.quantity_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata PriceLevel::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2fquery_2eproto[59]);
}
// ===================================================================

class PerpetualMarketState::_Internal {
 public:
  using HasBits = decltype(std::declval<PerpetualMarketState>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(PerpetualMarketState, _impl_._has_bits_);
  static const ::injective::exchange::v1beta1::PerpetualMarketInfo& market_info(const PerpetualMarketState* msg);
  static void set_has_market_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::injective::exchange::v1beta1::PerpetualMarketFunding& funding_info(const PerpetualMarketState* msg);
  static void set_has_funding_info(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::injective::exchange::v1beta1::PerpetualMarketInfo&
PerpetualMarketState::_Internal::market_info(const PerpetualMarketState* msg) {
  return *msg->_impl_.market_info_;
}
const ::injective::exchange::v1beta1::PerpetualMarketFunding&
PerpetualMarketState::_Internal::funding_info(const PerpetualMarketState* msg) {
  return *msg->_impl_.funding_info_;
}
void PerpetualMarketState::clear_market_info() {
  if (_impl_.market_info_ != nullptr) _impl_.market_info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void PerpetualMarketState::clear_funding_info() {
  if (_impl_.funding_info_ != nullptr) _impl_.funding_info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
PerpetualMarketState::PerpetualMarketState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.PerpetualMarketState)
}
PerpetualMarketState::PerpetualMarketState(const PerpetualMarketState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PerpetualMarketState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.market_info_){nullptr}
    , decltype(_impl_.funding_info_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.market_info_ = new ::injective::exchange::v1beta1::PerpetualMarketInfo(*from._impl_.market_info_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.funding_info_ = new ::injective::exchange::v1beta1::PerpetualMarketFunding(*from._impl_.funding_info_);
  }
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.PerpetualMarketState)
}

inline void PerpetualMarketState::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.market_info_){nullptr}
    , decltype(_impl_.funding_info_){nullptr}
  };
}

PerpetualMarketState::~PerpetualMarketState() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.PerpetualMarketState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PerpetualMarketState::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.market_info_;
  if (this != internal_default_instance()) delete _impl_.funding_info_;
}

void PerpetualMarketState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PerpetualMarketState::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.PerpetualMarketState)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.market_info_ != nullptr);
      _impl_.market_info_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.funding_info_ != nullptr);
      _impl_.funding_info_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PerpetualMarketState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .injective.exchange.v1beta1.PerpetualMarketInfo market_info = 1 [json_name = "marketInfo"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_market_info(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .injective.exchange.v1beta1.PerpetualMarketFunding funding_info = 2 [json_name = "fundingInfo"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_funding_info(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* PerpetualMarketState::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.PerpetualMarketState)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .injective.exchange.v1beta1.PerpetualMarketInfo market_info = 1 [json_name = "marketInfo"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::market_info(this),
        _Internal::market_info(this).GetCachedSize(), target, stream);
  }

  // .injective.exchange.v1beta1.PerpetualMarketFunding funding_info = 2 [json_name = "fundingInfo"];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::funding_info(this),
        _Internal::funding_info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.PerpetualMarketState)
  return target;
}

::size_t PerpetualMarketState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.PerpetualMarketState)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .injective.exchange.v1beta1.PerpetualMarketInfo market_info = 1 [json_name = "marketInfo"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.market_info_);
    }

    // .injective.exchange.v1beta1.PerpetualMarketFunding funding_info = 2 [json_name = "fundingInfo"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.funding_info_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PerpetualMarketState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PerpetualMarketState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PerpetualMarketState::GetClassData() const { return &_class_data_; }


void PerpetualMarketState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PerpetualMarketState*>(&to_msg);
  auto& from = static_cast<const PerpetualMarketState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.PerpetualMarketState)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_market_info()->::injective::exchange::v1beta1::PerpetualMarketInfo::MergeFrom(
          from._internal_market_info());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_funding_info()->::injective::exchange::v1beta1::PerpetualMarketFunding::MergeFrom(
          from._internal_funding_info());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PerpetualMarketState::CopyFrom(const PerpetualMarketState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.PerpetualMarketState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerpetualMarketState::IsInitialized() const {
  return true;
}

void PerpetualMarketState::InternalSwap(PerpetualMarketState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PerpetualMarketState, _impl_.funding_info_)
      + sizeof(PerpetualMarketState::_impl_.funding_info_)
      - PROTOBUF_FIELD_OFFSET(PerpetualMarketState, _impl_.market_info_)>(
          reinterpret_cast<char*>(&_impl_.market_info_),
          reinterpret_cast<char*>(&other->_impl_.market_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PerpetualMarketState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2fquery_2eproto[60]);
}
// ===================================================================

class FullDerivativeMarket::_Internal {
 public:
  using HasBits = decltype(std::declval<FullDerivativeMarket>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(FullDerivativeMarket, _impl_._has_bits_);
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::injective::exchange::v1beta1::FullDerivativeMarket, _impl_._oneof_case_);
  static const ::injective::exchange::v1beta1::DerivativeMarket& market(const FullDerivativeMarket* msg);
  static void set_has_market(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::injective::exchange::v1beta1::PerpetualMarketState& perpetual_info(const FullDerivativeMarket* msg);
  static const ::injective::exchange::v1beta1::ExpiryFuturesMarketInfo& futures_info(const FullDerivativeMarket* msg);
  static const ::injective::exchange::v1beta1::MidPriceAndTOB& mid_price_and_tob(const FullDerivativeMarket* msg);
  static void set_has_mid_price_and_tob(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::injective::exchange::v1beta1::DerivativeMarket&
FullDerivativeMarket::_Internal::market(const FullDerivativeMarket* msg) {
  return *msg->_impl_.market_;
}
const ::injective::exchange::v1beta1::PerpetualMarketState&
FullDerivativeMarket::_Internal::perpetual_info(const FullDerivativeMarket* msg) {
  return *msg->_impl_.info_.perpetual_info_;
}
const ::injective::exchange::v1beta1::ExpiryFuturesMarketInfo&
FullDerivativeMarket::_Internal::futures_info(const FullDerivativeMarket* msg) {
  return *msg->_impl_.info_.futures_info_;
}
const ::injective::exchange::v1beta1::MidPriceAndTOB&
FullDerivativeMarket::_Internal::mid_price_and_tob(const FullDerivativeMarket* msg) {
  return *msg->_impl_.mid_price_and_tob_;
}
void FullDerivativeMarket::clear_market() {
  if (_impl_.market_ != nullptr) _impl_.market_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void FullDerivativeMarket::set_allocated_perpetual_info(::injective::exchange::v1beta1::PerpetualMarketState* perpetual_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_info();
  if (perpetual_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(perpetual_info);
    if (message_arena != submessage_arena) {
      perpetual_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, perpetual_info, submessage_arena);
    }
    set_has_perpetual_info();
    _impl_.info_.perpetual_info_ = perpetual_info;
  }
  // @@protoc_insertion_point(field_set_allocated:injective.exchange.v1beta1.FullDerivativeMarket.perpetual_info)
}
void FullDerivativeMarket::set_allocated_futures_info(::injective::exchange::v1beta1::ExpiryFuturesMarketInfo* futures_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_info();
  if (futures_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(futures_info));
    if (message_arena != submessage_arena) {
      futures_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, futures_info, submessage_arena);
    }
    set_has_futures_info();
    _impl_.info_.futures_info_ = futures_info;
  }
  // @@protoc_insertion_point(field_set_allocated:injective.exchange.v1beta1.FullDerivativeMarket.futures_info)
}
void FullDerivativeMarket::clear_futures_info() {
  if (info_case() == kFuturesInfo) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.info_.futures_info_;
    }
    clear_has_info();
  }
}
void FullDerivativeMarket::clear_mid_price_and_tob() {
  if (_impl_.mid_price_and_tob_ != nullptr) _impl_.mid_price_and_tob_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
FullDerivativeMarket::FullDerivativeMarket(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.FullDerivativeMarket)
}
FullDerivativeMarket::FullDerivativeMarket(const FullDerivativeMarket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FullDerivativeMarket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mark_price_) {}

    , decltype(_impl_.market_){nullptr}
    , decltype(_impl_.mid_price_and_tob_){nullptr}
    , decltype(_impl_.info_){}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.mark_price_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.mark_price_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mark_price().empty()) {
    _this->_impl_.mark_price_.Set(from._internal_mark_price(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.market_ = new ::injective::exchange::v1beta1::DerivativeMarket(*from._impl_.market_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.mid_price_and_tob_ = new ::injective::exchange::v1beta1::MidPriceAndTOB(*from._impl_.mid_price_and_tob_);
  }
  clear_has_info();
  switch (from.info_case()) {
    case kPerpetualInfo: {
      _this->_internal_mutable_perpetual_info()->::injective::exchange::v1beta1::PerpetualMarketState::MergeFrom(
          from._internal_perpetual_info());
      break;
    }
    case kFuturesInfo: {
      _this->_internal_mutable_futures_info()->::injective::exchange::v1beta1::ExpiryFuturesMarketInfo::MergeFrom(
          from._internal_futures_info());
      break;
    }
    case INFO_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.FullDerivativeMarket)
}

inline void FullDerivativeMarket::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mark_price_) {}

    , decltype(_impl_.market_){nullptr}
    , decltype(_impl_.mid_price_and_tob_){nullptr}
    , decltype(_impl_.info_){}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.mark_price_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.mark_price_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_info();
}

FullDerivativeMarket::~FullDerivativeMarket() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.FullDerivativeMarket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FullDerivativeMarket::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.mark_price_.Destroy();
  if (this != internal_default_instance()) delete _impl_.market_;
  if (this != internal_default_instance()) delete _impl_.mid_price_and_tob_;
  if (has_info()) {
    clear_info();
  }
}

void FullDerivativeMarket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FullDerivativeMarket::clear_info() {
// @@protoc_insertion_point(one_of_clear_start:injective.exchange.v1beta1.FullDerivativeMarket)
  switch (info_case()) {
    case kPerpetualInfo: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.info_.perpetual_info_;
      }
      break;
    }
    case kFuturesInfo: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.info_.futures_info_;
      }
      break;
    }
    case INFO_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = INFO_NOT_SET;
}


void FullDerivativeMarket::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.FullDerivativeMarket)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.mark_price_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.market_ != nullptr);
      _impl_.market_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.mid_price_and_tob_ != nullptr);
      _impl_.mid_price_and_tob_->Clear();
    }
  }
  clear_info();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FullDerivativeMarket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .injective.exchange.v1beta1.DerivativeMarket market = 1 [json_name = "market"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_market(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .injective.exchange.v1beta1.PerpetualMarketState perpetual_info = 2 [json_name = "perpetualInfo"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_perpetual_info(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .injective.exchange.v1beta1.ExpiryFuturesMarketInfo futures_info = 3 [json_name = "futuresInfo"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_futures_info(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string mark_price = 4 [json_name = "markPrice", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_mark_price();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.FullDerivativeMarket.mark_price"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .injective.exchange.v1beta1.MidPriceAndTOB mid_price_and_tob = 5 [json_name = "midPriceAndTob", (.gogoproto.nullable) = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_mid_price_and_tob(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* FullDerivativeMarket::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.FullDerivativeMarket)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .injective.exchange.v1beta1.DerivativeMarket market = 1 [json_name = "market"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::market(this),
        _Internal::market(this).GetCachedSize(), target, stream);
  }

  switch (info_case()) {
    case kPerpetualInfo: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, _Internal::perpetual_info(this),
          _Internal::perpetual_info(this).GetCachedSize(), target, stream);
      break;
    }
    case kFuturesInfo: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, _Internal::futures_info(this),
          _Internal::futures_info(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  // string mark_price = 4 [json_name = "markPrice", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_mark_price().empty()) {
    const std::string& _s = this->_internal_mark_price();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.FullDerivativeMarket.mark_price");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // .injective.exchange.v1beta1.MidPriceAndTOB mid_price_and_tob = 5 [json_name = "midPriceAndTob", (.gogoproto.nullable) = true];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::mid_price_and_tob(this),
        _Internal::mid_price_and_tob(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.FullDerivativeMarket)
  return target;
}

::size_t FullDerivativeMarket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.FullDerivativeMarket)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string mark_price = 4 [json_name = "markPrice", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_mark_price().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_mark_price());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .injective.exchange.v1beta1.DerivativeMarket market = 1 [json_name = "market"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.market_);
    }

    // .injective.exchange.v1beta1.MidPriceAndTOB mid_price_and_tob = 5 [json_name = "midPriceAndTob", (.gogoproto.nullable) = true];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.mid_price_and_tob_);
    }

  }
  switch (info_case()) {
    // .injective.exchange.v1beta1.PerpetualMarketState perpetual_info = 2 [json_name = "perpetualInfo"];
    case kPerpetualInfo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.info_.perpetual_info_);
      break;
    }
    // .injective.exchange.v1beta1.ExpiryFuturesMarketInfo futures_info = 3 [json_name = "futuresInfo"];
    case kFuturesInfo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.info_.futures_info_);
      break;
    }
    case INFO_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FullDerivativeMarket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FullDerivativeMarket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FullDerivativeMarket::GetClassData() const { return &_class_data_; }


void FullDerivativeMarket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FullDerivativeMarket*>(&to_msg);
  auto& from = static_cast<const FullDerivativeMarket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.FullDerivativeMarket)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_mark_price().empty()) {
    _this->_internal_set_mark_price(from._internal_mark_price());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_market()->::injective::exchange::v1beta1::DerivativeMarket::MergeFrom(
          from._internal_market());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_mid_price_and_tob()->::injective::exchange::v1beta1::MidPriceAndTOB::MergeFrom(
          from._internal_mid_price_and_tob());
    }
  }
  switch (from.info_case()) {
    case kPerpetualInfo: {
      _this->_internal_mutable_perpetual_info()->::injective::exchange::v1beta1::PerpetualMarketState::MergeFrom(
          from._internal_perpetual_info());
      break;
    }
    case kFuturesInfo: {
      _this->_internal_mutable_futures_info()->::injective::exchange::v1beta1::ExpiryFuturesMarketInfo::MergeFrom(
          from._internal_futures_info());
      break;
    }
    case INFO_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FullDerivativeMarket::CopyFrom(const FullDerivativeMarket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.FullDerivativeMarket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FullDerivativeMarket::IsInitialized() const {
  return true;
}

void FullDerivativeMarket::InternalSwap(FullDerivativeMarket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.mark_price_, lhs_arena,
                                       &other->_impl_.mark_price_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FullDerivativeMarket, _impl_.mid_price_and_tob_)
      + sizeof(FullDerivativeMarket::_impl_.mid_price_and_tob_)
      - PROTOBUF_FIELD_OFFSET(FullDerivativeMarket, _impl_.market_)>(
          reinterpret_cast<char*>(&_impl_.market_),
          reinterpret_cast<char*>(&other->_impl_.market_));
  swap(_impl_.info_, other->_impl_.info_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata FullDerivativeMarket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2fquery_2eproto[61]);
}
// ===================================================================

class QueryDerivativeMarketsResponse::_Internal {
 public:
};

QueryDerivativeMarketsResponse::QueryDerivativeMarketsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.QueryDerivativeMarketsResponse)
}
QueryDerivativeMarketsResponse::QueryDerivativeMarketsResponse(const QueryDerivativeMarketsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryDerivativeMarketsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.markets_){from._impl_.markets_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.QueryDerivativeMarketsResponse)
}

inline void QueryDerivativeMarketsResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.markets_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

QueryDerivativeMarketsResponse::~QueryDerivativeMarketsResponse() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.QueryDerivativeMarketsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryDerivativeMarketsResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_markets()->~RepeatedPtrField();
}

void QueryDerivativeMarketsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryDerivativeMarketsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.QueryDerivativeMarketsResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_markets()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryDerivativeMarketsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .injective.exchange.v1beta1.FullDerivativeMarket markets = 1 [json_name = "markets"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_markets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryDerivativeMarketsResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.QueryDerivativeMarketsResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .injective.exchange.v1beta1.FullDerivativeMarket markets = 1 [json_name = "markets"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_markets_size()); i < n; i++) {
    const auto& repfield = this->_internal_markets(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.QueryDerivativeMarketsResponse)
  return target;
}

::size_t QueryDerivativeMarketsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.QueryDerivativeMarketsResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .injective.exchange.v1beta1.FullDerivativeMarket markets = 1 [json_name = "markets"];
  total_size += 1UL * this->_internal_markets_size();
  for (const auto& msg : this->_internal_markets()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryDerivativeMarketsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryDerivativeMarketsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryDerivativeMarketsResponse::GetClassData() const { return &_class_data_; }


void QueryDerivativeMarketsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryDerivativeMarketsResponse*>(&to_msg);
  auto& from = static_cast<const QueryDerivativeMarketsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.QueryDerivativeMarketsResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_markets()->MergeFrom(from._internal_markets());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryDerivativeMarketsResponse::CopyFrom(const QueryDerivativeMarketsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.QueryDerivativeMarketsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryDerivativeMarketsResponse::IsInitialized() const {
  return true;
}

void QueryDerivativeMarketsResponse::InternalSwap(QueryDerivativeMarketsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_markets()->InternalSwap(other->_internal_mutable_markets());
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryDerivativeMarketsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2fquery_2eproto[62]);
}
// ===================================================================

class QueryDerivativeMarketRequest::_Internal {
 public:
};

QueryDerivativeMarketRequest::QueryDerivativeMarketRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.QueryDerivativeMarketRequest)
}
QueryDerivativeMarketRequest::QueryDerivativeMarketRequest(const QueryDerivativeMarketRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryDerivativeMarketRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.market_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_market_id().empty()) {
    _this->_impl_.market_id_.Set(from._internal_market_id(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.QueryDerivativeMarketRequest)
}

inline void QueryDerivativeMarketRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.market_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

QueryDerivativeMarketRequest::~QueryDerivativeMarketRequest() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.QueryDerivativeMarketRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryDerivativeMarketRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.market_id_.Destroy();
}

void QueryDerivativeMarketRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryDerivativeMarketRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.QueryDerivativeMarketRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.market_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryDerivativeMarketRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string market_id = 1 [json_name = "marketId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_market_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.QueryDerivativeMarketRequest.market_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryDerivativeMarketRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.QueryDerivativeMarketRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string market_id = 1 [json_name = "marketId"];
  if (!this->_internal_market_id().empty()) {
    const std::string& _s = this->_internal_market_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.QueryDerivativeMarketRequest.market_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.QueryDerivativeMarketRequest)
  return target;
}

::size_t QueryDerivativeMarketRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.QueryDerivativeMarketRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string market_id = 1 [json_name = "marketId"];
  if (!this->_internal_market_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_market_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryDerivativeMarketRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryDerivativeMarketRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryDerivativeMarketRequest::GetClassData() const { return &_class_data_; }


void QueryDerivativeMarketRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryDerivativeMarketRequest*>(&to_msg);
  auto& from = static_cast<const QueryDerivativeMarketRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.QueryDerivativeMarketRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_market_id().empty()) {
    _this->_internal_set_market_id(from._internal_market_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryDerivativeMarketRequest::CopyFrom(const QueryDerivativeMarketRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.QueryDerivativeMarketRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryDerivativeMarketRequest::IsInitialized() const {
  return true;
}

void QueryDerivativeMarketRequest::InternalSwap(QueryDerivativeMarketRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.market_id_, lhs_arena,
                                       &other->_impl_.market_id_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryDerivativeMarketRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2fquery_2eproto[63]);
}
// ===================================================================

class QueryDerivativeMarketResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<QueryDerivativeMarketResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(QueryDerivativeMarketResponse, _impl_._has_bits_);
  static const ::injective::exchange::v1beta1::FullDerivativeMarket& market(const QueryDerivativeMarketResponse* msg);
  static void set_has_market(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::injective::exchange::v1beta1::FullDerivativeMarket&
QueryDerivativeMarketResponse::_Internal::market(const QueryDerivativeMarketResponse* msg) {
  return *msg->_impl_.market_;
}
QueryDerivativeMarketResponse::QueryDerivativeMarketResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.QueryDerivativeMarketResponse)
}
QueryDerivativeMarketResponse::QueryDerivativeMarketResponse(const QueryDerivativeMarketResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryDerivativeMarketResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.market_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.market_ = new ::injective::exchange::v1beta1::FullDerivativeMarket(*from._impl_.market_);
  }
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.QueryDerivativeMarketResponse)
}

inline void QueryDerivativeMarketResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.market_){nullptr}
  };
}

QueryDerivativeMarketResponse::~QueryDerivativeMarketResponse() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.QueryDerivativeMarketResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryDerivativeMarketResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.market_;
}

void QueryDerivativeMarketResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryDerivativeMarketResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.QueryDerivativeMarketResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.market_ != nullptr);
    _impl_.market_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryDerivativeMarketResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .injective.exchange.v1beta1.FullDerivativeMarket market = 1 [json_name = "market"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_market(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryDerivativeMarketResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.QueryDerivativeMarketResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .injective.exchange.v1beta1.FullDerivativeMarket market = 1 [json_name = "market"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::market(this),
        _Internal::market(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.QueryDerivativeMarketResponse)
  return target;
}

::size_t QueryDerivativeMarketResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.QueryDerivativeMarketResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .injective.exchange.v1beta1.FullDerivativeMarket market = 1 [json_name = "market"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.market_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryDerivativeMarketResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryDerivativeMarketResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryDerivativeMarketResponse::GetClassData() const { return &_class_data_; }


void QueryDerivativeMarketResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryDerivativeMarketResponse*>(&to_msg);
  auto& from = static_cast<const QueryDerivativeMarketResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.QueryDerivativeMarketResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_market()->::injective::exchange::v1beta1::FullDerivativeMarket::MergeFrom(
        from._internal_market());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryDerivativeMarketResponse::CopyFrom(const QueryDerivativeMarketResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.QueryDerivativeMarketResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryDerivativeMarketResponse::IsInitialized() const {
  return true;
}

void QueryDerivativeMarketResponse::InternalSwap(QueryDerivativeMarketResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.market_, other->_impl_.market_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryDerivativeMarketResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2fquery_2eproto[64]);
}
// ===================================================================

class QueryDerivativeMarketAddressRequest::_Internal {
 public:
};

QueryDerivativeMarketAddressRequest::QueryDerivativeMarketAddressRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.QueryDerivativeMarketAddressRequest)
}
QueryDerivativeMarketAddressRequest::QueryDerivativeMarketAddressRequest(const QueryDerivativeMarketAddressRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryDerivativeMarketAddressRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.market_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_market_id().empty()) {
    _this->_impl_.market_id_.Set(from._internal_market_id(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.QueryDerivativeMarketAddressRequest)
}

inline void QueryDerivativeMarketAddressRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.market_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

QueryDerivativeMarketAddressRequest::~QueryDerivativeMarketAddressRequest() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.QueryDerivativeMarketAddressRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryDerivativeMarketAddressRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.market_id_.Destroy();
}

void QueryDerivativeMarketAddressRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryDerivativeMarketAddressRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.QueryDerivativeMarketAddressRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.market_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryDerivativeMarketAddressRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string market_id = 1 [json_name = "marketId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_market_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.QueryDerivativeMarketAddressRequest.market_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryDerivativeMarketAddressRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.QueryDerivativeMarketAddressRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string market_id = 1 [json_name = "marketId"];
  if (!this->_internal_market_id().empty()) {
    const std::string& _s = this->_internal_market_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.QueryDerivativeMarketAddressRequest.market_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.QueryDerivativeMarketAddressRequest)
  return target;
}

::size_t QueryDerivativeMarketAddressRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.QueryDerivativeMarketAddressRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string market_id = 1 [json_name = "marketId"];
  if (!this->_internal_market_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_market_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryDerivativeMarketAddressRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryDerivativeMarketAddressRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryDerivativeMarketAddressRequest::GetClassData() const { return &_class_data_; }


void QueryDerivativeMarketAddressRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryDerivativeMarketAddressRequest*>(&to_msg);
  auto& from = static_cast<const QueryDerivativeMarketAddressRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.QueryDerivativeMarketAddressRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_market_id().empty()) {
    _this->_internal_set_market_id(from._internal_market_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryDerivativeMarketAddressRequest::CopyFrom(const QueryDerivativeMarketAddressRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.QueryDerivativeMarketAddressRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryDerivativeMarketAddressRequest::IsInitialized() const {
  return true;
}

void QueryDerivativeMarketAddressRequest::InternalSwap(QueryDerivativeMarketAddressRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.market_id_, lhs_arena,
                                       &other->_impl_.market_id_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryDerivativeMarketAddressRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2fquery_2eproto[65]);
}
// ===================================================================

class QueryDerivativeMarketAddressResponse::_Internal {
 public:
};

QueryDerivativeMarketAddressResponse::QueryDerivativeMarketAddressResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.QueryDerivativeMarketAddressResponse)
}
QueryDerivativeMarketAddressResponse::QueryDerivativeMarketAddressResponse(const QueryDerivativeMarketAddressResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryDerivativeMarketAddressResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.address_) {}

    , decltype(_impl_.subaccount_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_address().empty()) {
    _this->_impl_.address_.Set(from._internal_address(), _this->GetArenaForAllocation());
  }
  _impl_.subaccount_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.subaccount_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_subaccount_id().empty()) {
    _this->_impl_.subaccount_id_.Set(from._internal_subaccount_id(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.QueryDerivativeMarketAddressResponse)
}

inline void QueryDerivativeMarketAddressResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.address_) {}

    , decltype(_impl_.subaccount_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.subaccount_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.subaccount_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

QueryDerivativeMarketAddressResponse::~QueryDerivativeMarketAddressResponse() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.QueryDerivativeMarketAddressResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryDerivativeMarketAddressResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.address_.Destroy();
  _impl_.subaccount_id_.Destroy();
}

void QueryDerivativeMarketAddressResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryDerivativeMarketAddressResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.QueryDerivativeMarketAddressResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.address_.ClearToEmpty();
  _impl_.subaccount_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryDerivativeMarketAddressResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string address = 1 [json_name = "address"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.QueryDerivativeMarketAddressResponse.address"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string subaccount_id = 2 [json_name = "subaccountId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_subaccount_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.QueryDerivativeMarketAddressResponse.subaccount_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryDerivativeMarketAddressResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.QueryDerivativeMarketAddressResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1 [json_name = "address"];
  if (!this->_internal_address().empty()) {
    const std::string& _s = this->_internal_address();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.QueryDerivativeMarketAddressResponse.address");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string subaccount_id = 2 [json_name = "subaccountId"];
  if (!this->_internal_subaccount_id().empty()) {
    const std::string& _s = this->_internal_subaccount_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.QueryDerivativeMarketAddressResponse.subaccount_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.QueryDerivativeMarketAddressResponse)
  return target;
}

::size_t QueryDerivativeMarketAddressResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.QueryDerivativeMarketAddressResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 1 [json_name = "address"];
  if (!this->_internal_address().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_address());
  }

  // string subaccount_id = 2 [json_name = "subaccountId"];
  if (!this->_internal_subaccount_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_subaccount_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryDerivativeMarketAddressResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryDerivativeMarketAddressResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryDerivativeMarketAddressResponse::GetClassData() const { return &_class_data_; }


void QueryDerivativeMarketAddressResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryDerivativeMarketAddressResponse*>(&to_msg);
  auto& from = static_cast<const QueryDerivativeMarketAddressResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.QueryDerivativeMarketAddressResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_address().empty()) {
    _this->_internal_set_address(from._internal_address());
  }
  if (!from._internal_subaccount_id().empty()) {
    _this->_internal_set_subaccount_id(from._internal_subaccount_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryDerivativeMarketAddressResponse::CopyFrom(const QueryDerivativeMarketAddressResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.QueryDerivativeMarketAddressResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryDerivativeMarketAddressResponse::IsInitialized() const {
  return true;
}

void QueryDerivativeMarketAddressResponse::InternalSwap(QueryDerivativeMarketAddressResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.address_, lhs_arena,
                                       &other->_impl_.address_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.subaccount_id_, lhs_arena,
                                       &other->_impl_.subaccount_id_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryDerivativeMarketAddressResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2fquery_2eproto[66]);
}
// ===================================================================

class QuerySubaccountTradeNonceRequest::_Internal {
 public:
};

QuerySubaccountTradeNonceRequest::QuerySubaccountTradeNonceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.QuerySubaccountTradeNonceRequest)
}
QuerySubaccountTradeNonceRequest::QuerySubaccountTradeNonceRequest(const QuerySubaccountTradeNonceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QuerySubaccountTradeNonceRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.subaccount_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.subaccount_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.subaccount_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_subaccount_id().empty()) {
    _this->_impl_.subaccount_id_.Set(from._internal_subaccount_id(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.QuerySubaccountTradeNonceRequest)
}

inline void QuerySubaccountTradeNonceRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.subaccount_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.subaccount_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.subaccount_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

QuerySubaccountTradeNonceRequest::~QuerySubaccountTradeNonceRequest() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.QuerySubaccountTradeNonceRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QuerySubaccountTradeNonceRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.subaccount_id_.Destroy();
}

void QuerySubaccountTradeNonceRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QuerySubaccountTradeNonceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.QuerySubaccountTradeNonceRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.subaccount_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QuerySubaccountTradeNonceRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string subaccount_id = 1 [json_name = "subaccountId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_subaccount_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.QuerySubaccountTradeNonceRequest.subaccount_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QuerySubaccountTradeNonceRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.QuerySubaccountTradeNonceRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string subaccount_id = 1 [json_name = "subaccountId"];
  if (!this->_internal_subaccount_id().empty()) {
    const std::string& _s = this->_internal_subaccount_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.QuerySubaccountTradeNonceRequest.subaccount_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.QuerySubaccountTradeNonceRequest)
  return target;
}

::size_t QuerySubaccountTradeNonceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.QuerySubaccountTradeNonceRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string subaccount_id = 1 [json_name = "subaccountId"];
  if (!this->_internal_subaccount_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_subaccount_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QuerySubaccountTradeNonceRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QuerySubaccountTradeNonceRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QuerySubaccountTradeNonceRequest::GetClassData() const { return &_class_data_; }


void QuerySubaccountTradeNonceRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QuerySubaccountTradeNonceRequest*>(&to_msg);
  auto& from = static_cast<const QuerySubaccountTradeNonceRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.QuerySubaccountTradeNonceRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_subaccount_id().empty()) {
    _this->_internal_set_subaccount_id(from._internal_subaccount_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QuerySubaccountTradeNonceRequest::CopyFrom(const QuerySubaccountTradeNonceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.QuerySubaccountTradeNonceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuerySubaccountTradeNonceRequest::IsInitialized() const {
  return true;
}

void QuerySubaccountTradeNonceRequest::InternalSwap(QuerySubaccountTradeNonceRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.subaccount_id_, lhs_arena,
                                       &other->_impl_.subaccount_id_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata QuerySubaccountTradeNonceRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2fquery_2eproto[67]);
}
// ===================================================================

class QuerySubaccountPositionsRequest::_Internal {
 public:
};

QuerySubaccountPositionsRequest::QuerySubaccountPositionsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.QuerySubaccountPositionsRequest)
}
QuerySubaccountPositionsRequest::QuerySubaccountPositionsRequest(const QuerySubaccountPositionsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QuerySubaccountPositionsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.subaccount_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.subaccount_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.subaccount_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_subaccount_id().empty()) {
    _this->_impl_.subaccount_id_.Set(from._internal_subaccount_id(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.QuerySubaccountPositionsRequest)
}

inline void QuerySubaccountPositionsRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.subaccount_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.subaccount_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.subaccount_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

QuerySubaccountPositionsRequest::~QuerySubaccountPositionsRequest() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.QuerySubaccountPositionsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QuerySubaccountPositionsRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.subaccount_id_.Destroy();
}

void QuerySubaccountPositionsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QuerySubaccountPositionsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.QuerySubaccountPositionsRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.subaccount_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QuerySubaccountPositionsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string subaccount_id = 1 [json_name = "subaccountId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_subaccount_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.QuerySubaccountPositionsRequest.subaccount_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QuerySubaccountPositionsRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.QuerySubaccountPositionsRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string subaccount_id = 1 [json_name = "subaccountId"];
  if (!this->_internal_subaccount_id().empty()) {
    const std::string& _s = this->_internal_subaccount_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.QuerySubaccountPositionsRequest.subaccount_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.QuerySubaccountPositionsRequest)
  return target;
}

::size_t QuerySubaccountPositionsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.QuerySubaccountPositionsRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string subaccount_id = 1 [json_name = "subaccountId"];
  if (!this->_internal_subaccount_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_subaccount_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QuerySubaccountPositionsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QuerySubaccountPositionsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QuerySubaccountPositionsRequest::GetClassData() const { return &_class_data_; }


void QuerySubaccountPositionsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QuerySubaccountPositionsRequest*>(&to_msg);
  auto& from = static_cast<const QuerySubaccountPositionsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.QuerySubaccountPositionsRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_subaccount_id().empty()) {
    _this->_internal_set_subaccount_id(from._internal_subaccount_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QuerySubaccountPositionsRequest::CopyFrom(const QuerySubaccountPositionsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.QuerySubaccountPositionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuerySubaccountPositionsRequest::IsInitialized() const {
  return true;
}

void QuerySubaccountPositionsRequest::InternalSwap(QuerySubaccountPositionsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.subaccount_id_, lhs_arena,
                                       &other->_impl_.subaccount_id_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata QuerySubaccountPositionsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2fquery_2eproto[68]);
}
// ===================================================================

class QuerySubaccountPositionInMarketRequest::_Internal {
 public:
};

QuerySubaccountPositionInMarketRequest::QuerySubaccountPositionInMarketRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.QuerySubaccountPositionInMarketRequest)
}
QuerySubaccountPositionInMarketRequest::QuerySubaccountPositionInMarketRequest(const QuerySubaccountPositionInMarketRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QuerySubaccountPositionInMarketRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.subaccount_id_) {}

    , decltype(_impl_.market_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.subaccount_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.subaccount_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_subaccount_id().empty()) {
    _this->_impl_.subaccount_id_.Set(from._internal_subaccount_id(), _this->GetArenaForAllocation());
  }
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_market_id().empty()) {
    _this->_impl_.market_id_.Set(from._internal_market_id(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.QuerySubaccountPositionInMarketRequest)
}

inline void QuerySubaccountPositionInMarketRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.subaccount_id_) {}

    , decltype(_impl_.market_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.subaccount_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.subaccount_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

QuerySubaccountPositionInMarketRequest::~QuerySubaccountPositionInMarketRequest() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.QuerySubaccountPositionInMarketRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QuerySubaccountPositionInMarketRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.subaccount_id_.Destroy();
  _impl_.market_id_.Destroy();
}

void QuerySubaccountPositionInMarketRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QuerySubaccountPositionInMarketRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.QuerySubaccountPositionInMarketRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.subaccount_id_.ClearToEmpty();
  _impl_.market_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QuerySubaccountPositionInMarketRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string subaccount_id = 1 [json_name = "subaccountId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_subaccount_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.QuerySubaccountPositionInMarketRequest.subaccount_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string market_id = 2 [json_name = "marketId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_market_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.QuerySubaccountPositionInMarketRequest.market_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QuerySubaccountPositionInMarketRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.QuerySubaccountPositionInMarketRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string subaccount_id = 1 [json_name = "subaccountId"];
  if (!this->_internal_subaccount_id().empty()) {
    const std::string& _s = this->_internal_subaccount_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.QuerySubaccountPositionInMarketRequest.subaccount_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string market_id = 2 [json_name = "marketId"];
  if (!this->_internal_market_id().empty()) {
    const std::string& _s = this->_internal_market_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.QuerySubaccountPositionInMarketRequest.market_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.QuerySubaccountPositionInMarketRequest)
  return target;
}

::size_t QuerySubaccountPositionInMarketRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.QuerySubaccountPositionInMarketRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string subaccount_id = 1 [json_name = "subaccountId"];
  if (!this->_internal_subaccount_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_subaccount_id());
  }

  // string market_id = 2 [json_name = "marketId"];
  if (!this->_internal_market_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_market_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QuerySubaccountPositionInMarketRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QuerySubaccountPositionInMarketRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QuerySubaccountPositionInMarketRequest::GetClassData() const { return &_class_data_; }


void QuerySubaccountPositionInMarketRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QuerySubaccountPositionInMarketRequest*>(&to_msg);
  auto& from = static_cast<const QuerySubaccountPositionInMarketRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.QuerySubaccountPositionInMarketRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_subaccount_id().empty()) {
    _this->_internal_set_subaccount_id(from._internal_subaccount_id());
  }
  if (!from._internal_market_id().empty()) {
    _this->_internal_set_market_id(from._internal_market_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QuerySubaccountPositionInMarketRequest::CopyFrom(const QuerySubaccountPositionInMarketRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.QuerySubaccountPositionInMarketRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuerySubaccountPositionInMarketRequest::IsInitialized() const {
  return true;
}

void QuerySubaccountPositionInMarketRequest::InternalSwap(QuerySubaccountPositionInMarketRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.subaccount_id_, lhs_arena,
                                       &other->_impl_.subaccount_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.market_id_, lhs_arena,
                                       &other->_impl_.market_id_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata QuerySubaccountPositionInMarketRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2fquery_2eproto[69]);
}
// ===================================================================

class QuerySubaccountEffectivePositionInMarketRequest::_Internal {
 public:
};

QuerySubaccountEffectivePositionInMarketRequest::QuerySubaccountEffectivePositionInMarketRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.QuerySubaccountEffectivePositionInMarketRequest)
}
QuerySubaccountEffectivePositionInMarketRequest::QuerySubaccountEffectivePositionInMarketRequest(const QuerySubaccountEffectivePositionInMarketRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QuerySubaccountEffectivePositionInMarketRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.subaccount_id_) {}

    , decltype(_impl_.market_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.subaccount_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.subaccount_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_subaccount_id().empty()) {
    _this->_impl_.subaccount_id_.Set(from._internal_subaccount_id(), _this->GetArenaForAllocation());
  }
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_market_id().empty()) {
    _this->_impl_.market_id_.Set(from._internal_market_id(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.QuerySubaccountEffectivePositionInMarketRequest)
}

inline void QuerySubaccountEffectivePositionInMarketRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.subaccount_id_) {}

    , decltype(_impl_.market_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.subaccount_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.subaccount_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

QuerySubaccountEffectivePositionInMarketRequest::~QuerySubaccountEffectivePositionInMarketRequest() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.QuerySubaccountEffectivePositionInMarketRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QuerySubaccountEffectivePositionInMarketRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.subaccount_id_.Destroy();
  _impl_.market_id_.Destroy();
}

void QuerySubaccountEffectivePositionInMarketRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QuerySubaccountEffectivePositionInMarketRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.QuerySubaccountEffectivePositionInMarketRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.subaccount_id_.ClearToEmpty();
  _impl_.market_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QuerySubaccountEffectivePositionInMarketRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string subaccount_id = 1 [json_name = "subaccountId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_subaccount_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.QuerySubaccountEffectivePositionInMarketRequest.subaccount_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string market_id = 2 [json_name = "marketId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_market_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.QuerySubaccountEffectivePositionInMarketRequest.market_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QuerySubaccountEffectivePositionInMarketRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.QuerySubaccountEffectivePositionInMarketRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string subaccount_id = 1 [json_name = "subaccountId"];
  if (!this->_internal_subaccount_id().empty()) {
    const std::string& _s = this->_internal_subaccount_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.QuerySubaccountEffectivePositionInMarketRequest.subaccount_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string market_id = 2 [json_name = "marketId"];
  if (!this->_internal_market_id().empty()) {
    const std::string& _s = this->_internal_market_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.QuerySubaccountEffectivePositionInMarketRequest.market_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.QuerySubaccountEffectivePositionInMarketRequest)
  return target;
}

::size_t QuerySubaccountEffectivePositionInMarketRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.QuerySubaccountEffectivePositionInMarketRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string subaccount_id = 1 [json_name = "subaccountId"];
  if (!this->_internal_subaccount_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_subaccount_id());
  }

  // string market_id = 2 [json_name = "marketId"];
  if (!this->_internal_market_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_market_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QuerySubaccountEffectivePositionInMarketRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QuerySubaccountEffectivePositionInMarketRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QuerySubaccountEffectivePositionInMarketRequest::GetClassData() const { return &_class_data_; }


void QuerySubaccountEffectivePositionInMarketRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QuerySubaccountEffectivePositionInMarketRequest*>(&to_msg);
  auto& from = static_cast<const QuerySubaccountEffectivePositionInMarketRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.QuerySubaccountEffectivePositionInMarketRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_subaccount_id().empty()) {
    _this->_internal_set_subaccount_id(from._internal_subaccount_id());
  }
  if (!from._internal_market_id().empty()) {
    _this->_internal_set_market_id(from._internal_market_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QuerySubaccountEffectivePositionInMarketRequest::CopyFrom(const QuerySubaccountEffectivePositionInMarketRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.QuerySubaccountEffectivePositionInMarketRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuerySubaccountEffectivePositionInMarketRequest::IsInitialized() const {
  return true;
}

void QuerySubaccountEffectivePositionInMarketRequest::InternalSwap(QuerySubaccountEffectivePositionInMarketRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.subaccount_id_, lhs_arena,
                                       &other->_impl_.subaccount_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.market_id_, lhs_arena,
                                       &other->_impl_.market_id_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata QuerySubaccountEffectivePositionInMarketRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2fquery_2eproto[70]);
}
// ===================================================================

class QuerySubaccountOrderMetadataRequest::_Internal {
 public:
};

QuerySubaccountOrderMetadataRequest::QuerySubaccountOrderMetadataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.QuerySubaccountOrderMetadataRequest)
}
QuerySubaccountOrderMetadataRequest::QuerySubaccountOrderMetadataRequest(const QuerySubaccountOrderMetadataRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QuerySubaccountOrderMetadataRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.subaccount_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.subaccount_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.subaccount_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_subaccount_id().empty()) {
    _this->_impl_.subaccount_id_.Set(from._internal_subaccount_id(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.QuerySubaccountOrderMetadataRequest)
}

inline void QuerySubaccountOrderMetadataRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.subaccount_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.subaccount_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.subaccount_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

QuerySubaccountOrderMetadataRequest::~QuerySubaccountOrderMetadataRequest() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.QuerySubaccountOrderMetadataRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QuerySubaccountOrderMetadataRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.subaccount_id_.Destroy();
}

void QuerySubaccountOrderMetadataRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QuerySubaccountOrderMetadataRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.QuerySubaccountOrderMetadataRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.subaccount_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QuerySubaccountOrderMetadataRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string subaccount_id = 1 [json_name = "subaccountId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_subaccount_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.QuerySubaccountOrderMetadataRequest.subaccount_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QuerySubaccountOrderMetadataRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.QuerySubaccountOrderMetadataRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string subaccount_id = 1 [json_name = "subaccountId"];
  if (!this->_internal_subaccount_id().empty()) {
    const std::string& _s = this->_internal_subaccount_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.QuerySubaccountOrderMetadataRequest.subaccount_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.QuerySubaccountOrderMetadataRequest)
  return target;
}

::size_t QuerySubaccountOrderMetadataRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.QuerySubaccountOrderMetadataRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string subaccount_id = 1 [json_name = "subaccountId"];
  if (!this->_internal_subaccount_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_subaccount_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QuerySubaccountOrderMetadataRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QuerySubaccountOrderMetadataRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QuerySubaccountOrderMetadataRequest::GetClassData() const { return &_class_data_; }


void QuerySubaccountOrderMetadataRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QuerySubaccountOrderMetadataRequest*>(&to_msg);
  auto& from = static_cast<const QuerySubaccountOrderMetadataRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.QuerySubaccountOrderMetadataRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_subaccount_id().empty()) {
    _this->_internal_set_subaccount_id(from._internal_subaccount_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QuerySubaccountOrderMetadataRequest::CopyFrom(const QuerySubaccountOrderMetadataRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.QuerySubaccountOrderMetadataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuerySubaccountOrderMetadataRequest::IsInitialized() const {
  return true;
}

void QuerySubaccountOrderMetadataRequest::InternalSwap(QuerySubaccountOrderMetadataRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.subaccount_id_, lhs_arena,
                                       &other->_impl_.subaccount_id_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata QuerySubaccountOrderMetadataRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2fquery_2eproto[71]);
}
// ===================================================================

class QuerySubaccountPositionsResponse::_Internal {
 public:
};

void QuerySubaccountPositionsResponse::clear_state() {
  _internal_mutable_state()->Clear();
}
QuerySubaccountPositionsResponse::QuerySubaccountPositionsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.QuerySubaccountPositionsResponse)
}
QuerySubaccountPositionsResponse::QuerySubaccountPositionsResponse(const QuerySubaccountPositionsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QuerySubaccountPositionsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.state_){from._impl_.state_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.QuerySubaccountPositionsResponse)
}

inline void QuerySubaccountPositionsResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.state_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

QuerySubaccountPositionsResponse::~QuerySubaccountPositionsResponse() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.QuerySubaccountPositionsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QuerySubaccountPositionsResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_state()->~RepeatedPtrField();
}

void QuerySubaccountPositionsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QuerySubaccountPositionsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.QuerySubaccountPositionsResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_state()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QuerySubaccountPositionsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .injective.exchange.v1beta1.DerivativePosition state = 1 [json_name = "state", (.gogoproto.nullable) = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_state(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QuerySubaccountPositionsResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.QuerySubaccountPositionsResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .injective.exchange.v1beta1.DerivativePosition state = 1 [json_name = "state", (.gogoproto.nullable) = false];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_state_size()); i < n; i++) {
    const auto& repfield = this->_internal_state(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.QuerySubaccountPositionsResponse)
  return target;
}

::size_t QuerySubaccountPositionsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.QuerySubaccountPositionsResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .injective.exchange.v1beta1.DerivativePosition state = 1 [json_name = "state", (.gogoproto.nullable) = false];
  total_size += 1UL * this->_internal_state_size();
  for (const auto& msg : this->_internal_state()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QuerySubaccountPositionsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QuerySubaccountPositionsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QuerySubaccountPositionsResponse::GetClassData() const { return &_class_data_; }


void QuerySubaccountPositionsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QuerySubaccountPositionsResponse*>(&to_msg);
  auto& from = static_cast<const QuerySubaccountPositionsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.QuerySubaccountPositionsResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_state()->MergeFrom(from._internal_state());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QuerySubaccountPositionsResponse::CopyFrom(const QuerySubaccountPositionsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.QuerySubaccountPositionsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuerySubaccountPositionsResponse::IsInitialized() const {
  return true;
}

void QuerySubaccountPositionsResponse::InternalSwap(QuerySubaccountPositionsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_state()->InternalSwap(other->_internal_mutable_state());
}

::PROTOBUF_NAMESPACE_ID::Metadata QuerySubaccountPositionsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2fquery_2eproto[72]);
}
// ===================================================================

class QuerySubaccountPositionInMarketResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<QuerySubaccountPositionInMarketResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(QuerySubaccountPositionInMarketResponse, _impl_._has_bits_);
  static const ::injective::exchange::v1beta1::Position& state(const QuerySubaccountPositionInMarketResponse* msg);
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::injective::exchange::v1beta1::Position&
QuerySubaccountPositionInMarketResponse::_Internal::state(const QuerySubaccountPositionInMarketResponse* msg) {
  return *msg->_impl_.state_;
}
void QuerySubaccountPositionInMarketResponse::clear_state() {
  if (_impl_.state_ != nullptr) _impl_.state_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
QuerySubaccountPositionInMarketResponse::QuerySubaccountPositionInMarketResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.QuerySubaccountPositionInMarketResponse)
}
QuerySubaccountPositionInMarketResponse::QuerySubaccountPositionInMarketResponse(const QuerySubaccountPositionInMarketResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QuerySubaccountPositionInMarketResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.state_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.state_ = new ::injective::exchange::v1beta1::Position(*from._impl_.state_);
  }
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.QuerySubaccountPositionInMarketResponse)
}

inline void QuerySubaccountPositionInMarketResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.state_){nullptr}
  };
}

QuerySubaccountPositionInMarketResponse::~QuerySubaccountPositionInMarketResponse() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.QuerySubaccountPositionInMarketResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QuerySubaccountPositionInMarketResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.state_;
}

void QuerySubaccountPositionInMarketResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QuerySubaccountPositionInMarketResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.QuerySubaccountPositionInMarketResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.state_ != nullptr);
    _impl_.state_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QuerySubaccountPositionInMarketResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .injective.exchange.v1beta1.Position state = 1 [json_name = "state", (.gogoproto.nullable) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_state(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QuerySubaccountPositionInMarketResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.QuerySubaccountPositionInMarketResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .injective.exchange.v1beta1.Position state = 1 [json_name = "state", (.gogoproto.nullable) = true];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::state(this),
        _Internal::state(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.QuerySubaccountPositionInMarketResponse)
  return target;
}

::size_t QuerySubaccountPositionInMarketResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.QuerySubaccountPositionInMarketResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .injective.exchange.v1beta1.Position state = 1 [json_name = "state", (.gogoproto.nullable) = true];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.state_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QuerySubaccountPositionInMarketResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QuerySubaccountPositionInMarketResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QuerySubaccountPositionInMarketResponse::GetClassData() const { return &_class_data_; }


void QuerySubaccountPositionInMarketResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QuerySubaccountPositionInMarketResponse*>(&to_msg);
  auto& from = static_cast<const QuerySubaccountPositionInMarketResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.QuerySubaccountPositionInMarketResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_state()->::injective::exchange::v1beta1::Position::MergeFrom(
        from._internal_state());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QuerySubaccountPositionInMarketResponse::CopyFrom(const QuerySubaccountPositionInMarketResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.QuerySubaccountPositionInMarketResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuerySubaccountPositionInMarketResponse::IsInitialized() const {
  return true;
}

void QuerySubaccountPositionInMarketResponse::InternalSwap(QuerySubaccountPositionInMarketResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.state_, other->_impl_.state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QuerySubaccountPositionInMarketResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2fquery_2eproto[73]);
}
// ===================================================================

class EffectivePosition::_Internal {
 public:
};

EffectivePosition::EffectivePosition(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.EffectivePosition)
}
EffectivePosition::EffectivePosition(const EffectivePosition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EffectivePosition* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.quantity_) {}

    , decltype(_impl_.entry_price_) {}

    , decltype(_impl_.effective_margin_) {}

    , decltype(_impl_.is_long_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.quantity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.quantity_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_quantity().empty()) {
    _this->_impl_.quantity_.Set(from._internal_quantity(), _this->GetArenaForAllocation());
  }
  _impl_.entry_price_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.entry_price_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_entry_price().empty()) {
    _this->_impl_.entry_price_.Set(from._internal_entry_price(), _this->GetArenaForAllocation());
  }
  _impl_.effective_margin_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.effective_margin_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_effective_margin().empty()) {
    _this->_impl_.effective_margin_.Set(from._internal_effective_margin(), _this->GetArenaForAllocation());
  }
  _this->_impl_.is_long_ = from._impl_.is_long_;
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.EffectivePosition)
}

inline void EffectivePosition::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.quantity_) {}

    , decltype(_impl_.entry_price_) {}

    , decltype(_impl_.effective_margin_) {}

    , decltype(_impl_.is_long_) { false }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.quantity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.quantity_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.entry_price_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.entry_price_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.effective_margin_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.effective_margin_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

EffectivePosition::~EffectivePosition() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.EffectivePosition)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EffectivePosition::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.quantity_.Destroy();
  _impl_.entry_price_.Destroy();
  _impl_.effective_margin_.Destroy();
}

void EffectivePosition::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EffectivePosition::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.EffectivePosition)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.quantity_.ClearToEmpty();
  _impl_.entry_price_.ClearToEmpty();
  _impl_.effective_margin_.ClearToEmpty();
  _impl_.is_long_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EffectivePosition::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool is_long = 1 [json_name = "isLong"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.is_long_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string quantity = 2 [json_name = "quantity", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_quantity();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.EffectivePosition.quantity"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string entry_price = 3 [json_name = "entryPrice", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_entry_price();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.EffectivePosition.entry_price"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string effective_margin = 4 [json_name = "effectiveMargin", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_effective_margin();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.EffectivePosition.effective_margin"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* EffectivePosition::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.EffectivePosition)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_long = 1 [json_name = "isLong"];
  if (this->_internal_is_long() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_is_long(), target);
  }

  // string quantity = 2 [json_name = "quantity", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_quantity().empty()) {
    const std::string& _s = this->_internal_quantity();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.EffectivePosition.quantity");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string entry_price = 3 [json_name = "entryPrice", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_entry_price().empty()) {
    const std::string& _s = this->_internal_entry_price();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.EffectivePosition.entry_price");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string effective_margin = 4 [json_name = "effectiveMargin", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_effective_margin().empty()) {
    const std::string& _s = this->_internal_effective_margin();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.EffectivePosition.effective_margin");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.EffectivePosition)
  return target;
}

::size_t EffectivePosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.EffectivePosition)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string quantity = 2 [json_name = "quantity", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_quantity().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_quantity());
  }

  // string entry_price = 3 [json_name = "entryPrice", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_entry_price().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_entry_price());
  }

  // string effective_margin = 4 [json_name = "effectiveMargin", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_effective_margin().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_effective_margin());
  }

  // bool is_long = 1 [json_name = "isLong"];
  if (this->_internal_is_long() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EffectivePosition::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EffectivePosition::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EffectivePosition::GetClassData() const { return &_class_data_; }


void EffectivePosition::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EffectivePosition*>(&to_msg);
  auto& from = static_cast<const EffectivePosition&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.EffectivePosition)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_quantity().empty()) {
    _this->_internal_set_quantity(from._internal_quantity());
  }
  if (!from._internal_entry_price().empty()) {
    _this->_internal_set_entry_price(from._internal_entry_price());
  }
  if (!from._internal_effective_margin().empty()) {
    _this->_internal_set_effective_margin(from._internal_effective_margin());
  }
  if (from._internal_is_long() != 0) {
    _this->_internal_set_is_long(from._internal_is_long());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EffectivePosition::CopyFrom(const EffectivePosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.EffectivePosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EffectivePosition::IsInitialized() const {
  return true;
}

void EffectivePosition::InternalSwap(EffectivePosition* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.quantity_, lhs_arena,
                                       &other->_impl_.quantity_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.entry_price_, lhs_arena,
                                       &other->_impl_.entry_price_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.effective_margin_, lhs_arena,
                                       &other->_impl_.effective_margin_, rhs_arena);

  swap(_impl_.is_long_, other->_impl_.is_long_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EffectivePosition::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2fquery_2eproto[74]);
}
// ===================================================================

class QuerySubaccountEffectivePositionInMarketResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<QuerySubaccountEffectivePositionInMarketResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(QuerySubaccountEffectivePositionInMarketResponse, _impl_._has_bits_);
  static const ::injective::exchange::v1beta1::EffectivePosition& state(const QuerySubaccountEffectivePositionInMarketResponse* msg);
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::injective::exchange::v1beta1::EffectivePosition&
QuerySubaccountEffectivePositionInMarketResponse::_Internal::state(const QuerySubaccountEffectivePositionInMarketResponse* msg) {
  return *msg->_impl_.state_;
}
QuerySubaccountEffectivePositionInMarketResponse::QuerySubaccountEffectivePositionInMarketResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.QuerySubaccountEffectivePositionInMarketResponse)
}
QuerySubaccountEffectivePositionInMarketResponse::QuerySubaccountEffectivePositionInMarketResponse(const QuerySubaccountEffectivePositionInMarketResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QuerySubaccountEffectivePositionInMarketResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.state_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.state_ = new ::injective::exchange::v1beta1::EffectivePosition(*from._impl_.state_);
  }
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.QuerySubaccountEffectivePositionInMarketResponse)
}

inline void QuerySubaccountEffectivePositionInMarketResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.state_){nullptr}
  };
}

QuerySubaccountEffectivePositionInMarketResponse::~QuerySubaccountEffectivePositionInMarketResponse() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.QuerySubaccountEffectivePositionInMarketResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QuerySubaccountEffectivePositionInMarketResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.state_;
}

void QuerySubaccountEffectivePositionInMarketResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QuerySubaccountEffectivePositionInMarketResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.QuerySubaccountEffectivePositionInMarketResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.state_ != nullptr);
    _impl_.state_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QuerySubaccountEffectivePositionInMarketResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .injective.exchange.v1beta1.EffectivePosition state = 1 [json_name = "state", (.gogoproto.nullable) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_state(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QuerySubaccountEffectivePositionInMarketResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.QuerySubaccountEffectivePositionInMarketResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .injective.exchange.v1beta1.EffectivePosition state = 1 [json_name = "state", (.gogoproto.nullable) = true];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::state(this),
        _Internal::state(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.QuerySubaccountEffectivePositionInMarketResponse)
  return target;
}

::size_t QuerySubaccountEffectivePositionInMarketResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.QuerySubaccountEffectivePositionInMarketResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .injective.exchange.v1beta1.EffectivePosition state = 1 [json_name = "state", (.gogoproto.nullable) = true];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.state_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QuerySubaccountEffectivePositionInMarketResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QuerySubaccountEffectivePositionInMarketResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QuerySubaccountEffectivePositionInMarketResponse::GetClassData() const { return &_class_data_; }


void QuerySubaccountEffectivePositionInMarketResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QuerySubaccountEffectivePositionInMarketResponse*>(&to_msg);
  auto& from = static_cast<const QuerySubaccountEffectivePositionInMarketResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.QuerySubaccountEffectivePositionInMarketResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_state()->::injective::exchange::v1beta1::EffectivePosition::MergeFrom(
        from._internal_state());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QuerySubaccountEffectivePositionInMarketResponse::CopyFrom(const QuerySubaccountEffectivePositionInMarketResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.QuerySubaccountEffectivePositionInMarketResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuerySubaccountEffectivePositionInMarketResponse::IsInitialized() const {
  return true;
}

void QuerySubaccountEffectivePositionInMarketResponse::InternalSwap(QuerySubaccountEffectivePositionInMarketResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.state_, other->_impl_.state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QuerySubaccountEffectivePositionInMarketResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2fquery_2eproto[75]);
}
// ===================================================================

class QueryPerpetualMarketInfoRequest::_Internal {
 public:
};

QueryPerpetualMarketInfoRequest::QueryPerpetualMarketInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.QueryPerpetualMarketInfoRequest)
}
QueryPerpetualMarketInfoRequest::QueryPerpetualMarketInfoRequest(const QueryPerpetualMarketInfoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryPerpetualMarketInfoRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.market_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_market_id().empty()) {
    _this->_impl_.market_id_.Set(from._internal_market_id(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.QueryPerpetualMarketInfoRequest)
}

inline void QueryPerpetualMarketInfoRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.market_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

QueryPerpetualMarketInfoRequest::~QueryPerpetualMarketInfoRequest() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.QueryPerpetualMarketInfoRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryPerpetualMarketInfoRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.market_id_.Destroy();
}

void QueryPerpetualMarketInfoRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryPerpetualMarketInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.QueryPerpetualMarketInfoRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.market_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryPerpetualMarketInfoRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string market_id = 1 [json_name = "marketId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_market_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.QueryPerpetualMarketInfoRequest.market_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryPerpetualMarketInfoRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.QueryPerpetualMarketInfoRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string market_id = 1 [json_name = "marketId"];
  if (!this->_internal_market_id().empty()) {
    const std::string& _s = this->_internal_market_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.QueryPerpetualMarketInfoRequest.market_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.QueryPerpetualMarketInfoRequest)
  return target;
}

::size_t QueryPerpetualMarketInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.QueryPerpetualMarketInfoRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string market_id = 1 [json_name = "marketId"];
  if (!this->_internal_market_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_market_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryPerpetualMarketInfoRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryPerpetualMarketInfoRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryPerpetualMarketInfoRequest::GetClassData() const { return &_class_data_; }


void QueryPerpetualMarketInfoRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryPerpetualMarketInfoRequest*>(&to_msg);
  auto& from = static_cast<const QueryPerpetualMarketInfoRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.QueryPerpetualMarketInfoRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_market_id().empty()) {
    _this->_internal_set_market_id(from._internal_market_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryPerpetualMarketInfoRequest::CopyFrom(const QueryPerpetualMarketInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.QueryPerpetualMarketInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryPerpetualMarketInfoRequest::IsInitialized() const {
  return true;
}

void QueryPerpetualMarketInfoRequest::InternalSwap(QueryPerpetualMarketInfoRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.market_id_, lhs_arena,
                                       &other->_impl_.market_id_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryPerpetualMarketInfoRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2fquery_2eproto[76]);
}
// ===================================================================

class QueryPerpetualMarketInfoResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<QueryPerpetualMarketInfoResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(QueryPerpetualMarketInfoResponse, _impl_._has_bits_);
  static const ::injective::exchange::v1beta1::PerpetualMarketInfo& info(const QueryPerpetualMarketInfoResponse* msg);
  static void set_has_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::injective::exchange::v1beta1::PerpetualMarketInfo&
QueryPerpetualMarketInfoResponse::_Internal::info(const QueryPerpetualMarketInfoResponse* msg) {
  return *msg->_impl_.info_;
}
void QueryPerpetualMarketInfoResponse::clear_info() {
  if (_impl_.info_ != nullptr) _impl_.info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
QueryPerpetualMarketInfoResponse::QueryPerpetualMarketInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.QueryPerpetualMarketInfoResponse)
}
QueryPerpetualMarketInfoResponse::QueryPerpetualMarketInfoResponse(const QueryPerpetualMarketInfoResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryPerpetualMarketInfoResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.info_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.info_ = new ::injective::exchange::v1beta1::PerpetualMarketInfo(*from._impl_.info_);
  }
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.QueryPerpetualMarketInfoResponse)
}

inline void QueryPerpetualMarketInfoResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.info_){nullptr}
  };
}

QueryPerpetualMarketInfoResponse::~QueryPerpetualMarketInfoResponse() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.QueryPerpetualMarketInfoResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryPerpetualMarketInfoResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.info_;
}

void QueryPerpetualMarketInfoResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryPerpetualMarketInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.QueryPerpetualMarketInfoResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.info_ != nullptr);
    _impl_.info_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryPerpetualMarketInfoResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .injective.exchange.v1beta1.PerpetualMarketInfo info = 1 [json_name = "info", (.gogoproto.nullable) = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryPerpetualMarketInfoResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.QueryPerpetualMarketInfoResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .injective.exchange.v1beta1.PerpetualMarketInfo info = 1 [json_name = "info", (.gogoproto.nullable) = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::info(this),
        _Internal::info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.QueryPerpetualMarketInfoResponse)
  return target;
}

::size_t QueryPerpetualMarketInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.QueryPerpetualMarketInfoResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .injective.exchange.v1beta1.PerpetualMarketInfo info = 1 [json_name = "info", (.gogoproto.nullable) = false];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.info_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryPerpetualMarketInfoResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryPerpetualMarketInfoResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryPerpetualMarketInfoResponse::GetClassData() const { return &_class_data_; }


void QueryPerpetualMarketInfoResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryPerpetualMarketInfoResponse*>(&to_msg);
  auto& from = static_cast<const QueryPerpetualMarketInfoResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.QueryPerpetualMarketInfoResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_info()->::injective::exchange::v1beta1::PerpetualMarketInfo::MergeFrom(
        from._internal_info());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryPerpetualMarketInfoResponse::CopyFrom(const QueryPerpetualMarketInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.QueryPerpetualMarketInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryPerpetualMarketInfoResponse::IsInitialized() const {
  return true;
}

void QueryPerpetualMarketInfoResponse::InternalSwap(QueryPerpetualMarketInfoResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.info_, other->_impl_.info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryPerpetualMarketInfoResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2fquery_2eproto[77]);
}
// ===================================================================

class QueryExpiryFuturesMarketInfoRequest::_Internal {
 public:
};

QueryExpiryFuturesMarketInfoRequest::QueryExpiryFuturesMarketInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.QueryExpiryFuturesMarketInfoRequest)
}
QueryExpiryFuturesMarketInfoRequest::QueryExpiryFuturesMarketInfoRequest(const QueryExpiryFuturesMarketInfoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryExpiryFuturesMarketInfoRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.market_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_market_id().empty()) {
    _this->_impl_.market_id_.Set(from._internal_market_id(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.QueryExpiryFuturesMarketInfoRequest)
}

inline void QueryExpiryFuturesMarketInfoRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.market_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

QueryExpiryFuturesMarketInfoRequest::~QueryExpiryFuturesMarketInfoRequest() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.QueryExpiryFuturesMarketInfoRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryExpiryFuturesMarketInfoRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.market_id_.Destroy();
}

void QueryExpiryFuturesMarketInfoRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryExpiryFuturesMarketInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.QueryExpiryFuturesMarketInfoRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.market_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryExpiryFuturesMarketInfoRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string market_id = 1 [json_name = "marketId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_market_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.QueryExpiryFuturesMarketInfoRequest.market_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryExpiryFuturesMarketInfoRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.QueryExpiryFuturesMarketInfoRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string market_id = 1 [json_name = "marketId"];
  if (!this->_internal_market_id().empty()) {
    const std::string& _s = this->_internal_market_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.QueryExpiryFuturesMarketInfoRequest.market_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.QueryExpiryFuturesMarketInfoRequest)
  return target;
}

::size_t QueryExpiryFuturesMarketInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.QueryExpiryFuturesMarketInfoRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string market_id = 1 [json_name = "marketId"];
  if (!this->_internal_market_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_market_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryExpiryFuturesMarketInfoRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryExpiryFuturesMarketInfoRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryExpiryFuturesMarketInfoRequest::GetClassData() const { return &_class_data_; }


void QueryExpiryFuturesMarketInfoRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryExpiryFuturesMarketInfoRequest*>(&to_msg);
  auto& from = static_cast<const QueryExpiryFuturesMarketInfoRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.QueryExpiryFuturesMarketInfoRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_market_id().empty()) {
    _this->_internal_set_market_id(from._internal_market_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryExpiryFuturesMarketInfoRequest::CopyFrom(const QueryExpiryFuturesMarketInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.QueryExpiryFuturesMarketInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryExpiryFuturesMarketInfoRequest::IsInitialized() const {
  return true;
}

void QueryExpiryFuturesMarketInfoRequest::InternalSwap(QueryExpiryFuturesMarketInfoRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.market_id_, lhs_arena,
                                       &other->_impl_.market_id_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryExpiryFuturesMarketInfoRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2fquery_2eproto[78]);
}
// ===================================================================

class QueryExpiryFuturesMarketInfoResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<QueryExpiryFuturesMarketInfoResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(QueryExpiryFuturesMarketInfoResponse, _impl_._has_bits_);
  static const ::injective::exchange::v1beta1::ExpiryFuturesMarketInfo& info(const QueryExpiryFuturesMarketInfoResponse* msg);
  static void set_has_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::injective::exchange::v1beta1::ExpiryFuturesMarketInfo&
QueryExpiryFuturesMarketInfoResponse::_Internal::info(const QueryExpiryFuturesMarketInfoResponse* msg) {
  return *msg->_impl_.info_;
}
void QueryExpiryFuturesMarketInfoResponse::clear_info() {
  if (_impl_.info_ != nullptr) _impl_.info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
QueryExpiryFuturesMarketInfoResponse::QueryExpiryFuturesMarketInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.QueryExpiryFuturesMarketInfoResponse)
}
QueryExpiryFuturesMarketInfoResponse::QueryExpiryFuturesMarketInfoResponse(const QueryExpiryFuturesMarketInfoResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryExpiryFuturesMarketInfoResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.info_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.info_ = new ::injective::exchange::v1beta1::ExpiryFuturesMarketInfo(*from._impl_.info_);
  }
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.QueryExpiryFuturesMarketInfoResponse)
}

inline void QueryExpiryFuturesMarketInfoResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.info_){nullptr}
  };
}

QueryExpiryFuturesMarketInfoResponse::~QueryExpiryFuturesMarketInfoResponse() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.QueryExpiryFuturesMarketInfoResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryExpiryFuturesMarketInfoResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.info_;
}

void QueryExpiryFuturesMarketInfoResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryExpiryFuturesMarketInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.QueryExpiryFuturesMarketInfoResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.info_ != nullptr);
    _impl_.info_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryExpiryFuturesMarketInfoResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .injective.exchange.v1beta1.ExpiryFuturesMarketInfo info = 1 [json_name = "info", (.gogoproto.nullable) = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryExpiryFuturesMarketInfoResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.QueryExpiryFuturesMarketInfoResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .injective.exchange.v1beta1.ExpiryFuturesMarketInfo info = 1 [json_name = "info", (.gogoproto.nullable) = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::info(this),
        _Internal::info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.QueryExpiryFuturesMarketInfoResponse)
  return target;
}

::size_t QueryExpiryFuturesMarketInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.QueryExpiryFuturesMarketInfoResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .injective.exchange.v1beta1.ExpiryFuturesMarketInfo info = 1 [json_name = "info", (.gogoproto.nullable) = false];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.info_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryExpiryFuturesMarketInfoResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryExpiryFuturesMarketInfoResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryExpiryFuturesMarketInfoResponse::GetClassData() const { return &_class_data_; }


void QueryExpiryFuturesMarketInfoResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryExpiryFuturesMarketInfoResponse*>(&to_msg);
  auto& from = static_cast<const QueryExpiryFuturesMarketInfoResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.QueryExpiryFuturesMarketInfoResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_info()->::injective::exchange::v1beta1::ExpiryFuturesMarketInfo::MergeFrom(
        from._internal_info());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryExpiryFuturesMarketInfoResponse::CopyFrom(const QueryExpiryFuturesMarketInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.QueryExpiryFuturesMarketInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryExpiryFuturesMarketInfoResponse::IsInitialized() const {
  return true;
}

void QueryExpiryFuturesMarketInfoResponse::InternalSwap(QueryExpiryFuturesMarketInfoResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.info_, other->_impl_.info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryExpiryFuturesMarketInfoResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2fquery_2eproto[79]);
}
// ===================================================================

class QueryPerpetualMarketFundingRequest::_Internal {
 public:
};

QueryPerpetualMarketFundingRequest::QueryPerpetualMarketFundingRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.QueryPerpetualMarketFundingRequest)
}
QueryPerpetualMarketFundingRequest::QueryPerpetualMarketFundingRequest(const QueryPerpetualMarketFundingRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryPerpetualMarketFundingRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.market_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_market_id().empty()) {
    _this->_impl_.market_id_.Set(from._internal_market_id(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.QueryPerpetualMarketFundingRequest)
}

inline void QueryPerpetualMarketFundingRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.market_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

QueryPerpetualMarketFundingRequest::~QueryPerpetualMarketFundingRequest() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.QueryPerpetualMarketFundingRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryPerpetualMarketFundingRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.market_id_.Destroy();
}

void QueryPerpetualMarketFundingRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryPerpetualMarketFundingRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.QueryPerpetualMarketFundingRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.market_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryPerpetualMarketFundingRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string market_id = 1 [json_name = "marketId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_market_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.QueryPerpetualMarketFundingRequest.market_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryPerpetualMarketFundingRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.QueryPerpetualMarketFundingRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string market_id = 1 [json_name = "marketId"];
  if (!this->_internal_market_id().empty()) {
    const std::string& _s = this->_internal_market_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.QueryPerpetualMarketFundingRequest.market_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.QueryPerpetualMarketFundingRequest)
  return target;
}

::size_t QueryPerpetualMarketFundingRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.QueryPerpetualMarketFundingRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string market_id = 1 [json_name = "marketId"];
  if (!this->_internal_market_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_market_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryPerpetualMarketFundingRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryPerpetualMarketFundingRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryPerpetualMarketFundingRequest::GetClassData() const { return &_class_data_; }


void QueryPerpetualMarketFundingRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryPerpetualMarketFundingRequest*>(&to_msg);
  auto& from = static_cast<const QueryPerpetualMarketFundingRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.QueryPerpetualMarketFundingRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_market_id().empty()) {
    _this->_internal_set_market_id(from._internal_market_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryPerpetualMarketFundingRequest::CopyFrom(const QueryPerpetualMarketFundingRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.QueryPerpetualMarketFundingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryPerpetualMarketFundingRequest::IsInitialized() const {
  return true;
}

void QueryPerpetualMarketFundingRequest::InternalSwap(QueryPerpetualMarketFundingRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.market_id_, lhs_arena,
                                       &other->_impl_.market_id_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryPerpetualMarketFundingRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2fquery_2eproto[80]);
}
// ===================================================================

class QueryPerpetualMarketFundingResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<QueryPerpetualMarketFundingResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(QueryPerpetualMarketFundingResponse, _impl_._has_bits_);
  static const ::injective::exchange::v1beta1::PerpetualMarketFunding& state(const QueryPerpetualMarketFundingResponse* msg);
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::injective::exchange::v1beta1::PerpetualMarketFunding&
QueryPerpetualMarketFundingResponse::_Internal::state(const QueryPerpetualMarketFundingResponse* msg) {
  return *msg->_impl_.state_;
}
void QueryPerpetualMarketFundingResponse::clear_state() {
  if (_impl_.state_ != nullptr) _impl_.state_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
QueryPerpetualMarketFundingResponse::QueryPerpetualMarketFundingResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.QueryPerpetualMarketFundingResponse)
}
QueryPerpetualMarketFundingResponse::QueryPerpetualMarketFundingResponse(const QueryPerpetualMarketFundingResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryPerpetualMarketFundingResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.state_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.state_ = new ::injective::exchange::v1beta1::PerpetualMarketFunding(*from._impl_.state_);
  }
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.QueryPerpetualMarketFundingResponse)
}

inline void QueryPerpetualMarketFundingResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.state_){nullptr}
  };
}

QueryPerpetualMarketFundingResponse::~QueryPerpetualMarketFundingResponse() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.QueryPerpetualMarketFundingResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryPerpetualMarketFundingResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.state_;
}

void QueryPerpetualMarketFundingResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryPerpetualMarketFundingResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.QueryPerpetualMarketFundingResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.state_ != nullptr);
    _impl_.state_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryPerpetualMarketFundingResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .injective.exchange.v1beta1.PerpetualMarketFunding state = 1 [json_name = "state", (.gogoproto.nullable) = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_state(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryPerpetualMarketFundingResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.QueryPerpetualMarketFundingResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .injective.exchange.v1beta1.PerpetualMarketFunding state = 1 [json_name = "state", (.gogoproto.nullable) = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::state(this),
        _Internal::state(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.QueryPerpetualMarketFundingResponse)
  return target;
}

::size_t QueryPerpetualMarketFundingResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.QueryPerpetualMarketFundingResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .injective.exchange.v1beta1.PerpetualMarketFunding state = 1 [json_name = "state", (.gogoproto.nullable) = false];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.state_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryPerpetualMarketFundingResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryPerpetualMarketFundingResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryPerpetualMarketFundingResponse::GetClassData() const { return &_class_data_; }


void QueryPerpetualMarketFundingResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryPerpetualMarketFundingResponse*>(&to_msg);
  auto& from = static_cast<const QueryPerpetualMarketFundingResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.QueryPerpetualMarketFundingResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_state()->::injective::exchange::v1beta1::PerpetualMarketFunding::MergeFrom(
        from._internal_state());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryPerpetualMarketFundingResponse::CopyFrom(const QueryPerpetualMarketFundingResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.QueryPerpetualMarketFundingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryPerpetualMarketFundingResponse::IsInitialized() const {
  return true;
}

void QueryPerpetualMarketFundingResponse::InternalSwap(QueryPerpetualMarketFundingResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.state_, other->_impl_.state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryPerpetualMarketFundingResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2fquery_2eproto[81]);
}
// ===================================================================

class QuerySubaccountOrderMetadataResponse::_Internal {
 public:
};

QuerySubaccountOrderMetadataResponse::QuerySubaccountOrderMetadataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.QuerySubaccountOrderMetadataResponse)
}
QuerySubaccountOrderMetadataResponse::QuerySubaccountOrderMetadataResponse(const QuerySubaccountOrderMetadataResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QuerySubaccountOrderMetadataResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.metadata_){from._impl_.metadata_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.QuerySubaccountOrderMetadataResponse)
}

inline void QuerySubaccountOrderMetadataResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.metadata_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

QuerySubaccountOrderMetadataResponse::~QuerySubaccountOrderMetadataResponse() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.QuerySubaccountOrderMetadataResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QuerySubaccountOrderMetadataResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_metadata()->~RepeatedPtrField();
}

void QuerySubaccountOrderMetadataResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QuerySubaccountOrderMetadataResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.QuerySubaccountOrderMetadataResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_metadata()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QuerySubaccountOrderMetadataResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .injective.exchange.v1beta1.SubaccountOrderbookMetadataWithMarket metadata = 1 [json_name = "metadata", (.gogoproto.nullable) = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_metadata(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QuerySubaccountOrderMetadataResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.QuerySubaccountOrderMetadataResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .injective.exchange.v1beta1.SubaccountOrderbookMetadataWithMarket metadata = 1 [json_name = "metadata", (.gogoproto.nullable) = false];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_metadata_size()); i < n; i++) {
    const auto& repfield = this->_internal_metadata(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.QuerySubaccountOrderMetadataResponse)
  return target;
}

::size_t QuerySubaccountOrderMetadataResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.QuerySubaccountOrderMetadataResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .injective.exchange.v1beta1.SubaccountOrderbookMetadataWithMarket metadata = 1 [json_name = "metadata", (.gogoproto.nullable) = false];
  total_size += 1UL * this->_internal_metadata_size();
  for (const auto& msg : this->_internal_metadata()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QuerySubaccountOrderMetadataResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QuerySubaccountOrderMetadataResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QuerySubaccountOrderMetadataResponse::GetClassData() const { return &_class_data_; }


void QuerySubaccountOrderMetadataResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QuerySubaccountOrderMetadataResponse*>(&to_msg);
  auto& from = static_cast<const QuerySubaccountOrderMetadataResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.QuerySubaccountOrderMetadataResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_metadata()->MergeFrom(from._internal_metadata());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QuerySubaccountOrderMetadataResponse::CopyFrom(const QuerySubaccountOrderMetadataResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.QuerySubaccountOrderMetadataResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuerySubaccountOrderMetadataResponse::IsInitialized() const {
  return true;
}

void QuerySubaccountOrderMetadataResponse::InternalSwap(QuerySubaccountOrderMetadataResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_metadata()->InternalSwap(other->_internal_mutable_metadata());
}

::PROTOBUF_NAMESPACE_ID::Metadata QuerySubaccountOrderMetadataResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2fquery_2eproto[82]);
}
// ===================================================================

class QuerySubaccountTradeNonceResponse::_Internal {
 public:
};

QuerySubaccountTradeNonceResponse::QuerySubaccountTradeNonceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.QuerySubaccountTradeNonceResponse)
}
QuerySubaccountTradeNonceResponse::QuerySubaccountTradeNonceResponse(const QuerySubaccountTradeNonceResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.QuerySubaccountTradeNonceResponse)
}

inline void QuerySubaccountTradeNonceResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.nonce_) { 0u }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

QuerySubaccountTradeNonceResponse::~QuerySubaccountTradeNonceResponse() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.QuerySubaccountTradeNonceResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QuerySubaccountTradeNonceResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void QuerySubaccountTradeNonceResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QuerySubaccountTradeNonceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.QuerySubaccountTradeNonceResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.nonce_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QuerySubaccountTradeNonceResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 nonce = 1 [json_name = "nonce"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.nonce_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QuerySubaccountTradeNonceResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.QuerySubaccountTradeNonceResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 nonce = 1 [json_name = "nonce"];
  if (this->_internal_nonce() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_nonce(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.QuerySubaccountTradeNonceResponse)
  return target;
}

::size_t QuerySubaccountTradeNonceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.QuerySubaccountTradeNonceResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 nonce = 1 [json_name = "nonce"];
  if (this->_internal_nonce() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_nonce());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QuerySubaccountTradeNonceResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QuerySubaccountTradeNonceResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QuerySubaccountTradeNonceResponse::GetClassData() const { return &_class_data_; }


void QuerySubaccountTradeNonceResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QuerySubaccountTradeNonceResponse*>(&to_msg);
  auto& from = static_cast<const QuerySubaccountTradeNonceResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.QuerySubaccountTradeNonceResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_nonce() != 0) {
    _this->_internal_set_nonce(from._internal_nonce());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QuerySubaccountTradeNonceResponse::CopyFrom(const QuerySubaccountTradeNonceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.QuerySubaccountTradeNonceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuerySubaccountTradeNonceResponse::IsInitialized() const {
  return true;
}

void QuerySubaccountTradeNonceResponse::InternalSwap(QuerySubaccountTradeNonceResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);

  swap(_impl_.nonce_, other->_impl_.nonce_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QuerySubaccountTradeNonceResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2fquery_2eproto[83]);
}
// ===================================================================

class QueryModuleStateRequest::_Internal {
 public:
};

QueryModuleStateRequest::QueryModuleStateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.QueryModuleStateRequest)
}
QueryModuleStateRequest::QueryModuleStateRequest(const QueryModuleStateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  QueryModuleStateRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.QueryModuleStateRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryModuleStateRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryModuleStateRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata QueryModuleStateRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2fquery_2eproto[84]);
}
// ===================================================================

class QueryModuleStateResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<QueryModuleStateResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(QueryModuleStateResponse, _impl_._has_bits_);
  static const ::injective::exchange::v1beta1::GenesisState& state(const QueryModuleStateResponse* msg);
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::injective::exchange::v1beta1::GenesisState&
QueryModuleStateResponse::_Internal::state(const QueryModuleStateResponse* msg) {
  return *msg->_impl_.state_;
}
void QueryModuleStateResponse::clear_state() {
  if (_impl_.state_ != nullptr) _impl_.state_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
QueryModuleStateResponse::QueryModuleStateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.QueryModuleStateResponse)
}
QueryModuleStateResponse::QueryModuleStateResponse(const QueryModuleStateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryModuleStateResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.state_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.state_ = new ::injective::exchange::v1beta1::GenesisState(*from._impl_.state_);
  }
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.QueryModuleStateResponse)
}

inline void QueryModuleStateResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.state_){nullptr}
  };
}

QueryModuleStateResponse::~QueryModuleStateResponse() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.QueryModuleStateResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryModuleStateResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.state_;
}

void QueryModuleStateResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryModuleStateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.QueryModuleStateResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.state_ != nullptr);
    _impl_.state_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryModuleStateResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .injective.exchange.v1beta1.GenesisState state = 1 [json_name = "state"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_state(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryModuleStateResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.QueryModuleStateResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .injective.exchange.v1beta1.GenesisState state = 1 [json_name = "state"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::state(this),
        _Internal::state(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.QueryModuleStateResponse)
  return target;
}

::size_t QueryModuleStateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.QueryModuleStateResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .injective.exchange.v1beta1.GenesisState state = 1 [json_name = "state"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.state_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryModuleStateResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryModuleStateResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryModuleStateResponse::GetClassData() const { return &_class_data_; }


void QueryModuleStateResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryModuleStateResponse*>(&to_msg);
  auto& from = static_cast<const QueryModuleStateResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.QueryModuleStateResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_state()->::injective::exchange::v1beta1::GenesisState::MergeFrom(
        from._internal_state());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryModuleStateResponse::CopyFrom(const QueryModuleStateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.QueryModuleStateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryModuleStateResponse::IsInitialized() const {
  return true;
}

void QueryModuleStateResponse::InternalSwap(QueryModuleStateResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.state_, other->_impl_.state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryModuleStateResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2fquery_2eproto[85]);
}
// ===================================================================

class QueryPositionsRequest::_Internal {
 public:
};

QueryPositionsRequest::QueryPositionsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.QueryPositionsRequest)
}
QueryPositionsRequest::QueryPositionsRequest(const QueryPositionsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  QueryPositionsRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.QueryPositionsRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryPositionsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryPositionsRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata QueryPositionsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2fquery_2eproto[86]);
}
// ===================================================================

class QueryPositionsResponse::_Internal {
 public:
};

void QueryPositionsResponse::clear_state() {
  _internal_mutable_state()->Clear();
}
QueryPositionsResponse::QueryPositionsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.QueryPositionsResponse)
}
QueryPositionsResponse::QueryPositionsResponse(const QueryPositionsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryPositionsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.state_){from._impl_.state_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.QueryPositionsResponse)
}

inline void QueryPositionsResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.state_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

QueryPositionsResponse::~QueryPositionsResponse() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.QueryPositionsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryPositionsResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_state()->~RepeatedPtrField();
}

void QueryPositionsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryPositionsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.QueryPositionsResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_state()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryPositionsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .injective.exchange.v1beta1.DerivativePosition state = 1 [json_name = "state", (.gogoproto.nullable) = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_state(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryPositionsResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.QueryPositionsResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .injective.exchange.v1beta1.DerivativePosition state = 1 [json_name = "state", (.gogoproto.nullable) = false];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_state_size()); i < n; i++) {
    const auto& repfield = this->_internal_state(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.QueryPositionsResponse)
  return target;
}

::size_t QueryPositionsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.QueryPositionsResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .injective.exchange.v1beta1.DerivativePosition state = 1 [json_name = "state", (.gogoproto.nullable) = false];
  total_size += 1UL * this->_internal_state_size();
  for (const auto& msg : this->_internal_state()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryPositionsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryPositionsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryPositionsResponse::GetClassData() const { return &_class_data_; }


void QueryPositionsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryPositionsResponse*>(&to_msg);
  auto& from = static_cast<const QueryPositionsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.QueryPositionsResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_state()->MergeFrom(from._internal_state());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryPositionsResponse::CopyFrom(const QueryPositionsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.QueryPositionsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryPositionsResponse::IsInitialized() const {
  return true;
}

void QueryPositionsResponse::InternalSwap(QueryPositionsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_state()->InternalSwap(other->_internal_mutable_state());
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryPositionsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2fquery_2eproto[87]);
}
// ===================================================================

class QueryTradeRewardPointsRequest::_Internal {
 public:
};

QueryTradeRewardPointsRequest::QueryTradeRewardPointsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.QueryTradeRewardPointsRequest)
}
QueryTradeRewardPointsRequest::QueryTradeRewardPointsRequest(const QueryTradeRewardPointsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryTradeRewardPointsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.accounts_){from._impl_.accounts_}
    , decltype(_impl_.pending_pool_timestamp_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.pending_pool_timestamp_ = from._impl_.pending_pool_timestamp_;
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.QueryTradeRewardPointsRequest)
}

inline void QueryTradeRewardPointsRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.accounts_){arena}
    , decltype(_impl_.pending_pool_timestamp_) { ::int64_t{0} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

QueryTradeRewardPointsRequest::~QueryTradeRewardPointsRequest() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.QueryTradeRewardPointsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryTradeRewardPointsRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_accounts()->~RepeatedPtrField();
}

void QueryTradeRewardPointsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryTradeRewardPointsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.QueryTradeRewardPointsRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_accounts()->Clear();
  _impl_.pending_pool_timestamp_ = ::int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryTradeRewardPointsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string accounts = 1 [json_name = "accounts"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_accounts();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.QueryTradeRewardPointsRequest.accounts"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 pending_pool_timestamp = 2 [json_name = "pendingPoolTimestamp"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.pending_pool_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryTradeRewardPointsRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.QueryTradeRewardPointsRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string accounts = 1 [json_name = "accounts"];
  for (int i = 0, n = this->_internal_accounts_size(); i < n; ++i) {
    const auto& s = this->_internal_accounts(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.QueryTradeRewardPointsRequest.accounts");
    target = stream->WriteString(1, s, target);
  }

  // int64 pending_pool_timestamp = 2 [json_name = "pendingPoolTimestamp"];
  if (this->_internal_pending_pool_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        2, this->_internal_pending_pool_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.QueryTradeRewardPointsRequest)
  return target;
}

::size_t QueryTradeRewardPointsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.QueryTradeRewardPointsRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string accounts = 1 [json_name = "accounts"];
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_accounts().size());
  for (int i = 0, n = _internal_accounts().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_accounts().Get(i));
  }

  // int64 pending_pool_timestamp = 2 [json_name = "pendingPoolTimestamp"];
  if (this->_internal_pending_pool_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_pending_pool_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryTradeRewardPointsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryTradeRewardPointsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryTradeRewardPointsRequest::GetClassData() const { return &_class_data_; }


void QueryTradeRewardPointsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryTradeRewardPointsRequest*>(&to_msg);
  auto& from = static_cast<const QueryTradeRewardPointsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.QueryTradeRewardPointsRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_accounts()->MergeFrom(from._internal_accounts());
  if (from._internal_pending_pool_timestamp() != 0) {
    _this->_internal_set_pending_pool_timestamp(from._internal_pending_pool_timestamp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryTradeRewardPointsRequest::CopyFrom(const QueryTradeRewardPointsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.QueryTradeRewardPointsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryTradeRewardPointsRequest::IsInitialized() const {
  return true;
}

void QueryTradeRewardPointsRequest::InternalSwap(QueryTradeRewardPointsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_accounts()->InternalSwap(
      other->_internal_mutable_accounts());

  swap(_impl_.pending_pool_timestamp_, other->_impl_.pending_pool_timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryTradeRewardPointsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2fquery_2eproto[88]);
}
// ===================================================================

class QueryTradeRewardPointsResponse::_Internal {
 public:
};

QueryTradeRewardPointsResponse::QueryTradeRewardPointsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.QueryTradeRewardPointsResponse)
}
QueryTradeRewardPointsResponse::QueryTradeRewardPointsResponse(const QueryTradeRewardPointsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryTradeRewardPointsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.account_trade_reward_points_){from._impl_.account_trade_reward_points_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.QueryTradeRewardPointsResponse)
}

inline void QueryTradeRewardPointsResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.account_trade_reward_points_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

QueryTradeRewardPointsResponse::~QueryTradeRewardPointsResponse() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.QueryTradeRewardPointsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryTradeRewardPointsResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_account_trade_reward_points()->~RepeatedPtrField();
}

void QueryTradeRewardPointsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryTradeRewardPointsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.QueryTradeRewardPointsResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_account_trade_reward_points()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryTradeRewardPointsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string account_trade_reward_points = 1 [json_name = "accountTradeRewardPoints", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_account_trade_reward_points();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.QueryTradeRewardPointsResponse.account_trade_reward_points"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryTradeRewardPointsResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.QueryTradeRewardPointsResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string account_trade_reward_points = 1 [json_name = "accountTradeRewardPoints", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  for (int i = 0, n = this->_internal_account_trade_reward_points_size(); i < n; ++i) {
    const auto& s = this->_internal_account_trade_reward_points(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.QueryTradeRewardPointsResponse.account_trade_reward_points");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.QueryTradeRewardPointsResponse)
  return target;
}

::size_t QueryTradeRewardPointsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.QueryTradeRewardPointsResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string account_trade_reward_points = 1 [json_name = "accountTradeRewardPoints", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_account_trade_reward_points().size());
  for (int i = 0, n = _internal_account_trade_reward_points().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_account_trade_reward_points().Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryTradeRewardPointsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryTradeRewardPointsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryTradeRewardPointsResponse::GetClassData() const { return &_class_data_; }


void QueryTradeRewardPointsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryTradeRewardPointsResponse*>(&to_msg);
  auto& from = static_cast<const QueryTradeRewardPointsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.QueryTradeRewardPointsResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_account_trade_reward_points()->MergeFrom(from._internal_account_trade_reward_points());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryTradeRewardPointsResponse::CopyFrom(const QueryTradeRewardPointsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.QueryTradeRewardPointsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryTradeRewardPointsResponse::IsInitialized() const {
  return true;
}

void QueryTradeRewardPointsResponse::InternalSwap(QueryTradeRewardPointsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_account_trade_reward_points()->InternalSwap(
      other->_internal_mutable_account_trade_reward_points());
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryTradeRewardPointsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2fquery_2eproto[89]);
}
// ===================================================================

class QueryTradeRewardCampaignRequest::_Internal {
 public:
};

QueryTradeRewardCampaignRequest::QueryTradeRewardCampaignRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.QueryTradeRewardCampaignRequest)
}
QueryTradeRewardCampaignRequest::QueryTradeRewardCampaignRequest(const QueryTradeRewardCampaignRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  QueryTradeRewardCampaignRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.QueryTradeRewardCampaignRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryTradeRewardCampaignRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryTradeRewardCampaignRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata QueryTradeRewardCampaignRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2fquery_2eproto[90]);
}
// ===================================================================

class QueryTradeRewardCampaignResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<QueryTradeRewardCampaignResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(QueryTradeRewardCampaignResponse, _impl_._has_bits_);
  static const ::injective::exchange::v1beta1::TradingRewardCampaignInfo& trading_reward_campaign_info(const QueryTradeRewardCampaignResponse* msg);
  static void set_has_trading_reward_campaign_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::injective::exchange::v1beta1::TradingRewardCampaignInfo&
QueryTradeRewardCampaignResponse::_Internal::trading_reward_campaign_info(const QueryTradeRewardCampaignResponse* msg) {
  return *msg->_impl_.trading_reward_campaign_info_;
}
void QueryTradeRewardCampaignResponse::clear_trading_reward_campaign_info() {
  if (_impl_.trading_reward_campaign_info_ != nullptr) _impl_.trading_reward_campaign_info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void QueryTradeRewardCampaignResponse::clear_trading_reward_pool_campaign_schedule() {
  _internal_mutable_trading_reward_pool_campaign_schedule()->Clear();
}
void QueryTradeRewardCampaignResponse::clear_pending_trading_reward_pool_campaign_schedule() {
  _internal_mutable_pending_trading_reward_pool_campaign_schedule()->Clear();
}
QueryTradeRewardCampaignResponse::QueryTradeRewardCampaignResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.QueryTradeRewardCampaignResponse)
}
QueryTradeRewardCampaignResponse::QueryTradeRewardCampaignResponse(const QueryTradeRewardCampaignResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryTradeRewardCampaignResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.trading_reward_pool_campaign_schedule_){from._impl_.trading_reward_pool_campaign_schedule_}
    , decltype(_impl_.pending_trading_reward_pool_campaign_schedule_){from._impl_.pending_trading_reward_pool_campaign_schedule_}
    , decltype(_impl_.pending_total_trade_reward_points_){from._impl_.pending_total_trade_reward_points_}
    , decltype(_impl_.total_trade_reward_points_) {}

    , decltype(_impl_.trading_reward_campaign_info_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.total_trade_reward_points_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.total_trade_reward_points_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_total_trade_reward_points().empty()) {
    _this->_impl_.total_trade_reward_points_.Set(from._internal_total_trade_reward_points(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.trading_reward_campaign_info_ = new ::injective::exchange::v1beta1::TradingRewardCampaignInfo(*from._impl_.trading_reward_campaign_info_);
  }
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.QueryTradeRewardCampaignResponse)
}

inline void QueryTradeRewardCampaignResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.trading_reward_pool_campaign_schedule_){arena}
    , decltype(_impl_.pending_trading_reward_pool_campaign_schedule_){arena}
    , decltype(_impl_.pending_total_trade_reward_points_){arena}
    , decltype(_impl_.total_trade_reward_points_) {}

    , decltype(_impl_.trading_reward_campaign_info_){nullptr}
  };
  _impl_.total_trade_reward_points_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.total_trade_reward_points_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

QueryTradeRewardCampaignResponse::~QueryTradeRewardCampaignResponse() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.QueryTradeRewardCampaignResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryTradeRewardCampaignResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_trading_reward_pool_campaign_schedule()->~RepeatedPtrField();
  _internal_mutable_pending_trading_reward_pool_campaign_schedule()->~RepeatedPtrField();
  _internal_mutable_pending_total_trade_reward_points()->~RepeatedPtrField();
  _impl_.total_trade_reward_points_.Destroy();
  if (this != internal_default_instance()) delete _impl_.trading_reward_campaign_info_;
}

void QueryTradeRewardCampaignResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryTradeRewardCampaignResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.QueryTradeRewardCampaignResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_trading_reward_pool_campaign_schedule()->Clear();
  _internal_mutable_pending_trading_reward_pool_campaign_schedule()->Clear();
  _internal_mutable_pending_total_trade_reward_points()->Clear();
  _impl_.total_trade_reward_points_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.trading_reward_campaign_info_ != nullptr);
    _impl_.trading_reward_campaign_info_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryTradeRewardCampaignResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .injective.exchange.v1beta1.TradingRewardCampaignInfo trading_reward_campaign_info = 1 [json_name = "tradingRewardCampaignInfo"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_trading_reward_campaign_info(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .injective.exchange.v1beta1.CampaignRewardPool trading_reward_pool_campaign_schedule = 2 [json_name = "tradingRewardPoolCampaignSchedule"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_trading_reward_pool_campaign_schedule(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // string total_trade_reward_points = 3 [json_name = "totalTradeRewardPoints", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_total_trade_reward_points();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.QueryTradeRewardCampaignResponse.total_trade_reward_points"));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .injective.exchange.v1beta1.CampaignRewardPool pending_trading_reward_pool_campaign_schedule = 4 [json_name = "pendingTradingRewardPoolCampaignSchedule"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pending_trading_reward_pool_campaign_schedule(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string pending_total_trade_reward_points = 5 [json_name = "pendingTotalTradeRewardPoints", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_pending_total_trade_reward_points();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.QueryTradeRewardCampaignResponse.pending_total_trade_reward_points"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryTradeRewardCampaignResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.QueryTradeRewardCampaignResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .injective.exchange.v1beta1.TradingRewardCampaignInfo trading_reward_campaign_info = 1 [json_name = "tradingRewardCampaignInfo"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::trading_reward_campaign_info(this),
        _Internal::trading_reward_campaign_info(this).GetCachedSize(), target, stream);
  }

  // repeated .injective.exchange.v1beta1.CampaignRewardPool trading_reward_pool_campaign_schedule = 2 [json_name = "tradingRewardPoolCampaignSchedule"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_trading_reward_pool_campaign_schedule_size()); i < n; i++) {
    const auto& repfield = this->_internal_trading_reward_pool_campaign_schedule(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string total_trade_reward_points = 3 [json_name = "totalTradeRewardPoints", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_total_trade_reward_points().empty()) {
    const std::string& _s = this->_internal_total_trade_reward_points();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.QueryTradeRewardCampaignResponse.total_trade_reward_points");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // repeated .injective.exchange.v1beta1.CampaignRewardPool pending_trading_reward_pool_campaign_schedule = 4 [json_name = "pendingTradingRewardPoolCampaignSchedule"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_pending_trading_reward_pool_campaign_schedule_size()); i < n; i++) {
    const auto& repfield = this->_internal_pending_trading_reward_pool_campaign_schedule(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated string pending_total_trade_reward_points = 5 [json_name = "pendingTotalTradeRewardPoints", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  for (int i = 0, n = this->_internal_pending_total_trade_reward_points_size(); i < n; ++i) {
    const auto& s = this->_internal_pending_total_trade_reward_points(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.QueryTradeRewardCampaignResponse.pending_total_trade_reward_points");
    target = stream->WriteString(5, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.QueryTradeRewardCampaignResponse)
  return target;
}

::size_t QueryTradeRewardCampaignResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.QueryTradeRewardCampaignResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .injective.exchange.v1beta1.CampaignRewardPool trading_reward_pool_campaign_schedule = 2 [json_name = "tradingRewardPoolCampaignSchedule"];
  total_size += 1UL * this->_internal_trading_reward_pool_campaign_schedule_size();
  for (const auto& msg : this->_internal_trading_reward_pool_campaign_schedule()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .injective.exchange.v1beta1.CampaignRewardPool pending_trading_reward_pool_campaign_schedule = 4 [json_name = "pendingTradingRewardPoolCampaignSchedule"];
  total_size += 1UL * this->_internal_pending_trading_reward_pool_campaign_schedule_size();
  for (const auto& msg : this->_internal_pending_trading_reward_pool_campaign_schedule()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string pending_total_trade_reward_points = 5 [json_name = "pendingTotalTradeRewardPoints", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_pending_total_trade_reward_points().size());
  for (int i = 0, n = _internal_pending_total_trade_reward_points().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_pending_total_trade_reward_points().Get(i));
  }

  // string total_trade_reward_points = 3 [json_name = "totalTradeRewardPoints", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_total_trade_reward_points().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_total_trade_reward_points());
  }

  // .injective.exchange.v1beta1.TradingRewardCampaignInfo trading_reward_campaign_info = 1 [json_name = "tradingRewardCampaignInfo"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.trading_reward_campaign_info_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryTradeRewardCampaignResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryTradeRewardCampaignResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryTradeRewardCampaignResponse::GetClassData() const { return &_class_data_; }


void QueryTradeRewardCampaignResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryTradeRewardCampaignResponse*>(&to_msg);
  auto& from = static_cast<const QueryTradeRewardCampaignResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.QueryTradeRewardCampaignResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_trading_reward_pool_campaign_schedule()->MergeFrom(from._internal_trading_reward_pool_campaign_schedule());
  _this->_internal_mutable_pending_trading_reward_pool_campaign_schedule()->MergeFrom(from._internal_pending_trading_reward_pool_campaign_schedule());
  _this->_internal_mutable_pending_total_trade_reward_points()->MergeFrom(from._internal_pending_total_trade_reward_points());
  if (!from._internal_total_trade_reward_points().empty()) {
    _this->_internal_set_total_trade_reward_points(from._internal_total_trade_reward_points());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_trading_reward_campaign_info()->::injective::exchange::v1beta1::TradingRewardCampaignInfo::MergeFrom(
        from._internal_trading_reward_campaign_info());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryTradeRewardCampaignResponse::CopyFrom(const QueryTradeRewardCampaignResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.QueryTradeRewardCampaignResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryTradeRewardCampaignResponse::IsInitialized() const {
  return true;
}

void QueryTradeRewardCampaignResponse::InternalSwap(QueryTradeRewardCampaignResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_trading_reward_pool_campaign_schedule()->InternalSwap(other->_internal_mutable_trading_reward_pool_campaign_schedule());
  _internal_mutable_pending_trading_reward_pool_campaign_schedule()->InternalSwap(other->_internal_mutable_pending_trading_reward_pool_campaign_schedule());
  _internal_mutable_pending_total_trade_reward_points()->InternalSwap(
      other->_internal_mutable_pending_total_trade_reward_points());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.total_trade_reward_points_, lhs_arena,
                                       &other->_impl_.total_trade_reward_points_, rhs_arena);
  swap(_impl_.trading_reward_campaign_info_, other->_impl_.trading_reward_campaign_info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryTradeRewardCampaignResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2fquery_2eproto[91]);
}
// ===================================================================

class QueryIsOptedOutOfRewardsRequest::_Internal {
 public:
};

QueryIsOptedOutOfRewardsRequest::QueryIsOptedOutOfRewardsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.QueryIsOptedOutOfRewardsRequest)
}
QueryIsOptedOutOfRewardsRequest::QueryIsOptedOutOfRewardsRequest(const QueryIsOptedOutOfRewardsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryIsOptedOutOfRewardsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.account_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.account_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.account_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_account().empty()) {
    _this->_impl_.account_.Set(from._internal_account(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.QueryIsOptedOutOfRewardsRequest)
}

inline void QueryIsOptedOutOfRewardsRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.account_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.account_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.account_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

QueryIsOptedOutOfRewardsRequest::~QueryIsOptedOutOfRewardsRequest() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.QueryIsOptedOutOfRewardsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryIsOptedOutOfRewardsRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.account_.Destroy();
}

void QueryIsOptedOutOfRewardsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryIsOptedOutOfRewardsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.QueryIsOptedOutOfRewardsRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.account_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryIsOptedOutOfRewardsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string account = 1 [json_name = "account"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_account();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.QueryIsOptedOutOfRewardsRequest.account"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryIsOptedOutOfRewardsRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.QueryIsOptedOutOfRewardsRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string account = 1 [json_name = "account"];
  if (!this->_internal_account().empty()) {
    const std::string& _s = this->_internal_account();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.QueryIsOptedOutOfRewardsRequest.account");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.QueryIsOptedOutOfRewardsRequest)
  return target;
}

::size_t QueryIsOptedOutOfRewardsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.QueryIsOptedOutOfRewardsRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string account = 1 [json_name = "account"];
  if (!this->_internal_account().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_account());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryIsOptedOutOfRewardsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryIsOptedOutOfRewardsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryIsOptedOutOfRewardsRequest::GetClassData() const { return &_class_data_; }


void QueryIsOptedOutOfRewardsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryIsOptedOutOfRewardsRequest*>(&to_msg);
  auto& from = static_cast<const QueryIsOptedOutOfRewardsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.QueryIsOptedOutOfRewardsRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_account().empty()) {
    _this->_internal_set_account(from._internal_account());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryIsOptedOutOfRewardsRequest::CopyFrom(const QueryIsOptedOutOfRewardsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.QueryIsOptedOutOfRewardsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryIsOptedOutOfRewardsRequest::IsInitialized() const {
  return true;
}

void QueryIsOptedOutOfRewardsRequest::InternalSwap(QueryIsOptedOutOfRewardsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.account_, lhs_arena,
                                       &other->_impl_.account_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryIsOptedOutOfRewardsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2fquery_2eproto[92]);
}
// ===================================================================

class QueryIsOptedOutOfRewardsResponse::_Internal {
 public:
};

QueryIsOptedOutOfRewardsResponse::QueryIsOptedOutOfRewardsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.QueryIsOptedOutOfRewardsResponse)
}
QueryIsOptedOutOfRewardsResponse::QueryIsOptedOutOfRewardsResponse(const QueryIsOptedOutOfRewardsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.QueryIsOptedOutOfRewardsResponse)
}

inline void QueryIsOptedOutOfRewardsResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.is_opted_out_) { false }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

QueryIsOptedOutOfRewardsResponse::~QueryIsOptedOutOfRewardsResponse() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.QueryIsOptedOutOfRewardsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryIsOptedOutOfRewardsResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void QueryIsOptedOutOfRewardsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryIsOptedOutOfRewardsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.QueryIsOptedOutOfRewardsResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.is_opted_out_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryIsOptedOutOfRewardsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool is_opted_out = 1 [json_name = "isOptedOut"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.is_opted_out_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryIsOptedOutOfRewardsResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.QueryIsOptedOutOfRewardsResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_opted_out = 1 [json_name = "isOptedOut"];
  if (this->_internal_is_opted_out() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_is_opted_out(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.QueryIsOptedOutOfRewardsResponse)
  return target;
}

::size_t QueryIsOptedOutOfRewardsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.QueryIsOptedOutOfRewardsResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool is_opted_out = 1 [json_name = "isOptedOut"];
  if (this->_internal_is_opted_out() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryIsOptedOutOfRewardsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryIsOptedOutOfRewardsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryIsOptedOutOfRewardsResponse::GetClassData() const { return &_class_data_; }


void QueryIsOptedOutOfRewardsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryIsOptedOutOfRewardsResponse*>(&to_msg);
  auto& from = static_cast<const QueryIsOptedOutOfRewardsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.QueryIsOptedOutOfRewardsResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_is_opted_out() != 0) {
    _this->_internal_set_is_opted_out(from._internal_is_opted_out());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryIsOptedOutOfRewardsResponse::CopyFrom(const QueryIsOptedOutOfRewardsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.QueryIsOptedOutOfRewardsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryIsOptedOutOfRewardsResponse::IsInitialized() const {
  return true;
}

void QueryIsOptedOutOfRewardsResponse::InternalSwap(QueryIsOptedOutOfRewardsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);

  swap(_impl_.is_opted_out_, other->_impl_.is_opted_out_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryIsOptedOutOfRewardsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2fquery_2eproto[93]);
}
// ===================================================================

class QueryOptedOutOfRewardsAccountsRequest::_Internal {
 public:
};

QueryOptedOutOfRewardsAccountsRequest::QueryOptedOutOfRewardsAccountsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.QueryOptedOutOfRewardsAccountsRequest)
}
QueryOptedOutOfRewardsAccountsRequest::QueryOptedOutOfRewardsAccountsRequest(const QueryOptedOutOfRewardsAccountsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  QueryOptedOutOfRewardsAccountsRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.QueryOptedOutOfRewardsAccountsRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryOptedOutOfRewardsAccountsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryOptedOutOfRewardsAccountsRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata QueryOptedOutOfRewardsAccountsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2fquery_2eproto[94]);
}
// ===================================================================

class QueryOptedOutOfRewardsAccountsResponse::_Internal {
 public:
};

QueryOptedOutOfRewardsAccountsResponse::QueryOptedOutOfRewardsAccountsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.QueryOptedOutOfRewardsAccountsResponse)
}
QueryOptedOutOfRewardsAccountsResponse::QueryOptedOutOfRewardsAccountsResponse(const QueryOptedOutOfRewardsAccountsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryOptedOutOfRewardsAccountsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.accounts_){from._impl_.accounts_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.QueryOptedOutOfRewardsAccountsResponse)
}

inline void QueryOptedOutOfRewardsAccountsResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.accounts_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

QueryOptedOutOfRewardsAccountsResponse::~QueryOptedOutOfRewardsAccountsResponse() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.QueryOptedOutOfRewardsAccountsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryOptedOutOfRewardsAccountsResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_accounts()->~RepeatedPtrField();
}

void QueryOptedOutOfRewardsAccountsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryOptedOutOfRewardsAccountsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.QueryOptedOutOfRewardsAccountsResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_accounts()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryOptedOutOfRewardsAccountsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string accounts = 1 [json_name = "accounts"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_accounts();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.QueryOptedOutOfRewardsAccountsResponse.accounts"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryOptedOutOfRewardsAccountsResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.QueryOptedOutOfRewardsAccountsResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string accounts = 1 [json_name = "accounts"];
  for (int i = 0, n = this->_internal_accounts_size(); i < n; ++i) {
    const auto& s = this->_internal_accounts(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.QueryOptedOutOfRewardsAccountsResponse.accounts");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.QueryOptedOutOfRewardsAccountsResponse)
  return target;
}

::size_t QueryOptedOutOfRewardsAccountsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.QueryOptedOutOfRewardsAccountsResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string accounts = 1 [json_name = "accounts"];
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_accounts().size());
  for (int i = 0, n = _internal_accounts().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_accounts().Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryOptedOutOfRewardsAccountsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryOptedOutOfRewardsAccountsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryOptedOutOfRewardsAccountsResponse::GetClassData() const { return &_class_data_; }


void QueryOptedOutOfRewardsAccountsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryOptedOutOfRewardsAccountsResponse*>(&to_msg);
  auto& from = static_cast<const QueryOptedOutOfRewardsAccountsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.QueryOptedOutOfRewardsAccountsResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_accounts()->MergeFrom(from._internal_accounts());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryOptedOutOfRewardsAccountsResponse::CopyFrom(const QueryOptedOutOfRewardsAccountsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.QueryOptedOutOfRewardsAccountsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryOptedOutOfRewardsAccountsResponse::IsInitialized() const {
  return true;
}

void QueryOptedOutOfRewardsAccountsResponse::InternalSwap(QueryOptedOutOfRewardsAccountsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_accounts()->InternalSwap(
      other->_internal_mutable_accounts());
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryOptedOutOfRewardsAccountsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2fquery_2eproto[95]);
}
// ===================================================================

class QueryFeeDiscountAccountInfoRequest::_Internal {
 public:
};

QueryFeeDiscountAccountInfoRequest::QueryFeeDiscountAccountInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.QueryFeeDiscountAccountInfoRequest)
}
QueryFeeDiscountAccountInfoRequest::QueryFeeDiscountAccountInfoRequest(const QueryFeeDiscountAccountInfoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryFeeDiscountAccountInfoRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.account_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.account_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.account_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_account().empty()) {
    _this->_impl_.account_.Set(from._internal_account(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.QueryFeeDiscountAccountInfoRequest)
}

inline void QueryFeeDiscountAccountInfoRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.account_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.account_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.account_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

QueryFeeDiscountAccountInfoRequest::~QueryFeeDiscountAccountInfoRequest() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.QueryFeeDiscountAccountInfoRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryFeeDiscountAccountInfoRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.account_.Destroy();
}

void QueryFeeDiscountAccountInfoRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryFeeDiscountAccountInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.QueryFeeDiscountAccountInfoRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.account_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryFeeDiscountAccountInfoRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string account = 1 [json_name = "account"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_account();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.QueryFeeDiscountAccountInfoRequest.account"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryFeeDiscountAccountInfoRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.QueryFeeDiscountAccountInfoRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string account = 1 [json_name = "account"];
  if (!this->_internal_account().empty()) {
    const std::string& _s = this->_internal_account();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.QueryFeeDiscountAccountInfoRequest.account");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.QueryFeeDiscountAccountInfoRequest)
  return target;
}

::size_t QueryFeeDiscountAccountInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.QueryFeeDiscountAccountInfoRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string account = 1 [json_name = "account"];
  if (!this->_internal_account().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_account());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryFeeDiscountAccountInfoRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryFeeDiscountAccountInfoRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryFeeDiscountAccountInfoRequest::GetClassData() const { return &_class_data_; }


void QueryFeeDiscountAccountInfoRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryFeeDiscountAccountInfoRequest*>(&to_msg);
  auto& from = static_cast<const QueryFeeDiscountAccountInfoRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.QueryFeeDiscountAccountInfoRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_account().empty()) {
    _this->_internal_set_account(from._internal_account());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryFeeDiscountAccountInfoRequest::CopyFrom(const QueryFeeDiscountAccountInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.QueryFeeDiscountAccountInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryFeeDiscountAccountInfoRequest::IsInitialized() const {
  return true;
}

void QueryFeeDiscountAccountInfoRequest::InternalSwap(QueryFeeDiscountAccountInfoRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.account_, lhs_arena,
                                       &other->_impl_.account_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryFeeDiscountAccountInfoRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2fquery_2eproto[96]);
}
// ===================================================================

class QueryFeeDiscountAccountInfoResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<QueryFeeDiscountAccountInfoResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(QueryFeeDiscountAccountInfoResponse, _impl_._has_bits_);
  static const ::injective::exchange::v1beta1::FeeDiscountTierInfo& account_info(const QueryFeeDiscountAccountInfoResponse* msg);
  static void set_has_account_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::injective::exchange::v1beta1::FeeDiscountTierTTL& account_ttl(const QueryFeeDiscountAccountInfoResponse* msg);
  static void set_has_account_ttl(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::injective::exchange::v1beta1::FeeDiscountTierInfo&
QueryFeeDiscountAccountInfoResponse::_Internal::account_info(const QueryFeeDiscountAccountInfoResponse* msg) {
  return *msg->_impl_.account_info_;
}
const ::injective::exchange::v1beta1::FeeDiscountTierTTL&
QueryFeeDiscountAccountInfoResponse::_Internal::account_ttl(const QueryFeeDiscountAccountInfoResponse* msg) {
  return *msg->_impl_.account_ttl_;
}
void QueryFeeDiscountAccountInfoResponse::clear_account_info() {
  if (_impl_.account_info_ != nullptr) _impl_.account_info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void QueryFeeDiscountAccountInfoResponse::clear_account_ttl() {
  if (_impl_.account_ttl_ != nullptr) _impl_.account_ttl_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
QueryFeeDiscountAccountInfoResponse::QueryFeeDiscountAccountInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.QueryFeeDiscountAccountInfoResponse)
}
QueryFeeDiscountAccountInfoResponse::QueryFeeDiscountAccountInfoResponse(const QueryFeeDiscountAccountInfoResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryFeeDiscountAccountInfoResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.account_info_){nullptr}
    , decltype(_impl_.account_ttl_){nullptr}
    , decltype(_impl_.tier_level_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.account_info_ = new ::injective::exchange::v1beta1::FeeDiscountTierInfo(*from._impl_.account_info_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.account_ttl_ = new ::injective::exchange::v1beta1::FeeDiscountTierTTL(*from._impl_.account_ttl_);
  }
  _this->_impl_.tier_level_ = from._impl_.tier_level_;
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.QueryFeeDiscountAccountInfoResponse)
}

inline void QueryFeeDiscountAccountInfoResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.account_info_){nullptr}
    , decltype(_impl_.account_ttl_){nullptr}
    , decltype(_impl_.tier_level_) { ::uint64_t{0u} }

  };
}

QueryFeeDiscountAccountInfoResponse::~QueryFeeDiscountAccountInfoResponse() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.QueryFeeDiscountAccountInfoResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryFeeDiscountAccountInfoResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.account_info_;
  if (this != internal_default_instance()) delete _impl_.account_ttl_;
}

void QueryFeeDiscountAccountInfoResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryFeeDiscountAccountInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.QueryFeeDiscountAccountInfoResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.account_info_ != nullptr);
      _impl_.account_info_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.account_ttl_ != nullptr);
      _impl_.account_ttl_->Clear();
    }
  }
  _impl_.tier_level_ = ::uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryFeeDiscountAccountInfoResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 tier_level = 1 [json_name = "tierLevel"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.tier_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .injective.exchange.v1beta1.FeeDiscountTierInfo account_info = 2 [json_name = "accountInfo"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_account_info(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .injective.exchange.v1beta1.FeeDiscountTierTTL account_ttl = 3 [json_name = "accountTtl"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_account_ttl(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryFeeDiscountAccountInfoResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.QueryFeeDiscountAccountInfoResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 tier_level = 1 [json_name = "tierLevel"];
  if (this->_internal_tier_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_tier_level(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .injective.exchange.v1beta1.FeeDiscountTierInfo account_info = 2 [json_name = "accountInfo"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::account_info(this),
        _Internal::account_info(this).GetCachedSize(), target, stream);
  }

  // .injective.exchange.v1beta1.FeeDiscountTierTTL account_ttl = 3 [json_name = "accountTtl"];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::account_ttl(this),
        _Internal::account_ttl(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.QueryFeeDiscountAccountInfoResponse)
  return target;
}

::size_t QueryFeeDiscountAccountInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.QueryFeeDiscountAccountInfoResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .injective.exchange.v1beta1.FeeDiscountTierInfo account_info = 2 [json_name = "accountInfo"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.account_info_);
    }

    // .injective.exchange.v1beta1.FeeDiscountTierTTL account_ttl = 3 [json_name = "accountTtl"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.account_ttl_);
    }

  }
  // uint64 tier_level = 1 [json_name = "tierLevel"];
  if (this->_internal_tier_level() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_tier_level());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryFeeDiscountAccountInfoResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryFeeDiscountAccountInfoResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryFeeDiscountAccountInfoResponse::GetClassData() const { return &_class_data_; }


void QueryFeeDiscountAccountInfoResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryFeeDiscountAccountInfoResponse*>(&to_msg);
  auto& from = static_cast<const QueryFeeDiscountAccountInfoResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.QueryFeeDiscountAccountInfoResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_account_info()->::injective::exchange::v1beta1::FeeDiscountTierInfo::MergeFrom(
          from._internal_account_info());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_account_ttl()->::injective::exchange::v1beta1::FeeDiscountTierTTL::MergeFrom(
          from._internal_account_ttl());
    }
  }
  if (from._internal_tier_level() != 0) {
    _this->_internal_set_tier_level(from._internal_tier_level());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryFeeDiscountAccountInfoResponse::CopyFrom(const QueryFeeDiscountAccountInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.QueryFeeDiscountAccountInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryFeeDiscountAccountInfoResponse::IsInitialized() const {
  return true;
}

void QueryFeeDiscountAccountInfoResponse::InternalSwap(QueryFeeDiscountAccountInfoResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(QueryFeeDiscountAccountInfoResponse, _impl_.tier_level_)
      + sizeof(QueryFeeDiscountAccountInfoResponse::_impl_.tier_level_)
      - PROTOBUF_FIELD_OFFSET(QueryFeeDiscountAccountInfoResponse, _impl_.account_info_)>(
          reinterpret_cast<char*>(&_impl_.account_info_),
          reinterpret_cast<char*>(&other->_impl_.account_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryFeeDiscountAccountInfoResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2fquery_2eproto[97]);
}
// ===================================================================

class QueryFeeDiscountScheduleRequest::_Internal {
 public:
};

QueryFeeDiscountScheduleRequest::QueryFeeDiscountScheduleRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.QueryFeeDiscountScheduleRequest)
}
QueryFeeDiscountScheduleRequest::QueryFeeDiscountScheduleRequest(const QueryFeeDiscountScheduleRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  QueryFeeDiscountScheduleRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.QueryFeeDiscountScheduleRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryFeeDiscountScheduleRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryFeeDiscountScheduleRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata QueryFeeDiscountScheduleRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2fquery_2eproto[98]);
}
// ===================================================================

class QueryFeeDiscountScheduleResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<QueryFeeDiscountScheduleResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(QueryFeeDiscountScheduleResponse, _impl_._has_bits_);
  static const ::injective::exchange::v1beta1::FeeDiscountSchedule& fee_discount_schedule(const QueryFeeDiscountScheduleResponse* msg);
  static void set_has_fee_discount_schedule(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::injective::exchange::v1beta1::FeeDiscountSchedule&
QueryFeeDiscountScheduleResponse::_Internal::fee_discount_schedule(const QueryFeeDiscountScheduleResponse* msg) {
  return *msg->_impl_.fee_discount_schedule_;
}
void QueryFeeDiscountScheduleResponse::clear_fee_discount_schedule() {
  if (_impl_.fee_discount_schedule_ != nullptr) _impl_.fee_discount_schedule_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
QueryFeeDiscountScheduleResponse::QueryFeeDiscountScheduleResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.QueryFeeDiscountScheduleResponse)
}
QueryFeeDiscountScheduleResponse::QueryFeeDiscountScheduleResponse(const QueryFeeDiscountScheduleResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryFeeDiscountScheduleResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.fee_discount_schedule_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.fee_discount_schedule_ = new ::injective::exchange::v1beta1::FeeDiscountSchedule(*from._impl_.fee_discount_schedule_);
  }
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.QueryFeeDiscountScheduleResponse)
}

inline void QueryFeeDiscountScheduleResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.fee_discount_schedule_){nullptr}
  };
}

QueryFeeDiscountScheduleResponse::~QueryFeeDiscountScheduleResponse() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.QueryFeeDiscountScheduleResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryFeeDiscountScheduleResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.fee_discount_schedule_;
}

void QueryFeeDiscountScheduleResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryFeeDiscountScheduleResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.QueryFeeDiscountScheduleResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.fee_discount_schedule_ != nullptr);
    _impl_.fee_discount_schedule_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryFeeDiscountScheduleResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .injective.exchange.v1beta1.FeeDiscountSchedule fee_discount_schedule = 1 [json_name = "feeDiscountSchedule"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_fee_discount_schedule(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryFeeDiscountScheduleResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.QueryFeeDiscountScheduleResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .injective.exchange.v1beta1.FeeDiscountSchedule fee_discount_schedule = 1 [json_name = "feeDiscountSchedule"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::fee_discount_schedule(this),
        _Internal::fee_discount_schedule(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.QueryFeeDiscountScheduleResponse)
  return target;
}

::size_t QueryFeeDiscountScheduleResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.QueryFeeDiscountScheduleResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .injective.exchange.v1beta1.FeeDiscountSchedule fee_discount_schedule = 1 [json_name = "feeDiscountSchedule"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.fee_discount_schedule_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryFeeDiscountScheduleResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryFeeDiscountScheduleResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryFeeDiscountScheduleResponse::GetClassData() const { return &_class_data_; }


void QueryFeeDiscountScheduleResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryFeeDiscountScheduleResponse*>(&to_msg);
  auto& from = static_cast<const QueryFeeDiscountScheduleResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.QueryFeeDiscountScheduleResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_fee_discount_schedule()->::injective::exchange::v1beta1::FeeDiscountSchedule::MergeFrom(
        from._internal_fee_discount_schedule());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryFeeDiscountScheduleResponse::CopyFrom(const QueryFeeDiscountScheduleResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.QueryFeeDiscountScheduleResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryFeeDiscountScheduleResponse::IsInitialized() const {
  return true;
}

void QueryFeeDiscountScheduleResponse::InternalSwap(QueryFeeDiscountScheduleResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.fee_discount_schedule_, other->_impl_.fee_discount_schedule_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryFeeDiscountScheduleResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2fquery_2eproto[99]);
}
// ===================================================================

class QueryBalanceMismatchesRequest::_Internal {
 public:
};

QueryBalanceMismatchesRequest::QueryBalanceMismatchesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.QueryBalanceMismatchesRequest)
}
QueryBalanceMismatchesRequest::QueryBalanceMismatchesRequest(const QueryBalanceMismatchesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.QueryBalanceMismatchesRequest)
}

inline void QueryBalanceMismatchesRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.dust_factor_) { ::int64_t{0} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

QueryBalanceMismatchesRequest::~QueryBalanceMismatchesRequest() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.QueryBalanceMismatchesRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryBalanceMismatchesRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void QueryBalanceMismatchesRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryBalanceMismatchesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.QueryBalanceMismatchesRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.dust_factor_ = ::int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryBalanceMismatchesRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 dust_factor = 1 [json_name = "dustFactor"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.dust_factor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryBalanceMismatchesRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.QueryBalanceMismatchesRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 dust_factor = 1 [json_name = "dustFactor"];
  if (this->_internal_dust_factor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        1, this->_internal_dust_factor(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.QueryBalanceMismatchesRequest)
  return target;
}

::size_t QueryBalanceMismatchesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.QueryBalanceMismatchesRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 dust_factor = 1 [json_name = "dustFactor"];
  if (this->_internal_dust_factor() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_dust_factor());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryBalanceMismatchesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryBalanceMismatchesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryBalanceMismatchesRequest::GetClassData() const { return &_class_data_; }


void QueryBalanceMismatchesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryBalanceMismatchesRequest*>(&to_msg);
  auto& from = static_cast<const QueryBalanceMismatchesRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.QueryBalanceMismatchesRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_dust_factor() != 0) {
    _this->_internal_set_dust_factor(from._internal_dust_factor());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryBalanceMismatchesRequest::CopyFrom(const QueryBalanceMismatchesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.QueryBalanceMismatchesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryBalanceMismatchesRequest::IsInitialized() const {
  return true;
}

void QueryBalanceMismatchesRequest::InternalSwap(QueryBalanceMismatchesRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);

  swap(_impl_.dust_factor_, other->_impl_.dust_factor_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryBalanceMismatchesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2fquery_2eproto[100]);
}
// ===================================================================

class BalanceMismatch::_Internal {
 public:
};

BalanceMismatch::BalanceMismatch(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.BalanceMismatch)
}
BalanceMismatch::BalanceMismatch(const BalanceMismatch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BalanceMismatch* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.subaccountid_) {}

    , decltype(_impl_.denom_) {}

    , decltype(_impl_.available_) {}

    , decltype(_impl_.total_) {}

    , decltype(_impl_.balance_hold_) {}

    , decltype(_impl_.expected_total_) {}

    , decltype(_impl_.difference_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.subaccountid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.subaccountid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_subaccountid().empty()) {
    _this->_impl_.subaccountid_.Set(from._internal_subaccountid(), _this->GetArenaForAllocation());
  }
  _impl_.denom_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.denom_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_denom().empty()) {
    _this->_impl_.denom_.Set(from._internal_denom(), _this->GetArenaForAllocation());
  }
  _impl_.available_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.available_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_available().empty()) {
    _this->_impl_.available_.Set(from._internal_available(), _this->GetArenaForAllocation());
  }
  _impl_.total_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.total_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_total().empty()) {
    _this->_impl_.total_.Set(from._internal_total(), _this->GetArenaForAllocation());
  }
  _impl_.balance_hold_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.balance_hold_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_balance_hold().empty()) {
    _this->_impl_.balance_hold_.Set(from._internal_balance_hold(), _this->GetArenaForAllocation());
  }
  _impl_.expected_total_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.expected_total_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_expected_total().empty()) {
    _this->_impl_.expected_total_.Set(from._internal_expected_total(), _this->GetArenaForAllocation());
  }
  _impl_.difference_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.difference_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_difference().empty()) {
    _this->_impl_.difference_.Set(from._internal_difference(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.BalanceMismatch)
}

inline void BalanceMismatch::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.subaccountid_) {}

    , decltype(_impl_.denom_) {}

    , decltype(_impl_.available_) {}

    , decltype(_impl_.total_) {}

    , decltype(_impl_.balance_hold_) {}

    , decltype(_impl_.expected_total_) {}

    , decltype(_impl_.difference_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.subaccountid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.subaccountid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.denom_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.denom_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.available_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.available_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.total_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.total_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.balance_hold_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.balance_hold_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.expected_total_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.expected_total_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.difference_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.difference_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BalanceMismatch::~BalanceMismatch() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.BalanceMismatch)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BalanceMismatch::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.subaccountid_.Destroy();
  _impl_.denom_.Destroy();
  _impl_.available_.Destroy();
  _impl_.total_.Destroy();
  _impl_.balance_hold_.Destroy();
  _impl_.expected_total_.Destroy();
  _impl_.difference_.Destroy();
}

void BalanceMismatch::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BalanceMismatch::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.BalanceMismatch)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.subaccountid_.ClearToEmpty();
  _impl_.denom_.ClearToEmpty();
  _impl_.available_.ClearToEmpty();
  _impl_.total_.ClearToEmpty();
  _impl_.balance_hold_.ClearToEmpty();
  _impl_.expected_total_.ClearToEmpty();
  _impl_.difference_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BalanceMismatch::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string subaccountId = 1 [json_name = "subaccountId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_subaccountid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.BalanceMismatch.subaccountId"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string denom = 2 [json_name = "denom"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_denom();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.BalanceMismatch.denom"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string available = 3 [json_name = "available", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_available();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.BalanceMismatch.available"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string total = 4 [json_name = "total", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_total();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.BalanceMismatch.total"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string balance_hold = 5 [json_name = "balanceHold", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_balance_hold();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.BalanceMismatch.balance_hold"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string expected_total = 6 [json_name = "expectedTotal", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_expected_total();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.BalanceMismatch.expected_total"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string difference = 7 [json_name = "difference", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_difference();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.BalanceMismatch.difference"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* BalanceMismatch::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.BalanceMismatch)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string subaccountId = 1 [json_name = "subaccountId"];
  if (!this->_internal_subaccountid().empty()) {
    const std::string& _s = this->_internal_subaccountid();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.BalanceMismatch.subaccountId");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string denom = 2 [json_name = "denom"];
  if (!this->_internal_denom().empty()) {
    const std::string& _s = this->_internal_denom();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.BalanceMismatch.denom");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string available = 3 [json_name = "available", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_available().empty()) {
    const std::string& _s = this->_internal_available();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.BalanceMismatch.available");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string total = 4 [json_name = "total", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_total().empty()) {
    const std::string& _s = this->_internal_total();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.BalanceMismatch.total");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // string balance_hold = 5 [json_name = "balanceHold", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_balance_hold().empty()) {
    const std::string& _s = this->_internal_balance_hold();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.BalanceMismatch.balance_hold");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // string expected_total = 6 [json_name = "expectedTotal", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_expected_total().empty()) {
    const std::string& _s = this->_internal_expected_total();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.BalanceMismatch.expected_total");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  // string difference = 7 [json_name = "difference", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_difference().empty()) {
    const std::string& _s = this->_internal_difference();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.BalanceMismatch.difference");
    target = stream->WriteStringMaybeAliased(7, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.BalanceMismatch)
  return target;
}

::size_t BalanceMismatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.BalanceMismatch)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string subaccountId = 1 [json_name = "subaccountId"];
  if (!this->_internal_subaccountid().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_subaccountid());
  }

  // string denom = 2 [json_name = "denom"];
  if (!this->_internal_denom().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_denom());
  }

  // string available = 3 [json_name = "available", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_available().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_available());
  }

  // string total = 4 [json_name = "total", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_total().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_total());
  }

  // string balance_hold = 5 [json_name = "balanceHold", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_balance_hold().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_balance_hold());
  }

  // string expected_total = 6 [json_name = "expectedTotal", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_expected_total().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_expected_total());
  }

  // string difference = 7 [json_name = "difference", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_difference().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_difference());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BalanceMismatch::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BalanceMismatch::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BalanceMismatch::GetClassData() const { return &_class_data_; }


void BalanceMismatch::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BalanceMismatch*>(&to_msg);
  auto& from = static_cast<const BalanceMismatch&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.BalanceMismatch)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_subaccountid().empty()) {
    _this->_internal_set_subaccountid(from._internal_subaccountid());
  }
  if (!from._internal_denom().empty()) {
    _this->_internal_set_denom(from._internal_denom());
  }
  if (!from._internal_available().empty()) {
    _this->_internal_set_available(from._internal_available());
  }
  if (!from._internal_total().empty()) {
    _this->_internal_set_total(from._internal_total());
  }
  if (!from._internal_balance_hold().empty()) {
    _this->_internal_set_balance_hold(from._internal_balance_hold());
  }
  if (!from._internal_expected_total().empty()) {
    _this->_internal_set_expected_total(from._internal_expected_total());
  }
  if (!from._internal_difference().empty()) {
    _this->_internal_set_difference(from._internal_difference());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BalanceMismatch::CopyFrom(const BalanceMismatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.BalanceMismatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BalanceMismatch::IsInitialized() const {
  return true;
}

void BalanceMismatch::InternalSwap(BalanceMismatch* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.subaccountid_, lhs_arena,
                                       &other->_impl_.subaccountid_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.denom_, lhs_arena,
                                       &other->_impl_.denom_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.available_, lhs_arena,
                                       &other->_impl_.available_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.total_, lhs_arena,
                                       &other->_impl_.total_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.balance_hold_, lhs_arena,
                                       &other->_impl_.balance_hold_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.expected_total_, lhs_arena,
                                       &other->_impl_.expected_total_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.difference_, lhs_arena,
                                       &other->_impl_.difference_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata BalanceMismatch::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2fquery_2eproto[101]);
}
// ===================================================================

class QueryBalanceMismatchesResponse::_Internal {
 public:
};

QueryBalanceMismatchesResponse::QueryBalanceMismatchesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.QueryBalanceMismatchesResponse)
}
QueryBalanceMismatchesResponse::QueryBalanceMismatchesResponse(const QueryBalanceMismatchesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryBalanceMismatchesResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.balance_mismatches_){from._impl_.balance_mismatches_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.QueryBalanceMismatchesResponse)
}

inline void QueryBalanceMismatchesResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.balance_mismatches_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

QueryBalanceMismatchesResponse::~QueryBalanceMismatchesResponse() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.QueryBalanceMismatchesResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryBalanceMismatchesResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_balance_mismatches()->~RepeatedPtrField();
}

void QueryBalanceMismatchesResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryBalanceMismatchesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.QueryBalanceMismatchesResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_balance_mismatches()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryBalanceMismatchesResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .injective.exchange.v1beta1.BalanceMismatch balance_mismatches = 1 [json_name = "balanceMismatches"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_balance_mismatches(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryBalanceMismatchesResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.QueryBalanceMismatchesResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .injective.exchange.v1beta1.BalanceMismatch balance_mismatches = 1 [json_name = "balanceMismatches"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_balance_mismatches_size()); i < n; i++) {
    const auto& repfield = this->_internal_balance_mismatches(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.QueryBalanceMismatchesResponse)
  return target;
}

::size_t QueryBalanceMismatchesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.QueryBalanceMismatchesResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .injective.exchange.v1beta1.BalanceMismatch balance_mismatches = 1 [json_name = "balanceMismatches"];
  total_size += 1UL * this->_internal_balance_mismatches_size();
  for (const auto& msg : this->_internal_balance_mismatches()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryBalanceMismatchesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryBalanceMismatchesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryBalanceMismatchesResponse::GetClassData() const { return &_class_data_; }


void QueryBalanceMismatchesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryBalanceMismatchesResponse*>(&to_msg);
  auto& from = static_cast<const QueryBalanceMismatchesResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.QueryBalanceMismatchesResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_balance_mismatches()->MergeFrom(from._internal_balance_mismatches());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryBalanceMismatchesResponse::CopyFrom(const QueryBalanceMismatchesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.QueryBalanceMismatchesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryBalanceMismatchesResponse::IsInitialized() const {
  return true;
}

void QueryBalanceMismatchesResponse::InternalSwap(QueryBalanceMismatchesResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_balance_mismatches()->InternalSwap(other->_internal_mutable_balance_mismatches());
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryBalanceMismatchesResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2fquery_2eproto[102]);
}
// ===================================================================

class QueryBalanceWithBalanceHoldsRequest::_Internal {
 public:
};

QueryBalanceWithBalanceHoldsRequest::QueryBalanceWithBalanceHoldsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.QueryBalanceWithBalanceHoldsRequest)
}
QueryBalanceWithBalanceHoldsRequest::QueryBalanceWithBalanceHoldsRequest(const QueryBalanceWithBalanceHoldsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  QueryBalanceWithBalanceHoldsRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.QueryBalanceWithBalanceHoldsRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryBalanceWithBalanceHoldsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryBalanceWithBalanceHoldsRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata QueryBalanceWithBalanceHoldsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2fquery_2eproto[103]);
}
// ===================================================================

class BalanceWithMarginHold::_Internal {
 public:
};

BalanceWithMarginHold::BalanceWithMarginHold(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.BalanceWithMarginHold)
}
BalanceWithMarginHold::BalanceWithMarginHold(const BalanceWithMarginHold& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BalanceWithMarginHold* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.subaccountid_) {}

    , decltype(_impl_.denom_) {}

    , decltype(_impl_.available_) {}

    , decltype(_impl_.total_) {}

    , decltype(_impl_.balance_hold_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.subaccountid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.subaccountid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_subaccountid().empty()) {
    _this->_impl_.subaccountid_.Set(from._internal_subaccountid(), _this->GetArenaForAllocation());
  }
  _impl_.denom_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.denom_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_denom().empty()) {
    _this->_impl_.denom_.Set(from._internal_denom(), _this->GetArenaForAllocation());
  }
  _impl_.available_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.available_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_available().empty()) {
    _this->_impl_.available_.Set(from._internal_available(), _this->GetArenaForAllocation());
  }
  _impl_.total_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.total_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_total().empty()) {
    _this->_impl_.total_.Set(from._internal_total(), _this->GetArenaForAllocation());
  }
  _impl_.balance_hold_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.balance_hold_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_balance_hold().empty()) {
    _this->_impl_.balance_hold_.Set(from._internal_balance_hold(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.BalanceWithMarginHold)
}

inline void BalanceWithMarginHold::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.subaccountid_) {}

    , decltype(_impl_.denom_) {}

    , decltype(_impl_.available_) {}

    , decltype(_impl_.total_) {}

    , decltype(_impl_.balance_hold_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.subaccountid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.subaccountid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.denom_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.denom_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.available_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.available_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.total_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.total_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.balance_hold_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.balance_hold_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BalanceWithMarginHold::~BalanceWithMarginHold() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.BalanceWithMarginHold)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BalanceWithMarginHold::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.subaccountid_.Destroy();
  _impl_.denom_.Destroy();
  _impl_.available_.Destroy();
  _impl_.total_.Destroy();
  _impl_.balance_hold_.Destroy();
}

void BalanceWithMarginHold::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BalanceWithMarginHold::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.BalanceWithMarginHold)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.subaccountid_.ClearToEmpty();
  _impl_.denom_.ClearToEmpty();
  _impl_.available_.ClearToEmpty();
  _impl_.total_.ClearToEmpty();
  _impl_.balance_hold_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BalanceWithMarginHold::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string subaccountId = 1 [json_name = "subaccountId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_subaccountid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.BalanceWithMarginHold.subaccountId"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string denom = 2 [json_name = "denom"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_denom();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.BalanceWithMarginHold.denom"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string available = 3 [json_name = "available", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_available();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.BalanceWithMarginHold.available"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string total = 4 [json_name = "total", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_total();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.BalanceWithMarginHold.total"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string balance_hold = 5 [json_name = "balanceHold", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_balance_hold();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.BalanceWithMarginHold.balance_hold"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* BalanceWithMarginHold::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.BalanceWithMarginHold)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string subaccountId = 1 [json_name = "subaccountId"];
  if (!this->_internal_subaccountid().empty()) {
    const std::string& _s = this->_internal_subaccountid();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.BalanceWithMarginHold.subaccountId");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string denom = 2 [json_name = "denom"];
  if (!this->_internal_denom().empty()) {
    const std::string& _s = this->_internal_denom();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.BalanceWithMarginHold.denom");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string available = 3 [json_name = "available", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_available().empty()) {
    const std::string& _s = this->_internal_available();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.BalanceWithMarginHold.available");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string total = 4 [json_name = "total", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_total().empty()) {
    const std::string& _s = this->_internal_total();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.BalanceWithMarginHold.total");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // string balance_hold = 5 [json_name = "balanceHold", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_balance_hold().empty()) {
    const std::string& _s = this->_internal_balance_hold();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.BalanceWithMarginHold.balance_hold");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.BalanceWithMarginHold)
  return target;
}

::size_t BalanceWithMarginHold::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.BalanceWithMarginHold)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string subaccountId = 1 [json_name = "subaccountId"];
  if (!this->_internal_subaccountid().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_subaccountid());
  }

  // string denom = 2 [json_name = "denom"];
  if (!this->_internal_denom().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_denom());
  }

  // string available = 3 [json_name = "available", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_available().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_available());
  }

  // string total = 4 [json_name = "total", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_total().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_total());
  }

  // string balance_hold = 5 [json_name = "balanceHold", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_balance_hold().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_balance_hold());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BalanceWithMarginHold::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BalanceWithMarginHold::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BalanceWithMarginHold::GetClassData() const { return &_class_data_; }


void BalanceWithMarginHold::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BalanceWithMarginHold*>(&to_msg);
  auto& from = static_cast<const BalanceWithMarginHold&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.BalanceWithMarginHold)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_subaccountid().empty()) {
    _this->_internal_set_subaccountid(from._internal_subaccountid());
  }
  if (!from._internal_denom().empty()) {
    _this->_internal_set_denom(from._internal_denom());
  }
  if (!from._internal_available().empty()) {
    _this->_internal_set_available(from._internal_available());
  }
  if (!from._internal_total().empty()) {
    _this->_internal_set_total(from._internal_total());
  }
  if (!from._internal_balance_hold().empty()) {
    _this->_internal_set_balance_hold(from._internal_balance_hold());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BalanceWithMarginHold::CopyFrom(const BalanceWithMarginHold& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.BalanceWithMarginHold)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BalanceWithMarginHold::IsInitialized() const {
  return true;
}

void BalanceWithMarginHold::InternalSwap(BalanceWithMarginHold* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.subaccountid_, lhs_arena,
                                       &other->_impl_.subaccountid_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.denom_, lhs_arena,
                                       &other->_impl_.denom_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.available_, lhs_arena,
                                       &other->_impl_.available_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.total_, lhs_arena,
                                       &other->_impl_.total_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.balance_hold_, lhs_arena,
                                       &other->_impl_.balance_hold_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata BalanceWithMarginHold::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2fquery_2eproto[104]);
}
// ===================================================================

class QueryBalanceWithBalanceHoldsResponse::_Internal {
 public:
};

QueryBalanceWithBalanceHoldsResponse::QueryBalanceWithBalanceHoldsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.QueryBalanceWithBalanceHoldsResponse)
}
QueryBalanceWithBalanceHoldsResponse::QueryBalanceWithBalanceHoldsResponse(const QueryBalanceWithBalanceHoldsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryBalanceWithBalanceHoldsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.balance_with_balance_holds_){from._impl_.balance_with_balance_holds_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.QueryBalanceWithBalanceHoldsResponse)
}

inline void QueryBalanceWithBalanceHoldsResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.balance_with_balance_holds_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

QueryBalanceWithBalanceHoldsResponse::~QueryBalanceWithBalanceHoldsResponse() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.QueryBalanceWithBalanceHoldsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryBalanceWithBalanceHoldsResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_balance_with_balance_holds()->~RepeatedPtrField();
}

void QueryBalanceWithBalanceHoldsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryBalanceWithBalanceHoldsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.QueryBalanceWithBalanceHoldsResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_balance_with_balance_holds()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryBalanceWithBalanceHoldsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .injective.exchange.v1beta1.BalanceWithMarginHold balance_with_balance_holds = 1 [json_name = "balanceWithBalanceHolds"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_balance_with_balance_holds(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryBalanceWithBalanceHoldsResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.QueryBalanceWithBalanceHoldsResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .injective.exchange.v1beta1.BalanceWithMarginHold balance_with_balance_holds = 1 [json_name = "balanceWithBalanceHolds"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_balance_with_balance_holds_size()); i < n; i++) {
    const auto& repfield = this->_internal_balance_with_balance_holds(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.QueryBalanceWithBalanceHoldsResponse)
  return target;
}

::size_t QueryBalanceWithBalanceHoldsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.QueryBalanceWithBalanceHoldsResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .injective.exchange.v1beta1.BalanceWithMarginHold balance_with_balance_holds = 1 [json_name = "balanceWithBalanceHolds"];
  total_size += 1UL * this->_internal_balance_with_balance_holds_size();
  for (const auto& msg : this->_internal_balance_with_balance_holds()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryBalanceWithBalanceHoldsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryBalanceWithBalanceHoldsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryBalanceWithBalanceHoldsResponse::GetClassData() const { return &_class_data_; }


void QueryBalanceWithBalanceHoldsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryBalanceWithBalanceHoldsResponse*>(&to_msg);
  auto& from = static_cast<const QueryBalanceWithBalanceHoldsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.QueryBalanceWithBalanceHoldsResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_balance_with_balance_holds()->MergeFrom(from._internal_balance_with_balance_holds());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryBalanceWithBalanceHoldsResponse::CopyFrom(const QueryBalanceWithBalanceHoldsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.QueryBalanceWithBalanceHoldsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryBalanceWithBalanceHoldsResponse::IsInitialized() const {
  return true;
}

void QueryBalanceWithBalanceHoldsResponse::InternalSwap(QueryBalanceWithBalanceHoldsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_balance_with_balance_holds()->InternalSwap(other->_internal_mutable_balance_with_balance_holds());
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryBalanceWithBalanceHoldsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2fquery_2eproto[105]);
}
// ===================================================================

class QueryFeeDiscountTierStatisticsRequest::_Internal {
 public:
};

QueryFeeDiscountTierStatisticsRequest::QueryFeeDiscountTierStatisticsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.QueryFeeDiscountTierStatisticsRequest)
}
QueryFeeDiscountTierStatisticsRequest::QueryFeeDiscountTierStatisticsRequest(const QueryFeeDiscountTierStatisticsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  QueryFeeDiscountTierStatisticsRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.QueryFeeDiscountTierStatisticsRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryFeeDiscountTierStatisticsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryFeeDiscountTierStatisticsRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata QueryFeeDiscountTierStatisticsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2fquery_2eproto[106]);
}
// ===================================================================

class TierStatistic::_Internal {
 public:
};

TierStatistic::TierStatistic(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.TierStatistic)
}
TierStatistic::TierStatistic(const TierStatistic& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.TierStatistic)
}

inline void TierStatistic::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.tier_) { ::uint64_t{0u} }

    , decltype(_impl_.count_) { ::uint64_t{0u} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TierStatistic::~TierStatistic() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.TierStatistic)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TierStatistic::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void TierStatistic::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TierStatistic::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.TierStatistic)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.tier_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.count_) -
      reinterpret_cast<char*>(&_impl_.tier_)) + sizeof(_impl_.count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TierStatistic::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 tier = 1 [json_name = "tier"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.tier_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 count = 2 [json_name = "count"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* TierStatistic::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.TierStatistic)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 tier = 1 [json_name = "tier"];
  if (this->_internal_tier() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_tier(), target);
  }

  // uint64 count = 2 [json_name = "count"];
  if (this->_internal_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.TierStatistic)
  return target;
}

::size_t TierStatistic::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.TierStatistic)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 tier = 1 [json_name = "tier"];
  if (this->_internal_tier() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_tier());
  }

  // uint64 count = 2 [json_name = "count"];
  if (this->_internal_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TierStatistic::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TierStatistic::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TierStatistic::GetClassData() const { return &_class_data_; }


void TierStatistic::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TierStatistic*>(&to_msg);
  auto& from = static_cast<const TierStatistic&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.TierStatistic)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_tier() != 0) {
    _this->_internal_set_tier(from._internal_tier());
  }
  if (from._internal_count() != 0) {
    _this->_internal_set_count(from._internal_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TierStatistic::CopyFrom(const TierStatistic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.TierStatistic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TierStatistic::IsInitialized() const {
  return true;
}

void TierStatistic::InternalSwap(TierStatistic* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TierStatistic, _impl_.count_)
      + sizeof(TierStatistic::_impl_.count_)
      - PROTOBUF_FIELD_OFFSET(TierStatistic, _impl_.tier_)>(
          reinterpret_cast<char*>(&_impl_.tier_),
          reinterpret_cast<char*>(&other->_impl_.tier_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TierStatistic::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2fquery_2eproto[107]);
}
// ===================================================================

class QueryFeeDiscountTierStatisticsResponse::_Internal {
 public:
};

QueryFeeDiscountTierStatisticsResponse::QueryFeeDiscountTierStatisticsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.QueryFeeDiscountTierStatisticsResponse)
}
QueryFeeDiscountTierStatisticsResponse::QueryFeeDiscountTierStatisticsResponse(const QueryFeeDiscountTierStatisticsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryFeeDiscountTierStatisticsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.statistics_){from._impl_.statistics_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.QueryFeeDiscountTierStatisticsResponse)
}

inline void QueryFeeDiscountTierStatisticsResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.statistics_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

QueryFeeDiscountTierStatisticsResponse::~QueryFeeDiscountTierStatisticsResponse() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.QueryFeeDiscountTierStatisticsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryFeeDiscountTierStatisticsResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_statistics()->~RepeatedPtrField();
}

void QueryFeeDiscountTierStatisticsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryFeeDiscountTierStatisticsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.QueryFeeDiscountTierStatisticsResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_statistics()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryFeeDiscountTierStatisticsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .injective.exchange.v1beta1.TierStatistic statistics = 1 [json_name = "statistics"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_statistics(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryFeeDiscountTierStatisticsResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.QueryFeeDiscountTierStatisticsResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .injective.exchange.v1beta1.TierStatistic statistics = 1 [json_name = "statistics"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_statistics_size()); i < n; i++) {
    const auto& repfield = this->_internal_statistics(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.QueryFeeDiscountTierStatisticsResponse)
  return target;
}

::size_t QueryFeeDiscountTierStatisticsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.QueryFeeDiscountTierStatisticsResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .injective.exchange.v1beta1.TierStatistic statistics = 1 [json_name = "statistics"];
  total_size += 1UL * this->_internal_statistics_size();
  for (const auto& msg : this->_internal_statistics()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryFeeDiscountTierStatisticsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryFeeDiscountTierStatisticsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryFeeDiscountTierStatisticsResponse::GetClassData() const { return &_class_data_; }


void QueryFeeDiscountTierStatisticsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryFeeDiscountTierStatisticsResponse*>(&to_msg);
  auto& from = static_cast<const QueryFeeDiscountTierStatisticsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.QueryFeeDiscountTierStatisticsResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_statistics()->MergeFrom(from._internal_statistics());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryFeeDiscountTierStatisticsResponse::CopyFrom(const QueryFeeDiscountTierStatisticsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.QueryFeeDiscountTierStatisticsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryFeeDiscountTierStatisticsResponse::IsInitialized() const {
  return true;
}

void QueryFeeDiscountTierStatisticsResponse::InternalSwap(QueryFeeDiscountTierStatisticsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_statistics()->InternalSwap(other->_internal_mutable_statistics());
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryFeeDiscountTierStatisticsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2fquery_2eproto[108]);
}
// ===================================================================

class MitoVaultInfosRequest::_Internal {
 public:
};

MitoVaultInfosRequest::MitoVaultInfosRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.MitoVaultInfosRequest)
}
MitoVaultInfosRequest::MitoVaultInfosRequest(const MitoVaultInfosRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  MitoVaultInfosRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.MitoVaultInfosRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MitoVaultInfosRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MitoVaultInfosRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata MitoVaultInfosRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2fquery_2eproto[109]);
}
// ===================================================================

class MitoVaultInfosResponse::_Internal {
 public:
};

MitoVaultInfosResponse::MitoVaultInfosResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.MitoVaultInfosResponse)
}
MitoVaultInfosResponse::MitoVaultInfosResponse(const MitoVaultInfosResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MitoVaultInfosResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.master_addresses_){from._impl_.master_addresses_}
    , decltype(_impl_.derivative_addresses_){from._impl_.derivative_addresses_}
    , decltype(_impl_.spot_addresses_){from._impl_.spot_addresses_}
    , decltype(_impl_.cw20_addresses_){from._impl_.cw20_addresses_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.MitoVaultInfosResponse)
}

inline void MitoVaultInfosResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.master_addresses_){arena}
    , decltype(_impl_.derivative_addresses_){arena}
    , decltype(_impl_.spot_addresses_){arena}
    , decltype(_impl_.cw20_addresses_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MitoVaultInfosResponse::~MitoVaultInfosResponse() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.MitoVaultInfosResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MitoVaultInfosResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_master_addresses()->~RepeatedPtrField();
  _internal_mutable_derivative_addresses()->~RepeatedPtrField();
  _internal_mutable_spot_addresses()->~RepeatedPtrField();
  _internal_mutable_cw20_addresses()->~RepeatedPtrField();
}

void MitoVaultInfosResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MitoVaultInfosResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.MitoVaultInfosResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_master_addresses()->Clear();
  _internal_mutable_derivative_addresses()->Clear();
  _internal_mutable_spot_addresses()->Clear();
  _internal_mutable_cw20_addresses()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MitoVaultInfosResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string master_addresses = 1 [json_name = "masterAddresses"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_master_addresses();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.MitoVaultInfosResponse.master_addresses"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string derivative_addresses = 2 [json_name = "derivativeAddresses"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_derivative_addresses();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.MitoVaultInfosResponse.derivative_addresses"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string spot_addresses = 3 [json_name = "spotAddresses"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_spot_addresses();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.MitoVaultInfosResponse.spot_addresses"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string cw20_addresses = 4 [json_name = "cw20Addresses"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_cw20_addresses();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.MitoVaultInfosResponse.cw20_addresses"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MitoVaultInfosResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.MitoVaultInfosResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string master_addresses = 1 [json_name = "masterAddresses"];
  for (int i = 0, n = this->_internal_master_addresses_size(); i < n; ++i) {
    const auto& s = this->_internal_master_addresses(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.MitoVaultInfosResponse.master_addresses");
    target = stream->WriteString(1, s, target);
  }

  // repeated string derivative_addresses = 2 [json_name = "derivativeAddresses"];
  for (int i = 0, n = this->_internal_derivative_addresses_size(); i < n; ++i) {
    const auto& s = this->_internal_derivative_addresses(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.MitoVaultInfosResponse.derivative_addresses");
    target = stream->WriteString(2, s, target);
  }

  // repeated string spot_addresses = 3 [json_name = "spotAddresses"];
  for (int i = 0, n = this->_internal_spot_addresses_size(); i < n; ++i) {
    const auto& s = this->_internal_spot_addresses(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.MitoVaultInfosResponse.spot_addresses");
    target = stream->WriteString(3, s, target);
  }

  // repeated string cw20_addresses = 4 [json_name = "cw20Addresses"];
  for (int i = 0, n = this->_internal_cw20_addresses_size(); i < n; ++i) {
    const auto& s = this->_internal_cw20_addresses(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.MitoVaultInfosResponse.cw20_addresses");
    target = stream->WriteString(4, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.MitoVaultInfosResponse)
  return target;
}

::size_t MitoVaultInfosResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.MitoVaultInfosResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string master_addresses = 1 [json_name = "masterAddresses"];
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_master_addresses().size());
  for (int i = 0, n = _internal_master_addresses().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_master_addresses().Get(i));
  }

  // repeated string derivative_addresses = 2 [json_name = "derivativeAddresses"];
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_derivative_addresses().size());
  for (int i = 0, n = _internal_derivative_addresses().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_derivative_addresses().Get(i));
  }

  // repeated string spot_addresses = 3 [json_name = "spotAddresses"];
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_spot_addresses().size());
  for (int i = 0, n = _internal_spot_addresses().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_spot_addresses().Get(i));
  }

  // repeated string cw20_addresses = 4 [json_name = "cw20Addresses"];
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_cw20_addresses().size());
  for (int i = 0, n = _internal_cw20_addresses().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_cw20_addresses().Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MitoVaultInfosResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MitoVaultInfosResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MitoVaultInfosResponse::GetClassData() const { return &_class_data_; }


void MitoVaultInfosResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MitoVaultInfosResponse*>(&to_msg);
  auto& from = static_cast<const MitoVaultInfosResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.MitoVaultInfosResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_master_addresses()->MergeFrom(from._internal_master_addresses());
  _this->_internal_mutable_derivative_addresses()->MergeFrom(from._internal_derivative_addresses());
  _this->_internal_mutable_spot_addresses()->MergeFrom(from._internal_spot_addresses());
  _this->_internal_mutable_cw20_addresses()->MergeFrom(from._internal_cw20_addresses());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MitoVaultInfosResponse::CopyFrom(const MitoVaultInfosResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.MitoVaultInfosResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MitoVaultInfosResponse::IsInitialized() const {
  return true;
}

void MitoVaultInfosResponse::InternalSwap(MitoVaultInfosResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_master_addresses()->InternalSwap(
      other->_internal_mutable_master_addresses());
  _internal_mutable_derivative_addresses()->InternalSwap(
      other->_internal_mutable_derivative_addresses());
  _internal_mutable_spot_addresses()->InternalSwap(
      other->_internal_mutable_spot_addresses());
  _internal_mutable_cw20_addresses()->InternalSwap(
      other->_internal_mutable_cw20_addresses());
}

::PROTOBUF_NAMESPACE_ID::Metadata MitoVaultInfosResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2fquery_2eproto[110]);
}
// ===================================================================

class QueryMarketIDFromVaultRequest::_Internal {
 public:
};

QueryMarketIDFromVaultRequest::QueryMarketIDFromVaultRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.QueryMarketIDFromVaultRequest)
}
QueryMarketIDFromVaultRequest::QueryMarketIDFromVaultRequest(const QueryMarketIDFromVaultRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryMarketIDFromVaultRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.vault_address_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.vault_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.vault_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_vault_address().empty()) {
    _this->_impl_.vault_address_.Set(from._internal_vault_address(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.QueryMarketIDFromVaultRequest)
}

inline void QueryMarketIDFromVaultRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.vault_address_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.vault_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.vault_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

QueryMarketIDFromVaultRequest::~QueryMarketIDFromVaultRequest() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.QueryMarketIDFromVaultRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryMarketIDFromVaultRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.vault_address_.Destroy();
}

void QueryMarketIDFromVaultRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryMarketIDFromVaultRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.QueryMarketIDFromVaultRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.vault_address_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryMarketIDFromVaultRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string vault_address = 1 [json_name = "vaultAddress"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_vault_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.QueryMarketIDFromVaultRequest.vault_address"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryMarketIDFromVaultRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.QueryMarketIDFromVaultRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string vault_address = 1 [json_name = "vaultAddress"];
  if (!this->_internal_vault_address().empty()) {
    const std::string& _s = this->_internal_vault_address();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.QueryMarketIDFromVaultRequest.vault_address");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.QueryMarketIDFromVaultRequest)
  return target;
}

::size_t QueryMarketIDFromVaultRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.QueryMarketIDFromVaultRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string vault_address = 1 [json_name = "vaultAddress"];
  if (!this->_internal_vault_address().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_vault_address());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryMarketIDFromVaultRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryMarketIDFromVaultRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryMarketIDFromVaultRequest::GetClassData() const { return &_class_data_; }


void QueryMarketIDFromVaultRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryMarketIDFromVaultRequest*>(&to_msg);
  auto& from = static_cast<const QueryMarketIDFromVaultRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.QueryMarketIDFromVaultRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_vault_address().empty()) {
    _this->_internal_set_vault_address(from._internal_vault_address());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryMarketIDFromVaultRequest::CopyFrom(const QueryMarketIDFromVaultRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.QueryMarketIDFromVaultRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryMarketIDFromVaultRequest::IsInitialized() const {
  return true;
}

void QueryMarketIDFromVaultRequest::InternalSwap(QueryMarketIDFromVaultRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.vault_address_, lhs_arena,
                                       &other->_impl_.vault_address_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryMarketIDFromVaultRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2fquery_2eproto[111]);
}
// ===================================================================

class QueryMarketIDFromVaultResponse::_Internal {
 public:
};

QueryMarketIDFromVaultResponse::QueryMarketIDFromVaultResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.QueryMarketIDFromVaultResponse)
}
QueryMarketIDFromVaultResponse::QueryMarketIDFromVaultResponse(const QueryMarketIDFromVaultResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryMarketIDFromVaultResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.market_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_market_id().empty()) {
    _this->_impl_.market_id_.Set(from._internal_market_id(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.QueryMarketIDFromVaultResponse)
}

inline void QueryMarketIDFromVaultResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.market_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

QueryMarketIDFromVaultResponse::~QueryMarketIDFromVaultResponse() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.QueryMarketIDFromVaultResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryMarketIDFromVaultResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.market_id_.Destroy();
}

void QueryMarketIDFromVaultResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryMarketIDFromVaultResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.QueryMarketIDFromVaultResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.market_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryMarketIDFromVaultResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string market_id = 1 [json_name = "marketId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_market_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.QueryMarketIDFromVaultResponse.market_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryMarketIDFromVaultResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.QueryMarketIDFromVaultResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string market_id = 1 [json_name = "marketId"];
  if (!this->_internal_market_id().empty()) {
    const std::string& _s = this->_internal_market_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.QueryMarketIDFromVaultResponse.market_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.QueryMarketIDFromVaultResponse)
  return target;
}

::size_t QueryMarketIDFromVaultResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.QueryMarketIDFromVaultResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string market_id = 1 [json_name = "marketId"];
  if (!this->_internal_market_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_market_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryMarketIDFromVaultResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryMarketIDFromVaultResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryMarketIDFromVaultResponse::GetClassData() const { return &_class_data_; }


void QueryMarketIDFromVaultResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryMarketIDFromVaultResponse*>(&to_msg);
  auto& from = static_cast<const QueryMarketIDFromVaultResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.QueryMarketIDFromVaultResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_market_id().empty()) {
    _this->_internal_set_market_id(from._internal_market_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryMarketIDFromVaultResponse::CopyFrom(const QueryMarketIDFromVaultResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.QueryMarketIDFromVaultResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryMarketIDFromVaultResponse::IsInitialized() const {
  return true;
}

void QueryMarketIDFromVaultResponse::InternalSwap(QueryMarketIDFromVaultResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.market_id_, lhs_arena,
                                       &other->_impl_.market_id_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryMarketIDFromVaultResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2fquery_2eproto[112]);
}
// ===================================================================

class QueryHistoricalTradeRecordsRequest::_Internal {
 public:
};

QueryHistoricalTradeRecordsRequest::QueryHistoricalTradeRecordsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.QueryHistoricalTradeRecordsRequest)
}
QueryHistoricalTradeRecordsRequest::QueryHistoricalTradeRecordsRequest(const QueryHistoricalTradeRecordsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryHistoricalTradeRecordsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.market_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_market_id().empty()) {
    _this->_impl_.market_id_.Set(from._internal_market_id(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.QueryHistoricalTradeRecordsRequest)
}

inline void QueryHistoricalTradeRecordsRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.market_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

QueryHistoricalTradeRecordsRequest::~QueryHistoricalTradeRecordsRequest() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.QueryHistoricalTradeRecordsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryHistoricalTradeRecordsRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.market_id_.Destroy();
}

void QueryHistoricalTradeRecordsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryHistoricalTradeRecordsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.QueryHistoricalTradeRecordsRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.market_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryHistoricalTradeRecordsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string market_id = 1 [json_name = "marketId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_market_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.QueryHistoricalTradeRecordsRequest.market_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryHistoricalTradeRecordsRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.QueryHistoricalTradeRecordsRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string market_id = 1 [json_name = "marketId"];
  if (!this->_internal_market_id().empty()) {
    const std::string& _s = this->_internal_market_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.QueryHistoricalTradeRecordsRequest.market_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.QueryHistoricalTradeRecordsRequest)
  return target;
}

::size_t QueryHistoricalTradeRecordsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.QueryHistoricalTradeRecordsRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string market_id = 1 [json_name = "marketId"];
  if (!this->_internal_market_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_market_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryHistoricalTradeRecordsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryHistoricalTradeRecordsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryHistoricalTradeRecordsRequest::GetClassData() const { return &_class_data_; }


void QueryHistoricalTradeRecordsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryHistoricalTradeRecordsRequest*>(&to_msg);
  auto& from = static_cast<const QueryHistoricalTradeRecordsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.QueryHistoricalTradeRecordsRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_market_id().empty()) {
    _this->_internal_set_market_id(from._internal_market_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryHistoricalTradeRecordsRequest::CopyFrom(const QueryHistoricalTradeRecordsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.QueryHistoricalTradeRecordsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryHistoricalTradeRecordsRequest::IsInitialized() const {
  return true;
}

void QueryHistoricalTradeRecordsRequest::InternalSwap(QueryHistoricalTradeRecordsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.market_id_, lhs_arena,
                                       &other->_impl_.market_id_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryHistoricalTradeRecordsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2fquery_2eproto[113]);
}
// ===================================================================

class QueryHistoricalTradeRecordsResponse::_Internal {
 public:
};

void QueryHistoricalTradeRecordsResponse::clear_trade_records() {
  _internal_mutable_trade_records()->Clear();
}
QueryHistoricalTradeRecordsResponse::QueryHistoricalTradeRecordsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.QueryHistoricalTradeRecordsResponse)
}
QueryHistoricalTradeRecordsResponse::QueryHistoricalTradeRecordsResponse(const QueryHistoricalTradeRecordsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryHistoricalTradeRecordsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.trade_records_){from._impl_.trade_records_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.QueryHistoricalTradeRecordsResponse)
}

inline void QueryHistoricalTradeRecordsResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.trade_records_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

QueryHistoricalTradeRecordsResponse::~QueryHistoricalTradeRecordsResponse() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.QueryHistoricalTradeRecordsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryHistoricalTradeRecordsResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_trade_records()->~RepeatedPtrField();
}

void QueryHistoricalTradeRecordsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryHistoricalTradeRecordsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.QueryHistoricalTradeRecordsResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_trade_records()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryHistoricalTradeRecordsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .injective.exchange.v1beta1.TradeRecords trade_records = 1 [json_name = "tradeRecords"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_trade_records(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryHistoricalTradeRecordsResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.QueryHistoricalTradeRecordsResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .injective.exchange.v1beta1.TradeRecords trade_records = 1 [json_name = "tradeRecords"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_trade_records_size()); i < n; i++) {
    const auto& repfield = this->_internal_trade_records(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.QueryHistoricalTradeRecordsResponse)
  return target;
}

::size_t QueryHistoricalTradeRecordsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.QueryHistoricalTradeRecordsResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .injective.exchange.v1beta1.TradeRecords trade_records = 1 [json_name = "tradeRecords"];
  total_size += 1UL * this->_internal_trade_records_size();
  for (const auto& msg : this->_internal_trade_records()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryHistoricalTradeRecordsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryHistoricalTradeRecordsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryHistoricalTradeRecordsResponse::GetClassData() const { return &_class_data_; }


void QueryHistoricalTradeRecordsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryHistoricalTradeRecordsResponse*>(&to_msg);
  auto& from = static_cast<const QueryHistoricalTradeRecordsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.QueryHistoricalTradeRecordsResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_trade_records()->MergeFrom(from._internal_trade_records());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryHistoricalTradeRecordsResponse::CopyFrom(const QueryHistoricalTradeRecordsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.QueryHistoricalTradeRecordsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryHistoricalTradeRecordsResponse::IsInitialized() const {
  return true;
}

void QueryHistoricalTradeRecordsResponse::InternalSwap(QueryHistoricalTradeRecordsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_trade_records()->InternalSwap(other->_internal_mutable_trade_records());
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryHistoricalTradeRecordsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2fquery_2eproto[114]);
}
// ===================================================================

class TradeHistoryOptions::_Internal {
 public:
};

TradeHistoryOptions::TradeHistoryOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.TradeHistoryOptions)
}
TradeHistoryOptions::TradeHistoryOptions(const TradeHistoryOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.TradeHistoryOptions)
}

inline void TradeHistoryOptions::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.trade_grouping_sec_) { ::uint64_t{0u} }

    , decltype(_impl_.max_age_) { ::uint64_t{0u} }

    , decltype(_impl_.include_raw_history_) { false }

    , decltype(_impl_.include_metadata_) { false }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TradeHistoryOptions::~TradeHistoryOptions() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.TradeHistoryOptions)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TradeHistoryOptions::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void TradeHistoryOptions::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TradeHistoryOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.TradeHistoryOptions)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.trade_grouping_sec_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.include_metadata_) -
      reinterpret_cast<char*>(&_impl_.trade_grouping_sec_)) + sizeof(_impl_.include_metadata_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TradeHistoryOptions::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 trade_grouping_sec = 1 [json_name = "tradeGroupingSec"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.trade_grouping_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 max_age = 2 [json_name = "maxAge"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.max_age_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bool include_raw_history = 4 [json_name = "includeRawHistory"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _impl_.include_raw_history_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bool include_metadata = 5 [json_name = "includeMetadata"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _impl_.include_metadata_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* TradeHistoryOptions::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.TradeHistoryOptions)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 trade_grouping_sec = 1 [json_name = "tradeGroupingSec"];
  if (this->_internal_trade_grouping_sec() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_trade_grouping_sec(), target);
  }

  // uint64 max_age = 2 [json_name = "maxAge"];
  if (this->_internal_max_age() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_max_age(), target);
  }

  // bool include_raw_history = 4 [json_name = "includeRawHistory"];
  if (this->_internal_include_raw_history() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        4, this->_internal_include_raw_history(), target);
  }

  // bool include_metadata = 5 [json_name = "includeMetadata"];
  if (this->_internal_include_metadata() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        5, this->_internal_include_metadata(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.TradeHistoryOptions)
  return target;
}

::size_t TradeHistoryOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.TradeHistoryOptions)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 trade_grouping_sec = 1 [json_name = "tradeGroupingSec"];
  if (this->_internal_trade_grouping_sec() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_trade_grouping_sec());
  }

  // uint64 max_age = 2 [json_name = "maxAge"];
  if (this->_internal_max_age() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_max_age());
  }

  // bool include_raw_history = 4 [json_name = "includeRawHistory"];
  if (this->_internal_include_raw_history() != 0) {
    total_size += 2;
  }

  // bool include_metadata = 5 [json_name = "includeMetadata"];
  if (this->_internal_include_metadata() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TradeHistoryOptions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TradeHistoryOptions::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TradeHistoryOptions::GetClassData() const { return &_class_data_; }


void TradeHistoryOptions::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TradeHistoryOptions*>(&to_msg);
  auto& from = static_cast<const TradeHistoryOptions&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.TradeHistoryOptions)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_trade_grouping_sec() != 0) {
    _this->_internal_set_trade_grouping_sec(from._internal_trade_grouping_sec());
  }
  if (from._internal_max_age() != 0) {
    _this->_internal_set_max_age(from._internal_max_age());
  }
  if (from._internal_include_raw_history() != 0) {
    _this->_internal_set_include_raw_history(from._internal_include_raw_history());
  }
  if (from._internal_include_metadata() != 0) {
    _this->_internal_set_include_metadata(from._internal_include_metadata());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TradeHistoryOptions::CopyFrom(const TradeHistoryOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.TradeHistoryOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TradeHistoryOptions::IsInitialized() const {
  return true;
}

void TradeHistoryOptions::InternalSwap(TradeHistoryOptions* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TradeHistoryOptions, _impl_.include_metadata_)
      + sizeof(TradeHistoryOptions::_impl_.include_metadata_)
      - PROTOBUF_FIELD_OFFSET(TradeHistoryOptions, _impl_.trade_grouping_sec_)>(
          reinterpret_cast<char*>(&_impl_.trade_grouping_sec_),
          reinterpret_cast<char*>(&other->_impl_.trade_grouping_sec_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TradeHistoryOptions::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2fquery_2eproto[115]);
}
// ===================================================================

class QueryMarketVolatilityRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<QueryMarketVolatilityRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(QueryMarketVolatilityRequest, _impl_._has_bits_);
  static const ::injective::exchange::v1beta1::TradeHistoryOptions& trade_history_options(const QueryMarketVolatilityRequest* msg);
  static void set_has_trade_history_options(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::injective::exchange::v1beta1::TradeHistoryOptions&
QueryMarketVolatilityRequest::_Internal::trade_history_options(const QueryMarketVolatilityRequest* msg) {
  return *msg->_impl_.trade_history_options_;
}
QueryMarketVolatilityRequest::QueryMarketVolatilityRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.QueryMarketVolatilityRequest)
}
QueryMarketVolatilityRequest::QueryMarketVolatilityRequest(const QueryMarketVolatilityRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryMarketVolatilityRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.market_id_) {}

    , decltype(_impl_.trade_history_options_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_market_id().empty()) {
    _this->_impl_.market_id_.Set(from._internal_market_id(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.trade_history_options_ = new ::injective::exchange::v1beta1::TradeHistoryOptions(*from._impl_.trade_history_options_);
  }
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.QueryMarketVolatilityRequest)
}

inline void QueryMarketVolatilityRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.market_id_) {}

    , decltype(_impl_.trade_history_options_){nullptr}
  };
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

QueryMarketVolatilityRequest::~QueryMarketVolatilityRequest() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.QueryMarketVolatilityRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryMarketVolatilityRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.market_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.trade_history_options_;
}

void QueryMarketVolatilityRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryMarketVolatilityRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.QueryMarketVolatilityRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.market_id_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.trade_history_options_ != nullptr);
    _impl_.trade_history_options_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryMarketVolatilityRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string market_id = 1 [json_name = "marketId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_market_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.QueryMarketVolatilityRequest.market_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .injective.exchange.v1beta1.TradeHistoryOptions trade_history_options = 2 [json_name = "tradeHistoryOptions"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_trade_history_options(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryMarketVolatilityRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.QueryMarketVolatilityRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string market_id = 1 [json_name = "marketId"];
  if (!this->_internal_market_id().empty()) {
    const std::string& _s = this->_internal_market_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.QueryMarketVolatilityRequest.market_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .injective.exchange.v1beta1.TradeHistoryOptions trade_history_options = 2 [json_name = "tradeHistoryOptions"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::trade_history_options(this),
        _Internal::trade_history_options(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.QueryMarketVolatilityRequest)
  return target;
}

::size_t QueryMarketVolatilityRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.QueryMarketVolatilityRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string market_id = 1 [json_name = "marketId"];
  if (!this->_internal_market_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_market_id());
  }

  // .injective.exchange.v1beta1.TradeHistoryOptions trade_history_options = 2 [json_name = "tradeHistoryOptions"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.trade_history_options_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryMarketVolatilityRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryMarketVolatilityRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryMarketVolatilityRequest::GetClassData() const { return &_class_data_; }


void QueryMarketVolatilityRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryMarketVolatilityRequest*>(&to_msg);
  auto& from = static_cast<const QueryMarketVolatilityRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.QueryMarketVolatilityRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_market_id().empty()) {
    _this->_internal_set_market_id(from._internal_market_id());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_trade_history_options()->::injective::exchange::v1beta1::TradeHistoryOptions::MergeFrom(
        from._internal_trade_history_options());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryMarketVolatilityRequest::CopyFrom(const QueryMarketVolatilityRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.QueryMarketVolatilityRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryMarketVolatilityRequest::IsInitialized() const {
  return true;
}

void QueryMarketVolatilityRequest::InternalSwap(QueryMarketVolatilityRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.market_id_, lhs_arena,
                                       &other->_impl_.market_id_, rhs_arena);
  swap(_impl_.trade_history_options_, other->_impl_.trade_history_options_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryMarketVolatilityRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2fquery_2eproto[116]);
}
// ===================================================================

class QueryMarketVolatilityResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<QueryMarketVolatilityResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(QueryMarketVolatilityResponse, _impl_._has_bits_);
  static const ::injective::oracle::v1beta1::MetadataStatistics& history_metadata(const QueryMarketVolatilityResponse* msg);
  static void set_has_history_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::injective::oracle::v1beta1::MetadataStatistics&
QueryMarketVolatilityResponse::_Internal::history_metadata(const QueryMarketVolatilityResponse* msg) {
  return *msg->_impl_.history_metadata_;
}
void QueryMarketVolatilityResponse::clear_history_metadata() {
  if (_impl_.history_metadata_ != nullptr) _impl_.history_metadata_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void QueryMarketVolatilityResponse::clear_raw_history() {
  _internal_mutable_raw_history()->Clear();
}
QueryMarketVolatilityResponse::QueryMarketVolatilityResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.QueryMarketVolatilityResponse)
}
QueryMarketVolatilityResponse::QueryMarketVolatilityResponse(const QueryMarketVolatilityResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryMarketVolatilityResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.raw_history_){from._impl_.raw_history_}
    , decltype(_impl_.volatility_) {}

    , decltype(_impl_.history_metadata_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.volatility_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.volatility_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_volatility().empty()) {
    _this->_impl_.volatility_.Set(from._internal_volatility(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.history_metadata_ = new ::injective::oracle::v1beta1::MetadataStatistics(*from._impl_.history_metadata_);
  }
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.QueryMarketVolatilityResponse)
}

inline void QueryMarketVolatilityResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.raw_history_){arena}
    , decltype(_impl_.volatility_) {}

    , decltype(_impl_.history_metadata_){nullptr}
  };
  _impl_.volatility_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.volatility_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

QueryMarketVolatilityResponse::~QueryMarketVolatilityResponse() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.QueryMarketVolatilityResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryMarketVolatilityResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_raw_history()->~RepeatedPtrField();
  _impl_.volatility_.Destroy();
  if (this != internal_default_instance()) delete _impl_.history_metadata_;
}

void QueryMarketVolatilityResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryMarketVolatilityResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.QueryMarketVolatilityResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_raw_history()->Clear();
  _impl_.volatility_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.history_metadata_ != nullptr);
    _impl_.history_metadata_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryMarketVolatilityResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string volatility = 1 [json_name = "volatility", (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_volatility();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.QueryMarketVolatilityResponse.volatility"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .injective.oracle.v1beta1.MetadataStatistics history_metadata = 2 [json_name = "historyMetadata"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_history_metadata(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .injective.exchange.v1beta1.TradeRecord raw_history = 3 [json_name = "rawHistory"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_raw_history(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryMarketVolatilityResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.QueryMarketVolatilityResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string volatility = 1 [json_name = "volatility", (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_volatility().empty()) {
    const std::string& _s = this->_internal_volatility();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.QueryMarketVolatilityResponse.volatility");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .injective.oracle.v1beta1.MetadataStatistics history_metadata = 2 [json_name = "historyMetadata"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::history_metadata(this),
        _Internal::history_metadata(this).GetCachedSize(), target, stream);
  }

  // repeated .injective.exchange.v1beta1.TradeRecord raw_history = 3 [json_name = "rawHistory"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_raw_history_size()); i < n; i++) {
    const auto& repfield = this->_internal_raw_history(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.QueryMarketVolatilityResponse)
  return target;
}

::size_t QueryMarketVolatilityResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.QueryMarketVolatilityResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .injective.exchange.v1beta1.TradeRecord raw_history = 3 [json_name = "rawHistory"];
  total_size += 1UL * this->_internal_raw_history_size();
  for (const auto& msg : this->_internal_raw_history()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string volatility = 1 [json_name = "volatility", (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_volatility().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_volatility());
  }

  // .injective.oracle.v1beta1.MetadataStatistics history_metadata = 2 [json_name = "historyMetadata"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.history_metadata_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryMarketVolatilityResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryMarketVolatilityResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryMarketVolatilityResponse::GetClassData() const { return &_class_data_; }


void QueryMarketVolatilityResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryMarketVolatilityResponse*>(&to_msg);
  auto& from = static_cast<const QueryMarketVolatilityResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.QueryMarketVolatilityResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_raw_history()->MergeFrom(from._internal_raw_history());
  if (!from._internal_volatility().empty()) {
    _this->_internal_set_volatility(from._internal_volatility());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_history_metadata()->::injective::oracle::v1beta1::MetadataStatistics::MergeFrom(
        from._internal_history_metadata());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryMarketVolatilityResponse::CopyFrom(const QueryMarketVolatilityResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.QueryMarketVolatilityResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryMarketVolatilityResponse::IsInitialized() const {
  return true;
}

void QueryMarketVolatilityResponse::InternalSwap(QueryMarketVolatilityResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_raw_history()->InternalSwap(other->_internal_mutable_raw_history());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.volatility_, lhs_arena,
                                       &other->_impl_.volatility_, rhs_arena);
  swap(_impl_.history_metadata_, other->_impl_.history_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryMarketVolatilityResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2fquery_2eproto[117]);
}
// ===================================================================

class QueryBinaryMarketsRequest::_Internal {
 public:
};

QueryBinaryMarketsRequest::QueryBinaryMarketsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.QueryBinaryMarketsRequest)
}
QueryBinaryMarketsRequest::QueryBinaryMarketsRequest(const QueryBinaryMarketsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryBinaryMarketsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.status_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.status_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.status_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_status().empty()) {
    _this->_impl_.status_.Set(from._internal_status(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.QueryBinaryMarketsRequest)
}

inline void QueryBinaryMarketsRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.status_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.status_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.status_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

QueryBinaryMarketsRequest::~QueryBinaryMarketsRequest() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.QueryBinaryMarketsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryBinaryMarketsRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.status_.Destroy();
}

void QueryBinaryMarketsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryBinaryMarketsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.QueryBinaryMarketsRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.status_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryBinaryMarketsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string status = 1 [json_name = "status"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_status();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.QueryBinaryMarketsRequest.status"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryBinaryMarketsRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.QueryBinaryMarketsRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string status = 1 [json_name = "status"];
  if (!this->_internal_status().empty()) {
    const std::string& _s = this->_internal_status();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.QueryBinaryMarketsRequest.status");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.QueryBinaryMarketsRequest)
  return target;
}

::size_t QueryBinaryMarketsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.QueryBinaryMarketsRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string status = 1 [json_name = "status"];
  if (!this->_internal_status().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryBinaryMarketsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryBinaryMarketsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryBinaryMarketsRequest::GetClassData() const { return &_class_data_; }


void QueryBinaryMarketsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryBinaryMarketsRequest*>(&to_msg);
  auto& from = static_cast<const QueryBinaryMarketsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.QueryBinaryMarketsRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_status().empty()) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryBinaryMarketsRequest::CopyFrom(const QueryBinaryMarketsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.QueryBinaryMarketsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryBinaryMarketsRequest::IsInitialized() const {
  return true;
}

void QueryBinaryMarketsRequest::InternalSwap(QueryBinaryMarketsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.status_, lhs_arena,
                                       &other->_impl_.status_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryBinaryMarketsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2fquery_2eproto[118]);
}
// ===================================================================

class QueryBinaryMarketsResponse::_Internal {
 public:
};

void QueryBinaryMarketsResponse::clear_markets() {
  _internal_mutable_markets()->Clear();
}
QueryBinaryMarketsResponse::QueryBinaryMarketsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.QueryBinaryMarketsResponse)
}
QueryBinaryMarketsResponse::QueryBinaryMarketsResponse(const QueryBinaryMarketsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryBinaryMarketsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.markets_){from._impl_.markets_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.QueryBinaryMarketsResponse)
}

inline void QueryBinaryMarketsResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.markets_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

QueryBinaryMarketsResponse::~QueryBinaryMarketsResponse() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.QueryBinaryMarketsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryBinaryMarketsResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_markets()->~RepeatedPtrField();
}

void QueryBinaryMarketsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryBinaryMarketsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.QueryBinaryMarketsResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_markets()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryBinaryMarketsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .injective.exchange.v1beta1.BinaryOptionsMarket markets = 1 [json_name = "markets"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_markets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryBinaryMarketsResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.QueryBinaryMarketsResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .injective.exchange.v1beta1.BinaryOptionsMarket markets = 1 [json_name = "markets"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_markets_size()); i < n; i++) {
    const auto& repfield = this->_internal_markets(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.QueryBinaryMarketsResponse)
  return target;
}

::size_t QueryBinaryMarketsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.QueryBinaryMarketsResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .injective.exchange.v1beta1.BinaryOptionsMarket markets = 1 [json_name = "markets"];
  total_size += 1UL * this->_internal_markets_size();
  for (const auto& msg : this->_internal_markets()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryBinaryMarketsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryBinaryMarketsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryBinaryMarketsResponse::GetClassData() const { return &_class_data_; }


void QueryBinaryMarketsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryBinaryMarketsResponse*>(&to_msg);
  auto& from = static_cast<const QueryBinaryMarketsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.QueryBinaryMarketsResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_markets()->MergeFrom(from._internal_markets());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryBinaryMarketsResponse::CopyFrom(const QueryBinaryMarketsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.QueryBinaryMarketsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryBinaryMarketsResponse::IsInitialized() const {
  return true;
}

void QueryBinaryMarketsResponse::InternalSwap(QueryBinaryMarketsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_markets()->InternalSwap(other->_internal_mutable_markets());
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryBinaryMarketsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2fquery_2eproto[119]);
}
// ===================================================================

class QueryTraderDerivativeConditionalOrdersRequest::_Internal {
 public:
};

QueryTraderDerivativeConditionalOrdersRequest::QueryTraderDerivativeConditionalOrdersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.QueryTraderDerivativeConditionalOrdersRequest)
}
QueryTraderDerivativeConditionalOrdersRequest::QueryTraderDerivativeConditionalOrdersRequest(const QueryTraderDerivativeConditionalOrdersRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryTraderDerivativeConditionalOrdersRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.subaccount_id_) {}

    , decltype(_impl_.market_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.subaccount_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.subaccount_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_subaccount_id().empty()) {
    _this->_impl_.subaccount_id_.Set(from._internal_subaccount_id(), _this->GetArenaForAllocation());
  }
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_market_id().empty()) {
    _this->_impl_.market_id_.Set(from._internal_market_id(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.QueryTraderDerivativeConditionalOrdersRequest)
}

inline void QueryTraderDerivativeConditionalOrdersRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.subaccount_id_) {}

    , decltype(_impl_.market_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.subaccount_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.subaccount_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

QueryTraderDerivativeConditionalOrdersRequest::~QueryTraderDerivativeConditionalOrdersRequest() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.QueryTraderDerivativeConditionalOrdersRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryTraderDerivativeConditionalOrdersRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.subaccount_id_.Destroy();
  _impl_.market_id_.Destroy();
}

void QueryTraderDerivativeConditionalOrdersRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryTraderDerivativeConditionalOrdersRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.QueryTraderDerivativeConditionalOrdersRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.subaccount_id_.ClearToEmpty();
  _impl_.market_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryTraderDerivativeConditionalOrdersRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string subaccount_id = 1 [json_name = "subaccountId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_subaccount_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.QueryTraderDerivativeConditionalOrdersRequest.subaccount_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string market_id = 2 [json_name = "marketId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_market_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.QueryTraderDerivativeConditionalOrdersRequest.market_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryTraderDerivativeConditionalOrdersRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.QueryTraderDerivativeConditionalOrdersRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string subaccount_id = 1 [json_name = "subaccountId"];
  if (!this->_internal_subaccount_id().empty()) {
    const std::string& _s = this->_internal_subaccount_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.QueryTraderDerivativeConditionalOrdersRequest.subaccount_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string market_id = 2 [json_name = "marketId"];
  if (!this->_internal_market_id().empty()) {
    const std::string& _s = this->_internal_market_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.QueryTraderDerivativeConditionalOrdersRequest.market_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.QueryTraderDerivativeConditionalOrdersRequest)
  return target;
}

::size_t QueryTraderDerivativeConditionalOrdersRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.QueryTraderDerivativeConditionalOrdersRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string subaccount_id = 1 [json_name = "subaccountId"];
  if (!this->_internal_subaccount_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_subaccount_id());
  }

  // string market_id = 2 [json_name = "marketId"];
  if (!this->_internal_market_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_market_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryTraderDerivativeConditionalOrdersRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryTraderDerivativeConditionalOrdersRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryTraderDerivativeConditionalOrdersRequest::GetClassData() const { return &_class_data_; }


void QueryTraderDerivativeConditionalOrdersRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryTraderDerivativeConditionalOrdersRequest*>(&to_msg);
  auto& from = static_cast<const QueryTraderDerivativeConditionalOrdersRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.QueryTraderDerivativeConditionalOrdersRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_subaccount_id().empty()) {
    _this->_internal_set_subaccount_id(from._internal_subaccount_id());
  }
  if (!from._internal_market_id().empty()) {
    _this->_internal_set_market_id(from._internal_market_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryTraderDerivativeConditionalOrdersRequest::CopyFrom(const QueryTraderDerivativeConditionalOrdersRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.QueryTraderDerivativeConditionalOrdersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryTraderDerivativeConditionalOrdersRequest::IsInitialized() const {
  return true;
}

void QueryTraderDerivativeConditionalOrdersRequest::InternalSwap(QueryTraderDerivativeConditionalOrdersRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.subaccount_id_, lhs_arena,
                                       &other->_impl_.subaccount_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.market_id_, lhs_arena,
                                       &other->_impl_.market_id_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryTraderDerivativeConditionalOrdersRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2fquery_2eproto[120]);
}
// ===================================================================

class TrimmedDerivativeConditionalOrder::_Internal {
 public:
};

TrimmedDerivativeConditionalOrder::TrimmedDerivativeConditionalOrder(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.TrimmedDerivativeConditionalOrder)
}
TrimmedDerivativeConditionalOrder::TrimmedDerivativeConditionalOrder(const TrimmedDerivativeConditionalOrder& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TrimmedDerivativeConditionalOrder* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.price_) {}

    , decltype(_impl_.quantity_) {}

    , decltype(_impl_.margin_) {}

    , decltype(_impl_.triggerprice_) {}

    , decltype(_impl_.order_hash_) {}

    , decltype(_impl_.isbuy_) {}

    , decltype(_impl_.islimit_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.price_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.price_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_price().empty()) {
    _this->_impl_.price_.Set(from._internal_price(), _this->GetArenaForAllocation());
  }
  _impl_.quantity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.quantity_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_quantity().empty()) {
    _this->_impl_.quantity_.Set(from._internal_quantity(), _this->GetArenaForAllocation());
  }
  _impl_.margin_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.margin_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_margin().empty()) {
    _this->_impl_.margin_.Set(from._internal_margin(), _this->GetArenaForAllocation());
  }
  _impl_.triggerprice_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.triggerprice_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_triggerprice().empty()) {
    _this->_impl_.triggerprice_.Set(from._internal_triggerprice(), _this->GetArenaForAllocation());
  }
  _impl_.order_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.order_hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_order_hash().empty()) {
    _this->_impl_.order_hash_.Set(from._internal_order_hash(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.isbuy_, &from._impl_.isbuy_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.islimit_) -
    reinterpret_cast<char*>(&_impl_.isbuy_)) + sizeof(_impl_.islimit_));
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.TrimmedDerivativeConditionalOrder)
}

inline void TrimmedDerivativeConditionalOrder::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.price_) {}

    , decltype(_impl_.quantity_) {}

    , decltype(_impl_.margin_) {}

    , decltype(_impl_.triggerprice_) {}

    , decltype(_impl_.order_hash_) {}

    , decltype(_impl_.isbuy_) { false }

    , decltype(_impl_.islimit_) { false }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.price_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.price_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.quantity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.quantity_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.margin_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.margin_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.triggerprice_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.triggerprice_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.order_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.order_hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TrimmedDerivativeConditionalOrder::~TrimmedDerivativeConditionalOrder() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.TrimmedDerivativeConditionalOrder)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TrimmedDerivativeConditionalOrder::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.price_.Destroy();
  _impl_.quantity_.Destroy();
  _impl_.margin_.Destroy();
  _impl_.triggerprice_.Destroy();
  _impl_.order_hash_.Destroy();
}

void TrimmedDerivativeConditionalOrder::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TrimmedDerivativeConditionalOrder::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.TrimmedDerivativeConditionalOrder)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.price_.ClearToEmpty();
  _impl_.quantity_.ClearToEmpty();
  _impl_.margin_.ClearToEmpty();
  _impl_.triggerprice_.ClearToEmpty();
  _impl_.order_hash_.ClearToEmpty();
  ::memset(&_impl_.isbuy_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.islimit_) -
      reinterpret_cast<char*>(&_impl_.isbuy_)) + sizeof(_impl_.islimit_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrimmedDerivativeConditionalOrder::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string price = 1 [json_name = "price", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_price();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.TrimmedDerivativeConditionalOrder.price"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string quantity = 2 [json_name = "quantity", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_quantity();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.TrimmedDerivativeConditionalOrder.quantity"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string margin = 3 [json_name = "margin", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_margin();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.TrimmedDerivativeConditionalOrder.margin"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string triggerPrice = 4 [json_name = "triggerPrice", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_triggerprice();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.TrimmedDerivativeConditionalOrder.triggerPrice"));
        } else {
          goto handle_unusual;
        }
        continue;
      // bool isBuy = 5 [json_name = "isBuy", (.gogoproto.jsontag) = "isBuy"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _impl_.isbuy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bool isLimit = 6 [json_name = "isLimit", (.gogoproto.jsontag) = "isLimit"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _impl_.islimit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string order_hash = 7 [json_name = "orderHash"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_order_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.TrimmedDerivativeConditionalOrder.order_hash"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* TrimmedDerivativeConditionalOrder::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.TrimmedDerivativeConditionalOrder)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string price = 1 [json_name = "price", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_price().empty()) {
    const std::string& _s = this->_internal_price();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.TrimmedDerivativeConditionalOrder.price");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string quantity = 2 [json_name = "quantity", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_quantity().empty()) {
    const std::string& _s = this->_internal_quantity();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.TrimmedDerivativeConditionalOrder.quantity");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string margin = 3 [json_name = "margin", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_margin().empty()) {
    const std::string& _s = this->_internal_margin();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.TrimmedDerivativeConditionalOrder.margin");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string triggerPrice = 4 [json_name = "triggerPrice", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_triggerprice().empty()) {
    const std::string& _s = this->_internal_triggerprice();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.TrimmedDerivativeConditionalOrder.triggerPrice");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // bool isBuy = 5 [json_name = "isBuy", (.gogoproto.jsontag) = "isBuy"];
  if (this->_internal_isbuy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        5, this->_internal_isbuy(), target);
  }

  // bool isLimit = 6 [json_name = "isLimit", (.gogoproto.jsontag) = "isLimit"];
  if (this->_internal_islimit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        6, this->_internal_islimit(), target);
  }

  // string order_hash = 7 [json_name = "orderHash"];
  if (!this->_internal_order_hash().empty()) {
    const std::string& _s = this->_internal_order_hash();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.TrimmedDerivativeConditionalOrder.order_hash");
    target = stream->WriteStringMaybeAliased(7, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.TrimmedDerivativeConditionalOrder)
  return target;
}

::size_t TrimmedDerivativeConditionalOrder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.TrimmedDerivativeConditionalOrder)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string price = 1 [json_name = "price", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_price().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_price());
  }

  // string quantity = 2 [json_name = "quantity", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_quantity().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_quantity());
  }

  // string margin = 3 [json_name = "margin", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_margin().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_margin());
  }

  // string triggerPrice = 4 [json_name = "triggerPrice", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_triggerprice().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_triggerprice());
  }

  // string order_hash = 7 [json_name = "orderHash"];
  if (!this->_internal_order_hash().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_order_hash());
  }

  // bool isBuy = 5 [json_name = "isBuy", (.gogoproto.jsontag) = "isBuy"];
  if (this->_internal_isbuy() != 0) {
    total_size += 2;
  }

  // bool isLimit = 6 [json_name = "isLimit", (.gogoproto.jsontag) = "isLimit"];
  if (this->_internal_islimit() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrimmedDerivativeConditionalOrder::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TrimmedDerivativeConditionalOrder::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrimmedDerivativeConditionalOrder::GetClassData() const { return &_class_data_; }


void TrimmedDerivativeConditionalOrder::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TrimmedDerivativeConditionalOrder*>(&to_msg);
  auto& from = static_cast<const TrimmedDerivativeConditionalOrder&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.TrimmedDerivativeConditionalOrder)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_price().empty()) {
    _this->_internal_set_price(from._internal_price());
  }
  if (!from._internal_quantity().empty()) {
    _this->_internal_set_quantity(from._internal_quantity());
  }
  if (!from._internal_margin().empty()) {
    _this->_internal_set_margin(from._internal_margin());
  }
  if (!from._internal_triggerprice().empty()) {
    _this->_internal_set_triggerprice(from._internal_triggerprice());
  }
  if (!from._internal_order_hash().empty()) {
    _this->_internal_set_order_hash(from._internal_order_hash());
  }
  if (from._internal_isbuy() != 0) {
    _this->_internal_set_isbuy(from._internal_isbuy());
  }
  if (from._internal_islimit() != 0) {
    _this->_internal_set_islimit(from._internal_islimit());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrimmedDerivativeConditionalOrder::CopyFrom(const TrimmedDerivativeConditionalOrder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.TrimmedDerivativeConditionalOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrimmedDerivativeConditionalOrder::IsInitialized() const {
  return true;
}

void TrimmedDerivativeConditionalOrder::InternalSwap(TrimmedDerivativeConditionalOrder* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.price_, lhs_arena,
                                       &other->_impl_.price_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.quantity_, lhs_arena,
                                       &other->_impl_.quantity_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.margin_, lhs_arena,
                                       &other->_impl_.margin_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.triggerprice_, lhs_arena,
                                       &other->_impl_.triggerprice_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.order_hash_, lhs_arena,
                                       &other->_impl_.order_hash_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrimmedDerivativeConditionalOrder, _impl_.islimit_)
      + sizeof(TrimmedDerivativeConditionalOrder::_impl_.islimit_)
      - PROTOBUF_FIELD_OFFSET(TrimmedDerivativeConditionalOrder, _impl_.isbuy_)>(
          reinterpret_cast<char*>(&_impl_.isbuy_),
          reinterpret_cast<char*>(&other->_impl_.isbuy_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TrimmedDerivativeConditionalOrder::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2fquery_2eproto[121]);
}
// ===================================================================

class QueryTraderDerivativeConditionalOrdersResponse::_Internal {
 public:
};

QueryTraderDerivativeConditionalOrdersResponse::QueryTraderDerivativeConditionalOrdersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.QueryTraderDerivativeConditionalOrdersResponse)
}
QueryTraderDerivativeConditionalOrdersResponse::QueryTraderDerivativeConditionalOrdersResponse(const QueryTraderDerivativeConditionalOrdersResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryTraderDerivativeConditionalOrdersResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.orders_){from._impl_.orders_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.QueryTraderDerivativeConditionalOrdersResponse)
}

inline void QueryTraderDerivativeConditionalOrdersResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.orders_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

QueryTraderDerivativeConditionalOrdersResponse::~QueryTraderDerivativeConditionalOrdersResponse() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.QueryTraderDerivativeConditionalOrdersResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryTraderDerivativeConditionalOrdersResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_orders()->~RepeatedPtrField();
}

void QueryTraderDerivativeConditionalOrdersResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryTraderDerivativeConditionalOrdersResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.QueryTraderDerivativeConditionalOrdersResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_orders()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryTraderDerivativeConditionalOrdersResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .injective.exchange.v1beta1.TrimmedDerivativeConditionalOrder orders = 1 [json_name = "orders"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_orders(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryTraderDerivativeConditionalOrdersResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.QueryTraderDerivativeConditionalOrdersResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .injective.exchange.v1beta1.TrimmedDerivativeConditionalOrder orders = 1 [json_name = "orders"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_orders_size()); i < n; i++) {
    const auto& repfield = this->_internal_orders(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.QueryTraderDerivativeConditionalOrdersResponse)
  return target;
}

::size_t QueryTraderDerivativeConditionalOrdersResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.QueryTraderDerivativeConditionalOrdersResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .injective.exchange.v1beta1.TrimmedDerivativeConditionalOrder orders = 1 [json_name = "orders"];
  total_size += 1UL * this->_internal_orders_size();
  for (const auto& msg : this->_internal_orders()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryTraderDerivativeConditionalOrdersResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryTraderDerivativeConditionalOrdersResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryTraderDerivativeConditionalOrdersResponse::GetClassData() const { return &_class_data_; }


void QueryTraderDerivativeConditionalOrdersResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryTraderDerivativeConditionalOrdersResponse*>(&to_msg);
  auto& from = static_cast<const QueryTraderDerivativeConditionalOrdersResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.QueryTraderDerivativeConditionalOrdersResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_orders()->MergeFrom(from._internal_orders());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryTraderDerivativeConditionalOrdersResponse::CopyFrom(const QueryTraderDerivativeConditionalOrdersResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.QueryTraderDerivativeConditionalOrdersResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryTraderDerivativeConditionalOrdersResponse::IsInitialized() const {
  return true;
}

void QueryTraderDerivativeConditionalOrdersResponse::InternalSwap(QueryTraderDerivativeConditionalOrdersResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_orders()->InternalSwap(other->_internal_mutable_orders());
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryTraderDerivativeConditionalOrdersResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2fquery_2eproto[122]);
}
// ===================================================================

class QueryMarketAtomicExecutionFeeMultiplierRequest::_Internal {
 public:
};

QueryMarketAtomicExecutionFeeMultiplierRequest::QueryMarketAtomicExecutionFeeMultiplierRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.QueryMarketAtomicExecutionFeeMultiplierRequest)
}
QueryMarketAtomicExecutionFeeMultiplierRequest::QueryMarketAtomicExecutionFeeMultiplierRequest(const QueryMarketAtomicExecutionFeeMultiplierRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryMarketAtomicExecutionFeeMultiplierRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.market_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_market_id().empty()) {
    _this->_impl_.market_id_.Set(from._internal_market_id(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.QueryMarketAtomicExecutionFeeMultiplierRequest)
}

inline void QueryMarketAtomicExecutionFeeMultiplierRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.market_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

QueryMarketAtomicExecutionFeeMultiplierRequest::~QueryMarketAtomicExecutionFeeMultiplierRequest() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.QueryMarketAtomicExecutionFeeMultiplierRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryMarketAtomicExecutionFeeMultiplierRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.market_id_.Destroy();
}

void QueryMarketAtomicExecutionFeeMultiplierRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryMarketAtomicExecutionFeeMultiplierRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.QueryMarketAtomicExecutionFeeMultiplierRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.market_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryMarketAtomicExecutionFeeMultiplierRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string market_id = 1 [json_name = "marketId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_market_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.QueryMarketAtomicExecutionFeeMultiplierRequest.market_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryMarketAtomicExecutionFeeMultiplierRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.QueryMarketAtomicExecutionFeeMultiplierRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string market_id = 1 [json_name = "marketId"];
  if (!this->_internal_market_id().empty()) {
    const std::string& _s = this->_internal_market_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.QueryMarketAtomicExecutionFeeMultiplierRequest.market_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.QueryMarketAtomicExecutionFeeMultiplierRequest)
  return target;
}

::size_t QueryMarketAtomicExecutionFeeMultiplierRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.QueryMarketAtomicExecutionFeeMultiplierRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string market_id = 1 [json_name = "marketId"];
  if (!this->_internal_market_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_market_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryMarketAtomicExecutionFeeMultiplierRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryMarketAtomicExecutionFeeMultiplierRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryMarketAtomicExecutionFeeMultiplierRequest::GetClassData() const { return &_class_data_; }


void QueryMarketAtomicExecutionFeeMultiplierRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryMarketAtomicExecutionFeeMultiplierRequest*>(&to_msg);
  auto& from = static_cast<const QueryMarketAtomicExecutionFeeMultiplierRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.QueryMarketAtomicExecutionFeeMultiplierRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_market_id().empty()) {
    _this->_internal_set_market_id(from._internal_market_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryMarketAtomicExecutionFeeMultiplierRequest::CopyFrom(const QueryMarketAtomicExecutionFeeMultiplierRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.QueryMarketAtomicExecutionFeeMultiplierRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryMarketAtomicExecutionFeeMultiplierRequest::IsInitialized() const {
  return true;
}

void QueryMarketAtomicExecutionFeeMultiplierRequest::InternalSwap(QueryMarketAtomicExecutionFeeMultiplierRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.market_id_, lhs_arena,
                                       &other->_impl_.market_id_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryMarketAtomicExecutionFeeMultiplierRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2fquery_2eproto[123]);
}
// ===================================================================

class QueryMarketAtomicExecutionFeeMultiplierResponse::_Internal {
 public:
};

QueryMarketAtomicExecutionFeeMultiplierResponse::QueryMarketAtomicExecutionFeeMultiplierResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.exchange.v1beta1.QueryMarketAtomicExecutionFeeMultiplierResponse)
}
QueryMarketAtomicExecutionFeeMultiplierResponse::QueryMarketAtomicExecutionFeeMultiplierResponse(const QueryMarketAtomicExecutionFeeMultiplierResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryMarketAtomicExecutionFeeMultiplierResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.multiplier_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.multiplier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.multiplier_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_multiplier().empty()) {
    _this->_impl_.multiplier_.Set(from._internal_multiplier(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:injective.exchange.v1beta1.QueryMarketAtomicExecutionFeeMultiplierResponse)
}

inline void QueryMarketAtomicExecutionFeeMultiplierResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.multiplier_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.multiplier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.multiplier_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

QueryMarketAtomicExecutionFeeMultiplierResponse::~QueryMarketAtomicExecutionFeeMultiplierResponse() {
  // @@protoc_insertion_point(destructor:injective.exchange.v1beta1.QueryMarketAtomicExecutionFeeMultiplierResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryMarketAtomicExecutionFeeMultiplierResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.multiplier_.Destroy();
}

void QueryMarketAtomicExecutionFeeMultiplierResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryMarketAtomicExecutionFeeMultiplierResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.exchange.v1beta1.QueryMarketAtomicExecutionFeeMultiplierResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.multiplier_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryMarketAtomicExecutionFeeMultiplierResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string multiplier = 1 [json_name = "multiplier", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_multiplier();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.exchange.v1beta1.QueryMarketAtomicExecutionFeeMultiplierResponse.multiplier"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryMarketAtomicExecutionFeeMultiplierResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.exchange.v1beta1.QueryMarketAtomicExecutionFeeMultiplierResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string multiplier = 1 [json_name = "multiplier", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_multiplier().empty()) {
    const std::string& _s = this->_internal_multiplier();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.exchange.v1beta1.QueryMarketAtomicExecutionFeeMultiplierResponse.multiplier");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.exchange.v1beta1.QueryMarketAtomicExecutionFeeMultiplierResponse)
  return target;
}

::size_t QueryMarketAtomicExecutionFeeMultiplierResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.exchange.v1beta1.QueryMarketAtomicExecutionFeeMultiplierResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string multiplier = 1 [json_name = "multiplier", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_multiplier().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_multiplier());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryMarketAtomicExecutionFeeMultiplierResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryMarketAtomicExecutionFeeMultiplierResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryMarketAtomicExecutionFeeMultiplierResponse::GetClassData() const { return &_class_data_; }


void QueryMarketAtomicExecutionFeeMultiplierResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryMarketAtomicExecutionFeeMultiplierResponse*>(&to_msg);
  auto& from = static_cast<const QueryMarketAtomicExecutionFeeMultiplierResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.exchange.v1beta1.QueryMarketAtomicExecutionFeeMultiplierResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_multiplier().empty()) {
    _this->_internal_set_multiplier(from._internal_multiplier());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryMarketAtomicExecutionFeeMultiplierResponse::CopyFrom(const QueryMarketAtomicExecutionFeeMultiplierResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.exchange.v1beta1.QueryMarketAtomicExecutionFeeMultiplierResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryMarketAtomicExecutionFeeMultiplierResponse::IsInitialized() const {
  return true;
}

void QueryMarketAtomicExecutionFeeMultiplierResponse::InternalSwap(QueryMarketAtomicExecutionFeeMultiplierResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.multiplier_, lhs_arena,
                                       &other->_impl_.multiplier_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryMarketAtomicExecutionFeeMultiplierResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2fexchange_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2fexchange_2fv1beta1_2fquery_2eproto[124]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1beta1
}  // namespace exchange
}  // namespace injective
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::Subaccount*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::Subaccount >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::Subaccount >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::QuerySubaccountOrdersRequest*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::QuerySubaccountOrdersRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::QuerySubaccountOrdersRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::QuerySubaccountOrdersResponse*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::QuerySubaccountOrdersResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::QuerySubaccountOrdersResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::SubaccountOrderbookMetadataWithMarket*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::SubaccountOrderbookMetadataWithMarket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::SubaccountOrderbookMetadataWithMarket >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::QueryExchangeParamsRequest*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::QueryExchangeParamsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::QueryExchangeParamsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::QueryExchangeParamsResponse*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::QueryExchangeParamsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::QueryExchangeParamsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::QuerySubaccountDepositsRequest*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::QuerySubaccountDepositsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::QuerySubaccountDepositsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::QuerySubaccountDepositsResponse_DepositsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::QuerySubaccountDepositsResponse_DepositsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::QuerySubaccountDepositsResponse_DepositsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::QuerySubaccountDepositsResponse*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::QuerySubaccountDepositsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::QuerySubaccountDepositsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::QueryExchangeBalancesRequest*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::QueryExchangeBalancesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::QueryExchangeBalancesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::QueryExchangeBalancesResponse*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::QueryExchangeBalancesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::QueryExchangeBalancesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::QueryAggregateVolumeRequest*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::QueryAggregateVolumeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::QueryAggregateVolumeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::QueryAggregateVolumeResponse*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::QueryAggregateVolumeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::QueryAggregateVolumeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::QueryAggregateVolumesRequest*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::QueryAggregateVolumesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::QueryAggregateVolumesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::QueryAggregateVolumesResponse*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::QueryAggregateVolumesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::QueryAggregateVolumesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::QueryAggregateMarketVolumeRequest*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::QueryAggregateMarketVolumeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::QueryAggregateMarketVolumeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::QueryAggregateMarketVolumeResponse*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::QueryAggregateMarketVolumeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::QueryAggregateMarketVolumeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::QueryDenomDecimalRequest*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::QueryDenomDecimalRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::QueryDenomDecimalRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::QueryDenomDecimalResponse*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::QueryDenomDecimalResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::QueryDenomDecimalResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::QueryDenomDecimalsRequest*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::QueryDenomDecimalsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::QueryDenomDecimalsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::QueryDenomDecimalsResponse*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::QueryDenomDecimalsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::QueryDenomDecimalsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::QueryAggregateMarketVolumesRequest*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::QueryAggregateMarketVolumesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::QueryAggregateMarketVolumesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::QueryAggregateMarketVolumesResponse*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::QueryAggregateMarketVolumesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::QueryAggregateMarketVolumesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::QuerySubaccountDepositRequest*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::QuerySubaccountDepositRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::QuerySubaccountDepositRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::QuerySubaccountDepositResponse*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::QuerySubaccountDepositResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::QuerySubaccountDepositResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::QuerySpotMarketsRequest*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::QuerySpotMarketsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::QuerySpotMarketsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::QuerySpotMarketsResponse*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::QuerySpotMarketsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::QuerySpotMarketsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::QuerySpotMarketRequest*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::QuerySpotMarketRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::QuerySpotMarketRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::QuerySpotMarketResponse*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::QuerySpotMarketResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::QuerySpotMarketResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::QuerySpotOrderbookRequest*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::QuerySpotOrderbookRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::QuerySpotOrderbookRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::QuerySpotOrderbookResponse*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::QuerySpotOrderbookResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::QuerySpotOrderbookResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::FullSpotMarket*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::FullSpotMarket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::FullSpotMarket >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::QueryFullSpotMarketsRequest*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::QueryFullSpotMarketsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::QueryFullSpotMarketsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::QueryFullSpotMarketsResponse*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::QueryFullSpotMarketsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::QueryFullSpotMarketsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::QueryFullSpotMarketRequest*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::QueryFullSpotMarketRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::QueryFullSpotMarketRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::QueryFullSpotMarketResponse*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::QueryFullSpotMarketResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::QueryFullSpotMarketResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::QuerySpotOrdersByHashesRequest*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::QuerySpotOrdersByHashesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::QuerySpotOrdersByHashesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::QuerySpotOrdersByHashesResponse*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::QuerySpotOrdersByHashesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::QuerySpotOrdersByHashesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::QueryTraderSpotOrdersRequest*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::QueryTraderSpotOrdersRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::QueryTraderSpotOrdersRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::QueryAccountAddressSpotOrdersRequest*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::QueryAccountAddressSpotOrdersRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::QueryAccountAddressSpotOrdersRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::TrimmedSpotLimitOrder*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::TrimmedSpotLimitOrder >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::TrimmedSpotLimitOrder >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::QueryTraderSpotOrdersResponse*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::QueryTraderSpotOrdersResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::QueryTraderSpotOrdersResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::QueryAccountAddressSpotOrdersResponse*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::QueryAccountAddressSpotOrdersResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::QueryAccountAddressSpotOrdersResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::QuerySpotMidPriceAndTOBRequest*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::QuerySpotMidPriceAndTOBRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::QuerySpotMidPriceAndTOBRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::QuerySpotMidPriceAndTOBResponse*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::QuerySpotMidPriceAndTOBResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::QuerySpotMidPriceAndTOBResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::QueryDerivativeMidPriceAndTOBRequest*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::QueryDerivativeMidPriceAndTOBRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::QueryDerivativeMidPriceAndTOBRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::QueryDerivativeMidPriceAndTOBResponse*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::QueryDerivativeMidPriceAndTOBResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::QueryDerivativeMidPriceAndTOBResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::QueryDerivativeOrderbookRequest*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::QueryDerivativeOrderbookRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::QueryDerivativeOrderbookRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::QueryDerivativeOrderbookResponse*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::QueryDerivativeOrderbookResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::QueryDerivativeOrderbookResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::QueryTraderSpotOrdersToCancelUpToAmountRequest*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::QueryTraderSpotOrdersToCancelUpToAmountRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::QueryTraderSpotOrdersToCancelUpToAmountRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::QueryTraderDerivativeOrdersToCancelUpToAmountRequest*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::QueryTraderDerivativeOrdersToCancelUpToAmountRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::QueryTraderDerivativeOrdersToCancelUpToAmountRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::QueryTraderDerivativeOrdersRequest*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::QueryTraderDerivativeOrdersRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::QueryTraderDerivativeOrdersRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::QueryAccountAddressDerivativeOrdersRequest*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::QueryAccountAddressDerivativeOrdersRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::QueryAccountAddressDerivativeOrdersRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::TrimmedDerivativeLimitOrder*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::TrimmedDerivativeLimitOrder >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::TrimmedDerivativeLimitOrder >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::QueryTraderDerivativeOrdersResponse*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::QueryTraderDerivativeOrdersResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::QueryTraderDerivativeOrdersResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::QueryAccountAddressDerivativeOrdersResponse*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::QueryAccountAddressDerivativeOrdersResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::QueryAccountAddressDerivativeOrdersResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::QueryDerivativeOrdersByHashesRequest*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::QueryDerivativeOrdersByHashesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::QueryDerivativeOrdersByHashesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::QueryDerivativeOrdersByHashesResponse*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::QueryDerivativeOrdersByHashesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::QueryDerivativeOrdersByHashesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::QueryDerivativeMarketsRequest*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::QueryDerivativeMarketsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::QueryDerivativeMarketsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::PriceLevel*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::PriceLevel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::PriceLevel >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::PerpetualMarketState*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::PerpetualMarketState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::PerpetualMarketState >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::FullDerivativeMarket*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::FullDerivativeMarket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::FullDerivativeMarket >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::QueryDerivativeMarketsResponse*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::QueryDerivativeMarketsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::QueryDerivativeMarketsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::QueryDerivativeMarketRequest*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::QueryDerivativeMarketRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::QueryDerivativeMarketRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::QueryDerivativeMarketResponse*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::QueryDerivativeMarketResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::QueryDerivativeMarketResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::QueryDerivativeMarketAddressRequest*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::QueryDerivativeMarketAddressRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::QueryDerivativeMarketAddressRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::QueryDerivativeMarketAddressResponse*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::QueryDerivativeMarketAddressResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::QueryDerivativeMarketAddressResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::QuerySubaccountTradeNonceRequest*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::QuerySubaccountTradeNonceRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::QuerySubaccountTradeNonceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::QuerySubaccountPositionsRequest*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::QuerySubaccountPositionsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::QuerySubaccountPositionsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::QuerySubaccountPositionInMarketRequest*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::QuerySubaccountPositionInMarketRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::QuerySubaccountPositionInMarketRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::QuerySubaccountEffectivePositionInMarketRequest*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::QuerySubaccountEffectivePositionInMarketRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::QuerySubaccountEffectivePositionInMarketRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::QuerySubaccountOrderMetadataRequest*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::QuerySubaccountOrderMetadataRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::QuerySubaccountOrderMetadataRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::QuerySubaccountPositionsResponse*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::QuerySubaccountPositionsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::QuerySubaccountPositionsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::QuerySubaccountPositionInMarketResponse*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::QuerySubaccountPositionInMarketResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::QuerySubaccountPositionInMarketResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::EffectivePosition*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::EffectivePosition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::EffectivePosition >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::QuerySubaccountEffectivePositionInMarketResponse*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::QuerySubaccountEffectivePositionInMarketResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::QuerySubaccountEffectivePositionInMarketResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::QueryPerpetualMarketInfoRequest*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::QueryPerpetualMarketInfoRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::QueryPerpetualMarketInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::QueryPerpetualMarketInfoResponse*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::QueryPerpetualMarketInfoResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::QueryPerpetualMarketInfoResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::QueryExpiryFuturesMarketInfoRequest*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::QueryExpiryFuturesMarketInfoRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::QueryExpiryFuturesMarketInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::QueryExpiryFuturesMarketInfoResponse*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::QueryExpiryFuturesMarketInfoResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::QueryExpiryFuturesMarketInfoResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::QueryPerpetualMarketFundingRequest*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::QueryPerpetualMarketFundingRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::QueryPerpetualMarketFundingRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::QueryPerpetualMarketFundingResponse*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::QueryPerpetualMarketFundingResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::QueryPerpetualMarketFundingResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::QuerySubaccountOrderMetadataResponse*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::QuerySubaccountOrderMetadataResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::QuerySubaccountOrderMetadataResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::QuerySubaccountTradeNonceResponse*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::QuerySubaccountTradeNonceResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::QuerySubaccountTradeNonceResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::QueryModuleStateRequest*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::QueryModuleStateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::QueryModuleStateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::QueryModuleStateResponse*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::QueryModuleStateResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::QueryModuleStateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::QueryPositionsRequest*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::QueryPositionsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::QueryPositionsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::QueryPositionsResponse*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::QueryPositionsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::QueryPositionsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::QueryTradeRewardPointsRequest*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::QueryTradeRewardPointsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::QueryTradeRewardPointsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::QueryTradeRewardPointsResponse*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::QueryTradeRewardPointsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::QueryTradeRewardPointsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::QueryTradeRewardCampaignRequest*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::QueryTradeRewardCampaignRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::QueryTradeRewardCampaignRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::QueryTradeRewardCampaignResponse*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::QueryTradeRewardCampaignResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::QueryTradeRewardCampaignResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::QueryIsOptedOutOfRewardsRequest*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::QueryIsOptedOutOfRewardsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::QueryIsOptedOutOfRewardsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::QueryIsOptedOutOfRewardsResponse*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::QueryIsOptedOutOfRewardsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::QueryIsOptedOutOfRewardsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::QueryOptedOutOfRewardsAccountsRequest*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::QueryOptedOutOfRewardsAccountsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::QueryOptedOutOfRewardsAccountsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::QueryOptedOutOfRewardsAccountsResponse*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::QueryOptedOutOfRewardsAccountsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::QueryOptedOutOfRewardsAccountsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::QueryFeeDiscountAccountInfoRequest*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::QueryFeeDiscountAccountInfoRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::QueryFeeDiscountAccountInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::QueryFeeDiscountAccountInfoResponse*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::QueryFeeDiscountAccountInfoResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::QueryFeeDiscountAccountInfoResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::QueryFeeDiscountScheduleRequest*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::QueryFeeDiscountScheduleRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::QueryFeeDiscountScheduleRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::QueryFeeDiscountScheduleResponse*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::QueryFeeDiscountScheduleResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::QueryFeeDiscountScheduleResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::QueryBalanceMismatchesRequest*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::QueryBalanceMismatchesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::QueryBalanceMismatchesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::BalanceMismatch*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::BalanceMismatch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::BalanceMismatch >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::QueryBalanceMismatchesResponse*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::QueryBalanceMismatchesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::QueryBalanceMismatchesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::QueryBalanceWithBalanceHoldsRequest*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::QueryBalanceWithBalanceHoldsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::QueryBalanceWithBalanceHoldsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::BalanceWithMarginHold*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::BalanceWithMarginHold >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::BalanceWithMarginHold >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::QueryBalanceWithBalanceHoldsResponse*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::QueryBalanceWithBalanceHoldsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::QueryBalanceWithBalanceHoldsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::QueryFeeDiscountTierStatisticsRequest*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::QueryFeeDiscountTierStatisticsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::QueryFeeDiscountTierStatisticsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::TierStatistic*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::TierStatistic >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::TierStatistic >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::QueryFeeDiscountTierStatisticsResponse*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::QueryFeeDiscountTierStatisticsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::QueryFeeDiscountTierStatisticsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::MitoVaultInfosRequest*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::MitoVaultInfosRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::MitoVaultInfosRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::MitoVaultInfosResponse*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::MitoVaultInfosResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::MitoVaultInfosResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::QueryMarketIDFromVaultRequest*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::QueryMarketIDFromVaultRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::QueryMarketIDFromVaultRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::QueryMarketIDFromVaultResponse*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::QueryMarketIDFromVaultResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::QueryMarketIDFromVaultResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::QueryHistoricalTradeRecordsRequest*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::QueryHistoricalTradeRecordsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::QueryHistoricalTradeRecordsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::QueryHistoricalTradeRecordsResponse*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::QueryHistoricalTradeRecordsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::QueryHistoricalTradeRecordsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::TradeHistoryOptions*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::TradeHistoryOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::TradeHistoryOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::QueryMarketVolatilityRequest*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::QueryMarketVolatilityRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::QueryMarketVolatilityRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::QueryMarketVolatilityResponse*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::QueryMarketVolatilityResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::QueryMarketVolatilityResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::QueryBinaryMarketsRequest*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::QueryBinaryMarketsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::QueryBinaryMarketsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::QueryBinaryMarketsResponse*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::QueryBinaryMarketsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::QueryBinaryMarketsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::QueryTraderDerivativeConditionalOrdersRequest*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::QueryTraderDerivativeConditionalOrdersRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::QueryTraderDerivativeConditionalOrdersRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::TrimmedDerivativeConditionalOrder*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::TrimmedDerivativeConditionalOrder >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::TrimmedDerivativeConditionalOrder >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::QueryTraderDerivativeConditionalOrdersResponse*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::QueryTraderDerivativeConditionalOrdersResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::QueryTraderDerivativeConditionalOrdersResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::QueryMarketAtomicExecutionFeeMultiplierRequest*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::QueryMarketAtomicExecutionFeeMultiplierRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::QueryMarketAtomicExecutionFeeMultiplierRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::exchange::v1beta1::QueryMarketAtomicExecutionFeeMultiplierResponse*
Arena::CreateMaybeMessage< ::injective::exchange::v1beta1::QueryMarketAtomicExecutionFeeMultiplierResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::exchange::v1beta1::QueryMarketAtomicExecutionFeeMultiplierResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

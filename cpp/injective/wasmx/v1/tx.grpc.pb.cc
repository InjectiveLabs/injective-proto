// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: injective/wasmx/v1/tx.proto

#include "injective/wasmx/v1/tx.pb.h"
#include "injective/wasmx/v1/tx.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace injective {
namespace wasmx {
namespace v1 {

static const char* Msg_method_names[] = {
  "/injective.wasmx.v1.Msg/UpdateRegistryContractParams",
  "/injective.wasmx.v1.Msg/ActivateRegistryContract",
  "/injective.wasmx.v1.Msg/DeactivateRegistryContract",
  "/injective.wasmx.v1.Msg/ExecuteContractCompat",
  "/injective.wasmx.v1.Msg/UpdateParams",
  "/injective.wasmx.v1.Msg/RegisterContract",
};

std::unique_ptr< Msg::Stub> Msg::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Msg::Stub> stub(new Msg::Stub(channel, options));
  return stub;
}

Msg::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_UpdateRegistryContractParams_(Msg_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ActivateRegistryContract_(Msg_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeactivateRegistryContract_(Msg_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ExecuteContractCompat_(Msg_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateParams_(Msg_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RegisterContract_(Msg_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Msg::Stub::UpdateRegistryContractParams(::grpc::ClientContext* context, const ::injective::wasmx::v1::MsgUpdateContract& request, ::injective::wasmx::v1::MsgUpdateContractResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::wasmx::v1::MsgUpdateContract, ::injective::wasmx::v1::MsgUpdateContractResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateRegistryContractParams_, context, request, response);
}

void Msg::Stub::async::UpdateRegistryContractParams(::grpc::ClientContext* context, const ::injective::wasmx::v1::MsgUpdateContract* request, ::injective::wasmx::v1::MsgUpdateContractResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::wasmx::v1::MsgUpdateContract, ::injective::wasmx::v1::MsgUpdateContractResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateRegistryContractParams_, context, request, response, std::move(f));
}

void Msg::Stub::async::UpdateRegistryContractParams(::grpc::ClientContext* context, const ::injective::wasmx::v1::MsgUpdateContract* request, ::injective::wasmx::v1::MsgUpdateContractResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateRegistryContractParams_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::wasmx::v1::MsgUpdateContractResponse>* Msg::Stub::PrepareAsyncUpdateRegistryContractParamsRaw(::grpc::ClientContext* context, const ::injective::wasmx::v1::MsgUpdateContract& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::wasmx::v1::MsgUpdateContractResponse, ::injective::wasmx::v1::MsgUpdateContract, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateRegistryContractParams_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::wasmx::v1::MsgUpdateContractResponse>* Msg::Stub::AsyncUpdateRegistryContractParamsRaw(::grpc::ClientContext* context, const ::injective::wasmx::v1::MsgUpdateContract& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateRegistryContractParamsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Msg::Stub::ActivateRegistryContract(::grpc::ClientContext* context, const ::injective::wasmx::v1::MsgActivateContract& request, ::injective::wasmx::v1::MsgActivateContractResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::wasmx::v1::MsgActivateContract, ::injective::wasmx::v1::MsgActivateContractResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ActivateRegistryContract_, context, request, response);
}

void Msg::Stub::async::ActivateRegistryContract(::grpc::ClientContext* context, const ::injective::wasmx::v1::MsgActivateContract* request, ::injective::wasmx::v1::MsgActivateContractResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::wasmx::v1::MsgActivateContract, ::injective::wasmx::v1::MsgActivateContractResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ActivateRegistryContract_, context, request, response, std::move(f));
}

void Msg::Stub::async::ActivateRegistryContract(::grpc::ClientContext* context, const ::injective::wasmx::v1::MsgActivateContract* request, ::injective::wasmx::v1::MsgActivateContractResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ActivateRegistryContract_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::wasmx::v1::MsgActivateContractResponse>* Msg::Stub::PrepareAsyncActivateRegistryContractRaw(::grpc::ClientContext* context, const ::injective::wasmx::v1::MsgActivateContract& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::wasmx::v1::MsgActivateContractResponse, ::injective::wasmx::v1::MsgActivateContract, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ActivateRegistryContract_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::wasmx::v1::MsgActivateContractResponse>* Msg::Stub::AsyncActivateRegistryContractRaw(::grpc::ClientContext* context, const ::injective::wasmx::v1::MsgActivateContract& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncActivateRegistryContractRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Msg::Stub::DeactivateRegistryContract(::grpc::ClientContext* context, const ::injective::wasmx::v1::MsgDeactivateContract& request, ::injective::wasmx::v1::MsgDeactivateContractResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::wasmx::v1::MsgDeactivateContract, ::injective::wasmx::v1::MsgDeactivateContractResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeactivateRegistryContract_, context, request, response);
}

void Msg::Stub::async::DeactivateRegistryContract(::grpc::ClientContext* context, const ::injective::wasmx::v1::MsgDeactivateContract* request, ::injective::wasmx::v1::MsgDeactivateContractResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::wasmx::v1::MsgDeactivateContract, ::injective::wasmx::v1::MsgDeactivateContractResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeactivateRegistryContract_, context, request, response, std::move(f));
}

void Msg::Stub::async::DeactivateRegistryContract(::grpc::ClientContext* context, const ::injective::wasmx::v1::MsgDeactivateContract* request, ::injective::wasmx::v1::MsgDeactivateContractResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeactivateRegistryContract_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::wasmx::v1::MsgDeactivateContractResponse>* Msg::Stub::PrepareAsyncDeactivateRegistryContractRaw(::grpc::ClientContext* context, const ::injective::wasmx::v1::MsgDeactivateContract& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::wasmx::v1::MsgDeactivateContractResponse, ::injective::wasmx::v1::MsgDeactivateContract, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeactivateRegistryContract_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::wasmx::v1::MsgDeactivateContractResponse>* Msg::Stub::AsyncDeactivateRegistryContractRaw(::grpc::ClientContext* context, const ::injective::wasmx::v1::MsgDeactivateContract& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeactivateRegistryContractRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Msg::Stub::ExecuteContractCompat(::grpc::ClientContext* context, const ::injective::wasmx::v1::MsgExecuteContractCompat& request, ::injective::wasmx::v1::MsgExecuteContractCompatResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::wasmx::v1::MsgExecuteContractCompat, ::injective::wasmx::v1::MsgExecuteContractCompatResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ExecuteContractCompat_, context, request, response);
}

void Msg::Stub::async::ExecuteContractCompat(::grpc::ClientContext* context, const ::injective::wasmx::v1::MsgExecuteContractCompat* request, ::injective::wasmx::v1::MsgExecuteContractCompatResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::wasmx::v1::MsgExecuteContractCompat, ::injective::wasmx::v1::MsgExecuteContractCompatResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExecuteContractCompat_, context, request, response, std::move(f));
}

void Msg::Stub::async::ExecuteContractCompat(::grpc::ClientContext* context, const ::injective::wasmx::v1::MsgExecuteContractCompat* request, ::injective::wasmx::v1::MsgExecuteContractCompatResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExecuteContractCompat_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::wasmx::v1::MsgExecuteContractCompatResponse>* Msg::Stub::PrepareAsyncExecuteContractCompatRaw(::grpc::ClientContext* context, const ::injective::wasmx::v1::MsgExecuteContractCompat& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::wasmx::v1::MsgExecuteContractCompatResponse, ::injective::wasmx::v1::MsgExecuteContractCompat, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ExecuteContractCompat_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::wasmx::v1::MsgExecuteContractCompatResponse>* Msg::Stub::AsyncExecuteContractCompatRaw(::grpc::ClientContext* context, const ::injective::wasmx::v1::MsgExecuteContractCompat& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncExecuteContractCompatRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Msg::Stub::UpdateParams(::grpc::ClientContext* context, const ::injective::wasmx::v1::MsgUpdateParams& request, ::injective::wasmx::v1::MsgUpdateParamsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::wasmx::v1::MsgUpdateParams, ::injective::wasmx::v1::MsgUpdateParamsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateParams_, context, request, response);
}

void Msg::Stub::async::UpdateParams(::grpc::ClientContext* context, const ::injective::wasmx::v1::MsgUpdateParams* request, ::injective::wasmx::v1::MsgUpdateParamsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::wasmx::v1::MsgUpdateParams, ::injective::wasmx::v1::MsgUpdateParamsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateParams_, context, request, response, std::move(f));
}

void Msg::Stub::async::UpdateParams(::grpc::ClientContext* context, const ::injective::wasmx::v1::MsgUpdateParams* request, ::injective::wasmx::v1::MsgUpdateParamsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateParams_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::wasmx::v1::MsgUpdateParamsResponse>* Msg::Stub::PrepareAsyncUpdateParamsRaw(::grpc::ClientContext* context, const ::injective::wasmx::v1::MsgUpdateParams& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::wasmx::v1::MsgUpdateParamsResponse, ::injective::wasmx::v1::MsgUpdateParams, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateParams_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::wasmx::v1::MsgUpdateParamsResponse>* Msg::Stub::AsyncUpdateParamsRaw(::grpc::ClientContext* context, const ::injective::wasmx::v1::MsgUpdateParams& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateParamsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Msg::Stub::RegisterContract(::grpc::ClientContext* context, const ::injective::wasmx::v1::MsgRegisterContract& request, ::injective::wasmx::v1::MsgRegisterContractResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::wasmx::v1::MsgRegisterContract, ::injective::wasmx::v1::MsgRegisterContractResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RegisterContract_, context, request, response);
}

void Msg::Stub::async::RegisterContract(::grpc::ClientContext* context, const ::injective::wasmx::v1::MsgRegisterContract* request, ::injective::wasmx::v1::MsgRegisterContractResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::wasmx::v1::MsgRegisterContract, ::injective::wasmx::v1::MsgRegisterContractResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RegisterContract_, context, request, response, std::move(f));
}

void Msg::Stub::async::RegisterContract(::grpc::ClientContext* context, const ::injective::wasmx::v1::MsgRegisterContract* request, ::injective::wasmx::v1::MsgRegisterContractResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RegisterContract_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::wasmx::v1::MsgRegisterContractResponse>* Msg::Stub::PrepareAsyncRegisterContractRaw(::grpc::ClientContext* context, const ::injective::wasmx::v1::MsgRegisterContract& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::wasmx::v1::MsgRegisterContractResponse, ::injective::wasmx::v1::MsgRegisterContract, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RegisterContract_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::wasmx::v1::MsgRegisterContractResponse>* Msg::Stub::AsyncRegisterContractRaw(::grpc::ClientContext* context, const ::injective::wasmx::v1::MsgRegisterContract& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRegisterContractRaw(context, request, cq);
  result->StartCall();
  return result;
}

Msg::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Msg_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Msg::Service, ::injective::wasmx::v1::MsgUpdateContract, ::injective::wasmx::v1::MsgUpdateContractResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Msg::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::wasmx::v1::MsgUpdateContract* req,
             ::injective::wasmx::v1::MsgUpdateContractResponse* resp) {
               return service->UpdateRegistryContractParams(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Msg_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Msg::Service, ::injective::wasmx::v1::MsgActivateContract, ::injective::wasmx::v1::MsgActivateContractResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Msg::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::wasmx::v1::MsgActivateContract* req,
             ::injective::wasmx::v1::MsgActivateContractResponse* resp) {
               return service->ActivateRegistryContract(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Msg_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Msg::Service, ::injective::wasmx::v1::MsgDeactivateContract, ::injective::wasmx::v1::MsgDeactivateContractResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Msg::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::wasmx::v1::MsgDeactivateContract* req,
             ::injective::wasmx::v1::MsgDeactivateContractResponse* resp) {
               return service->DeactivateRegistryContract(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Msg_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Msg::Service, ::injective::wasmx::v1::MsgExecuteContractCompat, ::injective::wasmx::v1::MsgExecuteContractCompatResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Msg::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::wasmx::v1::MsgExecuteContractCompat* req,
             ::injective::wasmx::v1::MsgExecuteContractCompatResponse* resp) {
               return service->ExecuteContractCompat(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Msg_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Msg::Service, ::injective::wasmx::v1::MsgUpdateParams, ::injective::wasmx::v1::MsgUpdateParamsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Msg::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::wasmx::v1::MsgUpdateParams* req,
             ::injective::wasmx::v1::MsgUpdateParamsResponse* resp) {
               return service->UpdateParams(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Msg_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Msg::Service, ::injective::wasmx::v1::MsgRegisterContract, ::injective::wasmx::v1::MsgRegisterContractResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Msg::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::wasmx::v1::MsgRegisterContract* req,
             ::injective::wasmx::v1::MsgRegisterContractResponse* resp) {
               return service->RegisterContract(ctx, req, resp);
             }, this)));
}

Msg::Service::~Service() {
}

::grpc::Status Msg::Service::UpdateRegistryContractParams(::grpc::ServerContext* context, const ::injective::wasmx::v1::MsgUpdateContract* request, ::injective::wasmx::v1::MsgUpdateContractResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Msg::Service::ActivateRegistryContract(::grpc::ServerContext* context, const ::injective::wasmx::v1::MsgActivateContract* request, ::injective::wasmx::v1::MsgActivateContractResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Msg::Service::DeactivateRegistryContract(::grpc::ServerContext* context, const ::injective::wasmx::v1::MsgDeactivateContract* request, ::injective::wasmx::v1::MsgDeactivateContractResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Msg::Service::ExecuteContractCompat(::grpc::ServerContext* context, const ::injective::wasmx::v1::MsgExecuteContractCompat* request, ::injective::wasmx::v1::MsgExecuteContractCompatResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Msg::Service::UpdateParams(::grpc::ServerContext* context, const ::injective::wasmx::v1::MsgUpdateParams* request, ::injective::wasmx::v1::MsgUpdateParamsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Msg::Service::RegisterContract(::grpc::ServerContext* context, const ::injective::wasmx::v1::MsgRegisterContract* request, ::injective::wasmx::v1::MsgRegisterContractResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace injective
}  // namespace wasmx
}  // namespace v1


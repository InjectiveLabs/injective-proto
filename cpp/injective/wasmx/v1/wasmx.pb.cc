// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: injective/wasmx/v1/wasmx.proto

#include "injective/wasmx/v1/wasmx.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace injective {
namespace wasmx {
namespace v1 {
template <typename>
PROTOBUF_CONSTEXPR Params::Params(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.max_begin_block_total_gas_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.max_contract_gas_limit_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.min_gas_price_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.is_execution_enabled_)*/ false

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ParamsDefaultTypeInternal() {}
  union {
    Params _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ParamsDefaultTypeInternal _Params_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR RegisteredContract::RegisteredContract(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.admin_address_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.granter_address_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.gas_limit_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.gas_price_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.code_id_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.is_executable_)*/ false

  , /*decltype(_impl_.fund_mode_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RegisteredContractDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RegisteredContractDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RegisteredContractDefaultTypeInternal() {}
  union {
    RegisteredContract _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RegisteredContractDefaultTypeInternal _RegisteredContract_default_instance_;
}  // namespace v1
}  // namespace wasmx
}  // namespace injective
static ::_pb::Metadata file_level_metadata_injective_2fwasmx_2fv1_2fwasmx_2eproto[2];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_injective_2fwasmx_2fv1_2fwasmx_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_injective_2fwasmx_2fv1_2fwasmx_2eproto = nullptr;
const ::uint32_t TableStruct_injective_2fwasmx_2fv1_2fwasmx_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::wasmx::v1::Params, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::wasmx::v1::Params, _impl_.is_execution_enabled_),
    PROTOBUF_FIELD_OFFSET(::injective::wasmx::v1::Params, _impl_.max_begin_block_total_gas_),
    PROTOBUF_FIELD_OFFSET(::injective::wasmx::v1::Params, _impl_.max_contract_gas_limit_),
    PROTOBUF_FIELD_OFFSET(::injective::wasmx::v1::Params, _impl_.min_gas_price_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::wasmx::v1::RegisteredContract, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::wasmx::v1::RegisteredContract, _impl_.gas_limit_),
    PROTOBUF_FIELD_OFFSET(::injective::wasmx::v1::RegisteredContract, _impl_.gas_price_),
    PROTOBUF_FIELD_OFFSET(::injective::wasmx::v1::RegisteredContract, _impl_.is_executable_),
    PROTOBUF_FIELD_OFFSET(::injective::wasmx::v1::RegisteredContract, _impl_.code_id_),
    PROTOBUF_FIELD_OFFSET(::injective::wasmx::v1::RegisteredContract, _impl_.admin_address_),
    PROTOBUF_FIELD_OFFSET(::injective::wasmx::v1::RegisteredContract, _impl_.granter_address_),
    PROTOBUF_FIELD_OFFSET(::injective::wasmx::v1::RegisteredContract, _impl_.fund_mode_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::injective::wasmx::v1::Params)},
        { 12, -1, -1, sizeof(::injective::wasmx::v1::RegisteredContract)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::injective::wasmx::v1::_Params_default_instance_._instance,
    &::injective::wasmx::v1::_RegisteredContract_default_instance_._instance,
};
const char descriptor_table_protodef_injective_2fwasmx_2fv1_2fwasmx_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\036injective/wasmx/v1/wasmx.proto\022\022inject"
    "ive.wasmx.v1\032\024gogoproto/gogo.proto\032!inje"
    "ctive/wasmx/v1/proposal.proto\"\323\001\n\006Params"
    "\0220\n\024is_execution_enabled\030\001 \001(\010R\022isExecut"
    "ionEnabled\0228\n\031max_begin_block_total_gas\030"
    "\002 \001(\004R\025maxBeginBlockTotalGas\0223\n\026max_cont"
    "ract_gas_limit\030\003 \001(\004R\023maxContractGasLimi"
    "t\022\"\n\rmin_gas_price\030\004 \001(\004R\013minGasPrice:\004\350"
    "\240\037\001\"\260\002\n\022RegisteredContract\022\033\n\tgas_limit\030"
    "\001 \001(\004R\010gasLimit\022\033\n\tgas_price\030\002 \001(\004R\010gasP"
    "rice\022#\n\ris_executable\030\003 \001(\010R\014isExecutabl"
    "e\022\035\n\007code_id\030\004 \001(\004B\004\310\336\037\001R\006codeId\022)\n\radmi"
    "n_address\030\005 \001(\tB\004\310\336\037\001R\014adminAddress\022-\n\017g"
    "ranter_address\030\006 \001(\tB\004\310\336\037\001R\016granterAddre"
    "ss\022<\n\tfund_mode\030\007 \001(\0162\037.injective.wasmx."
    "v1.FundingModeR\010fundMode:\004\350\240\037\001B\333\001\n\026com.i"
    "njective.wasmx.v1B\nWasmxProtoP\001ZKgithub."
    "com/InjectiveLabs/injective-core/injecti"
    "ve-chain/modules/wasmx/types\242\002\003IWX\252\002\022Inj"
    "ective.Wasmx.V1\312\002\022Injective\\Wasmx\\V1\342\002\036I"
    "njective\\Wasmx\\V1\\GPBMetadata\352\002\024Injectiv"
    "e::Wasmx::V1b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_injective_2fwasmx_2fv1_2fwasmx_2eproto_deps[2] =
    {
        &::descriptor_table_gogoproto_2fgogo_2eproto,
        &::descriptor_table_injective_2fwasmx_2fv1_2fproposal_2eproto,
};
static ::absl::once_flag descriptor_table_injective_2fwasmx_2fv1_2fwasmx_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_injective_2fwasmx_2fv1_2fwasmx_2eproto = {
    false,
    false,
    860,
    descriptor_table_protodef_injective_2fwasmx_2fv1_2fwasmx_2eproto,
    "injective/wasmx/v1/wasmx.proto",
    &descriptor_table_injective_2fwasmx_2fv1_2fwasmx_2eproto_once,
    descriptor_table_injective_2fwasmx_2fv1_2fwasmx_2eproto_deps,
    2,
    2,
    schemas,
    file_default_instances,
    TableStruct_injective_2fwasmx_2fv1_2fwasmx_2eproto::offsets,
    file_level_metadata_injective_2fwasmx_2fv1_2fwasmx_2eproto,
    file_level_enum_descriptors_injective_2fwasmx_2fv1_2fwasmx_2eproto,
    file_level_service_descriptors_injective_2fwasmx_2fv1_2fwasmx_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_injective_2fwasmx_2fv1_2fwasmx_2eproto_getter() {
  return &descriptor_table_injective_2fwasmx_2fv1_2fwasmx_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_injective_2fwasmx_2fv1_2fwasmx_2eproto(&descriptor_table_injective_2fwasmx_2fv1_2fwasmx_2eproto);
namespace injective {
namespace wasmx {
namespace v1 {
// ===================================================================

class Params::_Internal {
 public:
};

Params::Params(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.wasmx.v1.Params)
}
Params::Params(const Params& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:injective.wasmx.v1.Params)
}

inline void Params::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.max_begin_block_total_gas_) { ::uint64_t{0u} }

    , decltype(_impl_.max_contract_gas_limit_) { ::uint64_t{0u} }

    , decltype(_impl_.min_gas_price_) { ::uint64_t{0u} }

    , decltype(_impl_.is_execution_enabled_) { false }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Params::~Params() {
  // @@protoc_insertion_point(destructor:injective.wasmx.v1.Params)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Params::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void Params::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Params::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.wasmx.v1.Params)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.max_begin_block_total_gas_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.is_execution_enabled_) -
      reinterpret_cast<char*>(&_impl_.max_begin_block_total_gas_)) + sizeof(_impl_.is_execution_enabled_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Params::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool is_execution_enabled = 1 [json_name = "isExecutionEnabled"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.is_execution_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 max_begin_block_total_gas = 2 [json_name = "maxBeginBlockTotalGas"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.max_begin_block_total_gas_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 max_contract_gas_limit = 3 [json_name = "maxContractGasLimit"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.max_contract_gas_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 min_gas_price = 4 [json_name = "minGasPrice"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _impl_.min_gas_price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Params::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.wasmx.v1.Params)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_execution_enabled = 1 [json_name = "isExecutionEnabled"];
  if (this->_internal_is_execution_enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_is_execution_enabled(), target);
  }

  // uint64 max_begin_block_total_gas = 2 [json_name = "maxBeginBlockTotalGas"];
  if (this->_internal_max_begin_block_total_gas() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_max_begin_block_total_gas(), target);
  }

  // uint64 max_contract_gas_limit = 3 [json_name = "maxContractGasLimit"];
  if (this->_internal_max_contract_gas_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        3, this->_internal_max_contract_gas_limit(), target);
  }

  // uint64 min_gas_price = 4 [json_name = "minGasPrice"];
  if (this->_internal_min_gas_price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        4, this->_internal_min_gas_price(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.wasmx.v1.Params)
  return target;
}

::size_t Params::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.wasmx.v1.Params)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 max_begin_block_total_gas = 2 [json_name = "maxBeginBlockTotalGas"];
  if (this->_internal_max_begin_block_total_gas() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_max_begin_block_total_gas());
  }

  // uint64 max_contract_gas_limit = 3 [json_name = "maxContractGasLimit"];
  if (this->_internal_max_contract_gas_limit() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_max_contract_gas_limit());
  }

  // uint64 min_gas_price = 4 [json_name = "minGasPrice"];
  if (this->_internal_min_gas_price() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_min_gas_price());
  }

  // bool is_execution_enabled = 1 [json_name = "isExecutionEnabled"];
  if (this->_internal_is_execution_enabled() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Params::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Params::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Params::GetClassData() const { return &_class_data_; }


void Params::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Params*>(&to_msg);
  auto& from = static_cast<const Params&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.wasmx.v1.Params)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_max_begin_block_total_gas() != 0) {
    _this->_internal_set_max_begin_block_total_gas(from._internal_max_begin_block_total_gas());
  }
  if (from._internal_max_contract_gas_limit() != 0) {
    _this->_internal_set_max_contract_gas_limit(from._internal_max_contract_gas_limit());
  }
  if (from._internal_min_gas_price() != 0) {
    _this->_internal_set_min_gas_price(from._internal_min_gas_price());
  }
  if (from._internal_is_execution_enabled() != 0) {
    _this->_internal_set_is_execution_enabled(from._internal_is_execution_enabled());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Params::CopyFrom(const Params& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.wasmx.v1.Params)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Params::IsInitialized() const {
  return true;
}

void Params::InternalSwap(Params* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Params, _impl_.is_execution_enabled_)
      + sizeof(Params::_impl_.is_execution_enabled_)
      - PROTOBUF_FIELD_OFFSET(Params, _impl_.max_begin_block_total_gas_)>(
          reinterpret_cast<char*>(&_impl_.max_begin_block_total_gas_),
          reinterpret_cast<char*>(&other->_impl_.max_begin_block_total_gas_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Params::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fwasmx_2fv1_2fwasmx_2eproto_getter, &descriptor_table_injective_2fwasmx_2fv1_2fwasmx_2eproto_once,
      file_level_metadata_injective_2fwasmx_2fv1_2fwasmx_2eproto[0]);
}
// ===================================================================

class RegisteredContract::_Internal {
 public:
};

RegisteredContract::RegisteredContract(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.wasmx.v1.RegisteredContract)
}
RegisteredContract::RegisteredContract(const RegisteredContract& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RegisteredContract* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.admin_address_) {}

    , decltype(_impl_.granter_address_) {}

    , decltype(_impl_.gas_limit_) {}

    , decltype(_impl_.gas_price_) {}

    , decltype(_impl_.code_id_) {}

    , decltype(_impl_.is_executable_) {}

    , decltype(_impl_.fund_mode_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.admin_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.admin_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_admin_address().empty()) {
    _this->_impl_.admin_address_.Set(from._internal_admin_address(), _this->GetArenaForAllocation());
  }
  _impl_.granter_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.granter_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_granter_address().empty()) {
    _this->_impl_.granter_address_.Set(from._internal_granter_address(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.gas_limit_, &from._impl_.gas_limit_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.fund_mode_) -
    reinterpret_cast<char*>(&_impl_.gas_limit_)) + sizeof(_impl_.fund_mode_));
  // @@protoc_insertion_point(copy_constructor:injective.wasmx.v1.RegisteredContract)
}

inline void RegisteredContract::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.admin_address_) {}

    , decltype(_impl_.granter_address_) {}

    , decltype(_impl_.gas_limit_) { ::uint64_t{0u} }

    , decltype(_impl_.gas_price_) { ::uint64_t{0u} }

    , decltype(_impl_.code_id_) { ::uint64_t{0u} }

    , decltype(_impl_.is_executable_) { false }

    , decltype(_impl_.fund_mode_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.admin_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.admin_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.granter_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.granter_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RegisteredContract::~RegisteredContract() {
  // @@protoc_insertion_point(destructor:injective.wasmx.v1.RegisteredContract)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RegisteredContract::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.admin_address_.Destroy();
  _impl_.granter_address_.Destroy();
}

void RegisteredContract::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RegisteredContract::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.wasmx.v1.RegisteredContract)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.admin_address_.ClearToEmpty();
  _impl_.granter_address_.ClearToEmpty();
  ::memset(&_impl_.gas_limit_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.fund_mode_) -
      reinterpret_cast<char*>(&_impl_.gas_limit_)) + sizeof(_impl_.fund_mode_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegisteredContract::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 gas_limit = 1 [json_name = "gasLimit"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.gas_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 gas_price = 2 [json_name = "gasPrice"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.gas_price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bool is_executable = 3 [json_name = "isExecutable"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.is_executable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 code_id = 4 [json_name = "codeId", (.gogoproto.nullable) = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _impl_.code_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string admin_address = 5 [json_name = "adminAddress", (.gogoproto.nullable) = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_admin_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.wasmx.v1.RegisteredContract.admin_address"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string granter_address = 6 [json_name = "granterAddress", (.gogoproto.nullable) = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_granter_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.wasmx.v1.RegisteredContract.granter_address"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .injective.wasmx.v1.FundingMode fund_mode = 7 [json_name = "fundMode"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 56)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_fund_mode(static_cast<::injective::wasmx::v1::FundingMode>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* RegisteredContract::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.wasmx.v1.RegisteredContract)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 gas_limit = 1 [json_name = "gasLimit"];
  if (this->_internal_gas_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_gas_limit(), target);
  }

  // uint64 gas_price = 2 [json_name = "gasPrice"];
  if (this->_internal_gas_price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_gas_price(), target);
  }

  // bool is_executable = 3 [json_name = "isExecutable"];
  if (this->_internal_is_executable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        3, this->_internal_is_executable(), target);
  }

  // uint64 code_id = 4 [json_name = "codeId", (.gogoproto.nullable) = true];
  if (this->_internal_code_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        4, this->_internal_code_id(), target);
  }

  // string admin_address = 5 [json_name = "adminAddress", (.gogoproto.nullable) = true];
  if (!this->_internal_admin_address().empty()) {
    const std::string& _s = this->_internal_admin_address();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.wasmx.v1.RegisteredContract.admin_address");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // string granter_address = 6 [json_name = "granterAddress", (.gogoproto.nullable) = true];
  if (!this->_internal_granter_address().empty()) {
    const std::string& _s = this->_internal_granter_address();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.wasmx.v1.RegisteredContract.granter_address");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  // .injective.wasmx.v1.FundingMode fund_mode = 7 [json_name = "fundMode"];
  if (this->_internal_fund_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        7, this->_internal_fund_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.wasmx.v1.RegisteredContract)
  return target;
}

::size_t RegisteredContract::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.wasmx.v1.RegisteredContract)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string admin_address = 5 [json_name = "adminAddress", (.gogoproto.nullable) = true];
  if (!this->_internal_admin_address().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_admin_address());
  }

  // string granter_address = 6 [json_name = "granterAddress", (.gogoproto.nullable) = true];
  if (!this->_internal_granter_address().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_granter_address());
  }

  // uint64 gas_limit = 1 [json_name = "gasLimit"];
  if (this->_internal_gas_limit() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_gas_limit());
  }

  // uint64 gas_price = 2 [json_name = "gasPrice"];
  if (this->_internal_gas_price() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_gas_price());
  }

  // uint64 code_id = 4 [json_name = "codeId", (.gogoproto.nullable) = true];
  if (this->_internal_code_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_code_id());
  }

  // bool is_executable = 3 [json_name = "isExecutable"];
  if (this->_internal_is_executable() != 0) {
    total_size += 2;
  }

  // .injective.wasmx.v1.FundingMode fund_mode = 7 [json_name = "fundMode"];
  if (this->_internal_fund_mode() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_fund_mode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RegisteredContract::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RegisteredContract::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RegisteredContract::GetClassData() const { return &_class_data_; }


void RegisteredContract::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RegisteredContract*>(&to_msg);
  auto& from = static_cast<const RegisteredContract&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.wasmx.v1.RegisteredContract)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_admin_address().empty()) {
    _this->_internal_set_admin_address(from._internal_admin_address());
  }
  if (!from._internal_granter_address().empty()) {
    _this->_internal_set_granter_address(from._internal_granter_address());
  }
  if (from._internal_gas_limit() != 0) {
    _this->_internal_set_gas_limit(from._internal_gas_limit());
  }
  if (from._internal_gas_price() != 0) {
    _this->_internal_set_gas_price(from._internal_gas_price());
  }
  if (from._internal_code_id() != 0) {
    _this->_internal_set_code_id(from._internal_code_id());
  }
  if (from._internal_is_executable() != 0) {
    _this->_internal_set_is_executable(from._internal_is_executable());
  }
  if (from._internal_fund_mode() != 0) {
    _this->_internal_set_fund_mode(from._internal_fund_mode());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RegisteredContract::CopyFrom(const RegisteredContract& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.wasmx.v1.RegisteredContract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisteredContract::IsInitialized() const {
  return true;
}

void RegisteredContract::InternalSwap(RegisteredContract* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.admin_address_, lhs_arena,
                                       &other->_impl_.admin_address_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.granter_address_, lhs_arena,
                                       &other->_impl_.granter_address_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RegisteredContract, _impl_.fund_mode_)
      + sizeof(RegisteredContract::_impl_.fund_mode_)
      - PROTOBUF_FIELD_OFFSET(RegisteredContract, _impl_.gas_limit_)>(
          reinterpret_cast<char*>(&_impl_.gas_limit_),
          reinterpret_cast<char*>(&other->_impl_.gas_limit_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RegisteredContract::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fwasmx_2fv1_2fwasmx_2eproto_getter, &descriptor_table_injective_2fwasmx_2fv1_2fwasmx_2eproto_once,
      file_level_metadata_injective_2fwasmx_2fv1_2fwasmx_2eproto[1]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace wasmx
}  // namespace injective
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::injective::wasmx::v1::Params*
Arena::CreateMaybeMessage< ::injective::wasmx::v1::Params >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::wasmx::v1::Params >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::wasmx::v1::RegisteredContract*
Arena::CreateMaybeMessage< ::injective::wasmx::v1::RegisteredContract >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::wasmx::v1::RegisteredContract >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

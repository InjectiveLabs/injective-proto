// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: injective/wasmx/v1/proposal.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_injective_2fwasmx_2fv1_2fproposal_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_injective_2fwasmx_2fv1_2fproposal_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "cosmos_proto/cosmos.pb.h"
#include "cosmwasm/wasm/v1/proposal.pb.h"
#include "gogoproto/gogo.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_injective_2fwasmx_2fv1_2fproposal_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_injective_2fwasmx_2fv1_2fproposal_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_injective_2fwasmx_2fv1_2fproposal_2eproto;
namespace injective {
namespace wasmx {
namespace v1 {
class BatchContractDeregistrationProposal;
struct BatchContractDeregistrationProposalDefaultTypeInternal;
extern BatchContractDeregistrationProposalDefaultTypeInternal _BatchContractDeregistrationProposal_default_instance_;
class BatchContractRegistrationRequestProposal;
struct BatchContractRegistrationRequestProposalDefaultTypeInternal;
extern BatchContractRegistrationRequestProposalDefaultTypeInternal _BatchContractRegistrationRequestProposal_default_instance_;
class BatchStoreCodeProposal;
struct BatchStoreCodeProposalDefaultTypeInternal;
extern BatchStoreCodeProposalDefaultTypeInternal _BatchStoreCodeProposal_default_instance_;
class ContractRegistrationRequest;
struct ContractRegistrationRequestDefaultTypeInternal;
extern ContractRegistrationRequestDefaultTypeInternal _ContractRegistrationRequest_default_instance_;
class ContractRegistrationRequestProposal;
struct ContractRegistrationRequestProposalDefaultTypeInternal;
extern ContractRegistrationRequestProposalDefaultTypeInternal _ContractRegistrationRequestProposal_default_instance_;
}  // namespace v1
}  // namespace wasmx
}  // namespace injective
PROTOBUF_NAMESPACE_OPEN
template <>
::injective::wasmx::v1::BatchContractDeregistrationProposal* Arena::CreateMaybeMessage<::injective::wasmx::v1::BatchContractDeregistrationProposal>(Arena*);
template <>
::injective::wasmx::v1::BatchContractRegistrationRequestProposal* Arena::CreateMaybeMessage<::injective::wasmx::v1::BatchContractRegistrationRequestProposal>(Arena*);
template <>
::injective::wasmx::v1::BatchStoreCodeProposal* Arena::CreateMaybeMessage<::injective::wasmx::v1::BatchStoreCodeProposal>(Arena*);
template <>
::injective::wasmx::v1::ContractRegistrationRequest* Arena::CreateMaybeMessage<::injective::wasmx::v1::ContractRegistrationRequest>(Arena*);
template <>
::injective::wasmx::v1::ContractRegistrationRequestProposal* Arena::CreateMaybeMessage<::injective::wasmx::v1::ContractRegistrationRequestProposal>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace injective {
namespace wasmx {
namespace v1 {
enum FundingMode : int {
  Unspecified = 0,
  SelfFunded = 1,
  GrantOnly = 2,
  Dual = 3,
  FundingMode_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  FundingMode_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool FundingMode_IsValid(int value);
constexpr FundingMode FundingMode_MIN = static_cast<FundingMode>(0);
constexpr FundingMode FundingMode_MAX = static_cast<FundingMode>(3);
constexpr int FundingMode_ARRAYSIZE = 3 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
FundingMode_descriptor();
template <typename T>
const std::string& FundingMode_Name(T value) {
  static_assert(std::is_same<T, FundingMode>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to FundingMode_Name().");
  return FundingMode_Name(static_cast<FundingMode>(value));
}
template <>
inline const std::string& FundingMode_Name(FundingMode value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<FundingMode_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool FundingMode_Parse(absl::string_view name, FundingMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FundingMode>(
      FundingMode_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class ContractRegistrationRequestProposal final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.wasmx.v1.ContractRegistrationRequestProposal) */ {
 public:
  inline ContractRegistrationRequestProposal() : ContractRegistrationRequestProposal(nullptr) {}
  ~ContractRegistrationRequestProposal() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ContractRegistrationRequestProposal(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ContractRegistrationRequestProposal(const ContractRegistrationRequestProposal& from);
  ContractRegistrationRequestProposal(ContractRegistrationRequestProposal&& from) noexcept
    : ContractRegistrationRequestProposal() {
    *this = ::std::move(from);
  }

  inline ContractRegistrationRequestProposal& operator=(const ContractRegistrationRequestProposal& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContractRegistrationRequestProposal& operator=(ContractRegistrationRequestProposal&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ContractRegistrationRequestProposal& default_instance() {
    return *internal_default_instance();
  }
  static inline const ContractRegistrationRequestProposal* internal_default_instance() {
    return reinterpret_cast<const ContractRegistrationRequestProposal*>(
               &_ContractRegistrationRequestProposal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ContractRegistrationRequestProposal& a, ContractRegistrationRequestProposal& b) {
    a.Swap(&b);
  }
  inline void Swap(ContractRegistrationRequestProposal* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ContractRegistrationRequestProposal* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ContractRegistrationRequestProposal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ContractRegistrationRequestProposal>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ContractRegistrationRequestProposal& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ContractRegistrationRequestProposal& from) {
    ContractRegistrationRequestProposal::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContractRegistrationRequestProposal* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.wasmx.v1.ContractRegistrationRequestProposal";
  }
  protected:
  explicit ContractRegistrationRequestProposal(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTitleFieldNumber = 1,
    kDescriptionFieldNumber = 2,
    kContractRegistrationRequestFieldNumber = 3,
  };
  // string title = 1 [json_name = "title"];
  void clear_title() ;
  const std::string& title() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_title(Arg_&& arg, Args_... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* ptr);

  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(
      const std::string& value);
  std::string* _internal_mutable_title();

  public:
  // string description = 2 [json_name = "description"];
  void clear_description() ;
  const std::string& description() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_description(Arg_&& arg, Args_... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* ptr);

  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(
      const std::string& value);
  std::string* _internal_mutable_description();

  public:
  // .injective.wasmx.v1.ContractRegistrationRequest contract_registration_request = 3 [json_name = "contractRegistrationRequest", (.gogoproto.nullable) = false];
  bool has_contract_registration_request() const;
  void clear_contract_registration_request() ;
  const ::injective::wasmx::v1::ContractRegistrationRequest& contract_registration_request() const;
  PROTOBUF_NODISCARD ::injective::wasmx::v1::ContractRegistrationRequest* release_contract_registration_request();
  ::injective::wasmx::v1::ContractRegistrationRequest* mutable_contract_registration_request();
  void set_allocated_contract_registration_request(::injective::wasmx::v1::ContractRegistrationRequest* contract_registration_request);
  private:
  const ::injective::wasmx::v1::ContractRegistrationRequest& _internal_contract_registration_request() const;
  ::injective::wasmx::v1::ContractRegistrationRequest* _internal_mutable_contract_registration_request();
  public:
  void unsafe_arena_set_allocated_contract_registration_request(
      ::injective::wasmx::v1::ContractRegistrationRequest* contract_registration_request);
  ::injective::wasmx::v1::ContractRegistrationRequest* unsafe_arena_release_contract_registration_request();
  // @@protoc_insertion_point(class_scope:injective.wasmx.v1.ContractRegistrationRequestProposal)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
    ::injective::wasmx::v1::ContractRegistrationRequest* contract_registration_request_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2fwasmx_2fv1_2fproposal_2eproto;
};// -------------------------------------------------------------------

class BatchContractRegistrationRequestProposal final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.wasmx.v1.BatchContractRegistrationRequestProposal) */ {
 public:
  inline BatchContractRegistrationRequestProposal() : BatchContractRegistrationRequestProposal(nullptr) {}
  ~BatchContractRegistrationRequestProposal() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR BatchContractRegistrationRequestProposal(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BatchContractRegistrationRequestProposal(const BatchContractRegistrationRequestProposal& from);
  BatchContractRegistrationRequestProposal(BatchContractRegistrationRequestProposal&& from) noexcept
    : BatchContractRegistrationRequestProposal() {
    *this = ::std::move(from);
  }

  inline BatchContractRegistrationRequestProposal& operator=(const BatchContractRegistrationRequestProposal& from) {
    CopyFrom(from);
    return *this;
  }
  inline BatchContractRegistrationRequestProposal& operator=(BatchContractRegistrationRequestProposal&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BatchContractRegistrationRequestProposal& default_instance() {
    return *internal_default_instance();
  }
  static inline const BatchContractRegistrationRequestProposal* internal_default_instance() {
    return reinterpret_cast<const BatchContractRegistrationRequestProposal*>(
               &_BatchContractRegistrationRequestProposal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BatchContractRegistrationRequestProposal& a, BatchContractRegistrationRequestProposal& b) {
    a.Swap(&b);
  }
  inline void Swap(BatchContractRegistrationRequestProposal* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BatchContractRegistrationRequestProposal* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BatchContractRegistrationRequestProposal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BatchContractRegistrationRequestProposal>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BatchContractRegistrationRequestProposal& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BatchContractRegistrationRequestProposal& from) {
    BatchContractRegistrationRequestProposal::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BatchContractRegistrationRequestProposal* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.wasmx.v1.BatchContractRegistrationRequestProposal";
  }
  protected:
  explicit BatchContractRegistrationRequestProposal(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContractRegistrationRequestsFieldNumber = 3,
    kTitleFieldNumber = 1,
    kDescriptionFieldNumber = 2,
  };
  // repeated .injective.wasmx.v1.ContractRegistrationRequest contract_registration_requests = 3 [json_name = "contractRegistrationRequests", (.gogoproto.nullable) = false];
  int contract_registration_requests_size() const;
  private:
  int _internal_contract_registration_requests_size() const;

  public:
  void clear_contract_registration_requests() ;
  ::injective::wasmx::v1::ContractRegistrationRequest* mutable_contract_registration_requests(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::wasmx::v1::ContractRegistrationRequest >*
      mutable_contract_registration_requests();
  private:
  const ::injective::wasmx::v1::ContractRegistrationRequest& _internal_contract_registration_requests(int index) const;
  ::injective::wasmx::v1::ContractRegistrationRequest* _internal_add_contract_registration_requests();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::wasmx::v1::ContractRegistrationRequest>& _internal_contract_registration_requests() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::wasmx::v1::ContractRegistrationRequest>* _internal_mutable_contract_registration_requests();
  public:
  const ::injective::wasmx::v1::ContractRegistrationRequest& contract_registration_requests(int index) const;
  ::injective::wasmx::v1::ContractRegistrationRequest* add_contract_registration_requests();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::wasmx::v1::ContractRegistrationRequest >&
      contract_registration_requests() const;
  // string title = 1 [json_name = "title"];
  void clear_title() ;
  const std::string& title() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_title(Arg_&& arg, Args_... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* ptr);

  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(
      const std::string& value);
  std::string* _internal_mutable_title();

  public:
  // string description = 2 [json_name = "description"];
  void clear_description() ;
  const std::string& description() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_description(Arg_&& arg, Args_... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* ptr);

  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(
      const std::string& value);
  std::string* _internal_mutable_description();

  public:
  // @@protoc_insertion_point(class_scope:injective.wasmx.v1.BatchContractRegistrationRequestProposal)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::wasmx::v1::ContractRegistrationRequest > contract_registration_requests_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2fwasmx_2fv1_2fproposal_2eproto;
};// -------------------------------------------------------------------

class BatchContractDeregistrationProposal final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.wasmx.v1.BatchContractDeregistrationProposal) */ {
 public:
  inline BatchContractDeregistrationProposal() : BatchContractDeregistrationProposal(nullptr) {}
  ~BatchContractDeregistrationProposal() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR BatchContractDeregistrationProposal(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BatchContractDeregistrationProposal(const BatchContractDeregistrationProposal& from);
  BatchContractDeregistrationProposal(BatchContractDeregistrationProposal&& from) noexcept
    : BatchContractDeregistrationProposal() {
    *this = ::std::move(from);
  }

  inline BatchContractDeregistrationProposal& operator=(const BatchContractDeregistrationProposal& from) {
    CopyFrom(from);
    return *this;
  }
  inline BatchContractDeregistrationProposal& operator=(BatchContractDeregistrationProposal&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BatchContractDeregistrationProposal& default_instance() {
    return *internal_default_instance();
  }
  static inline const BatchContractDeregistrationProposal* internal_default_instance() {
    return reinterpret_cast<const BatchContractDeregistrationProposal*>(
               &_BatchContractDeregistrationProposal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(BatchContractDeregistrationProposal& a, BatchContractDeregistrationProposal& b) {
    a.Swap(&b);
  }
  inline void Swap(BatchContractDeregistrationProposal* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BatchContractDeregistrationProposal* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BatchContractDeregistrationProposal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BatchContractDeregistrationProposal>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BatchContractDeregistrationProposal& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BatchContractDeregistrationProposal& from) {
    BatchContractDeregistrationProposal::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BatchContractDeregistrationProposal* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.wasmx.v1.BatchContractDeregistrationProposal";
  }
  protected:
  explicit BatchContractDeregistrationProposal(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContractsFieldNumber = 3,
    kTitleFieldNumber = 1,
    kDescriptionFieldNumber = 2,
  };
  // repeated string contracts = 3 [json_name = "contracts"];
  int contracts_size() const;
  private:
  int _internal_contracts_size() const;

  public:
  void clear_contracts() ;
  const std::string& contracts(int index) const;
  std::string* mutable_contracts(int index);
  void set_contracts(int index, const std::string& value);
  void set_contracts(int index, std::string&& value);
  void set_contracts(int index, const char* value);
  void set_contracts(int index, const char* value, std::size_t size);
  void set_contracts(int index, absl::string_view value);
  std::string* add_contracts();
  void add_contracts(const std::string& value);
  void add_contracts(std::string&& value);
  void add_contracts(const char* value);
  void add_contracts(const char* value, std::size_t size);
  void add_contracts(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& contracts() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_contracts();

  private:
  const std::string& _internal_contracts(int index) const;
  std::string* _internal_add_contracts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_contracts() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_contracts();

  public:
  // string title = 1 [json_name = "title"];
  void clear_title() ;
  const std::string& title() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_title(Arg_&& arg, Args_... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* ptr);

  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(
      const std::string& value);
  std::string* _internal_mutable_title();

  public:
  // string description = 2 [json_name = "description"];
  void clear_description() ;
  const std::string& description() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_description(Arg_&& arg, Args_... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* ptr);

  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(
      const std::string& value);
  std::string* _internal_mutable_description();

  public:
  // @@protoc_insertion_point(class_scope:injective.wasmx.v1.BatchContractDeregistrationProposal)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> contracts_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2fwasmx_2fv1_2fproposal_2eproto;
};// -------------------------------------------------------------------

class ContractRegistrationRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.wasmx.v1.ContractRegistrationRequest) */ {
 public:
  inline ContractRegistrationRequest() : ContractRegistrationRequest(nullptr) {}
  ~ContractRegistrationRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ContractRegistrationRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ContractRegistrationRequest(const ContractRegistrationRequest& from);
  ContractRegistrationRequest(ContractRegistrationRequest&& from) noexcept
    : ContractRegistrationRequest() {
    *this = ::std::move(from);
  }

  inline ContractRegistrationRequest& operator=(const ContractRegistrationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContractRegistrationRequest& operator=(ContractRegistrationRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ContractRegistrationRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ContractRegistrationRequest* internal_default_instance() {
    return reinterpret_cast<const ContractRegistrationRequest*>(
               &_ContractRegistrationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ContractRegistrationRequest& a, ContractRegistrationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ContractRegistrationRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ContractRegistrationRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ContractRegistrationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ContractRegistrationRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ContractRegistrationRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ContractRegistrationRequest& from) {
    ContractRegistrationRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContractRegistrationRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.wasmx.v1.ContractRegistrationRequest";
  }
  protected:
  explicit ContractRegistrationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContractAddressFieldNumber = 1,
    kAdminAddressFieldNumber = 7,
    kGranterAddressFieldNumber = 8,
    kGasLimitFieldNumber = 2,
    kGasPriceFieldNumber = 3,
    kCodeIdFieldNumber = 6,
    kShouldPinContractFieldNumber = 4,
    kIsMigrationAllowedFieldNumber = 5,
    kFundingModeFieldNumber = 9,
  };
  // string contract_address = 1 [json_name = "contractAddress"];
  void clear_contract_address() ;
  const std::string& contract_address() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_contract_address(Arg_&& arg, Args_... args);
  std::string* mutable_contract_address();
  PROTOBUF_NODISCARD std::string* release_contract_address();
  void set_allocated_contract_address(std::string* ptr);

  private:
  const std::string& _internal_contract_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_contract_address(
      const std::string& value);
  std::string* _internal_mutable_contract_address();

  public:
  // string admin_address = 7 [json_name = "adminAddress"];
  void clear_admin_address() ;
  const std::string& admin_address() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_admin_address(Arg_&& arg, Args_... args);
  std::string* mutable_admin_address();
  PROTOBUF_NODISCARD std::string* release_admin_address();
  void set_allocated_admin_address(std::string* ptr);

  private:
  const std::string& _internal_admin_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_admin_address(
      const std::string& value);
  std::string* _internal_mutable_admin_address();

  public:
  // string granter_address = 8 [json_name = "granterAddress"];
  void clear_granter_address() ;
  const std::string& granter_address() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_granter_address(Arg_&& arg, Args_... args);
  std::string* mutable_granter_address();
  PROTOBUF_NODISCARD std::string* release_granter_address();
  void set_allocated_granter_address(std::string* ptr);

  private:
  const std::string& _internal_granter_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_granter_address(
      const std::string& value);
  std::string* _internal_mutable_granter_address();

  public:
  // uint64 gas_limit = 2 [json_name = "gasLimit"];
  void clear_gas_limit() ;
  ::uint64_t gas_limit() const;
  void set_gas_limit(::uint64_t value);

  private:
  ::uint64_t _internal_gas_limit() const;
  void _internal_set_gas_limit(::uint64_t value);

  public:
  // uint64 gas_price = 3 [json_name = "gasPrice"];
  void clear_gas_price() ;
  ::uint64_t gas_price() const;
  void set_gas_price(::uint64_t value);

  private:
  ::uint64_t _internal_gas_price() const;
  void _internal_set_gas_price(::uint64_t value);

  public:
  // uint64 code_id = 6 [json_name = "codeId"];
  void clear_code_id() ;
  ::uint64_t code_id() const;
  void set_code_id(::uint64_t value);

  private:
  ::uint64_t _internal_code_id() const;
  void _internal_set_code_id(::uint64_t value);

  public:
  // bool should_pin_contract = 4 [json_name = "shouldPinContract"];
  void clear_should_pin_contract() ;
  bool should_pin_contract() const;
  void set_should_pin_contract(bool value);

  private:
  bool _internal_should_pin_contract() const;
  void _internal_set_should_pin_contract(bool value);

  public:
  // bool is_migration_allowed = 5 [json_name = "isMigrationAllowed"];
  void clear_is_migration_allowed() ;
  bool is_migration_allowed() const;
  void set_is_migration_allowed(bool value);

  private:
  bool _internal_is_migration_allowed() const;
  void _internal_set_is_migration_allowed(bool value);

  public:
  // .injective.wasmx.v1.FundingMode funding_mode = 9 [json_name = "fundingMode"];
  void clear_funding_mode() ;
  ::injective::wasmx::v1::FundingMode funding_mode() const;
  void set_funding_mode(::injective::wasmx::v1::FundingMode value);

  private:
  ::injective::wasmx::v1::FundingMode _internal_funding_mode() const;
  void _internal_set_funding_mode(::injective::wasmx::v1::FundingMode value);

  public:
  // @@protoc_insertion_point(class_scope:injective.wasmx.v1.ContractRegistrationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contract_address_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr admin_address_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr granter_address_;
    ::uint64_t gas_limit_;
    ::uint64_t gas_price_;
    ::uint64_t code_id_;
    bool should_pin_contract_;
    bool is_migration_allowed_;
    int funding_mode_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2fwasmx_2fv1_2fproposal_2eproto;
};// -------------------------------------------------------------------

class BatchStoreCodeProposal final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.wasmx.v1.BatchStoreCodeProposal) */ {
 public:
  inline BatchStoreCodeProposal() : BatchStoreCodeProposal(nullptr) {}
  ~BatchStoreCodeProposal() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR BatchStoreCodeProposal(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BatchStoreCodeProposal(const BatchStoreCodeProposal& from);
  BatchStoreCodeProposal(BatchStoreCodeProposal&& from) noexcept
    : BatchStoreCodeProposal() {
    *this = ::std::move(from);
  }

  inline BatchStoreCodeProposal& operator=(const BatchStoreCodeProposal& from) {
    CopyFrom(from);
    return *this;
  }
  inline BatchStoreCodeProposal& operator=(BatchStoreCodeProposal&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BatchStoreCodeProposal& default_instance() {
    return *internal_default_instance();
  }
  static inline const BatchStoreCodeProposal* internal_default_instance() {
    return reinterpret_cast<const BatchStoreCodeProposal*>(
               &_BatchStoreCodeProposal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(BatchStoreCodeProposal& a, BatchStoreCodeProposal& b) {
    a.Swap(&b);
  }
  inline void Swap(BatchStoreCodeProposal* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BatchStoreCodeProposal* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BatchStoreCodeProposal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BatchStoreCodeProposal>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BatchStoreCodeProposal& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BatchStoreCodeProposal& from) {
    BatchStoreCodeProposal::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BatchStoreCodeProposal* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.wasmx.v1.BatchStoreCodeProposal";
  }
  protected:
  explicit BatchStoreCodeProposal(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProposalsFieldNumber = 3,
    kTitleFieldNumber = 1,
    kDescriptionFieldNumber = 2,
  };
  // repeated .cosmwasm.wasm.v1.StoreCodeProposal proposals = 3 [json_name = "proposals", (.gogoproto.nullable) = false];
  int proposals_size() const;
  private:
  int _internal_proposals_size() const;

  public:
  void clear_proposals() ;
  ::cosmwasm::wasm::v1::StoreCodeProposal* mutable_proposals(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmwasm::wasm::v1::StoreCodeProposal >*
      mutable_proposals();
  private:
  const ::cosmwasm::wasm::v1::StoreCodeProposal& _internal_proposals(int index) const;
  ::cosmwasm::wasm::v1::StoreCodeProposal* _internal_add_proposals();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmwasm::wasm::v1::StoreCodeProposal>& _internal_proposals() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmwasm::wasm::v1::StoreCodeProposal>* _internal_mutable_proposals();
  public:
  const ::cosmwasm::wasm::v1::StoreCodeProposal& proposals(int index) const;
  ::cosmwasm::wasm::v1::StoreCodeProposal* add_proposals();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmwasm::wasm::v1::StoreCodeProposal >&
      proposals() const;
  // string title = 1 [json_name = "title"];
  void clear_title() ;
  const std::string& title() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_title(Arg_&& arg, Args_... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* ptr);

  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(
      const std::string& value);
  std::string* _internal_mutable_title();

  public:
  // string description = 2 [json_name = "description"];
  void clear_description() ;
  const std::string& description() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_description(Arg_&& arg, Args_... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* ptr);

  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(
      const std::string& value);
  std::string* _internal_mutable_description();

  public:
  // @@protoc_insertion_point(class_scope:injective.wasmx.v1.BatchStoreCodeProposal)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmwasm::wasm::v1::StoreCodeProposal > proposals_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2fwasmx_2fv1_2fproposal_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// ContractRegistrationRequestProposal

// string title = 1 [json_name = "title"];
inline void ContractRegistrationRequestProposal::clear_title() {
  _impl_.title_.ClearToEmpty();
}
inline const std::string& ContractRegistrationRequestProposal::title() const {
  // @@protoc_insertion_point(field_get:injective.wasmx.v1.ContractRegistrationRequestProposal.title)
  return _internal_title();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ContractRegistrationRequestProposal::set_title(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.title_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.wasmx.v1.ContractRegistrationRequestProposal.title)
}
inline std::string* ContractRegistrationRequestProposal::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:injective.wasmx.v1.ContractRegistrationRequestProposal.title)
  return _s;
}
inline const std::string& ContractRegistrationRequestProposal::_internal_title() const {
  return _impl_.title_.Get();
}
inline void ContractRegistrationRequestProposal::_internal_set_title(const std::string& value) {
  ;


  _impl_.title_.Set(value, GetArenaForAllocation());
}
inline std::string* ContractRegistrationRequestProposal::_internal_mutable_title() {
  ;
  return _impl_.title_.Mutable( GetArenaForAllocation());
}
inline std::string* ContractRegistrationRequestProposal::release_title() {
  // @@protoc_insertion_point(field_release:injective.wasmx.v1.ContractRegistrationRequestProposal.title)
  return _impl_.title_.Release();
}
inline void ContractRegistrationRequestProposal::set_allocated_title(std::string* value) {
  _impl_.title_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.title_.IsDefault()) {
          _impl_.title_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.wasmx.v1.ContractRegistrationRequestProposal.title)
}

// string description = 2 [json_name = "description"];
inline void ContractRegistrationRequestProposal::clear_description() {
  _impl_.description_.ClearToEmpty();
}
inline const std::string& ContractRegistrationRequestProposal::description() const {
  // @@protoc_insertion_point(field_get:injective.wasmx.v1.ContractRegistrationRequestProposal.description)
  return _internal_description();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ContractRegistrationRequestProposal::set_description(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.description_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.wasmx.v1.ContractRegistrationRequestProposal.description)
}
inline std::string* ContractRegistrationRequestProposal::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:injective.wasmx.v1.ContractRegistrationRequestProposal.description)
  return _s;
}
inline const std::string& ContractRegistrationRequestProposal::_internal_description() const {
  return _impl_.description_.Get();
}
inline void ContractRegistrationRequestProposal::_internal_set_description(const std::string& value) {
  ;


  _impl_.description_.Set(value, GetArenaForAllocation());
}
inline std::string* ContractRegistrationRequestProposal::_internal_mutable_description() {
  ;
  return _impl_.description_.Mutable( GetArenaForAllocation());
}
inline std::string* ContractRegistrationRequestProposal::release_description() {
  // @@protoc_insertion_point(field_release:injective.wasmx.v1.ContractRegistrationRequestProposal.description)
  return _impl_.description_.Release();
}
inline void ContractRegistrationRequestProposal::set_allocated_description(std::string* value) {
  _impl_.description_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.description_.IsDefault()) {
          _impl_.description_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.wasmx.v1.ContractRegistrationRequestProposal.description)
}

// .injective.wasmx.v1.ContractRegistrationRequest contract_registration_request = 3 [json_name = "contractRegistrationRequest", (.gogoproto.nullable) = false];
inline bool ContractRegistrationRequestProposal::has_contract_registration_request() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.contract_registration_request_ != nullptr);
  return value;
}
inline void ContractRegistrationRequestProposal::clear_contract_registration_request() {
  if (_impl_.contract_registration_request_ != nullptr) _impl_.contract_registration_request_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::injective::wasmx::v1::ContractRegistrationRequest& ContractRegistrationRequestProposal::_internal_contract_registration_request() const {
  const ::injective::wasmx::v1::ContractRegistrationRequest* p = _impl_.contract_registration_request_;
  return p != nullptr ? *p : reinterpret_cast<const ::injective::wasmx::v1::ContractRegistrationRequest&>(
      ::injective::wasmx::v1::_ContractRegistrationRequest_default_instance_);
}
inline const ::injective::wasmx::v1::ContractRegistrationRequest& ContractRegistrationRequestProposal::contract_registration_request() const {
  // @@protoc_insertion_point(field_get:injective.wasmx.v1.ContractRegistrationRequestProposal.contract_registration_request)
  return _internal_contract_registration_request();
}
inline void ContractRegistrationRequestProposal::unsafe_arena_set_allocated_contract_registration_request(
    ::injective::wasmx::v1::ContractRegistrationRequest* contract_registration_request) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.contract_registration_request_);
  }
  _impl_.contract_registration_request_ = contract_registration_request;
  if (contract_registration_request) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:injective.wasmx.v1.ContractRegistrationRequestProposal.contract_registration_request)
}
inline ::injective::wasmx::v1::ContractRegistrationRequest* ContractRegistrationRequestProposal::release_contract_registration_request() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::injective::wasmx::v1::ContractRegistrationRequest* temp = _impl_.contract_registration_request_;
  _impl_.contract_registration_request_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::injective::wasmx::v1::ContractRegistrationRequest* ContractRegistrationRequestProposal::unsafe_arena_release_contract_registration_request() {
  // @@protoc_insertion_point(field_release:injective.wasmx.v1.ContractRegistrationRequestProposal.contract_registration_request)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::injective::wasmx::v1::ContractRegistrationRequest* temp = _impl_.contract_registration_request_;
  _impl_.contract_registration_request_ = nullptr;
  return temp;
}
inline ::injective::wasmx::v1::ContractRegistrationRequest* ContractRegistrationRequestProposal::_internal_mutable_contract_registration_request() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.contract_registration_request_ == nullptr) {
    auto* p = CreateMaybeMessage<::injective::wasmx::v1::ContractRegistrationRequest>(GetArenaForAllocation());
    _impl_.contract_registration_request_ = p;
  }
  return _impl_.contract_registration_request_;
}
inline ::injective::wasmx::v1::ContractRegistrationRequest* ContractRegistrationRequestProposal::mutable_contract_registration_request() {
  ::injective::wasmx::v1::ContractRegistrationRequest* _msg = _internal_mutable_contract_registration_request();
  // @@protoc_insertion_point(field_mutable:injective.wasmx.v1.ContractRegistrationRequestProposal.contract_registration_request)
  return _msg;
}
inline void ContractRegistrationRequestProposal::set_allocated_contract_registration_request(::injective::wasmx::v1::ContractRegistrationRequest* contract_registration_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.contract_registration_request_;
  }
  if (contract_registration_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(contract_registration_request);
    if (message_arena != submessage_arena) {
      contract_registration_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, contract_registration_request, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.contract_registration_request_ = contract_registration_request;
  // @@protoc_insertion_point(field_set_allocated:injective.wasmx.v1.ContractRegistrationRequestProposal.contract_registration_request)
}

// -------------------------------------------------------------------

// BatchContractRegistrationRequestProposal

// string title = 1 [json_name = "title"];
inline void BatchContractRegistrationRequestProposal::clear_title() {
  _impl_.title_.ClearToEmpty();
}
inline const std::string& BatchContractRegistrationRequestProposal::title() const {
  // @@protoc_insertion_point(field_get:injective.wasmx.v1.BatchContractRegistrationRequestProposal.title)
  return _internal_title();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void BatchContractRegistrationRequestProposal::set_title(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.title_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.wasmx.v1.BatchContractRegistrationRequestProposal.title)
}
inline std::string* BatchContractRegistrationRequestProposal::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:injective.wasmx.v1.BatchContractRegistrationRequestProposal.title)
  return _s;
}
inline const std::string& BatchContractRegistrationRequestProposal::_internal_title() const {
  return _impl_.title_.Get();
}
inline void BatchContractRegistrationRequestProposal::_internal_set_title(const std::string& value) {
  ;


  _impl_.title_.Set(value, GetArenaForAllocation());
}
inline std::string* BatchContractRegistrationRequestProposal::_internal_mutable_title() {
  ;
  return _impl_.title_.Mutable( GetArenaForAllocation());
}
inline std::string* BatchContractRegistrationRequestProposal::release_title() {
  // @@protoc_insertion_point(field_release:injective.wasmx.v1.BatchContractRegistrationRequestProposal.title)
  return _impl_.title_.Release();
}
inline void BatchContractRegistrationRequestProposal::set_allocated_title(std::string* value) {
  _impl_.title_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.title_.IsDefault()) {
          _impl_.title_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.wasmx.v1.BatchContractRegistrationRequestProposal.title)
}

// string description = 2 [json_name = "description"];
inline void BatchContractRegistrationRequestProposal::clear_description() {
  _impl_.description_.ClearToEmpty();
}
inline const std::string& BatchContractRegistrationRequestProposal::description() const {
  // @@protoc_insertion_point(field_get:injective.wasmx.v1.BatchContractRegistrationRequestProposal.description)
  return _internal_description();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void BatchContractRegistrationRequestProposal::set_description(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.description_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.wasmx.v1.BatchContractRegistrationRequestProposal.description)
}
inline std::string* BatchContractRegistrationRequestProposal::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:injective.wasmx.v1.BatchContractRegistrationRequestProposal.description)
  return _s;
}
inline const std::string& BatchContractRegistrationRequestProposal::_internal_description() const {
  return _impl_.description_.Get();
}
inline void BatchContractRegistrationRequestProposal::_internal_set_description(const std::string& value) {
  ;


  _impl_.description_.Set(value, GetArenaForAllocation());
}
inline std::string* BatchContractRegistrationRequestProposal::_internal_mutable_description() {
  ;
  return _impl_.description_.Mutable( GetArenaForAllocation());
}
inline std::string* BatchContractRegistrationRequestProposal::release_description() {
  // @@protoc_insertion_point(field_release:injective.wasmx.v1.BatchContractRegistrationRequestProposal.description)
  return _impl_.description_.Release();
}
inline void BatchContractRegistrationRequestProposal::set_allocated_description(std::string* value) {
  _impl_.description_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.description_.IsDefault()) {
          _impl_.description_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.wasmx.v1.BatchContractRegistrationRequestProposal.description)
}

// repeated .injective.wasmx.v1.ContractRegistrationRequest contract_registration_requests = 3 [json_name = "contractRegistrationRequests", (.gogoproto.nullable) = false];
inline int BatchContractRegistrationRequestProposal::_internal_contract_registration_requests_size() const {
  return _impl_.contract_registration_requests_.size();
}
inline int BatchContractRegistrationRequestProposal::contract_registration_requests_size() const {
  return _internal_contract_registration_requests_size();
}
inline void BatchContractRegistrationRequestProposal::clear_contract_registration_requests() {
  _internal_mutable_contract_registration_requests()->Clear();
}
inline ::injective::wasmx::v1::ContractRegistrationRequest* BatchContractRegistrationRequestProposal::mutable_contract_registration_requests(int index) {
  // @@protoc_insertion_point(field_mutable:injective.wasmx.v1.BatchContractRegistrationRequestProposal.contract_registration_requests)
  return _internal_mutable_contract_registration_requests()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::wasmx::v1::ContractRegistrationRequest >*
BatchContractRegistrationRequestProposal::mutable_contract_registration_requests() {
  // @@protoc_insertion_point(field_mutable_list:injective.wasmx.v1.BatchContractRegistrationRequestProposal.contract_registration_requests)
  return _internal_mutable_contract_registration_requests();
}
inline const ::injective::wasmx::v1::ContractRegistrationRequest& BatchContractRegistrationRequestProposal::_internal_contract_registration_requests(int index) const {
  return _internal_contract_registration_requests().Get(index);
}
inline const ::injective::wasmx::v1::ContractRegistrationRequest& BatchContractRegistrationRequestProposal::contract_registration_requests(int index) const {
  // @@protoc_insertion_point(field_get:injective.wasmx.v1.BatchContractRegistrationRequestProposal.contract_registration_requests)
  return _internal_contract_registration_requests(index);
}
inline ::injective::wasmx::v1::ContractRegistrationRequest* BatchContractRegistrationRequestProposal::_internal_add_contract_registration_requests() {
  return _internal_mutable_contract_registration_requests()->Add();
}
inline ::injective::wasmx::v1::ContractRegistrationRequest* BatchContractRegistrationRequestProposal::add_contract_registration_requests() {
  ::injective::wasmx::v1::ContractRegistrationRequest* _add = _internal_add_contract_registration_requests();
  // @@protoc_insertion_point(field_add:injective.wasmx.v1.BatchContractRegistrationRequestProposal.contract_registration_requests)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::wasmx::v1::ContractRegistrationRequest >&
BatchContractRegistrationRequestProposal::contract_registration_requests() const {
  // @@protoc_insertion_point(field_list:injective.wasmx.v1.BatchContractRegistrationRequestProposal.contract_registration_requests)
  return _internal_contract_registration_requests();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::wasmx::v1::ContractRegistrationRequest>&
BatchContractRegistrationRequestProposal::_internal_contract_registration_requests() const {
  return _impl_.contract_registration_requests_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::wasmx::v1::ContractRegistrationRequest>*
BatchContractRegistrationRequestProposal::_internal_mutable_contract_registration_requests() {
  return &_impl_.contract_registration_requests_;
}

// -------------------------------------------------------------------

// BatchContractDeregistrationProposal

// string title = 1 [json_name = "title"];
inline void BatchContractDeregistrationProposal::clear_title() {
  _impl_.title_.ClearToEmpty();
}
inline const std::string& BatchContractDeregistrationProposal::title() const {
  // @@protoc_insertion_point(field_get:injective.wasmx.v1.BatchContractDeregistrationProposal.title)
  return _internal_title();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void BatchContractDeregistrationProposal::set_title(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.title_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.wasmx.v1.BatchContractDeregistrationProposal.title)
}
inline std::string* BatchContractDeregistrationProposal::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:injective.wasmx.v1.BatchContractDeregistrationProposal.title)
  return _s;
}
inline const std::string& BatchContractDeregistrationProposal::_internal_title() const {
  return _impl_.title_.Get();
}
inline void BatchContractDeregistrationProposal::_internal_set_title(const std::string& value) {
  ;


  _impl_.title_.Set(value, GetArenaForAllocation());
}
inline std::string* BatchContractDeregistrationProposal::_internal_mutable_title() {
  ;
  return _impl_.title_.Mutable( GetArenaForAllocation());
}
inline std::string* BatchContractDeregistrationProposal::release_title() {
  // @@protoc_insertion_point(field_release:injective.wasmx.v1.BatchContractDeregistrationProposal.title)
  return _impl_.title_.Release();
}
inline void BatchContractDeregistrationProposal::set_allocated_title(std::string* value) {
  _impl_.title_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.title_.IsDefault()) {
          _impl_.title_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.wasmx.v1.BatchContractDeregistrationProposal.title)
}

// string description = 2 [json_name = "description"];
inline void BatchContractDeregistrationProposal::clear_description() {
  _impl_.description_.ClearToEmpty();
}
inline const std::string& BatchContractDeregistrationProposal::description() const {
  // @@protoc_insertion_point(field_get:injective.wasmx.v1.BatchContractDeregistrationProposal.description)
  return _internal_description();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void BatchContractDeregistrationProposal::set_description(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.description_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.wasmx.v1.BatchContractDeregistrationProposal.description)
}
inline std::string* BatchContractDeregistrationProposal::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:injective.wasmx.v1.BatchContractDeregistrationProposal.description)
  return _s;
}
inline const std::string& BatchContractDeregistrationProposal::_internal_description() const {
  return _impl_.description_.Get();
}
inline void BatchContractDeregistrationProposal::_internal_set_description(const std::string& value) {
  ;


  _impl_.description_.Set(value, GetArenaForAllocation());
}
inline std::string* BatchContractDeregistrationProposal::_internal_mutable_description() {
  ;
  return _impl_.description_.Mutable( GetArenaForAllocation());
}
inline std::string* BatchContractDeregistrationProposal::release_description() {
  // @@protoc_insertion_point(field_release:injective.wasmx.v1.BatchContractDeregistrationProposal.description)
  return _impl_.description_.Release();
}
inline void BatchContractDeregistrationProposal::set_allocated_description(std::string* value) {
  _impl_.description_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.description_.IsDefault()) {
          _impl_.description_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.wasmx.v1.BatchContractDeregistrationProposal.description)
}

// repeated string contracts = 3 [json_name = "contracts"];
inline int BatchContractDeregistrationProposal::_internal_contracts_size() const {
  return _impl_.contracts_.size();
}
inline int BatchContractDeregistrationProposal::contracts_size() const {
  return _internal_contracts_size();
}
inline void BatchContractDeregistrationProposal::clear_contracts() {
  _internal_mutable_contracts()->Clear();
}
inline std::string* BatchContractDeregistrationProposal::add_contracts() {
  std::string* _s = _internal_add_contracts();
  // @@protoc_insertion_point(field_add_mutable:injective.wasmx.v1.BatchContractDeregistrationProposal.contracts)
  return _s;
}
inline const std::string& BatchContractDeregistrationProposal::contracts(int index) const {
  // @@protoc_insertion_point(field_get:injective.wasmx.v1.BatchContractDeregistrationProposal.contracts)
  return _internal_contracts(index);
}
inline std::string* BatchContractDeregistrationProposal::mutable_contracts(int index) {
  // @@protoc_insertion_point(field_mutable:injective.wasmx.v1.BatchContractDeregistrationProposal.contracts)
  return _internal_mutable_contracts()->Mutable(index);
}
inline void BatchContractDeregistrationProposal::set_contracts(int index, const std::string& value) {
  _internal_mutable_contracts()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:injective.wasmx.v1.BatchContractDeregistrationProposal.contracts)
}
inline void BatchContractDeregistrationProposal::set_contracts(int index, std::string&& value) {
  _internal_mutable_contracts()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:injective.wasmx.v1.BatchContractDeregistrationProposal.contracts)
}
inline void BatchContractDeregistrationProposal::set_contracts(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_contracts()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:injective.wasmx.v1.BatchContractDeregistrationProposal.contracts)
}
inline void BatchContractDeregistrationProposal::set_contracts(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_contracts()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:injective.wasmx.v1.BatchContractDeregistrationProposal.contracts)
}
inline void BatchContractDeregistrationProposal::set_contracts(int index, absl::string_view value) {
  _internal_mutable_contracts()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:injective.wasmx.v1.BatchContractDeregistrationProposal.contracts)
}
inline void BatchContractDeregistrationProposal::add_contracts(const std::string& value) {
  _internal_mutable_contracts()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:injective.wasmx.v1.BatchContractDeregistrationProposal.contracts)
}
inline void BatchContractDeregistrationProposal::add_contracts(std::string&& value) {
  _internal_mutable_contracts()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:injective.wasmx.v1.BatchContractDeregistrationProposal.contracts)
}
inline void BatchContractDeregistrationProposal::add_contracts(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_contracts()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:injective.wasmx.v1.BatchContractDeregistrationProposal.contracts)
}
inline void BatchContractDeregistrationProposal::add_contracts(const char* value, std::size_t size) {
  _internal_mutable_contracts()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:injective.wasmx.v1.BatchContractDeregistrationProposal.contracts)
}
inline void BatchContractDeregistrationProposal::add_contracts(absl::string_view value) {
  _internal_mutable_contracts()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:injective.wasmx.v1.BatchContractDeregistrationProposal.contracts)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
BatchContractDeregistrationProposal::contracts() const {
  // @@protoc_insertion_point(field_list:injective.wasmx.v1.BatchContractDeregistrationProposal.contracts)
  return _internal_contracts();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* BatchContractDeregistrationProposal::mutable_contracts() {
  // @@protoc_insertion_point(field_mutable_list:injective.wasmx.v1.BatchContractDeregistrationProposal.contracts)
  return _internal_mutable_contracts();
}
inline const std::string& BatchContractDeregistrationProposal::_internal_contracts(int index) const {
  return _internal_contracts().Get(index);
}
inline std::string* BatchContractDeregistrationProposal::_internal_add_contracts() {
  return _internal_mutable_contracts()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
BatchContractDeregistrationProposal::_internal_contracts() const {
  return _impl_.contracts_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
BatchContractDeregistrationProposal::_internal_mutable_contracts() {
  return &_impl_.contracts_;
}

// -------------------------------------------------------------------

// ContractRegistrationRequest

// string contract_address = 1 [json_name = "contractAddress"];
inline void ContractRegistrationRequest::clear_contract_address() {
  _impl_.contract_address_.ClearToEmpty();
}
inline const std::string& ContractRegistrationRequest::contract_address() const {
  // @@protoc_insertion_point(field_get:injective.wasmx.v1.ContractRegistrationRequest.contract_address)
  return _internal_contract_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ContractRegistrationRequest::set_contract_address(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.contract_address_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.wasmx.v1.ContractRegistrationRequest.contract_address)
}
inline std::string* ContractRegistrationRequest::mutable_contract_address() {
  std::string* _s = _internal_mutable_contract_address();
  // @@protoc_insertion_point(field_mutable:injective.wasmx.v1.ContractRegistrationRequest.contract_address)
  return _s;
}
inline const std::string& ContractRegistrationRequest::_internal_contract_address() const {
  return _impl_.contract_address_.Get();
}
inline void ContractRegistrationRequest::_internal_set_contract_address(const std::string& value) {
  ;


  _impl_.contract_address_.Set(value, GetArenaForAllocation());
}
inline std::string* ContractRegistrationRequest::_internal_mutable_contract_address() {
  ;
  return _impl_.contract_address_.Mutable( GetArenaForAllocation());
}
inline std::string* ContractRegistrationRequest::release_contract_address() {
  // @@protoc_insertion_point(field_release:injective.wasmx.v1.ContractRegistrationRequest.contract_address)
  return _impl_.contract_address_.Release();
}
inline void ContractRegistrationRequest::set_allocated_contract_address(std::string* value) {
  _impl_.contract_address_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.contract_address_.IsDefault()) {
          _impl_.contract_address_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.wasmx.v1.ContractRegistrationRequest.contract_address)
}

// uint64 gas_limit = 2 [json_name = "gasLimit"];
inline void ContractRegistrationRequest::clear_gas_limit() {
  _impl_.gas_limit_ = ::uint64_t{0u};
}
inline ::uint64_t ContractRegistrationRequest::gas_limit() const {
  // @@protoc_insertion_point(field_get:injective.wasmx.v1.ContractRegistrationRequest.gas_limit)
  return _internal_gas_limit();
}
inline void ContractRegistrationRequest::set_gas_limit(::uint64_t value) {
  _internal_set_gas_limit(value);
  // @@protoc_insertion_point(field_set:injective.wasmx.v1.ContractRegistrationRequest.gas_limit)
}
inline ::uint64_t ContractRegistrationRequest::_internal_gas_limit() const {
  return _impl_.gas_limit_;
}
inline void ContractRegistrationRequest::_internal_set_gas_limit(::uint64_t value) {
  ;
  _impl_.gas_limit_ = value;
}

// uint64 gas_price = 3 [json_name = "gasPrice"];
inline void ContractRegistrationRequest::clear_gas_price() {
  _impl_.gas_price_ = ::uint64_t{0u};
}
inline ::uint64_t ContractRegistrationRequest::gas_price() const {
  // @@protoc_insertion_point(field_get:injective.wasmx.v1.ContractRegistrationRequest.gas_price)
  return _internal_gas_price();
}
inline void ContractRegistrationRequest::set_gas_price(::uint64_t value) {
  _internal_set_gas_price(value);
  // @@protoc_insertion_point(field_set:injective.wasmx.v1.ContractRegistrationRequest.gas_price)
}
inline ::uint64_t ContractRegistrationRequest::_internal_gas_price() const {
  return _impl_.gas_price_;
}
inline void ContractRegistrationRequest::_internal_set_gas_price(::uint64_t value) {
  ;
  _impl_.gas_price_ = value;
}

// bool should_pin_contract = 4 [json_name = "shouldPinContract"];
inline void ContractRegistrationRequest::clear_should_pin_contract() {
  _impl_.should_pin_contract_ = false;
}
inline bool ContractRegistrationRequest::should_pin_contract() const {
  // @@protoc_insertion_point(field_get:injective.wasmx.v1.ContractRegistrationRequest.should_pin_contract)
  return _internal_should_pin_contract();
}
inline void ContractRegistrationRequest::set_should_pin_contract(bool value) {
  _internal_set_should_pin_contract(value);
  // @@protoc_insertion_point(field_set:injective.wasmx.v1.ContractRegistrationRequest.should_pin_contract)
}
inline bool ContractRegistrationRequest::_internal_should_pin_contract() const {
  return _impl_.should_pin_contract_;
}
inline void ContractRegistrationRequest::_internal_set_should_pin_contract(bool value) {
  ;
  _impl_.should_pin_contract_ = value;
}

// bool is_migration_allowed = 5 [json_name = "isMigrationAllowed"];
inline void ContractRegistrationRequest::clear_is_migration_allowed() {
  _impl_.is_migration_allowed_ = false;
}
inline bool ContractRegistrationRequest::is_migration_allowed() const {
  // @@protoc_insertion_point(field_get:injective.wasmx.v1.ContractRegistrationRequest.is_migration_allowed)
  return _internal_is_migration_allowed();
}
inline void ContractRegistrationRequest::set_is_migration_allowed(bool value) {
  _internal_set_is_migration_allowed(value);
  // @@protoc_insertion_point(field_set:injective.wasmx.v1.ContractRegistrationRequest.is_migration_allowed)
}
inline bool ContractRegistrationRequest::_internal_is_migration_allowed() const {
  return _impl_.is_migration_allowed_;
}
inline void ContractRegistrationRequest::_internal_set_is_migration_allowed(bool value) {
  ;
  _impl_.is_migration_allowed_ = value;
}

// uint64 code_id = 6 [json_name = "codeId"];
inline void ContractRegistrationRequest::clear_code_id() {
  _impl_.code_id_ = ::uint64_t{0u};
}
inline ::uint64_t ContractRegistrationRequest::code_id() const {
  // @@protoc_insertion_point(field_get:injective.wasmx.v1.ContractRegistrationRequest.code_id)
  return _internal_code_id();
}
inline void ContractRegistrationRequest::set_code_id(::uint64_t value) {
  _internal_set_code_id(value);
  // @@protoc_insertion_point(field_set:injective.wasmx.v1.ContractRegistrationRequest.code_id)
}
inline ::uint64_t ContractRegistrationRequest::_internal_code_id() const {
  return _impl_.code_id_;
}
inline void ContractRegistrationRequest::_internal_set_code_id(::uint64_t value) {
  ;
  _impl_.code_id_ = value;
}

// string admin_address = 7 [json_name = "adminAddress"];
inline void ContractRegistrationRequest::clear_admin_address() {
  _impl_.admin_address_.ClearToEmpty();
}
inline const std::string& ContractRegistrationRequest::admin_address() const {
  // @@protoc_insertion_point(field_get:injective.wasmx.v1.ContractRegistrationRequest.admin_address)
  return _internal_admin_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ContractRegistrationRequest::set_admin_address(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.admin_address_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.wasmx.v1.ContractRegistrationRequest.admin_address)
}
inline std::string* ContractRegistrationRequest::mutable_admin_address() {
  std::string* _s = _internal_mutable_admin_address();
  // @@protoc_insertion_point(field_mutable:injective.wasmx.v1.ContractRegistrationRequest.admin_address)
  return _s;
}
inline const std::string& ContractRegistrationRequest::_internal_admin_address() const {
  return _impl_.admin_address_.Get();
}
inline void ContractRegistrationRequest::_internal_set_admin_address(const std::string& value) {
  ;


  _impl_.admin_address_.Set(value, GetArenaForAllocation());
}
inline std::string* ContractRegistrationRequest::_internal_mutable_admin_address() {
  ;
  return _impl_.admin_address_.Mutable( GetArenaForAllocation());
}
inline std::string* ContractRegistrationRequest::release_admin_address() {
  // @@protoc_insertion_point(field_release:injective.wasmx.v1.ContractRegistrationRequest.admin_address)
  return _impl_.admin_address_.Release();
}
inline void ContractRegistrationRequest::set_allocated_admin_address(std::string* value) {
  _impl_.admin_address_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.admin_address_.IsDefault()) {
          _impl_.admin_address_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.wasmx.v1.ContractRegistrationRequest.admin_address)
}

// string granter_address = 8 [json_name = "granterAddress"];
inline void ContractRegistrationRequest::clear_granter_address() {
  _impl_.granter_address_.ClearToEmpty();
}
inline const std::string& ContractRegistrationRequest::granter_address() const {
  // @@protoc_insertion_point(field_get:injective.wasmx.v1.ContractRegistrationRequest.granter_address)
  return _internal_granter_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ContractRegistrationRequest::set_granter_address(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.granter_address_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.wasmx.v1.ContractRegistrationRequest.granter_address)
}
inline std::string* ContractRegistrationRequest::mutable_granter_address() {
  std::string* _s = _internal_mutable_granter_address();
  // @@protoc_insertion_point(field_mutable:injective.wasmx.v1.ContractRegistrationRequest.granter_address)
  return _s;
}
inline const std::string& ContractRegistrationRequest::_internal_granter_address() const {
  return _impl_.granter_address_.Get();
}
inline void ContractRegistrationRequest::_internal_set_granter_address(const std::string& value) {
  ;


  _impl_.granter_address_.Set(value, GetArenaForAllocation());
}
inline std::string* ContractRegistrationRequest::_internal_mutable_granter_address() {
  ;
  return _impl_.granter_address_.Mutable( GetArenaForAllocation());
}
inline std::string* ContractRegistrationRequest::release_granter_address() {
  // @@protoc_insertion_point(field_release:injective.wasmx.v1.ContractRegistrationRequest.granter_address)
  return _impl_.granter_address_.Release();
}
inline void ContractRegistrationRequest::set_allocated_granter_address(std::string* value) {
  _impl_.granter_address_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.granter_address_.IsDefault()) {
          _impl_.granter_address_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.wasmx.v1.ContractRegistrationRequest.granter_address)
}

// .injective.wasmx.v1.FundingMode funding_mode = 9 [json_name = "fundingMode"];
inline void ContractRegistrationRequest::clear_funding_mode() {
  _impl_.funding_mode_ = 0;
}
inline ::injective::wasmx::v1::FundingMode ContractRegistrationRequest::funding_mode() const {
  // @@protoc_insertion_point(field_get:injective.wasmx.v1.ContractRegistrationRequest.funding_mode)
  return _internal_funding_mode();
}
inline void ContractRegistrationRequest::set_funding_mode(::injective::wasmx::v1::FundingMode value) {
   _internal_set_funding_mode(value);
  // @@protoc_insertion_point(field_set:injective.wasmx.v1.ContractRegistrationRequest.funding_mode)
}
inline ::injective::wasmx::v1::FundingMode ContractRegistrationRequest::_internal_funding_mode() const {
  return static_cast<::injective::wasmx::v1::FundingMode>(_impl_.funding_mode_);
}
inline void ContractRegistrationRequest::_internal_set_funding_mode(::injective::wasmx::v1::FundingMode value) {
  ;
  _impl_.funding_mode_ = value;
}

// -------------------------------------------------------------------

// BatchStoreCodeProposal

// string title = 1 [json_name = "title"];
inline void BatchStoreCodeProposal::clear_title() {
  _impl_.title_.ClearToEmpty();
}
inline const std::string& BatchStoreCodeProposal::title() const {
  // @@protoc_insertion_point(field_get:injective.wasmx.v1.BatchStoreCodeProposal.title)
  return _internal_title();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void BatchStoreCodeProposal::set_title(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.title_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.wasmx.v1.BatchStoreCodeProposal.title)
}
inline std::string* BatchStoreCodeProposal::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:injective.wasmx.v1.BatchStoreCodeProposal.title)
  return _s;
}
inline const std::string& BatchStoreCodeProposal::_internal_title() const {
  return _impl_.title_.Get();
}
inline void BatchStoreCodeProposal::_internal_set_title(const std::string& value) {
  ;


  _impl_.title_.Set(value, GetArenaForAllocation());
}
inline std::string* BatchStoreCodeProposal::_internal_mutable_title() {
  ;
  return _impl_.title_.Mutable( GetArenaForAllocation());
}
inline std::string* BatchStoreCodeProposal::release_title() {
  // @@protoc_insertion_point(field_release:injective.wasmx.v1.BatchStoreCodeProposal.title)
  return _impl_.title_.Release();
}
inline void BatchStoreCodeProposal::set_allocated_title(std::string* value) {
  _impl_.title_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.title_.IsDefault()) {
          _impl_.title_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.wasmx.v1.BatchStoreCodeProposal.title)
}

// string description = 2 [json_name = "description"];
inline void BatchStoreCodeProposal::clear_description() {
  _impl_.description_.ClearToEmpty();
}
inline const std::string& BatchStoreCodeProposal::description() const {
  // @@protoc_insertion_point(field_get:injective.wasmx.v1.BatchStoreCodeProposal.description)
  return _internal_description();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void BatchStoreCodeProposal::set_description(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.description_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.wasmx.v1.BatchStoreCodeProposal.description)
}
inline std::string* BatchStoreCodeProposal::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:injective.wasmx.v1.BatchStoreCodeProposal.description)
  return _s;
}
inline const std::string& BatchStoreCodeProposal::_internal_description() const {
  return _impl_.description_.Get();
}
inline void BatchStoreCodeProposal::_internal_set_description(const std::string& value) {
  ;


  _impl_.description_.Set(value, GetArenaForAllocation());
}
inline std::string* BatchStoreCodeProposal::_internal_mutable_description() {
  ;
  return _impl_.description_.Mutable( GetArenaForAllocation());
}
inline std::string* BatchStoreCodeProposal::release_description() {
  // @@protoc_insertion_point(field_release:injective.wasmx.v1.BatchStoreCodeProposal.description)
  return _impl_.description_.Release();
}
inline void BatchStoreCodeProposal::set_allocated_description(std::string* value) {
  _impl_.description_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.description_.IsDefault()) {
          _impl_.description_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.wasmx.v1.BatchStoreCodeProposal.description)
}

// repeated .cosmwasm.wasm.v1.StoreCodeProposal proposals = 3 [json_name = "proposals", (.gogoproto.nullable) = false];
inline int BatchStoreCodeProposal::_internal_proposals_size() const {
  return _impl_.proposals_.size();
}
inline int BatchStoreCodeProposal::proposals_size() const {
  return _internal_proposals_size();
}
inline ::cosmwasm::wasm::v1::StoreCodeProposal* BatchStoreCodeProposal::mutable_proposals(int index) {
  // @@protoc_insertion_point(field_mutable:injective.wasmx.v1.BatchStoreCodeProposal.proposals)
  return _internal_mutable_proposals()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmwasm::wasm::v1::StoreCodeProposal >*
BatchStoreCodeProposal::mutable_proposals() {
  // @@protoc_insertion_point(field_mutable_list:injective.wasmx.v1.BatchStoreCodeProposal.proposals)
  return _internal_mutable_proposals();
}
inline const ::cosmwasm::wasm::v1::StoreCodeProposal& BatchStoreCodeProposal::_internal_proposals(int index) const {
  return _internal_proposals().Get(index);
}
inline const ::cosmwasm::wasm::v1::StoreCodeProposal& BatchStoreCodeProposal::proposals(int index) const {
  // @@protoc_insertion_point(field_get:injective.wasmx.v1.BatchStoreCodeProposal.proposals)
  return _internal_proposals(index);
}
inline ::cosmwasm::wasm::v1::StoreCodeProposal* BatchStoreCodeProposal::_internal_add_proposals() {
  return _internal_mutable_proposals()->Add();
}
inline ::cosmwasm::wasm::v1::StoreCodeProposal* BatchStoreCodeProposal::add_proposals() {
  ::cosmwasm::wasm::v1::StoreCodeProposal* _add = _internal_add_proposals();
  // @@protoc_insertion_point(field_add:injective.wasmx.v1.BatchStoreCodeProposal.proposals)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmwasm::wasm::v1::StoreCodeProposal >&
BatchStoreCodeProposal::proposals() const {
  // @@protoc_insertion_point(field_list:injective.wasmx.v1.BatchStoreCodeProposal.proposals)
  return _internal_proposals();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmwasm::wasm::v1::StoreCodeProposal>&
BatchStoreCodeProposal::_internal_proposals() const {
  return _impl_.proposals_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmwasm::wasm::v1::StoreCodeProposal>*
BatchStoreCodeProposal::_internal_mutable_proposals() {
  return &_impl_.proposals_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace wasmx
}  // namespace injective


PROTOBUF_NAMESPACE_OPEN

template <>
struct is_proto_enum<::injective::wasmx::v1::FundingMode> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::injective::wasmx::v1::FundingMode>() {
  return ::injective::wasmx::v1::FundingMode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_injective_2fwasmx_2fv1_2fproposal_2eproto_2epb_2eh

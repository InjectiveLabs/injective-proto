// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: injective/wasmx/v1/proposal.proto

#include "injective/wasmx/v1/proposal.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace injective {
namespace wasmx {
namespace v1 {
template <typename>
PROTOBUF_CONSTEXPR ContractRegistrationRequestProposal::ContractRegistrationRequestProposal(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.title_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.description_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.contract_registration_request_)*/nullptr} {}
struct ContractRegistrationRequestProposalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ContractRegistrationRequestProposalDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ContractRegistrationRequestProposalDefaultTypeInternal() {}
  union {
    ContractRegistrationRequestProposal _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ContractRegistrationRequestProposalDefaultTypeInternal _ContractRegistrationRequestProposal_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR BatchContractRegistrationRequestProposal::BatchContractRegistrationRequestProposal(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.contract_registration_requests_)*/{}
  , /*decltype(_impl_.title_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.description_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BatchContractRegistrationRequestProposalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BatchContractRegistrationRequestProposalDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BatchContractRegistrationRequestProposalDefaultTypeInternal() {}
  union {
    BatchContractRegistrationRequestProposal _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BatchContractRegistrationRequestProposalDefaultTypeInternal _BatchContractRegistrationRequestProposal_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR BatchContractDeregistrationProposal::BatchContractDeregistrationProposal(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.contracts_)*/{}
  , /*decltype(_impl_.title_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.description_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BatchContractDeregistrationProposalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BatchContractDeregistrationProposalDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BatchContractDeregistrationProposalDefaultTypeInternal() {}
  union {
    BatchContractDeregistrationProposal _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BatchContractDeregistrationProposalDefaultTypeInternal _BatchContractDeregistrationProposal_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ContractRegistrationRequest::ContractRegistrationRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.contract_address_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.admin_address_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.granter_address_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.gas_limit_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.gas_price_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.code_id_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.should_pin_contract_)*/ false

  , /*decltype(_impl_.is_migration_allowed_)*/ false

  , /*decltype(_impl_.funding_mode_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ContractRegistrationRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ContractRegistrationRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ContractRegistrationRequestDefaultTypeInternal() {}
  union {
    ContractRegistrationRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ContractRegistrationRequestDefaultTypeInternal _ContractRegistrationRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR BatchStoreCodeProposal::BatchStoreCodeProposal(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.proposals_)*/{}
  , /*decltype(_impl_.title_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.description_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BatchStoreCodeProposalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BatchStoreCodeProposalDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BatchStoreCodeProposalDefaultTypeInternal() {}
  union {
    BatchStoreCodeProposal _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BatchStoreCodeProposalDefaultTypeInternal _BatchStoreCodeProposal_default_instance_;
}  // namespace v1
}  // namespace wasmx
}  // namespace injective
static ::_pb::Metadata file_level_metadata_injective_2fwasmx_2fv1_2fproposal_2eproto[5];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_injective_2fwasmx_2fv1_2fproposal_2eproto[1];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_injective_2fwasmx_2fv1_2fproposal_2eproto = nullptr;
const ::uint32_t TableStruct_injective_2fwasmx_2fv1_2fproposal_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::injective::wasmx::v1::ContractRegistrationRequestProposal, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::injective::wasmx::v1::ContractRegistrationRequestProposal, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::wasmx::v1::ContractRegistrationRequestProposal, _impl_.title_),
    PROTOBUF_FIELD_OFFSET(::injective::wasmx::v1::ContractRegistrationRequestProposal, _impl_.description_),
    PROTOBUF_FIELD_OFFSET(::injective::wasmx::v1::ContractRegistrationRequestProposal, _impl_.contract_registration_request_),
    ~0u,
    ~0u,
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::wasmx::v1::BatchContractRegistrationRequestProposal, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::wasmx::v1::BatchContractRegistrationRequestProposal, _impl_.title_),
    PROTOBUF_FIELD_OFFSET(::injective::wasmx::v1::BatchContractRegistrationRequestProposal, _impl_.description_),
    PROTOBUF_FIELD_OFFSET(::injective::wasmx::v1::BatchContractRegistrationRequestProposal, _impl_.contract_registration_requests_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::wasmx::v1::BatchContractDeregistrationProposal, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::wasmx::v1::BatchContractDeregistrationProposal, _impl_.title_),
    PROTOBUF_FIELD_OFFSET(::injective::wasmx::v1::BatchContractDeregistrationProposal, _impl_.description_),
    PROTOBUF_FIELD_OFFSET(::injective::wasmx::v1::BatchContractDeregistrationProposal, _impl_.contracts_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::wasmx::v1::ContractRegistrationRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::wasmx::v1::ContractRegistrationRequest, _impl_.contract_address_),
    PROTOBUF_FIELD_OFFSET(::injective::wasmx::v1::ContractRegistrationRequest, _impl_.gas_limit_),
    PROTOBUF_FIELD_OFFSET(::injective::wasmx::v1::ContractRegistrationRequest, _impl_.gas_price_),
    PROTOBUF_FIELD_OFFSET(::injective::wasmx::v1::ContractRegistrationRequest, _impl_.should_pin_contract_),
    PROTOBUF_FIELD_OFFSET(::injective::wasmx::v1::ContractRegistrationRequest, _impl_.is_migration_allowed_),
    PROTOBUF_FIELD_OFFSET(::injective::wasmx::v1::ContractRegistrationRequest, _impl_.code_id_),
    PROTOBUF_FIELD_OFFSET(::injective::wasmx::v1::ContractRegistrationRequest, _impl_.admin_address_),
    PROTOBUF_FIELD_OFFSET(::injective::wasmx::v1::ContractRegistrationRequest, _impl_.granter_address_),
    PROTOBUF_FIELD_OFFSET(::injective::wasmx::v1::ContractRegistrationRequest, _impl_.funding_mode_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::wasmx::v1::BatchStoreCodeProposal, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::wasmx::v1::BatchStoreCodeProposal, _impl_.title_),
    PROTOBUF_FIELD_OFFSET(::injective::wasmx::v1::BatchStoreCodeProposal, _impl_.description_),
    PROTOBUF_FIELD_OFFSET(::injective::wasmx::v1::BatchStoreCodeProposal, _impl_.proposals_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 11, -1, sizeof(::injective::wasmx::v1::ContractRegistrationRequestProposal)},
        { 14, -1, -1, sizeof(::injective::wasmx::v1::BatchContractRegistrationRequestProposal)},
        { 25, -1, -1, sizeof(::injective::wasmx::v1::BatchContractDeregistrationProposal)},
        { 36, -1, -1, sizeof(::injective::wasmx::v1::ContractRegistrationRequest)},
        { 53, -1, -1, sizeof(::injective::wasmx::v1::BatchStoreCodeProposal)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::injective::wasmx::v1::_ContractRegistrationRequestProposal_default_instance_._instance,
    &::injective::wasmx::v1::_BatchContractRegistrationRequestProposal_default_instance_._instance,
    &::injective::wasmx::v1::_BatchContractDeregistrationProposal_default_instance_._instance,
    &::injective::wasmx::v1::_ContractRegistrationRequest_default_instance_._instance,
    &::injective::wasmx::v1::_BatchStoreCodeProposal_default_instance_._instance,
};
const char descriptor_table_protodef_injective_2fwasmx_2fv1_2fproposal_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n!injective/wasmx/v1/proposal.proto\022\022inj"
    "ective.wasmx.v1\032\031cosmos_proto/cosmos.pro"
    "to\032\037cosmwasm/wasm/v1/proposal.proto\032\024gog"
    "oproto/gogo.proto\"\200\002\n#ContractRegistrati"
    "onRequestProposal\022\024\n\005title\030\001 \001(\tR\005title\022"
    " \n\013description\030\002 \001(\tR\013description\022y\n\035con"
    "tract_registration_request\030\003 \001(\0132/.injec"
    "tive.wasmx.v1.ContractRegistrationReques"
    "tB\004\310\336\037\000R\033contractRegistrationRequest:&\210\240"
    "\037\000\350\240\037\000\312\264-\032cosmos.gov.v1beta1.Content\"\207\002\n"
    "(BatchContractRegistrationRequestProposa"
    "l\022\024\n\005title\030\001 \001(\tR\005title\022 \n\013description\030\002"
    " \001(\tR\013description\022{\n\036contract_registrati"
    "on_requests\030\003 \003(\0132/.injective.wasmx.v1.C"
    "ontractRegistrationRequestB\004\310\336\037\000R\034contra"
    "ctRegistrationRequests:&\210\240\037\000\350\240\037\000\312\264-\032cosm"
    "os.gov.v1beta1.Content\"\243\001\n#BatchContract"
    "DeregistrationProposal\022\024\n\005title\030\001 \001(\tR\005t"
    "itle\022 \n\013description\030\002 \001(\tR\013description\022\034"
    "\n\tcontracts\030\003 \003(\tR\tcontracts:&\210\240\037\000\350\240\037\000\312\264"
    "-\032cosmos.gov.v1beta1.Content\"\257\003\n\033Contrac"
    "tRegistrationRequest\022)\n\020contract_address"
    "\030\001 \001(\tR\017contractAddress\022\033\n\tgas_limit\030\002 \001"
    "(\004R\010gasLimit\022\033\n\tgas_price\030\003 \001(\004R\010gasPric"
    "e\022.\n\023should_pin_contract\030\004 \001(\010R\021shouldPi"
    "nContract\0220\n\024is_migration_allowed\030\005 \001(\010R"
    "\022isMigrationAllowed\022\027\n\007code_id\030\006 \001(\004R\006co"
    "deId\022#\n\radmin_address\030\007 \001(\tR\014adminAddres"
    "s\022\'\n\017granter_address\030\010 \001(\tR\016granterAddre"
    "ss\022B\n\014funding_mode\030\t \001(\0162\037.injective.was"
    "mx.v1.FundingModeR\013fundingMode:\036\312\264-\032cosm"
    "os.gov.v1beta1.Content\"\301\001\n\026BatchStoreCod"
    "eProposal\022\024\n\005title\030\001 \001(\tR\005title\022 \n\013descr"
    "iption\030\002 \001(\tR\013description\022G\n\tproposals\030\003"
    " \003(\0132#.cosmwasm.wasm.v1.StoreCodeProposa"
    "lB\004\310\336\037\000R\tproposals:&\210\240\037\000\350\240\037\000\312\264-\032cosmos.g"
    "ov.v1beta1.Content*G\n\013FundingMode\022\017\n\013Uns"
    "pecified\020\000\022\016\n\nSelfFunded\020\001\022\r\n\tGrantOnly\020"
    "\002\022\010\n\004Dual\020\003B\336\001\n\026com.injective.wasmx.v1B\r"
    "ProposalProtoP\001ZKgithub.com/InjectiveLab"
    "s/injective-core/injective-chain/modules"
    "/wasmx/types\242\002\003IWX\252\002\022Injective.Wasmx.V1\312"
    "\002\022Injective\\Wasmx\\V1\342\002\036Injective\\Wasmx\\V"
    "1\\GPBMetadata\352\002\024Injective::Wasmx::V1b\006pr"
    "oto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_injective_2fwasmx_2fv1_2fproposal_2eproto_deps[3] =
    {
        &::descriptor_table_cosmos_5fproto_2fcosmos_2eproto,
        &::descriptor_table_cosmwasm_2fwasm_2fv1_2fproposal_2eproto,
        &::descriptor_table_gogoproto_2fgogo_2eproto,
};
static ::absl::once_flag descriptor_table_injective_2fwasmx_2fv1_2fproposal_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_injective_2fwasmx_2fv1_2fproposal_2eproto = {
    false,
    false,
    1764,
    descriptor_table_protodef_injective_2fwasmx_2fv1_2fproposal_2eproto,
    "injective/wasmx/v1/proposal.proto",
    &descriptor_table_injective_2fwasmx_2fv1_2fproposal_2eproto_once,
    descriptor_table_injective_2fwasmx_2fv1_2fproposal_2eproto_deps,
    3,
    5,
    schemas,
    file_default_instances,
    TableStruct_injective_2fwasmx_2fv1_2fproposal_2eproto::offsets,
    file_level_metadata_injective_2fwasmx_2fv1_2fproposal_2eproto,
    file_level_enum_descriptors_injective_2fwasmx_2fv1_2fproposal_2eproto,
    file_level_service_descriptors_injective_2fwasmx_2fv1_2fproposal_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_injective_2fwasmx_2fv1_2fproposal_2eproto_getter() {
  return &descriptor_table_injective_2fwasmx_2fv1_2fproposal_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_injective_2fwasmx_2fv1_2fproposal_2eproto(&descriptor_table_injective_2fwasmx_2fv1_2fproposal_2eproto);
namespace injective {
namespace wasmx {
namespace v1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FundingMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_injective_2fwasmx_2fv1_2fproposal_2eproto);
  return file_level_enum_descriptors_injective_2fwasmx_2fv1_2fproposal_2eproto[0];
}
bool FundingMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}
// ===================================================================

class ContractRegistrationRequestProposal::_Internal {
 public:
  using HasBits = decltype(std::declval<ContractRegistrationRequestProposal>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ContractRegistrationRequestProposal, _impl_._has_bits_);
  static const ::injective::wasmx::v1::ContractRegistrationRequest& contract_registration_request(const ContractRegistrationRequestProposal* msg);
  static void set_has_contract_registration_request(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::injective::wasmx::v1::ContractRegistrationRequest&
ContractRegistrationRequestProposal::_Internal::contract_registration_request(const ContractRegistrationRequestProposal* msg) {
  return *msg->_impl_.contract_registration_request_;
}
ContractRegistrationRequestProposal::ContractRegistrationRequestProposal(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.wasmx.v1.ContractRegistrationRequestProposal)
}
ContractRegistrationRequestProposal::ContractRegistrationRequestProposal(const ContractRegistrationRequestProposal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ContractRegistrationRequestProposal* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.title_) {}

    , decltype(_impl_.description_) {}

    , decltype(_impl_.contract_registration_request_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.title_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_title().empty()) {
    _this->_impl_.title_.Set(from._internal_title(), _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.description_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.contract_registration_request_ = new ::injective::wasmx::v1::ContractRegistrationRequest(*from._impl_.contract_registration_request_);
  }
  // @@protoc_insertion_point(copy_constructor:injective.wasmx.v1.ContractRegistrationRequestProposal)
}

inline void ContractRegistrationRequestProposal::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.title_) {}

    , decltype(_impl_.description_) {}

    , decltype(_impl_.contract_registration_request_){nullptr}
  };
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.title_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.description_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ContractRegistrationRequestProposal::~ContractRegistrationRequestProposal() {
  // @@protoc_insertion_point(destructor:injective.wasmx.v1.ContractRegistrationRequestProposal)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ContractRegistrationRequestProposal::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.title_.Destroy();
  _impl_.description_.Destroy();
  if (this != internal_default_instance()) delete _impl_.contract_registration_request_;
}

void ContractRegistrationRequestProposal::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ContractRegistrationRequestProposal::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.wasmx.v1.ContractRegistrationRequestProposal)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.title_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.contract_registration_request_ != nullptr);
    _impl_.contract_registration_request_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContractRegistrationRequestProposal::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string title = 1 [json_name = "title"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.wasmx.v1.ContractRegistrationRequestProposal.title"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string description = 2 [json_name = "description"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.wasmx.v1.ContractRegistrationRequestProposal.description"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .injective.wasmx.v1.ContractRegistrationRequest contract_registration_request = 3 [json_name = "contractRegistrationRequest", (.gogoproto.nullable) = false];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_contract_registration_request(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ContractRegistrationRequestProposal::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.wasmx.v1.ContractRegistrationRequestProposal)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string title = 1 [json_name = "title"];
  if (!this->_internal_title().empty()) {
    const std::string& _s = this->_internal_title();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.wasmx.v1.ContractRegistrationRequestProposal.title");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string description = 2 [json_name = "description"];
  if (!this->_internal_description().empty()) {
    const std::string& _s = this->_internal_description();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.wasmx.v1.ContractRegistrationRequestProposal.description");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .injective.wasmx.v1.ContractRegistrationRequest contract_registration_request = 3 [json_name = "contractRegistrationRequest", (.gogoproto.nullable) = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::contract_registration_request(this),
        _Internal::contract_registration_request(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.wasmx.v1.ContractRegistrationRequestProposal)
  return target;
}

::size_t ContractRegistrationRequestProposal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.wasmx.v1.ContractRegistrationRequestProposal)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string title = 1 [json_name = "title"];
  if (!this->_internal_title().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_title());
  }

  // string description = 2 [json_name = "description"];
  if (!this->_internal_description().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_description());
  }

  // .injective.wasmx.v1.ContractRegistrationRequest contract_registration_request = 3 [json_name = "contractRegistrationRequest", (.gogoproto.nullable) = false];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.contract_registration_request_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ContractRegistrationRequestProposal::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ContractRegistrationRequestProposal::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ContractRegistrationRequestProposal::GetClassData() const { return &_class_data_; }


void ContractRegistrationRequestProposal::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ContractRegistrationRequestProposal*>(&to_msg);
  auto& from = static_cast<const ContractRegistrationRequestProposal&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.wasmx.v1.ContractRegistrationRequestProposal)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_title().empty()) {
    _this->_internal_set_title(from._internal_title());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_contract_registration_request()->::injective::wasmx::v1::ContractRegistrationRequest::MergeFrom(
        from._internal_contract_registration_request());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ContractRegistrationRequestProposal::CopyFrom(const ContractRegistrationRequestProposal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.wasmx.v1.ContractRegistrationRequestProposal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContractRegistrationRequestProposal::IsInitialized() const {
  return true;
}

void ContractRegistrationRequestProposal::InternalSwap(ContractRegistrationRequestProposal* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.title_, lhs_arena,
                                       &other->_impl_.title_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.description_, lhs_arena,
                                       &other->_impl_.description_, rhs_arena);
  swap(_impl_.contract_registration_request_, other->_impl_.contract_registration_request_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ContractRegistrationRequestProposal::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fwasmx_2fv1_2fproposal_2eproto_getter, &descriptor_table_injective_2fwasmx_2fv1_2fproposal_2eproto_once,
      file_level_metadata_injective_2fwasmx_2fv1_2fproposal_2eproto[0]);
}
// ===================================================================

class BatchContractRegistrationRequestProposal::_Internal {
 public:
};

BatchContractRegistrationRequestProposal::BatchContractRegistrationRequestProposal(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.wasmx.v1.BatchContractRegistrationRequestProposal)
}
BatchContractRegistrationRequestProposal::BatchContractRegistrationRequestProposal(const BatchContractRegistrationRequestProposal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BatchContractRegistrationRequestProposal* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.contract_registration_requests_){from._impl_.contract_registration_requests_}
    , decltype(_impl_.title_) {}

    , decltype(_impl_.description_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.title_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_title().empty()) {
    _this->_impl_.title_.Set(from._internal_title(), _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.description_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:injective.wasmx.v1.BatchContractRegistrationRequestProposal)
}

inline void BatchContractRegistrationRequestProposal::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.contract_registration_requests_){arena}
    , decltype(_impl_.title_) {}

    , decltype(_impl_.description_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.title_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.description_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BatchContractRegistrationRequestProposal::~BatchContractRegistrationRequestProposal() {
  // @@protoc_insertion_point(destructor:injective.wasmx.v1.BatchContractRegistrationRequestProposal)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BatchContractRegistrationRequestProposal::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_contract_registration_requests()->~RepeatedPtrField();
  _impl_.title_.Destroy();
  _impl_.description_.Destroy();
}

void BatchContractRegistrationRequestProposal::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BatchContractRegistrationRequestProposal::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.wasmx.v1.BatchContractRegistrationRequestProposal)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_contract_registration_requests()->Clear();
  _impl_.title_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BatchContractRegistrationRequestProposal::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string title = 1 [json_name = "title"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.wasmx.v1.BatchContractRegistrationRequestProposal.title"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string description = 2 [json_name = "description"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.wasmx.v1.BatchContractRegistrationRequestProposal.description"));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .injective.wasmx.v1.ContractRegistrationRequest contract_registration_requests = 3 [json_name = "contractRegistrationRequests", (.gogoproto.nullable) = false];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_contract_registration_requests(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* BatchContractRegistrationRequestProposal::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.wasmx.v1.BatchContractRegistrationRequestProposal)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string title = 1 [json_name = "title"];
  if (!this->_internal_title().empty()) {
    const std::string& _s = this->_internal_title();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.wasmx.v1.BatchContractRegistrationRequestProposal.title");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string description = 2 [json_name = "description"];
  if (!this->_internal_description().empty()) {
    const std::string& _s = this->_internal_description();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.wasmx.v1.BatchContractRegistrationRequestProposal.description");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // repeated .injective.wasmx.v1.ContractRegistrationRequest contract_registration_requests = 3 [json_name = "contractRegistrationRequests", (.gogoproto.nullable) = false];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_contract_registration_requests_size()); i < n; i++) {
    const auto& repfield = this->_internal_contract_registration_requests(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.wasmx.v1.BatchContractRegistrationRequestProposal)
  return target;
}

::size_t BatchContractRegistrationRequestProposal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.wasmx.v1.BatchContractRegistrationRequestProposal)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .injective.wasmx.v1.ContractRegistrationRequest contract_registration_requests = 3 [json_name = "contractRegistrationRequests", (.gogoproto.nullable) = false];
  total_size += 1UL * this->_internal_contract_registration_requests_size();
  for (const auto& msg : this->_internal_contract_registration_requests()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string title = 1 [json_name = "title"];
  if (!this->_internal_title().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_title());
  }

  // string description = 2 [json_name = "description"];
  if (!this->_internal_description().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_description());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BatchContractRegistrationRequestProposal::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BatchContractRegistrationRequestProposal::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BatchContractRegistrationRequestProposal::GetClassData() const { return &_class_data_; }


void BatchContractRegistrationRequestProposal::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BatchContractRegistrationRequestProposal*>(&to_msg);
  auto& from = static_cast<const BatchContractRegistrationRequestProposal&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.wasmx.v1.BatchContractRegistrationRequestProposal)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_contract_registration_requests()->MergeFrom(from._internal_contract_registration_requests());
  if (!from._internal_title().empty()) {
    _this->_internal_set_title(from._internal_title());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BatchContractRegistrationRequestProposal::CopyFrom(const BatchContractRegistrationRequestProposal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.wasmx.v1.BatchContractRegistrationRequestProposal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchContractRegistrationRequestProposal::IsInitialized() const {
  return true;
}

void BatchContractRegistrationRequestProposal::InternalSwap(BatchContractRegistrationRequestProposal* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_contract_registration_requests()->InternalSwap(other->_internal_mutable_contract_registration_requests());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.title_, lhs_arena,
                                       &other->_impl_.title_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.description_, lhs_arena,
                                       &other->_impl_.description_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata BatchContractRegistrationRequestProposal::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fwasmx_2fv1_2fproposal_2eproto_getter, &descriptor_table_injective_2fwasmx_2fv1_2fproposal_2eproto_once,
      file_level_metadata_injective_2fwasmx_2fv1_2fproposal_2eproto[1]);
}
// ===================================================================

class BatchContractDeregistrationProposal::_Internal {
 public:
};

BatchContractDeregistrationProposal::BatchContractDeregistrationProposal(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.wasmx.v1.BatchContractDeregistrationProposal)
}
BatchContractDeregistrationProposal::BatchContractDeregistrationProposal(const BatchContractDeregistrationProposal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BatchContractDeregistrationProposal* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.contracts_){from._impl_.contracts_}
    , decltype(_impl_.title_) {}

    , decltype(_impl_.description_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.title_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_title().empty()) {
    _this->_impl_.title_.Set(from._internal_title(), _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.description_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:injective.wasmx.v1.BatchContractDeregistrationProposal)
}

inline void BatchContractDeregistrationProposal::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.contracts_){arena}
    , decltype(_impl_.title_) {}

    , decltype(_impl_.description_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.title_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.description_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BatchContractDeregistrationProposal::~BatchContractDeregistrationProposal() {
  // @@protoc_insertion_point(destructor:injective.wasmx.v1.BatchContractDeregistrationProposal)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BatchContractDeregistrationProposal::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_contracts()->~RepeatedPtrField();
  _impl_.title_.Destroy();
  _impl_.description_.Destroy();
}

void BatchContractDeregistrationProposal::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BatchContractDeregistrationProposal::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.wasmx.v1.BatchContractDeregistrationProposal)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_contracts()->Clear();
  _impl_.title_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BatchContractDeregistrationProposal::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string title = 1 [json_name = "title"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.wasmx.v1.BatchContractDeregistrationProposal.title"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string description = 2 [json_name = "description"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.wasmx.v1.BatchContractDeregistrationProposal.description"));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string contracts = 3 [json_name = "contracts"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_contracts();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "injective.wasmx.v1.BatchContractDeregistrationProposal.contracts"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* BatchContractDeregistrationProposal::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.wasmx.v1.BatchContractDeregistrationProposal)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string title = 1 [json_name = "title"];
  if (!this->_internal_title().empty()) {
    const std::string& _s = this->_internal_title();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.wasmx.v1.BatchContractDeregistrationProposal.title");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string description = 2 [json_name = "description"];
  if (!this->_internal_description().empty()) {
    const std::string& _s = this->_internal_description();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.wasmx.v1.BatchContractDeregistrationProposal.description");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // repeated string contracts = 3 [json_name = "contracts"];
  for (int i = 0, n = this->_internal_contracts_size(); i < n; ++i) {
    const auto& s = this->_internal_contracts(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.wasmx.v1.BatchContractDeregistrationProposal.contracts");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.wasmx.v1.BatchContractDeregistrationProposal)
  return target;
}

::size_t BatchContractDeregistrationProposal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.wasmx.v1.BatchContractDeregistrationProposal)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string contracts = 3 [json_name = "contracts"];
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_contracts().size());
  for (int i = 0, n = _internal_contracts().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_contracts().Get(i));
  }

  // string title = 1 [json_name = "title"];
  if (!this->_internal_title().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_title());
  }

  // string description = 2 [json_name = "description"];
  if (!this->_internal_description().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_description());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BatchContractDeregistrationProposal::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BatchContractDeregistrationProposal::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BatchContractDeregistrationProposal::GetClassData() const { return &_class_data_; }


void BatchContractDeregistrationProposal::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BatchContractDeregistrationProposal*>(&to_msg);
  auto& from = static_cast<const BatchContractDeregistrationProposal&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.wasmx.v1.BatchContractDeregistrationProposal)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_contracts()->MergeFrom(from._internal_contracts());
  if (!from._internal_title().empty()) {
    _this->_internal_set_title(from._internal_title());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BatchContractDeregistrationProposal::CopyFrom(const BatchContractDeregistrationProposal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.wasmx.v1.BatchContractDeregistrationProposal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchContractDeregistrationProposal::IsInitialized() const {
  return true;
}

void BatchContractDeregistrationProposal::InternalSwap(BatchContractDeregistrationProposal* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_contracts()->InternalSwap(
      other->_internal_mutable_contracts());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.title_, lhs_arena,
                                       &other->_impl_.title_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.description_, lhs_arena,
                                       &other->_impl_.description_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata BatchContractDeregistrationProposal::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fwasmx_2fv1_2fproposal_2eproto_getter, &descriptor_table_injective_2fwasmx_2fv1_2fproposal_2eproto_once,
      file_level_metadata_injective_2fwasmx_2fv1_2fproposal_2eproto[2]);
}
// ===================================================================

class ContractRegistrationRequest::_Internal {
 public:
};

ContractRegistrationRequest::ContractRegistrationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.wasmx.v1.ContractRegistrationRequest)
}
ContractRegistrationRequest::ContractRegistrationRequest(const ContractRegistrationRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ContractRegistrationRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.contract_address_) {}

    , decltype(_impl_.admin_address_) {}

    , decltype(_impl_.granter_address_) {}

    , decltype(_impl_.gas_limit_) {}

    , decltype(_impl_.gas_price_) {}

    , decltype(_impl_.code_id_) {}

    , decltype(_impl_.should_pin_contract_) {}

    , decltype(_impl_.is_migration_allowed_) {}

    , decltype(_impl_.funding_mode_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.contract_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.contract_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_contract_address().empty()) {
    _this->_impl_.contract_address_.Set(from._internal_contract_address(), _this->GetArenaForAllocation());
  }
  _impl_.admin_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.admin_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_admin_address().empty()) {
    _this->_impl_.admin_address_.Set(from._internal_admin_address(), _this->GetArenaForAllocation());
  }
  _impl_.granter_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.granter_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_granter_address().empty()) {
    _this->_impl_.granter_address_.Set(from._internal_granter_address(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.gas_limit_, &from._impl_.gas_limit_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.funding_mode_) -
    reinterpret_cast<char*>(&_impl_.gas_limit_)) + sizeof(_impl_.funding_mode_));
  // @@protoc_insertion_point(copy_constructor:injective.wasmx.v1.ContractRegistrationRequest)
}

inline void ContractRegistrationRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.contract_address_) {}

    , decltype(_impl_.admin_address_) {}

    , decltype(_impl_.granter_address_) {}

    , decltype(_impl_.gas_limit_) { ::uint64_t{0u} }

    , decltype(_impl_.gas_price_) { ::uint64_t{0u} }

    , decltype(_impl_.code_id_) { ::uint64_t{0u} }

    , decltype(_impl_.should_pin_contract_) { false }

    , decltype(_impl_.is_migration_allowed_) { false }

    , decltype(_impl_.funding_mode_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.contract_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.contract_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.admin_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.admin_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.granter_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.granter_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ContractRegistrationRequest::~ContractRegistrationRequest() {
  // @@protoc_insertion_point(destructor:injective.wasmx.v1.ContractRegistrationRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ContractRegistrationRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.contract_address_.Destroy();
  _impl_.admin_address_.Destroy();
  _impl_.granter_address_.Destroy();
}

void ContractRegistrationRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ContractRegistrationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.wasmx.v1.ContractRegistrationRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.contract_address_.ClearToEmpty();
  _impl_.admin_address_.ClearToEmpty();
  _impl_.granter_address_.ClearToEmpty();
  ::memset(&_impl_.gas_limit_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.funding_mode_) -
      reinterpret_cast<char*>(&_impl_.gas_limit_)) + sizeof(_impl_.funding_mode_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContractRegistrationRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string contract_address = 1 [json_name = "contractAddress"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_contract_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.wasmx.v1.ContractRegistrationRequest.contract_address"));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 gas_limit = 2 [json_name = "gasLimit"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.gas_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 gas_price = 3 [json_name = "gasPrice"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.gas_price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bool should_pin_contract = 4 [json_name = "shouldPinContract"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _impl_.should_pin_contract_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bool is_migration_allowed = 5 [json_name = "isMigrationAllowed"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _impl_.is_migration_allowed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 code_id = 6 [json_name = "codeId"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _impl_.code_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string admin_address = 7 [json_name = "adminAddress"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_admin_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.wasmx.v1.ContractRegistrationRequest.admin_address"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string granter_address = 8 [json_name = "granterAddress"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_granter_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.wasmx.v1.ContractRegistrationRequest.granter_address"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .injective.wasmx.v1.FundingMode funding_mode = 9 [json_name = "fundingMode"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 72)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_funding_mode(static_cast<::injective::wasmx::v1::FundingMode>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ContractRegistrationRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.wasmx.v1.ContractRegistrationRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string contract_address = 1 [json_name = "contractAddress"];
  if (!this->_internal_contract_address().empty()) {
    const std::string& _s = this->_internal_contract_address();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.wasmx.v1.ContractRegistrationRequest.contract_address");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // uint64 gas_limit = 2 [json_name = "gasLimit"];
  if (this->_internal_gas_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_gas_limit(), target);
  }

  // uint64 gas_price = 3 [json_name = "gasPrice"];
  if (this->_internal_gas_price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        3, this->_internal_gas_price(), target);
  }

  // bool should_pin_contract = 4 [json_name = "shouldPinContract"];
  if (this->_internal_should_pin_contract() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        4, this->_internal_should_pin_contract(), target);
  }

  // bool is_migration_allowed = 5 [json_name = "isMigrationAllowed"];
  if (this->_internal_is_migration_allowed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        5, this->_internal_is_migration_allowed(), target);
  }

  // uint64 code_id = 6 [json_name = "codeId"];
  if (this->_internal_code_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        6, this->_internal_code_id(), target);
  }

  // string admin_address = 7 [json_name = "adminAddress"];
  if (!this->_internal_admin_address().empty()) {
    const std::string& _s = this->_internal_admin_address();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.wasmx.v1.ContractRegistrationRequest.admin_address");
    target = stream->WriteStringMaybeAliased(7, _s, target);
  }

  // string granter_address = 8 [json_name = "granterAddress"];
  if (!this->_internal_granter_address().empty()) {
    const std::string& _s = this->_internal_granter_address();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.wasmx.v1.ContractRegistrationRequest.granter_address");
    target = stream->WriteStringMaybeAliased(8, _s, target);
  }

  // .injective.wasmx.v1.FundingMode funding_mode = 9 [json_name = "fundingMode"];
  if (this->_internal_funding_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        9, this->_internal_funding_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.wasmx.v1.ContractRegistrationRequest)
  return target;
}

::size_t ContractRegistrationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.wasmx.v1.ContractRegistrationRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string contract_address = 1 [json_name = "contractAddress"];
  if (!this->_internal_contract_address().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_contract_address());
  }

  // string admin_address = 7 [json_name = "adminAddress"];
  if (!this->_internal_admin_address().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_admin_address());
  }

  // string granter_address = 8 [json_name = "granterAddress"];
  if (!this->_internal_granter_address().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_granter_address());
  }

  // uint64 gas_limit = 2 [json_name = "gasLimit"];
  if (this->_internal_gas_limit() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_gas_limit());
  }

  // uint64 gas_price = 3 [json_name = "gasPrice"];
  if (this->_internal_gas_price() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_gas_price());
  }

  // uint64 code_id = 6 [json_name = "codeId"];
  if (this->_internal_code_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_code_id());
  }

  // bool should_pin_contract = 4 [json_name = "shouldPinContract"];
  if (this->_internal_should_pin_contract() != 0) {
    total_size += 2;
  }

  // bool is_migration_allowed = 5 [json_name = "isMigrationAllowed"];
  if (this->_internal_is_migration_allowed() != 0) {
    total_size += 2;
  }

  // .injective.wasmx.v1.FundingMode funding_mode = 9 [json_name = "fundingMode"];
  if (this->_internal_funding_mode() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_funding_mode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ContractRegistrationRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ContractRegistrationRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ContractRegistrationRequest::GetClassData() const { return &_class_data_; }


void ContractRegistrationRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ContractRegistrationRequest*>(&to_msg);
  auto& from = static_cast<const ContractRegistrationRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.wasmx.v1.ContractRegistrationRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_contract_address().empty()) {
    _this->_internal_set_contract_address(from._internal_contract_address());
  }
  if (!from._internal_admin_address().empty()) {
    _this->_internal_set_admin_address(from._internal_admin_address());
  }
  if (!from._internal_granter_address().empty()) {
    _this->_internal_set_granter_address(from._internal_granter_address());
  }
  if (from._internal_gas_limit() != 0) {
    _this->_internal_set_gas_limit(from._internal_gas_limit());
  }
  if (from._internal_gas_price() != 0) {
    _this->_internal_set_gas_price(from._internal_gas_price());
  }
  if (from._internal_code_id() != 0) {
    _this->_internal_set_code_id(from._internal_code_id());
  }
  if (from._internal_should_pin_contract() != 0) {
    _this->_internal_set_should_pin_contract(from._internal_should_pin_contract());
  }
  if (from._internal_is_migration_allowed() != 0) {
    _this->_internal_set_is_migration_allowed(from._internal_is_migration_allowed());
  }
  if (from._internal_funding_mode() != 0) {
    _this->_internal_set_funding_mode(from._internal_funding_mode());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ContractRegistrationRequest::CopyFrom(const ContractRegistrationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.wasmx.v1.ContractRegistrationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContractRegistrationRequest::IsInitialized() const {
  return true;
}

void ContractRegistrationRequest::InternalSwap(ContractRegistrationRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.contract_address_, lhs_arena,
                                       &other->_impl_.contract_address_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.admin_address_, lhs_arena,
                                       &other->_impl_.admin_address_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.granter_address_, lhs_arena,
                                       &other->_impl_.granter_address_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ContractRegistrationRequest, _impl_.funding_mode_)
      + sizeof(ContractRegistrationRequest::_impl_.funding_mode_)
      - PROTOBUF_FIELD_OFFSET(ContractRegistrationRequest, _impl_.gas_limit_)>(
          reinterpret_cast<char*>(&_impl_.gas_limit_),
          reinterpret_cast<char*>(&other->_impl_.gas_limit_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ContractRegistrationRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fwasmx_2fv1_2fproposal_2eproto_getter, &descriptor_table_injective_2fwasmx_2fv1_2fproposal_2eproto_once,
      file_level_metadata_injective_2fwasmx_2fv1_2fproposal_2eproto[3]);
}
// ===================================================================

class BatchStoreCodeProposal::_Internal {
 public:
};

void BatchStoreCodeProposal::clear_proposals() {
  _internal_mutable_proposals()->Clear();
}
BatchStoreCodeProposal::BatchStoreCodeProposal(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.wasmx.v1.BatchStoreCodeProposal)
}
BatchStoreCodeProposal::BatchStoreCodeProposal(const BatchStoreCodeProposal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BatchStoreCodeProposal* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.proposals_){from._impl_.proposals_}
    , decltype(_impl_.title_) {}

    , decltype(_impl_.description_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.title_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_title().empty()) {
    _this->_impl_.title_.Set(from._internal_title(), _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.description_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:injective.wasmx.v1.BatchStoreCodeProposal)
}

inline void BatchStoreCodeProposal::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.proposals_){arena}
    , decltype(_impl_.title_) {}

    , decltype(_impl_.description_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.title_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.description_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BatchStoreCodeProposal::~BatchStoreCodeProposal() {
  // @@protoc_insertion_point(destructor:injective.wasmx.v1.BatchStoreCodeProposal)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BatchStoreCodeProposal::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_proposals()->~RepeatedPtrField();
  _impl_.title_.Destroy();
  _impl_.description_.Destroy();
}

void BatchStoreCodeProposal::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BatchStoreCodeProposal::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.wasmx.v1.BatchStoreCodeProposal)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_proposals()->Clear();
  _impl_.title_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BatchStoreCodeProposal::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string title = 1 [json_name = "title"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.wasmx.v1.BatchStoreCodeProposal.title"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string description = 2 [json_name = "description"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.wasmx.v1.BatchStoreCodeProposal.description"));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .cosmwasm.wasm.v1.StoreCodeProposal proposals = 3 [json_name = "proposals", (.gogoproto.nullable) = false];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_proposals(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* BatchStoreCodeProposal::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.wasmx.v1.BatchStoreCodeProposal)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string title = 1 [json_name = "title"];
  if (!this->_internal_title().empty()) {
    const std::string& _s = this->_internal_title();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.wasmx.v1.BatchStoreCodeProposal.title");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string description = 2 [json_name = "description"];
  if (!this->_internal_description().empty()) {
    const std::string& _s = this->_internal_description();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.wasmx.v1.BatchStoreCodeProposal.description");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // repeated .cosmwasm.wasm.v1.StoreCodeProposal proposals = 3 [json_name = "proposals", (.gogoproto.nullable) = false];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_proposals_size()); i < n; i++) {
    const auto& repfield = this->_internal_proposals(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.wasmx.v1.BatchStoreCodeProposal)
  return target;
}

::size_t BatchStoreCodeProposal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.wasmx.v1.BatchStoreCodeProposal)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cosmwasm.wasm.v1.StoreCodeProposal proposals = 3 [json_name = "proposals", (.gogoproto.nullable) = false];
  total_size += 1UL * this->_internal_proposals_size();
  for (const auto& msg : this->_internal_proposals()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string title = 1 [json_name = "title"];
  if (!this->_internal_title().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_title());
  }

  // string description = 2 [json_name = "description"];
  if (!this->_internal_description().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_description());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BatchStoreCodeProposal::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BatchStoreCodeProposal::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BatchStoreCodeProposal::GetClassData() const { return &_class_data_; }


void BatchStoreCodeProposal::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BatchStoreCodeProposal*>(&to_msg);
  auto& from = static_cast<const BatchStoreCodeProposal&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.wasmx.v1.BatchStoreCodeProposal)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_proposals()->MergeFrom(from._internal_proposals());
  if (!from._internal_title().empty()) {
    _this->_internal_set_title(from._internal_title());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BatchStoreCodeProposal::CopyFrom(const BatchStoreCodeProposal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.wasmx.v1.BatchStoreCodeProposal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchStoreCodeProposal::IsInitialized() const {
  return true;
}

void BatchStoreCodeProposal::InternalSwap(BatchStoreCodeProposal* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_proposals()->InternalSwap(other->_internal_mutable_proposals());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.title_, lhs_arena,
                                       &other->_impl_.title_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.description_, lhs_arena,
                                       &other->_impl_.description_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata BatchStoreCodeProposal::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fwasmx_2fv1_2fproposal_2eproto_getter, &descriptor_table_injective_2fwasmx_2fv1_2fproposal_2eproto_once,
      file_level_metadata_injective_2fwasmx_2fv1_2fproposal_2eproto[4]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace wasmx
}  // namespace injective
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::injective::wasmx::v1::ContractRegistrationRequestProposal*
Arena::CreateMaybeMessage< ::injective::wasmx::v1::ContractRegistrationRequestProposal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::wasmx::v1::ContractRegistrationRequestProposal >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::wasmx::v1::BatchContractRegistrationRequestProposal*
Arena::CreateMaybeMessage< ::injective::wasmx::v1::BatchContractRegistrationRequestProposal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::wasmx::v1::BatchContractRegistrationRequestProposal >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::wasmx::v1::BatchContractDeregistrationProposal*
Arena::CreateMaybeMessage< ::injective::wasmx::v1::BatchContractDeregistrationProposal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::wasmx::v1::BatchContractDeregistrationProposal >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::wasmx::v1::ContractRegistrationRequest*
Arena::CreateMaybeMessage< ::injective::wasmx::v1::ContractRegistrationRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::wasmx::v1::ContractRegistrationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::wasmx::v1::BatchStoreCodeProposal*
Arena::CreateMaybeMessage< ::injective::wasmx::v1::BatchStoreCodeProposal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::wasmx::v1::BatchStoreCodeProposal >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: injective/wasmx/v1/tx.proto
#ifndef GRPC_injective_2fwasmx_2fv1_2ftx_2eproto__INCLUDED
#define GRPC_injective_2fwasmx_2fv1_2ftx_2eproto__INCLUDED

#include "injective/wasmx/v1/tx.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace injective {
namespace wasmx {
namespace v1 {

// Msg defines the wasmx Msg service.
class Msg final {
 public:
  static constexpr char const* service_full_name() {
    return "injective.wasmx.v1.Msg";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status UpdateRegistryContractParams(::grpc::ClientContext* context, const ::injective::wasmx::v1::MsgUpdateContract& request, ::injective::wasmx::v1::MsgUpdateContractResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::wasmx::v1::MsgUpdateContractResponse>> AsyncUpdateRegistryContractParams(::grpc::ClientContext* context, const ::injective::wasmx::v1::MsgUpdateContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::wasmx::v1::MsgUpdateContractResponse>>(AsyncUpdateRegistryContractParamsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::wasmx::v1::MsgUpdateContractResponse>> PrepareAsyncUpdateRegistryContractParams(::grpc::ClientContext* context, const ::injective::wasmx::v1::MsgUpdateContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::wasmx::v1::MsgUpdateContractResponse>>(PrepareAsyncUpdateRegistryContractParamsRaw(context, request, cq));
    }
    virtual ::grpc::Status ActivateRegistryContract(::grpc::ClientContext* context, const ::injective::wasmx::v1::MsgActivateContract& request, ::injective::wasmx::v1::MsgActivateContractResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::wasmx::v1::MsgActivateContractResponse>> AsyncActivateRegistryContract(::grpc::ClientContext* context, const ::injective::wasmx::v1::MsgActivateContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::wasmx::v1::MsgActivateContractResponse>>(AsyncActivateRegistryContractRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::wasmx::v1::MsgActivateContractResponse>> PrepareAsyncActivateRegistryContract(::grpc::ClientContext* context, const ::injective::wasmx::v1::MsgActivateContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::wasmx::v1::MsgActivateContractResponse>>(PrepareAsyncActivateRegistryContractRaw(context, request, cq));
    }
    virtual ::grpc::Status DeactivateRegistryContract(::grpc::ClientContext* context, const ::injective::wasmx::v1::MsgDeactivateContract& request, ::injective::wasmx::v1::MsgDeactivateContractResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::wasmx::v1::MsgDeactivateContractResponse>> AsyncDeactivateRegistryContract(::grpc::ClientContext* context, const ::injective::wasmx::v1::MsgDeactivateContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::wasmx::v1::MsgDeactivateContractResponse>>(AsyncDeactivateRegistryContractRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::wasmx::v1::MsgDeactivateContractResponse>> PrepareAsyncDeactivateRegistryContract(::grpc::ClientContext* context, const ::injective::wasmx::v1::MsgDeactivateContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::wasmx::v1::MsgDeactivateContractResponse>>(PrepareAsyncDeactivateRegistryContractRaw(context, request, cq));
    }
    virtual ::grpc::Status ExecuteContractCompat(::grpc::ClientContext* context, const ::injective::wasmx::v1::MsgExecuteContractCompat& request, ::injective::wasmx::v1::MsgExecuteContractCompatResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::wasmx::v1::MsgExecuteContractCompatResponse>> AsyncExecuteContractCompat(::grpc::ClientContext* context, const ::injective::wasmx::v1::MsgExecuteContractCompat& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::wasmx::v1::MsgExecuteContractCompatResponse>>(AsyncExecuteContractCompatRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::wasmx::v1::MsgExecuteContractCompatResponse>> PrepareAsyncExecuteContractCompat(::grpc::ClientContext* context, const ::injective::wasmx::v1::MsgExecuteContractCompat& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::wasmx::v1::MsgExecuteContractCompatResponse>>(PrepareAsyncExecuteContractCompatRaw(context, request, cq));
    }
    virtual ::grpc::Status UpdateParams(::grpc::ClientContext* context, const ::injective::wasmx::v1::MsgUpdateParams& request, ::injective::wasmx::v1::MsgUpdateParamsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::wasmx::v1::MsgUpdateParamsResponse>> AsyncUpdateParams(::grpc::ClientContext* context, const ::injective::wasmx::v1::MsgUpdateParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::wasmx::v1::MsgUpdateParamsResponse>>(AsyncUpdateParamsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::wasmx::v1::MsgUpdateParamsResponse>> PrepareAsyncUpdateParams(::grpc::ClientContext* context, const ::injective::wasmx::v1::MsgUpdateParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::wasmx::v1::MsgUpdateParamsResponse>>(PrepareAsyncUpdateParamsRaw(context, request, cq));
    }
    virtual ::grpc::Status RegisterContract(::grpc::ClientContext* context, const ::injective::wasmx::v1::MsgRegisterContract& request, ::injective::wasmx::v1::MsgRegisterContractResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::wasmx::v1::MsgRegisterContractResponse>> AsyncRegisterContract(::grpc::ClientContext* context, const ::injective::wasmx::v1::MsgRegisterContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::wasmx::v1::MsgRegisterContractResponse>>(AsyncRegisterContractRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::wasmx::v1::MsgRegisterContractResponse>> PrepareAsyncRegisterContract(::grpc::ClientContext* context, const ::injective::wasmx::v1::MsgRegisterContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::wasmx::v1::MsgRegisterContractResponse>>(PrepareAsyncRegisterContractRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void UpdateRegistryContractParams(::grpc::ClientContext* context, const ::injective::wasmx::v1::MsgUpdateContract* request, ::injective::wasmx::v1::MsgUpdateContractResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateRegistryContractParams(::grpc::ClientContext* context, const ::injective::wasmx::v1::MsgUpdateContract* request, ::injective::wasmx::v1::MsgUpdateContractResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ActivateRegistryContract(::grpc::ClientContext* context, const ::injective::wasmx::v1::MsgActivateContract* request, ::injective::wasmx::v1::MsgActivateContractResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ActivateRegistryContract(::grpc::ClientContext* context, const ::injective::wasmx::v1::MsgActivateContract* request, ::injective::wasmx::v1::MsgActivateContractResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DeactivateRegistryContract(::grpc::ClientContext* context, const ::injective::wasmx::v1::MsgDeactivateContract* request, ::injective::wasmx::v1::MsgDeactivateContractResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeactivateRegistryContract(::grpc::ClientContext* context, const ::injective::wasmx::v1::MsgDeactivateContract* request, ::injective::wasmx::v1::MsgDeactivateContractResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ExecuteContractCompat(::grpc::ClientContext* context, const ::injective::wasmx::v1::MsgExecuteContractCompat* request, ::injective::wasmx::v1::MsgExecuteContractCompatResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ExecuteContractCompat(::grpc::ClientContext* context, const ::injective::wasmx::v1::MsgExecuteContractCompat* request, ::injective::wasmx::v1::MsgExecuteContractCompatResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void UpdateParams(::grpc::ClientContext* context, const ::injective::wasmx::v1::MsgUpdateParams* request, ::injective::wasmx::v1::MsgUpdateParamsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateParams(::grpc::ClientContext* context, const ::injective::wasmx::v1::MsgUpdateParams* request, ::injective::wasmx::v1::MsgUpdateParamsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void RegisterContract(::grpc::ClientContext* context, const ::injective::wasmx::v1::MsgRegisterContract* request, ::injective::wasmx::v1::MsgRegisterContractResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RegisterContract(::grpc::ClientContext* context, const ::injective::wasmx::v1::MsgRegisterContract* request, ::injective::wasmx::v1::MsgRegisterContractResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::wasmx::v1::MsgUpdateContractResponse>* AsyncUpdateRegistryContractParamsRaw(::grpc::ClientContext* context, const ::injective::wasmx::v1::MsgUpdateContract& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::wasmx::v1::MsgUpdateContractResponse>* PrepareAsyncUpdateRegistryContractParamsRaw(::grpc::ClientContext* context, const ::injective::wasmx::v1::MsgUpdateContract& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::wasmx::v1::MsgActivateContractResponse>* AsyncActivateRegistryContractRaw(::grpc::ClientContext* context, const ::injective::wasmx::v1::MsgActivateContract& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::wasmx::v1::MsgActivateContractResponse>* PrepareAsyncActivateRegistryContractRaw(::grpc::ClientContext* context, const ::injective::wasmx::v1::MsgActivateContract& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::wasmx::v1::MsgDeactivateContractResponse>* AsyncDeactivateRegistryContractRaw(::grpc::ClientContext* context, const ::injective::wasmx::v1::MsgDeactivateContract& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::wasmx::v1::MsgDeactivateContractResponse>* PrepareAsyncDeactivateRegistryContractRaw(::grpc::ClientContext* context, const ::injective::wasmx::v1::MsgDeactivateContract& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::wasmx::v1::MsgExecuteContractCompatResponse>* AsyncExecuteContractCompatRaw(::grpc::ClientContext* context, const ::injective::wasmx::v1::MsgExecuteContractCompat& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::wasmx::v1::MsgExecuteContractCompatResponse>* PrepareAsyncExecuteContractCompatRaw(::grpc::ClientContext* context, const ::injective::wasmx::v1::MsgExecuteContractCompat& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::wasmx::v1::MsgUpdateParamsResponse>* AsyncUpdateParamsRaw(::grpc::ClientContext* context, const ::injective::wasmx::v1::MsgUpdateParams& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::wasmx::v1::MsgUpdateParamsResponse>* PrepareAsyncUpdateParamsRaw(::grpc::ClientContext* context, const ::injective::wasmx::v1::MsgUpdateParams& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::wasmx::v1::MsgRegisterContractResponse>* AsyncRegisterContractRaw(::grpc::ClientContext* context, const ::injective::wasmx::v1::MsgRegisterContract& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::wasmx::v1::MsgRegisterContractResponse>* PrepareAsyncRegisterContractRaw(::grpc::ClientContext* context, const ::injective::wasmx::v1::MsgRegisterContract& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status UpdateRegistryContractParams(::grpc::ClientContext* context, const ::injective::wasmx::v1::MsgUpdateContract& request, ::injective::wasmx::v1::MsgUpdateContractResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::wasmx::v1::MsgUpdateContractResponse>> AsyncUpdateRegistryContractParams(::grpc::ClientContext* context, const ::injective::wasmx::v1::MsgUpdateContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::wasmx::v1::MsgUpdateContractResponse>>(AsyncUpdateRegistryContractParamsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::wasmx::v1::MsgUpdateContractResponse>> PrepareAsyncUpdateRegistryContractParams(::grpc::ClientContext* context, const ::injective::wasmx::v1::MsgUpdateContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::wasmx::v1::MsgUpdateContractResponse>>(PrepareAsyncUpdateRegistryContractParamsRaw(context, request, cq));
    }
    ::grpc::Status ActivateRegistryContract(::grpc::ClientContext* context, const ::injective::wasmx::v1::MsgActivateContract& request, ::injective::wasmx::v1::MsgActivateContractResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::wasmx::v1::MsgActivateContractResponse>> AsyncActivateRegistryContract(::grpc::ClientContext* context, const ::injective::wasmx::v1::MsgActivateContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::wasmx::v1::MsgActivateContractResponse>>(AsyncActivateRegistryContractRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::wasmx::v1::MsgActivateContractResponse>> PrepareAsyncActivateRegistryContract(::grpc::ClientContext* context, const ::injective::wasmx::v1::MsgActivateContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::wasmx::v1::MsgActivateContractResponse>>(PrepareAsyncActivateRegistryContractRaw(context, request, cq));
    }
    ::grpc::Status DeactivateRegistryContract(::grpc::ClientContext* context, const ::injective::wasmx::v1::MsgDeactivateContract& request, ::injective::wasmx::v1::MsgDeactivateContractResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::wasmx::v1::MsgDeactivateContractResponse>> AsyncDeactivateRegistryContract(::grpc::ClientContext* context, const ::injective::wasmx::v1::MsgDeactivateContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::wasmx::v1::MsgDeactivateContractResponse>>(AsyncDeactivateRegistryContractRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::wasmx::v1::MsgDeactivateContractResponse>> PrepareAsyncDeactivateRegistryContract(::grpc::ClientContext* context, const ::injective::wasmx::v1::MsgDeactivateContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::wasmx::v1::MsgDeactivateContractResponse>>(PrepareAsyncDeactivateRegistryContractRaw(context, request, cq));
    }
    ::grpc::Status ExecuteContractCompat(::grpc::ClientContext* context, const ::injective::wasmx::v1::MsgExecuteContractCompat& request, ::injective::wasmx::v1::MsgExecuteContractCompatResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::wasmx::v1::MsgExecuteContractCompatResponse>> AsyncExecuteContractCompat(::grpc::ClientContext* context, const ::injective::wasmx::v1::MsgExecuteContractCompat& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::wasmx::v1::MsgExecuteContractCompatResponse>>(AsyncExecuteContractCompatRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::wasmx::v1::MsgExecuteContractCompatResponse>> PrepareAsyncExecuteContractCompat(::grpc::ClientContext* context, const ::injective::wasmx::v1::MsgExecuteContractCompat& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::wasmx::v1::MsgExecuteContractCompatResponse>>(PrepareAsyncExecuteContractCompatRaw(context, request, cq));
    }
    ::grpc::Status UpdateParams(::grpc::ClientContext* context, const ::injective::wasmx::v1::MsgUpdateParams& request, ::injective::wasmx::v1::MsgUpdateParamsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::wasmx::v1::MsgUpdateParamsResponse>> AsyncUpdateParams(::grpc::ClientContext* context, const ::injective::wasmx::v1::MsgUpdateParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::wasmx::v1::MsgUpdateParamsResponse>>(AsyncUpdateParamsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::wasmx::v1::MsgUpdateParamsResponse>> PrepareAsyncUpdateParams(::grpc::ClientContext* context, const ::injective::wasmx::v1::MsgUpdateParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::wasmx::v1::MsgUpdateParamsResponse>>(PrepareAsyncUpdateParamsRaw(context, request, cq));
    }
    ::grpc::Status RegisterContract(::grpc::ClientContext* context, const ::injective::wasmx::v1::MsgRegisterContract& request, ::injective::wasmx::v1::MsgRegisterContractResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::wasmx::v1::MsgRegisterContractResponse>> AsyncRegisterContract(::grpc::ClientContext* context, const ::injective::wasmx::v1::MsgRegisterContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::wasmx::v1::MsgRegisterContractResponse>>(AsyncRegisterContractRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::wasmx::v1::MsgRegisterContractResponse>> PrepareAsyncRegisterContract(::grpc::ClientContext* context, const ::injective::wasmx::v1::MsgRegisterContract& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::wasmx::v1::MsgRegisterContractResponse>>(PrepareAsyncRegisterContractRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void UpdateRegistryContractParams(::grpc::ClientContext* context, const ::injective::wasmx::v1::MsgUpdateContract* request, ::injective::wasmx::v1::MsgUpdateContractResponse* response, std::function<void(::grpc::Status)>) override;
      void UpdateRegistryContractParams(::grpc::ClientContext* context, const ::injective::wasmx::v1::MsgUpdateContract* request, ::injective::wasmx::v1::MsgUpdateContractResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ActivateRegistryContract(::grpc::ClientContext* context, const ::injective::wasmx::v1::MsgActivateContract* request, ::injective::wasmx::v1::MsgActivateContractResponse* response, std::function<void(::grpc::Status)>) override;
      void ActivateRegistryContract(::grpc::ClientContext* context, const ::injective::wasmx::v1::MsgActivateContract* request, ::injective::wasmx::v1::MsgActivateContractResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeactivateRegistryContract(::grpc::ClientContext* context, const ::injective::wasmx::v1::MsgDeactivateContract* request, ::injective::wasmx::v1::MsgDeactivateContractResponse* response, std::function<void(::grpc::Status)>) override;
      void DeactivateRegistryContract(::grpc::ClientContext* context, const ::injective::wasmx::v1::MsgDeactivateContract* request, ::injective::wasmx::v1::MsgDeactivateContractResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ExecuteContractCompat(::grpc::ClientContext* context, const ::injective::wasmx::v1::MsgExecuteContractCompat* request, ::injective::wasmx::v1::MsgExecuteContractCompatResponse* response, std::function<void(::grpc::Status)>) override;
      void ExecuteContractCompat(::grpc::ClientContext* context, const ::injective::wasmx::v1::MsgExecuteContractCompat* request, ::injective::wasmx::v1::MsgExecuteContractCompatResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UpdateParams(::grpc::ClientContext* context, const ::injective::wasmx::v1::MsgUpdateParams* request, ::injective::wasmx::v1::MsgUpdateParamsResponse* response, std::function<void(::grpc::Status)>) override;
      void UpdateParams(::grpc::ClientContext* context, const ::injective::wasmx::v1::MsgUpdateParams* request, ::injective::wasmx::v1::MsgUpdateParamsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void RegisterContract(::grpc::ClientContext* context, const ::injective::wasmx::v1::MsgRegisterContract* request, ::injective::wasmx::v1::MsgRegisterContractResponse* response, std::function<void(::grpc::Status)>) override;
      void RegisterContract(::grpc::ClientContext* context, const ::injective::wasmx::v1::MsgRegisterContract* request, ::injective::wasmx::v1::MsgRegisterContractResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::injective::wasmx::v1::MsgUpdateContractResponse>* AsyncUpdateRegistryContractParamsRaw(::grpc::ClientContext* context, const ::injective::wasmx::v1::MsgUpdateContract& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::wasmx::v1::MsgUpdateContractResponse>* PrepareAsyncUpdateRegistryContractParamsRaw(::grpc::ClientContext* context, const ::injective::wasmx::v1::MsgUpdateContract& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::wasmx::v1::MsgActivateContractResponse>* AsyncActivateRegistryContractRaw(::grpc::ClientContext* context, const ::injective::wasmx::v1::MsgActivateContract& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::wasmx::v1::MsgActivateContractResponse>* PrepareAsyncActivateRegistryContractRaw(::grpc::ClientContext* context, const ::injective::wasmx::v1::MsgActivateContract& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::wasmx::v1::MsgDeactivateContractResponse>* AsyncDeactivateRegistryContractRaw(::grpc::ClientContext* context, const ::injective::wasmx::v1::MsgDeactivateContract& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::wasmx::v1::MsgDeactivateContractResponse>* PrepareAsyncDeactivateRegistryContractRaw(::grpc::ClientContext* context, const ::injective::wasmx::v1::MsgDeactivateContract& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::wasmx::v1::MsgExecuteContractCompatResponse>* AsyncExecuteContractCompatRaw(::grpc::ClientContext* context, const ::injective::wasmx::v1::MsgExecuteContractCompat& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::wasmx::v1::MsgExecuteContractCompatResponse>* PrepareAsyncExecuteContractCompatRaw(::grpc::ClientContext* context, const ::injective::wasmx::v1::MsgExecuteContractCompat& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::wasmx::v1::MsgUpdateParamsResponse>* AsyncUpdateParamsRaw(::grpc::ClientContext* context, const ::injective::wasmx::v1::MsgUpdateParams& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::wasmx::v1::MsgUpdateParamsResponse>* PrepareAsyncUpdateParamsRaw(::grpc::ClientContext* context, const ::injective::wasmx::v1::MsgUpdateParams& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::wasmx::v1::MsgRegisterContractResponse>* AsyncRegisterContractRaw(::grpc::ClientContext* context, const ::injective::wasmx::v1::MsgRegisterContract& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::wasmx::v1::MsgRegisterContractResponse>* PrepareAsyncRegisterContractRaw(::grpc::ClientContext* context, const ::injective::wasmx::v1::MsgRegisterContract& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateRegistryContractParams_;
    const ::grpc::internal::RpcMethod rpcmethod_ActivateRegistryContract_;
    const ::grpc::internal::RpcMethod rpcmethod_DeactivateRegistryContract_;
    const ::grpc::internal::RpcMethod rpcmethod_ExecuteContractCompat_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateParams_;
    const ::grpc::internal::RpcMethod rpcmethod_RegisterContract_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status UpdateRegistryContractParams(::grpc::ServerContext* context, const ::injective::wasmx::v1::MsgUpdateContract* request, ::injective::wasmx::v1::MsgUpdateContractResponse* response);
    virtual ::grpc::Status ActivateRegistryContract(::grpc::ServerContext* context, const ::injective::wasmx::v1::MsgActivateContract* request, ::injective::wasmx::v1::MsgActivateContractResponse* response);
    virtual ::grpc::Status DeactivateRegistryContract(::grpc::ServerContext* context, const ::injective::wasmx::v1::MsgDeactivateContract* request, ::injective::wasmx::v1::MsgDeactivateContractResponse* response);
    virtual ::grpc::Status ExecuteContractCompat(::grpc::ServerContext* context, const ::injective::wasmx::v1::MsgExecuteContractCompat* request, ::injective::wasmx::v1::MsgExecuteContractCompatResponse* response);
    virtual ::grpc::Status UpdateParams(::grpc::ServerContext* context, const ::injective::wasmx::v1::MsgUpdateParams* request, ::injective::wasmx::v1::MsgUpdateParamsResponse* response);
    virtual ::grpc::Status RegisterContract(::grpc::ServerContext* context, const ::injective::wasmx::v1::MsgRegisterContract* request, ::injective::wasmx::v1::MsgRegisterContractResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateRegistryContractParams : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateRegistryContractParams() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_UpdateRegistryContractParams() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateRegistryContractParams(::grpc::ServerContext* /*context*/, const ::injective::wasmx::v1::MsgUpdateContract* /*request*/, ::injective::wasmx::v1::MsgUpdateContractResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateRegistryContractParams(::grpc::ServerContext* context, ::injective::wasmx::v1::MsgUpdateContract* request, ::grpc::ServerAsyncResponseWriter< ::injective::wasmx::v1::MsgUpdateContractResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ActivateRegistryContract : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ActivateRegistryContract() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_ActivateRegistryContract() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ActivateRegistryContract(::grpc::ServerContext* /*context*/, const ::injective::wasmx::v1::MsgActivateContract* /*request*/, ::injective::wasmx::v1::MsgActivateContractResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestActivateRegistryContract(::grpc::ServerContext* context, ::injective::wasmx::v1::MsgActivateContract* request, ::grpc::ServerAsyncResponseWriter< ::injective::wasmx::v1::MsgActivateContractResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeactivateRegistryContract : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeactivateRegistryContract() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_DeactivateRegistryContract() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeactivateRegistryContract(::grpc::ServerContext* /*context*/, const ::injective::wasmx::v1::MsgDeactivateContract* /*request*/, ::injective::wasmx::v1::MsgDeactivateContractResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeactivateRegistryContract(::grpc::ServerContext* context, ::injective::wasmx::v1::MsgDeactivateContract* request, ::grpc::ServerAsyncResponseWriter< ::injective::wasmx::v1::MsgDeactivateContractResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ExecuteContractCompat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ExecuteContractCompat() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_ExecuteContractCompat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteContractCompat(::grpc::ServerContext* /*context*/, const ::injective::wasmx::v1::MsgExecuteContractCompat* /*request*/, ::injective::wasmx::v1::MsgExecuteContractCompatResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestExecuteContractCompat(::grpc::ServerContext* context, ::injective::wasmx::v1::MsgExecuteContractCompat* request, ::grpc::ServerAsyncResponseWriter< ::injective::wasmx::v1::MsgExecuteContractCompatResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateParams : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateParams() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_UpdateParams() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateParams(::grpc::ServerContext* /*context*/, const ::injective::wasmx::v1::MsgUpdateParams* /*request*/, ::injective::wasmx::v1::MsgUpdateParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateParams(::grpc::ServerContext* context, ::injective::wasmx::v1::MsgUpdateParams* request, ::grpc::ServerAsyncResponseWriter< ::injective::wasmx::v1::MsgUpdateParamsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RegisterContract : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RegisterContract() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_RegisterContract() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterContract(::grpc::ServerContext* /*context*/, const ::injective::wasmx::v1::MsgRegisterContract* /*request*/, ::injective::wasmx::v1::MsgRegisterContractResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegisterContract(::grpc::ServerContext* context, ::injective::wasmx::v1::MsgRegisterContract* request, ::grpc::ServerAsyncResponseWriter< ::injective::wasmx::v1::MsgRegisterContractResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_UpdateRegistryContractParams<WithAsyncMethod_ActivateRegistryContract<WithAsyncMethod_DeactivateRegistryContract<WithAsyncMethod_ExecuteContractCompat<WithAsyncMethod_UpdateParams<WithAsyncMethod_RegisterContract<Service > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_UpdateRegistryContractParams : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdateRegistryContractParams() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::injective::wasmx::v1::MsgUpdateContract, ::injective::wasmx::v1::MsgUpdateContractResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::injective::wasmx::v1::MsgUpdateContract* request, ::injective::wasmx::v1::MsgUpdateContractResponse* response) { return this->UpdateRegistryContractParams(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateRegistryContractParams(
        ::grpc::MessageAllocator< ::injective::wasmx::v1::MsgUpdateContract, ::injective::wasmx::v1::MsgUpdateContractResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::injective::wasmx::v1::MsgUpdateContract, ::injective::wasmx::v1::MsgUpdateContractResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdateRegistryContractParams() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateRegistryContractParams(::grpc::ServerContext* /*context*/, const ::injective::wasmx::v1::MsgUpdateContract* /*request*/, ::injective::wasmx::v1::MsgUpdateContractResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateRegistryContractParams(
      ::grpc::CallbackServerContext* /*context*/, const ::injective::wasmx::v1::MsgUpdateContract* /*request*/, ::injective::wasmx::v1::MsgUpdateContractResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ActivateRegistryContract : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ActivateRegistryContract() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::injective::wasmx::v1::MsgActivateContract, ::injective::wasmx::v1::MsgActivateContractResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::injective::wasmx::v1::MsgActivateContract* request, ::injective::wasmx::v1::MsgActivateContractResponse* response) { return this->ActivateRegistryContract(context, request, response); }));}
    void SetMessageAllocatorFor_ActivateRegistryContract(
        ::grpc::MessageAllocator< ::injective::wasmx::v1::MsgActivateContract, ::injective::wasmx::v1::MsgActivateContractResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::injective::wasmx::v1::MsgActivateContract, ::injective::wasmx::v1::MsgActivateContractResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ActivateRegistryContract() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ActivateRegistryContract(::grpc::ServerContext* /*context*/, const ::injective::wasmx::v1::MsgActivateContract* /*request*/, ::injective::wasmx::v1::MsgActivateContractResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ActivateRegistryContract(
      ::grpc::CallbackServerContext* /*context*/, const ::injective::wasmx::v1::MsgActivateContract* /*request*/, ::injective::wasmx::v1::MsgActivateContractResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeactivateRegistryContract : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeactivateRegistryContract() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::injective::wasmx::v1::MsgDeactivateContract, ::injective::wasmx::v1::MsgDeactivateContractResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::injective::wasmx::v1::MsgDeactivateContract* request, ::injective::wasmx::v1::MsgDeactivateContractResponse* response) { return this->DeactivateRegistryContract(context, request, response); }));}
    void SetMessageAllocatorFor_DeactivateRegistryContract(
        ::grpc::MessageAllocator< ::injective::wasmx::v1::MsgDeactivateContract, ::injective::wasmx::v1::MsgDeactivateContractResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::injective::wasmx::v1::MsgDeactivateContract, ::injective::wasmx::v1::MsgDeactivateContractResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeactivateRegistryContract() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeactivateRegistryContract(::grpc::ServerContext* /*context*/, const ::injective::wasmx::v1::MsgDeactivateContract* /*request*/, ::injective::wasmx::v1::MsgDeactivateContractResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeactivateRegistryContract(
      ::grpc::CallbackServerContext* /*context*/, const ::injective::wasmx::v1::MsgDeactivateContract* /*request*/, ::injective::wasmx::v1::MsgDeactivateContractResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ExecuteContractCompat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ExecuteContractCompat() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::injective::wasmx::v1::MsgExecuteContractCompat, ::injective::wasmx::v1::MsgExecuteContractCompatResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::injective::wasmx::v1::MsgExecuteContractCompat* request, ::injective::wasmx::v1::MsgExecuteContractCompatResponse* response) { return this->ExecuteContractCompat(context, request, response); }));}
    void SetMessageAllocatorFor_ExecuteContractCompat(
        ::grpc::MessageAllocator< ::injective::wasmx::v1::MsgExecuteContractCompat, ::injective::wasmx::v1::MsgExecuteContractCompatResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::injective::wasmx::v1::MsgExecuteContractCompat, ::injective::wasmx::v1::MsgExecuteContractCompatResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ExecuteContractCompat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteContractCompat(::grpc::ServerContext* /*context*/, const ::injective::wasmx::v1::MsgExecuteContractCompat* /*request*/, ::injective::wasmx::v1::MsgExecuteContractCompatResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ExecuteContractCompat(
      ::grpc::CallbackServerContext* /*context*/, const ::injective::wasmx::v1::MsgExecuteContractCompat* /*request*/, ::injective::wasmx::v1::MsgExecuteContractCompatResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdateParams : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdateParams() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::injective::wasmx::v1::MsgUpdateParams, ::injective::wasmx::v1::MsgUpdateParamsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::injective::wasmx::v1::MsgUpdateParams* request, ::injective::wasmx::v1::MsgUpdateParamsResponse* response) { return this->UpdateParams(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateParams(
        ::grpc::MessageAllocator< ::injective::wasmx::v1::MsgUpdateParams, ::injective::wasmx::v1::MsgUpdateParamsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::injective::wasmx::v1::MsgUpdateParams, ::injective::wasmx::v1::MsgUpdateParamsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdateParams() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateParams(::grpc::ServerContext* /*context*/, const ::injective::wasmx::v1::MsgUpdateParams* /*request*/, ::injective::wasmx::v1::MsgUpdateParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateParams(
      ::grpc::CallbackServerContext* /*context*/, const ::injective::wasmx::v1::MsgUpdateParams* /*request*/, ::injective::wasmx::v1::MsgUpdateParamsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_RegisterContract : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RegisterContract() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::injective::wasmx::v1::MsgRegisterContract, ::injective::wasmx::v1::MsgRegisterContractResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::injective::wasmx::v1::MsgRegisterContract* request, ::injective::wasmx::v1::MsgRegisterContractResponse* response) { return this->RegisterContract(context, request, response); }));}
    void SetMessageAllocatorFor_RegisterContract(
        ::grpc::MessageAllocator< ::injective::wasmx::v1::MsgRegisterContract, ::injective::wasmx::v1::MsgRegisterContractResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::injective::wasmx::v1::MsgRegisterContract, ::injective::wasmx::v1::MsgRegisterContractResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RegisterContract() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterContract(::grpc::ServerContext* /*context*/, const ::injective::wasmx::v1::MsgRegisterContract* /*request*/, ::injective::wasmx::v1::MsgRegisterContractResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RegisterContract(
      ::grpc::CallbackServerContext* /*context*/, const ::injective::wasmx::v1::MsgRegisterContract* /*request*/, ::injective::wasmx::v1::MsgRegisterContractResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_UpdateRegistryContractParams<WithCallbackMethod_ActivateRegistryContract<WithCallbackMethod_DeactivateRegistryContract<WithCallbackMethod_ExecuteContractCompat<WithCallbackMethod_UpdateParams<WithCallbackMethod_RegisterContract<Service > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_UpdateRegistryContractParams : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateRegistryContractParams() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_UpdateRegistryContractParams() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateRegistryContractParams(::grpc::ServerContext* /*context*/, const ::injective::wasmx::v1::MsgUpdateContract* /*request*/, ::injective::wasmx::v1::MsgUpdateContractResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ActivateRegistryContract : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ActivateRegistryContract() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_ActivateRegistryContract() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ActivateRegistryContract(::grpc::ServerContext* /*context*/, const ::injective::wasmx::v1::MsgActivateContract* /*request*/, ::injective::wasmx::v1::MsgActivateContractResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeactivateRegistryContract : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeactivateRegistryContract() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_DeactivateRegistryContract() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeactivateRegistryContract(::grpc::ServerContext* /*context*/, const ::injective::wasmx::v1::MsgDeactivateContract* /*request*/, ::injective::wasmx::v1::MsgDeactivateContractResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ExecuteContractCompat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ExecuteContractCompat() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_ExecuteContractCompat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteContractCompat(::grpc::ServerContext* /*context*/, const ::injective::wasmx::v1::MsgExecuteContractCompat* /*request*/, ::injective::wasmx::v1::MsgExecuteContractCompatResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateParams : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateParams() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_UpdateParams() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateParams(::grpc::ServerContext* /*context*/, const ::injective::wasmx::v1::MsgUpdateParams* /*request*/, ::injective::wasmx::v1::MsgUpdateParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RegisterContract : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RegisterContract() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_RegisterContract() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterContract(::grpc::ServerContext* /*context*/, const ::injective::wasmx::v1::MsgRegisterContract* /*request*/, ::injective::wasmx::v1::MsgRegisterContractResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateRegistryContractParams : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateRegistryContractParams() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_UpdateRegistryContractParams() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateRegistryContractParams(::grpc::ServerContext* /*context*/, const ::injective::wasmx::v1::MsgUpdateContract* /*request*/, ::injective::wasmx::v1::MsgUpdateContractResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateRegistryContractParams(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ActivateRegistryContract : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ActivateRegistryContract() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_ActivateRegistryContract() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ActivateRegistryContract(::grpc::ServerContext* /*context*/, const ::injective::wasmx::v1::MsgActivateContract* /*request*/, ::injective::wasmx::v1::MsgActivateContractResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestActivateRegistryContract(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeactivateRegistryContract : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeactivateRegistryContract() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_DeactivateRegistryContract() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeactivateRegistryContract(::grpc::ServerContext* /*context*/, const ::injective::wasmx::v1::MsgDeactivateContract* /*request*/, ::injective::wasmx::v1::MsgDeactivateContractResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeactivateRegistryContract(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ExecuteContractCompat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ExecuteContractCompat() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_ExecuteContractCompat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteContractCompat(::grpc::ServerContext* /*context*/, const ::injective::wasmx::v1::MsgExecuteContractCompat* /*request*/, ::injective::wasmx::v1::MsgExecuteContractCompatResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestExecuteContractCompat(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateParams : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateParams() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_UpdateParams() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateParams(::grpc::ServerContext* /*context*/, const ::injective::wasmx::v1::MsgUpdateParams* /*request*/, ::injective::wasmx::v1::MsgUpdateParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateParams(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RegisterContract : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RegisterContract() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_RegisterContract() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterContract(::grpc::ServerContext* /*context*/, const ::injective::wasmx::v1::MsgRegisterContract* /*request*/, ::injective::wasmx::v1::MsgRegisterContractResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegisterContract(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdateRegistryContractParams : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdateRegistryContractParams() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateRegistryContractParams(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdateRegistryContractParams() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateRegistryContractParams(::grpc::ServerContext* /*context*/, const ::injective::wasmx::v1::MsgUpdateContract* /*request*/, ::injective::wasmx::v1::MsgUpdateContractResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateRegistryContractParams(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ActivateRegistryContract : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ActivateRegistryContract() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ActivateRegistryContract(context, request, response); }));
    }
    ~WithRawCallbackMethod_ActivateRegistryContract() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ActivateRegistryContract(::grpc::ServerContext* /*context*/, const ::injective::wasmx::v1::MsgActivateContract* /*request*/, ::injective::wasmx::v1::MsgActivateContractResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ActivateRegistryContract(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeactivateRegistryContract : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeactivateRegistryContract() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeactivateRegistryContract(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeactivateRegistryContract() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeactivateRegistryContract(::grpc::ServerContext* /*context*/, const ::injective::wasmx::v1::MsgDeactivateContract* /*request*/, ::injective::wasmx::v1::MsgDeactivateContractResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeactivateRegistryContract(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ExecuteContractCompat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ExecuteContractCompat() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ExecuteContractCompat(context, request, response); }));
    }
    ~WithRawCallbackMethod_ExecuteContractCompat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteContractCompat(::grpc::ServerContext* /*context*/, const ::injective::wasmx::v1::MsgExecuteContractCompat* /*request*/, ::injective::wasmx::v1::MsgExecuteContractCompatResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ExecuteContractCompat(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdateParams : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdateParams() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateParams(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdateParams() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateParams(::grpc::ServerContext* /*context*/, const ::injective::wasmx::v1::MsgUpdateParams* /*request*/, ::injective::wasmx::v1::MsgUpdateParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateParams(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RegisterContract : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RegisterContract() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RegisterContract(context, request, response); }));
    }
    ~WithRawCallbackMethod_RegisterContract() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterContract(::grpc::ServerContext* /*context*/, const ::injective::wasmx::v1::MsgRegisterContract* /*request*/, ::injective::wasmx::v1::MsgRegisterContractResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RegisterContract(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateRegistryContractParams : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateRegistryContractParams() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::injective::wasmx::v1::MsgUpdateContract, ::injective::wasmx::v1::MsgUpdateContractResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::injective::wasmx::v1::MsgUpdateContract, ::injective::wasmx::v1::MsgUpdateContractResponse>* streamer) {
                       return this->StreamedUpdateRegistryContractParams(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateRegistryContractParams() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateRegistryContractParams(::grpc::ServerContext* /*context*/, const ::injective::wasmx::v1::MsgUpdateContract* /*request*/, ::injective::wasmx::v1::MsgUpdateContractResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateRegistryContractParams(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::injective::wasmx::v1::MsgUpdateContract,::injective::wasmx::v1::MsgUpdateContractResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ActivateRegistryContract : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ActivateRegistryContract() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::injective::wasmx::v1::MsgActivateContract, ::injective::wasmx::v1::MsgActivateContractResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::injective::wasmx::v1::MsgActivateContract, ::injective::wasmx::v1::MsgActivateContractResponse>* streamer) {
                       return this->StreamedActivateRegistryContract(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ActivateRegistryContract() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ActivateRegistryContract(::grpc::ServerContext* /*context*/, const ::injective::wasmx::v1::MsgActivateContract* /*request*/, ::injective::wasmx::v1::MsgActivateContractResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedActivateRegistryContract(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::injective::wasmx::v1::MsgActivateContract,::injective::wasmx::v1::MsgActivateContractResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeactivateRegistryContract : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeactivateRegistryContract() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::injective::wasmx::v1::MsgDeactivateContract, ::injective::wasmx::v1::MsgDeactivateContractResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::injective::wasmx::v1::MsgDeactivateContract, ::injective::wasmx::v1::MsgDeactivateContractResponse>* streamer) {
                       return this->StreamedDeactivateRegistryContract(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeactivateRegistryContract() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeactivateRegistryContract(::grpc::ServerContext* /*context*/, const ::injective::wasmx::v1::MsgDeactivateContract* /*request*/, ::injective::wasmx::v1::MsgDeactivateContractResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeactivateRegistryContract(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::injective::wasmx::v1::MsgDeactivateContract,::injective::wasmx::v1::MsgDeactivateContractResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ExecuteContractCompat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ExecuteContractCompat() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::injective::wasmx::v1::MsgExecuteContractCompat, ::injective::wasmx::v1::MsgExecuteContractCompatResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::injective::wasmx::v1::MsgExecuteContractCompat, ::injective::wasmx::v1::MsgExecuteContractCompatResponse>* streamer) {
                       return this->StreamedExecuteContractCompat(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ExecuteContractCompat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ExecuteContractCompat(::grpc::ServerContext* /*context*/, const ::injective::wasmx::v1::MsgExecuteContractCompat* /*request*/, ::injective::wasmx::v1::MsgExecuteContractCompatResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedExecuteContractCompat(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::injective::wasmx::v1::MsgExecuteContractCompat,::injective::wasmx::v1::MsgExecuteContractCompatResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateParams : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateParams() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::injective::wasmx::v1::MsgUpdateParams, ::injective::wasmx::v1::MsgUpdateParamsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::injective::wasmx::v1::MsgUpdateParams, ::injective::wasmx::v1::MsgUpdateParamsResponse>* streamer) {
                       return this->StreamedUpdateParams(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateParams() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateParams(::grpc::ServerContext* /*context*/, const ::injective::wasmx::v1::MsgUpdateParams* /*request*/, ::injective::wasmx::v1::MsgUpdateParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateParams(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::injective::wasmx::v1::MsgUpdateParams,::injective::wasmx::v1::MsgUpdateParamsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RegisterContract : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RegisterContract() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::injective::wasmx::v1::MsgRegisterContract, ::injective::wasmx::v1::MsgRegisterContractResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::injective::wasmx::v1::MsgRegisterContract, ::injective::wasmx::v1::MsgRegisterContractResponse>* streamer) {
                       return this->StreamedRegisterContract(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RegisterContract() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RegisterContract(::grpc::ServerContext* /*context*/, const ::injective::wasmx::v1::MsgRegisterContract* /*request*/, ::injective::wasmx::v1::MsgRegisterContractResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRegisterContract(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::injective::wasmx::v1::MsgRegisterContract,::injective::wasmx::v1::MsgRegisterContractResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_UpdateRegistryContractParams<WithStreamedUnaryMethod_ActivateRegistryContract<WithStreamedUnaryMethod_DeactivateRegistryContract<WithStreamedUnaryMethod_ExecuteContractCompat<WithStreamedUnaryMethod_UpdateParams<WithStreamedUnaryMethod_RegisterContract<Service > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_UpdateRegistryContractParams<WithStreamedUnaryMethod_ActivateRegistryContract<WithStreamedUnaryMethod_DeactivateRegistryContract<WithStreamedUnaryMethod_ExecuteContractCompat<WithStreamedUnaryMethod_UpdateParams<WithStreamedUnaryMethod_RegisterContract<Service > > > > > > StreamedService;
};

}  // namespace v1
}  // namespace wasmx
}  // namespace injective


#endif  // GRPC_injective_2fwasmx_2fv1_2ftx_2eproto__INCLUDED

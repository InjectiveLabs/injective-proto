// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: injective/wasmx/v1/query.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_injective_2fwasmx_2fv1_2fquery_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_injective_2fwasmx_2fv1_2fquery_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "google/api/annotations.pb.h"
#include "injective/wasmx/v1/wasmx.pb.h"
#include "injective/wasmx/v1/genesis.pb.h"
#include "gogoproto/gogo.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_injective_2fwasmx_2fv1_2fquery_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_injective_2fwasmx_2fv1_2fquery_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_injective_2fwasmx_2fv1_2fquery_2eproto;
namespace injective {
namespace wasmx {
namespace v1 {
class QueryContractRegistrationInfoRequest;
struct QueryContractRegistrationInfoRequestDefaultTypeInternal;
extern QueryContractRegistrationInfoRequestDefaultTypeInternal _QueryContractRegistrationInfoRequest_default_instance_;
class QueryContractRegistrationInfoResponse;
struct QueryContractRegistrationInfoResponseDefaultTypeInternal;
extern QueryContractRegistrationInfoResponseDefaultTypeInternal _QueryContractRegistrationInfoResponse_default_instance_;
class QueryModuleStateRequest;
struct QueryModuleStateRequestDefaultTypeInternal;
extern QueryModuleStateRequestDefaultTypeInternal _QueryModuleStateRequest_default_instance_;
class QueryModuleStateResponse;
struct QueryModuleStateResponseDefaultTypeInternal;
extern QueryModuleStateResponseDefaultTypeInternal _QueryModuleStateResponse_default_instance_;
class QueryWasmxParamsRequest;
struct QueryWasmxParamsRequestDefaultTypeInternal;
extern QueryWasmxParamsRequestDefaultTypeInternal _QueryWasmxParamsRequest_default_instance_;
class QueryWasmxParamsResponse;
struct QueryWasmxParamsResponseDefaultTypeInternal;
extern QueryWasmxParamsResponseDefaultTypeInternal _QueryWasmxParamsResponse_default_instance_;
}  // namespace v1
}  // namespace wasmx
}  // namespace injective
PROTOBUF_NAMESPACE_OPEN
template <>
::injective::wasmx::v1::QueryContractRegistrationInfoRequest* Arena::CreateMaybeMessage<::injective::wasmx::v1::QueryContractRegistrationInfoRequest>(Arena*);
template <>
::injective::wasmx::v1::QueryContractRegistrationInfoResponse* Arena::CreateMaybeMessage<::injective::wasmx::v1::QueryContractRegistrationInfoResponse>(Arena*);
template <>
::injective::wasmx::v1::QueryModuleStateRequest* Arena::CreateMaybeMessage<::injective::wasmx::v1::QueryModuleStateRequest>(Arena*);
template <>
::injective::wasmx::v1::QueryModuleStateResponse* Arena::CreateMaybeMessage<::injective::wasmx::v1::QueryModuleStateResponse>(Arena*);
template <>
::injective::wasmx::v1::QueryWasmxParamsRequest* Arena::CreateMaybeMessage<::injective::wasmx::v1::QueryWasmxParamsRequest>(Arena*);
template <>
::injective::wasmx::v1::QueryWasmxParamsResponse* Arena::CreateMaybeMessage<::injective::wasmx::v1::QueryWasmxParamsResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace injective {
namespace wasmx {
namespace v1 {

// ===================================================================


// -------------------------------------------------------------------

class QueryWasmxParamsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:injective.wasmx.v1.QueryWasmxParamsRequest) */ {
 public:
  inline QueryWasmxParamsRequest() : QueryWasmxParamsRequest(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryWasmxParamsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryWasmxParamsRequest(const QueryWasmxParamsRequest& from);
  QueryWasmxParamsRequest(QueryWasmxParamsRequest&& from) noexcept
    : QueryWasmxParamsRequest() {
    *this = ::std::move(from);
  }

  inline QueryWasmxParamsRequest& operator=(const QueryWasmxParamsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryWasmxParamsRequest& operator=(QueryWasmxParamsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryWasmxParamsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryWasmxParamsRequest* internal_default_instance() {
    return reinterpret_cast<const QueryWasmxParamsRequest*>(
               &_QueryWasmxParamsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(QueryWasmxParamsRequest& a, QueryWasmxParamsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryWasmxParamsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryWasmxParamsRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryWasmxParamsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryWasmxParamsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const QueryWasmxParamsRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const QueryWasmxParamsRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.wasmx.v1.QueryWasmxParamsRequest";
  }
  protected:
  explicit QueryWasmxParamsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:injective.wasmx.v1.QueryWasmxParamsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_injective_2fwasmx_2fv1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryWasmxParamsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.wasmx.v1.QueryWasmxParamsResponse) */ {
 public:
  inline QueryWasmxParamsResponse() : QueryWasmxParamsResponse(nullptr) {}
  ~QueryWasmxParamsResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryWasmxParamsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryWasmxParamsResponse(const QueryWasmxParamsResponse& from);
  QueryWasmxParamsResponse(QueryWasmxParamsResponse&& from) noexcept
    : QueryWasmxParamsResponse() {
    *this = ::std::move(from);
  }

  inline QueryWasmxParamsResponse& operator=(const QueryWasmxParamsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryWasmxParamsResponse& operator=(QueryWasmxParamsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryWasmxParamsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryWasmxParamsResponse* internal_default_instance() {
    return reinterpret_cast<const QueryWasmxParamsResponse*>(
               &_QueryWasmxParamsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(QueryWasmxParamsResponse& a, QueryWasmxParamsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryWasmxParamsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryWasmxParamsResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryWasmxParamsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryWasmxParamsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryWasmxParamsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryWasmxParamsResponse& from) {
    QueryWasmxParamsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryWasmxParamsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.wasmx.v1.QueryWasmxParamsResponse";
  }
  protected:
  explicit QueryWasmxParamsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParamsFieldNumber = 1,
  };
  // .injective.wasmx.v1.Params params = 1 [json_name = "params", (.gogoproto.nullable) = false];
  bool has_params() const;
  void clear_params() ;
  const ::injective::wasmx::v1::Params& params() const;
  PROTOBUF_NODISCARD ::injective::wasmx::v1::Params* release_params();
  ::injective::wasmx::v1::Params* mutable_params();
  void set_allocated_params(::injective::wasmx::v1::Params* params);
  private:
  const ::injective::wasmx::v1::Params& _internal_params() const;
  ::injective::wasmx::v1::Params* _internal_mutable_params();
  public:
  void unsafe_arena_set_allocated_params(
      ::injective::wasmx::v1::Params* params);
  ::injective::wasmx::v1::Params* unsafe_arena_release_params();
  // @@protoc_insertion_point(class_scope:injective.wasmx.v1.QueryWasmxParamsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::injective::wasmx::v1::Params* params_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2fwasmx_2fv1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryModuleStateRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:injective.wasmx.v1.QueryModuleStateRequest) */ {
 public:
  inline QueryModuleStateRequest() : QueryModuleStateRequest(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryModuleStateRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryModuleStateRequest(const QueryModuleStateRequest& from);
  QueryModuleStateRequest(QueryModuleStateRequest&& from) noexcept
    : QueryModuleStateRequest() {
    *this = ::std::move(from);
  }

  inline QueryModuleStateRequest& operator=(const QueryModuleStateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryModuleStateRequest& operator=(QueryModuleStateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryModuleStateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryModuleStateRequest* internal_default_instance() {
    return reinterpret_cast<const QueryModuleStateRequest*>(
               &_QueryModuleStateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(QueryModuleStateRequest& a, QueryModuleStateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryModuleStateRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryModuleStateRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryModuleStateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryModuleStateRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const QueryModuleStateRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const QueryModuleStateRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.wasmx.v1.QueryModuleStateRequest";
  }
  protected:
  explicit QueryModuleStateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:injective.wasmx.v1.QueryModuleStateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_injective_2fwasmx_2fv1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryModuleStateResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.wasmx.v1.QueryModuleStateResponse) */ {
 public:
  inline QueryModuleStateResponse() : QueryModuleStateResponse(nullptr) {}
  ~QueryModuleStateResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryModuleStateResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryModuleStateResponse(const QueryModuleStateResponse& from);
  QueryModuleStateResponse(QueryModuleStateResponse&& from) noexcept
    : QueryModuleStateResponse() {
    *this = ::std::move(from);
  }

  inline QueryModuleStateResponse& operator=(const QueryModuleStateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryModuleStateResponse& operator=(QueryModuleStateResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryModuleStateResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryModuleStateResponse* internal_default_instance() {
    return reinterpret_cast<const QueryModuleStateResponse*>(
               &_QueryModuleStateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(QueryModuleStateResponse& a, QueryModuleStateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryModuleStateResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryModuleStateResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryModuleStateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryModuleStateResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryModuleStateResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryModuleStateResponse& from) {
    QueryModuleStateResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryModuleStateResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.wasmx.v1.QueryModuleStateResponse";
  }
  protected:
  explicit QueryModuleStateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStateFieldNumber = 1,
  };
  // .injective.wasmx.v1.GenesisState state = 1 [json_name = "state"];
  bool has_state() const;
  void clear_state() ;
  const ::injective::wasmx::v1::GenesisState& state() const;
  PROTOBUF_NODISCARD ::injective::wasmx::v1::GenesisState* release_state();
  ::injective::wasmx::v1::GenesisState* mutable_state();
  void set_allocated_state(::injective::wasmx::v1::GenesisState* state);
  private:
  const ::injective::wasmx::v1::GenesisState& _internal_state() const;
  ::injective::wasmx::v1::GenesisState* _internal_mutable_state();
  public:
  void unsafe_arena_set_allocated_state(
      ::injective::wasmx::v1::GenesisState* state);
  ::injective::wasmx::v1::GenesisState* unsafe_arena_release_state();
  // @@protoc_insertion_point(class_scope:injective.wasmx.v1.QueryModuleStateResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::injective::wasmx::v1::GenesisState* state_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2fwasmx_2fv1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryContractRegistrationInfoRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.wasmx.v1.QueryContractRegistrationInfoRequest) */ {
 public:
  inline QueryContractRegistrationInfoRequest() : QueryContractRegistrationInfoRequest(nullptr) {}
  ~QueryContractRegistrationInfoRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryContractRegistrationInfoRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryContractRegistrationInfoRequest(const QueryContractRegistrationInfoRequest& from);
  QueryContractRegistrationInfoRequest(QueryContractRegistrationInfoRequest&& from) noexcept
    : QueryContractRegistrationInfoRequest() {
    *this = ::std::move(from);
  }

  inline QueryContractRegistrationInfoRequest& operator=(const QueryContractRegistrationInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryContractRegistrationInfoRequest& operator=(QueryContractRegistrationInfoRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryContractRegistrationInfoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryContractRegistrationInfoRequest* internal_default_instance() {
    return reinterpret_cast<const QueryContractRegistrationInfoRequest*>(
               &_QueryContractRegistrationInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(QueryContractRegistrationInfoRequest& a, QueryContractRegistrationInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryContractRegistrationInfoRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryContractRegistrationInfoRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryContractRegistrationInfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryContractRegistrationInfoRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryContractRegistrationInfoRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryContractRegistrationInfoRequest& from) {
    QueryContractRegistrationInfoRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryContractRegistrationInfoRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.wasmx.v1.QueryContractRegistrationInfoRequest";
  }
  protected:
  explicit QueryContractRegistrationInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContractAddressFieldNumber = 1,
  };
  // string contract_address = 1 [json_name = "contractAddress"];
  void clear_contract_address() ;
  const std::string& contract_address() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_contract_address(Arg_&& arg, Args_... args);
  std::string* mutable_contract_address();
  PROTOBUF_NODISCARD std::string* release_contract_address();
  void set_allocated_contract_address(std::string* ptr);

  private:
  const std::string& _internal_contract_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_contract_address(
      const std::string& value);
  std::string* _internal_mutable_contract_address();

  public:
  // @@protoc_insertion_point(class_scope:injective.wasmx.v1.QueryContractRegistrationInfoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contract_address_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2fwasmx_2fv1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryContractRegistrationInfoResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.wasmx.v1.QueryContractRegistrationInfoResponse) */ {
 public:
  inline QueryContractRegistrationInfoResponse() : QueryContractRegistrationInfoResponse(nullptr) {}
  ~QueryContractRegistrationInfoResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryContractRegistrationInfoResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryContractRegistrationInfoResponse(const QueryContractRegistrationInfoResponse& from);
  QueryContractRegistrationInfoResponse(QueryContractRegistrationInfoResponse&& from) noexcept
    : QueryContractRegistrationInfoResponse() {
    *this = ::std::move(from);
  }

  inline QueryContractRegistrationInfoResponse& operator=(const QueryContractRegistrationInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryContractRegistrationInfoResponse& operator=(QueryContractRegistrationInfoResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryContractRegistrationInfoResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryContractRegistrationInfoResponse* internal_default_instance() {
    return reinterpret_cast<const QueryContractRegistrationInfoResponse*>(
               &_QueryContractRegistrationInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(QueryContractRegistrationInfoResponse& a, QueryContractRegistrationInfoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryContractRegistrationInfoResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryContractRegistrationInfoResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryContractRegistrationInfoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryContractRegistrationInfoResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryContractRegistrationInfoResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryContractRegistrationInfoResponse& from) {
    QueryContractRegistrationInfoResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryContractRegistrationInfoResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.wasmx.v1.QueryContractRegistrationInfoResponse";
  }
  protected:
  explicit QueryContractRegistrationInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContractFieldNumber = 1,
  };
  // .injective.wasmx.v1.RegisteredContract contract = 1 [json_name = "contract"];
  bool has_contract() const;
  void clear_contract() ;
  const ::injective::wasmx::v1::RegisteredContract& contract() const;
  PROTOBUF_NODISCARD ::injective::wasmx::v1::RegisteredContract* release_contract();
  ::injective::wasmx::v1::RegisteredContract* mutable_contract();
  void set_allocated_contract(::injective::wasmx::v1::RegisteredContract* contract);
  private:
  const ::injective::wasmx::v1::RegisteredContract& _internal_contract() const;
  ::injective::wasmx::v1::RegisteredContract* _internal_mutable_contract();
  public:
  void unsafe_arena_set_allocated_contract(
      ::injective::wasmx::v1::RegisteredContract* contract);
  ::injective::wasmx::v1::RegisteredContract* unsafe_arena_release_contract();
  // @@protoc_insertion_point(class_scope:injective.wasmx.v1.QueryContractRegistrationInfoResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::injective::wasmx::v1::RegisteredContract* contract_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2fwasmx_2fv1_2fquery_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// QueryWasmxParamsRequest

// -------------------------------------------------------------------

// QueryWasmxParamsResponse

// .injective.wasmx.v1.Params params = 1 [json_name = "params", (.gogoproto.nullable) = false];
inline bool QueryWasmxParamsResponse::has_params() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.params_ != nullptr);
  return value;
}
inline const ::injective::wasmx::v1::Params& QueryWasmxParamsResponse::_internal_params() const {
  const ::injective::wasmx::v1::Params* p = _impl_.params_;
  return p != nullptr ? *p : reinterpret_cast<const ::injective::wasmx::v1::Params&>(
      ::injective::wasmx::v1::_Params_default_instance_);
}
inline const ::injective::wasmx::v1::Params& QueryWasmxParamsResponse::params() const {
  // @@protoc_insertion_point(field_get:injective.wasmx.v1.QueryWasmxParamsResponse.params)
  return _internal_params();
}
inline void QueryWasmxParamsResponse::unsafe_arena_set_allocated_params(
    ::injective::wasmx::v1::Params* params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.params_);
  }
  _impl_.params_ = params;
  if (params) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:injective.wasmx.v1.QueryWasmxParamsResponse.params)
}
inline ::injective::wasmx::v1::Params* QueryWasmxParamsResponse::release_params() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::injective::wasmx::v1::Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::injective::wasmx::v1::Params* QueryWasmxParamsResponse::unsafe_arena_release_params() {
  // @@protoc_insertion_point(field_release:injective.wasmx.v1.QueryWasmxParamsResponse.params)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::injective::wasmx::v1::Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
  return temp;
}
inline ::injective::wasmx::v1::Params* QueryWasmxParamsResponse::_internal_mutable_params() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.params_ == nullptr) {
    auto* p = CreateMaybeMessage<::injective::wasmx::v1::Params>(GetArenaForAllocation());
    _impl_.params_ = p;
  }
  return _impl_.params_;
}
inline ::injective::wasmx::v1::Params* QueryWasmxParamsResponse::mutable_params() {
  ::injective::wasmx::v1::Params* _msg = _internal_mutable_params();
  // @@protoc_insertion_point(field_mutable:injective.wasmx.v1.QueryWasmxParamsResponse.params)
  return _msg;
}
inline void QueryWasmxParamsResponse::set_allocated_params(::injective::wasmx::v1::Params* params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.params_);
  }
  if (params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(params));
    if (message_arena != submessage_arena) {
      params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, params, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.params_ = params;
  // @@protoc_insertion_point(field_set_allocated:injective.wasmx.v1.QueryWasmxParamsResponse.params)
}

// -------------------------------------------------------------------

// QueryModuleStateRequest

// -------------------------------------------------------------------

// QueryModuleStateResponse

// .injective.wasmx.v1.GenesisState state = 1 [json_name = "state"];
inline bool QueryModuleStateResponse::has_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.state_ != nullptr);
  return value;
}
inline const ::injective::wasmx::v1::GenesisState& QueryModuleStateResponse::_internal_state() const {
  const ::injective::wasmx::v1::GenesisState* p = _impl_.state_;
  return p != nullptr ? *p : reinterpret_cast<const ::injective::wasmx::v1::GenesisState&>(
      ::injective::wasmx::v1::_GenesisState_default_instance_);
}
inline const ::injective::wasmx::v1::GenesisState& QueryModuleStateResponse::state() const {
  // @@protoc_insertion_point(field_get:injective.wasmx.v1.QueryModuleStateResponse.state)
  return _internal_state();
}
inline void QueryModuleStateResponse::unsafe_arena_set_allocated_state(
    ::injective::wasmx::v1::GenesisState* state) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.state_);
  }
  _impl_.state_ = state;
  if (state) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:injective.wasmx.v1.QueryModuleStateResponse.state)
}
inline ::injective::wasmx::v1::GenesisState* QueryModuleStateResponse::release_state() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::injective::wasmx::v1::GenesisState* temp = _impl_.state_;
  _impl_.state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::injective::wasmx::v1::GenesisState* QueryModuleStateResponse::unsafe_arena_release_state() {
  // @@protoc_insertion_point(field_release:injective.wasmx.v1.QueryModuleStateResponse.state)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::injective::wasmx::v1::GenesisState* temp = _impl_.state_;
  _impl_.state_ = nullptr;
  return temp;
}
inline ::injective::wasmx::v1::GenesisState* QueryModuleStateResponse::_internal_mutable_state() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.state_ == nullptr) {
    auto* p = CreateMaybeMessage<::injective::wasmx::v1::GenesisState>(GetArenaForAllocation());
    _impl_.state_ = p;
  }
  return _impl_.state_;
}
inline ::injective::wasmx::v1::GenesisState* QueryModuleStateResponse::mutable_state() {
  ::injective::wasmx::v1::GenesisState* _msg = _internal_mutable_state();
  // @@protoc_insertion_point(field_mutable:injective.wasmx.v1.QueryModuleStateResponse.state)
  return _msg;
}
inline void QueryModuleStateResponse::set_allocated_state(::injective::wasmx::v1::GenesisState* state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.state_);
  }
  if (state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(state));
    if (message_arena != submessage_arena) {
      state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.state_ = state;
  // @@protoc_insertion_point(field_set_allocated:injective.wasmx.v1.QueryModuleStateResponse.state)
}

// -------------------------------------------------------------------

// QueryContractRegistrationInfoRequest

// string contract_address = 1 [json_name = "contractAddress"];
inline void QueryContractRegistrationInfoRequest::clear_contract_address() {
  _impl_.contract_address_.ClearToEmpty();
}
inline const std::string& QueryContractRegistrationInfoRequest::contract_address() const {
  // @@protoc_insertion_point(field_get:injective.wasmx.v1.QueryContractRegistrationInfoRequest.contract_address)
  return _internal_contract_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryContractRegistrationInfoRequest::set_contract_address(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.contract_address_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.wasmx.v1.QueryContractRegistrationInfoRequest.contract_address)
}
inline std::string* QueryContractRegistrationInfoRequest::mutable_contract_address() {
  std::string* _s = _internal_mutable_contract_address();
  // @@protoc_insertion_point(field_mutable:injective.wasmx.v1.QueryContractRegistrationInfoRequest.contract_address)
  return _s;
}
inline const std::string& QueryContractRegistrationInfoRequest::_internal_contract_address() const {
  return _impl_.contract_address_.Get();
}
inline void QueryContractRegistrationInfoRequest::_internal_set_contract_address(const std::string& value) {
  ;


  _impl_.contract_address_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryContractRegistrationInfoRequest::_internal_mutable_contract_address() {
  ;
  return _impl_.contract_address_.Mutable( GetArenaForAllocation());
}
inline std::string* QueryContractRegistrationInfoRequest::release_contract_address() {
  // @@protoc_insertion_point(field_release:injective.wasmx.v1.QueryContractRegistrationInfoRequest.contract_address)
  return _impl_.contract_address_.Release();
}
inline void QueryContractRegistrationInfoRequest::set_allocated_contract_address(std::string* value) {
  _impl_.contract_address_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.contract_address_.IsDefault()) {
          _impl_.contract_address_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.wasmx.v1.QueryContractRegistrationInfoRequest.contract_address)
}

// -------------------------------------------------------------------

// QueryContractRegistrationInfoResponse

// .injective.wasmx.v1.RegisteredContract contract = 1 [json_name = "contract"];
inline bool QueryContractRegistrationInfoResponse::has_contract() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.contract_ != nullptr);
  return value;
}
inline const ::injective::wasmx::v1::RegisteredContract& QueryContractRegistrationInfoResponse::_internal_contract() const {
  const ::injective::wasmx::v1::RegisteredContract* p = _impl_.contract_;
  return p != nullptr ? *p : reinterpret_cast<const ::injective::wasmx::v1::RegisteredContract&>(
      ::injective::wasmx::v1::_RegisteredContract_default_instance_);
}
inline const ::injective::wasmx::v1::RegisteredContract& QueryContractRegistrationInfoResponse::contract() const {
  // @@protoc_insertion_point(field_get:injective.wasmx.v1.QueryContractRegistrationInfoResponse.contract)
  return _internal_contract();
}
inline void QueryContractRegistrationInfoResponse::unsafe_arena_set_allocated_contract(
    ::injective::wasmx::v1::RegisteredContract* contract) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.contract_);
  }
  _impl_.contract_ = contract;
  if (contract) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:injective.wasmx.v1.QueryContractRegistrationInfoResponse.contract)
}
inline ::injective::wasmx::v1::RegisteredContract* QueryContractRegistrationInfoResponse::release_contract() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::injective::wasmx::v1::RegisteredContract* temp = _impl_.contract_;
  _impl_.contract_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::injective::wasmx::v1::RegisteredContract* QueryContractRegistrationInfoResponse::unsafe_arena_release_contract() {
  // @@protoc_insertion_point(field_release:injective.wasmx.v1.QueryContractRegistrationInfoResponse.contract)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::injective::wasmx::v1::RegisteredContract* temp = _impl_.contract_;
  _impl_.contract_ = nullptr;
  return temp;
}
inline ::injective::wasmx::v1::RegisteredContract* QueryContractRegistrationInfoResponse::_internal_mutable_contract() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.contract_ == nullptr) {
    auto* p = CreateMaybeMessage<::injective::wasmx::v1::RegisteredContract>(GetArenaForAllocation());
    _impl_.contract_ = p;
  }
  return _impl_.contract_;
}
inline ::injective::wasmx::v1::RegisteredContract* QueryContractRegistrationInfoResponse::mutable_contract() {
  ::injective::wasmx::v1::RegisteredContract* _msg = _internal_mutable_contract();
  // @@protoc_insertion_point(field_mutable:injective.wasmx.v1.QueryContractRegistrationInfoResponse.contract)
  return _msg;
}
inline void QueryContractRegistrationInfoResponse::set_allocated_contract(::injective::wasmx::v1::RegisteredContract* contract) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.contract_);
  }
  if (contract) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(contract));
    if (message_arena != submessage_arena) {
      contract = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, contract, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.contract_ = contract;
  // @@protoc_insertion_point(field_set_allocated:injective.wasmx.v1.QueryContractRegistrationInfoResponse.contract)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace wasmx
}  // namespace injective


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_injective_2fwasmx_2fv1_2fquery_2eproto_2epb_2eh

// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: injective/wasmx/v1/query.proto
#ifndef GRPC_injective_2fwasmx_2fv1_2fquery_2eproto__INCLUDED
#define GRPC_injective_2fwasmx_2fv1_2fquery_2eproto__INCLUDED

#include "injective/wasmx/v1/query.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace injective {
namespace wasmx {
namespace v1 {

// Query defines the gRPC querier service.
class Query final {
 public:
  static constexpr char const* service_full_name() {
    return "injective.wasmx.v1.Query";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Retrieves wasmx params
    virtual ::grpc::Status WasmxParams(::grpc::ClientContext* context, const ::injective::wasmx::v1::QueryWasmxParamsRequest& request, ::injective::wasmx::v1::QueryWasmxParamsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::wasmx::v1::QueryWasmxParamsResponse>> AsyncWasmxParams(::grpc::ClientContext* context, const ::injective::wasmx::v1::QueryWasmxParamsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::wasmx::v1::QueryWasmxParamsResponse>>(AsyncWasmxParamsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::wasmx::v1::QueryWasmxParamsResponse>> PrepareAsyncWasmxParams(::grpc::ClientContext* context, const ::injective::wasmx::v1::QueryWasmxParamsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::wasmx::v1::QueryWasmxParamsResponse>>(PrepareAsyncWasmxParamsRaw(context, request, cq));
    }
    // Retrieves contract registration info
    virtual ::grpc::Status ContractRegistrationInfo(::grpc::ClientContext* context, const ::injective::wasmx::v1::QueryContractRegistrationInfoRequest& request, ::injective::wasmx::v1::QueryContractRegistrationInfoResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::wasmx::v1::QueryContractRegistrationInfoResponse>> AsyncContractRegistrationInfo(::grpc::ClientContext* context, const ::injective::wasmx::v1::QueryContractRegistrationInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::wasmx::v1::QueryContractRegistrationInfoResponse>>(AsyncContractRegistrationInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::wasmx::v1::QueryContractRegistrationInfoResponse>> PrepareAsyncContractRegistrationInfo(::grpc::ClientContext* context, const ::injective::wasmx::v1::QueryContractRegistrationInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::wasmx::v1::QueryContractRegistrationInfoResponse>>(PrepareAsyncContractRegistrationInfoRaw(context, request, cq));
    }
    // Retrieves the entire wasmx module's state
    virtual ::grpc::Status WasmxModuleState(::grpc::ClientContext* context, const ::injective::wasmx::v1::QueryModuleStateRequest& request, ::injective::wasmx::v1::QueryModuleStateResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::wasmx::v1::QueryModuleStateResponse>> AsyncWasmxModuleState(::grpc::ClientContext* context, const ::injective::wasmx::v1::QueryModuleStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::wasmx::v1::QueryModuleStateResponse>>(AsyncWasmxModuleStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::wasmx::v1::QueryModuleStateResponse>> PrepareAsyncWasmxModuleState(::grpc::ClientContext* context, const ::injective::wasmx::v1::QueryModuleStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::wasmx::v1::QueryModuleStateResponse>>(PrepareAsyncWasmxModuleStateRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Retrieves wasmx params
      virtual void WasmxParams(::grpc::ClientContext* context, const ::injective::wasmx::v1::QueryWasmxParamsRequest* request, ::injective::wasmx::v1::QueryWasmxParamsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void WasmxParams(::grpc::ClientContext* context, const ::injective::wasmx::v1::QueryWasmxParamsRequest* request, ::injective::wasmx::v1::QueryWasmxParamsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Retrieves contract registration info
      virtual void ContractRegistrationInfo(::grpc::ClientContext* context, const ::injective::wasmx::v1::QueryContractRegistrationInfoRequest* request, ::injective::wasmx::v1::QueryContractRegistrationInfoResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ContractRegistrationInfo(::grpc::ClientContext* context, const ::injective::wasmx::v1::QueryContractRegistrationInfoRequest* request, ::injective::wasmx::v1::QueryContractRegistrationInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Retrieves the entire wasmx module's state
      virtual void WasmxModuleState(::grpc::ClientContext* context, const ::injective::wasmx::v1::QueryModuleStateRequest* request, ::injective::wasmx::v1::QueryModuleStateResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void WasmxModuleState(::grpc::ClientContext* context, const ::injective::wasmx::v1::QueryModuleStateRequest* request, ::injective::wasmx::v1::QueryModuleStateResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::wasmx::v1::QueryWasmxParamsResponse>* AsyncWasmxParamsRaw(::grpc::ClientContext* context, const ::injective::wasmx::v1::QueryWasmxParamsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::wasmx::v1::QueryWasmxParamsResponse>* PrepareAsyncWasmxParamsRaw(::grpc::ClientContext* context, const ::injective::wasmx::v1::QueryWasmxParamsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::wasmx::v1::QueryContractRegistrationInfoResponse>* AsyncContractRegistrationInfoRaw(::grpc::ClientContext* context, const ::injective::wasmx::v1::QueryContractRegistrationInfoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::wasmx::v1::QueryContractRegistrationInfoResponse>* PrepareAsyncContractRegistrationInfoRaw(::grpc::ClientContext* context, const ::injective::wasmx::v1::QueryContractRegistrationInfoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::wasmx::v1::QueryModuleStateResponse>* AsyncWasmxModuleStateRaw(::grpc::ClientContext* context, const ::injective::wasmx::v1::QueryModuleStateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::wasmx::v1::QueryModuleStateResponse>* PrepareAsyncWasmxModuleStateRaw(::grpc::ClientContext* context, const ::injective::wasmx::v1::QueryModuleStateRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status WasmxParams(::grpc::ClientContext* context, const ::injective::wasmx::v1::QueryWasmxParamsRequest& request, ::injective::wasmx::v1::QueryWasmxParamsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::wasmx::v1::QueryWasmxParamsResponse>> AsyncWasmxParams(::grpc::ClientContext* context, const ::injective::wasmx::v1::QueryWasmxParamsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::wasmx::v1::QueryWasmxParamsResponse>>(AsyncWasmxParamsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::wasmx::v1::QueryWasmxParamsResponse>> PrepareAsyncWasmxParams(::grpc::ClientContext* context, const ::injective::wasmx::v1::QueryWasmxParamsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::wasmx::v1::QueryWasmxParamsResponse>>(PrepareAsyncWasmxParamsRaw(context, request, cq));
    }
    ::grpc::Status ContractRegistrationInfo(::grpc::ClientContext* context, const ::injective::wasmx::v1::QueryContractRegistrationInfoRequest& request, ::injective::wasmx::v1::QueryContractRegistrationInfoResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::wasmx::v1::QueryContractRegistrationInfoResponse>> AsyncContractRegistrationInfo(::grpc::ClientContext* context, const ::injective::wasmx::v1::QueryContractRegistrationInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::wasmx::v1::QueryContractRegistrationInfoResponse>>(AsyncContractRegistrationInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::wasmx::v1::QueryContractRegistrationInfoResponse>> PrepareAsyncContractRegistrationInfo(::grpc::ClientContext* context, const ::injective::wasmx::v1::QueryContractRegistrationInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::wasmx::v1::QueryContractRegistrationInfoResponse>>(PrepareAsyncContractRegistrationInfoRaw(context, request, cq));
    }
    ::grpc::Status WasmxModuleState(::grpc::ClientContext* context, const ::injective::wasmx::v1::QueryModuleStateRequest& request, ::injective::wasmx::v1::QueryModuleStateResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::wasmx::v1::QueryModuleStateResponse>> AsyncWasmxModuleState(::grpc::ClientContext* context, const ::injective::wasmx::v1::QueryModuleStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::wasmx::v1::QueryModuleStateResponse>>(AsyncWasmxModuleStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::wasmx::v1::QueryModuleStateResponse>> PrepareAsyncWasmxModuleState(::grpc::ClientContext* context, const ::injective::wasmx::v1::QueryModuleStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::wasmx::v1::QueryModuleStateResponse>>(PrepareAsyncWasmxModuleStateRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void WasmxParams(::grpc::ClientContext* context, const ::injective::wasmx::v1::QueryWasmxParamsRequest* request, ::injective::wasmx::v1::QueryWasmxParamsResponse* response, std::function<void(::grpc::Status)>) override;
      void WasmxParams(::grpc::ClientContext* context, const ::injective::wasmx::v1::QueryWasmxParamsRequest* request, ::injective::wasmx::v1::QueryWasmxParamsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ContractRegistrationInfo(::grpc::ClientContext* context, const ::injective::wasmx::v1::QueryContractRegistrationInfoRequest* request, ::injective::wasmx::v1::QueryContractRegistrationInfoResponse* response, std::function<void(::grpc::Status)>) override;
      void ContractRegistrationInfo(::grpc::ClientContext* context, const ::injective::wasmx::v1::QueryContractRegistrationInfoRequest* request, ::injective::wasmx::v1::QueryContractRegistrationInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void WasmxModuleState(::grpc::ClientContext* context, const ::injective::wasmx::v1::QueryModuleStateRequest* request, ::injective::wasmx::v1::QueryModuleStateResponse* response, std::function<void(::grpc::Status)>) override;
      void WasmxModuleState(::grpc::ClientContext* context, const ::injective::wasmx::v1::QueryModuleStateRequest* request, ::injective::wasmx::v1::QueryModuleStateResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::injective::wasmx::v1::QueryWasmxParamsResponse>* AsyncWasmxParamsRaw(::grpc::ClientContext* context, const ::injective::wasmx::v1::QueryWasmxParamsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::wasmx::v1::QueryWasmxParamsResponse>* PrepareAsyncWasmxParamsRaw(::grpc::ClientContext* context, const ::injective::wasmx::v1::QueryWasmxParamsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::wasmx::v1::QueryContractRegistrationInfoResponse>* AsyncContractRegistrationInfoRaw(::grpc::ClientContext* context, const ::injective::wasmx::v1::QueryContractRegistrationInfoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::wasmx::v1::QueryContractRegistrationInfoResponse>* PrepareAsyncContractRegistrationInfoRaw(::grpc::ClientContext* context, const ::injective::wasmx::v1::QueryContractRegistrationInfoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::wasmx::v1::QueryModuleStateResponse>* AsyncWasmxModuleStateRaw(::grpc::ClientContext* context, const ::injective::wasmx::v1::QueryModuleStateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::wasmx::v1::QueryModuleStateResponse>* PrepareAsyncWasmxModuleStateRaw(::grpc::ClientContext* context, const ::injective::wasmx::v1::QueryModuleStateRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_WasmxParams_;
    const ::grpc::internal::RpcMethod rpcmethod_ContractRegistrationInfo_;
    const ::grpc::internal::RpcMethod rpcmethod_WasmxModuleState_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Retrieves wasmx params
    virtual ::grpc::Status WasmxParams(::grpc::ServerContext* context, const ::injective::wasmx::v1::QueryWasmxParamsRequest* request, ::injective::wasmx::v1::QueryWasmxParamsResponse* response);
    // Retrieves contract registration info
    virtual ::grpc::Status ContractRegistrationInfo(::grpc::ServerContext* context, const ::injective::wasmx::v1::QueryContractRegistrationInfoRequest* request, ::injective::wasmx::v1::QueryContractRegistrationInfoResponse* response);
    // Retrieves the entire wasmx module's state
    virtual ::grpc::Status WasmxModuleState(::grpc::ServerContext* context, const ::injective::wasmx::v1::QueryModuleStateRequest* request, ::injective::wasmx::v1::QueryModuleStateResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_WasmxParams : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_WasmxParams() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_WasmxParams() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WasmxParams(::grpc::ServerContext* /*context*/, const ::injective::wasmx::v1::QueryWasmxParamsRequest* /*request*/, ::injective::wasmx::v1::QueryWasmxParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestWasmxParams(::grpc::ServerContext* context, ::injective::wasmx::v1::QueryWasmxParamsRequest* request, ::grpc::ServerAsyncResponseWriter< ::injective::wasmx::v1::QueryWasmxParamsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ContractRegistrationInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ContractRegistrationInfo() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_ContractRegistrationInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ContractRegistrationInfo(::grpc::ServerContext* /*context*/, const ::injective::wasmx::v1::QueryContractRegistrationInfoRequest* /*request*/, ::injective::wasmx::v1::QueryContractRegistrationInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestContractRegistrationInfo(::grpc::ServerContext* context, ::injective::wasmx::v1::QueryContractRegistrationInfoRequest* request, ::grpc::ServerAsyncResponseWriter< ::injective::wasmx::v1::QueryContractRegistrationInfoResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_WasmxModuleState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_WasmxModuleState() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_WasmxModuleState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WasmxModuleState(::grpc::ServerContext* /*context*/, const ::injective::wasmx::v1::QueryModuleStateRequest* /*request*/, ::injective::wasmx::v1::QueryModuleStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestWasmxModuleState(::grpc::ServerContext* context, ::injective::wasmx::v1::QueryModuleStateRequest* request, ::grpc::ServerAsyncResponseWriter< ::injective::wasmx::v1::QueryModuleStateResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_WasmxParams<WithAsyncMethod_ContractRegistrationInfo<WithAsyncMethod_WasmxModuleState<Service > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_WasmxParams : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_WasmxParams() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::injective::wasmx::v1::QueryWasmxParamsRequest, ::injective::wasmx::v1::QueryWasmxParamsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::injective::wasmx::v1::QueryWasmxParamsRequest* request, ::injective::wasmx::v1::QueryWasmxParamsResponse* response) { return this->WasmxParams(context, request, response); }));}
    void SetMessageAllocatorFor_WasmxParams(
        ::grpc::MessageAllocator< ::injective::wasmx::v1::QueryWasmxParamsRequest, ::injective::wasmx::v1::QueryWasmxParamsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::injective::wasmx::v1::QueryWasmxParamsRequest, ::injective::wasmx::v1::QueryWasmxParamsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_WasmxParams() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WasmxParams(::grpc::ServerContext* /*context*/, const ::injective::wasmx::v1::QueryWasmxParamsRequest* /*request*/, ::injective::wasmx::v1::QueryWasmxParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* WasmxParams(
      ::grpc::CallbackServerContext* /*context*/, const ::injective::wasmx::v1::QueryWasmxParamsRequest* /*request*/, ::injective::wasmx::v1::QueryWasmxParamsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ContractRegistrationInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ContractRegistrationInfo() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::injective::wasmx::v1::QueryContractRegistrationInfoRequest, ::injective::wasmx::v1::QueryContractRegistrationInfoResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::injective::wasmx::v1::QueryContractRegistrationInfoRequest* request, ::injective::wasmx::v1::QueryContractRegistrationInfoResponse* response) { return this->ContractRegistrationInfo(context, request, response); }));}
    void SetMessageAllocatorFor_ContractRegistrationInfo(
        ::grpc::MessageAllocator< ::injective::wasmx::v1::QueryContractRegistrationInfoRequest, ::injective::wasmx::v1::QueryContractRegistrationInfoResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::injective::wasmx::v1::QueryContractRegistrationInfoRequest, ::injective::wasmx::v1::QueryContractRegistrationInfoResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ContractRegistrationInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ContractRegistrationInfo(::grpc::ServerContext* /*context*/, const ::injective::wasmx::v1::QueryContractRegistrationInfoRequest* /*request*/, ::injective::wasmx::v1::QueryContractRegistrationInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ContractRegistrationInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::injective::wasmx::v1::QueryContractRegistrationInfoRequest* /*request*/, ::injective::wasmx::v1::QueryContractRegistrationInfoResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_WasmxModuleState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_WasmxModuleState() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::injective::wasmx::v1::QueryModuleStateRequest, ::injective::wasmx::v1::QueryModuleStateResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::injective::wasmx::v1::QueryModuleStateRequest* request, ::injective::wasmx::v1::QueryModuleStateResponse* response) { return this->WasmxModuleState(context, request, response); }));}
    void SetMessageAllocatorFor_WasmxModuleState(
        ::grpc::MessageAllocator< ::injective::wasmx::v1::QueryModuleStateRequest, ::injective::wasmx::v1::QueryModuleStateResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::injective::wasmx::v1::QueryModuleStateRequest, ::injective::wasmx::v1::QueryModuleStateResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_WasmxModuleState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WasmxModuleState(::grpc::ServerContext* /*context*/, const ::injective::wasmx::v1::QueryModuleStateRequest* /*request*/, ::injective::wasmx::v1::QueryModuleStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* WasmxModuleState(
      ::grpc::CallbackServerContext* /*context*/, const ::injective::wasmx::v1::QueryModuleStateRequest* /*request*/, ::injective::wasmx::v1::QueryModuleStateResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_WasmxParams<WithCallbackMethod_ContractRegistrationInfo<WithCallbackMethod_WasmxModuleState<Service > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_WasmxParams : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_WasmxParams() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_WasmxParams() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WasmxParams(::grpc::ServerContext* /*context*/, const ::injective::wasmx::v1::QueryWasmxParamsRequest* /*request*/, ::injective::wasmx::v1::QueryWasmxParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ContractRegistrationInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ContractRegistrationInfo() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_ContractRegistrationInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ContractRegistrationInfo(::grpc::ServerContext* /*context*/, const ::injective::wasmx::v1::QueryContractRegistrationInfoRequest* /*request*/, ::injective::wasmx::v1::QueryContractRegistrationInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_WasmxModuleState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_WasmxModuleState() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_WasmxModuleState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WasmxModuleState(::grpc::ServerContext* /*context*/, const ::injective::wasmx::v1::QueryModuleStateRequest* /*request*/, ::injective::wasmx::v1::QueryModuleStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_WasmxParams : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_WasmxParams() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_WasmxParams() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WasmxParams(::grpc::ServerContext* /*context*/, const ::injective::wasmx::v1::QueryWasmxParamsRequest* /*request*/, ::injective::wasmx::v1::QueryWasmxParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestWasmxParams(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ContractRegistrationInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ContractRegistrationInfo() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_ContractRegistrationInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ContractRegistrationInfo(::grpc::ServerContext* /*context*/, const ::injective::wasmx::v1::QueryContractRegistrationInfoRequest* /*request*/, ::injective::wasmx::v1::QueryContractRegistrationInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestContractRegistrationInfo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_WasmxModuleState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_WasmxModuleState() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_WasmxModuleState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WasmxModuleState(::grpc::ServerContext* /*context*/, const ::injective::wasmx::v1::QueryModuleStateRequest* /*request*/, ::injective::wasmx::v1::QueryModuleStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestWasmxModuleState(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_WasmxParams : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_WasmxParams() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->WasmxParams(context, request, response); }));
    }
    ~WithRawCallbackMethod_WasmxParams() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WasmxParams(::grpc::ServerContext* /*context*/, const ::injective::wasmx::v1::QueryWasmxParamsRequest* /*request*/, ::injective::wasmx::v1::QueryWasmxParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* WasmxParams(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ContractRegistrationInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ContractRegistrationInfo() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ContractRegistrationInfo(context, request, response); }));
    }
    ~WithRawCallbackMethod_ContractRegistrationInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ContractRegistrationInfo(::grpc::ServerContext* /*context*/, const ::injective::wasmx::v1::QueryContractRegistrationInfoRequest* /*request*/, ::injective::wasmx::v1::QueryContractRegistrationInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ContractRegistrationInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_WasmxModuleState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_WasmxModuleState() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->WasmxModuleState(context, request, response); }));
    }
    ~WithRawCallbackMethod_WasmxModuleState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WasmxModuleState(::grpc::ServerContext* /*context*/, const ::injective::wasmx::v1::QueryModuleStateRequest* /*request*/, ::injective::wasmx::v1::QueryModuleStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* WasmxModuleState(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_WasmxParams : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_WasmxParams() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::injective::wasmx::v1::QueryWasmxParamsRequest, ::injective::wasmx::v1::QueryWasmxParamsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::injective::wasmx::v1::QueryWasmxParamsRequest, ::injective::wasmx::v1::QueryWasmxParamsResponse>* streamer) {
                       return this->StreamedWasmxParams(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_WasmxParams() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status WasmxParams(::grpc::ServerContext* /*context*/, const ::injective::wasmx::v1::QueryWasmxParamsRequest* /*request*/, ::injective::wasmx::v1::QueryWasmxParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedWasmxParams(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::injective::wasmx::v1::QueryWasmxParamsRequest,::injective::wasmx::v1::QueryWasmxParamsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ContractRegistrationInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ContractRegistrationInfo() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::injective::wasmx::v1::QueryContractRegistrationInfoRequest, ::injective::wasmx::v1::QueryContractRegistrationInfoResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::injective::wasmx::v1::QueryContractRegistrationInfoRequest, ::injective::wasmx::v1::QueryContractRegistrationInfoResponse>* streamer) {
                       return this->StreamedContractRegistrationInfo(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ContractRegistrationInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ContractRegistrationInfo(::grpc::ServerContext* /*context*/, const ::injective::wasmx::v1::QueryContractRegistrationInfoRequest* /*request*/, ::injective::wasmx::v1::QueryContractRegistrationInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedContractRegistrationInfo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::injective::wasmx::v1::QueryContractRegistrationInfoRequest,::injective::wasmx::v1::QueryContractRegistrationInfoResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_WasmxModuleState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_WasmxModuleState() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::injective::wasmx::v1::QueryModuleStateRequest, ::injective::wasmx::v1::QueryModuleStateResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::injective::wasmx::v1::QueryModuleStateRequest, ::injective::wasmx::v1::QueryModuleStateResponse>* streamer) {
                       return this->StreamedWasmxModuleState(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_WasmxModuleState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status WasmxModuleState(::grpc::ServerContext* /*context*/, const ::injective::wasmx::v1::QueryModuleStateRequest* /*request*/, ::injective::wasmx::v1::QueryModuleStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedWasmxModuleState(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::injective::wasmx::v1::QueryModuleStateRequest,::injective::wasmx::v1::QueryModuleStateResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_WasmxParams<WithStreamedUnaryMethod_ContractRegistrationInfo<WithStreamedUnaryMethod_WasmxModuleState<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_WasmxParams<WithStreamedUnaryMethod_ContractRegistrationInfo<WithStreamedUnaryMethod_WasmxModuleState<Service > > > StreamedService;
};

}  // namespace v1
}  // namespace wasmx
}  // namespace injective


#endif  // GRPC_injective_2fwasmx_2fv1_2fquery_2eproto__INCLUDED

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: injective/wasmx/v1/genesis.proto

#include "injective/wasmx/v1/genesis.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace injective {
namespace wasmx {
namespace v1 {
template <typename>
PROTOBUF_CONSTEXPR RegisteredContractWithAddress::RegisteredContractWithAddress(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.address_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.registered_contract_)*/nullptr} {}
struct RegisteredContractWithAddressDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RegisteredContractWithAddressDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RegisteredContractWithAddressDefaultTypeInternal() {}
  union {
    RegisteredContractWithAddress _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RegisteredContractWithAddressDefaultTypeInternal _RegisteredContractWithAddress_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR GenesisState::GenesisState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.registered_contracts_)*/{}
  , /*decltype(_impl_.params_)*/nullptr} {}
struct GenesisStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GenesisStateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GenesisStateDefaultTypeInternal() {}
  union {
    GenesisState _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GenesisStateDefaultTypeInternal _GenesisState_default_instance_;
}  // namespace v1
}  // namespace wasmx
}  // namespace injective
static ::_pb::Metadata file_level_metadata_injective_2fwasmx_2fv1_2fgenesis_2eproto[2];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_injective_2fwasmx_2fv1_2fgenesis_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_injective_2fwasmx_2fv1_2fgenesis_2eproto = nullptr;
const ::uint32_t TableStruct_injective_2fwasmx_2fv1_2fgenesis_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::injective::wasmx::v1::RegisteredContractWithAddress, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::injective::wasmx::v1::RegisteredContractWithAddress, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::wasmx::v1::RegisteredContractWithAddress, _impl_.address_),
    PROTOBUF_FIELD_OFFSET(::injective::wasmx::v1::RegisteredContractWithAddress, _impl_.registered_contract_),
    ~0u,
    0,
    PROTOBUF_FIELD_OFFSET(::injective::wasmx::v1::GenesisState, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::injective::wasmx::v1::GenesisState, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::wasmx::v1::GenesisState, _impl_.params_),
    PROTOBUF_FIELD_OFFSET(::injective::wasmx::v1::GenesisState, _impl_.registered_contracts_),
    0,
    ~0u,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 10, -1, sizeof(::injective::wasmx::v1::RegisteredContractWithAddress)},
        { 12, 22, -1, sizeof(::injective::wasmx::v1::GenesisState)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::injective::wasmx::v1::_RegisteredContractWithAddress_default_instance_._instance,
    &::injective::wasmx::v1::_GenesisState_default_instance_._instance,
};
const char descriptor_table_protodef_injective_2fwasmx_2fv1_2fgenesis_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n injective/wasmx/v1/genesis.proto\022\022inje"
    "ctive.wasmx.v1\032\036injective/wasmx/v1/wasmx"
    ".proto\032\024gogoproto/gogo.proto\"\222\001\n\035Registe"
    "redContractWithAddress\022\030\n\007address\030\001 \001(\tR"
    "\007address\022W\n\023registered_contract\030\002 \001(\0132&."
    "injective.wasmx.v1.RegisteredContractR\022r"
    "egisteredContract\"\264\001\n\014GenesisState\0228\n\006pa"
    "rams\030\001 \001(\0132\032.injective.wasmx.v1.ParamsB\004"
    "\310\336\037\000R\006params\022j\n\024registered_contracts\030\002 \003"
    "(\01321.injective.wasmx.v1.RegisteredContra"
    "ctWithAddressB\004\310\336\037\000R\023registeredContracts"
    "B\335\001\n\026com.injective.wasmx.v1B\014GenesisProt"
    "oP\001ZKgithub.com/InjectiveLabs/injective-"
    "core/injective-chain/modules/wasmx/types"
    "\242\002\003IWX\252\002\022Injective.Wasmx.V1\312\002\022Injective\\"
    "Wasmx\\V1\342\002\036Injective\\Wasmx\\V1\\GPBMetadat"
    "a\352\002\024Injective::Wasmx::V1b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_injective_2fwasmx_2fv1_2fgenesis_2eproto_deps[2] =
    {
        &::descriptor_table_gogoproto_2fgogo_2eproto,
        &::descriptor_table_injective_2fwasmx_2fv1_2fwasmx_2eproto,
};
static ::absl::once_flag descriptor_table_injective_2fwasmx_2fv1_2fgenesis_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_injective_2fwasmx_2fv1_2fgenesis_2eproto = {
    false,
    false,
    672,
    descriptor_table_protodef_injective_2fwasmx_2fv1_2fgenesis_2eproto,
    "injective/wasmx/v1/genesis.proto",
    &descriptor_table_injective_2fwasmx_2fv1_2fgenesis_2eproto_once,
    descriptor_table_injective_2fwasmx_2fv1_2fgenesis_2eproto_deps,
    2,
    2,
    schemas,
    file_default_instances,
    TableStruct_injective_2fwasmx_2fv1_2fgenesis_2eproto::offsets,
    file_level_metadata_injective_2fwasmx_2fv1_2fgenesis_2eproto,
    file_level_enum_descriptors_injective_2fwasmx_2fv1_2fgenesis_2eproto,
    file_level_service_descriptors_injective_2fwasmx_2fv1_2fgenesis_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_injective_2fwasmx_2fv1_2fgenesis_2eproto_getter() {
  return &descriptor_table_injective_2fwasmx_2fv1_2fgenesis_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_injective_2fwasmx_2fv1_2fgenesis_2eproto(&descriptor_table_injective_2fwasmx_2fv1_2fgenesis_2eproto);
namespace injective {
namespace wasmx {
namespace v1 {
// ===================================================================

class RegisteredContractWithAddress::_Internal {
 public:
  using HasBits = decltype(std::declval<RegisteredContractWithAddress>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(RegisteredContractWithAddress, _impl_._has_bits_);
  static const ::injective::wasmx::v1::RegisteredContract& registered_contract(const RegisteredContractWithAddress* msg);
  static void set_has_registered_contract(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::injective::wasmx::v1::RegisteredContract&
RegisteredContractWithAddress::_Internal::registered_contract(const RegisteredContractWithAddress* msg) {
  return *msg->_impl_.registered_contract_;
}
void RegisteredContractWithAddress::clear_registered_contract() {
  if (_impl_.registered_contract_ != nullptr) _impl_.registered_contract_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
RegisteredContractWithAddress::RegisteredContractWithAddress(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.wasmx.v1.RegisteredContractWithAddress)
}
RegisteredContractWithAddress::RegisteredContractWithAddress(const RegisteredContractWithAddress& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RegisteredContractWithAddress* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.address_) {}

    , decltype(_impl_.registered_contract_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_address().empty()) {
    _this->_impl_.address_.Set(from._internal_address(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.registered_contract_ = new ::injective::wasmx::v1::RegisteredContract(*from._impl_.registered_contract_);
  }
  // @@protoc_insertion_point(copy_constructor:injective.wasmx.v1.RegisteredContractWithAddress)
}

inline void RegisteredContractWithAddress::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.address_) {}

    , decltype(_impl_.registered_contract_){nullptr}
  };
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RegisteredContractWithAddress::~RegisteredContractWithAddress() {
  // @@protoc_insertion_point(destructor:injective.wasmx.v1.RegisteredContractWithAddress)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RegisteredContractWithAddress::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.address_.Destroy();
  if (this != internal_default_instance()) delete _impl_.registered_contract_;
}

void RegisteredContractWithAddress::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RegisteredContractWithAddress::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.wasmx.v1.RegisteredContractWithAddress)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.address_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.registered_contract_ != nullptr);
    _impl_.registered_contract_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegisteredContractWithAddress::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string address = 1 [json_name = "address"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.wasmx.v1.RegisteredContractWithAddress.address"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .injective.wasmx.v1.RegisteredContract registered_contract = 2 [json_name = "registeredContract"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_registered_contract(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* RegisteredContractWithAddress::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.wasmx.v1.RegisteredContractWithAddress)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1 [json_name = "address"];
  if (!this->_internal_address().empty()) {
    const std::string& _s = this->_internal_address();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.wasmx.v1.RegisteredContractWithAddress.address");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .injective.wasmx.v1.RegisteredContract registered_contract = 2 [json_name = "registeredContract"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::registered_contract(this),
        _Internal::registered_contract(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.wasmx.v1.RegisteredContractWithAddress)
  return target;
}

::size_t RegisteredContractWithAddress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.wasmx.v1.RegisteredContractWithAddress)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 1 [json_name = "address"];
  if (!this->_internal_address().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_address());
  }

  // .injective.wasmx.v1.RegisteredContract registered_contract = 2 [json_name = "registeredContract"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.registered_contract_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RegisteredContractWithAddress::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RegisteredContractWithAddress::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RegisteredContractWithAddress::GetClassData() const { return &_class_data_; }


void RegisteredContractWithAddress::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RegisteredContractWithAddress*>(&to_msg);
  auto& from = static_cast<const RegisteredContractWithAddress&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.wasmx.v1.RegisteredContractWithAddress)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_address().empty()) {
    _this->_internal_set_address(from._internal_address());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_registered_contract()->::injective::wasmx::v1::RegisteredContract::MergeFrom(
        from._internal_registered_contract());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RegisteredContractWithAddress::CopyFrom(const RegisteredContractWithAddress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.wasmx.v1.RegisteredContractWithAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisteredContractWithAddress::IsInitialized() const {
  return true;
}

void RegisteredContractWithAddress::InternalSwap(RegisteredContractWithAddress* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.address_, lhs_arena,
                                       &other->_impl_.address_, rhs_arena);
  swap(_impl_.registered_contract_, other->_impl_.registered_contract_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RegisteredContractWithAddress::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fwasmx_2fv1_2fgenesis_2eproto_getter, &descriptor_table_injective_2fwasmx_2fv1_2fgenesis_2eproto_once,
      file_level_metadata_injective_2fwasmx_2fv1_2fgenesis_2eproto[0]);
}
// ===================================================================

class GenesisState::_Internal {
 public:
  using HasBits = decltype(std::declval<GenesisState>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GenesisState, _impl_._has_bits_);
  static const ::injective::wasmx::v1::Params& params(const GenesisState* msg);
  static void set_has_params(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::injective::wasmx::v1::Params&
GenesisState::_Internal::params(const GenesisState* msg) {
  return *msg->_impl_.params_;
}
void GenesisState::clear_params() {
  if (_impl_.params_ != nullptr) _impl_.params_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
GenesisState::GenesisState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.wasmx.v1.GenesisState)
}
GenesisState::GenesisState(const GenesisState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GenesisState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.registered_contracts_){from._impl_.registered_contracts_}
    , decltype(_impl_.params_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.params_ = new ::injective::wasmx::v1::Params(*from._impl_.params_);
  }
  // @@protoc_insertion_point(copy_constructor:injective.wasmx.v1.GenesisState)
}

inline void GenesisState::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.registered_contracts_){arena}
    , decltype(_impl_.params_){nullptr}
  };
}

GenesisState::~GenesisState() {
  // @@protoc_insertion_point(destructor:injective.wasmx.v1.GenesisState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GenesisState::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_registered_contracts()->~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.params_;
}

void GenesisState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GenesisState::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.wasmx.v1.GenesisState)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_registered_contracts()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.params_ != nullptr);
    _impl_.params_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GenesisState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .injective.wasmx.v1.Params params = 1 [json_name = "params", (.gogoproto.nullable) = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_params(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .injective.wasmx.v1.RegisteredContractWithAddress registered_contracts = 2 [json_name = "registeredContracts", (.gogoproto.nullable) = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_registered_contracts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GenesisState::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.wasmx.v1.GenesisState)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .injective.wasmx.v1.Params params = 1 [json_name = "params", (.gogoproto.nullable) = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::params(this),
        _Internal::params(this).GetCachedSize(), target, stream);
  }

  // repeated .injective.wasmx.v1.RegisteredContractWithAddress registered_contracts = 2 [json_name = "registeredContracts", (.gogoproto.nullable) = false];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_registered_contracts_size()); i < n; i++) {
    const auto& repfield = this->_internal_registered_contracts(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.wasmx.v1.GenesisState)
  return target;
}

::size_t GenesisState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.wasmx.v1.GenesisState)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .injective.wasmx.v1.RegisteredContractWithAddress registered_contracts = 2 [json_name = "registeredContracts", (.gogoproto.nullable) = false];
  total_size += 1UL * this->_internal_registered_contracts_size();
  for (const auto& msg : this->_internal_registered_contracts()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .injective.wasmx.v1.Params params = 1 [json_name = "params", (.gogoproto.nullable) = false];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.params_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GenesisState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GenesisState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GenesisState::GetClassData() const { return &_class_data_; }


void GenesisState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GenesisState*>(&to_msg);
  auto& from = static_cast<const GenesisState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.wasmx.v1.GenesisState)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_registered_contracts()->MergeFrom(from._internal_registered_contracts());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_params()->::injective::wasmx::v1::Params::MergeFrom(
        from._internal_params());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GenesisState::CopyFrom(const GenesisState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.wasmx.v1.GenesisState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenesisState::IsInitialized() const {
  return true;
}

void GenesisState::InternalSwap(GenesisState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_registered_contracts()->InternalSwap(other->_internal_mutable_registered_contracts());
  swap(_impl_.params_, other->_impl_.params_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GenesisState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fwasmx_2fv1_2fgenesis_2eproto_getter, &descriptor_table_injective_2fwasmx_2fv1_2fgenesis_2eproto_once,
      file_level_metadata_injective_2fwasmx_2fv1_2fgenesis_2eproto[1]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace wasmx
}  // namespace injective
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::injective::wasmx::v1::RegisteredContractWithAddress*
Arena::CreateMaybeMessage< ::injective::wasmx::v1::RegisteredContractWithAddress >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::wasmx::v1::RegisteredContractWithAddress >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::wasmx::v1::GenesisState*
Arena::CreateMaybeMessage< ::injective::wasmx::v1::GenesisState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::wasmx::v1::GenesisState >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

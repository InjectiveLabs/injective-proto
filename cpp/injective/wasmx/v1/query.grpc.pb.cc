// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: injective/wasmx/v1/query.proto

#include "injective/wasmx/v1/query.pb.h"
#include "injective/wasmx/v1/query.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace injective {
namespace wasmx {
namespace v1 {

static const char* Query_method_names[] = {
  "/injective.wasmx.v1.Query/WasmxParams",
  "/injective.wasmx.v1.Query/ContractRegistrationInfo",
  "/injective.wasmx.v1.Query/WasmxModuleState",
};

std::unique_ptr< Query::Stub> Query::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Query::Stub> stub(new Query::Stub(channel, options));
  return stub;
}

Query::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_WasmxParams_(Query_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ContractRegistrationInfo_(Query_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_WasmxModuleState_(Query_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Query::Stub::WasmxParams(::grpc::ClientContext* context, const ::injective::wasmx::v1::QueryWasmxParamsRequest& request, ::injective::wasmx::v1::QueryWasmxParamsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::wasmx::v1::QueryWasmxParamsRequest, ::injective::wasmx::v1::QueryWasmxParamsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_WasmxParams_, context, request, response);
}

void Query::Stub::async::WasmxParams(::grpc::ClientContext* context, const ::injective::wasmx::v1::QueryWasmxParamsRequest* request, ::injective::wasmx::v1::QueryWasmxParamsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::wasmx::v1::QueryWasmxParamsRequest, ::injective::wasmx::v1::QueryWasmxParamsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_WasmxParams_, context, request, response, std::move(f));
}

void Query::Stub::async::WasmxParams(::grpc::ClientContext* context, const ::injective::wasmx::v1::QueryWasmxParamsRequest* request, ::injective::wasmx::v1::QueryWasmxParamsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_WasmxParams_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::wasmx::v1::QueryWasmxParamsResponse>* Query::Stub::PrepareAsyncWasmxParamsRaw(::grpc::ClientContext* context, const ::injective::wasmx::v1::QueryWasmxParamsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::wasmx::v1::QueryWasmxParamsResponse, ::injective::wasmx::v1::QueryWasmxParamsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_WasmxParams_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::wasmx::v1::QueryWasmxParamsResponse>* Query::Stub::AsyncWasmxParamsRaw(::grpc::ClientContext* context, const ::injective::wasmx::v1::QueryWasmxParamsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncWasmxParamsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::ContractRegistrationInfo(::grpc::ClientContext* context, const ::injective::wasmx::v1::QueryContractRegistrationInfoRequest& request, ::injective::wasmx::v1::QueryContractRegistrationInfoResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::wasmx::v1::QueryContractRegistrationInfoRequest, ::injective::wasmx::v1::QueryContractRegistrationInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ContractRegistrationInfo_, context, request, response);
}

void Query::Stub::async::ContractRegistrationInfo(::grpc::ClientContext* context, const ::injective::wasmx::v1::QueryContractRegistrationInfoRequest* request, ::injective::wasmx::v1::QueryContractRegistrationInfoResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::wasmx::v1::QueryContractRegistrationInfoRequest, ::injective::wasmx::v1::QueryContractRegistrationInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ContractRegistrationInfo_, context, request, response, std::move(f));
}

void Query::Stub::async::ContractRegistrationInfo(::grpc::ClientContext* context, const ::injective::wasmx::v1::QueryContractRegistrationInfoRequest* request, ::injective::wasmx::v1::QueryContractRegistrationInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ContractRegistrationInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::wasmx::v1::QueryContractRegistrationInfoResponse>* Query::Stub::PrepareAsyncContractRegistrationInfoRaw(::grpc::ClientContext* context, const ::injective::wasmx::v1::QueryContractRegistrationInfoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::wasmx::v1::QueryContractRegistrationInfoResponse, ::injective::wasmx::v1::QueryContractRegistrationInfoRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ContractRegistrationInfo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::wasmx::v1::QueryContractRegistrationInfoResponse>* Query::Stub::AsyncContractRegistrationInfoRaw(::grpc::ClientContext* context, const ::injective::wasmx::v1::QueryContractRegistrationInfoRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncContractRegistrationInfoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::WasmxModuleState(::grpc::ClientContext* context, const ::injective::wasmx::v1::QueryModuleStateRequest& request, ::injective::wasmx::v1::QueryModuleStateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::wasmx::v1::QueryModuleStateRequest, ::injective::wasmx::v1::QueryModuleStateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_WasmxModuleState_, context, request, response);
}

void Query::Stub::async::WasmxModuleState(::grpc::ClientContext* context, const ::injective::wasmx::v1::QueryModuleStateRequest* request, ::injective::wasmx::v1::QueryModuleStateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::wasmx::v1::QueryModuleStateRequest, ::injective::wasmx::v1::QueryModuleStateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_WasmxModuleState_, context, request, response, std::move(f));
}

void Query::Stub::async::WasmxModuleState(::grpc::ClientContext* context, const ::injective::wasmx::v1::QueryModuleStateRequest* request, ::injective::wasmx::v1::QueryModuleStateResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_WasmxModuleState_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::wasmx::v1::QueryModuleStateResponse>* Query::Stub::PrepareAsyncWasmxModuleStateRaw(::grpc::ClientContext* context, const ::injective::wasmx::v1::QueryModuleStateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::wasmx::v1::QueryModuleStateResponse, ::injective::wasmx::v1::QueryModuleStateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_WasmxModuleState_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::wasmx::v1::QueryModuleStateResponse>* Query::Stub::AsyncWasmxModuleStateRaw(::grpc::ClientContext* context, const ::injective::wasmx::v1::QueryModuleStateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncWasmxModuleStateRaw(context, request, cq);
  result->StartCall();
  return result;
}

Query::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::injective::wasmx::v1::QueryWasmxParamsRequest, ::injective::wasmx::v1::QueryWasmxParamsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::wasmx::v1::QueryWasmxParamsRequest* req,
             ::injective::wasmx::v1::QueryWasmxParamsResponse* resp) {
               return service->WasmxParams(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::injective::wasmx::v1::QueryContractRegistrationInfoRequest, ::injective::wasmx::v1::QueryContractRegistrationInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::wasmx::v1::QueryContractRegistrationInfoRequest* req,
             ::injective::wasmx::v1::QueryContractRegistrationInfoResponse* resp) {
               return service->ContractRegistrationInfo(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::injective::wasmx::v1::QueryModuleStateRequest, ::injective::wasmx::v1::QueryModuleStateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::wasmx::v1::QueryModuleStateRequest* req,
             ::injective::wasmx::v1::QueryModuleStateResponse* resp) {
               return service->WasmxModuleState(ctx, req, resp);
             }, this)));
}

Query::Service::~Service() {
}

::grpc::Status Query::Service::WasmxParams(::grpc::ServerContext* context, const ::injective::wasmx::v1::QueryWasmxParamsRequest* request, ::injective::wasmx::v1::QueryWasmxParamsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::ContractRegistrationInfo(::grpc::ServerContext* context, const ::injective::wasmx::v1::QueryContractRegistrationInfoRequest* request, ::injective::wasmx::v1::QueryContractRegistrationInfoResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::WasmxModuleState(::grpc::ServerContext* context, const ::injective::wasmx::v1::QueryModuleStateRequest* request, ::injective::wasmx::v1::QueryModuleStateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace injective
}  // namespace wasmx
}  // namespace v1


// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: injective/wasmx/v1/wasmx.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_injective_2fwasmx_2fv1_2fwasmx_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_injective_2fwasmx_2fv1_2fwasmx_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "gogoproto/gogo.pb.h"
#include "injective/wasmx/v1/proposal.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_injective_2fwasmx_2fv1_2fwasmx_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_injective_2fwasmx_2fv1_2fwasmx_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_injective_2fwasmx_2fv1_2fwasmx_2eproto;
namespace injective {
namespace wasmx {
namespace v1 {
class Params;
struct ParamsDefaultTypeInternal;
extern ParamsDefaultTypeInternal _Params_default_instance_;
class RegisteredContract;
struct RegisteredContractDefaultTypeInternal;
extern RegisteredContractDefaultTypeInternal _RegisteredContract_default_instance_;
}  // namespace v1
}  // namespace wasmx
}  // namespace injective
PROTOBUF_NAMESPACE_OPEN
template <>
::injective::wasmx::v1::Params* Arena::CreateMaybeMessage<::injective::wasmx::v1::Params>(Arena*);
template <>
::injective::wasmx::v1::RegisteredContract* Arena::CreateMaybeMessage<::injective::wasmx::v1::RegisteredContract>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace injective {
namespace wasmx {
namespace v1 {

// ===================================================================


// -------------------------------------------------------------------

class Params final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.wasmx.v1.Params) */ {
 public:
  inline Params() : Params(nullptr) {}
  ~Params() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Params(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Params(const Params& from);
  Params(Params&& from) noexcept
    : Params() {
    *this = ::std::move(from);
  }

  inline Params& operator=(const Params& from) {
    CopyFrom(from);
    return *this;
  }
  inline Params& operator=(Params&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Params& default_instance() {
    return *internal_default_instance();
  }
  static inline const Params* internal_default_instance() {
    return reinterpret_cast<const Params*>(
               &_Params_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Params& a, Params& b) {
    a.Swap(&b);
  }
  inline void Swap(Params* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Params* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Params* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Params>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Params& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Params& from) {
    Params::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Params* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.wasmx.v1.Params";
  }
  protected:
  explicit Params(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMaxBeginBlockTotalGasFieldNumber = 2,
    kMaxContractGasLimitFieldNumber = 3,
    kMinGasPriceFieldNumber = 4,
    kIsExecutionEnabledFieldNumber = 1,
  };
  // uint64 max_begin_block_total_gas = 2 [json_name = "maxBeginBlockTotalGas"];
  void clear_max_begin_block_total_gas() ;
  ::uint64_t max_begin_block_total_gas() const;
  void set_max_begin_block_total_gas(::uint64_t value);

  private:
  ::uint64_t _internal_max_begin_block_total_gas() const;
  void _internal_set_max_begin_block_total_gas(::uint64_t value);

  public:
  // uint64 max_contract_gas_limit = 3 [json_name = "maxContractGasLimit"];
  void clear_max_contract_gas_limit() ;
  ::uint64_t max_contract_gas_limit() const;
  void set_max_contract_gas_limit(::uint64_t value);

  private:
  ::uint64_t _internal_max_contract_gas_limit() const;
  void _internal_set_max_contract_gas_limit(::uint64_t value);

  public:
  // uint64 min_gas_price = 4 [json_name = "minGasPrice"];
  void clear_min_gas_price() ;
  ::uint64_t min_gas_price() const;
  void set_min_gas_price(::uint64_t value);

  private:
  ::uint64_t _internal_min_gas_price() const;
  void _internal_set_min_gas_price(::uint64_t value);

  public:
  // bool is_execution_enabled = 1 [json_name = "isExecutionEnabled"];
  void clear_is_execution_enabled() ;
  bool is_execution_enabled() const;
  void set_is_execution_enabled(bool value);

  private:
  bool _internal_is_execution_enabled() const;
  void _internal_set_is_execution_enabled(bool value);

  public:
  // @@protoc_insertion_point(class_scope:injective.wasmx.v1.Params)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::uint64_t max_begin_block_total_gas_;
    ::uint64_t max_contract_gas_limit_;
    ::uint64_t min_gas_price_;
    bool is_execution_enabled_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2fwasmx_2fv1_2fwasmx_2eproto;
};// -------------------------------------------------------------------

class RegisteredContract final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.wasmx.v1.RegisteredContract) */ {
 public:
  inline RegisteredContract() : RegisteredContract(nullptr) {}
  ~RegisteredContract() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR RegisteredContract(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RegisteredContract(const RegisteredContract& from);
  RegisteredContract(RegisteredContract&& from) noexcept
    : RegisteredContract() {
    *this = ::std::move(from);
  }

  inline RegisteredContract& operator=(const RegisteredContract& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisteredContract& operator=(RegisteredContract&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RegisteredContract& default_instance() {
    return *internal_default_instance();
  }
  static inline const RegisteredContract* internal_default_instance() {
    return reinterpret_cast<const RegisteredContract*>(
               &_RegisteredContract_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RegisteredContract& a, RegisteredContract& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisteredContract* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegisteredContract* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RegisteredContract* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RegisteredContract>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RegisteredContract& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RegisteredContract& from) {
    RegisteredContract::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisteredContract* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.wasmx.v1.RegisteredContract";
  }
  protected:
  explicit RegisteredContract(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAdminAddressFieldNumber = 5,
    kGranterAddressFieldNumber = 6,
    kGasLimitFieldNumber = 1,
    kGasPriceFieldNumber = 2,
    kCodeIdFieldNumber = 4,
    kIsExecutableFieldNumber = 3,
    kFundModeFieldNumber = 7,
  };
  // string admin_address = 5 [json_name = "adminAddress", (.gogoproto.nullable) = true];
  void clear_admin_address() ;
  const std::string& admin_address() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_admin_address(Arg_&& arg, Args_... args);
  std::string* mutable_admin_address();
  PROTOBUF_NODISCARD std::string* release_admin_address();
  void set_allocated_admin_address(std::string* ptr);

  private:
  const std::string& _internal_admin_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_admin_address(
      const std::string& value);
  std::string* _internal_mutable_admin_address();

  public:
  // string granter_address = 6 [json_name = "granterAddress", (.gogoproto.nullable) = true];
  void clear_granter_address() ;
  const std::string& granter_address() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_granter_address(Arg_&& arg, Args_... args);
  std::string* mutable_granter_address();
  PROTOBUF_NODISCARD std::string* release_granter_address();
  void set_allocated_granter_address(std::string* ptr);

  private:
  const std::string& _internal_granter_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_granter_address(
      const std::string& value);
  std::string* _internal_mutable_granter_address();

  public:
  // uint64 gas_limit = 1 [json_name = "gasLimit"];
  void clear_gas_limit() ;
  ::uint64_t gas_limit() const;
  void set_gas_limit(::uint64_t value);

  private:
  ::uint64_t _internal_gas_limit() const;
  void _internal_set_gas_limit(::uint64_t value);

  public:
  // uint64 gas_price = 2 [json_name = "gasPrice"];
  void clear_gas_price() ;
  ::uint64_t gas_price() const;
  void set_gas_price(::uint64_t value);

  private:
  ::uint64_t _internal_gas_price() const;
  void _internal_set_gas_price(::uint64_t value);

  public:
  // uint64 code_id = 4 [json_name = "codeId", (.gogoproto.nullable) = true];
  void clear_code_id() ;
  ::uint64_t code_id() const;
  void set_code_id(::uint64_t value);

  private:
  ::uint64_t _internal_code_id() const;
  void _internal_set_code_id(::uint64_t value);

  public:
  // bool is_executable = 3 [json_name = "isExecutable"];
  void clear_is_executable() ;
  bool is_executable() const;
  void set_is_executable(bool value);

  private:
  bool _internal_is_executable() const;
  void _internal_set_is_executable(bool value);

  public:
  // .injective.wasmx.v1.FundingMode fund_mode = 7 [json_name = "fundMode"];
  void clear_fund_mode() ;
  ::injective::wasmx::v1::FundingMode fund_mode() const;
  void set_fund_mode(::injective::wasmx::v1::FundingMode value);

  private:
  ::injective::wasmx::v1::FundingMode _internal_fund_mode() const;
  void _internal_set_fund_mode(::injective::wasmx::v1::FundingMode value);

  public:
  // @@protoc_insertion_point(class_scope:injective.wasmx.v1.RegisteredContract)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr admin_address_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr granter_address_;
    ::uint64_t gas_limit_;
    ::uint64_t gas_price_;
    ::uint64_t code_id_;
    bool is_executable_;
    int fund_mode_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2fwasmx_2fv1_2fwasmx_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Params

// bool is_execution_enabled = 1 [json_name = "isExecutionEnabled"];
inline void Params::clear_is_execution_enabled() {
  _impl_.is_execution_enabled_ = false;
}
inline bool Params::is_execution_enabled() const {
  // @@protoc_insertion_point(field_get:injective.wasmx.v1.Params.is_execution_enabled)
  return _internal_is_execution_enabled();
}
inline void Params::set_is_execution_enabled(bool value) {
  _internal_set_is_execution_enabled(value);
  // @@protoc_insertion_point(field_set:injective.wasmx.v1.Params.is_execution_enabled)
}
inline bool Params::_internal_is_execution_enabled() const {
  return _impl_.is_execution_enabled_;
}
inline void Params::_internal_set_is_execution_enabled(bool value) {
  ;
  _impl_.is_execution_enabled_ = value;
}

// uint64 max_begin_block_total_gas = 2 [json_name = "maxBeginBlockTotalGas"];
inline void Params::clear_max_begin_block_total_gas() {
  _impl_.max_begin_block_total_gas_ = ::uint64_t{0u};
}
inline ::uint64_t Params::max_begin_block_total_gas() const {
  // @@protoc_insertion_point(field_get:injective.wasmx.v1.Params.max_begin_block_total_gas)
  return _internal_max_begin_block_total_gas();
}
inline void Params::set_max_begin_block_total_gas(::uint64_t value) {
  _internal_set_max_begin_block_total_gas(value);
  // @@protoc_insertion_point(field_set:injective.wasmx.v1.Params.max_begin_block_total_gas)
}
inline ::uint64_t Params::_internal_max_begin_block_total_gas() const {
  return _impl_.max_begin_block_total_gas_;
}
inline void Params::_internal_set_max_begin_block_total_gas(::uint64_t value) {
  ;
  _impl_.max_begin_block_total_gas_ = value;
}

// uint64 max_contract_gas_limit = 3 [json_name = "maxContractGasLimit"];
inline void Params::clear_max_contract_gas_limit() {
  _impl_.max_contract_gas_limit_ = ::uint64_t{0u};
}
inline ::uint64_t Params::max_contract_gas_limit() const {
  // @@protoc_insertion_point(field_get:injective.wasmx.v1.Params.max_contract_gas_limit)
  return _internal_max_contract_gas_limit();
}
inline void Params::set_max_contract_gas_limit(::uint64_t value) {
  _internal_set_max_contract_gas_limit(value);
  // @@protoc_insertion_point(field_set:injective.wasmx.v1.Params.max_contract_gas_limit)
}
inline ::uint64_t Params::_internal_max_contract_gas_limit() const {
  return _impl_.max_contract_gas_limit_;
}
inline void Params::_internal_set_max_contract_gas_limit(::uint64_t value) {
  ;
  _impl_.max_contract_gas_limit_ = value;
}

// uint64 min_gas_price = 4 [json_name = "minGasPrice"];
inline void Params::clear_min_gas_price() {
  _impl_.min_gas_price_ = ::uint64_t{0u};
}
inline ::uint64_t Params::min_gas_price() const {
  // @@protoc_insertion_point(field_get:injective.wasmx.v1.Params.min_gas_price)
  return _internal_min_gas_price();
}
inline void Params::set_min_gas_price(::uint64_t value) {
  _internal_set_min_gas_price(value);
  // @@protoc_insertion_point(field_set:injective.wasmx.v1.Params.min_gas_price)
}
inline ::uint64_t Params::_internal_min_gas_price() const {
  return _impl_.min_gas_price_;
}
inline void Params::_internal_set_min_gas_price(::uint64_t value) {
  ;
  _impl_.min_gas_price_ = value;
}

// -------------------------------------------------------------------

// RegisteredContract

// uint64 gas_limit = 1 [json_name = "gasLimit"];
inline void RegisteredContract::clear_gas_limit() {
  _impl_.gas_limit_ = ::uint64_t{0u};
}
inline ::uint64_t RegisteredContract::gas_limit() const {
  // @@protoc_insertion_point(field_get:injective.wasmx.v1.RegisteredContract.gas_limit)
  return _internal_gas_limit();
}
inline void RegisteredContract::set_gas_limit(::uint64_t value) {
  _internal_set_gas_limit(value);
  // @@protoc_insertion_point(field_set:injective.wasmx.v1.RegisteredContract.gas_limit)
}
inline ::uint64_t RegisteredContract::_internal_gas_limit() const {
  return _impl_.gas_limit_;
}
inline void RegisteredContract::_internal_set_gas_limit(::uint64_t value) {
  ;
  _impl_.gas_limit_ = value;
}

// uint64 gas_price = 2 [json_name = "gasPrice"];
inline void RegisteredContract::clear_gas_price() {
  _impl_.gas_price_ = ::uint64_t{0u};
}
inline ::uint64_t RegisteredContract::gas_price() const {
  // @@protoc_insertion_point(field_get:injective.wasmx.v1.RegisteredContract.gas_price)
  return _internal_gas_price();
}
inline void RegisteredContract::set_gas_price(::uint64_t value) {
  _internal_set_gas_price(value);
  // @@protoc_insertion_point(field_set:injective.wasmx.v1.RegisteredContract.gas_price)
}
inline ::uint64_t RegisteredContract::_internal_gas_price() const {
  return _impl_.gas_price_;
}
inline void RegisteredContract::_internal_set_gas_price(::uint64_t value) {
  ;
  _impl_.gas_price_ = value;
}

// bool is_executable = 3 [json_name = "isExecutable"];
inline void RegisteredContract::clear_is_executable() {
  _impl_.is_executable_ = false;
}
inline bool RegisteredContract::is_executable() const {
  // @@protoc_insertion_point(field_get:injective.wasmx.v1.RegisteredContract.is_executable)
  return _internal_is_executable();
}
inline void RegisteredContract::set_is_executable(bool value) {
  _internal_set_is_executable(value);
  // @@protoc_insertion_point(field_set:injective.wasmx.v1.RegisteredContract.is_executable)
}
inline bool RegisteredContract::_internal_is_executable() const {
  return _impl_.is_executable_;
}
inline void RegisteredContract::_internal_set_is_executable(bool value) {
  ;
  _impl_.is_executable_ = value;
}

// uint64 code_id = 4 [json_name = "codeId", (.gogoproto.nullable) = true];
inline void RegisteredContract::clear_code_id() {
  _impl_.code_id_ = ::uint64_t{0u};
}
inline ::uint64_t RegisteredContract::code_id() const {
  // @@protoc_insertion_point(field_get:injective.wasmx.v1.RegisteredContract.code_id)
  return _internal_code_id();
}
inline void RegisteredContract::set_code_id(::uint64_t value) {
  _internal_set_code_id(value);
  // @@protoc_insertion_point(field_set:injective.wasmx.v1.RegisteredContract.code_id)
}
inline ::uint64_t RegisteredContract::_internal_code_id() const {
  return _impl_.code_id_;
}
inline void RegisteredContract::_internal_set_code_id(::uint64_t value) {
  ;
  _impl_.code_id_ = value;
}

// string admin_address = 5 [json_name = "adminAddress", (.gogoproto.nullable) = true];
inline void RegisteredContract::clear_admin_address() {
  _impl_.admin_address_.ClearToEmpty();
}
inline const std::string& RegisteredContract::admin_address() const {
  // @@protoc_insertion_point(field_get:injective.wasmx.v1.RegisteredContract.admin_address)
  return _internal_admin_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RegisteredContract::set_admin_address(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.admin_address_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.wasmx.v1.RegisteredContract.admin_address)
}
inline std::string* RegisteredContract::mutable_admin_address() {
  std::string* _s = _internal_mutable_admin_address();
  // @@protoc_insertion_point(field_mutable:injective.wasmx.v1.RegisteredContract.admin_address)
  return _s;
}
inline const std::string& RegisteredContract::_internal_admin_address() const {
  return _impl_.admin_address_.Get();
}
inline void RegisteredContract::_internal_set_admin_address(const std::string& value) {
  ;


  _impl_.admin_address_.Set(value, GetArenaForAllocation());
}
inline std::string* RegisteredContract::_internal_mutable_admin_address() {
  ;
  return _impl_.admin_address_.Mutable( GetArenaForAllocation());
}
inline std::string* RegisteredContract::release_admin_address() {
  // @@protoc_insertion_point(field_release:injective.wasmx.v1.RegisteredContract.admin_address)
  return _impl_.admin_address_.Release();
}
inline void RegisteredContract::set_allocated_admin_address(std::string* value) {
  _impl_.admin_address_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.admin_address_.IsDefault()) {
          _impl_.admin_address_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.wasmx.v1.RegisteredContract.admin_address)
}

// string granter_address = 6 [json_name = "granterAddress", (.gogoproto.nullable) = true];
inline void RegisteredContract::clear_granter_address() {
  _impl_.granter_address_.ClearToEmpty();
}
inline const std::string& RegisteredContract::granter_address() const {
  // @@protoc_insertion_point(field_get:injective.wasmx.v1.RegisteredContract.granter_address)
  return _internal_granter_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RegisteredContract::set_granter_address(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.granter_address_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.wasmx.v1.RegisteredContract.granter_address)
}
inline std::string* RegisteredContract::mutable_granter_address() {
  std::string* _s = _internal_mutable_granter_address();
  // @@protoc_insertion_point(field_mutable:injective.wasmx.v1.RegisteredContract.granter_address)
  return _s;
}
inline const std::string& RegisteredContract::_internal_granter_address() const {
  return _impl_.granter_address_.Get();
}
inline void RegisteredContract::_internal_set_granter_address(const std::string& value) {
  ;


  _impl_.granter_address_.Set(value, GetArenaForAllocation());
}
inline std::string* RegisteredContract::_internal_mutable_granter_address() {
  ;
  return _impl_.granter_address_.Mutable( GetArenaForAllocation());
}
inline std::string* RegisteredContract::release_granter_address() {
  // @@protoc_insertion_point(field_release:injective.wasmx.v1.RegisteredContract.granter_address)
  return _impl_.granter_address_.Release();
}
inline void RegisteredContract::set_allocated_granter_address(std::string* value) {
  _impl_.granter_address_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.granter_address_.IsDefault()) {
          _impl_.granter_address_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.wasmx.v1.RegisteredContract.granter_address)
}

// .injective.wasmx.v1.FundingMode fund_mode = 7 [json_name = "fundMode"];
inline void RegisteredContract::clear_fund_mode() {
  _impl_.fund_mode_ = 0;
}
inline ::injective::wasmx::v1::FundingMode RegisteredContract::fund_mode() const {
  // @@protoc_insertion_point(field_get:injective.wasmx.v1.RegisteredContract.fund_mode)
  return _internal_fund_mode();
}
inline void RegisteredContract::set_fund_mode(::injective::wasmx::v1::FundingMode value) {
   _internal_set_fund_mode(value);
  // @@protoc_insertion_point(field_set:injective.wasmx.v1.RegisteredContract.fund_mode)
}
inline ::injective::wasmx::v1::FundingMode RegisteredContract::_internal_fund_mode() const {
  return static_cast<::injective::wasmx::v1::FundingMode>(_impl_.fund_mode_);
}
inline void RegisteredContract::_internal_set_fund_mode(::injective::wasmx::v1::FundingMode value) {
  ;
  _impl_.fund_mode_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace wasmx
}  // namespace injective


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_injective_2fwasmx_2fv1_2fwasmx_2eproto_2epb_2eh

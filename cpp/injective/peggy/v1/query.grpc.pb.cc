// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: injective/peggy/v1/query.proto

#include "injective/peggy/v1/query.pb.h"
#include "injective/peggy/v1/query.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace injective {
namespace peggy {
namespace v1 {

static const char* Query_method_names[] = {
  "/injective.peggy.v1.Query/Params",
  "/injective.peggy.v1.Query/CurrentValset",
  "/injective.peggy.v1.Query/ValsetRequest",
  "/injective.peggy.v1.Query/ValsetConfirm",
  "/injective.peggy.v1.Query/ValsetConfirmsByNonce",
  "/injective.peggy.v1.Query/LastValsetRequests",
  "/injective.peggy.v1.Query/LastPendingValsetRequestByAddr",
  "/injective.peggy.v1.Query/LastEventByAddr",
  "/injective.peggy.v1.Query/GetPendingSendToEth",
  "/injective.peggy.v1.Query/BatchFees",
  "/injective.peggy.v1.Query/OutgoingTxBatches",
  "/injective.peggy.v1.Query/LastPendingBatchRequestByAddr",
  "/injective.peggy.v1.Query/BatchRequestByNonce",
  "/injective.peggy.v1.Query/BatchConfirms",
  "/injective.peggy.v1.Query/ERC20ToDenom",
  "/injective.peggy.v1.Query/DenomToERC20",
  "/injective.peggy.v1.Query/GetDelegateKeyByValidator",
  "/injective.peggy.v1.Query/GetDelegateKeyByEth",
  "/injective.peggy.v1.Query/GetDelegateKeyByOrchestrator",
  "/injective.peggy.v1.Query/PeggyModuleState",
  "/injective.peggy.v1.Query/MissingPeggoNonces",
};

std::unique_ptr< Query::Stub> Query::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Query::Stub> stub(new Query::Stub(channel, options));
  return stub;
}

Query::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Params_(Query_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CurrentValset_(Query_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ValsetRequest_(Query_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ValsetConfirm_(Query_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ValsetConfirmsByNonce_(Query_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_LastValsetRequests_(Query_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_LastPendingValsetRequestByAddr_(Query_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_LastEventByAddr_(Query_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetPendingSendToEth_(Query_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_BatchFees_(Query_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_OutgoingTxBatches_(Query_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_LastPendingBatchRequestByAddr_(Query_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_BatchRequestByNonce_(Query_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_BatchConfirms_(Query_method_names[13], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ERC20ToDenom_(Query_method_names[14], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DenomToERC20_(Query_method_names[15], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetDelegateKeyByValidator_(Query_method_names[16], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetDelegateKeyByEth_(Query_method_names[17], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetDelegateKeyByOrchestrator_(Query_method_names[18], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PeggyModuleState_(Query_method_names[19], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_MissingPeggoNonces_(Query_method_names[20], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Query::Stub::Params(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryParamsRequest& request, ::injective::peggy::v1::QueryParamsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::peggy::v1::QueryParamsRequest, ::injective::peggy::v1::QueryParamsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Params_, context, request, response);
}

void Query::Stub::async::Params(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryParamsRequest* request, ::injective::peggy::v1::QueryParamsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::peggy::v1::QueryParamsRequest, ::injective::peggy::v1::QueryParamsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Params_, context, request, response, std::move(f));
}

void Query::Stub::async::Params(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryParamsRequest* request, ::injective::peggy::v1::QueryParamsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Params_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryParamsResponse>* Query::Stub::PrepareAsyncParamsRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryParamsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::peggy::v1::QueryParamsResponse, ::injective::peggy::v1::QueryParamsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Params_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryParamsResponse>* Query::Stub::AsyncParamsRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryParamsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncParamsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::CurrentValset(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryCurrentValsetRequest& request, ::injective::peggy::v1::QueryCurrentValsetResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::peggy::v1::QueryCurrentValsetRequest, ::injective::peggy::v1::QueryCurrentValsetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CurrentValset_, context, request, response);
}

void Query::Stub::async::CurrentValset(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryCurrentValsetRequest* request, ::injective::peggy::v1::QueryCurrentValsetResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::peggy::v1::QueryCurrentValsetRequest, ::injective::peggy::v1::QueryCurrentValsetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CurrentValset_, context, request, response, std::move(f));
}

void Query::Stub::async::CurrentValset(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryCurrentValsetRequest* request, ::injective::peggy::v1::QueryCurrentValsetResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CurrentValset_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryCurrentValsetResponse>* Query::Stub::PrepareAsyncCurrentValsetRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryCurrentValsetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::peggy::v1::QueryCurrentValsetResponse, ::injective::peggy::v1::QueryCurrentValsetRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CurrentValset_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryCurrentValsetResponse>* Query::Stub::AsyncCurrentValsetRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryCurrentValsetRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCurrentValsetRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::ValsetRequest(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryValsetRequestRequest& request, ::injective::peggy::v1::QueryValsetRequestResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::peggy::v1::QueryValsetRequestRequest, ::injective::peggy::v1::QueryValsetRequestResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ValsetRequest_, context, request, response);
}

void Query::Stub::async::ValsetRequest(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryValsetRequestRequest* request, ::injective::peggy::v1::QueryValsetRequestResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::peggy::v1::QueryValsetRequestRequest, ::injective::peggy::v1::QueryValsetRequestResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ValsetRequest_, context, request, response, std::move(f));
}

void Query::Stub::async::ValsetRequest(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryValsetRequestRequest* request, ::injective::peggy::v1::QueryValsetRequestResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ValsetRequest_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryValsetRequestResponse>* Query::Stub::PrepareAsyncValsetRequestRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryValsetRequestRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::peggy::v1::QueryValsetRequestResponse, ::injective::peggy::v1::QueryValsetRequestRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ValsetRequest_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryValsetRequestResponse>* Query::Stub::AsyncValsetRequestRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryValsetRequestRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncValsetRequestRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::ValsetConfirm(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryValsetConfirmRequest& request, ::injective::peggy::v1::QueryValsetConfirmResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::peggy::v1::QueryValsetConfirmRequest, ::injective::peggy::v1::QueryValsetConfirmResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ValsetConfirm_, context, request, response);
}

void Query::Stub::async::ValsetConfirm(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryValsetConfirmRequest* request, ::injective::peggy::v1::QueryValsetConfirmResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::peggy::v1::QueryValsetConfirmRequest, ::injective::peggy::v1::QueryValsetConfirmResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ValsetConfirm_, context, request, response, std::move(f));
}

void Query::Stub::async::ValsetConfirm(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryValsetConfirmRequest* request, ::injective::peggy::v1::QueryValsetConfirmResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ValsetConfirm_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryValsetConfirmResponse>* Query::Stub::PrepareAsyncValsetConfirmRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryValsetConfirmRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::peggy::v1::QueryValsetConfirmResponse, ::injective::peggy::v1::QueryValsetConfirmRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ValsetConfirm_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryValsetConfirmResponse>* Query::Stub::AsyncValsetConfirmRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryValsetConfirmRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncValsetConfirmRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::ValsetConfirmsByNonce(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryValsetConfirmsByNonceRequest& request, ::injective::peggy::v1::QueryValsetConfirmsByNonceResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::peggy::v1::QueryValsetConfirmsByNonceRequest, ::injective::peggy::v1::QueryValsetConfirmsByNonceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ValsetConfirmsByNonce_, context, request, response);
}

void Query::Stub::async::ValsetConfirmsByNonce(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryValsetConfirmsByNonceRequest* request, ::injective::peggy::v1::QueryValsetConfirmsByNonceResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::peggy::v1::QueryValsetConfirmsByNonceRequest, ::injective::peggy::v1::QueryValsetConfirmsByNonceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ValsetConfirmsByNonce_, context, request, response, std::move(f));
}

void Query::Stub::async::ValsetConfirmsByNonce(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryValsetConfirmsByNonceRequest* request, ::injective::peggy::v1::QueryValsetConfirmsByNonceResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ValsetConfirmsByNonce_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryValsetConfirmsByNonceResponse>* Query::Stub::PrepareAsyncValsetConfirmsByNonceRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryValsetConfirmsByNonceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::peggy::v1::QueryValsetConfirmsByNonceResponse, ::injective::peggy::v1::QueryValsetConfirmsByNonceRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ValsetConfirmsByNonce_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryValsetConfirmsByNonceResponse>* Query::Stub::AsyncValsetConfirmsByNonceRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryValsetConfirmsByNonceRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncValsetConfirmsByNonceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::LastValsetRequests(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryLastValsetRequestsRequest& request, ::injective::peggy::v1::QueryLastValsetRequestsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::peggy::v1::QueryLastValsetRequestsRequest, ::injective::peggy::v1::QueryLastValsetRequestsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_LastValsetRequests_, context, request, response);
}

void Query::Stub::async::LastValsetRequests(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryLastValsetRequestsRequest* request, ::injective::peggy::v1::QueryLastValsetRequestsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::peggy::v1::QueryLastValsetRequestsRequest, ::injective::peggy::v1::QueryLastValsetRequestsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_LastValsetRequests_, context, request, response, std::move(f));
}

void Query::Stub::async::LastValsetRequests(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryLastValsetRequestsRequest* request, ::injective::peggy::v1::QueryLastValsetRequestsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_LastValsetRequests_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryLastValsetRequestsResponse>* Query::Stub::PrepareAsyncLastValsetRequestsRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryLastValsetRequestsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::peggy::v1::QueryLastValsetRequestsResponse, ::injective::peggy::v1::QueryLastValsetRequestsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_LastValsetRequests_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryLastValsetRequestsResponse>* Query::Stub::AsyncLastValsetRequestsRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryLastValsetRequestsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncLastValsetRequestsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::LastPendingValsetRequestByAddr(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryLastPendingValsetRequestByAddrRequest& request, ::injective::peggy::v1::QueryLastPendingValsetRequestByAddrResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::peggy::v1::QueryLastPendingValsetRequestByAddrRequest, ::injective::peggy::v1::QueryLastPendingValsetRequestByAddrResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_LastPendingValsetRequestByAddr_, context, request, response);
}

void Query::Stub::async::LastPendingValsetRequestByAddr(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryLastPendingValsetRequestByAddrRequest* request, ::injective::peggy::v1::QueryLastPendingValsetRequestByAddrResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::peggy::v1::QueryLastPendingValsetRequestByAddrRequest, ::injective::peggy::v1::QueryLastPendingValsetRequestByAddrResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_LastPendingValsetRequestByAddr_, context, request, response, std::move(f));
}

void Query::Stub::async::LastPendingValsetRequestByAddr(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryLastPendingValsetRequestByAddrRequest* request, ::injective::peggy::v1::QueryLastPendingValsetRequestByAddrResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_LastPendingValsetRequestByAddr_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryLastPendingValsetRequestByAddrResponse>* Query::Stub::PrepareAsyncLastPendingValsetRequestByAddrRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryLastPendingValsetRequestByAddrRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::peggy::v1::QueryLastPendingValsetRequestByAddrResponse, ::injective::peggy::v1::QueryLastPendingValsetRequestByAddrRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_LastPendingValsetRequestByAddr_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryLastPendingValsetRequestByAddrResponse>* Query::Stub::AsyncLastPendingValsetRequestByAddrRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryLastPendingValsetRequestByAddrRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncLastPendingValsetRequestByAddrRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::LastEventByAddr(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryLastEventByAddrRequest& request, ::injective::peggy::v1::QueryLastEventByAddrResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::peggy::v1::QueryLastEventByAddrRequest, ::injective::peggy::v1::QueryLastEventByAddrResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_LastEventByAddr_, context, request, response);
}

void Query::Stub::async::LastEventByAddr(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryLastEventByAddrRequest* request, ::injective::peggy::v1::QueryLastEventByAddrResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::peggy::v1::QueryLastEventByAddrRequest, ::injective::peggy::v1::QueryLastEventByAddrResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_LastEventByAddr_, context, request, response, std::move(f));
}

void Query::Stub::async::LastEventByAddr(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryLastEventByAddrRequest* request, ::injective::peggy::v1::QueryLastEventByAddrResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_LastEventByAddr_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryLastEventByAddrResponse>* Query::Stub::PrepareAsyncLastEventByAddrRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryLastEventByAddrRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::peggy::v1::QueryLastEventByAddrResponse, ::injective::peggy::v1::QueryLastEventByAddrRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_LastEventByAddr_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryLastEventByAddrResponse>* Query::Stub::AsyncLastEventByAddrRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryLastEventByAddrRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncLastEventByAddrRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::GetPendingSendToEth(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryPendingSendToEth& request, ::injective::peggy::v1::QueryPendingSendToEthResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::peggy::v1::QueryPendingSendToEth, ::injective::peggy::v1::QueryPendingSendToEthResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetPendingSendToEth_, context, request, response);
}

void Query::Stub::async::GetPendingSendToEth(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryPendingSendToEth* request, ::injective::peggy::v1::QueryPendingSendToEthResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::peggy::v1::QueryPendingSendToEth, ::injective::peggy::v1::QueryPendingSendToEthResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPendingSendToEth_, context, request, response, std::move(f));
}

void Query::Stub::async::GetPendingSendToEth(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryPendingSendToEth* request, ::injective::peggy::v1::QueryPendingSendToEthResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPendingSendToEth_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryPendingSendToEthResponse>* Query::Stub::PrepareAsyncGetPendingSendToEthRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryPendingSendToEth& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::peggy::v1::QueryPendingSendToEthResponse, ::injective::peggy::v1::QueryPendingSendToEth, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetPendingSendToEth_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryPendingSendToEthResponse>* Query::Stub::AsyncGetPendingSendToEthRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryPendingSendToEth& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetPendingSendToEthRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::BatchFees(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryBatchFeeRequest& request, ::injective::peggy::v1::QueryBatchFeeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::peggy::v1::QueryBatchFeeRequest, ::injective::peggy::v1::QueryBatchFeeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_BatchFees_, context, request, response);
}

void Query::Stub::async::BatchFees(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryBatchFeeRequest* request, ::injective::peggy::v1::QueryBatchFeeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::peggy::v1::QueryBatchFeeRequest, ::injective::peggy::v1::QueryBatchFeeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_BatchFees_, context, request, response, std::move(f));
}

void Query::Stub::async::BatchFees(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryBatchFeeRequest* request, ::injective::peggy::v1::QueryBatchFeeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_BatchFees_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryBatchFeeResponse>* Query::Stub::PrepareAsyncBatchFeesRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryBatchFeeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::peggy::v1::QueryBatchFeeResponse, ::injective::peggy::v1::QueryBatchFeeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_BatchFees_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryBatchFeeResponse>* Query::Stub::AsyncBatchFeesRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryBatchFeeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncBatchFeesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::OutgoingTxBatches(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryOutgoingTxBatchesRequest& request, ::injective::peggy::v1::QueryOutgoingTxBatchesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::peggy::v1::QueryOutgoingTxBatchesRequest, ::injective::peggy::v1::QueryOutgoingTxBatchesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_OutgoingTxBatches_, context, request, response);
}

void Query::Stub::async::OutgoingTxBatches(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryOutgoingTxBatchesRequest* request, ::injective::peggy::v1::QueryOutgoingTxBatchesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::peggy::v1::QueryOutgoingTxBatchesRequest, ::injective::peggy::v1::QueryOutgoingTxBatchesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_OutgoingTxBatches_, context, request, response, std::move(f));
}

void Query::Stub::async::OutgoingTxBatches(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryOutgoingTxBatchesRequest* request, ::injective::peggy::v1::QueryOutgoingTxBatchesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_OutgoingTxBatches_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryOutgoingTxBatchesResponse>* Query::Stub::PrepareAsyncOutgoingTxBatchesRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryOutgoingTxBatchesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::peggy::v1::QueryOutgoingTxBatchesResponse, ::injective::peggy::v1::QueryOutgoingTxBatchesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_OutgoingTxBatches_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryOutgoingTxBatchesResponse>* Query::Stub::AsyncOutgoingTxBatchesRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryOutgoingTxBatchesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncOutgoingTxBatchesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::LastPendingBatchRequestByAddr(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryLastPendingBatchRequestByAddrRequest& request, ::injective::peggy::v1::QueryLastPendingBatchRequestByAddrResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::peggy::v1::QueryLastPendingBatchRequestByAddrRequest, ::injective::peggy::v1::QueryLastPendingBatchRequestByAddrResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_LastPendingBatchRequestByAddr_, context, request, response);
}

void Query::Stub::async::LastPendingBatchRequestByAddr(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryLastPendingBatchRequestByAddrRequest* request, ::injective::peggy::v1::QueryLastPendingBatchRequestByAddrResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::peggy::v1::QueryLastPendingBatchRequestByAddrRequest, ::injective::peggy::v1::QueryLastPendingBatchRequestByAddrResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_LastPendingBatchRequestByAddr_, context, request, response, std::move(f));
}

void Query::Stub::async::LastPendingBatchRequestByAddr(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryLastPendingBatchRequestByAddrRequest* request, ::injective::peggy::v1::QueryLastPendingBatchRequestByAddrResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_LastPendingBatchRequestByAddr_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryLastPendingBatchRequestByAddrResponse>* Query::Stub::PrepareAsyncLastPendingBatchRequestByAddrRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryLastPendingBatchRequestByAddrRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::peggy::v1::QueryLastPendingBatchRequestByAddrResponse, ::injective::peggy::v1::QueryLastPendingBatchRequestByAddrRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_LastPendingBatchRequestByAddr_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryLastPendingBatchRequestByAddrResponse>* Query::Stub::AsyncLastPendingBatchRequestByAddrRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryLastPendingBatchRequestByAddrRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncLastPendingBatchRequestByAddrRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::BatchRequestByNonce(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryBatchRequestByNonceRequest& request, ::injective::peggy::v1::QueryBatchRequestByNonceResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::peggy::v1::QueryBatchRequestByNonceRequest, ::injective::peggy::v1::QueryBatchRequestByNonceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_BatchRequestByNonce_, context, request, response);
}

void Query::Stub::async::BatchRequestByNonce(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryBatchRequestByNonceRequest* request, ::injective::peggy::v1::QueryBatchRequestByNonceResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::peggy::v1::QueryBatchRequestByNonceRequest, ::injective::peggy::v1::QueryBatchRequestByNonceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_BatchRequestByNonce_, context, request, response, std::move(f));
}

void Query::Stub::async::BatchRequestByNonce(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryBatchRequestByNonceRequest* request, ::injective::peggy::v1::QueryBatchRequestByNonceResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_BatchRequestByNonce_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryBatchRequestByNonceResponse>* Query::Stub::PrepareAsyncBatchRequestByNonceRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryBatchRequestByNonceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::peggy::v1::QueryBatchRequestByNonceResponse, ::injective::peggy::v1::QueryBatchRequestByNonceRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_BatchRequestByNonce_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryBatchRequestByNonceResponse>* Query::Stub::AsyncBatchRequestByNonceRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryBatchRequestByNonceRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncBatchRequestByNonceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::BatchConfirms(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryBatchConfirmsRequest& request, ::injective::peggy::v1::QueryBatchConfirmsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::peggy::v1::QueryBatchConfirmsRequest, ::injective::peggy::v1::QueryBatchConfirmsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_BatchConfirms_, context, request, response);
}

void Query::Stub::async::BatchConfirms(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryBatchConfirmsRequest* request, ::injective::peggy::v1::QueryBatchConfirmsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::peggy::v1::QueryBatchConfirmsRequest, ::injective::peggy::v1::QueryBatchConfirmsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_BatchConfirms_, context, request, response, std::move(f));
}

void Query::Stub::async::BatchConfirms(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryBatchConfirmsRequest* request, ::injective::peggy::v1::QueryBatchConfirmsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_BatchConfirms_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryBatchConfirmsResponse>* Query::Stub::PrepareAsyncBatchConfirmsRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryBatchConfirmsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::peggy::v1::QueryBatchConfirmsResponse, ::injective::peggy::v1::QueryBatchConfirmsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_BatchConfirms_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryBatchConfirmsResponse>* Query::Stub::AsyncBatchConfirmsRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryBatchConfirmsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncBatchConfirmsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::ERC20ToDenom(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryERC20ToDenomRequest& request, ::injective::peggy::v1::QueryERC20ToDenomResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::peggy::v1::QueryERC20ToDenomRequest, ::injective::peggy::v1::QueryERC20ToDenomResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ERC20ToDenom_, context, request, response);
}

void Query::Stub::async::ERC20ToDenom(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryERC20ToDenomRequest* request, ::injective::peggy::v1::QueryERC20ToDenomResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::peggy::v1::QueryERC20ToDenomRequest, ::injective::peggy::v1::QueryERC20ToDenomResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ERC20ToDenom_, context, request, response, std::move(f));
}

void Query::Stub::async::ERC20ToDenom(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryERC20ToDenomRequest* request, ::injective::peggy::v1::QueryERC20ToDenomResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ERC20ToDenom_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryERC20ToDenomResponse>* Query::Stub::PrepareAsyncERC20ToDenomRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryERC20ToDenomRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::peggy::v1::QueryERC20ToDenomResponse, ::injective::peggy::v1::QueryERC20ToDenomRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ERC20ToDenom_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryERC20ToDenomResponse>* Query::Stub::AsyncERC20ToDenomRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryERC20ToDenomRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncERC20ToDenomRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::DenomToERC20(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryDenomToERC20Request& request, ::injective::peggy::v1::QueryDenomToERC20Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::peggy::v1::QueryDenomToERC20Request, ::injective::peggy::v1::QueryDenomToERC20Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DenomToERC20_, context, request, response);
}

void Query::Stub::async::DenomToERC20(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryDenomToERC20Request* request, ::injective::peggy::v1::QueryDenomToERC20Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::peggy::v1::QueryDenomToERC20Request, ::injective::peggy::v1::QueryDenomToERC20Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DenomToERC20_, context, request, response, std::move(f));
}

void Query::Stub::async::DenomToERC20(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryDenomToERC20Request* request, ::injective::peggy::v1::QueryDenomToERC20Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DenomToERC20_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryDenomToERC20Response>* Query::Stub::PrepareAsyncDenomToERC20Raw(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryDenomToERC20Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::peggy::v1::QueryDenomToERC20Response, ::injective::peggy::v1::QueryDenomToERC20Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DenomToERC20_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryDenomToERC20Response>* Query::Stub::AsyncDenomToERC20Raw(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryDenomToERC20Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDenomToERC20Raw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::GetDelegateKeyByValidator(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryDelegateKeysByValidatorAddress& request, ::injective::peggy::v1::QueryDelegateKeysByValidatorAddressResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::peggy::v1::QueryDelegateKeysByValidatorAddress, ::injective::peggy::v1::QueryDelegateKeysByValidatorAddressResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetDelegateKeyByValidator_, context, request, response);
}

void Query::Stub::async::GetDelegateKeyByValidator(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryDelegateKeysByValidatorAddress* request, ::injective::peggy::v1::QueryDelegateKeysByValidatorAddressResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::peggy::v1::QueryDelegateKeysByValidatorAddress, ::injective::peggy::v1::QueryDelegateKeysByValidatorAddressResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDelegateKeyByValidator_, context, request, response, std::move(f));
}

void Query::Stub::async::GetDelegateKeyByValidator(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryDelegateKeysByValidatorAddress* request, ::injective::peggy::v1::QueryDelegateKeysByValidatorAddressResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDelegateKeyByValidator_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryDelegateKeysByValidatorAddressResponse>* Query::Stub::PrepareAsyncGetDelegateKeyByValidatorRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryDelegateKeysByValidatorAddress& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::peggy::v1::QueryDelegateKeysByValidatorAddressResponse, ::injective::peggy::v1::QueryDelegateKeysByValidatorAddress, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetDelegateKeyByValidator_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryDelegateKeysByValidatorAddressResponse>* Query::Stub::AsyncGetDelegateKeyByValidatorRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryDelegateKeysByValidatorAddress& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetDelegateKeyByValidatorRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::GetDelegateKeyByEth(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryDelegateKeysByEthAddress& request, ::injective::peggy::v1::QueryDelegateKeysByEthAddressResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::peggy::v1::QueryDelegateKeysByEthAddress, ::injective::peggy::v1::QueryDelegateKeysByEthAddressResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetDelegateKeyByEth_, context, request, response);
}

void Query::Stub::async::GetDelegateKeyByEth(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryDelegateKeysByEthAddress* request, ::injective::peggy::v1::QueryDelegateKeysByEthAddressResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::peggy::v1::QueryDelegateKeysByEthAddress, ::injective::peggy::v1::QueryDelegateKeysByEthAddressResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDelegateKeyByEth_, context, request, response, std::move(f));
}

void Query::Stub::async::GetDelegateKeyByEth(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryDelegateKeysByEthAddress* request, ::injective::peggy::v1::QueryDelegateKeysByEthAddressResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDelegateKeyByEth_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryDelegateKeysByEthAddressResponse>* Query::Stub::PrepareAsyncGetDelegateKeyByEthRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryDelegateKeysByEthAddress& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::peggy::v1::QueryDelegateKeysByEthAddressResponse, ::injective::peggy::v1::QueryDelegateKeysByEthAddress, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetDelegateKeyByEth_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryDelegateKeysByEthAddressResponse>* Query::Stub::AsyncGetDelegateKeyByEthRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryDelegateKeysByEthAddress& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetDelegateKeyByEthRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::GetDelegateKeyByOrchestrator(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryDelegateKeysByOrchestratorAddress& request, ::injective::peggy::v1::QueryDelegateKeysByOrchestratorAddressResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::peggy::v1::QueryDelegateKeysByOrchestratorAddress, ::injective::peggy::v1::QueryDelegateKeysByOrchestratorAddressResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetDelegateKeyByOrchestrator_, context, request, response);
}

void Query::Stub::async::GetDelegateKeyByOrchestrator(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryDelegateKeysByOrchestratorAddress* request, ::injective::peggy::v1::QueryDelegateKeysByOrchestratorAddressResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::peggy::v1::QueryDelegateKeysByOrchestratorAddress, ::injective::peggy::v1::QueryDelegateKeysByOrchestratorAddressResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDelegateKeyByOrchestrator_, context, request, response, std::move(f));
}

void Query::Stub::async::GetDelegateKeyByOrchestrator(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryDelegateKeysByOrchestratorAddress* request, ::injective::peggy::v1::QueryDelegateKeysByOrchestratorAddressResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDelegateKeyByOrchestrator_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryDelegateKeysByOrchestratorAddressResponse>* Query::Stub::PrepareAsyncGetDelegateKeyByOrchestratorRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryDelegateKeysByOrchestratorAddress& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::peggy::v1::QueryDelegateKeysByOrchestratorAddressResponse, ::injective::peggy::v1::QueryDelegateKeysByOrchestratorAddress, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetDelegateKeyByOrchestrator_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryDelegateKeysByOrchestratorAddressResponse>* Query::Stub::AsyncGetDelegateKeyByOrchestratorRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryDelegateKeysByOrchestratorAddress& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetDelegateKeyByOrchestratorRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::PeggyModuleState(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryModuleStateRequest& request, ::injective::peggy::v1::QueryModuleStateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::peggy::v1::QueryModuleStateRequest, ::injective::peggy::v1::QueryModuleStateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PeggyModuleState_, context, request, response);
}

void Query::Stub::async::PeggyModuleState(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryModuleStateRequest* request, ::injective::peggy::v1::QueryModuleStateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::peggy::v1::QueryModuleStateRequest, ::injective::peggy::v1::QueryModuleStateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PeggyModuleState_, context, request, response, std::move(f));
}

void Query::Stub::async::PeggyModuleState(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryModuleStateRequest* request, ::injective::peggy::v1::QueryModuleStateResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PeggyModuleState_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryModuleStateResponse>* Query::Stub::PrepareAsyncPeggyModuleStateRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryModuleStateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::peggy::v1::QueryModuleStateResponse, ::injective::peggy::v1::QueryModuleStateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PeggyModuleState_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryModuleStateResponse>* Query::Stub::AsyncPeggyModuleStateRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryModuleStateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPeggyModuleStateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::MissingPeggoNonces(::grpc::ClientContext* context, const ::injective::peggy::v1::MissingNoncesRequest& request, ::injective::peggy::v1::MissingNoncesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::peggy::v1::MissingNoncesRequest, ::injective::peggy::v1::MissingNoncesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_MissingPeggoNonces_, context, request, response);
}

void Query::Stub::async::MissingPeggoNonces(::grpc::ClientContext* context, const ::injective::peggy::v1::MissingNoncesRequest* request, ::injective::peggy::v1::MissingNoncesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::peggy::v1::MissingNoncesRequest, ::injective::peggy::v1::MissingNoncesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_MissingPeggoNonces_, context, request, response, std::move(f));
}

void Query::Stub::async::MissingPeggoNonces(::grpc::ClientContext* context, const ::injective::peggy::v1::MissingNoncesRequest* request, ::injective::peggy::v1::MissingNoncesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_MissingPeggoNonces_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::MissingNoncesResponse>* Query::Stub::PrepareAsyncMissingPeggoNoncesRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::MissingNoncesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::peggy::v1::MissingNoncesResponse, ::injective::peggy::v1::MissingNoncesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_MissingPeggoNonces_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::MissingNoncesResponse>* Query::Stub::AsyncMissingPeggoNoncesRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::MissingNoncesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncMissingPeggoNoncesRaw(context, request, cq);
  result->StartCall();
  return result;
}

Query::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::injective::peggy::v1::QueryParamsRequest, ::injective::peggy::v1::QueryParamsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::peggy::v1::QueryParamsRequest* req,
             ::injective::peggy::v1::QueryParamsResponse* resp) {
               return service->Params(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::injective::peggy::v1::QueryCurrentValsetRequest, ::injective::peggy::v1::QueryCurrentValsetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::peggy::v1::QueryCurrentValsetRequest* req,
             ::injective::peggy::v1::QueryCurrentValsetResponse* resp) {
               return service->CurrentValset(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::injective::peggy::v1::QueryValsetRequestRequest, ::injective::peggy::v1::QueryValsetRequestResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::peggy::v1::QueryValsetRequestRequest* req,
             ::injective::peggy::v1::QueryValsetRequestResponse* resp) {
               return service->ValsetRequest(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::injective::peggy::v1::QueryValsetConfirmRequest, ::injective::peggy::v1::QueryValsetConfirmResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::peggy::v1::QueryValsetConfirmRequest* req,
             ::injective::peggy::v1::QueryValsetConfirmResponse* resp) {
               return service->ValsetConfirm(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::injective::peggy::v1::QueryValsetConfirmsByNonceRequest, ::injective::peggy::v1::QueryValsetConfirmsByNonceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::peggy::v1::QueryValsetConfirmsByNonceRequest* req,
             ::injective::peggy::v1::QueryValsetConfirmsByNonceResponse* resp) {
               return service->ValsetConfirmsByNonce(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::injective::peggy::v1::QueryLastValsetRequestsRequest, ::injective::peggy::v1::QueryLastValsetRequestsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::peggy::v1::QueryLastValsetRequestsRequest* req,
             ::injective::peggy::v1::QueryLastValsetRequestsResponse* resp) {
               return service->LastValsetRequests(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::injective::peggy::v1::QueryLastPendingValsetRequestByAddrRequest, ::injective::peggy::v1::QueryLastPendingValsetRequestByAddrResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::peggy::v1::QueryLastPendingValsetRequestByAddrRequest* req,
             ::injective::peggy::v1::QueryLastPendingValsetRequestByAddrResponse* resp) {
               return service->LastPendingValsetRequestByAddr(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::injective::peggy::v1::QueryLastEventByAddrRequest, ::injective::peggy::v1::QueryLastEventByAddrResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::peggy::v1::QueryLastEventByAddrRequest* req,
             ::injective::peggy::v1::QueryLastEventByAddrResponse* resp) {
               return service->LastEventByAddr(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::injective::peggy::v1::QueryPendingSendToEth, ::injective::peggy::v1::QueryPendingSendToEthResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::peggy::v1::QueryPendingSendToEth* req,
             ::injective::peggy::v1::QueryPendingSendToEthResponse* resp) {
               return service->GetPendingSendToEth(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::injective::peggy::v1::QueryBatchFeeRequest, ::injective::peggy::v1::QueryBatchFeeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::peggy::v1::QueryBatchFeeRequest* req,
             ::injective::peggy::v1::QueryBatchFeeResponse* resp) {
               return service->BatchFees(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::injective::peggy::v1::QueryOutgoingTxBatchesRequest, ::injective::peggy::v1::QueryOutgoingTxBatchesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::peggy::v1::QueryOutgoingTxBatchesRequest* req,
             ::injective::peggy::v1::QueryOutgoingTxBatchesResponse* resp) {
               return service->OutgoingTxBatches(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::injective::peggy::v1::QueryLastPendingBatchRequestByAddrRequest, ::injective::peggy::v1::QueryLastPendingBatchRequestByAddrResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::peggy::v1::QueryLastPendingBatchRequestByAddrRequest* req,
             ::injective::peggy::v1::QueryLastPendingBatchRequestByAddrResponse* resp) {
               return service->LastPendingBatchRequestByAddr(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::injective::peggy::v1::QueryBatchRequestByNonceRequest, ::injective::peggy::v1::QueryBatchRequestByNonceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::peggy::v1::QueryBatchRequestByNonceRequest* req,
             ::injective::peggy::v1::QueryBatchRequestByNonceResponse* resp) {
               return service->BatchRequestByNonce(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::injective::peggy::v1::QueryBatchConfirmsRequest, ::injective::peggy::v1::QueryBatchConfirmsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::peggy::v1::QueryBatchConfirmsRequest* req,
             ::injective::peggy::v1::QueryBatchConfirmsResponse* resp) {
               return service->BatchConfirms(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::injective::peggy::v1::QueryERC20ToDenomRequest, ::injective::peggy::v1::QueryERC20ToDenomResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::peggy::v1::QueryERC20ToDenomRequest* req,
             ::injective::peggy::v1::QueryERC20ToDenomResponse* resp) {
               return service->ERC20ToDenom(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::injective::peggy::v1::QueryDenomToERC20Request, ::injective::peggy::v1::QueryDenomToERC20Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::peggy::v1::QueryDenomToERC20Request* req,
             ::injective::peggy::v1::QueryDenomToERC20Response* resp) {
               return service->DenomToERC20(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::injective::peggy::v1::QueryDelegateKeysByValidatorAddress, ::injective::peggy::v1::QueryDelegateKeysByValidatorAddressResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::peggy::v1::QueryDelegateKeysByValidatorAddress* req,
             ::injective::peggy::v1::QueryDelegateKeysByValidatorAddressResponse* resp) {
               return service->GetDelegateKeyByValidator(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[17],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::injective::peggy::v1::QueryDelegateKeysByEthAddress, ::injective::peggy::v1::QueryDelegateKeysByEthAddressResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::peggy::v1::QueryDelegateKeysByEthAddress* req,
             ::injective::peggy::v1::QueryDelegateKeysByEthAddressResponse* resp) {
               return service->GetDelegateKeyByEth(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[18],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::injective::peggy::v1::QueryDelegateKeysByOrchestratorAddress, ::injective::peggy::v1::QueryDelegateKeysByOrchestratorAddressResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::peggy::v1::QueryDelegateKeysByOrchestratorAddress* req,
             ::injective::peggy::v1::QueryDelegateKeysByOrchestratorAddressResponse* resp) {
               return service->GetDelegateKeyByOrchestrator(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[19],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::injective::peggy::v1::QueryModuleStateRequest, ::injective::peggy::v1::QueryModuleStateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::peggy::v1::QueryModuleStateRequest* req,
             ::injective::peggy::v1::QueryModuleStateResponse* resp) {
               return service->PeggyModuleState(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[20],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::injective::peggy::v1::MissingNoncesRequest, ::injective::peggy::v1::MissingNoncesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::peggy::v1::MissingNoncesRequest* req,
             ::injective::peggy::v1::MissingNoncesResponse* resp) {
               return service->MissingPeggoNonces(ctx, req, resp);
             }, this)));
}

Query::Service::~Service() {
}

::grpc::Status Query::Service::Params(::grpc::ServerContext* context, const ::injective::peggy::v1::QueryParamsRequest* request, ::injective::peggy::v1::QueryParamsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::CurrentValset(::grpc::ServerContext* context, const ::injective::peggy::v1::QueryCurrentValsetRequest* request, ::injective::peggy::v1::QueryCurrentValsetResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::ValsetRequest(::grpc::ServerContext* context, const ::injective::peggy::v1::QueryValsetRequestRequest* request, ::injective::peggy::v1::QueryValsetRequestResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::ValsetConfirm(::grpc::ServerContext* context, const ::injective::peggy::v1::QueryValsetConfirmRequest* request, ::injective::peggy::v1::QueryValsetConfirmResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::ValsetConfirmsByNonce(::grpc::ServerContext* context, const ::injective::peggy::v1::QueryValsetConfirmsByNonceRequest* request, ::injective::peggy::v1::QueryValsetConfirmsByNonceResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::LastValsetRequests(::grpc::ServerContext* context, const ::injective::peggy::v1::QueryLastValsetRequestsRequest* request, ::injective::peggy::v1::QueryLastValsetRequestsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::LastPendingValsetRequestByAddr(::grpc::ServerContext* context, const ::injective::peggy::v1::QueryLastPendingValsetRequestByAddrRequest* request, ::injective::peggy::v1::QueryLastPendingValsetRequestByAddrResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::LastEventByAddr(::grpc::ServerContext* context, const ::injective::peggy::v1::QueryLastEventByAddrRequest* request, ::injective::peggy::v1::QueryLastEventByAddrResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::GetPendingSendToEth(::grpc::ServerContext* context, const ::injective::peggy::v1::QueryPendingSendToEth* request, ::injective::peggy::v1::QueryPendingSendToEthResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::BatchFees(::grpc::ServerContext* context, const ::injective::peggy::v1::QueryBatchFeeRequest* request, ::injective::peggy::v1::QueryBatchFeeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::OutgoingTxBatches(::grpc::ServerContext* context, const ::injective::peggy::v1::QueryOutgoingTxBatchesRequest* request, ::injective::peggy::v1::QueryOutgoingTxBatchesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::LastPendingBatchRequestByAddr(::grpc::ServerContext* context, const ::injective::peggy::v1::QueryLastPendingBatchRequestByAddrRequest* request, ::injective::peggy::v1::QueryLastPendingBatchRequestByAddrResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::BatchRequestByNonce(::grpc::ServerContext* context, const ::injective::peggy::v1::QueryBatchRequestByNonceRequest* request, ::injective::peggy::v1::QueryBatchRequestByNonceResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::BatchConfirms(::grpc::ServerContext* context, const ::injective::peggy::v1::QueryBatchConfirmsRequest* request, ::injective::peggy::v1::QueryBatchConfirmsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::ERC20ToDenom(::grpc::ServerContext* context, const ::injective::peggy::v1::QueryERC20ToDenomRequest* request, ::injective::peggy::v1::QueryERC20ToDenomResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::DenomToERC20(::grpc::ServerContext* context, const ::injective::peggy::v1::QueryDenomToERC20Request* request, ::injective::peggy::v1::QueryDenomToERC20Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::GetDelegateKeyByValidator(::grpc::ServerContext* context, const ::injective::peggy::v1::QueryDelegateKeysByValidatorAddress* request, ::injective::peggy::v1::QueryDelegateKeysByValidatorAddressResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::GetDelegateKeyByEth(::grpc::ServerContext* context, const ::injective::peggy::v1::QueryDelegateKeysByEthAddress* request, ::injective::peggy::v1::QueryDelegateKeysByEthAddressResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::GetDelegateKeyByOrchestrator(::grpc::ServerContext* context, const ::injective::peggy::v1::QueryDelegateKeysByOrchestratorAddress* request, ::injective::peggy::v1::QueryDelegateKeysByOrchestratorAddressResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::PeggyModuleState(::grpc::ServerContext* context, const ::injective::peggy::v1::QueryModuleStateRequest* request, ::injective::peggy::v1::QueryModuleStateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::MissingPeggoNonces(::grpc::ServerContext* context, const ::injective::peggy::v1::MissingNoncesRequest* request, ::injective::peggy::v1::MissingNoncesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace injective
}  // namespace peggy
}  // namespace v1


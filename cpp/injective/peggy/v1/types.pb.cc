// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: injective/peggy/v1/types.proto

#include "injective/peggy/v1/types.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace injective {
namespace peggy {
namespace v1 {
template <typename>
PROTOBUF_CONSTEXPR BridgeValidator::BridgeValidator(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ethereum_address_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.power_)*/ ::uint64_t{0u}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BridgeValidatorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BridgeValidatorDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BridgeValidatorDefaultTypeInternal() {}
  union {
    BridgeValidator _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BridgeValidatorDefaultTypeInternal _BridgeValidator_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Valset::Valset(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.members_)*/{}
  , /*decltype(_impl_.reward_amount_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.reward_token_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.nonce_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.height_)*/ ::uint64_t{0u}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ValsetDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ValsetDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ValsetDefaultTypeInternal() {}
  union {
    Valset _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ValsetDefaultTypeInternal _Valset_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR LastObservedEthereumBlockHeight::LastObservedEthereumBlockHeight(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.cosmos_block_height_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.ethereum_block_height_)*/ ::uint64_t{0u}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LastObservedEthereumBlockHeightDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LastObservedEthereumBlockHeightDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~LastObservedEthereumBlockHeightDefaultTypeInternal() {}
  union {
    LastObservedEthereumBlockHeight _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LastObservedEthereumBlockHeightDefaultTypeInternal _LastObservedEthereumBlockHeight_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR LastClaimEvent::LastClaimEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ethereum_event_nonce_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.ethereum_event_height_)*/ ::uint64_t{0u}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LastClaimEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LastClaimEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~LastClaimEventDefaultTypeInternal() {}
  union {
    LastClaimEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LastClaimEventDefaultTypeInternal _LastClaimEvent_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ERC20ToDenom::ERC20ToDenom(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.erc20_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.denom_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ERC20ToDenomDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ERC20ToDenomDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ERC20ToDenomDefaultTypeInternal() {}
  union {
    ERC20ToDenom _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ERC20ToDenomDefaultTypeInternal _ERC20ToDenom_default_instance_;
}  // namespace v1
}  // namespace peggy
}  // namespace injective
static ::_pb::Metadata file_level_metadata_injective_2fpeggy_2fv1_2ftypes_2eproto[5];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_injective_2fpeggy_2fv1_2ftypes_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_injective_2fpeggy_2fv1_2ftypes_2eproto = nullptr;
const ::uint32_t TableStruct_injective_2fpeggy_2fv1_2ftypes_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::BridgeValidator, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::BridgeValidator, _impl_.power_),
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::BridgeValidator, _impl_.ethereum_address_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::Valset, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::Valset, _impl_.nonce_),
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::Valset, _impl_.members_),
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::Valset, _impl_.height_),
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::Valset, _impl_.reward_amount_),
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::Valset, _impl_.reward_token_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::LastObservedEthereumBlockHeight, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::LastObservedEthereumBlockHeight, _impl_.cosmos_block_height_),
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::LastObservedEthereumBlockHeight, _impl_.ethereum_block_height_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::LastClaimEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::LastClaimEvent, _impl_.ethereum_event_nonce_),
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::LastClaimEvent, _impl_.ethereum_event_height_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::ERC20ToDenom, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::ERC20ToDenom, _impl_.erc20_),
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::ERC20ToDenom, _impl_.denom_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::injective::peggy::v1::BridgeValidator)},
        { 10, -1, -1, sizeof(::injective::peggy::v1::Valset)},
        { 23, -1, -1, sizeof(::injective::peggy::v1::LastObservedEthereumBlockHeight)},
        { 33, -1, -1, sizeof(::injective::peggy::v1::LastClaimEvent)},
        { 43, -1, -1, sizeof(::injective::peggy::v1::ERC20ToDenom)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::injective::peggy::v1::_BridgeValidator_default_instance_._instance,
    &::injective::peggy::v1::_Valset_default_instance_._instance,
    &::injective::peggy::v1::_LastObservedEthereumBlockHeight_default_instance_._instance,
    &::injective::peggy::v1::_LastClaimEvent_default_instance_._instance,
    &::injective::peggy::v1::_ERC20ToDenom_default_instance_._instance,
};
const char descriptor_table_protodef_injective_2fpeggy_2fv1_2ftypes_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\036injective/peggy/v1/types.proto\022\022inject"
    "ive.peggy.v1\032\024gogoproto/gogo.proto\"R\n\017Br"
    "idgeValidator\022\024\n\005power\030\001 \001(\004R\005power\022)\n\020e"
    "thereum_address\030\002 \001(\tR\017ethereumAddress\"\355"
    "\001\n\006Valset\022\024\n\005nonce\030\001 \001(\004R\005nonce\022=\n\007membe"
    "rs\030\002 \003(\0132#.injective.peggy.v1.BridgeVali"
    "datorR\007members\022\026\n\006height\030\003 \001(\004R\006height\022S"
    "\n\rreward_amount\030\004 \001(\tB.\310\336\037\000\332\336\037&github.co"
    "m/cosmos/cosmos-sdk/types.IntR\014rewardAmo"
    "unt\022!\n\014reward_token\030\005 \001(\tR\013rewardToken\"\205"
    "\001\n\037LastObservedEthereumBlockHeight\022.\n\023co"
    "smos_block_height\030\001 \001(\004R\021cosmosBlockHeig"
    "ht\0222\n\025ethereum_block_height\030\002 \001(\004R\023ether"
    "eumBlockHeight\"v\n\016LastClaimEvent\0220\n\024ethe"
    "reum_event_nonce\030\001 \001(\004R\022ethereumEventNon"
    "ce\0222\n\025ethereum_event_height\030\002 \001(\004R\023ether"
    "eumEventHeight\":\n\014ERC20ToDenom\022\024\n\005erc20\030"
    "\001 \001(\tR\005erc20\022\024\n\005denom\030\002 \001(\tR\005denomB\333\001\n\026c"
    "om.injective.peggy.v1B\nTypesProtoP\001ZKgit"
    "hub.com/InjectiveLabs/injective-core/inj"
    "ective-chain/modules/peggy/types\242\002\003IPX\252\002"
    "\022Injective.Peggy.V1\312\002\022Injective\\Peggy\\V1"
    "\342\002\036Injective\\Peggy\\V1\\GPBMetadata\352\002\024Inje"
    "ctive::Peggy::V1b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_injective_2fpeggy_2fv1_2ftypes_2eproto_deps[1] =
    {
        &::descriptor_table_gogoproto_2fgogo_2eproto,
};
static ::absl::once_flag descriptor_table_injective_2fpeggy_2fv1_2ftypes_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_injective_2fpeggy_2fv1_2ftypes_2eproto = {
    false,
    false,
    944,
    descriptor_table_protodef_injective_2fpeggy_2fv1_2ftypes_2eproto,
    "injective/peggy/v1/types.proto",
    &descriptor_table_injective_2fpeggy_2fv1_2ftypes_2eproto_once,
    descriptor_table_injective_2fpeggy_2fv1_2ftypes_2eproto_deps,
    1,
    5,
    schemas,
    file_default_instances,
    TableStruct_injective_2fpeggy_2fv1_2ftypes_2eproto::offsets,
    file_level_metadata_injective_2fpeggy_2fv1_2ftypes_2eproto,
    file_level_enum_descriptors_injective_2fpeggy_2fv1_2ftypes_2eproto,
    file_level_service_descriptors_injective_2fpeggy_2fv1_2ftypes_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_injective_2fpeggy_2fv1_2ftypes_2eproto_getter() {
  return &descriptor_table_injective_2fpeggy_2fv1_2ftypes_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_injective_2fpeggy_2fv1_2ftypes_2eproto(&descriptor_table_injective_2fpeggy_2fv1_2ftypes_2eproto);
namespace injective {
namespace peggy {
namespace v1 {
// ===================================================================

class BridgeValidator::_Internal {
 public:
};

BridgeValidator::BridgeValidator(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.peggy.v1.BridgeValidator)
}
BridgeValidator::BridgeValidator(const BridgeValidator& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BridgeValidator* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ethereum_address_) {}

    , decltype(_impl_.power_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.ethereum_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.ethereum_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ethereum_address().empty()) {
    _this->_impl_.ethereum_address_.Set(from._internal_ethereum_address(), _this->GetArenaForAllocation());
  }
  _this->_impl_.power_ = from._impl_.power_;
  // @@protoc_insertion_point(copy_constructor:injective.peggy.v1.BridgeValidator)
}

inline void BridgeValidator::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.ethereum_address_) {}

    , decltype(_impl_.power_) { ::uint64_t{0u} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.ethereum_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.ethereum_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BridgeValidator::~BridgeValidator() {
  // @@protoc_insertion_point(destructor:injective.peggy.v1.BridgeValidator)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BridgeValidator::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ethereum_address_.Destroy();
}

void BridgeValidator::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BridgeValidator::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.peggy.v1.BridgeValidator)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ethereum_address_.ClearToEmpty();
  _impl_.power_ = ::uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BridgeValidator::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 power = 1 [json_name = "power"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.power_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string ethereum_address = 2 [json_name = "ethereumAddress"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_ethereum_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.peggy.v1.BridgeValidator.ethereum_address"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* BridgeValidator::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.peggy.v1.BridgeValidator)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 power = 1 [json_name = "power"];
  if (this->_internal_power() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_power(), target);
  }

  // string ethereum_address = 2 [json_name = "ethereumAddress"];
  if (!this->_internal_ethereum_address().empty()) {
    const std::string& _s = this->_internal_ethereum_address();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.peggy.v1.BridgeValidator.ethereum_address");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.peggy.v1.BridgeValidator)
  return target;
}

::size_t BridgeValidator::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.peggy.v1.BridgeValidator)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ethereum_address = 2 [json_name = "ethereumAddress"];
  if (!this->_internal_ethereum_address().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_ethereum_address());
  }

  // uint64 power = 1 [json_name = "power"];
  if (this->_internal_power() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_power());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BridgeValidator::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BridgeValidator::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BridgeValidator::GetClassData() const { return &_class_data_; }


void BridgeValidator::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BridgeValidator*>(&to_msg);
  auto& from = static_cast<const BridgeValidator&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.peggy.v1.BridgeValidator)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_ethereum_address().empty()) {
    _this->_internal_set_ethereum_address(from._internal_ethereum_address());
  }
  if (from._internal_power() != 0) {
    _this->_internal_set_power(from._internal_power());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BridgeValidator::CopyFrom(const BridgeValidator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.peggy.v1.BridgeValidator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BridgeValidator::IsInitialized() const {
  return true;
}

void BridgeValidator::InternalSwap(BridgeValidator* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.ethereum_address_, lhs_arena,
                                       &other->_impl_.ethereum_address_, rhs_arena);

  swap(_impl_.power_, other->_impl_.power_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BridgeValidator::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fpeggy_2fv1_2ftypes_2eproto_getter, &descriptor_table_injective_2fpeggy_2fv1_2ftypes_2eproto_once,
      file_level_metadata_injective_2fpeggy_2fv1_2ftypes_2eproto[0]);
}
// ===================================================================

class Valset::_Internal {
 public:
};

Valset::Valset(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.peggy.v1.Valset)
}
Valset::Valset(const Valset& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Valset* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.members_){from._impl_.members_}
    , decltype(_impl_.reward_amount_) {}

    , decltype(_impl_.reward_token_) {}

    , decltype(_impl_.nonce_) {}

    , decltype(_impl_.height_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.reward_amount_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.reward_amount_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_reward_amount().empty()) {
    _this->_impl_.reward_amount_.Set(from._internal_reward_amount(), _this->GetArenaForAllocation());
  }
  _impl_.reward_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.reward_token_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_reward_token().empty()) {
    _this->_impl_.reward_token_.Set(from._internal_reward_token(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.nonce_, &from._impl_.nonce_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.height_) -
    reinterpret_cast<char*>(&_impl_.nonce_)) + sizeof(_impl_.height_));
  // @@protoc_insertion_point(copy_constructor:injective.peggy.v1.Valset)
}

inline void Valset::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.members_){arena}
    , decltype(_impl_.reward_amount_) {}

    , decltype(_impl_.reward_token_) {}

    , decltype(_impl_.nonce_) { ::uint64_t{0u} }

    , decltype(_impl_.height_) { ::uint64_t{0u} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.reward_amount_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.reward_amount_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.reward_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.reward_token_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Valset::~Valset() {
  // @@protoc_insertion_point(destructor:injective.peggy.v1.Valset)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Valset::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_members()->~RepeatedPtrField();
  _impl_.reward_amount_.Destroy();
  _impl_.reward_token_.Destroy();
}

void Valset::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Valset::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.peggy.v1.Valset)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_members()->Clear();
  _impl_.reward_amount_.ClearToEmpty();
  _impl_.reward_token_.ClearToEmpty();
  ::memset(&_impl_.nonce_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.height_) -
      reinterpret_cast<char*>(&_impl_.nonce_)) + sizeof(_impl_.height_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Valset::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 nonce = 1 [json_name = "nonce"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.nonce_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .injective.peggy.v1.BridgeValidator members = 2 [json_name = "members"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_members(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 height = 3 [json_name = "height"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string reward_amount = 4 [json_name = "rewardAmount", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_reward_amount();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.peggy.v1.Valset.reward_amount"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string reward_token = 5 [json_name = "rewardToken"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_reward_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.peggy.v1.Valset.reward_token"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Valset::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.peggy.v1.Valset)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 nonce = 1 [json_name = "nonce"];
  if (this->_internal_nonce() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_nonce(), target);
  }

  // repeated .injective.peggy.v1.BridgeValidator members = 2 [json_name = "members"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_members_size()); i < n; i++) {
    const auto& repfield = this->_internal_members(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // uint64 height = 3 [json_name = "height"];
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        3, this->_internal_height(), target);
  }

  // string reward_amount = 4 [json_name = "rewardAmount", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int"];
  if (!this->_internal_reward_amount().empty()) {
    const std::string& _s = this->_internal_reward_amount();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.peggy.v1.Valset.reward_amount");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // string reward_token = 5 [json_name = "rewardToken"];
  if (!this->_internal_reward_token().empty()) {
    const std::string& _s = this->_internal_reward_token();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.peggy.v1.Valset.reward_token");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.peggy.v1.Valset)
  return target;
}

::size_t Valset::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.peggy.v1.Valset)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .injective.peggy.v1.BridgeValidator members = 2 [json_name = "members"];
  total_size += 1UL * this->_internal_members_size();
  for (const auto& msg : this->_internal_members()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string reward_amount = 4 [json_name = "rewardAmount", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int"];
  if (!this->_internal_reward_amount().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_reward_amount());
  }

  // string reward_token = 5 [json_name = "rewardToken"];
  if (!this->_internal_reward_token().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_reward_token());
  }

  // uint64 nonce = 1 [json_name = "nonce"];
  if (this->_internal_nonce() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_nonce());
  }

  // uint64 height = 3 [json_name = "height"];
  if (this->_internal_height() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_height());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Valset::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Valset::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Valset::GetClassData() const { return &_class_data_; }


void Valset::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Valset*>(&to_msg);
  auto& from = static_cast<const Valset&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.peggy.v1.Valset)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_members()->MergeFrom(from._internal_members());
  if (!from._internal_reward_amount().empty()) {
    _this->_internal_set_reward_amount(from._internal_reward_amount());
  }
  if (!from._internal_reward_token().empty()) {
    _this->_internal_set_reward_token(from._internal_reward_token());
  }
  if (from._internal_nonce() != 0) {
    _this->_internal_set_nonce(from._internal_nonce());
  }
  if (from._internal_height() != 0) {
    _this->_internal_set_height(from._internal_height());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Valset::CopyFrom(const Valset& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.peggy.v1.Valset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Valset::IsInitialized() const {
  return true;
}

void Valset::InternalSwap(Valset* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_members()->InternalSwap(other->_internal_mutable_members());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.reward_amount_, lhs_arena,
                                       &other->_impl_.reward_amount_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.reward_token_, lhs_arena,
                                       &other->_impl_.reward_token_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Valset, _impl_.height_)
      + sizeof(Valset::_impl_.height_)
      - PROTOBUF_FIELD_OFFSET(Valset, _impl_.nonce_)>(
          reinterpret_cast<char*>(&_impl_.nonce_),
          reinterpret_cast<char*>(&other->_impl_.nonce_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Valset::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fpeggy_2fv1_2ftypes_2eproto_getter, &descriptor_table_injective_2fpeggy_2fv1_2ftypes_2eproto_once,
      file_level_metadata_injective_2fpeggy_2fv1_2ftypes_2eproto[1]);
}
// ===================================================================

class LastObservedEthereumBlockHeight::_Internal {
 public:
};

LastObservedEthereumBlockHeight::LastObservedEthereumBlockHeight(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.peggy.v1.LastObservedEthereumBlockHeight)
}
LastObservedEthereumBlockHeight::LastObservedEthereumBlockHeight(const LastObservedEthereumBlockHeight& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:injective.peggy.v1.LastObservedEthereumBlockHeight)
}

inline void LastObservedEthereumBlockHeight::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.cosmos_block_height_) { ::uint64_t{0u} }

    , decltype(_impl_.ethereum_block_height_) { ::uint64_t{0u} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

LastObservedEthereumBlockHeight::~LastObservedEthereumBlockHeight() {
  // @@protoc_insertion_point(destructor:injective.peggy.v1.LastObservedEthereumBlockHeight)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LastObservedEthereumBlockHeight::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void LastObservedEthereumBlockHeight::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LastObservedEthereumBlockHeight::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.peggy.v1.LastObservedEthereumBlockHeight)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.cosmos_block_height_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.ethereum_block_height_) -
      reinterpret_cast<char*>(&_impl_.cosmos_block_height_)) + sizeof(_impl_.ethereum_block_height_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LastObservedEthereumBlockHeight::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 cosmos_block_height = 1 [json_name = "cosmosBlockHeight"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.cosmos_block_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 ethereum_block_height = 2 [json_name = "ethereumBlockHeight"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.ethereum_block_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* LastObservedEthereumBlockHeight::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.peggy.v1.LastObservedEthereumBlockHeight)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 cosmos_block_height = 1 [json_name = "cosmosBlockHeight"];
  if (this->_internal_cosmos_block_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_cosmos_block_height(), target);
  }

  // uint64 ethereum_block_height = 2 [json_name = "ethereumBlockHeight"];
  if (this->_internal_ethereum_block_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_ethereum_block_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.peggy.v1.LastObservedEthereumBlockHeight)
  return target;
}

::size_t LastObservedEthereumBlockHeight::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.peggy.v1.LastObservedEthereumBlockHeight)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 cosmos_block_height = 1 [json_name = "cosmosBlockHeight"];
  if (this->_internal_cosmos_block_height() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_cosmos_block_height());
  }

  // uint64 ethereum_block_height = 2 [json_name = "ethereumBlockHeight"];
  if (this->_internal_ethereum_block_height() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_ethereum_block_height());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LastObservedEthereumBlockHeight::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LastObservedEthereumBlockHeight::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LastObservedEthereumBlockHeight::GetClassData() const { return &_class_data_; }


void LastObservedEthereumBlockHeight::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LastObservedEthereumBlockHeight*>(&to_msg);
  auto& from = static_cast<const LastObservedEthereumBlockHeight&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.peggy.v1.LastObservedEthereumBlockHeight)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_cosmos_block_height() != 0) {
    _this->_internal_set_cosmos_block_height(from._internal_cosmos_block_height());
  }
  if (from._internal_ethereum_block_height() != 0) {
    _this->_internal_set_ethereum_block_height(from._internal_ethereum_block_height());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LastObservedEthereumBlockHeight::CopyFrom(const LastObservedEthereumBlockHeight& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.peggy.v1.LastObservedEthereumBlockHeight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LastObservedEthereumBlockHeight::IsInitialized() const {
  return true;
}

void LastObservedEthereumBlockHeight::InternalSwap(LastObservedEthereumBlockHeight* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LastObservedEthereumBlockHeight, _impl_.ethereum_block_height_)
      + sizeof(LastObservedEthereumBlockHeight::_impl_.ethereum_block_height_)
      - PROTOBUF_FIELD_OFFSET(LastObservedEthereumBlockHeight, _impl_.cosmos_block_height_)>(
          reinterpret_cast<char*>(&_impl_.cosmos_block_height_),
          reinterpret_cast<char*>(&other->_impl_.cosmos_block_height_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LastObservedEthereumBlockHeight::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fpeggy_2fv1_2ftypes_2eproto_getter, &descriptor_table_injective_2fpeggy_2fv1_2ftypes_2eproto_once,
      file_level_metadata_injective_2fpeggy_2fv1_2ftypes_2eproto[2]);
}
// ===================================================================

class LastClaimEvent::_Internal {
 public:
};

LastClaimEvent::LastClaimEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.peggy.v1.LastClaimEvent)
}
LastClaimEvent::LastClaimEvent(const LastClaimEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:injective.peggy.v1.LastClaimEvent)
}

inline void LastClaimEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.ethereum_event_nonce_) { ::uint64_t{0u} }

    , decltype(_impl_.ethereum_event_height_) { ::uint64_t{0u} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

LastClaimEvent::~LastClaimEvent() {
  // @@protoc_insertion_point(destructor:injective.peggy.v1.LastClaimEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LastClaimEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void LastClaimEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LastClaimEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.peggy.v1.LastClaimEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.ethereum_event_nonce_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.ethereum_event_height_) -
      reinterpret_cast<char*>(&_impl_.ethereum_event_nonce_)) + sizeof(_impl_.ethereum_event_height_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LastClaimEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 ethereum_event_nonce = 1 [json_name = "ethereumEventNonce"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.ethereum_event_nonce_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 ethereum_event_height = 2 [json_name = "ethereumEventHeight"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.ethereum_event_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* LastClaimEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.peggy.v1.LastClaimEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 ethereum_event_nonce = 1 [json_name = "ethereumEventNonce"];
  if (this->_internal_ethereum_event_nonce() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_ethereum_event_nonce(), target);
  }

  // uint64 ethereum_event_height = 2 [json_name = "ethereumEventHeight"];
  if (this->_internal_ethereum_event_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_ethereum_event_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.peggy.v1.LastClaimEvent)
  return target;
}

::size_t LastClaimEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.peggy.v1.LastClaimEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 ethereum_event_nonce = 1 [json_name = "ethereumEventNonce"];
  if (this->_internal_ethereum_event_nonce() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_ethereum_event_nonce());
  }

  // uint64 ethereum_event_height = 2 [json_name = "ethereumEventHeight"];
  if (this->_internal_ethereum_event_height() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_ethereum_event_height());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LastClaimEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LastClaimEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LastClaimEvent::GetClassData() const { return &_class_data_; }


void LastClaimEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LastClaimEvent*>(&to_msg);
  auto& from = static_cast<const LastClaimEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.peggy.v1.LastClaimEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_ethereum_event_nonce() != 0) {
    _this->_internal_set_ethereum_event_nonce(from._internal_ethereum_event_nonce());
  }
  if (from._internal_ethereum_event_height() != 0) {
    _this->_internal_set_ethereum_event_height(from._internal_ethereum_event_height());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LastClaimEvent::CopyFrom(const LastClaimEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.peggy.v1.LastClaimEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LastClaimEvent::IsInitialized() const {
  return true;
}

void LastClaimEvent::InternalSwap(LastClaimEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LastClaimEvent, _impl_.ethereum_event_height_)
      + sizeof(LastClaimEvent::_impl_.ethereum_event_height_)
      - PROTOBUF_FIELD_OFFSET(LastClaimEvent, _impl_.ethereum_event_nonce_)>(
          reinterpret_cast<char*>(&_impl_.ethereum_event_nonce_),
          reinterpret_cast<char*>(&other->_impl_.ethereum_event_nonce_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LastClaimEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fpeggy_2fv1_2ftypes_2eproto_getter, &descriptor_table_injective_2fpeggy_2fv1_2ftypes_2eproto_once,
      file_level_metadata_injective_2fpeggy_2fv1_2ftypes_2eproto[3]);
}
// ===================================================================

class ERC20ToDenom::_Internal {
 public:
};

ERC20ToDenom::ERC20ToDenom(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.peggy.v1.ERC20ToDenom)
}
ERC20ToDenom::ERC20ToDenom(const ERC20ToDenom& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ERC20ToDenom* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.erc20_) {}

    , decltype(_impl_.denom_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.erc20_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.erc20_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_erc20().empty()) {
    _this->_impl_.erc20_.Set(from._internal_erc20(), _this->GetArenaForAllocation());
  }
  _impl_.denom_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.denom_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_denom().empty()) {
    _this->_impl_.denom_.Set(from._internal_denom(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:injective.peggy.v1.ERC20ToDenom)
}

inline void ERC20ToDenom::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.erc20_) {}

    , decltype(_impl_.denom_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.erc20_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.erc20_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.denom_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.denom_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ERC20ToDenom::~ERC20ToDenom() {
  // @@protoc_insertion_point(destructor:injective.peggy.v1.ERC20ToDenom)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ERC20ToDenom::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.erc20_.Destroy();
  _impl_.denom_.Destroy();
}

void ERC20ToDenom::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ERC20ToDenom::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.peggy.v1.ERC20ToDenom)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.erc20_.ClearToEmpty();
  _impl_.denom_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ERC20ToDenom::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string erc20 = 1 [json_name = "erc20"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_erc20();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.peggy.v1.ERC20ToDenom.erc20"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string denom = 2 [json_name = "denom"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_denom();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.peggy.v1.ERC20ToDenom.denom"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ERC20ToDenom::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.peggy.v1.ERC20ToDenom)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string erc20 = 1 [json_name = "erc20"];
  if (!this->_internal_erc20().empty()) {
    const std::string& _s = this->_internal_erc20();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.peggy.v1.ERC20ToDenom.erc20");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string denom = 2 [json_name = "denom"];
  if (!this->_internal_denom().empty()) {
    const std::string& _s = this->_internal_denom();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.peggy.v1.ERC20ToDenom.denom");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.peggy.v1.ERC20ToDenom)
  return target;
}

::size_t ERC20ToDenom::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.peggy.v1.ERC20ToDenom)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string erc20 = 1 [json_name = "erc20"];
  if (!this->_internal_erc20().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_erc20());
  }

  // string denom = 2 [json_name = "denom"];
  if (!this->_internal_denom().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_denom());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ERC20ToDenom::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ERC20ToDenom::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ERC20ToDenom::GetClassData() const { return &_class_data_; }


void ERC20ToDenom::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ERC20ToDenom*>(&to_msg);
  auto& from = static_cast<const ERC20ToDenom&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.peggy.v1.ERC20ToDenom)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_erc20().empty()) {
    _this->_internal_set_erc20(from._internal_erc20());
  }
  if (!from._internal_denom().empty()) {
    _this->_internal_set_denom(from._internal_denom());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ERC20ToDenom::CopyFrom(const ERC20ToDenom& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.peggy.v1.ERC20ToDenom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ERC20ToDenom::IsInitialized() const {
  return true;
}

void ERC20ToDenom::InternalSwap(ERC20ToDenom* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.erc20_, lhs_arena,
                                       &other->_impl_.erc20_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.denom_, lhs_arena,
                                       &other->_impl_.denom_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata ERC20ToDenom::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fpeggy_2fv1_2ftypes_2eproto_getter, &descriptor_table_injective_2fpeggy_2fv1_2ftypes_2eproto_once,
      file_level_metadata_injective_2fpeggy_2fv1_2ftypes_2eproto[4]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace peggy
}  // namespace injective
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::injective::peggy::v1::BridgeValidator*
Arena::CreateMaybeMessage< ::injective::peggy::v1::BridgeValidator >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::peggy::v1::BridgeValidator >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::peggy::v1::Valset*
Arena::CreateMaybeMessage< ::injective::peggy::v1::Valset >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::peggy::v1::Valset >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::peggy::v1::LastObservedEthereumBlockHeight*
Arena::CreateMaybeMessage< ::injective::peggy::v1::LastObservedEthereumBlockHeight >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::peggy::v1::LastObservedEthereumBlockHeight >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::peggy::v1::LastClaimEvent*
Arena::CreateMaybeMessage< ::injective::peggy::v1::LastClaimEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::peggy::v1::LastClaimEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::peggy::v1::ERC20ToDenom*
Arena::CreateMaybeMessage< ::injective::peggy::v1::ERC20ToDenom >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::peggy::v1::ERC20ToDenom >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

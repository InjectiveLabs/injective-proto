// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: injective/peggy/v1/attestation.proto

#include "injective/peggy/v1/attestation.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace injective {
namespace peggy {
namespace v1 {
template <typename>
PROTOBUF_CONSTEXPR Attestation::Attestation(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.votes_)*/{}
  , /*decltype(_impl_.claim_)*/nullptr
  , /*decltype(_impl_.height_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.observed_)*/ false
} {}
struct AttestationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AttestationDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AttestationDefaultTypeInternal() {}
  union {
    Attestation _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AttestationDefaultTypeInternal _Attestation_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ERC20Token::ERC20Token(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.contract_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.amount_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ERC20TokenDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ERC20TokenDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ERC20TokenDefaultTypeInternal() {}
  union {
    ERC20Token _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ERC20TokenDefaultTypeInternal _ERC20Token_default_instance_;
}  // namespace v1
}  // namespace peggy
}  // namespace injective
static ::_pb::Metadata file_level_metadata_injective_2fpeggy_2fv1_2fattestation_2eproto[2];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_injective_2fpeggy_2fv1_2fattestation_2eproto[1];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_injective_2fpeggy_2fv1_2fattestation_2eproto = nullptr;
const ::uint32_t TableStruct_injective_2fpeggy_2fv1_2fattestation_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::Attestation, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::Attestation, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::Attestation, _impl_.observed_),
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::Attestation, _impl_.votes_),
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::Attestation, _impl_.height_),
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::Attestation, _impl_.claim_),
    ~0u,
    ~0u,
    ~0u,
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::ERC20Token, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::ERC20Token, _impl_.contract_),
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::ERC20Token, _impl_.amount_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 12, -1, sizeof(::injective::peggy::v1::Attestation)},
        { 16, -1, -1, sizeof(::injective::peggy::v1::ERC20Token)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::injective::peggy::v1::_Attestation_default_instance_._instance,
    &::injective::peggy::v1::_ERC20Token_default_instance_._instance,
};
const char descriptor_table_protodef_injective_2fpeggy_2fv1_2fattestation_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n$injective/peggy/v1/attestation.proto\022\022"
    "injective.peggy.v1\032\024gogoproto/gogo.proto"
    "\032\031google/protobuf/any.proto\"\203\001\n\013Attestat"
    "ion\022\032\n\010observed\030\001 \001(\010R\010observed\022\024\n\005votes"
    "\030\002 \003(\tR\005votes\022\026\n\006height\030\003 \001(\004R\006height\022*\n"
    "\005claim\030\004 \001(\0132\024.google.protobuf.AnyR\005clai"
    "m\"p\n\nERC20Token\022\032\n\010contract\030\001 \001(\tR\010contr"
    "act\022F\n\006amount\030\002 \001(\tB.\310\336\037\000\332\336\037&github.com/"
    "cosmos/cosmos-sdk/types.IntR\006amount*\237\002\n\t"
    "ClaimType\022.\n\022CLAIM_TYPE_UNKNOWN\020\000\032\026\212\235 \022C"
    "LAIM_TYPE_UNKNOWN\022.\n\022CLAIM_TYPE_DEPOSIT\020"
    "\001\032\026\212\235 \022CLAIM_TYPE_DEPOSIT\0220\n\023CLAIM_TYPE_"
    "WITHDRAW\020\002\032\027\212\235 \023CLAIM_TYPE_WITHDRAW\022<\n\031C"
    "LAIM_TYPE_ERC20_DEPLOYED\020\003\032\035\212\235 \031CLAIM_TY"
    "PE_ERC20_DEPLOYED\022<\n\031CLAIM_TYPE_VALSET_U"
    "PDATED\020\004\032\035\212\235 \031CLAIM_TYPE_VALSET_UPDATED\032"
    "\004\210\243\036\000B\341\001\n\026com.injective.peggy.v1B\020Attest"
    "ationProtoP\001ZKgithub.com/InjectiveLabs/i"
    "njective-core/injective-chain/modules/pe"
    "ggy/types\242\002\003IPX\252\002\022Injective.Peggy.V1\312\002\022I"
    "njective\\Peggy\\V1\342\002\036Injective\\Peggy\\V1\\G"
    "PBMetadata\352\002\024Injective::Peggy::V1b\006proto"
    "3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_injective_2fpeggy_2fv1_2fattestation_2eproto_deps[2] =
    {
        &::descriptor_table_gogoproto_2fgogo_2eproto,
        &::descriptor_table_google_2fprotobuf_2fany_2eproto,
};
static ::absl::once_flag descriptor_table_injective_2fpeggy_2fv1_2fattestation_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_injective_2fpeggy_2fv1_2fattestation_2eproto = {
    false,
    false,
    881,
    descriptor_table_protodef_injective_2fpeggy_2fv1_2fattestation_2eproto,
    "injective/peggy/v1/attestation.proto",
    &descriptor_table_injective_2fpeggy_2fv1_2fattestation_2eproto_once,
    descriptor_table_injective_2fpeggy_2fv1_2fattestation_2eproto_deps,
    2,
    2,
    schemas,
    file_default_instances,
    TableStruct_injective_2fpeggy_2fv1_2fattestation_2eproto::offsets,
    file_level_metadata_injective_2fpeggy_2fv1_2fattestation_2eproto,
    file_level_enum_descriptors_injective_2fpeggy_2fv1_2fattestation_2eproto,
    file_level_service_descriptors_injective_2fpeggy_2fv1_2fattestation_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_injective_2fpeggy_2fv1_2fattestation_2eproto_getter() {
  return &descriptor_table_injective_2fpeggy_2fv1_2fattestation_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_injective_2fpeggy_2fv1_2fattestation_2eproto(&descriptor_table_injective_2fpeggy_2fv1_2fattestation_2eproto);
namespace injective {
namespace peggy {
namespace v1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ClaimType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_injective_2fpeggy_2fv1_2fattestation_2eproto);
  return file_level_enum_descriptors_injective_2fpeggy_2fv1_2fattestation_2eproto[0];
}
bool ClaimType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}
// ===================================================================

class Attestation::_Internal {
 public:
  using HasBits = decltype(std::declval<Attestation>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Attestation, _impl_._has_bits_);
  static const ::PROTOBUF_NAMESPACE_ID::Any& claim(const Attestation* msg);
  static void set_has_claim(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::Any&
Attestation::_Internal::claim(const Attestation* msg) {
  return *msg->_impl_.claim_;
}
void Attestation::clear_claim() {
  if (_impl_.claim_ != nullptr) _impl_.claim_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
Attestation::Attestation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.peggy.v1.Attestation)
}
Attestation::Attestation(const Attestation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Attestation* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.votes_){from._impl_.votes_}
    , decltype(_impl_.claim_){nullptr}
    , decltype(_impl_.height_) {}

    , decltype(_impl_.observed_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.claim_ = new ::PROTOBUF_NAMESPACE_ID::Any(*from._impl_.claim_);
  }
  ::memcpy(&_impl_.height_, &from._impl_.height_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.observed_) -
    reinterpret_cast<char*>(&_impl_.height_)) + sizeof(_impl_.observed_));
  // @@protoc_insertion_point(copy_constructor:injective.peggy.v1.Attestation)
}

inline void Attestation::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.votes_){arena}
    , decltype(_impl_.claim_){nullptr}
    , decltype(_impl_.height_) { ::uint64_t{0u} }

    , decltype(_impl_.observed_) { false }

  };
}

Attestation::~Attestation() {
  // @@protoc_insertion_point(destructor:injective.peggy.v1.Attestation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Attestation::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_votes()->~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.claim_;
}

void Attestation::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Attestation::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.peggy.v1.Attestation)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_votes()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.claim_ != nullptr);
    _impl_.claim_->Clear();
  }
  ::memset(&_impl_.height_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.observed_) -
      reinterpret_cast<char*>(&_impl_.height_)) + sizeof(_impl_.observed_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Attestation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool observed = 1 [json_name = "observed"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.observed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string votes = 2 [json_name = "votes"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_votes();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "injective.peggy.v1.Attestation.votes"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 height = 3 [json_name = "height"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Any claim = 4 [json_name = "claim"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_claim(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Attestation::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.peggy.v1.Attestation)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool observed = 1 [json_name = "observed"];
  if (this->_internal_observed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_observed(), target);
  }

  // repeated string votes = 2 [json_name = "votes"];
  for (int i = 0, n = this->_internal_votes_size(); i < n; ++i) {
    const auto& s = this->_internal_votes(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.peggy.v1.Attestation.votes");
    target = stream->WriteString(2, s, target);
  }

  // uint64 height = 3 [json_name = "height"];
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        3, this->_internal_height(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .google.protobuf.Any claim = 4 [json_name = "claim"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::claim(this),
        _Internal::claim(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.peggy.v1.Attestation)
  return target;
}

::size_t Attestation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.peggy.v1.Attestation)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string votes = 2 [json_name = "votes"];
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_votes().size());
  for (int i = 0, n = _internal_votes().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_votes().Get(i));
  }

  // .google.protobuf.Any claim = 4 [json_name = "claim"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.claim_);
  }

  // uint64 height = 3 [json_name = "height"];
  if (this->_internal_height() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_height());
  }

  // bool observed = 1 [json_name = "observed"];
  if (this->_internal_observed() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Attestation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Attestation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Attestation::GetClassData() const { return &_class_data_; }


void Attestation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Attestation*>(&to_msg);
  auto& from = static_cast<const Attestation&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.peggy.v1.Attestation)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_votes()->MergeFrom(from._internal_votes());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_claim()->::PROTOBUF_NAMESPACE_ID::Any::MergeFrom(
        from._internal_claim());
  }
  if (from._internal_height() != 0) {
    _this->_internal_set_height(from._internal_height());
  }
  if (from._internal_observed() != 0) {
    _this->_internal_set_observed(from._internal_observed());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Attestation::CopyFrom(const Attestation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.peggy.v1.Attestation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Attestation::IsInitialized() const {
  return true;
}

void Attestation::InternalSwap(Attestation* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_votes()->InternalSwap(
      other->_internal_mutable_votes());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Attestation, _impl_.observed_)
      + sizeof(Attestation::_impl_.observed_)
      - PROTOBUF_FIELD_OFFSET(Attestation, _impl_.claim_)>(
          reinterpret_cast<char*>(&_impl_.claim_),
          reinterpret_cast<char*>(&other->_impl_.claim_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Attestation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fpeggy_2fv1_2fattestation_2eproto_getter, &descriptor_table_injective_2fpeggy_2fv1_2fattestation_2eproto_once,
      file_level_metadata_injective_2fpeggy_2fv1_2fattestation_2eproto[0]);
}
// ===================================================================

class ERC20Token::_Internal {
 public:
};

ERC20Token::ERC20Token(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.peggy.v1.ERC20Token)
}
ERC20Token::ERC20Token(const ERC20Token& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ERC20Token* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.contract_) {}

    , decltype(_impl_.amount_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.contract_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.contract_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_contract().empty()) {
    _this->_impl_.contract_.Set(from._internal_contract(), _this->GetArenaForAllocation());
  }
  _impl_.amount_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.amount_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_amount().empty()) {
    _this->_impl_.amount_.Set(from._internal_amount(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:injective.peggy.v1.ERC20Token)
}

inline void ERC20Token::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.contract_) {}

    , decltype(_impl_.amount_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.contract_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.contract_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.amount_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.amount_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ERC20Token::~ERC20Token() {
  // @@protoc_insertion_point(destructor:injective.peggy.v1.ERC20Token)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ERC20Token::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.contract_.Destroy();
  _impl_.amount_.Destroy();
}

void ERC20Token::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ERC20Token::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.peggy.v1.ERC20Token)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.contract_.ClearToEmpty();
  _impl_.amount_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ERC20Token::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string contract = 1 [json_name = "contract"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_contract();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.peggy.v1.ERC20Token.contract"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string amount = 2 [json_name = "amount", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_amount();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.peggy.v1.ERC20Token.amount"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ERC20Token::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.peggy.v1.ERC20Token)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string contract = 1 [json_name = "contract"];
  if (!this->_internal_contract().empty()) {
    const std::string& _s = this->_internal_contract();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.peggy.v1.ERC20Token.contract");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string amount = 2 [json_name = "amount", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int"];
  if (!this->_internal_amount().empty()) {
    const std::string& _s = this->_internal_amount();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.peggy.v1.ERC20Token.amount");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.peggy.v1.ERC20Token)
  return target;
}

::size_t ERC20Token::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.peggy.v1.ERC20Token)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string contract = 1 [json_name = "contract"];
  if (!this->_internal_contract().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_contract());
  }

  // string amount = 2 [json_name = "amount", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int"];
  if (!this->_internal_amount().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_amount());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ERC20Token::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ERC20Token::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ERC20Token::GetClassData() const { return &_class_data_; }


void ERC20Token::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ERC20Token*>(&to_msg);
  auto& from = static_cast<const ERC20Token&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.peggy.v1.ERC20Token)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_contract().empty()) {
    _this->_internal_set_contract(from._internal_contract());
  }
  if (!from._internal_amount().empty()) {
    _this->_internal_set_amount(from._internal_amount());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ERC20Token::CopyFrom(const ERC20Token& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.peggy.v1.ERC20Token)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ERC20Token::IsInitialized() const {
  return true;
}

void ERC20Token::InternalSwap(ERC20Token* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.contract_, lhs_arena,
                                       &other->_impl_.contract_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.amount_, lhs_arena,
                                       &other->_impl_.amount_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata ERC20Token::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fpeggy_2fv1_2fattestation_2eproto_getter, &descriptor_table_injective_2fpeggy_2fv1_2fattestation_2eproto_once,
      file_level_metadata_injective_2fpeggy_2fv1_2fattestation_2eproto[1]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace peggy
}  // namespace injective
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::injective::peggy::v1::Attestation*
Arena::CreateMaybeMessage< ::injective::peggy::v1::Attestation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::peggy::v1::Attestation >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::peggy::v1::ERC20Token*
Arena::CreateMaybeMessage< ::injective::peggy::v1::ERC20Token >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::peggy::v1::ERC20Token >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: injective/peggy/v1/batch.proto

#include "injective/peggy/v1/batch.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace injective {
namespace peggy {
namespace v1 {
template <typename>
PROTOBUF_CONSTEXPR OutgoingTxBatch::OutgoingTxBatch(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.transactions_)*/{}
  , /*decltype(_impl_.token_contract_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.batch_nonce_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.batch_timeout_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.block_)*/ ::uint64_t{0u}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OutgoingTxBatchDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OutgoingTxBatchDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~OutgoingTxBatchDefaultTypeInternal() {}
  union {
    OutgoingTxBatch _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OutgoingTxBatchDefaultTypeInternal _OutgoingTxBatch_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR OutgoingTransferTx::OutgoingTransferTx(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.sender_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.dest_address_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.erc20_token_)*/nullptr
  , /*decltype(_impl_.erc20_fee_)*/nullptr
  , /*decltype(_impl_.id_)*/ ::uint64_t{0u}
} {}
struct OutgoingTransferTxDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OutgoingTransferTxDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~OutgoingTransferTxDefaultTypeInternal() {}
  union {
    OutgoingTransferTx _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OutgoingTransferTxDefaultTypeInternal _OutgoingTransferTx_default_instance_;
}  // namespace v1
}  // namespace peggy
}  // namespace injective
static ::_pb::Metadata file_level_metadata_injective_2fpeggy_2fv1_2fbatch_2eproto[2];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_injective_2fpeggy_2fv1_2fbatch_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_injective_2fpeggy_2fv1_2fbatch_2eproto = nullptr;
const ::uint32_t TableStruct_injective_2fpeggy_2fv1_2fbatch_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::OutgoingTxBatch, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::OutgoingTxBatch, _impl_.batch_nonce_),
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::OutgoingTxBatch, _impl_.batch_timeout_),
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::OutgoingTxBatch, _impl_.transactions_),
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::OutgoingTxBatch, _impl_.token_contract_),
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::OutgoingTxBatch, _impl_.block_),
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::OutgoingTransferTx, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::OutgoingTransferTx, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::OutgoingTransferTx, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::OutgoingTransferTx, _impl_.sender_),
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::OutgoingTransferTx, _impl_.dest_address_),
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::OutgoingTransferTx, _impl_.erc20_token_),
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::OutgoingTransferTx, _impl_.erc20_fee_),
    ~0u,
    ~0u,
    ~0u,
    0,
    1,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::injective::peggy::v1::OutgoingTxBatch)},
        { 13, 26, -1, sizeof(::injective::peggy::v1::OutgoingTransferTx)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::injective::peggy::v1::_OutgoingTxBatch_default_instance_._instance,
    &::injective::peggy::v1::_OutgoingTransferTx_default_instance_._instance,
};
const char descriptor_table_protodef_injective_2fpeggy_2fv1_2fbatch_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\036injective/peggy/v1/batch.proto\022\022inject"
    "ive.peggy.v1\032$injective/peggy/v1/attesta"
    "tion.proto\"\340\001\n\017OutgoingTxBatch\022\037\n\013batch_"
    "nonce\030\001 \001(\004R\nbatchNonce\022#\n\rbatch_timeout"
    "\030\002 \001(\004R\014batchTimeout\022J\n\014transactions\030\003 \003"
    "(\0132&.injective.peggy.v1.OutgoingTransfer"
    "TxR\014transactions\022%\n\016token_contract\030\004 \001(\t"
    "R\rtokenContract\022\024\n\005block\030\005 \001(\004R\005block\"\335\001"
    "\n\022OutgoingTransferTx\022\016\n\002id\030\001 \001(\004R\002id\022\026\n\006"
    "sender\030\002 \001(\tR\006sender\022!\n\014dest_address\030\003 \001"
    "(\tR\013destAddress\022\?\n\013erc20_token\030\004 \001(\0132\036.i"
    "njective.peggy.v1.ERC20TokenR\nerc20Token"
    "\022;\n\terc20_fee\030\005 \001(\0132\036.injective.peggy.v1"
    ".ERC20TokenR\010erc20FeeB\333\001\n\026com.injective."
    "peggy.v1B\nBatchProtoP\001ZKgithub.com/Injec"
    "tiveLabs/injective-core/injective-chain/"
    "modules/peggy/types\242\002\003IPX\252\002\022Injective.Pe"
    "ggy.V1\312\002\022Injective\\Peggy\\V1\342\002\036Injective\\"
    "Peggy\\V1\\GPBMetadata\352\002\024Injective::Peggy:"
    ":V1b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_injective_2fpeggy_2fv1_2fbatch_2eproto_deps[1] =
    {
        &::descriptor_table_injective_2fpeggy_2fv1_2fattestation_2eproto,
};
static ::absl::once_flag descriptor_table_injective_2fpeggy_2fv1_2fbatch_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_injective_2fpeggy_2fv1_2fbatch_2eproto = {
    false,
    false,
    771,
    descriptor_table_protodef_injective_2fpeggy_2fv1_2fbatch_2eproto,
    "injective/peggy/v1/batch.proto",
    &descriptor_table_injective_2fpeggy_2fv1_2fbatch_2eproto_once,
    descriptor_table_injective_2fpeggy_2fv1_2fbatch_2eproto_deps,
    1,
    2,
    schemas,
    file_default_instances,
    TableStruct_injective_2fpeggy_2fv1_2fbatch_2eproto::offsets,
    file_level_metadata_injective_2fpeggy_2fv1_2fbatch_2eproto,
    file_level_enum_descriptors_injective_2fpeggy_2fv1_2fbatch_2eproto,
    file_level_service_descriptors_injective_2fpeggy_2fv1_2fbatch_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_injective_2fpeggy_2fv1_2fbatch_2eproto_getter() {
  return &descriptor_table_injective_2fpeggy_2fv1_2fbatch_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_injective_2fpeggy_2fv1_2fbatch_2eproto(&descriptor_table_injective_2fpeggy_2fv1_2fbatch_2eproto);
namespace injective {
namespace peggy {
namespace v1 {
// ===================================================================

class OutgoingTxBatch::_Internal {
 public:
};

OutgoingTxBatch::OutgoingTxBatch(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.peggy.v1.OutgoingTxBatch)
}
OutgoingTxBatch::OutgoingTxBatch(const OutgoingTxBatch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OutgoingTxBatch* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.transactions_){from._impl_.transactions_}
    , decltype(_impl_.token_contract_) {}

    , decltype(_impl_.batch_nonce_) {}

    , decltype(_impl_.batch_timeout_) {}

    , decltype(_impl_.block_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.token_contract_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.token_contract_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_token_contract().empty()) {
    _this->_impl_.token_contract_.Set(from._internal_token_contract(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.batch_nonce_, &from._impl_.batch_nonce_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.block_) -
    reinterpret_cast<char*>(&_impl_.batch_nonce_)) + sizeof(_impl_.block_));
  // @@protoc_insertion_point(copy_constructor:injective.peggy.v1.OutgoingTxBatch)
}

inline void OutgoingTxBatch::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.transactions_){arena}
    , decltype(_impl_.token_contract_) {}

    , decltype(_impl_.batch_nonce_) { ::uint64_t{0u} }

    , decltype(_impl_.batch_timeout_) { ::uint64_t{0u} }

    , decltype(_impl_.block_) { ::uint64_t{0u} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.token_contract_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.token_contract_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

OutgoingTxBatch::~OutgoingTxBatch() {
  // @@protoc_insertion_point(destructor:injective.peggy.v1.OutgoingTxBatch)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OutgoingTxBatch::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_transactions()->~RepeatedPtrField();
  _impl_.token_contract_.Destroy();
}

void OutgoingTxBatch::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OutgoingTxBatch::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.peggy.v1.OutgoingTxBatch)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_transactions()->Clear();
  _impl_.token_contract_.ClearToEmpty();
  ::memset(&_impl_.batch_nonce_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.block_) -
      reinterpret_cast<char*>(&_impl_.batch_nonce_)) + sizeof(_impl_.block_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OutgoingTxBatch::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 batch_nonce = 1 [json_name = "batchNonce"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.batch_nonce_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 batch_timeout = 2 [json_name = "batchTimeout"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.batch_timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .injective.peggy.v1.OutgoingTransferTx transactions = 3 [json_name = "transactions"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_transactions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // string token_contract = 4 [json_name = "tokenContract"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_token_contract();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.peggy.v1.OutgoingTxBatch.token_contract"));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 block = 5 [json_name = "block"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _impl_.block_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* OutgoingTxBatch::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.peggy.v1.OutgoingTxBatch)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 batch_nonce = 1 [json_name = "batchNonce"];
  if (this->_internal_batch_nonce() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_batch_nonce(), target);
  }

  // uint64 batch_timeout = 2 [json_name = "batchTimeout"];
  if (this->_internal_batch_timeout() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_batch_timeout(), target);
  }

  // repeated .injective.peggy.v1.OutgoingTransferTx transactions = 3 [json_name = "transactions"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_transactions_size()); i < n; i++) {
    const auto& repfield = this->_internal_transactions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string token_contract = 4 [json_name = "tokenContract"];
  if (!this->_internal_token_contract().empty()) {
    const std::string& _s = this->_internal_token_contract();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.peggy.v1.OutgoingTxBatch.token_contract");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // uint64 block = 5 [json_name = "block"];
  if (this->_internal_block() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        5, this->_internal_block(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.peggy.v1.OutgoingTxBatch)
  return target;
}

::size_t OutgoingTxBatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.peggy.v1.OutgoingTxBatch)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .injective.peggy.v1.OutgoingTransferTx transactions = 3 [json_name = "transactions"];
  total_size += 1UL * this->_internal_transactions_size();
  for (const auto& msg : this->_internal_transactions()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string token_contract = 4 [json_name = "tokenContract"];
  if (!this->_internal_token_contract().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_token_contract());
  }

  // uint64 batch_nonce = 1 [json_name = "batchNonce"];
  if (this->_internal_batch_nonce() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_batch_nonce());
  }

  // uint64 batch_timeout = 2 [json_name = "batchTimeout"];
  if (this->_internal_batch_timeout() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_batch_timeout());
  }

  // uint64 block = 5 [json_name = "block"];
  if (this->_internal_block() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_block());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OutgoingTxBatch::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OutgoingTxBatch::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OutgoingTxBatch::GetClassData() const { return &_class_data_; }


void OutgoingTxBatch::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OutgoingTxBatch*>(&to_msg);
  auto& from = static_cast<const OutgoingTxBatch&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.peggy.v1.OutgoingTxBatch)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_transactions()->MergeFrom(from._internal_transactions());
  if (!from._internal_token_contract().empty()) {
    _this->_internal_set_token_contract(from._internal_token_contract());
  }
  if (from._internal_batch_nonce() != 0) {
    _this->_internal_set_batch_nonce(from._internal_batch_nonce());
  }
  if (from._internal_batch_timeout() != 0) {
    _this->_internal_set_batch_timeout(from._internal_batch_timeout());
  }
  if (from._internal_block() != 0) {
    _this->_internal_set_block(from._internal_block());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OutgoingTxBatch::CopyFrom(const OutgoingTxBatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.peggy.v1.OutgoingTxBatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OutgoingTxBatch::IsInitialized() const {
  return true;
}

void OutgoingTxBatch::InternalSwap(OutgoingTxBatch* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_transactions()->InternalSwap(other->_internal_mutable_transactions());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.token_contract_, lhs_arena,
                                       &other->_impl_.token_contract_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OutgoingTxBatch, _impl_.block_)
      + sizeof(OutgoingTxBatch::_impl_.block_)
      - PROTOBUF_FIELD_OFFSET(OutgoingTxBatch, _impl_.batch_nonce_)>(
          reinterpret_cast<char*>(&_impl_.batch_nonce_),
          reinterpret_cast<char*>(&other->_impl_.batch_nonce_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OutgoingTxBatch::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fpeggy_2fv1_2fbatch_2eproto_getter, &descriptor_table_injective_2fpeggy_2fv1_2fbatch_2eproto_once,
      file_level_metadata_injective_2fpeggy_2fv1_2fbatch_2eproto[0]);
}
// ===================================================================

class OutgoingTransferTx::_Internal {
 public:
  using HasBits = decltype(std::declval<OutgoingTransferTx>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(OutgoingTransferTx, _impl_._has_bits_);
  static const ::injective::peggy::v1::ERC20Token& erc20_token(const OutgoingTransferTx* msg);
  static void set_has_erc20_token(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::injective::peggy::v1::ERC20Token& erc20_fee(const OutgoingTransferTx* msg);
  static void set_has_erc20_fee(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::injective::peggy::v1::ERC20Token&
OutgoingTransferTx::_Internal::erc20_token(const OutgoingTransferTx* msg) {
  return *msg->_impl_.erc20_token_;
}
const ::injective::peggy::v1::ERC20Token&
OutgoingTransferTx::_Internal::erc20_fee(const OutgoingTransferTx* msg) {
  return *msg->_impl_.erc20_fee_;
}
void OutgoingTransferTx::clear_erc20_token() {
  if (_impl_.erc20_token_ != nullptr) _impl_.erc20_token_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void OutgoingTransferTx::clear_erc20_fee() {
  if (_impl_.erc20_fee_ != nullptr) _impl_.erc20_fee_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
OutgoingTransferTx::OutgoingTransferTx(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.peggy.v1.OutgoingTransferTx)
}
OutgoingTransferTx::OutgoingTransferTx(const OutgoingTransferTx& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OutgoingTransferTx* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sender_) {}

    , decltype(_impl_.dest_address_) {}

    , decltype(_impl_.erc20_token_){nullptr}
    , decltype(_impl_.erc20_fee_){nullptr}
    , decltype(_impl_.id_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.sender_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.sender_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sender().empty()) {
    _this->_impl_.sender_.Set(from._internal_sender(), _this->GetArenaForAllocation());
  }
  _impl_.dest_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.dest_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_dest_address().empty()) {
    _this->_impl_.dest_address_.Set(from._internal_dest_address(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.erc20_token_ = new ::injective::peggy::v1::ERC20Token(*from._impl_.erc20_token_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.erc20_fee_ = new ::injective::peggy::v1::ERC20Token(*from._impl_.erc20_fee_);
  }
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:injective.peggy.v1.OutgoingTransferTx)
}

inline void OutgoingTransferTx::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sender_) {}

    , decltype(_impl_.dest_address_) {}

    , decltype(_impl_.erc20_token_){nullptr}
    , decltype(_impl_.erc20_fee_){nullptr}
    , decltype(_impl_.id_) { ::uint64_t{0u} }

  };
  _impl_.sender_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.sender_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.dest_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.dest_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

OutgoingTransferTx::~OutgoingTransferTx() {
  // @@protoc_insertion_point(destructor:injective.peggy.v1.OutgoingTransferTx)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OutgoingTransferTx::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sender_.Destroy();
  _impl_.dest_address_.Destroy();
  if (this != internal_default_instance()) delete _impl_.erc20_token_;
  if (this != internal_default_instance()) delete _impl_.erc20_fee_;
}

void OutgoingTransferTx::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OutgoingTransferTx::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.peggy.v1.OutgoingTransferTx)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sender_.ClearToEmpty();
  _impl_.dest_address_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.erc20_token_ != nullptr);
      _impl_.erc20_token_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.erc20_fee_ != nullptr);
      _impl_.erc20_fee_->Clear();
    }
  }
  _impl_.id_ = ::uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OutgoingTransferTx::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string sender = 2 [json_name = "sender"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_sender();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.peggy.v1.OutgoingTransferTx.sender"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string dest_address = 3 [json_name = "destAddress"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_dest_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.peggy.v1.OutgoingTransferTx.dest_address"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .injective.peggy.v1.ERC20Token erc20_token = 4 [json_name = "erc20Token"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_erc20_token(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .injective.peggy.v1.ERC20Token erc20_fee = 5 [json_name = "erc20Fee"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_erc20_fee(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* OutgoingTransferTx::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.peggy.v1.OutgoingTransferTx)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1 [json_name = "id"];
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_id(), target);
  }

  // string sender = 2 [json_name = "sender"];
  if (!this->_internal_sender().empty()) {
    const std::string& _s = this->_internal_sender();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.peggy.v1.OutgoingTransferTx.sender");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string dest_address = 3 [json_name = "destAddress"];
  if (!this->_internal_dest_address().empty()) {
    const std::string& _s = this->_internal_dest_address();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.peggy.v1.OutgoingTransferTx.dest_address");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .injective.peggy.v1.ERC20Token erc20_token = 4 [json_name = "erc20Token"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::erc20_token(this),
        _Internal::erc20_token(this).GetCachedSize(), target, stream);
  }

  // .injective.peggy.v1.ERC20Token erc20_fee = 5 [json_name = "erc20Fee"];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::erc20_fee(this),
        _Internal::erc20_fee(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.peggy.v1.OutgoingTransferTx)
  return target;
}

::size_t OutgoingTransferTx::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.peggy.v1.OutgoingTransferTx)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sender = 2 [json_name = "sender"];
  if (!this->_internal_sender().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_sender());
  }

  // string dest_address = 3 [json_name = "destAddress"];
  if (!this->_internal_dest_address().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_dest_address());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .injective.peggy.v1.ERC20Token erc20_token = 4 [json_name = "erc20Token"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.erc20_token_);
    }

    // .injective.peggy.v1.ERC20Token erc20_fee = 5 [json_name = "erc20Fee"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.erc20_fee_);
    }

  }
  // uint64 id = 1 [json_name = "id"];
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OutgoingTransferTx::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OutgoingTransferTx::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OutgoingTransferTx::GetClassData() const { return &_class_data_; }


void OutgoingTransferTx::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OutgoingTransferTx*>(&to_msg);
  auto& from = static_cast<const OutgoingTransferTx&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.peggy.v1.OutgoingTransferTx)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_sender().empty()) {
    _this->_internal_set_sender(from._internal_sender());
  }
  if (!from._internal_dest_address().empty()) {
    _this->_internal_set_dest_address(from._internal_dest_address());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_erc20_token()->::injective::peggy::v1::ERC20Token::MergeFrom(
          from._internal_erc20_token());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_erc20_fee()->::injective::peggy::v1::ERC20Token::MergeFrom(
          from._internal_erc20_fee());
    }
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OutgoingTransferTx::CopyFrom(const OutgoingTransferTx& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.peggy.v1.OutgoingTransferTx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OutgoingTransferTx::IsInitialized() const {
  return true;
}

void OutgoingTransferTx::InternalSwap(OutgoingTransferTx* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.sender_, lhs_arena,
                                       &other->_impl_.sender_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.dest_address_, lhs_arena,
                                       &other->_impl_.dest_address_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OutgoingTransferTx, _impl_.id_)
      + sizeof(OutgoingTransferTx::_impl_.id_)
      - PROTOBUF_FIELD_OFFSET(OutgoingTransferTx, _impl_.erc20_token_)>(
          reinterpret_cast<char*>(&_impl_.erc20_token_),
          reinterpret_cast<char*>(&other->_impl_.erc20_token_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OutgoingTransferTx::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fpeggy_2fv1_2fbatch_2eproto_getter, &descriptor_table_injective_2fpeggy_2fv1_2fbatch_2eproto_once,
      file_level_metadata_injective_2fpeggy_2fv1_2fbatch_2eproto[1]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace peggy
}  // namespace injective
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::injective::peggy::v1::OutgoingTxBatch*
Arena::CreateMaybeMessage< ::injective::peggy::v1::OutgoingTxBatch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::peggy::v1::OutgoingTxBatch >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::peggy::v1::OutgoingTransferTx*
Arena::CreateMaybeMessage< ::injective::peggy::v1::OutgoingTransferTx >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::peggy::v1::OutgoingTransferTx >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: injective/peggy/v1/msgs.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_injective_2fpeggy_2fv1_2fmsgs_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_injective_2fpeggy_2fv1_2fmsgs_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "cosmos/base/v1beta1/coin.pb.h"
#include "gogoproto/gogo.pb.h"
#include "google/api/annotations.pb.h"
#include "injective/peggy/v1/types.pb.h"
#include "injective/peggy/v1/params.pb.h"
#include "google/protobuf/any.pb.h"
#include "cosmos/msg/v1/msg.pb.h"
#include "cosmos_proto/cosmos.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_injective_2fpeggy_2fv1_2fmsgs_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_injective_2fpeggy_2fv1_2fmsgs_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_injective_2fpeggy_2fv1_2fmsgs_2eproto;
namespace injective {
namespace peggy {
namespace v1 {
class MsgCancelSendToEth;
struct MsgCancelSendToEthDefaultTypeInternal;
extern MsgCancelSendToEthDefaultTypeInternal _MsgCancelSendToEth_default_instance_;
class MsgCancelSendToEthResponse;
struct MsgCancelSendToEthResponseDefaultTypeInternal;
extern MsgCancelSendToEthResponseDefaultTypeInternal _MsgCancelSendToEthResponse_default_instance_;
class MsgConfirmBatch;
struct MsgConfirmBatchDefaultTypeInternal;
extern MsgConfirmBatchDefaultTypeInternal _MsgConfirmBatch_default_instance_;
class MsgConfirmBatchResponse;
struct MsgConfirmBatchResponseDefaultTypeInternal;
extern MsgConfirmBatchResponseDefaultTypeInternal _MsgConfirmBatchResponse_default_instance_;
class MsgDepositClaim;
struct MsgDepositClaimDefaultTypeInternal;
extern MsgDepositClaimDefaultTypeInternal _MsgDepositClaim_default_instance_;
class MsgDepositClaimResponse;
struct MsgDepositClaimResponseDefaultTypeInternal;
extern MsgDepositClaimResponseDefaultTypeInternal _MsgDepositClaimResponse_default_instance_;
class MsgERC20DeployedClaim;
struct MsgERC20DeployedClaimDefaultTypeInternal;
extern MsgERC20DeployedClaimDefaultTypeInternal _MsgERC20DeployedClaim_default_instance_;
class MsgERC20DeployedClaimResponse;
struct MsgERC20DeployedClaimResponseDefaultTypeInternal;
extern MsgERC20DeployedClaimResponseDefaultTypeInternal _MsgERC20DeployedClaimResponse_default_instance_;
class MsgRequestBatch;
struct MsgRequestBatchDefaultTypeInternal;
extern MsgRequestBatchDefaultTypeInternal _MsgRequestBatch_default_instance_;
class MsgRequestBatchResponse;
struct MsgRequestBatchResponseDefaultTypeInternal;
extern MsgRequestBatchResponseDefaultTypeInternal _MsgRequestBatchResponse_default_instance_;
class MsgSendToEth;
struct MsgSendToEthDefaultTypeInternal;
extern MsgSendToEthDefaultTypeInternal _MsgSendToEth_default_instance_;
class MsgSendToEthResponse;
struct MsgSendToEthResponseDefaultTypeInternal;
extern MsgSendToEthResponseDefaultTypeInternal _MsgSendToEthResponse_default_instance_;
class MsgSetOrchestratorAddresses;
struct MsgSetOrchestratorAddressesDefaultTypeInternal;
extern MsgSetOrchestratorAddressesDefaultTypeInternal _MsgSetOrchestratorAddresses_default_instance_;
class MsgSetOrchestratorAddressesResponse;
struct MsgSetOrchestratorAddressesResponseDefaultTypeInternal;
extern MsgSetOrchestratorAddressesResponseDefaultTypeInternal _MsgSetOrchestratorAddressesResponse_default_instance_;
class MsgSubmitBadSignatureEvidence;
struct MsgSubmitBadSignatureEvidenceDefaultTypeInternal;
extern MsgSubmitBadSignatureEvidenceDefaultTypeInternal _MsgSubmitBadSignatureEvidence_default_instance_;
class MsgSubmitBadSignatureEvidenceResponse;
struct MsgSubmitBadSignatureEvidenceResponseDefaultTypeInternal;
extern MsgSubmitBadSignatureEvidenceResponseDefaultTypeInternal _MsgSubmitBadSignatureEvidenceResponse_default_instance_;
class MsgUpdateParams;
struct MsgUpdateParamsDefaultTypeInternal;
extern MsgUpdateParamsDefaultTypeInternal _MsgUpdateParams_default_instance_;
class MsgUpdateParamsResponse;
struct MsgUpdateParamsResponseDefaultTypeInternal;
extern MsgUpdateParamsResponseDefaultTypeInternal _MsgUpdateParamsResponse_default_instance_;
class MsgValsetConfirm;
struct MsgValsetConfirmDefaultTypeInternal;
extern MsgValsetConfirmDefaultTypeInternal _MsgValsetConfirm_default_instance_;
class MsgValsetConfirmResponse;
struct MsgValsetConfirmResponseDefaultTypeInternal;
extern MsgValsetConfirmResponseDefaultTypeInternal _MsgValsetConfirmResponse_default_instance_;
class MsgValsetUpdatedClaim;
struct MsgValsetUpdatedClaimDefaultTypeInternal;
extern MsgValsetUpdatedClaimDefaultTypeInternal _MsgValsetUpdatedClaim_default_instance_;
class MsgValsetUpdatedClaimResponse;
struct MsgValsetUpdatedClaimResponseDefaultTypeInternal;
extern MsgValsetUpdatedClaimResponseDefaultTypeInternal _MsgValsetUpdatedClaimResponse_default_instance_;
class MsgWithdrawClaim;
struct MsgWithdrawClaimDefaultTypeInternal;
extern MsgWithdrawClaimDefaultTypeInternal _MsgWithdrawClaim_default_instance_;
class MsgWithdrawClaimResponse;
struct MsgWithdrawClaimResponseDefaultTypeInternal;
extern MsgWithdrawClaimResponseDefaultTypeInternal _MsgWithdrawClaimResponse_default_instance_;
}  // namespace v1
}  // namespace peggy
}  // namespace injective
PROTOBUF_NAMESPACE_OPEN
template <>
::injective::peggy::v1::MsgCancelSendToEth* Arena::CreateMaybeMessage<::injective::peggy::v1::MsgCancelSendToEth>(Arena*);
template <>
::injective::peggy::v1::MsgCancelSendToEthResponse* Arena::CreateMaybeMessage<::injective::peggy::v1::MsgCancelSendToEthResponse>(Arena*);
template <>
::injective::peggy::v1::MsgConfirmBatch* Arena::CreateMaybeMessage<::injective::peggy::v1::MsgConfirmBatch>(Arena*);
template <>
::injective::peggy::v1::MsgConfirmBatchResponse* Arena::CreateMaybeMessage<::injective::peggy::v1::MsgConfirmBatchResponse>(Arena*);
template <>
::injective::peggy::v1::MsgDepositClaim* Arena::CreateMaybeMessage<::injective::peggy::v1::MsgDepositClaim>(Arena*);
template <>
::injective::peggy::v1::MsgDepositClaimResponse* Arena::CreateMaybeMessage<::injective::peggy::v1::MsgDepositClaimResponse>(Arena*);
template <>
::injective::peggy::v1::MsgERC20DeployedClaim* Arena::CreateMaybeMessage<::injective::peggy::v1::MsgERC20DeployedClaim>(Arena*);
template <>
::injective::peggy::v1::MsgERC20DeployedClaimResponse* Arena::CreateMaybeMessage<::injective::peggy::v1::MsgERC20DeployedClaimResponse>(Arena*);
template <>
::injective::peggy::v1::MsgRequestBatch* Arena::CreateMaybeMessage<::injective::peggy::v1::MsgRequestBatch>(Arena*);
template <>
::injective::peggy::v1::MsgRequestBatchResponse* Arena::CreateMaybeMessage<::injective::peggy::v1::MsgRequestBatchResponse>(Arena*);
template <>
::injective::peggy::v1::MsgSendToEth* Arena::CreateMaybeMessage<::injective::peggy::v1::MsgSendToEth>(Arena*);
template <>
::injective::peggy::v1::MsgSendToEthResponse* Arena::CreateMaybeMessage<::injective::peggy::v1::MsgSendToEthResponse>(Arena*);
template <>
::injective::peggy::v1::MsgSetOrchestratorAddresses* Arena::CreateMaybeMessage<::injective::peggy::v1::MsgSetOrchestratorAddresses>(Arena*);
template <>
::injective::peggy::v1::MsgSetOrchestratorAddressesResponse* Arena::CreateMaybeMessage<::injective::peggy::v1::MsgSetOrchestratorAddressesResponse>(Arena*);
template <>
::injective::peggy::v1::MsgSubmitBadSignatureEvidence* Arena::CreateMaybeMessage<::injective::peggy::v1::MsgSubmitBadSignatureEvidence>(Arena*);
template <>
::injective::peggy::v1::MsgSubmitBadSignatureEvidenceResponse* Arena::CreateMaybeMessage<::injective::peggy::v1::MsgSubmitBadSignatureEvidenceResponse>(Arena*);
template <>
::injective::peggy::v1::MsgUpdateParams* Arena::CreateMaybeMessage<::injective::peggy::v1::MsgUpdateParams>(Arena*);
template <>
::injective::peggy::v1::MsgUpdateParamsResponse* Arena::CreateMaybeMessage<::injective::peggy::v1::MsgUpdateParamsResponse>(Arena*);
template <>
::injective::peggy::v1::MsgValsetConfirm* Arena::CreateMaybeMessage<::injective::peggy::v1::MsgValsetConfirm>(Arena*);
template <>
::injective::peggy::v1::MsgValsetConfirmResponse* Arena::CreateMaybeMessage<::injective::peggy::v1::MsgValsetConfirmResponse>(Arena*);
template <>
::injective::peggy::v1::MsgValsetUpdatedClaim* Arena::CreateMaybeMessage<::injective::peggy::v1::MsgValsetUpdatedClaim>(Arena*);
template <>
::injective::peggy::v1::MsgValsetUpdatedClaimResponse* Arena::CreateMaybeMessage<::injective::peggy::v1::MsgValsetUpdatedClaimResponse>(Arena*);
template <>
::injective::peggy::v1::MsgWithdrawClaim* Arena::CreateMaybeMessage<::injective::peggy::v1::MsgWithdrawClaim>(Arena*);
template <>
::injective::peggy::v1::MsgWithdrawClaimResponse* Arena::CreateMaybeMessage<::injective::peggy::v1::MsgWithdrawClaimResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace injective {
namespace peggy {
namespace v1 {

// ===================================================================


// -------------------------------------------------------------------

class MsgSetOrchestratorAddresses final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.peggy.v1.MsgSetOrchestratorAddresses) */ {
 public:
  inline MsgSetOrchestratorAddresses() : MsgSetOrchestratorAddresses(nullptr) {}
  ~MsgSetOrchestratorAddresses() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MsgSetOrchestratorAddresses(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgSetOrchestratorAddresses(const MsgSetOrchestratorAddresses& from);
  MsgSetOrchestratorAddresses(MsgSetOrchestratorAddresses&& from) noexcept
    : MsgSetOrchestratorAddresses() {
    *this = ::std::move(from);
  }

  inline MsgSetOrchestratorAddresses& operator=(const MsgSetOrchestratorAddresses& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgSetOrchestratorAddresses& operator=(MsgSetOrchestratorAddresses&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgSetOrchestratorAddresses& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgSetOrchestratorAddresses* internal_default_instance() {
    return reinterpret_cast<const MsgSetOrchestratorAddresses*>(
               &_MsgSetOrchestratorAddresses_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MsgSetOrchestratorAddresses& a, MsgSetOrchestratorAddresses& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgSetOrchestratorAddresses* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgSetOrchestratorAddresses* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgSetOrchestratorAddresses* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgSetOrchestratorAddresses>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MsgSetOrchestratorAddresses& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MsgSetOrchestratorAddresses& from) {
    MsgSetOrchestratorAddresses::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgSetOrchestratorAddresses* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.peggy.v1.MsgSetOrchestratorAddresses";
  }
  protected:
  explicit MsgSetOrchestratorAddresses(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSenderFieldNumber = 1,
    kOrchestratorFieldNumber = 2,
    kEthAddressFieldNumber = 3,
  };
  // string sender = 1 [json_name = "sender"];
  void clear_sender() ;
  const std::string& sender() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_sender(Arg_&& arg, Args_... args);
  std::string* mutable_sender();
  PROTOBUF_NODISCARD std::string* release_sender();
  void set_allocated_sender(std::string* ptr);

  private:
  const std::string& _internal_sender() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sender(
      const std::string& value);
  std::string* _internal_mutable_sender();

  public:
  // string orchestrator = 2 [json_name = "orchestrator"];
  void clear_orchestrator() ;
  const std::string& orchestrator() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_orchestrator(Arg_&& arg, Args_... args);
  std::string* mutable_orchestrator();
  PROTOBUF_NODISCARD std::string* release_orchestrator();
  void set_allocated_orchestrator(std::string* ptr);

  private:
  const std::string& _internal_orchestrator() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_orchestrator(
      const std::string& value);
  std::string* _internal_mutable_orchestrator();

  public:
  // string eth_address = 3 [json_name = "ethAddress"];
  void clear_eth_address() ;
  const std::string& eth_address() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_eth_address(Arg_&& arg, Args_... args);
  std::string* mutable_eth_address();
  PROTOBUF_NODISCARD std::string* release_eth_address();
  void set_allocated_eth_address(std::string* ptr);

  private:
  const std::string& _internal_eth_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_eth_address(
      const std::string& value);
  std::string* _internal_mutable_eth_address();

  public:
  // @@protoc_insertion_point(class_scope:injective.peggy.v1.MsgSetOrchestratorAddresses)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sender_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr orchestrator_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr eth_address_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2fpeggy_2fv1_2fmsgs_2eproto;
};// -------------------------------------------------------------------

class MsgSetOrchestratorAddressesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:injective.peggy.v1.MsgSetOrchestratorAddressesResponse) */ {
 public:
  inline MsgSetOrchestratorAddressesResponse() : MsgSetOrchestratorAddressesResponse(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MsgSetOrchestratorAddressesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgSetOrchestratorAddressesResponse(const MsgSetOrchestratorAddressesResponse& from);
  MsgSetOrchestratorAddressesResponse(MsgSetOrchestratorAddressesResponse&& from) noexcept
    : MsgSetOrchestratorAddressesResponse() {
    *this = ::std::move(from);
  }

  inline MsgSetOrchestratorAddressesResponse& operator=(const MsgSetOrchestratorAddressesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgSetOrchestratorAddressesResponse& operator=(MsgSetOrchestratorAddressesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgSetOrchestratorAddressesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgSetOrchestratorAddressesResponse* internal_default_instance() {
    return reinterpret_cast<const MsgSetOrchestratorAddressesResponse*>(
               &_MsgSetOrchestratorAddressesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MsgSetOrchestratorAddressesResponse& a, MsgSetOrchestratorAddressesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgSetOrchestratorAddressesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgSetOrchestratorAddressesResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgSetOrchestratorAddressesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgSetOrchestratorAddressesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const MsgSetOrchestratorAddressesResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const MsgSetOrchestratorAddressesResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.peggy.v1.MsgSetOrchestratorAddressesResponse";
  }
  protected:
  explicit MsgSetOrchestratorAddressesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:injective.peggy.v1.MsgSetOrchestratorAddressesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_injective_2fpeggy_2fv1_2fmsgs_2eproto;
};// -------------------------------------------------------------------

class MsgValsetConfirm final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.peggy.v1.MsgValsetConfirm) */ {
 public:
  inline MsgValsetConfirm() : MsgValsetConfirm(nullptr) {}
  ~MsgValsetConfirm() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MsgValsetConfirm(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgValsetConfirm(const MsgValsetConfirm& from);
  MsgValsetConfirm(MsgValsetConfirm&& from) noexcept
    : MsgValsetConfirm() {
    *this = ::std::move(from);
  }

  inline MsgValsetConfirm& operator=(const MsgValsetConfirm& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgValsetConfirm& operator=(MsgValsetConfirm&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgValsetConfirm& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgValsetConfirm* internal_default_instance() {
    return reinterpret_cast<const MsgValsetConfirm*>(
               &_MsgValsetConfirm_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MsgValsetConfirm& a, MsgValsetConfirm& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgValsetConfirm* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgValsetConfirm* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgValsetConfirm* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgValsetConfirm>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MsgValsetConfirm& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MsgValsetConfirm& from) {
    MsgValsetConfirm::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgValsetConfirm* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.peggy.v1.MsgValsetConfirm";
  }
  protected:
  explicit MsgValsetConfirm(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrchestratorFieldNumber = 2,
    kEthAddressFieldNumber = 3,
    kSignatureFieldNumber = 4,
    kNonceFieldNumber = 1,
  };
  // string orchestrator = 2 [json_name = "orchestrator"];
  void clear_orchestrator() ;
  const std::string& orchestrator() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_orchestrator(Arg_&& arg, Args_... args);
  std::string* mutable_orchestrator();
  PROTOBUF_NODISCARD std::string* release_orchestrator();
  void set_allocated_orchestrator(std::string* ptr);

  private:
  const std::string& _internal_orchestrator() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_orchestrator(
      const std::string& value);
  std::string* _internal_mutable_orchestrator();

  public:
  // string eth_address = 3 [json_name = "ethAddress"];
  void clear_eth_address() ;
  const std::string& eth_address() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_eth_address(Arg_&& arg, Args_... args);
  std::string* mutable_eth_address();
  PROTOBUF_NODISCARD std::string* release_eth_address();
  void set_allocated_eth_address(std::string* ptr);

  private:
  const std::string& _internal_eth_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_eth_address(
      const std::string& value);
  std::string* _internal_mutable_eth_address();

  public:
  // string signature = 4 [json_name = "signature"];
  void clear_signature() ;
  const std::string& signature() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_signature(Arg_&& arg, Args_... args);
  std::string* mutable_signature();
  PROTOBUF_NODISCARD std::string* release_signature();
  void set_allocated_signature(std::string* ptr);

  private:
  const std::string& _internal_signature() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_signature(
      const std::string& value);
  std::string* _internal_mutable_signature();

  public:
  // uint64 nonce = 1 [json_name = "nonce"];
  void clear_nonce() ;
  ::uint64_t nonce() const;
  void set_nonce(::uint64_t value);

  private:
  ::uint64_t _internal_nonce() const;
  void _internal_set_nonce(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:injective.peggy.v1.MsgValsetConfirm)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr orchestrator_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr eth_address_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signature_;
    ::uint64_t nonce_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2fpeggy_2fv1_2fmsgs_2eproto;
};// -------------------------------------------------------------------

class MsgValsetConfirmResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:injective.peggy.v1.MsgValsetConfirmResponse) */ {
 public:
  inline MsgValsetConfirmResponse() : MsgValsetConfirmResponse(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MsgValsetConfirmResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgValsetConfirmResponse(const MsgValsetConfirmResponse& from);
  MsgValsetConfirmResponse(MsgValsetConfirmResponse&& from) noexcept
    : MsgValsetConfirmResponse() {
    *this = ::std::move(from);
  }

  inline MsgValsetConfirmResponse& operator=(const MsgValsetConfirmResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgValsetConfirmResponse& operator=(MsgValsetConfirmResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgValsetConfirmResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgValsetConfirmResponse* internal_default_instance() {
    return reinterpret_cast<const MsgValsetConfirmResponse*>(
               &_MsgValsetConfirmResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(MsgValsetConfirmResponse& a, MsgValsetConfirmResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgValsetConfirmResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgValsetConfirmResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgValsetConfirmResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgValsetConfirmResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const MsgValsetConfirmResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const MsgValsetConfirmResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.peggy.v1.MsgValsetConfirmResponse";
  }
  protected:
  explicit MsgValsetConfirmResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:injective.peggy.v1.MsgValsetConfirmResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_injective_2fpeggy_2fv1_2fmsgs_2eproto;
};// -------------------------------------------------------------------

class MsgSendToEth final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.peggy.v1.MsgSendToEth) */ {
 public:
  inline MsgSendToEth() : MsgSendToEth(nullptr) {}
  ~MsgSendToEth() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MsgSendToEth(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgSendToEth(const MsgSendToEth& from);
  MsgSendToEth(MsgSendToEth&& from) noexcept
    : MsgSendToEth() {
    *this = ::std::move(from);
  }

  inline MsgSendToEth& operator=(const MsgSendToEth& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgSendToEth& operator=(MsgSendToEth&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgSendToEth& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgSendToEth* internal_default_instance() {
    return reinterpret_cast<const MsgSendToEth*>(
               &_MsgSendToEth_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(MsgSendToEth& a, MsgSendToEth& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgSendToEth* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgSendToEth* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgSendToEth* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgSendToEth>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MsgSendToEth& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MsgSendToEth& from) {
    MsgSendToEth::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgSendToEth* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.peggy.v1.MsgSendToEth";
  }
  protected:
  explicit MsgSendToEth(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSenderFieldNumber = 1,
    kEthDestFieldNumber = 2,
    kAmountFieldNumber = 3,
    kBridgeFeeFieldNumber = 4,
  };
  // string sender = 1 [json_name = "sender"];
  void clear_sender() ;
  const std::string& sender() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_sender(Arg_&& arg, Args_... args);
  std::string* mutable_sender();
  PROTOBUF_NODISCARD std::string* release_sender();
  void set_allocated_sender(std::string* ptr);

  private:
  const std::string& _internal_sender() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sender(
      const std::string& value);
  std::string* _internal_mutable_sender();

  public:
  // string eth_dest = 2 [json_name = "ethDest"];
  void clear_eth_dest() ;
  const std::string& eth_dest() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_eth_dest(Arg_&& arg, Args_... args);
  std::string* mutable_eth_dest();
  PROTOBUF_NODISCARD std::string* release_eth_dest();
  void set_allocated_eth_dest(std::string* ptr);

  private:
  const std::string& _internal_eth_dest() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_eth_dest(
      const std::string& value);
  std::string* _internal_mutable_eth_dest();

  public:
  // .cosmos.base.v1beta1.Coin amount = 3 [json_name = "amount", (.gogoproto.nullable) = false];
  bool has_amount() const;
  void clear_amount() ;
  const ::cosmos::base::v1beta1::Coin& amount() const;
  PROTOBUF_NODISCARD ::cosmos::base::v1beta1::Coin* release_amount();
  ::cosmos::base::v1beta1::Coin* mutable_amount();
  void set_allocated_amount(::cosmos::base::v1beta1::Coin* amount);
  private:
  const ::cosmos::base::v1beta1::Coin& _internal_amount() const;
  ::cosmos::base::v1beta1::Coin* _internal_mutable_amount();
  public:
  void unsafe_arena_set_allocated_amount(
      ::cosmos::base::v1beta1::Coin* amount);
  ::cosmos::base::v1beta1::Coin* unsafe_arena_release_amount();
  // .cosmos.base.v1beta1.Coin bridge_fee = 4 [json_name = "bridgeFee", (.gogoproto.nullable) = false];
  bool has_bridge_fee() const;
  void clear_bridge_fee() ;
  const ::cosmos::base::v1beta1::Coin& bridge_fee() const;
  PROTOBUF_NODISCARD ::cosmos::base::v1beta1::Coin* release_bridge_fee();
  ::cosmos::base::v1beta1::Coin* mutable_bridge_fee();
  void set_allocated_bridge_fee(::cosmos::base::v1beta1::Coin* bridge_fee);
  private:
  const ::cosmos::base::v1beta1::Coin& _internal_bridge_fee() const;
  ::cosmos::base::v1beta1::Coin* _internal_mutable_bridge_fee();
  public:
  void unsafe_arena_set_allocated_bridge_fee(
      ::cosmos::base::v1beta1::Coin* bridge_fee);
  ::cosmos::base::v1beta1::Coin* unsafe_arena_release_bridge_fee();
  // @@protoc_insertion_point(class_scope:injective.peggy.v1.MsgSendToEth)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sender_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr eth_dest_;
    ::cosmos::base::v1beta1::Coin* amount_;
    ::cosmos::base::v1beta1::Coin* bridge_fee_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2fpeggy_2fv1_2fmsgs_2eproto;
};// -------------------------------------------------------------------

class MsgSendToEthResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:injective.peggy.v1.MsgSendToEthResponse) */ {
 public:
  inline MsgSendToEthResponse() : MsgSendToEthResponse(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MsgSendToEthResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgSendToEthResponse(const MsgSendToEthResponse& from);
  MsgSendToEthResponse(MsgSendToEthResponse&& from) noexcept
    : MsgSendToEthResponse() {
    *this = ::std::move(from);
  }

  inline MsgSendToEthResponse& operator=(const MsgSendToEthResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgSendToEthResponse& operator=(MsgSendToEthResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgSendToEthResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgSendToEthResponse* internal_default_instance() {
    return reinterpret_cast<const MsgSendToEthResponse*>(
               &_MsgSendToEthResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(MsgSendToEthResponse& a, MsgSendToEthResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgSendToEthResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgSendToEthResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgSendToEthResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgSendToEthResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const MsgSendToEthResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const MsgSendToEthResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.peggy.v1.MsgSendToEthResponse";
  }
  protected:
  explicit MsgSendToEthResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:injective.peggy.v1.MsgSendToEthResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_injective_2fpeggy_2fv1_2fmsgs_2eproto;
};// -------------------------------------------------------------------

class MsgRequestBatch final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.peggy.v1.MsgRequestBatch) */ {
 public:
  inline MsgRequestBatch() : MsgRequestBatch(nullptr) {}
  ~MsgRequestBatch() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MsgRequestBatch(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgRequestBatch(const MsgRequestBatch& from);
  MsgRequestBatch(MsgRequestBatch&& from) noexcept
    : MsgRequestBatch() {
    *this = ::std::move(from);
  }

  inline MsgRequestBatch& operator=(const MsgRequestBatch& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgRequestBatch& operator=(MsgRequestBatch&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgRequestBatch& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgRequestBatch* internal_default_instance() {
    return reinterpret_cast<const MsgRequestBatch*>(
               &_MsgRequestBatch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(MsgRequestBatch& a, MsgRequestBatch& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgRequestBatch* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgRequestBatch* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgRequestBatch* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgRequestBatch>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MsgRequestBatch& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MsgRequestBatch& from) {
    MsgRequestBatch::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgRequestBatch* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.peggy.v1.MsgRequestBatch";
  }
  protected:
  explicit MsgRequestBatch(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrchestratorFieldNumber = 1,
    kDenomFieldNumber = 2,
  };
  // string orchestrator = 1 [json_name = "orchestrator"];
  void clear_orchestrator() ;
  const std::string& orchestrator() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_orchestrator(Arg_&& arg, Args_... args);
  std::string* mutable_orchestrator();
  PROTOBUF_NODISCARD std::string* release_orchestrator();
  void set_allocated_orchestrator(std::string* ptr);

  private:
  const std::string& _internal_orchestrator() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_orchestrator(
      const std::string& value);
  std::string* _internal_mutable_orchestrator();

  public:
  // string denom = 2 [json_name = "denom"];
  void clear_denom() ;
  const std::string& denom() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_denom(Arg_&& arg, Args_... args);
  std::string* mutable_denom();
  PROTOBUF_NODISCARD std::string* release_denom();
  void set_allocated_denom(std::string* ptr);

  private:
  const std::string& _internal_denom() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_denom(
      const std::string& value);
  std::string* _internal_mutable_denom();

  public:
  // @@protoc_insertion_point(class_scope:injective.peggy.v1.MsgRequestBatch)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr orchestrator_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr denom_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2fpeggy_2fv1_2fmsgs_2eproto;
};// -------------------------------------------------------------------

class MsgRequestBatchResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:injective.peggy.v1.MsgRequestBatchResponse) */ {
 public:
  inline MsgRequestBatchResponse() : MsgRequestBatchResponse(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MsgRequestBatchResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgRequestBatchResponse(const MsgRequestBatchResponse& from);
  MsgRequestBatchResponse(MsgRequestBatchResponse&& from) noexcept
    : MsgRequestBatchResponse() {
    *this = ::std::move(from);
  }

  inline MsgRequestBatchResponse& operator=(const MsgRequestBatchResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgRequestBatchResponse& operator=(MsgRequestBatchResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgRequestBatchResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgRequestBatchResponse* internal_default_instance() {
    return reinterpret_cast<const MsgRequestBatchResponse*>(
               &_MsgRequestBatchResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(MsgRequestBatchResponse& a, MsgRequestBatchResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgRequestBatchResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgRequestBatchResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgRequestBatchResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgRequestBatchResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const MsgRequestBatchResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const MsgRequestBatchResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.peggy.v1.MsgRequestBatchResponse";
  }
  protected:
  explicit MsgRequestBatchResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:injective.peggy.v1.MsgRequestBatchResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_injective_2fpeggy_2fv1_2fmsgs_2eproto;
};// -------------------------------------------------------------------

class MsgConfirmBatch final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.peggy.v1.MsgConfirmBatch) */ {
 public:
  inline MsgConfirmBatch() : MsgConfirmBatch(nullptr) {}
  ~MsgConfirmBatch() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MsgConfirmBatch(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgConfirmBatch(const MsgConfirmBatch& from);
  MsgConfirmBatch(MsgConfirmBatch&& from) noexcept
    : MsgConfirmBatch() {
    *this = ::std::move(from);
  }

  inline MsgConfirmBatch& operator=(const MsgConfirmBatch& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgConfirmBatch& operator=(MsgConfirmBatch&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgConfirmBatch& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgConfirmBatch* internal_default_instance() {
    return reinterpret_cast<const MsgConfirmBatch*>(
               &_MsgConfirmBatch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(MsgConfirmBatch& a, MsgConfirmBatch& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgConfirmBatch* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgConfirmBatch* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgConfirmBatch* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgConfirmBatch>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MsgConfirmBatch& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MsgConfirmBatch& from) {
    MsgConfirmBatch::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgConfirmBatch* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.peggy.v1.MsgConfirmBatch";
  }
  protected:
  explicit MsgConfirmBatch(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenContractFieldNumber = 2,
    kEthSignerFieldNumber = 3,
    kOrchestratorFieldNumber = 4,
    kSignatureFieldNumber = 5,
    kNonceFieldNumber = 1,
  };
  // string token_contract = 2 [json_name = "tokenContract"];
  void clear_token_contract() ;
  const std::string& token_contract() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_token_contract(Arg_&& arg, Args_... args);
  std::string* mutable_token_contract();
  PROTOBUF_NODISCARD std::string* release_token_contract();
  void set_allocated_token_contract(std::string* ptr);

  private:
  const std::string& _internal_token_contract() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token_contract(
      const std::string& value);
  std::string* _internal_mutable_token_contract();

  public:
  // string eth_signer = 3 [json_name = "ethSigner"];
  void clear_eth_signer() ;
  const std::string& eth_signer() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_eth_signer(Arg_&& arg, Args_... args);
  std::string* mutable_eth_signer();
  PROTOBUF_NODISCARD std::string* release_eth_signer();
  void set_allocated_eth_signer(std::string* ptr);

  private:
  const std::string& _internal_eth_signer() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_eth_signer(
      const std::string& value);
  std::string* _internal_mutable_eth_signer();

  public:
  // string orchestrator = 4 [json_name = "orchestrator"];
  void clear_orchestrator() ;
  const std::string& orchestrator() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_orchestrator(Arg_&& arg, Args_... args);
  std::string* mutable_orchestrator();
  PROTOBUF_NODISCARD std::string* release_orchestrator();
  void set_allocated_orchestrator(std::string* ptr);

  private:
  const std::string& _internal_orchestrator() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_orchestrator(
      const std::string& value);
  std::string* _internal_mutable_orchestrator();

  public:
  // string signature = 5 [json_name = "signature"];
  void clear_signature() ;
  const std::string& signature() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_signature(Arg_&& arg, Args_... args);
  std::string* mutable_signature();
  PROTOBUF_NODISCARD std::string* release_signature();
  void set_allocated_signature(std::string* ptr);

  private:
  const std::string& _internal_signature() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_signature(
      const std::string& value);
  std::string* _internal_mutable_signature();

  public:
  // uint64 nonce = 1 [json_name = "nonce"];
  void clear_nonce() ;
  ::uint64_t nonce() const;
  void set_nonce(::uint64_t value);

  private:
  ::uint64_t _internal_nonce() const;
  void _internal_set_nonce(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:injective.peggy.v1.MsgConfirmBatch)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_contract_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr eth_signer_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr orchestrator_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signature_;
    ::uint64_t nonce_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2fpeggy_2fv1_2fmsgs_2eproto;
};// -------------------------------------------------------------------

class MsgConfirmBatchResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:injective.peggy.v1.MsgConfirmBatchResponse) */ {
 public:
  inline MsgConfirmBatchResponse() : MsgConfirmBatchResponse(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MsgConfirmBatchResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgConfirmBatchResponse(const MsgConfirmBatchResponse& from);
  MsgConfirmBatchResponse(MsgConfirmBatchResponse&& from) noexcept
    : MsgConfirmBatchResponse() {
    *this = ::std::move(from);
  }

  inline MsgConfirmBatchResponse& operator=(const MsgConfirmBatchResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgConfirmBatchResponse& operator=(MsgConfirmBatchResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgConfirmBatchResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgConfirmBatchResponse* internal_default_instance() {
    return reinterpret_cast<const MsgConfirmBatchResponse*>(
               &_MsgConfirmBatchResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(MsgConfirmBatchResponse& a, MsgConfirmBatchResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgConfirmBatchResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgConfirmBatchResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgConfirmBatchResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgConfirmBatchResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const MsgConfirmBatchResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const MsgConfirmBatchResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.peggy.v1.MsgConfirmBatchResponse";
  }
  protected:
  explicit MsgConfirmBatchResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:injective.peggy.v1.MsgConfirmBatchResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_injective_2fpeggy_2fv1_2fmsgs_2eproto;
};// -------------------------------------------------------------------

class MsgDepositClaim final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.peggy.v1.MsgDepositClaim) */ {
 public:
  inline MsgDepositClaim() : MsgDepositClaim(nullptr) {}
  ~MsgDepositClaim() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MsgDepositClaim(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgDepositClaim(const MsgDepositClaim& from);
  MsgDepositClaim(MsgDepositClaim&& from) noexcept
    : MsgDepositClaim() {
    *this = ::std::move(from);
  }

  inline MsgDepositClaim& operator=(const MsgDepositClaim& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgDepositClaim& operator=(MsgDepositClaim&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgDepositClaim& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgDepositClaim* internal_default_instance() {
    return reinterpret_cast<const MsgDepositClaim*>(
               &_MsgDepositClaim_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(MsgDepositClaim& a, MsgDepositClaim& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgDepositClaim* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgDepositClaim* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgDepositClaim* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgDepositClaim>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MsgDepositClaim& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MsgDepositClaim& from) {
    MsgDepositClaim::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgDepositClaim* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.peggy.v1.MsgDepositClaim";
  }
  protected:
  explicit MsgDepositClaim(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenContractFieldNumber = 3,
    kAmountFieldNumber = 4,
    kEthereumSenderFieldNumber = 5,
    kCosmosReceiverFieldNumber = 6,
    kOrchestratorFieldNumber = 7,
    kDataFieldNumber = 8,
    kEventNonceFieldNumber = 1,
    kBlockHeightFieldNumber = 2,
  };
  // string token_contract = 3 [json_name = "tokenContract"];
  void clear_token_contract() ;
  const std::string& token_contract() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_token_contract(Arg_&& arg, Args_... args);
  std::string* mutable_token_contract();
  PROTOBUF_NODISCARD std::string* release_token_contract();
  void set_allocated_token_contract(std::string* ptr);

  private:
  const std::string& _internal_token_contract() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token_contract(
      const std::string& value);
  std::string* _internal_mutable_token_contract();

  public:
  // string amount = 4 [json_name = "amount", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int"];
  void clear_amount() ;
  const std::string& amount() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_amount(Arg_&& arg, Args_... args);
  std::string* mutable_amount();
  PROTOBUF_NODISCARD std::string* release_amount();
  void set_allocated_amount(std::string* ptr);

  private:
  const std::string& _internal_amount() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_amount(
      const std::string& value);
  std::string* _internal_mutable_amount();

  public:
  // string ethereum_sender = 5 [json_name = "ethereumSender"];
  void clear_ethereum_sender() ;
  const std::string& ethereum_sender() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_ethereum_sender(Arg_&& arg, Args_... args);
  std::string* mutable_ethereum_sender();
  PROTOBUF_NODISCARD std::string* release_ethereum_sender();
  void set_allocated_ethereum_sender(std::string* ptr);

  private:
  const std::string& _internal_ethereum_sender() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ethereum_sender(
      const std::string& value);
  std::string* _internal_mutable_ethereum_sender();

  public:
  // string cosmos_receiver = 6 [json_name = "cosmosReceiver"];
  void clear_cosmos_receiver() ;
  const std::string& cosmos_receiver() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_cosmos_receiver(Arg_&& arg, Args_... args);
  std::string* mutable_cosmos_receiver();
  PROTOBUF_NODISCARD std::string* release_cosmos_receiver();
  void set_allocated_cosmos_receiver(std::string* ptr);

  private:
  const std::string& _internal_cosmos_receiver() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cosmos_receiver(
      const std::string& value);
  std::string* _internal_mutable_cosmos_receiver();

  public:
  // string orchestrator = 7 [json_name = "orchestrator"];
  void clear_orchestrator() ;
  const std::string& orchestrator() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_orchestrator(Arg_&& arg, Args_... args);
  std::string* mutable_orchestrator();
  PROTOBUF_NODISCARD std::string* release_orchestrator();
  void set_allocated_orchestrator(std::string* ptr);

  private:
  const std::string& _internal_orchestrator() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_orchestrator(
      const std::string& value);
  std::string* _internal_mutable_orchestrator();

  public:
  // string data = 8 [json_name = "data"];
  void clear_data() ;
  const std::string& data() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_data(Arg_&& arg, Args_... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* ptr);

  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(
      const std::string& value);
  std::string* _internal_mutable_data();

  public:
  // uint64 event_nonce = 1 [json_name = "eventNonce"];
  void clear_event_nonce() ;
  ::uint64_t event_nonce() const;
  void set_event_nonce(::uint64_t value);

  private:
  ::uint64_t _internal_event_nonce() const;
  void _internal_set_event_nonce(::uint64_t value);

  public:
  // uint64 block_height = 2 [json_name = "blockHeight"];
  void clear_block_height() ;
  ::uint64_t block_height() const;
  void set_block_height(::uint64_t value);

  private:
  ::uint64_t _internal_block_height() const;
  void _internal_set_block_height(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:injective.peggy.v1.MsgDepositClaim)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_contract_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr amount_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ethereum_sender_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cosmos_receiver_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr orchestrator_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
    ::uint64_t event_nonce_;
    ::uint64_t block_height_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2fpeggy_2fv1_2fmsgs_2eproto;
};// -------------------------------------------------------------------

class MsgDepositClaimResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:injective.peggy.v1.MsgDepositClaimResponse) */ {
 public:
  inline MsgDepositClaimResponse() : MsgDepositClaimResponse(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MsgDepositClaimResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgDepositClaimResponse(const MsgDepositClaimResponse& from);
  MsgDepositClaimResponse(MsgDepositClaimResponse&& from) noexcept
    : MsgDepositClaimResponse() {
    *this = ::std::move(from);
  }

  inline MsgDepositClaimResponse& operator=(const MsgDepositClaimResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgDepositClaimResponse& operator=(MsgDepositClaimResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgDepositClaimResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgDepositClaimResponse* internal_default_instance() {
    return reinterpret_cast<const MsgDepositClaimResponse*>(
               &_MsgDepositClaimResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(MsgDepositClaimResponse& a, MsgDepositClaimResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgDepositClaimResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgDepositClaimResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgDepositClaimResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgDepositClaimResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const MsgDepositClaimResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const MsgDepositClaimResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.peggy.v1.MsgDepositClaimResponse";
  }
  protected:
  explicit MsgDepositClaimResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:injective.peggy.v1.MsgDepositClaimResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_injective_2fpeggy_2fv1_2fmsgs_2eproto;
};// -------------------------------------------------------------------

class MsgWithdrawClaim final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.peggy.v1.MsgWithdrawClaim) */ {
 public:
  inline MsgWithdrawClaim() : MsgWithdrawClaim(nullptr) {}
  ~MsgWithdrawClaim() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MsgWithdrawClaim(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgWithdrawClaim(const MsgWithdrawClaim& from);
  MsgWithdrawClaim(MsgWithdrawClaim&& from) noexcept
    : MsgWithdrawClaim() {
    *this = ::std::move(from);
  }

  inline MsgWithdrawClaim& operator=(const MsgWithdrawClaim& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgWithdrawClaim& operator=(MsgWithdrawClaim&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgWithdrawClaim& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgWithdrawClaim* internal_default_instance() {
    return reinterpret_cast<const MsgWithdrawClaim*>(
               &_MsgWithdrawClaim_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(MsgWithdrawClaim& a, MsgWithdrawClaim& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgWithdrawClaim* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgWithdrawClaim* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgWithdrawClaim* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgWithdrawClaim>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MsgWithdrawClaim& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MsgWithdrawClaim& from) {
    MsgWithdrawClaim::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgWithdrawClaim* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.peggy.v1.MsgWithdrawClaim";
  }
  protected:
  explicit MsgWithdrawClaim(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenContractFieldNumber = 4,
    kOrchestratorFieldNumber = 5,
    kEventNonceFieldNumber = 1,
    kBlockHeightFieldNumber = 2,
    kBatchNonceFieldNumber = 3,
  };
  // string token_contract = 4 [json_name = "tokenContract"];
  void clear_token_contract() ;
  const std::string& token_contract() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_token_contract(Arg_&& arg, Args_... args);
  std::string* mutable_token_contract();
  PROTOBUF_NODISCARD std::string* release_token_contract();
  void set_allocated_token_contract(std::string* ptr);

  private:
  const std::string& _internal_token_contract() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token_contract(
      const std::string& value);
  std::string* _internal_mutable_token_contract();

  public:
  // string orchestrator = 5 [json_name = "orchestrator"];
  void clear_orchestrator() ;
  const std::string& orchestrator() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_orchestrator(Arg_&& arg, Args_... args);
  std::string* mutable_orchestrator();
  PROTOBUF_NODISCARD std::string* release_orchestrator();
  void set_allocated_orchestrator(std::string* ptr);

  private:
  const std::string& _internal_orchestrator() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_orchestrator(
      const std::string& value);
  std::string* _internal_mutable_orchestrator();

  public:
  // uint64 event_nonce = 1 [json_name = "eventNonce"];
  void clear_event_nonce() ;
  ::uint64_t event_nonce() const;
  void set_event_nonce(::uint64_t value);

  private:
  ::uint64_t _internal_event_nonce() const;
  void _internal_set_event_nonce(::uint64_t value);

  public:
  // uint64 block_height = 2 [json_name = "blockHeight"];
  void clear_block_height() ;
  ::uint64_t block_height() const;
  void set_block_height(::uint64_t value);

  private:
  ::uint64_t _internal_block_height() const;
  void _internal_set_block_height(::uint64_t value);

  public:
  // uint64 batch_nonce = 3 [json_name = "batchNonce"];
  void clear_batch_nonce() ;
  ::uint64_t batch_nonce() const;
  void set_batch_nonce(::uint64_t value);

  private:
  ::uint64_t _internal_batch_nonce() const;
  void _internal_set_batch_nonce(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:injective.peggy.v1.MsgWithdrawClaim)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_contract_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr orchestrator_;
    ::uint64_t event_nonce_;
    ::uint64_t block_height_;
    ::uint64_t batch_nonce_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2fpeggy_2fv1_2fmsgs_2eproto;
};// -------------------------------------------------------------------

class MsgWithdrawClaimResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:injective.peggy.v1.MsgWithdrawClaimResponse) */ {
 public:
  inline MsgWithdrawClaimResponse() : MsgWithdrawClaimResponse(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MsgWithdrawClaimResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgWithdrawClaimResponse(const MsgWithdrawClaimResponse& from);
  MsgWithdrawClaimResponse(MsgWithdrawClaimResponse&& from) noexcept
    : MsgWithdrawClaimResponse() {
    *this = ::std::move(from);
  }

  inline MsgWithdrawClaimResponse& operator=(const MsgWithdrawClaimResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgWithdrawClaimResponse& operator=(MsgWithdrawClaimResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgWithdrawClaimResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgWithdrawClaimResponse* internal_default_instance() {
    return reinterpret_cast<const MsgWithdrawClaimResponse*>(
               &_MsgWithdrawClaimResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(MsgWithdrawClaimResponse& a, MsgWithdrawClaimResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgWithdrawClaimResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgWithdrawClaimResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgWithdrawClaimResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgWithdrawClaimResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const MsgWithdrawClaimResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const MsgWithdrawClaimResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.peggy.v1.MsgWithdrawClaimResponse";
  }
  protected:
  explicit MsgWithdrawClaimResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:injective.peggy.v1.MsgWithdrawClaimResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_injective_2fpeggy_2fv1_2fmsgs_2eproto;
};// -------------------------------------------------------------------

class MsgERC20DeployedClaim final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.peggy.v1.MsgERC20DeployedClaim) */ {
 public:
  inline MsgERC20DeployedClaim() : MsgERC20DeployedClaim(nullptr) {}
  ~MsgERC20DeployedClaim() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MsgERC20DeployedClaim(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgERC20DeployedClaim(const MsgERC20DeployedClaim& from);
  MsgERC20DeployedClaim(MsgERC20DeployedClaim&& from) noexcept
    : MsgERC20DeployedClaim() {
    *this = ::std::move(from);
  }

  inline MsgERC20DeployedClaim& operator=(const MsgERC20DeployedClaim& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgERC20DeployedClaim& operator=(MsgERC20DeployedClaim&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgERC20DeployedClaim& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgERC20DeployedClaim* internal_default_instance() {
    return reinterpret_cast<const MsgERC20DeployedClaim*>(
               &_MsgERC20DeployedClaim_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(MsgERC20DeployedClaim& a, MsgERC20DeployedClaim& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgERC20DeployedClaim* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgERC20DeployedClaim* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgERC20DeployedClaim* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgERC20DeployedClaim>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MsgERC20DeployedClaim& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MsgERC20DeployedClaim& from) {
    MsgERC20DeployedClaim::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgERC20DeployedClaim* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.peggy.v1.MsgERC20DeployedClaim";
  }
  protected:
  explicit MsgERC20DeployedClaim(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCosmosDenomFieldNumber = 3,
    kTokenContractFieldNumber = 4,
    kNameFieldNumber = 5,
    kSymbolFieldNumber = 6,
    kOrchestratorFieldNumber = 8,
    kEventNonceFieldNumber = 1,
    kBlockHeightFieldNumber = 2,
    kDecimalsFieldNumber = 7,
  };
  // string cosmos_denom = 3 [json_name = "cosmosDenom"];
  void clear_cosmos_denom() ;
  const std::string& cosmos_denom() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_cosmos_denom(Arg_&& arg, Args_... args);
  std::string* mutable_cosmos_denom();
  PROTOBUF_NODISCARD std::string* release_cosmos_denom();
  void set_allocated_cosmos_denom(std::string* ptr);

  private:
  const std::string& _internal_cosmos_denom() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cosmos_denom(
      const std::string& value);
  std::string* _internal_mutable_cosmos_denom();

  public:
  // string token_contract = 4 [json_name = "tokenContract"];
  void clear_token_contract() ;
  const std::string& token_contract() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_token_contract(Arg_&& arg, Args_... args);
  std::string* mutable_token_contract();
  PROTOBUF_NODISCARD std::string* release_token_contract();
  void set_allocated_token_contract(std::string* ptr);

  private:
  const std::string& _internal_token_contract() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token_contract(
      const std::string& value);
  std::string* _internal_mutable_token_contract();

  public:
  // string name = 5 [json_name = "name"];
  void clear_name() ;
  const std::string& name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string symbol = 6 [json_name = "symbol"];
  void clear_symbol() ;
  const std::string& symbol() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_symbol(Arg_&& arg, Args_... args);
  std::string* mutable_symbol();
  PROTOBUF_NODISCARD std::string* release_symbol();
  void set_allocated_symbol(std::string* ptr);

  private:
  const std::string& _internal_symbol() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_symbol(
      const std::string& value);
  std::string* _internal_mutable_symbol();

  public:
  // string orchestrator = 8 [json_name = "orchestrator"];
  void clear_orchestrator() ;
  const std::string& orchestrator() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_orchestrator(Arg_&& arg, Args_... args);
  std::string* mutable_orchestrator();
  PROTOBUF_NODISCARD std::string* release_orchestrator();
  void set_allocated_orchestrator(std::string* ptr);

  private:
  const std::string& _internal_orchestrator() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_orchestrator(
      const std::string& value);
  std::string* _internal_mutable_orchestrator();

  public:
  // uint64 event_nonce = 1 [json_name = "eventNonce"];
  void clear_event_nonce() ;
  ::uint64_t event_nonce() const;
  void set_event_nonce(::uint64_t value);

  private:
  ::uint64_t _internal_event_nonce() const;
  void _internal_set_event_nonce(::uint64_t value);

  public:
  // uint64 block_height = 2 [json_name = "blockHeight"];
  void clear_block_height() ;
  ::uint64_t block_height() const;
  void set_block_height(::uint64_t value);

  private:
  ::uint64_t _internal_block_height() const;
  void _internal_set_block_height(::uint64_t value);

  public:
  // uint64 decimals = 7 [json_name = "decimals"];
  void clear_decimals() ;
  ::uint64_t decimals() const;
  void set_decimals(::uint64_t value);

  private:
  ::uint64_t _internal_decimals() const;
  void _internal_set_decimals(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:injective.peggy.v1.MsgERC20DeployedClaim)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cosmos_denom_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_contract_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr symbol_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr orchestrator_;
    ::uint64_t event_nonce_;
    ::uint64_t block_height_;
    ::uint64_t decimals_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2fpeggy_2fv1_2fmsgs_2eproto;
};// -------------------------------------------------------------------

class MsgERC20DeployedClaimResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:injective.peggy.v1.MsgERC20DeployedClaimResponse) */ {
 public:
  inline MsgERC20DeployedClaimResponse() : MsgERC20DeployedClaimResponse(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MsgERC20DeployedClaimResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgERC20DeployedClaimResponse(const MsgERC20DeployedClaimResponse& from);
  MsgERC20DeployedClaimResponse(MsgERC20DeployedClaimResponse&& from) noexcept
    : MsgERC20DeployedClaimResponse() {
    *this = ::std::move(from);
  }

  inline MsgERC20DeployedClaimResponse& operator=(const MsgERC20DeployedClaimResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgERC20DeployedClaimResponse& operator=(MsgERC20DeployedClaimResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgERC20DeployedClaimResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgERC20DeployedClaimResponse* internal_default_instance() {
    return reinterpret_cast<const MsgERC20DeployedClaimResponse*>(
               &_MsgERC20DeployedClaimResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(MsgERC20DeployedClaimResponse& a, MsgERC20DeployedClaimResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgERC20DeployedClaimResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgERC20DeployedClaimResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgERC20DeployedClaimResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgERC20DeployedClaimResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const MsgERC20DeployedClaimResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const MsgERC20DeployedClaimResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.peggy.v1.MsgERC20DeployedClaimResponse";
  }
  protected:
  explicit MsgERC20DeployedClaimResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:injective.peggy.v1.MsgERC20DeployedClaimResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_injective_2fpeggy_2fv1_2fmsgs_2eproto;
};// -------------------------------------------------------------------

class MsgCancelSendToEth final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.peggy.v1.MsgCancelSendToEth) */ {
 public:
  inline MsgCancelSendToEth() : MsgCancelSendToEth(nullptr) {}
  ~MsgCancelSendToEth() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MsgCancelSendToEth(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgCancelSendToEth(const MsgCancelSendToEth& from);
  MsgCancelSendToEth(MsgCancelSendToEth&& from) noexcept
    : MsgCancelSendToEth() {
    *this = ::std::move(from);
  }

  inline MsgCancelSendToEth& operator=(const MsgCancelSendToEth& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgCancelSendToEth& operator=(MsgCancelSendToEth&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgCancelSendToEth& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgCancelSendToEth* internal_default_instance() {
    return reinterpret_cast<const MsgCancelSendToEth*>(
               &_MsgCancelSendToEth_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(MsgCancelSendToEth& a, MsgCancelSendToEth& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgCancelSendToEth* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgCancelSendToEth* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgCancelSendToEth* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgCancelSendToEth>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MsgCancelSendToEth& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MsgCancelSendToEth& from) {
    MsgCancelSendToEth::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgCancelSendToEth* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.peggy.v1.MsgCancelSendToEth";
  }
  protected:
  explicit MsgCancelSendToEth(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSenderFieldNumber = 2,
    kTransactionIdFieldNumber = 1,
  };
  // string sender = 2 [json_name = "sender"];
  void clear_sender() ;
  const std::string& sender() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_sender(Arg_&& arg, Args_... args);
  std::string* mutable_sender();
  PROTOBUF_NODISCARD std::string* release_sender();
  void set_allocated_sender(std::string* ptr);

  private:
  const std::string& _internal_sender() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sender(
      const std::string& value);
  std::string* _internal_mutable_sender();

  public:
  // uint64 transaction_id = 1 [json_name = "transactionId"];
  void clear_transaction_id() ;
  ::uint64_t transaction_id() const;
  void set_transaction_id(::uint64_t value);

  private:
  ::uint64_t _internal_transaction_id() const;
  void _internal_set_transaction_id(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:injective.peggy.v1.MsgCancelSendToEth)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sender_;
    ::uint64_t transaction_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2fpeggy_2fv1_2fmsgs_2eproto;
};// -------------------------------------------------------------------

class MsgCancelSendToEthResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:injective.peggy.v1.MsgCancelSendToEthResponse) */ {
 public:
  inline MsgCancelSendToEthResponse() : MsgCancelSendToEthResponse(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MsgCancelSendToEthResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgCancelSendToEthResponse(const MsgCancelSendToEthResponse& from);
  MsgCancelSendToEthResponse(MsgCancelSendToEthResponse&& from) noexcept
    : MsgCancelSendToEthResponse() {
    *this = ::std::move(from);
  }

  inline MsgCancelSendToEthResponse& operator=(const MsgCancelSendToEthResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgCancelSendToEthResponse& operator=(MsgCancelSendToEthResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgCancelSendToEthResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgCancelSendToEthResponse* internal_default_instance() {
    return reinterpret_cast<const MsgCancelSendToEthResponse*>(
               &_MsgCancelSendToEthResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(MsgCancelSendToEthResponse& a, MsgCancelSendToEthResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgCancelSendToEthResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgCancelSendToEthResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgCancelSendToEthResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgCancelSendToEthResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const MsgCancelSendToEthResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const MsgCancelSendToEthResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.peggy.v1.MsgCancelSendToEthResponse";
  }
  protected:
  explicit MsgCancelSendToEthResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:injective.peggy.v1.MsgCancelSendToEthResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_injective_2fpeggy_2fv1_2fmsgs_2eproto;
};// -------------------------------------------------------------------

class MsgSubmitBadSignatureEvidence final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.peggy.v1.MsgSubmitBadSignatureEvidence) */ {
 public:
  inline MsgSubmitBadSignatureEvidence() : MsgSubmitBadSignatureEvidence(nullptr) {}
  ~MsgSubmitBadSignatureEvidence() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MsgSubmitBadSignatureEvidence(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgSubmitBadSignatureEvidence(const MsgSubmitBadSignatureEvidence& from);
  MsgSubmitBadSignatureEvidence(MsgSubmitBadSignatureEvidence&& from) noexcept
    : MsgSubmitBadSignatureEvidence() {
    *this = ::std::move(from);
  }

  inline MsgSubmitBadSignatureEvidence& operator=(const MsgSubmitBadSignatureEvidence& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgSubmitBadSignatureEvidence& operator=(MsgSubmitBadSignatureEvidence&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgSubmitBadSignatureEvidence& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgSubmitBadSignatureEvidence* internal_default_instance() {
    return reinterpret_cast<const MsgSubmitBadSignatureEvidence*>(
               &_MsgSubmitBadSignatureEvidence_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(MsgSubmitBadSignatureEvidence& a, MsgSubmitBadSignatureEvidence& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgSubmitBadSignatureEvidence* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgSubmitBadSignatureEvidence* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgSubmitBadSignatureEvidence* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgSubmitBadSignatureEvidence>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MsgSubmitBadSignatureEvidence& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MsgSubmitBadSignatureEvidence& from) {
    MsgSubmitBadSignatureEvidence::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgSubmitBadSignatureEvidence* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.peggy.v1.MsgSubmitBadSignatureEvidence";
  }
  protected:
  explicit MsgSubmitBadSignatureEvidence(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSignatureFieldNumber = 2,
    kSenderFieldNumber = 3,
    kSubjectFieldNumber = 1,
  };
  // string signature = 2 [json_name = "signature"];
  void clear_signature() ;
  const std::string& signature() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_signature(Arg_&& arg, Args_... args);
  std::string* mutable_signature();
  PROTOBUF_NODISCARD std::string* release_signature();
  void set_allocated_signature(std::string* ptr);

  private:
  const std::string& _internal_signature() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_signature(
      const std::string& value);
  std::string* _internal_mutable_signature();

  public:
  // string sender = 3 [json_name = "sender"];
  void clear_sender() ;
  const std::string& sender() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_sender(Arg_&& arg, Args_... args);
  std::string* mutable_sender();
  PROTOBUF_NODISCARD std::string* release_sender();
  void set_allocated_sender(std::string* ptr);

  private:
  const std::string& _internal_sender() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sender(
      const std::string& value);
  std::string* _internal_mutable_sender();

  public:
  // .google.protobuf.Any subject = 1 [json_name = "subject"];
  bool has_subject() const;
  void clear_subject() ;
  const ::PROTOBUF_NAMESPACE_ID::Any& subject() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Any* release_subject();
  ::PROTOBUF_NAMESPACE_ID::Any* mutable_subject();
  void set_allocated_subject(::PROTOBUF_NAMESPACE_ID::Any* subject);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Any& _internal_subject() const;
  ::PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_subject();
  public:
  void unsafe_arena_set_allocated_subject(
      ::PROTOBUF_NAMESPACE_ID::Any* subject);
  ::PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_subject();
  // @@protoc_insertion_point(class_scope:injective.peggy.v1.MsgSubmitBadSignatureEvidence)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signature_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sender_;
    ::PROTOBUF_NAMESPACE_ID::Any* subject_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2fpeggy_2fv1_2fmsgs_2eproto;
};// -------------------------------------------------------------------

class MsgSubmitBadSignatureEvidenceResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:injective.peggy.v1.MsgSubmitBadSignatureEvidenceResponse) */ {
 public:
  inline MsgSubmitBadSignatureEvidenceResponse() : MsgSubmitBadSignatureEvidenceResponse(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MsgSubmitBadSignatureEvidenceResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgSubmitBadSignatureEvidenceResponse(const MsgSubmitBadSignatureEvidenceResponse& from);
  MsgSubmitBadSignatureEvidenceResponse(MsgSubmitBadSignatureEvidenceResponse&& from) noexcept
    : MsgSubmitBadSignatureEvidenceResponse() {
    *this = ::std::move(from);
  }

  inline MsgSubmitBadSignatureEvidenceResponse& operator=(const MsgSubmitBadSignatureEvidenceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgSubmitBadSignatureEvidenceResponse& operator=(MsgSubmitBadSignatureEvidenceResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgSubmitBadSignatureEvidenceResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgSubmitBadSignatureEvidenceResponse* internal_default_instance() {
    return reinterpret_cast<const MsgSubmitBadSignatureEvidenceResponse*>(
               &_MsgSubmitBadSignatureEvidenceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(MsgSubmitBadSignatureEvidenceResponse& a, MsgSubmitBadSignatureEvidenceResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgSubmitBadSignatureEvidenceResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgSubmitBadSignatureEvidenceResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgSubmitBadSignatureEvidenceResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgSubmitBadSignatureEvidenceResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const MsgSubmitBadSignatureEvidenceResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const MsgSubmitBadSignatureEvidenceResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.peggy.v1.MsgSubmitBadSignatureEvidenceResponse";
  }
  protected:
  explicit MsgSubmitBadSignatureEvidenceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:injective.peggy.v1.MsgSubmitBadSignatureEvidenceResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_injective_2fpeggy_2fv1_2fmsgs_2eproto;
};// -------------------------------------------------------------------

class MsgValsetUpdatedClaim final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.peggy.v1.MsgValsetUpdatedClaim) */ {
 public:
  inline MsgValsetUpdatedClaim() : MsgValsetUpdatedClaim(nullptr) {}
  ~MsgValsetUpdatedClaim() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MsgValsetUpdatedClaim(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgValsetUpdatedClaim(const MsgValsetUpdatedClaim& from);
  MsgValsetUpdatedClaim(MsgValsetUpdatedClaim&& from) noexcept
    : MsgValsetUpdatedClaim() {
    *this = ::std::move(from);
  }

  inline MsgValsetUpdatedClaim& operator=(const MsgValsetUpdatedClaim& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgValsetUpdatedClaim& operator=(MsgValsetUpdatedClaim&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgValsetUpdatedClaim& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgValsetUpdatedClaim* internal_default_instance() {
    return reinterpret_cast<const MsgValsetUpdatedClaim*>(
               &_MsgValsetUpdatedClaim_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(MsgValsetUpdatedClaim& a, MsgValsetUpdatedClaim& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgValsetUpdatedClaim* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgValsetUpdatedClaim* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgValsetUpdatedClaim* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgValsetUpdatedClaim>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MsgValsetUpdatedClaim& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MsgValsetUpdatedClaim& from) {
    MsgValsetUpdatedClaim::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgValsetUpdatedClaim* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.peggy.v1.MsgValsetUpdatedClaim";
  }
  protected:
  explicit MsgValsetUpdatedClaim(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMembersFieldNumber = 4,
    kRewardAmountFieldNumber = 5,
    kRewardTokenFieldNumber = 6,
    kOrchestratorFieldNumber = 7,
    kEventNonceFieldNumber = 1,
    kValsetNonceFieldNumber = 2,
    kBlockHeightFieldNumber = 3,
  };
  // repeated .injective.peggy.v1.BridgeValidator members = 4 [json_name = "members"];
  int members_size() const;
  private:
  int _internal_members_size() const;

  public:
  void clear_members() ;
  ::injective::peggy::v1::BridgeValidator* mutable_members(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::peggy::v1::BridgeValidator >*
      mutable_members();
  private:
  const ::injective::peggy::v1::BridgeValidator& _internal_members(int index) const;
  ::injective::peggy::v1::BridgeValidator* _internal_add_members();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::peggy::v1::BridgeValidator>& _internal_members() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::peggy::v1::BridgeValidator>* _internal_mutable_members();
  public:
  const ::injective::peggy::v1::BridgeValidator& members(int index) const;
  ::injective::peggy::v1::BridgeValidator* add_members();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::peggy::v1::BridgeValidator >&
      members() const;
  // string reward_amount = 5 [json_name = "rewardAmount", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int"];
  void clear_reward_amount() ;
  const std::string& reward_amount() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_reward_amount(Arg_&& arg, Args_... args);
  std::string* mutable_reward_amount();
  PROTOBUF_NODISCARD std::string* release_reward_amount();
  void set_allocated_reward_amount(std::string* ptr);

  private:
  const std::string& _internal_reward_amount() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reward_amount(
      const std::string& value);
  std::string* _internal_mutable_reward_amount();

  public:
  // string reward_token = 6 [json_name = "rewardToken"];
  void clear_reward_token() ;
  const std::string& reward_token() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_reward_token(Arg_&& arg, Args_... args);
  std::string* mutable_reward_token();
  PROTOBUF_NODISCARD std::string* release_reward_token();
  void set_allocated_reward_token(std::string* ptr);

  private:
  const std::string& _internal_reward_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reward_token(
      const std::string& value);
  std::string* _internal_mutable_reward_token();

  public:
  // string orchestrator = 7 [json_name = "orchestrator"];
  void clear_orchestrator() ;
  const std::string& orchestrator() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_orchestrator(Arg_&& arg, Args_... args);
  std::string* mutable_orchestrator();
  PROTOBUF_NODISCARD std::string* release_orchestrator();
  void set_allocated_orchestrator(std::string* ptr);

  private:
  const std::string& _internal_orchestrator() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_orchestrator(
      const std::string& value);
  std::string* _internal_mutable_orchestrator();

  public:
  // uint64 event_nonce = 1 [json_name = "eventNonce"];
  void clear_event_nonce() ;
  ::uint64_t event_nonce() const;
  void set_event_nonce(::uint64_t value);

  private:
  ::uint64_t _internal_event_nonce() const;
  void _internal_set_event_nonce(::uint64_t value);

  public:
  // uint64 valset_nonce = 2 [json_name = "valsetNonce"];
  void clear_valset_nonce() ;
  ::uint64_t valset_nonce() const;
  void set_valset_nonce(::uint64_t value);

  private:
  ::uint64_t _internal_valset_nonce() const;
  void _internal_set_valset_nonce(::uint64_t value);

  public:
  // uint64 block_height = 3 [json_name = "blockHeight"];
  void clear_block_height() ;
  ::uint64_t block_height() const;
  void set_block_height(::uint64_t value);

  private:
  ::uint64_t _internal_block_height() const;
  void _internal_set_block_height(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:injective.peggy.v1.MsgValsetUpdatedClaim)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::peggy::v1::BridgeValidator > members_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reward_amount_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reward_token_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr orchestrator_;
    ::uint64_t event_nonce_;
    ::uint64_t valset_nonce_;
    ::uint64_t block_height_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2fpeggy_2fv1_2fmsgs_2eproto;
};// -------------------------------------------------------------------

class MsgValsetUpdatedClaimResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:injective.peggy.v1.MsgValsetUpdatedClaimResponse) */ {
 public:
  inline MsgValsetUpdatedClaimResponse() : MsgValsetUpdatedClaimResponse(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MsgValsetUpdatedClaimResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgValsetUpdatedClaimResponse(const MsgValsetUpdatedClaimResponse& from);
  MsgValsetUpdatedClaimResponse(MsgValsetUpdatedClaimResponse&& from) noexcept
    : MsgValsetUpdatedClaimResponse() {
    *this = ::std::move(from);
  }

  inline MsgValsetUpdatedClaimResponse& operator=(const MsgValsetUpdatedClaimResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgValsetUpdatedClaimResponse& operator=(MsgValsetUpdatedClaimResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgValsetUpdatedClaimResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgValsetUpdatedClaimResponse* internal_default_instance() {
    return reinterpret_cast<const MsgValsetUpdatedClaimResponse*>(
               &_MsgValsetUpdatedClaimResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(MsgValsetUpdatedClaimResponse& a, MsgValsetUpdatedClaimResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgValsetUpdatedClaimResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgValsetUpdatedClaimResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgValsetUpdatedClaimResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgValsetUpdatedClaimResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const MsgValsetUpdatedClaimResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const MsgValsetUpdatedClaimResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.peggy.v1.MsgValsetUpdatedClaimResponse";
  }
  protected:
  explicit MsgValsetUpdatedClaimResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:injective.peggy.v1.MsgValsetUpdatedClaimResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_injective_2fpeggy_2fv1_2fmsgs_2eproto;
};// -------------------------------------------------------------------

class MsgUpdateParams final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.peggy.v1.MsgUpdateParams) */ {
 public:
  inline MsgUpdateParams() : MsgUpdateParams(nullptr) {}
  ~MsgUpdateParams() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MsgUpdateParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgUpdateParams(const MsgUpdateParams& from);
  MsgUpdateParams(MsgUpdateParams&& from) noexcept
    : MsgUpdateParams() {
    *this = ::std::move(from);
  }

  inline MsgUpdateParams& operator=(const MsgUpdateParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgUpdateParams& operator=(MsgUpdateParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgUpdateParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgUpdateParams* internal_default_instance() {
    return reinterpret_cast<const MsgUpdateParams*>(
               &_MsgUpdateParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(MsgUpdateParams& a, MsgUpdateParams& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgUpdateParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgUpdateParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgUpdateParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgUpdateParams>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MsgUpdateParams& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MsgUpdateParams& from) {
    MsgUpdateParams::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgUpdateParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.peggy.v1.MsgUpdateParams";
  }
  protected:
  explicit MsgUpdateParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAuthorityFieldNumber = 1,
    kParamsFieldNumber = 2,
  };
  // string authority = 1 [json_name = "authority", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  void clear_authority() ;
  const std::string& authority() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_authority(Arg_&& arg, Args_... args);
  std::string* mutable_authority();
  PROTOBUF_NODISCARD std::string* release_authority();
  void set_allocated_authority(std::string* ptr);

  private:
  const std::string& _internal_authority() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_authority(
      const std::string& value);
  std::string* _internal_mutable_authority();

  public:
  // .injective.peggy.v1.Params params = 2 [json_name = "params", (.gogoproto.nullable) = false];
  bool has_params() const;
  void clear_params() ;
  const ::injective::peggy::v1::Params& params() const;
  PROTOBUF_NODISCARD ::injective::peggy::v1::Params* release_params();
  ::injective::peggy::v1::Params* mutable_params();
  void set_allocated_params(::injective::peggy::v1::Params* params);
  private:
  const ::injective::peggy::v1::Params& _internal_params() const;
  ::injective::peggy::v1::Params* _internal_mutable_params();
  public:
  void unsafe_arena_set_allocated_params(
      ::injective::peggy::v1::Params* params);
  ::injective::peggy::v1::Params* unsafe_arena_release_params();
  // @@protoc_insertion_point(class_scope:injective.peggy.v1.MsgUpdateParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr authority_;
    ::injective::peggy::v1::Params* params_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2fpeggy_2fv1_2fmsgs_2eproto;
};// -------------------------------------------------------------------

class MsgUpdateParamsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:injective.peggy.v1.MsgUpdateParamsResponse) */ {
 public:
  inline MsgUpdateParamsResponse() : MsgUpdateParamsResponse(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MsgUpdateParamsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgUpdateParamsResponse(const MsgUpdateParamsResponse& from);
  MsgUpdateParamsResponse(MsgUpdateParamsResponse&& from) noexcept
    : MsgUpdateParamsResponse() {
    *this = ::std::move(from);
  }

  inline MsgUpdateParamsResponse& operator=(const MsgUpdateParamsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgUpdateParamsResponse& operator=(MsgUpdateParamsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgUpdateParamsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgUpdateParamsResponse* internal_default_instance() {
    return reinterpret_cast<const MsgUpdateParamsResponse*>(
               &_MsgUpdateParamsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(MsgUpdateParamsResponse& a, MsgUpdateParamsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgUpdateParamsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgUpdateParamsResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgUpdateParamsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgUpdateParamsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const MsgUpdateParamsResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const MsgUpdateParamsResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.peggy.v1.MsgUpdateParamsResponse";
  }
  protected:
  explicit MsgUpdateParamsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:injective.peggy.v1.MsgUpdateParamsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_injective_2fpeggy_2fv1_2fmsgs_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// MsgSetOrchestratorAddresses

// string sender = 1 [json_name = "sender"];
inline void MsgSetOrchestratorAddresses::clear_sender() {
  _impl_.sender_.ClearToEmpty();
}
inline const std::string& MsgSetOrchestratorAddresses::sender() const {
  // @@protoc_insertion_point(field_get:injective.peggy.v1.MsgSetOrchestratorAddresses.sender)
  return _internal_sender();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgSetOrchestratorAddresses::set_sender(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.sender_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.peggy.v1.MsgSetOrchestratorAddresses.sender)
}
inline std::string* MsgSetOrchestratorAddresses::mutable_sender() {
  std::string* _s = _internal_mutable_sender();
  // @@protoc_insertion_point(field_mutable:injective.peggy.v1.MsgSetOrchestratorAddresses.sender)
  return _s;
}
inline const std::string& MsgSetOrchestratorAddresses::_internal_sender() const {
  return _impl_.sender_.Get();
}
inline void MsgSetOrchestratorAddresses::_internal_set_sender(const std::string& value) {
  ;


  _impl_.sender_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgSetOrchestratorAddresses::_internal_mutable_sender() {
  ;
  return _impl_.sender_.Mutable( GetArenaForAllocation());
}
inline std::string* MsgSetOrchestratorAddresses::release_sender() {
  // @@protoc_insertion_point(field_release:injective.peggy.v1.MsgSetOrchestratorAddresses.sender)
  return _impl_.sender_.Release();
}
inline void MsgSetOrchestratorAddresses::set_allocated_sender(std::string* value) {
  _impl_.sender_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.sender_.IsDefault()) {
          _impl_.sender_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.peggy.v1.MsgSetOrchestratorAddresses.sender)
}

// string orchestrator = 2 [json_name = "orchestrator"];
inline void MsgSetOrchestratorAddresses::clear_orchestrator() {
  _impl_.orchestrator_.ClearToEmpty();
}
inline const std::string& MsgSetOrchestratorAddresses::orchestrator() const {
  // @@protoc_insertion_point(field_get:injective.peggy.v1.MsgSetOrchestratorAddresses.orchestrator)
  return _internal_orchestrator();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgSetOrchestratorAddresses::set_orchestrator(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.orchestrator_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.peggy.v1.MsgSetOrchestratorAddresses.orchestrator)
}
inline std::string* MsgSetOrchestratorAddresses::mutable_orchestrator() {
  std::string* _s = _internal_mutable_orchestrator();
  // @@protoc_insertion_point(field_mutable:injective.peggy.v1.MsgSetOrchestratorAddresses.orchestrator)
  return _s;
}
inline const std::string& MsgSetOrchestratorAddresses::_internal_orchestrator() const {
  return _impl_.orchestrator_.Get();
}
inline void MsgSetOrchestratorAddresses::_internal_set_orchestrator(const std::string& value) {
  ;


  _impl_.orchestrator_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgSetOrchestratorAddresses::_internal_mutable_orchestrator() {
  ;
  return _impl_.orchestrator_.Mutable( GetArenaForAllocation());
}
inline std::string* MsgSetOrchestratorAddresses::release_orchestrator() {
  // @@protoc_insertion_point(field_release:injective.peggy.v1.MsgSetOrchestratorAddresses.orchestrator)
  return _impl_.orchestrator_.Release();
}
inline void MsgSetOrchestratorAddresses::set_allocated_orchestrator(std::string* value) {
  _impl_.orchestrator_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.orchestrator_.IsDefault()) {
          _impl_.orchestrator_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.peggy.v1.MsgSetOrchestratorAddresses.orchestrator)
}

// string eth_address = 3 [json_name = "ethAddress"];
inline void MsgSetOrchestratorAddresses::clear_eth_address() {
  _impl_.eth_address_.ClearToEmpty();
}
inline const std::string& MsgSetOrchestratorAddresses::eth_address() const {
  // @@protoc_insertion_point(field_get:injective.peggy.v1.MsgSetOrchestratorAddresses.eth_address)
  return _internal_eth_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgSetOrchestratorAddresses::set_eth_address(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.eth_address_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.peggy.v1.MsgSetOrchestratorAddresses.eth_address)
}
inline std::string* MsgSetOrchestratorAddresses::mutable_eth_address() {
  std::string* _s = _internal_mutable_eth_address();
  // @@protoc_insertion_point(field_mutable:injective.peggy.v1.MsgSetOrchestratorAddresses.eth_address)
  return _s;
}
inline const std::string& MsgSetOrchestratorAddresses::_internal_eth_address() const {
  return _impl_.eth_address_.Get();
}
inline void MsgSetOrchestratorAddresses::_internal_set_eth_address(const std::string& value) {
  ;


  _impl_.eth_address_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgSetOrchestratorAddresses::_internal_mutable_eth_address() {
  ;
  return _impl_.eth_address_.Mutable( GetArenaForAllocation());
}
inline std::string* MsgSetOrchestratorAddresses::release_eth_address() {
  // @@protoc_insertion_point(field_release:injective.peggy.v1.MsgSetOrchestratorAddresses.eth_address)
  return _impl_.eth_address_.Release();
}
inline void MsgSetOrchestratorAddresses::set_allocated_eth_address(std::string* value) {
  _impl_.eth_address_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.eth_address_.IsDefault()) {
          _impl_.eth_address_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.peggy.v1.MsgSetOrchestratorAddresses.eth_address)
}

// -------------------------------------------------------------------

// MsgSetOrchestratorAddressesResponse

// -------------------------------------------------------------------

// MsgValsetConfirm

// uint64 nonce = 1 [json_name = "nonce"];
inline void MsgValsetConfirm::clear_nonce() {
  _impl_.nonce_ = ::uint64_t{0u};
}
inline ::uint64_t MsgValsetConfirm::nonce() const {
  // @@protoc_insertion_point(field_get:injective.peggy.v1.MsgValsetConfirm.nonce)
  return _internal_nonce();
}
inline void MsgValsetConfirm::set_nonce(::uint64_t value) {
  _internal_set_nonce(value);
  // @@protoc_insertion_point(field_set:injective.peggy.v1.MsgValsetConfirm.nonce)
}
inline ::uint64_t MsgValsetConfirm::_internal_nonce() const {
  return _impl_.nonce_;
}
inline void MsgValsetConfirm::_internal_set_nonce(::uint64_t value) {
  ;
  _impl_.nonce_ = value;
}

// string orchestrator = 2 [json_name = "orchestrator"];
inline void MsgValsetConfirm::clear_orchestrator() {
  _impl_.orchestrator_.ClearToEmpty();
}
inline const std::string& MsgValsetConfirm::orchestrator() const {
  // @@protoc_insertion_point(field_get:injective.peggy.v1.MsgValsetConfirm.orchestrator)
  return _internal_orchestrator();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgValsetConfirm::set_orchestrator(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.orchestrator_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.peggy.v1.MsgValsetConfirm.orchestrator)
}
inline std::string* MsgValsetConfirm::mutable_orchestrator() {
  std::string* _s = _internal_mutable_orchestrator();
  // @@protoc_insertion_point(field_mutable:injective.peggy.v1.MsgValsetConfirm.orchestrator)
  return _s;
}
inline const std::string& MsgValsetConfirm::_internal_orchestrator() const {
  return _impl_.orchestrator_.Get();
}
inline void MsgValsetConfirm::_internal_set_orchestrator(const std::string& value) {
  ;


  _impl_.orchestrator_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgValsetConfirm::_internal_mutable_orchestrator() {
  ;
  return _impl_.orchestrator_.Mutable( GetArenaForAllocation());
}
inline std::string* MsgValsetConfirm::release_orchestrator() {
  // @@protoc_insertion_point(field_release:injective.peggy.v1.MsgValsetConfirm.orchestrator)
  return _impl_.orchestrator_.Release();
}
inline void MsgValsetConfirm::set_allocated_orchestrator(std::string* value) {
  _impl_.orchestrator_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.orchestrator_.IsDefault()) {
          _impl_.orchestrator_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.peggy.v1.MsgValsetConfirm.orchestrator)
}

// string eth_address = 3 [json_name = "ethAddress"];
inline void MsgValsetConfirm::clear_eth_address() {
  _impl_.eth_address_.ClearToEmpty();
}
inline const std::string& MsgValsetConfirm::eth_address() const {
  // @@protoc_insertion_point(field_get:injective.peggy.v1.MsgValsetConfirm.eth_address)
  return _internal_eth_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgValsetConfirm::set_eth_address(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.eth_address_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.peggy.v1.MsgValsetConfirm.eth_address)
}
inline std::string* MsgValsetConfirm::mutable_eth_address() {
  std::string* _s = _internal_mutable_eth_address();
  // @@protoc_insertion_point(field_mutable:injective.peggy.v1.MsgValsetConfirm.eth_address)
  return _s;
}
inline const std::string& MsgValsetConfirm::_internal_eth_address() const {
  return _impl_.eth_address_.Get();
}
inline void MsgValsetConfirm::_internal_set_eth_address(const std::string& value) {
  ;


  _impl_.eth_address_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgValsetConfirm::_internal_mutable_eth_address() {
  ;
  return _impl_.eth_address_.Mutable( GetArenaForAllocation());
}
inline std::string* MsgValsetConfirm::release_eth_address() {
  // @@protoc_insertion_point(field_release:injective.peggy.v1.MsgValsetConfirm.eth_address)
  return _impl_.eth_address_.Release();
}
inline void MsgValsetConfirm::set_allocated_eth_address(std::string* value) {
  _impl_.eth_address_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.eth_address_.IsDefault()) {
          _impl_.eth_address_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.peggy.v1.MsgValsetConfirm.eth_address)
}

// string signature = 4 [json_name = "signature"];
inline void MsgValsetConfirm::clear_signature() {
  _impl_.signature_.ClearToEmpty();
}
inline const std::string& MsgValsetConfirm::signature() const {
  // @@protoc_insertion_point(field_get:injective.peggy.v1.MsgValsetConfirm.signature)
  return _internal_signature();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgValsetConfirm::set_signature(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.signature_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.peggy.v1.MsgValsetConfirm.signature)
}
inline std::string* MsgValsetConfirm::mutable_signature() {
  std::string* _s = _internal_mutable_signature();
  // @@protoc_insertion_point(field_mutable:injective.peggy.v1.MsgValsetConfirm.signature)
  return _s;
}
inline const std::string& MsgValsetConfirm::_internal_signature() const {
  return _impl_.signature_.Get();
}
inline void MsgValsetConfirm::_internal_set_signature(const std::string& value) {
  ;


  _impl_.signature_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgValsetConfirm::_internal_mutable_signature() {
  ;
  return _impl_.signature_.Mutable( GetArenaForAllocation());
}
inline std::string* MsgValsetConfirm::release_signature() {
  // @@protoc_insertion_point(field_release:injective.peggy.v1.MsgValsetConfirm.signature)
  return _impl_.signature_.Release();
}
inline void MsgValsetConfirm::set_allocated_signature(std::string* value) {
  _impl_.signature_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.signature_.IsDefault()) {
          _impl_.signature_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.peggy.v1.MsgValsetConfirm.signature)
}

// -------------------------------------------------------------------

// MsgValsetConfirmResponse

// -------------------------------------------------------------------

// MsgSendToEth

// string sender = 1 [json_name = "sender"];
inline void MsgSendToEth::clear_sender() {
  _impl_.sender_.ClearToEmpty();
}
inline const std::string& MsgSendToEth::sender() const {
  // @@protoc_insertion_point(field_get:injective.peggy.v1.MsgSendToEth.sender)
  return _internal_sender();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgSendToEth::set_sender(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.sender_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.peggy.v1.MsgSendToEth.sender)
}
inline std::string* MsgSendToEth::mutable_sender() {
  std::string* _s = _internal_mutable_sender();
  // @@protoc_insertion_point(field_mutable:injective.peggy.v1.MsgSendToEth.sender)
  return _s;
}
inline const std::string& MsgSendToEth::_internal_sender() const {
  return _impl_.sender_.Get();
}
inline void MsgSendToEth::_internal_set_sender(const std::string& value) {
  ;


  _impl_.sender_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgSendToEth::_internal_mutable_sender() {
  ;
  return _impl_.sender_.Mutable( GetArenaForAllocation());
}
inline std::string* MsgSendToEth::release_sender() {
  // @@protoc_insertion_point(field_release:injective.peggy.v1.MsgSendToEth.sender)
  return _impl_.sender_.Release();
}
inline void MsgSendToEth::set_allocated_sender(std::string* value) {
  _impl_.sender_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.sender_.IsDefault()) {
          _impl_.sender_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.peggy.v1.MsgSendToEth.sender)
}

// string eth_dest = 2 [json_name = "ethDest"];
inline void MsgSendToEth::clear_eth_dest() {
  _impl_.eth_dest_.ClearToEmpty();
}
inline const std::string& MsgSendToEth::eth_dest() const {
  // @@protoc_insertion_point(field_get:injective.peggy.v1.MsgSendToEth.eth_dest)
  return _internal_eth_dest();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgSendToEth::set_eth_dest(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.eth_dest_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.peggy.v1.MsgSendToEth.eth_dest)
}
inline std::string* MsgSendToEth::mutable_eth_dest() {
  std::string* _s = _internal_mutable_eth_dest();
  // @@protoc_insertion_point(field_mutable:injective.peggy.v1.MsgSendToEth.eth_dest)
  return _s;
}
inline const std::string& MsgSendToEth::_internal_eth_dest() const {
  return _impl_.eth_dest_.Get();
}
inline void MsgSendToEth::_internal_set_eth_dest(const std::string& value) {
  ;


  _impl_.eth_dest_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgSendToEth::_internal_mutable_eth_dest() {
  ;
  return _impl_.eth_dest_.Mutable( GetArenaForAllocation());
}
inline std::string* MsgSendToEth::release_eth_dest() {
  // @@protoc_insertion_point(field_release:injective.peggy.v1.MsgSendToEth.eth_dest)
  return _impl_.eth_dest_.Release();
}
inline void MsgSendToEth::set_allocated_eth_dest(std::string* value) {
  _impl_.eth_dest_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.eth_dest_.IsDefault()) {
          _impl_.eth_dest_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.peggy.v1.MsgSendToEth.eth_dest)
}

// .cosmos.base.v1beta1.Coin amount = 3 [json_name = "amount", (.gogoproto.nullable) = false];
inline bool MsgSendToEth::has_amount() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.amount_ != nullptr);
  return value;
}
inline const ::cosmos::base::v1beta1::Coin& MsgSendToEth::_internal_amount() const {
  const ::cosmos::base::v1beta1::Coin* p = _impl_.amount_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::v1beta1::Coin&>(
      ::cosmos::base::v1beta1::_Coin_default_instance_);
}
inline const ::cosmos::base::v1beta1::Coin& MsgSendToEth::amount() const {
  // @@protoc_insertion_point(field_get:injective.peggy.v1.MsgSendToEth.amount)
  return _internal_amount();
}
inline void MsgSendToEth::unsafe_arena_set_allocated_amount(
    ::cosmos::base::v1beta1::Coin* amount) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.amount_);
  }
  _impl_.amount_ = amount;
  if (amount) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:injective.peggy.v1.MsgSendToEth.amount)
}
inline ::cosmos::base::v1beta1::Coin* MsgSendToEth::release_amount() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::v1beta1::Coin* temp = _impl_.amount_;
  _impl_.amount_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::base::v1beta1::Coin* MsgSendToEth::unsafe_arena_release_amount() {
  // @@protoc_insertion_point(field_release:injective.peggy.v1.MsgSendToEth.amount)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::v1beta1::Coin* temp = _impl_.amount_;
  _impl_.amount_ = nullptr;
  return temp;
}
inline ::cosmos::base::v1beta1::Coin* MsgSendToEth::_internal_mutable_amount() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.amount_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::base::v1beta1::Coin>(GetArenaForAllocation());
    _impl_.amount_ = p;
  }
  return _impl_.amount_;
}
inline ::cosmos::base::v1beta1::Coin* MsgSendToEth::mutable_amount() {
  ::cosmos::base::v1beta1::Coin* _msg = _internal_mutable_amount();
  // @@protoc_insertion_point(field_mutable:injective.peggy.v1.MsgSendToEth.amount)
  return _msg;
}
inline void MsgSendToEth::set_allocated_amount(::cosmos::base::v1beta1::Coin* amount) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.amount_);
  }
  if (amount) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(amount));
    if (message_arena != submessage_arena) {
      amount = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, amount, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.amount_ = amount;
  // @@protoc_insertion_point(field_set_allocated:injective.peggy.v1.MsgSendToEth.amount)
}

// .cosmos.base.v1beta1.Coin bridge_fee = 4 [json_name = "bridgeFee", (.gogoproto.nullable) = false];
inline bool MsgSendToEth::has_bridge_fee() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.bridge_fee_ != nullptr);
  return value;
}
inline const ::cosmos::base::v1beta1::Coin& MsgSendToEth::_internal_bridge_fee() const {
  const ::cosmos::base::v1beta1::Coin* p = _impl_.bridge_fee_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::v1beta1::Coin&>(
      ::cosmos::base::v1beta1::_Coin_default_instance_);
}
inline const ::cosmos::base::v1beta1::Coin& MsgSendToEth::bridge_fee() const {
  // @@protoc_insertion_point(field_get:injective.peggy.v1.MsgSendToEth.bridge_fee)
  return _internal_bridge_fee();
}
inline void MsgSendToEth::unsafe_arena_set_allocated_bridge_fee(
    ::cosmos::base::v1beta1::Coin* bridge_fee) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bridge_fee_);
  }
  _impl_.bridge_fee_ = bridge_fee;
  if (bridge_fee) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:injective.peggy.v1.MsgSendToEth.bridge_fee)
}
inline ::cosmos::base::v1beta1::Coin* MsgSendToEth::release_bridge_fee() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::cosmos::base::v1beta1::Coin* temp = _impl_.bridge_fee_;
  _impl_.bridge_fee_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::base::v1beta1::Coin* MsgSendToEth::unsafe_arena_release_bridge_fee() {
  // @@protoc_insertion_point(field_release:injective.peggy.v1.MsgSendToEth.bridge_fee)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::cosmos::base::v1beta1::Coin* temp = _impl_.bridge_fee_;
  _impl_.bridge_fee_ = nullptr;
  return temp;
}
inline ::cosmos::base::v1beta1::Coin* MsgSendToEth::_internal_mutable_bridge_fee() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.bridge_fee_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::base::v1beta1::Coin>(GetArenaForAllocation());
    _impl_.bridge_fee_ = p;
  }
  return _impl_.bridge_fee_;
}
inline ::cosmos::base::v1beta1::Coin* MsgSendToEth::mutable_bridge_fee() {
  ::cosmos::base::v1beta1::Coin* _msg = _internal_mutable_bridge_fee();
  // @@protoc_insertion_point(field_mutable:injective.peggy.v1.MsgSendToEth.bridge_fee)
  return _msg;
}
inline void MsgSendToEth::set_allocated_bridge_fee(::cosmos::base::v1beta1::Coin* bridge_fee) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bridge_fee_);
  }
  if (bridge_fee) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bridge_fee));
    if (message_arena != submessage_arena) {
      bridge_fee = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bridge_fee, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.bridge_fee_ = bridge_fee;
  // @@protoc_insertion_point(field_set_allocated:injective.peggy.v1.MsgSendToEth.bridge_fee)
}

// -------------------------------------------------------------------

// MsgSendToEthResponse

// -------------------------------------------------------------------

// MsgRequestBatch

// string orchestrator = 1 [json_name = "orchestrator"];
inline void MsgRequestBatch::clear_orchestrator() {
  _impl_.orchestrator_.ClearToEmpty();
}
inline const std::string& MsgRequestBatch::orchestrator() const {
  // @@protoc_insertion_point(field_get:injective.peggy.v1.MsgRequestBatch.orchestrator)
  return _internal_orchestrator();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgRequestBatch::set_orchestrator(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.orchestrator_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.peggy.v1.MsgRequestBatch.orchestrator)
}
inline std::string* MsgRequestBatch::mutable_orchestrator() {
  std::string* _s = _internal_mutable_orchestrator();
  // @@protoc_insertion_point(field_mutable:injective.peggy.v1.MsgRequestBatch.orchestrator)
  return _s;
}
inline const std::string& MsgRequestBatch::_internal_orchestrator() const {
  return _impl_.orchestrator_.Get();
}
inline void MsgRequestBatch::_internal_set_orchestrator(const std::string& value) {
  ;


  _impl_.orchestrator_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgRequestBatch::_internal_mutable_orchestrator() {
  ;
  return _impl_.orchestrator_.Mutable( GetArenaForAllocation());
}
inline std::string* MsgRequestBatch::release_orchestrator() {
  // @@protoc_insertion_point(field_release:injective.peggy.v1.MsgRequestBatch.orchestrator)
  return _impl_.orchestrator_.Release();
}
inline void MsgRequestBatch::set_allocated_orchestrator(std::string* value) {
  _impl_.orchestrator_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.orchestrator_.IsDefault()) {
          _impl_.orchestrator_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.peggy.v1.MsgRequestBatch.orchestrator)
}

// string denom = 2 [json_name = "denom"];
inline void MsgRequestBatch::clear_denom() {
  _impl_.denom_.ClearToEmpty();
}
inline const std::string& MsgRequestBatch::denom() const {
  // @@protoc_insertion_point(field_get:injective.peggy.v1.MsgRequestBatch.denom)
  return _internal_denom();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgRequestBatch::set_denom(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.denom_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.peggy.v1.MsgRequestBatch.denom)
}
inline std::string* MsgRequestBatch::mutable_denom() {
  std::string* _s = _internal_mutable_denom();
  // @@protoc_insertion_point(field_mutable:injective.peggy.v1.MsgRequestBatch.denom)
  return _s;
}
inline const std::string& MsgRequestBatch::_internal_denom() const {
  return _impl_.denom_.Get();
}
inline void MsgRequestBatch::_internal_set_denom(const std::string& value) {
  ;


  _impl_.denom_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgRequestBatch::_internal_mutable_denom() {
  ;
  return _impl_.denom_.Mutable( GetArenaForAllocation());
}
inline std::string* MsgRequestBatch::release_denom() {
  // @@protoc_insertion_point(field_release:injective.peggy.v1.MsgRequestBatch.denom)
  return _impl_.denom_.Release();
}
inline void MsgRequestBatch::set_allocated_denom(std::string* value) {
  _impl_.denom_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.denom_.IsDefault()) {
          _impl_.denom_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.peggy.v1.MsgRequestBatch.denom)
}

// -------------------------------------------------------------------

// MsgRequestBatchResponse

// -------------------------------------------------------------------

// MsgConfirmBatch

// uint64 nonce = 1 [json_name = "nonce"];
inline void MsgConfirmBatch::clear_nonce() {
  _impl_.nonce_ = ::uint64_t{0u};
}
inline ::uint64_t MsgConfirmBatch::nonce() const {
  // @@protoc_insertion_point(field_get:injective.peggy.v1.MsgConfirmBatch.nonce)
  return _internal_nonce();
}
inline void MsgConfirmBatch::set_nonce(::uint64_t value) {
  _internal_set_nonce(value);
  // @@protoc_insertion_point(field_set:injective.peggy.v1.MsgConfirmBatch.nonce)
}
inline ::uint64_t MsgConfirmBatch::_internal_nonce() const {
  return _impl_.nonce_;
}
inline void MsgConfirmBatch::_internal_set_nonce(::uint64_t value) {
  ;
  _impl_.nonce_ = value;
}

// string token_contract = 2 [json_name = "tokenContract"];
inline void MsgConfirmBatch::clear_token_contract() {
  _impl_.token_contract_.ClearToEmpty();
}
inline const std::string& MsgConfirmBatch::token_contract() const {
  // @@protoc_insertion_point(field_get:injective.peggy.v1.MsgConfirmBatch.token_contract)
  return _internal_token_contract();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgConfirmBatch::set_token_contract(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.token_contract_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.peggy.v1.MsgConfirmBatch.token_contract)
}
inline std::string* MsgConfirmBatch::mutable_token_contract() {
  std::string* _s = _internal_mutable_token_contract();
  // @@protoc_insertion_point(field_mutable:injective.peggy.v1.MsgConfirmBatch.token_contract)
  return _s;
}
inline const std::string& MsgConfirmBatch::_internal_token_contract() const {
  return _impl_.token_contract_.Get();
}
inline void MsgConfirmBatch::_internal_set_token_contract(const std::string& value) {
  ;


  _impl_.token_contract_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgConfirmBatch::_internal_mutable_token_contract() {
  ;
  return _impl_.token_contract_.Mutable( GetArenaForAllocation());
}
inline std::string* MsgConfirmBatch::release_token_contract() {
  // @@protoc_insertion_point(field_release:injective.peggy.v1.MsgConfirmBatch.token_contract)
  return _impl_.token_contract_.Release();
}
inline void MsgConfirmBatch::set_allocated_token_contract(std::string* value) {
  _impl_.token_contract_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.token_contract_.IsDefault()) {
          _impl_.token_contract_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.peggy.v1.MsgConfirmBatch.token_contract)
}

// string eth_signer = 3 [json_name = "ethSigner"];
inline void MsgConfirmBatch::clear_eth_signer() {
  _impl_.eth_signer_.ClearToEmpty();
}
inline const std::string& MsgConfirmBatch::eth_signer() const {
  // @@protoc_insertion_point(field_get:injective.peggy.v1.MsgConfirmBatch.eth_signer)
  return _internal_eth_signer();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgConfirmBatch::set_eth_signer(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.eth_signer_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.peggy.v1.MsgConfirmBatch.eth_signer)
}
inline std::string* MsgConfirmBatch::mutable_eth_signer() {
  std::string* _s = _internal_mutable_eth_signer();
  // @@protoc_insertion_point(field_mutable:injective.peggy.v1.MsgConfirmBatch.eth_signer)
  return _s;
}
inline const std::string& MsgConfirmBatch::_internal_eth_signer() const {
  return _impl_.eth_signer_.Get();
}
inline void MsgConfirmBatch::_internal_set_eth_signer(const std::string& value) {
  ;


  _impl_.eth_signer_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgConfirmBatch::_internal_mutable_eth_signer() {
  ;
  return _impl_.eth_signer_.Mutable( GetArenaForAllocation());
}
inline std::string* MsgConfirmBatch::release_eth_signer() {
  // @@protoc_insertion_point(field_release:injective.peggy.v1.MsgConfirmBatch.eth_signer)
  return _impl_.eth_signer_.Release();
}
inline void MsgConfirmBatch::set_allocated_eth_signer(std::string* value) {
  _impl_.eth_signer_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.eth_signer_.IsDefault()) {
          _impl_.eth_signer_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.peggy.v1.MsgConfirmBatch.eth_signer)
}

// string orchestrator = 4 [json_name = "orchestrator"];
inline void MsgConfirmBatch::clear_orchestrator() {
  _impl_.orchestrator_.ClearToEmpty();
}
inline const std::string& MsgConfirmBatch::orchestrator() const {
  // @@protoc_insertion_point(field_get:injective.peggy.v1.MsgConfirmBatch.orchestrator)
  return _internal_orchestrator();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgConfirmBatch::set_orchestrator(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.orchestrator_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.peggy.v1.MsgConfirmBatch.orchestrator)
}
inline std::string* MsgConfirmBatch::mutable_orchestrator() {
  std::string* _s = _internal_mutable_orchestrator();
  // @@protoc_insertion_point(field_mutable:injective.peggy.v1.MsgConfirmBatch.orchestrator)
  return _s;
}
inline const std::string& MsgConfirmBatch::_internal_orchestrator() const {
  return _impl_.orchestrator_.Get();
}
inline void MsgConfirmBatch::_internal_set_orchestrator(const std::string& value) {
  ;


  _impl_.orchestrator_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgConfirmBatch::_internal_mutable_orchestrator() {
  ;
  return _impl_.orchestrator_.Mutable( GetArenaForAllocation());
}
inline std::string* MsgConfirmBatch::release_orchestrator() {
  // @@protoc_insertion_point(field_release:injective.peggy.v1.MsgConfirmBatch.orchestrator)
  return _impl_.orchestrator_.Release();
}
inline void MsgConfirmBatch::set_allocated_orchestrator(std::string* value) {
  _impl_.orchestrator_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.orchestrator_.IsDefault()) {
          _impl_.orchestrator_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.peggy.v1.MsgConfirmBatch.orchestrator)
}

// string signature = 5 [json_name = "signature"];
inline void MsgConfirmBatch::clear_signature() {
  _impl_.signature_.ClearToEmpty();
}
inline const std::string& MsgConfirmBatch::signature() const {
  // @@protoc_insertion_point(field_get:injective.peggy.v1.MsgConfirmBatch.signature)
  return _internal_signature();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgConfirmBatch::set_signature(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.signature_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.peggy.v1.MsgConfirmBatch.signature)
}
inline std::string* MsgConfirmBatch::mutable_signature() {
  std::string* _s = _internal_mutable_signature();
  // @@protoc_insertion_point(field_mutable:injective.peggy.v1.MsgConfirmBatch.signature)
  return _s;
}
inline const std::string& MsgConfirmBatch::_internal_signature() const {
  return _impl_.signature_.Get();
}
inline void MsgConfirmBatch::_internal_set_signature(const std::string& value) {
  ;


  _impl_.signature_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgConfirmBatch::_internal_mutable_signature() {
  ;
  return _impl_.signature_.Mutable( GetArenaForAllocation());
}
inline std::string* MsgConfirmBatch::release_signature() {
  // @@protoc_insertion_point(field_release:injective.peggy.v1.MsgConfirmBatch.signature)
  return _impl_.signature_.Release();
}
inline void MsgConfirmBatch::set_allocated_signature(std::string* value) {
  _impl_.signature_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.signature_.IsDefault()) {
          _impl_.signature_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.peggy.v1.MsgConfirmBatch.signature)
}

// -------------------------------------------------------------------

// MsgConfirmBatchResponse

// -------------------------------------------------------------------

// MsgDepositClaim

// uint64 event_nonce = 1 [json_name = "eventNonce"];
inline void MsgDepositClaim::clear_event_nonce() {
  _impl_.event_nonce_ = ::uint64_t{0u};
}
inline ::uint64_t MsgDepositClaim::event_nonce() const {
  // @@protoc_insertion_point(field_get:injective.peggy.v1.MsgDepositClaim.event_nonce)
  return _internal_event_nonce();
}
inline void MsgDepositClaim::set_event_nonce(::uint64_t value) {
  _internal_set_event_nonce(value);
  // @@protoc_insertion_point(field_set:injective.peggy.v1.MsgDepositClaim.event_nonce)
}
inline ::uint64_t MsgDepositClaim::_internal_event_nonce() const {
  return _impl_.event_nonce_;
}
inline void MsgDepositClaim::_internal_set_event_nonce(::uint64_t value) {
  ;
  _impl_.event_nonce_ = value;
}

// uint64 block_height = 2 [json_name = "blockHeight"];
inline void MsgDepositClaim::clear_block_height() {
  _impl_.block_height_ = ::uint64_t{0u};
}
inline ::uint64_t MsgDepositClaim::block_height() const {
  // @@protoc_insertion_point(field_get:injective.peggy.v1.MsgDepositClaim.block_height)
  return _internal_block_height();
}
inline void MsgDepositClaim::set_block_height(::uint64_t value) {
  _internal_set_block_height(value);
  // @@protoc_insertion_point(field_set:injective.peggy.v1.MsgDepositClaim.block_height)
}
inline ::uint64_t MsgDepositClaim::_internal_block_height() const {
  return _impl_.block_height_;
}
inline void MsgDepositClaim::_internal_set_block_height(::uint64_t value) {
  ;
  _impl_.block_height_ = value;
}

// string token_contract = 3 [json_name = "tokenContract"];
inline void MsgDepositClaim::clear_token_contract() {
  _impl_.token_contract_.ClearToEmpty();
}
inline const std::string& MsgDepositClaim::token_contract() const {
  // @@protoc_insertion_point(field_get:injective.peggy.v1.MsgDepositClaim.token_contract)
  return _internal_token_contract();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgDepositClaim::set_token_contract(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.token_contract_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.peggy.v1.MsgDepositClaim.token_contract)
}
inline std::string* MsgDepositClaim::mutable_token_contract() {
  std::string* _s = _internal_mutable_token_contract();
  // @@protoc_insertion_point(field_mutable:injective.peggy.v1.MsgDepositClaim.token_contract)
  return _s;
}
inline const std::string& MsgDepositClaim::_internal_token_contract() const {
  return _impl_.token_contract_.Get();
}
inline void MsgDepositClaim::_internal_set_token_contract(const std::string& value) {
  ;


  _impl_.token_contract_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgDepositClaim::_internal_mutable_token_contract() {
  ;
  return _impl_.token_contract_.Mutable( GetArenaForAllocation());
}
inline std::string* MsgDepositClaim::release_token_contract() {
  // @@protoc_insertion_point(field_release:injective.peggy.v1.MsgDepositClaim.token_contract)
  return _impl_.token_contract_.Release();
}
inline void MsgDepositClaim::set_allocated_token_contract(std::string* value) {
  _impl_.token_contract_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.token_contract_.IsDefault()) {
          _impl_.token_contract_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.peggy.v1.MsgDepositClaim.token_contract)
}

// string amount = 4 [json_name = "amount", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int"];
inline void MsgDepositClaim::clear_amount() {
  _impl_.amount_.ClearToEmpty();
}
inline const std::string& MsgDepositClaim::amount() const {
  // @@protoc_insertion_point(field_get:injective.peggy.v1.MsgDepositClaim.amount)
  return _internal_amount();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgDepositClaim::set_amount(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.amount_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.peggy.v1.MsgDepositClaim.amount)
}
inline std::string* MsgDepositClaim::mutable_amount() {
  std::string* _s = _internal_mutable_amount();
  // @@protoc_insertion_point(field_mutable:injective.peggy.v1.MsgDepositClaim.amount)
  return _s;
}
inline const std::string& MsgDepositClaim::_internal_amount() const {
  return _impl_.amount_.Get();
}
inline void MsgDepositClaim::_internal_set_amount(const std::string& value) {
  ;


  _impl_.amount_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgDepositClaim::_internal_mutable_amount() {
  ;
  return _impl_.amount_.Mutable( GetArenaForAllocation());
}
inline std::string* MsgDepositClaim::release_amount() {
  // @@protoc_insertion_point(field_release:injective.peggy.v1.MsgDepositClaim.amount)
  return _impl_.amount_.Release();
}
inline void MsgDepositClaim::set_allocated_amount(std::string* value) {
  _impl_.amount_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.amount_.IsDefault()) {
          _impl_.amount_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.peggy.v1.MsgDepositClaim.amount)
}

// string ethereum_sender = 5 [json_name = "ethereumSender"];
inline void MsgDepositClaim::clear_ethereum_sender() {
  _impl_.ethereum_sender_.ClearToEmpty();
}
inline const std::string& MsgDepositClaim::ethereum_sender() const {
  // @@protoc_insertion_point(field_get:injective.peggy.v1.MsgDepositClaim.ethereum_sender)
  return _internal_ethereum_sender();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgDepositClaim::set_ethereum_sender(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.ethereum_sender_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.peggy.v1.MsgDepositClaim.ethereum_sender)
}
inline std::string* MsgDepositClaim::mutable_ethereum_sender() {
  std::string* _s = _internal_mutable_ethereum_sender();
  // @@protoc_insertion_point(field_mutable:injective.peggy.v1.MsgDepositClaim.ethereum_sender)
  return _s;
}
inline const std::string& MsgDepositClaim::_internal_ethereum_sender() const {
  return _impl_.ethereum_sender_.Get();
}
inline void MsgDepositClaim::_internal_set_ethereum_sender(const std::string& value) {
  ;


  _impl_.ethereum_sender_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgDepositClaim::_internal_mutable_ethereum_sender() {
  ;
  return _impl_.ethereum_sender_.Mutable( GetArenaForAllocation());
}
inline std::string* MsgDepositClaim::release_ethereum_sender() {
  // @@protoc_insertion_point(field_release:injective.peggy.v1.MsgDepositClaim.ethereum_sender)
  return _impl_.ethereum_sender_.Release();
}
inline void MsgDepositClaim::set_allocated_ethereum_sender(std::string* value) {
  _impl_.ethereum_sender_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.ethereum_sender_.IsDefault()) {
          _impl_.ethereum_sender_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.peggy.v1.MsgDepositClaim.ethereum_sender)
}

// string cosmos_receiver = 6 [json_name = "cosmosReceiver"];
inline void MsgDepositClaim::clear_cosmos_receiver() {
  _impl_.cosmos_receiver_.ClearToEmpty();
}
inline const std::string& MsgDepositClaim::cosmos_receiver() const {
  // @@protoc_insertion_point(field_get:injective.peggy.v1.MsgDepositClaim.cosmos_receiver)
  return _internal_cosmos_receiver();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgDepositClaim::set_cosmos_receiver(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.cosmos_receiver_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.peggy.v1.MsgDepositClaim.cosmos_receiver)
}
inline std::string* MsgDepositClaim::mutable_cosmos_receiver() {
  std::string* _s = _internal_mutable_cosmos_receiver();
  // @@protoc_insertion_point(field_mutable:injective.peggy.v1.MsgDepositClaim.cosmos_receiver)
  return _s;
}
inline const std::string& MsgDepositClaim::_internal_cosmos_receiver() const {
  return _impl_.cosmos_receiver_.Get();
}
inline void MsgDepositClaim::_internal_set_cosmos_receiver(const std::string& value) {
  ;


  _impl_.cosmos_receiver_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgDepositClaim::_internal_mutable_cosmos_receiver() {
  ;
  return _impl_.cosmos_receiver_.Mutable( GetArenaForAllocation());
}
inline std::string* MsgDepositClaim::release_cosmos_receiver() {
  // @@protoc_insertion_point(field_release:injective.peggy.v1.MsgDepositClaim.cosmos_receiver)
  return _impl_.cosmos_receiver_.Release();
}
inline void MsgDepositClaim::set_allocated_cosmos_receiver(std::string* value) {
  _impl_.cosmos_receiver_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.cosmos_receiver_.IsDefault()) {
          _impl_.cosmos_receiver_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.peggy.v1.MsgDepositClaim.cosmos_receiver)
}

// string orchestrator = 7 [json_name = "orchestrator"];
inline void MsgDepositClaim::clear_orchestrator() {
  _impl_.orchestrator_.ClearToEmpty();
}
inline const std::string& MsgDepositClaim::orchestrator() const {
  // @@protoc_insertion_point(field_get:injective.peggy.v1.MsgDepositClaim.orchestrator)
  return _internal_orchestrator();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgDepositClaim::set_orchestrator(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.orchestrator_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.peggy.v1.MsgDepositClaim.orchestrator)
}
inline std::string* MsgDepositClaim::mutable_orchestrator() {
  std::string* _s = _internal_mutable_orchestrator();
  // @@protoc_insertion_point(field_mutable:injective.peggy.v1.MsgDepositClaim.orchestrator)
  return _s;
}
inline const std::string& MsgDepositClaim::_internal_orchestrator() const {
  return _impl_.orchestrator_.Get();
}
inline void MsgDepositClaim::_internal_set_orchestrator(const std::string& value) {
  ;


  _impl_.orchestrator_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgDepositClaim::_internal_mutable_orchestrator() {
  ;
  return _impl_.orchestrator_.Mutable( GetArenaForAllocation());
}
inline std::string* MsgDepositClaim::release_orchestrator() {
  // @@protoc_insertion_point(field_release:injective.peggy.v1.MsgDepositClaim.orchestrator)
  return _impl_.orchestrator_.Release();
}
inline void MsgDepositClaim::set_allocated_orchestrator(std::string* value) {
  _impl_.orchestrator_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.orchestrator_.IsDefault()) {
          _impl_.orchestrator_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.peggy.v1.MsgDepositClaim.orchestrator)
}

// string data = 8 [json_name = "data"];
inline void MsgDepositClaim::clear_data() {
  _impl_.data_.ClearToEmpty();
}
inline const std::string& MsgDepositClaim::data() const {
  // @@protoc_insertion_point(field_get:injective.peggy.v1.MsgDepositClaim.data)
  return _internal_data();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgDepositClaim::set_data(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.data_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.peggy.v1.MsgDepositClaim.data)
}
inline std::string* MsgDepositClaim::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:injective.peggy.v1.MsgDepositClaim.data)
  return _s;
}
inline const std::string& MsgDepositClaim::_internal_data() const {
  return _impl_.data_.Get();
}
inline void MsgDepositClaim::_internal_set_data(const std::string& value) {
  ;


  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgDepositClaim::_internal_mutable_data() {
  ;
  return _impl_.data_.Mutable( GetArenaForAllocation());
}
inline std::string* MsgDepositClaim::release_data() {
  // @@protoc_insertion_point(field_release:injective.peggy.v1.MsgDepositClaim.data)
  return _impl_.data_.Release();
}
inline void MsgDepositClaim::set_allocated_data(std::string* value) {
  _impl_.data_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.data_.IsDefault()) {
          _impl_.data_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.peggy.v1.MsgDepositClaim.data)
}

// -------------------------------------------------------------------

// MsgDepositClaimResponse

// -------------------------------------------------------------------

// MsgWithdrawClaim

// uint64 event_nonce = 1 [json_name = "eventNonce"];
inline void MsgWithdrawClaim::clear_event_nonce() {
  _impl_.event_nonce_ = ::uint64_t{0u};
}
inline ::uint64_t MsgWithdrawClaim::event_nonce() const {
  // @@protoc_insertion_point(field_get:injective.peggy.v1.MsgWithdrawClaim.event_nonce)
  return _internal_event_nonce();
}
inline void MsgWithdrawClaim::set_event_nonce(::uint64_t value) {
  _internal_set_event_nonce(value);
  // @@protoc_insertion_point(field_set:injective.peggy.v1.MsgWithdrawClaim.event_nonce)
}
inline ::uint64_t MsgWithdrawClaim::_internal_event_nonce() const {
  return _impl_.event_nonce_;
}
inline void MsgWithdrawClaim::_internal_set_event_nonce(::uint64_t value) {
  ;
  _impl_.event_nonce_ = value;
}

// uint64 block_height = 2 [json_name = "blockHeight"];
inline void MsgWithdrawClaim::clear_block_height() {
  _impl_.block_height_ = ::uint64_t{0u};
}
inline ::uint64_t MsgWithdrawClaim::block_height() const {
  // @@protoc_insertion_point(field_get:injective.peggy.v1.MsgWithdrawClaim.block_height)
  return _internal_block_height();
}
inline void MsgWithdrawClaim::set_block_height(::uint64_t value) {
  _internal_set_block_height(value);
  // @@protoc_insertion_point(field_set:injective.peggy.v1.MsgWithdrawClaim.block_height)
}
inline ::uint64_t MsgWithdrawClaim::_internal_block_height() const {
  return _impl_.block_height_;
}
inline void MsgWithdrawClaim::_internal_set_block_height(::uint64_t value) {
  ;
  _impl_.block_height_ = value;
}

// uint64 batch_nonce = 3 [json_name = "batchNonce"];
inline void MsgWithdrawClaim::clear_batch_nonce() {
  _impl_.batch_nonce_ = ::uint64_t{0u};
}
inline ::uint64_t MsgWithdrawClaim::batch_nonce() const {
  // @@protoc_insertion_point(field_get:injective.peggy.v1.MsgWithdrawClaim.batch_nonce)
  return _internal_batch_nonce();
}
inline void MsgWithdrawClaim::set_batch_nonce(::uint64_t value) {
  _internal_set_batch_nonce(value);
  // @@protoc_insertion_point(field_set:injective.peggy.v1.MsgWithdrawClaim.batch_nonce)
}
inline ::uint64_t MsgWithdrawClaim::_internal_batch_nonce() const {
  return _impl_.batch_nonce_;
}
inline void MsgWithdrawClaim::_internal_set_batch_nonce(::uint64_t value) {
  ;
  _impl_.batch_nonce_ = value;
}

// string token_contract = 4 [json_name = "tokenContract"];
inline void MsgWithdrawClaim::clear_token_contract() {
  _impl_.token_contract_.ClearToEmpty();
}
inline const std::string& MsgWithdrawClaim::token_contract() const {
  // @@protoc_insertion_point(field_get:injective.peggy.v1.MsgWithdrawClaim.token_contract)
  return _internal_token_contract();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgWithdrawClaim::set_token_contract(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.token_contract_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.peggy.v1.MsgWithdrawClaim.token_contract)
}
inline std::string* MsgWithdrawClaim::mutable_token_contract() {
  std::string* _s = _internal_mutable_token_contract();
  // @@protoc_insertion_point(field_mutable:injective.peggy.v1.MsgWithdrawClaim.token_contract)
  return _s;
}
inline const std::string& MsgWithdrawClaim::_internal_token_contract() const {
  return _impl_.token_contract_.Get();
}
inline void MsgWithdrawClaim::_internal_set_token_contract(const std::string& value) {
  ;


  _impl_.token_contract_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgWithdrawClaim::_internal_mutable_token_contract() {
  ;
  return _impl_.token_contract_.Mutable( GetArenaForAllocation());
}
inline std::string* MsgWithdrawClaim::release_token_contract() {
  // @@protoc_insertion_point(field_release:injective.peggy.v1.MsgWithdrawClaim.token_contract)
  return _impl_.token_contract_.Release();
}
inline void MsgWithdrawClaim::set_allocated_token_contract(std::string* value) {
  _impl_.token_contract_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.token_contract_.IsDefault()) {
          _impl_.token_contract_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.peggy.v1.MsgWithdrawClaim.token_contract)
}

// string orchestrator = 5 [json_name = "orchestrator"];
inline void MsgWithdrawClaim::clear_orchestrator() {
  _impl_.orchestrator_.ClearToEmpty();
}
inline const std::string& MsgWithdrawClaim::orchestrator() const {
  // @@protoc_insertion_point(field_get:injective.peggy.v1.MsgWithdrawClaim.orchestrator)
  return _internal_orchestrator();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgWithdrawClaim::set_orchestrator(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.orchestrator_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.peggy.v1.MsgWithdrawClaim.orchestrator)
}
inline std::string* MsgWithdrawClaim::mutable_orchestrator() {
  std::string* _s = _internal_mutable_orchestrator();
  // @@protoc_insertion_point(field_mutable:injective.peggy.v1.MsgWithdrawClaim.orchestrator)
  return _s;
}
inline const std::string& MsgWithdrawClaim::_internal_orchestrator() const {
  return _impl_.orchestrator_.Get();
}
inline void MsgWithdrawClaim::_internal_set_orchestrator(const std::string& value) {
  ;


  _impl_.orchestrator_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgWithdrawClaim::_internal_mutable_orchestrator() {
  ;
  return _impl_.orchestrator_.Mutable( GetArenaForAllocation());
}
inline std::string* MsgWithdrawClaim::release_orchestrator() {
  // @@protoc_insertion_point(field_release:injective.peggy.v1.MsgWithdrawClaim.orchestrator)
  return _impl_.orchestrator_.Release();
}
inline void MsgWithdrawClaim::set_allocated_orchestrator(std::string* value) {
  _impl_.orchestrator_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.orchestrator_.IsDefault()) {
          _impl_.orchestrator_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.peggy.v1.MsgWithdrawClaim.orchestrator)
}

// -------------------------------------------------------------------

// MsgWithdrawClaimResponse

// -------------------------------------------------------------------

// MsgERC20DeployedClaim

// uint64 event_nonce = 1 [json_name = "eventNonce"];
inline void MsgERC20DeployedClaim::clear_event_nonce() {
  _impl_.event_nonce_ = ::uint64_t{0u};
}
inline ::uint64_t MsgERC20DeployedClaim::event_nonce() const {
  // @@protoc_insertion_point(field_get:injective.peggy.v1.MsgERC20DeployedClaim.event_nonce)
  return _internal_event_nonce();
}
inline void MsgERC20DeployedClaim::set_event_nonce(::uint64_t value) {
  _internal_set_event_nonce(value);
  // @@protoc_insertion_point(field_set:injective.peggy.v1.MsgERC20DeployedClaim.event_nonce)
}
inline ::uint64_t MsgERC20DeployedClaim::_internal_event_nonce() const {
  return _impl_.event_nonce_;
}
inline void MsgERC20DeployedClaim::_internal_set_event_nonce(::uint64_t value) {
  ;
  _impl_.event_nonce_ = value;
}

// uint64 block_height = 2 [json_name = "blockHeight"];
inline void MsgERC20DeployedClaim::clear_block_height() {
  _impl_.block_height_ = ::uint64_t{0u};
}
inline ::uint64_t MsgERC20DeployedClaim::block_height() const {
  // @@protoc_insertion_point(field_get:injective.peggy.v1.MsgERC20DeployedClaim.block_height)
  return _internal_block_height();
}
inline void MsgERC20DeployedClaim::set_block_height(::uint64_t value) {
  _internal_set_block_height(value);
  // @@protoc_insertion_point(field_set:injective.peggy.v1.MsgERC20DeployedClaim.block_height)
}
inline ::uint64_t MsgERC20DeployedClaim::_internal_block_height() const {
  return _impl_.block_height_;
}
inline void MsgERC20DeployedClaim::_internal_set_block_height(::uint64_t value) {
  ;
  _impl_.block_height_ = value;
}

// string cosmos_denom = 3 [json_name = "cosmosDenom"];
inline void MsgERC20DeployedClaim::clear_cosmos_denom() {
  _impl_.cosmos_denom_.ClearToEmpty();
}
inline const std::string& MsgERC20DeployedClaim::cosmos_denom() const {
  // @@protoc_insertion_point(field_get:injective.peggy.v1.MsgERC20DeployedClaim.cosmos_denom)
  return _internal_cosmos_denom();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgERC20DeployedClaim::set_cosmos_denom(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.cosmos_denom_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.peggy.v1.MsgERC20DeployedClaim.cosmos_denom)
}
inline std::string* MsgERC20DeployedClaim::mutable_cosmos_denom() {
  std::string* _s = _internal_mutable_cosmos_denom();
  // @@protoc_insertion_point(field_mutable:injective.peggy.v1.MsgERC20DeployedClaim.cosmos_denom)
  return _s;
}
inline const std::string& MsgERC20DeployedClaim::_internal_cosmos_denom() const {
  return _impl_.cosmos_denom_.Get();
}
inline void MsgERC20DeployedClaim::_internal_set_cosmos_denom(const std::string& value) {
  ;


  _impl_.cosmos_denom_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgERC20DeployedClaim::_internal_mutable_cosmos_denom() {
  ;
  return _impl_.cosmos_denom_.Mutable( GetArenaForAllocation());
}
inline std::string* MsgERC20DeployedClaim::release_cosmos_denom() {
  // @@protoc_insertion_point(field_release:injective.peggy.v1.MsgERC20DeployedClaim.cosmos_denom)
  return _impl_.cosmos_denom_.Release();
}
inline void MsgERC20DeployedClaim::set_allocated_cosmos_denom(std::string* value) {
  _impl_.cosmos_denom_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.cosmos_denom_.IsDefault()) {
          _impl_.cosmos_denom_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.peggy.v1.MsgERC20DeployedClaim.cosmos_denom)
}

// string token_contract = 4 [json_name = "tokenContract"];
inline void MsgERC20DeployedClaim::clear_token_contract() {
  _impl_.token_contract_.ClearToEmpty();
}
inline const std::string& MsgERC20DeployedClaim::token_contract() const {
  // @@protoc_insertion_point(field_get:injective.peggy.v1.MsgERC20DeployedClaim.token_contract)
  return _internal_token_contract();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgERC20DeployedClaim::set_token_contract(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.token_contract_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.peggy.v1.MsgERC20DeployedClaim.token_contract)
}
inline std::string* MsgERC20DeployedClaim::mutable_token_contract() {
  std::string* _s = _internal_mutable_token_contract();
  // @@protoc_insertion_point(field_mutable:injective.peggy.v1.MsgERC20DeployedClaim.token_contract)
  return _s;
}
inline const std::string& MsgERC20DeployedClaim::_internal_token_contract() const {
  return _impl_.token_contract_.Get();
}
inline void MsgERC20DeployedClaim::_internal_set_token_contract(const std::string& value) {
  ;


  _impl_.token_contract_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgERC20DeployedClaim::_internal_mutable_token_contract() {
  ;
  return _impl_.token_contract_.Mutable( GetArenaForAllocation());
}
inline std::string* MsgERC20DeployedClaim::release_token_contract() {
  // @@protoc_insertion_point(field_release:injective.peggy.v1.MsgERC20DeployedClaim.token_contract)
  return _impl_.token_contract_.Release();
}
inline void MsgERC20DeployedClaim::set_allocated_token_contract(std::string* value) {
  _impl_.token_contract_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.token_contract_.IsDefault()) {
          _impl_.token_contract_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.peggy.v1.MsgERC20DeployedClaim.token_contract)
}

// string name = 5 [json_name = "name"];
inline void MsgERC20DeployedClaim::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& MsgERC20DeployedClaim::name() const {
  // @@protoc_insertion_point(field_get:injective.peggy.v1.MsgERC20DeployedClaim.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgERC20DeployedClaim::set_name(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.peggy.v1.MsgERC20DeployedClaim.name)
}
inline std::string* MsgERC20DeployedClaim::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:injective.peggy.v1.MsgERC20DeployedClaim.name)
  return _s;
}
inline const std::string& MsgERC20DeployedClaim::_internal_name() const {
  return _impl_.name_.Get();
}
inline void MsgERC20DeployedClaim::_internal_set_name(const std::string& value) {
  ;


  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgERC20DeployedClaim::_internal_mutable_name() {
  ;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* MsgERC20DeployedClaim::release_name() {
  // @@protoc_insertion_point(field_release:injective.peggy.v1.MsgERC20DeployedClaim.name)
  return _impl_.name_.Release();
}
inline void MsgERC20DeployedClaim::set_allocated_name(std::string* value) {
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.peggy.v1.MsgERC20DeployedClaim.name)
}

// string symbol = 6 [json_name = "symbol"];
inline void MsgERC20DeployedClaim::clear_symbol() {
  _impl_.symbol_.ClearToEmpty();
}
inline const std::string& MsgERC20DeployedClaim::symbol() const {
  // @@protoc_insertion_point(field_get:injective.peggy.v1.MsgERC20DeployedClaim.symbol)
  return _internal_symbol();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgERC20DeployedClaim::set_symbol(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.symbol_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.peggy.v1.MsgERC20DeployedClaim.symbol)
}
inline std::string* MsgERC20DeployedClaim::mutable_symbol() {
  std::string* _s = _internal_mutable_symbol();
  // @@protoc_insertion_point(field_mutable:injective.peggy.v1.MsgERC20DeployedClaim.symbol)
  return _s;
}
inline const std::string& MsgERC20DeployedClaim::_internal_symbol() const {
  return _impl_.symbol_.Get();
}
inline void MsgERC20DeployedClaim::_internal_set_symbol(const std::string& value) {
  ;


  _impl_.symbol_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgERC20DeployedClaim::_internal_mutable_symbol() {
  ;
  return _impl_.symbol_.Mutable( GetArenaForAllocation());
}
inline std::string* MsgERC20DeployedClaim::release_symbol() {
  // @@protoc_insertion_point(field_release:injective.peggy.v1.MsgERC20DeployedClaim.symbol)
  return _impl_.symbol_.Release();
}
inline void MsgERC20DeployedClaim::set_allocated_symbol(std::string* value) {
  _impl_.symbol_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.symbol_.IsDefault()) {
          _impl_.symbol_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.peggy.v1.MsgERC20DeployedClaim.symbol)
}

// uint64 decimals = 7 [json_name = "decimals"];
inline void MsgERC20DeployedClaim::clear_decimals() {
  _impl_.decimals_ = ::uint64_t{0u};
}
inline ::uint64_t MsgERC20DeployedClaim::decimals() const {
  // @@protoc_insertion_point(field_get:injective.peggy.v1.MsgERC20DeployedClaim.decimals)
  return _internal_decimals();
}
inline void MsgERC20DeployedClaim::set_decimals(::uint64_t value) {
  _internal_set_decimals(value);
  // @@protoc_insertion_point(field_set:injective.peggy.v1.MsgERC20DeployedClaim.decimals)
}
inline ::uint64_t MsgERC20DeployedClaim::_internal_decimals() const {
  return _impl_.decimals_;
}
inline void MsgERC20DeployedClaim::_internal_set_decimals(::uint64_t value) {
  ;
  _impl_.decimals_ = value;
}

// string orchestrator = 8 [json_name = "orchestrator"];
inline void MsgERC20DeployedClaim::clear_orchestrator() {
  _impl_.orchestrator_.ClearToEmpty();
}
inline const std::string& MsgERC20DeployedClaim::orchestrator() const {
  // @@protoc_insertion_point(field_get:injective.peggy.v1.MsgERC20DeployedClaim.orchestrator)
  return _internal_orchestrator();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgERC20DeployedClaim::set_orchestrator(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.orchestrator_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.peggy.v1.MsgERC20DeployedClaim.orchestrator)
}
inline std::string* MsgERC20DeployedClaim::mutable_orchestrator() {
  std::string* _s = _internal_mutable_orchestrator();
  // @@protoc_insertion_point(field_mutable:injective.peggy.v1.MsgERC20DeployedClaim.orchestrator)
  return _s;
}
inline const std::string& MsgERC20DeployedClaim::_internal_orchestrator() const {
  return _impl_.orchestrator_.Get();
}
inline void MsgERC20DeployedClaim::_internal_set_orchestrator(const std::string& value) {
  ;


  _impl_.orchestrator_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgERC20DeployedClaim::_internal_mutable_orchestrator() {
  ;
  return _impl_.orchestrator_.Mutable( GetArenaForAllocation());
}
inline std::string* MsgERC20DeployedClaim::release_orchestrator() {
  // @@protoc_insertion_point(field_release:injective.peggy.v1.MsgERC20DeployedClaim.orchestrator)
  return _impl_.orchestrator_.Release();
}
inline void MsgERC20DeployedClaim::set_allocated_orchestrator(std::string* value) {
  _impl_.orchestrator_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.orchestrator_.IsDefault()) {
          _impl_.orchestrator_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.peggy.v1.MsgERC20DeployedClaim.orchestrator)
}

// -------------------------------------------------------------------

// MsgERC20DeployedClaimResponse

// -------------------------------------------------------------------

// MsgCancelSendToEth

// uint64 transaction_id = 1 [json_name = "transactionId"];
inline void MsgCancelSendToEth::clear_transaction_id() {
  _impl_.transaction_id_ = ::uint64_t{0u};
}
inline ::uint64_t MsgCancelSendToEth::transaction_id() const {
  // @@protoc_insertion_point(field_get:injective.peggy.v1.MsgCancelSendToEth.transaction_id)
  return _internal_transaction_id();
}
inline void MsgCancelSendToEth::set_transaction_id(::uint64_t value) {
  _internal_set_transaction_id(value);
  // @@protoc_insertion_point(field_set:injective.peggy.v1.MsgCancelSendToEth.transaction_id)
}
inline ::uint64_t MsgCancelSendToEth::_internal_transaction_id() const {
  return _impl_.transaction_id_;
}
inline void MsgCancelSendToEth::_internal_set_transaction_id(::uint64_t value) {
  ;
  _impl_.transaction_id_ = value;
}

// string sender = 2 [json_name = "sender"];
inline void MsgCancelSendToEth::clear_sender() {
  _impl_.sender_.ClearToEmpty();
}
inline const std::string& MsgCancelSendToEth::sender() const {
  // @@protoc_insertion_point(field_get:injective.peggy.v1.MsgCancelSendToEth.sender)
  return _internal_sender();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgCancelSendToEth::set_sender(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.sender_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.peggy.v1.MsgCancelSendToEth.sender)
}
inline std::string* MsgCancelSendToEth::mutable_sender() {
  std::string* _s = _internal_mutable_sender();
  // @@protoc_insertion_point(field_mutable:injective.peggy.v1.MsgCancelSendToEth.sender)
  return _s;
}
inline const std::string& MsgCancelSendToEth::_internal_sender() const {
  return _impl_.sender_.Get();
}
inline void MsgCancelSendToEth::_internal_set_sender(const std::string& value) {
  ;


  _impl_.sender_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgCancelSendToEth::_internal_mutable_sender() {
  ;
  return _impl_.sender_.Mutable( GetArenaForAllocation());
}
inline std::string* MsgCancelSendToEth::release_sender() {
  // @@protoc_insertion_point(field_release:injective.peggy.v1.MsgCancelSendToEth.sender)
  return _impl_.sender_.Release();
}
inline void MsgCancelSendToEth::set_allocated_sender(std::string* value) {
  _impl_.sender_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.sender_.IsDefault()) {
          _impl_.sender_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.peggy.v1.MsgCancelSendToEth.sender)
}

// -------------------------------------------------------------------

// MsgCancelSendToEthResponse

// -------------------------------------------------------------------

// MsgSubmitBadSignatureEvidence

// .google.protobuf.Any subject = 1 [json_name = "subject"];
inline bool MsgSubmitBadSignatureEvidence::has_subject() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.subject_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& MsgSubmitBadSignatureEvidence::_internal_subject() const {
  const ::PROTOBUF_NAMESPACE_ID::Any* p = _impl_.subject_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Any&>(
      ::PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& MsgSubmitBadSignatureEvidence::subject() const {
  // @@protoc_insertion_point(field_get:injective.peggy.v1.MsgSubmitBadSignatureEvidence.subject)
  return _internal_subject();
}
inline void MsgSubmitBadSignatureEvidence::unsafe_arena_set_allocated_subject(
    ::PROTOBUF_NAMESPACE_ID::Any* subject) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.subject_);
  }
  _impl_.subject_ = subject;
  if (subject) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:injective.peggy.v1.MsgSubmitBadSignatureEvidence.subject)
}
inline ::PROTOBUF_NAMESPACE_ID::Any* MsgSubmitBadSignatureEvidence::release_subject() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Any* temp = _impl_.subject_;
  _impl_.subject_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* MsgSubmitBadSignatureEvidence::unsafe_arena_release_subject() {
  // @@protoc_insertion_point(field_release:injective.peggy.v1.MsgSubmitBadSignatureEvidence.subject)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Any* temp = _impl_.subject_;
  _impl_.subject_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* MsgSubmitBadSignatureEvidence::_internal_mutable_subject() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.subject_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Any>(GetArenaForAllocation());
    _impl_.subject_ = p;
  }
  return _impl_.subject_;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* MsgSubmitBadSignatureEvidence::mutable_subject() {
  ::PROTOBUF_NAMESPACE_ID::Any* _msg = _internal_mutable_subject();
  // @@protoc_insertion_point(field_mutable:injective.peggy.v1.MsgSubmitBadSignatureEvidence.subject)
  return _msg;
}
inline void MsgSubmitBadSignatureEvidence::set_allocated_subject(::PROTOBUF_NAMESPACE_ID::Any* subject) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.subject_);
  }
  if (subject) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(subject));
    if (message_arena != submessage_arena) {
      subject = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, subject, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.subject_ = subject;
  // @@protoc_insertion_point(field_set_allocated:injective.peggy.v1.MsgSubmitBadSignatureEvidence.subject)
}

// string signature = 2 [json_name = "signature"];
inline void MsgSubmitBadSignatureEvidence::clear_signature() {
  _impl_.signature_.ClearToEmpty();
}
inline const std::string& MsgSubmitBadSignatureEvidence::signature() const {
  // @@protoc_insertion_point(field_get:injective.peggy.v1.MsgSubmitBadSignatureEvidence.signature)
  return _internal_signature();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgSubmitBadSignatureEvidence::set_signature(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.signature_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.peggy.v1.MsgSubmitBadSignatureEvidence.signature)
}
inline std::string* MsgSubmitBadSignatureEvidence::mutable_signature() {
  std::string* _s = _internal_mutable_signature();
  // @@protoc_insertion_point(field_mutable:injective.peggy.v1.MsgSubmitBadSignatureEvidence.signature)
  return _s;
}
inline const std::string& MsgSubmitBadSignatureEvidence::_internal_signature() const {
  return _impl_.signature_.Get();
}
inline void MsgSubmitBadSignatureEvidence::_internal_set_signature(const std::string& value) {
  ;


  _impl_.signature_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgSubmitBadSignatureEvidence::_internal_mutable_signature() {
  ;
  return _impl_.signature_.Mutable( GetArenaForAllocation());
}
inline std::string* MsgSubmitBadSignatureEvidence::release_signature() {
  // @@protoc_insertion_point(field_release:injective.peggy.v1.MsgSubmitBadSignatureEvidence.signature)
  return _impl_.signature_.Release();
}
inline void MsgSubmitBadSignatureEvidence::set_allocated_signature(std::string* value) {
  _impl_.signature_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.signature_.IsDefault()) {
          _impl_.signature_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.peggy.v1.MsgSubmitBadSignatureEvidence.signature)
}

// string sender = 3 [json_name = "sender"];
inline void MsgSubmitBadSignatureEvidence::clear_sender() {
  _impl_.sender_.ClearToEmpty();
}
inline const std::string& MsgSubmitBadSignatureEvidence::sender() const {
  // @@protoc_insertion_point(field_get:injective.peggy.v1.MsgSubmitBadSignatureEvidence.sender)
  return _internal_sender();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgSubmitBadSignatureEvidence::set_sender(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.sender_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.peggy.v1.MsgSubmitBadSignatureEvidence.sender)
}
inline std::string* MsgSubmitBadSignatureEvidence::mutable_sender() {
  std::string* _s = _internal_mutable_sender();
  // @@protoc_insertion_point(field_mutable:injective.peggy.v1.MsgSubmitBadSignatureEvidence.sender)
  return _s;
}
inline const std::string& MsgSubmitBadSignatureEvidence::_internal_sender() const {
  return _impl_.sender_.Get();
}
inline void MsgSubmitBadSignatureEvidence::_internal_set_sender(const std::string& value) {
  ;


  _impl_.sender_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgSubmitBadSignatureEvidence::_internal_mutable_sender() {
  ;
  return _impl_.sender_.Mutable( GetArenaForAllocation());
}
inline std::string* MsgSubmitBadSignatureEvidence::release_sender() {
  // @@protoc_insertion_point(field_release:injective.peggy.v1.MsgSubmitBadSignatureEvidence.sender)
  return _impl_.sender_.Release();
}
inline void MsgSubmitBadSignatureEvidence::set_allocated_sender(std::string* value) {
  _impl_.sender_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.sender_.IsDefault()) {
          _impl_.sender_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.peggy.v1.MsgSubmitBadSignatureEvidence.sender)
}

// -------------------------------------------------------------------

// MsgSubmitBadSignatureEvidenceResponse

// -------------------------------------------------------------------

// MsgValsetUpdatedClaim

// uint64 event_nonce = 1 [json_name = "eventNonce"];
inline void MsgValsetUpdatedClaim::clear_event_nonce() {
  _impl_.event_nonce_ = ::uint64_t{0u};
}
inline ::uint64_t MsgValsetUpdatedClaim::event_nonce() const {
  // @@protoc_insertion_point(field_get:injective.peggy.v1.MsgValsetUpdatedClaim.event_nonce)
  return _internal_event_nonce();
}
inline void MsgValsetUpdatedClaim::set_event_nonce(::uint64_t value) {
  _internal_set_event_nonce(value);
  // @@protoc_insertion_point(field_set:injective.peggy.v1.MsgValsetUpdatedClaim.event_nonce)
}
inline ::uint64_t MsgValsetUpdatedClaim::_internal_event_nonce() const {
  return _impl_.event_nonce_;
}
inline void MsgValsetUpdatedClaim::_internal_set_event_nonce(::uint64_t value) {
  ;
  _impl_.event_nonce_ = value;
}

// uint64 valset_nonce = 2 [json_name = "valsetNonce"];
inline void MsgValsetUpdatedClaim::clear_valset_nonce() {
  _impl_.valset_nonce_ = ::uint64_t{0u};
}
inline ::uint64_t MsgValsetUpdatedClaim::valset_nonce() const {
  // @@protoc_insertion_point(field_get:injective.peggy.v1.MsgValsetUpdatedClaim.valset_nonce)
  return _internal_valset_nonce();
}
inline void MsgValsetUpdatedClaim::set_valset_nonce(::uint64_t value) {
  _internal_set_valset_nonce(value);
  // @@protoc_insertion_point(field_set:injective.peggy.v1.MsgValsetUpdatedClaim.valset_nonce)
}
inline ::uint64_t MsgValsetUpdatedClaim::_internal_valset_nonce() const {
  return _impl_.valset_nonce_;
}
inline void MsgValsetUpdatedClaim::_internal_set_valset_nonce(::uint64_t value) {
  ;
  _impl_.valset_nonce_ = value;
}

// uint64 block_height = 3 [json_name = "blockHeight"];
inline void MsgValsetUpdatedClaim::clear_block_height() {
  _impl_.block_height_ = ::uint64_t{0u};
}
inline ::uint64_t MsgValsetUpdatedClaim::block_height() const {
  // @@protoc_insertion_point(field_get:injective.peggy.v1.MsgValsetUpdatedClaim.block_height)
  return _internal_block_height();
}
inline void MsgValsetUpdatedClaim::set_block_height(::uint64_t value) {
  _internal_set_block_height(value);
  // @@protoc_insertion_point(field_set:injective.peggy.v1.MsgValsetUpdatedClaim.block_height)
}
inline ::uint64_t MsgValsetUpdatedClaim::_internal_block_height() const {
  return _impl_.block_height_;
}
inline void MsgValsetUpdatedClaim::_internal_set_block_height(::uint64_t value) {
  ;
  _impl_.block_height_ = value;
}

// repeated .injective.peggy.v1.BridgeValidator members = 4 [json_name = "members"];
inline int MsgValsetUpdatedClaim::_internal_members_size() const {
  return _impl_.members_.size();
}
inline int MsgValsetUpdatedClaim::members_size() const {
  return _internal_members_size();
}
inline ::injective::peggy::v1::BridgeValidator* MsgValsetUpdatedClaim::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:injective.peggy.v1.MsgValsetUpdatedClaim.members)
  return _internal_mutable_members()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::peggy::v1::BridgeValidator >*
MsgValsetUpdatedClaim::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:injective.peggy.v1.MsgValsetUpdatedClaim.members)
  return _internal_mutable_members();
}
inline const ::injective::peggy::v1::BridgeValidator& MsgValsetUpdatedClaim::_internal_members(int index) const {
  return _internal_members().Get(index);
}
inline const ::injective::peggy::v1::BridgeValidator& MsgValsetUpdatedClaim::members(int index) const {
  // @@protoc_insertion_point(field_get:injective.peggy.v1.MsgValsetUpdatedClaim.members)
  return _internal_members(index);
}
inline ::injective::peggy::v1::BridgeValidator* MsgValsetUpdatedClaim::_internal_add_members() {
  return _internal_mutable_members()->Add();
}
inline ::injective::peggy::v1::BridgeValidator* MsgValsetUpdatedClaim::add_members() {
  ::injective::peggy::v1::BridgeValidator* _add = _internal_add_members();
  // @@protoc_insertion_point(field_add:injective.peggy.v1.MsgValsetUpdatedClaim.members)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::peggy::v1::BridgeValidator >&
MsgValsetUpdatedClaim::members() const {
  // @@protoc_insertion_point(field_list:injective.peggy.v1.MsgValsetUpdatedClaim.members)
  return _internal_members();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::peggy::v1::BridgeValidator>&
MsgValsetUpdatedClaim::_internal_members() const {
  return _impl_.members_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::peggy::v1::BridgeValidator>*
MsgValsetUpdatedClaim::_internal_mutable_members() {
  return &_impl_.members_;
}

// string reward_amount = 5 [json_name = "rewardAmount", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int"];
inline void MsgValsetUpdatedClaim::clear_reward_amount() {
  _impl_.reward_amount_.ClearToEmpty();
}
inline const std::string& MsgValsetUpdatedClaim::reward_amount() const {
  // @@protoc_insertion_point(field_get:injective.peggy.v1.MsgValsetUpdatedClaim.reward_amount)
  return _internal_reward_amount();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgValsetUpdatedClaim::set_reward_amount(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.reward_amount_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.peggy.v1.MsgValsetUpdatedClaim.reward_amount)
}
inline std::string* MsgValsetUpdatedClaim::mutable_reward_amount() {
  std::string* _s = _internal_mutable_reward_amount();
  // @@protoc_insertion_point(field_mutable:injective.peggy.v1.MsgValsetUpdatedClaim.reward_amount)
  return _s;
}
inline const std::string& MsgValsetUpdatedClaim::_internal_reward_amount() const {
  return _impl_.reward_amount_.Get();
}
inline void MsgValsetUpdatedClaim::_internal_set_reward_amount(const std::string& value) {
  ;


  _impl_.reward_amount_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgValsetUpdatedClaim::_internal_mutable_reward_amount() {
  ;
  return _impl_.reward_amount_.Mutable( GetArenaForAllocation());
}
inline std::string* MsgValsetUpdatedClaim::release_reward_amount() {
  // @@protoc_insertion_point(field_release:injective.peggy.v1.MsgValsetUpdatedClaim.reward_amount)
  return _impl_.reward_amount_.Release();
}
inline void MsgValsetUpdatedClaim::set_allocated_reward_amount(std::string* value) {
  _impl_.reward_amount_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.reward_amount_.IsDefault()) {
          _impl_.reward_amount_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.peggy.v1.MsgValsetUpdatedClaim.reward_amount)
}

// string reward_token = 6 [json_name = "rewardToken"];
inline void MsgValsetUpdatedClaim::clear_reward_token() {
  _impl_.reward_token_.ClearToEmpty();
}
inline const std::string& MsgValsetUpdatedClaim::reward_token() const {
  // @@protoc_insertion_point(field_get:injective.peggy.v1.MsgValsetUpdatedClaim.reward_token)
  return _internal_reward_token();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgValsetUpdatedClaim::set_reward_token(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.reward_token_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.peggy.v1.MsgValsetUpdatedClaim.reward_token)
}
inline std::string* MsgValsetUpdatedClaim::mutable_reward_token() {
  std::string* _s = _internal_mutable_reward_token();
  // @@protoc_insertion_point(field_mutable:injective.peggy.v1.MsgValsetUpdatedClaim.reward_token)
  return _s;
}
inline const std::string& MsgValsetUpdatedClaim::_internal_reward_token() const {
  return _impl_.reward_token_.Get();
}
inline void MsgValsetUpdatedClaim::_internal_set_reward_token(const std::string& value) {
  ;


  _impl_.reward_token_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgValsetUpdatedClaim::_internal_mutable_reward_token() {
  ;
  return _impl_.reward_token_.Mutable( GetArenaForAllocation());
}
inline std::string* MsgValsetUpdatedClaim::release_reward_token() {
  // @@protoc_insertion_point(field_release:injective.peggy.v1.MsgValsetUpdatedClaim.reward_token)
  return _impl_.reward_token_.Release();
}
inline void MsgValsetUpdatedClaim::set_allocated_reward_token(std::string* value) {
  _impl_.reward_token_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.reward_token_.IsDefault()) {
          _impl_.reward_token_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.peggy.v1.MsgValsetUpdatedClaim.reward_token)
}

// string orchestrator = 7 [json_name = "orchestrator"];
inline void MsgValsetUpdatedClaim::clear_orchestrator() {
  _impl_.orchestrator_.ClearToEmpty();
}
inline const std::string& MsgValsetUpdatedClaim::orchestrator() const {
  // @@protoc_insertion_point(field_get:injective.peggy.v1.MsgValsetUpdatedClaim.orchestrator)
  return _internal_orchestrator();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgValsetUpdatedClaim::set_orchestrator(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.orchestrator_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.peggy.v1.MsgValsetUpdatedClaim.orchestrator)
}
inline std::string* MsgValsetUpdatedClaim::mutable_orchestrator() {
  std::string* _s = _internal_mutable_orchestrator();
  // @@protoc_insertion_point(field_mutable:injective.peggy.v1.MsgValsetUpdatedClaim.orchestrator)
  return _s;
}
inline const std::string& MsgValsetUpdatedClaim::_internal_orchestrator() const {
  return _impl_.orchestrator_.Get();
}
inline void MsgValsetUpdatedClaim::_internal_set_orchestrator(const std::string& value) {
  ;


  _impl_.orchestrator_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgValsetUpdatedClaim::_internal_mutable_orchestrator() {
  ;
  return _impl_.orchestrator_.Mutable( GetArenaForAllocation());
}
inline std::string* MsgValsetUpdatedClaim::release_orchestrator() {
  // @@protoc_insertion_point(field_release:injective.peggy.v1.MsgValsetUpdatedClaim.orchestrator)
  return _impl_.orchestrator_.Release();
}
inline void MsgValsetUpdatedClaim::set_allocated_orchestrator(std::string* value) {
  _impl_.orchestrator_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.orchestrator_.IsDefault()) {
          _impl_.orchestrator_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.peggy.v1.MsgValsetUpdatedClaim.orchestrator)
}

// -------------------------------------------------------------------

// MsgValsetUpdatedClaimResponse

// -------------------------------------------------------------------

// MsgUpdateParams

// string authority = 1 [json_name = "authority", (.cosmos_proto.scalar) = "cosmos.AddressString"];
inline void MsgUpdateParams::clear_authority() {
  _impl_.authority_.ClearToEmpty();
}
inline const std::string& MsgUpdateParams::authority() const {
  // @@protoc_insertion_point(field_get:injective.peggy.v1.MsgUpdateParams.authority)
  return _internal_authority();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgUpdateParams::set_authority(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.authority_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.peggy.v1.MsgUpdateParams.authority)
}
inline std::string* MsgUpdateParams::mutable_authority() {
  std::string* _s = _internal_mutable_authority();
  // @@protoc_insertion_point(field_mutable:injective.peggy.v1.MsgUpdateParams.authority)
  return _s;
}
inline const std::string& MsgUpdateParams::_internal_authority() const {
  return _impl_.authority_.Get();
}
inline void MsgUpdateParams::_internal_set_authority(const std::string& value) {
  ;


  _impl_.authority_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgUpdateParams::_internal_mutable_authority() {
  ;
  return _impl_.authority_.Mutable( GetArenaForAllocation());
}
inline std::string* MsgUpdateParams::release_authority() {
  // @@protoc_insertion_point(field_release:injective.peggy.v1.MsgUpdateParams.authority)
  return _impl_.authority_.Release();
}
inline void MsgUpdateParams::set_allocated_authority(std::string* value) {
  _impl_.authority_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.authority_.IsDefault()) {
          _impl_.authority_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.peggy.v1.MsgUpdateParams.authority)
}

// .injective.peggy.v1.Params params = 2 [json_name = "params", (.gogoproto.nullable) = false];
inline bool MsgUpdateParams::has_params() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.params_ != nullptr);
  return value;
}
inline const ::injective::peggy::v1::Params& MsgUpdateParams::_internal_params() const {
  const ::injective::peggy::v1::Params* p = _impl_.params_;
  return p != nullptr ? *p : reinterpret_cast<const ::injective::peggy::v1::Params&>(
      ::injective::peggy::v1::_Params_default_instance_);
}
inline const ::injective::peggy::v1::Params& MsgUpdateParams::params() const {
  // @@protoc_insertion_point(field_get:injective.peggy.v1.MsgUpdateParams.params)
  return _internal_params();
}
inline void MsgUpdateParams::unsafe_arena_set_allocated_params(
    ::injective::peggy::v1::Params* params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.params_);
  }
  _impl_.params_ = params;
  if (params) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:injective.peggy.v1.MsgUpdateParams.params)
}
inline ::injective::peggy::v1::Params* MsgUpdateParams::release_params() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::injective::peggy::v1::Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::injective::peggy::v1::Params* MsgUpdateParams::unsafe_arena_release_params() {
  // @@protoc_insertion_point(field_release:injective.peggy.v1.MsgUpdateParams.params)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::injective::peggy::v1::Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
  return temp;
}
inline ::injective::peggy::v1::Params* MsgUpdateParams::_internal_mutable_params() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.params_ == nullptr) {
    auto* p = CreateMaybeMessage<::injective::peggy::v1::Params>(GetArenaForAllocation());
    _impl_.params_ = p;
  }
  return _impl_.params_;
}
inline ::injective::peggy::v1::Params* MsgUpdateParams::mutable_params() {
  ::injective::peggy::v1::Params* _msg = _internal_mutable_params();
  // @@protoc_insertion_point(field_mutable:injective.peggy.v1.MsgUpdateParams.params)
  return _msg;
}
inline void MsgUpdateParams::set_allocated_params(::injective::peggy::v1::Params* params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.params_);
  }
  if (params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(params));
    if (message_arena != submessage_arena) {
      params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, params, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.params_ = params;
  // @@protoc_insertion_point(field_set_allocated:injective.peggy.v1.MsgUpdateParams.params)
}

// -------------------------------------------------------------------

// MsgUpdateParamsResponse

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace peggy
}  // namespace injective


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_injective_2fpeggy_2fv1_2fmsgs_2eproto_2epb_2eh

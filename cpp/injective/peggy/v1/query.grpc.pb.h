// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: injective/peggy/v1/query.proto
#ifndef GRPC_injective_2fpeggy_2fv1_2fquery_2eproto__INCLUDED
#define GRPC_injective_2fpeggy_2fv1_2fquery_2eproto__INCLUDED

#include "injective/peggy/v1/query.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace injective {
namespace peggy {
namespace v1 {

// Query defines the gRPC querier service
class Query final {
 public:
  static constexpr char const* service_full_name() {
    return "injective.peggy.v1.Query";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Deployments queries deployments
    virtual ::grpc::Status Params(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryParamsRequest& request, ::injective::peggy::v1::QueryParamsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::QueryParamsResponse>> AsyncParams(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryParamsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::QueryParamsResponse>>(AsyncParamsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::QueryParamsResponse>> PrepareAsyncParams(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryParamsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::QueryParamsResponse>>(PrepareAsyncParamsRaw(context, request, cq));
    }
    // valset
    virtual ::grpc::Status CurrentValset(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryCurrentValsetRequest& request, ::injective::peggy::v1::QueryCurrentValsetResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::QueryCurrentValsetResponse>> AsyncCurrentValset(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryCurrentValsetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::QueryCurrentValsetResponse>>(AsyncCurrentValsetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::QueryCurrentValsetResponse>> PrepareAsyncCurrentValset(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryCurrentValsetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::QueryCurrentValsetResponse>>(PrepareAsyncCurrentValsetRaw(context, request, cq));
    }
    virtual ::grpc::Status ValsetRequest(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryValsetRequestRequest& request, ::injective::peggy::v1::QueryValsetRequestResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::QueryValsetRequestResponse>> AsyncValsetRequest(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryValsetRequestRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::QueryValsetRequestResponse>>(AsyncValsetRequestRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::QueryValsetRequestResponse>> PrepareAsyncValsetRequest(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryValsetRequestRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::QueryValsetRequestResponse>>(PrepareAsyncValsetRequestRaw(context, request, cq));
    }
    virtual ::grpc::Status ValsetConfirm(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryValsetConfirmRequest& request, ::injective::peggy::v1::QueryValsetConfirmResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::QueryValsetConfirmResponse>> AsyncValsetConfirm(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryValsetConfirmRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::QueryValsetConfirmResponse>>(AsyncValsetConfirmRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::QueryValsetConfirmResponse>> PrepareAsyncValsetConfirm(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryValsetConfirmRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::QueryValsetConfirmResponse>>(PrepareAsyncValsetConfirmRaw(context, request, cq));
    }
    virtual ::grpc::Status ValsetConfirmsByNonce(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryValsetConfirmsByNonceRequest& request, ::injective::peggy::v1::QueryValsetConfirmsByNonceResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::QueryValsetConfirmsByNonceResponse>> AsyncValsetConfirmsByNonce(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryValsetConfirmsByNonceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::QueryValsetConfirmsByNonceResponse>>(AsyncValsetConfirmsByNonceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::QueryValsetConfirmsByNonceResponse>> PrepareAsyncValsetConfirmsByNonce(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryValsetConfirmsByNonceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::QueryValsetConfirmsByNonceResponse>>(PrepareAsyncValsetConfirmsByNonceRaw(context, request, cq));
    }
    virtual ::grpc::Status LastValsetRequests(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryLastValsetRequestsRequest& request, ::injective::peggy::v1::QueryLastValsetRequestsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::QueryLastValsetRequestsResponse>> AsyncLastValsetRequests(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryLastValsetRequestsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::QueryLastValsetRequestsResponse>>(AsyncLastValsetRequestsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::QueryLastValsetRequestsResponse>> PrepareAsyncLastValsetRequests(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryLastValsetRequestsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::QueryLastValsetRequestsResponse>>(PrepareAsyncLastValsetRequestsRaw(context, request, cq));
    }
    virtual ::grpc::Status LastPendingValsetRequestByAddr(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryLastPendingValsetRequestByAddrRequest& request, ::injective::peggy::v1::QueryLastPendingValsetRequestByAddrResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::QueryLastPendingValsetRequestByAddrResponse>> AsyncLastPendingValsetRequestByAddr(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryLastPendingValsetRequestByAddrRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::QueryLastPendingValsetRequestByAddrResponse>>(AsyncLastPendingValsetRequestByAddrRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::QueryLastPendingValsetRequestByAddrResponse>> PrepareAsyncLastPendingValsetRequestByAddr(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryLastPendingValsetRequestByAddrRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::QueryLastPendingValsetRequestByAddrResponse>>(PrepareAsyncLastPendingValsetRequestByAddrRaw(context, request, cq));
    }
    // claim
    virtual ::grpc::Status LastEventByAddr(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryLastEventByAddrRequest& request, ::injective::peggy::v1::QueryLastEventByAddrResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::QueryLastEventByAddrResponse>> AsyncLastEventByAddr(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryLastEventByAddrRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::QueryLastEventByAddrResponse>>(AsyncLastEventByAddrRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::QueryLastEventByAddrResponse>> PrepareAsyncLastEventByAddr(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryLastEventByAddrRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::QueryLastEventByAddrResponse>>(PrepareAsyncLastEventByAddrRaw(context, request, cq));
    }
    // batch
    virtual ::grpc::Status GetPendingSendToEth(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryPendingSendToEth& request, ::injective::peggy::v1::QueryPendingSendToEthResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::QueryPendingSendToEthResponse>> AsyncGetPendingSendToEth(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryPendingSendToEth& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::QueryPendingSendToEthResponse>>(AsyncGetPendingSendToEthRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::QueryPendingSendToEthResponse>> PrepareAsyncGetPendingSendToEth(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryPendingSendToEth& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::QueryPendingSendToEthResponse>>(PrepareAsyncGetPendingSendToEthRaw(context, request, cq));
    }
    virtual ::grpc::Status BatchFees(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryBatchFeeRequest& request, ::injective::peggy::v1::QueryBatchFeeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::QueryBatchFeeResponse>> AsyncBatchFees(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryBatchFeeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::QueryBatchFeeResponse>>(AsyncBatchFeesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::QueryBatchFeeResponse>> PrepareAsyncBatchFees(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryBatchFeeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::QueryBatchFeeResponse>>(PrepareAsyncBatchFeesRaw(context, request, cq));
    }
    virtual ::grpc::Status OutgoingTxBatches(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryOutgoingTxBatchesRequest& request, ::injective::peggy::v1::QueryOutgoingTxBatchesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::QueryOutgoingTxBatchesResponse>> AsyncOutgoingTxBatches(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryOutgoingTxBatchesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::QueryOutgoingTxBatchesResponse>>(AsyncOutgoingTxBatchesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::QueryOutgoingTxBatchesResponse>> PrepareAsyncOutgoingTxBatches(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryOutgoingTxBatchesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::QueryOutgoingTxBatchesResponse>>(PrepareAsyncOutgoingTxBatchesRaw(context, request, cq));
    }
    virtual ::grpc::Status LastPendingBatchRequestByAddr(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryLastPendingBatchRequestByAddrRequest& request, ::injective::peggy::v1::QueryLastPendingBatchRequestByAddrResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::QueryLastPendingBatchRequestByAddrResponse>> AsyncLastPendingBatchRequestByAddr(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryLastPendingBatchRequestByAddrRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::QueryLastPendingBatchRequestByAddrResponse>>(AsyncLastPendingBatchRequestByAddrRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::QueryLastPendingBatchRequestByAddrResponse>> PrepareAsyncLastPendingBatchRequestByAddr(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryLastPendingBatchRequestByAddrRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::QueryLastPendingBatchRequestByAddrResponse>>(PrepareAsyncLastPendingBatchRequestByAddrRaw(context, request, cq));
    }
    virtual ::grpc::Status BatchRequestByNonce(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryBatchRequestByNonceRequest& request, ::injective::peggy::v1::QueryBatchRequestByNonceResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::QueryBatchRequestByNonceResponse>> AsyncBatchRequestByNonce(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryBatchRequestByNonceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::QueryBatchRequestByNonceResponse>>(AsyncBatchRequestByNonceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::QueryBatchRequestByNonceResponse>> PrepareAsyncBatchRequestByNonce(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryBatchRequestByNonceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::QueryBatchRequestByNonceResponse>>(PrepareAsyncBatchRequestByNonceRaw(context, request, cq));
    }
    virtual ::grpc::Status BatchConfirms(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryBatchConfirmsRequest& request, ::injective::peggy::v1::QueryBatchConfirmsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::QueryBatchConfirmsResponse>> AsyncBatchConfirms(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryBatchConfirmsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::QueryBatchConfirmsResponse>>(AsyncBatchConfirmsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::QueryBatchConfirmsResponse>> PrepareAsyncBatchConfirms(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryBatchConfirmsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::QueryBatchConfirmsResponse>>(PrepareAsyncBatchConfirmsRaw(context, request, cq));
    }
    virtual ::grpc::Status ERC20ToDenom(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryERC20ToDenomRequest& request, ::injective::peggy::v1::QueryERC20ToDenomResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::QueryERC20ToDenomResponse>> AsyncERC20ToDenom(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryERC20ToDenomRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::QueryERC20ToDenomResponse>>(AsyncERC20ToDenomRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::QueryERC20ToDenomResponse>> PrepareAsyncERC20ToDenom(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryERC20ToDenomRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::QueryERC20ToDenomResponse>>(PrepareAsyncERC20ToDenomRaw(context, request, cq));
    }
    virtual ::grpc::Status DenomToERC20(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryDenomToERC20Request& request, ::injective::peggy::v1::QueryDenomToERC20Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::QueryDenomToERC20Response>> AsyncDenomToERC20(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryDenomToERC20Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::QueryDenomToERC20Response>>(AsyncDenomToERC20Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::QueryDenomToERC20Response>> PrepareAsyncDenomToERC20(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryDenomToERC20Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::QueryDenomToERC20Response>>(PrepareAsyncDenomToERC20Raw(context, request, cq));
    }
    virtual ::grpc::Status GetDelegateKeyByValidator(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryDelegateKeysByValidatorAddress& request, ::injective::peggy::v1::QueryDelegateKeysByValidatorAddressResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::QueryDelegateKeysByValidatorAddressResponse>> AsyncGetDelegateKeyByValidator(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryDelegateKeysByValidatorAddress& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::QueryDelegateKeysByValidatorAddressResponse>>(AsyncGetDelegateKeyByValidatorRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::QueryDelegateKeysByValidatorAddressResponse>> PrepareAsyncGetDelegateKeyByValidator(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryDelegateKeysByValidatorAddress& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::QueryDelegateKeysByValidatorAddressResponse>>(PrepareAsyncGetDelegateKeyByValidatorRaw(context, request, cq));
    }
    virtual ::grpc::Status GetDelegateKeyByEth(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryDelegateKeysByEthAddress& request, ::injective::peggy::v1::QueryDelegateKeysByEthAddressResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::QueryDelegateKeysByEthAddressResponse>> AsyncGetDelegateKeyByEth(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryDelegateKeysByEthAddress& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::QueryDelegateKeysByEthAddressResponse>>(AsyncGetDelegateKeyByEthRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::QueryDelegateKeysByEthAddressResponse>> PrepareAsyncGetDelegateKeyByEth(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryDelegateKeysByEthAddress& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::QueryDelegateKeysByEthAddressResponse>>(PrepareAsyncGetDelegateKeyByEthRaw(context, request, cq));
    }
    virtual ::grpc::Status GetDelegateKeyByOrchestrator(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryDelegateKeysByOrchestratorAddress& request, ::injective::peggy::v1::QueryDelegateKeysByOrchestratorAddressResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::QueryDelegateKeysByOrchestratorAddressResponse>> AsyncGetDelegateKeyByOrchestrator(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryDelegateKeysByOrchestratorAddress& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::QueryDelegateKeysByOrchestratorAddressResponse>>(AsyncGetDelegateKeyByOrchestratorRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::QueryDelegateKeysByOrchestratorAddressResponse>> PrepareAsyncGetDelegateKeyByOrchestrator(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryDelegateKeysByOrchestratorAddress& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::QueryDelegateKeysByOrchestratorAddressResponse>>(PrepareAsyncGetDelegateKeyByOrchestratorRaw(context, request, cq));
    }
    // Retrieves the entire peggy module's state
    virtual ::grpc::Status PeggyModuleState(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryModuleStateRequest& request, ::injective::peggy::v1::QueryModuleStateResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::QueryModuleStateResponse>> AsyncPeggyModuleState(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryModuleStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::QueryModuleStateResponse>>(AsyncPeggyModuleStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::QueryModuleStateResponse>> PrepareAsyncPeggyModuleState(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryModuleStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::QueryModuleStateResponse>>(PrepareAsyncPeggyModuleStateRaw(context, request, cq));
    }
    virtual ::grpc::Status MissingPeggoNonces(::grpc::ClientContext* context, const ::injective::peggy::v1::MissingNoncesRequest& request, ::injective::peggy::v1::MissingNoncesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::MissingNoncesResponse>> AsyncMissingPeggoNonces(::grpc::ClientContext* context, const ::injective::peggy::v1::MissingNoncesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::MissingNoncesResponse>>(AsyncMissingPeggoNoncesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::MissingNoncesResponse>> PrepareAsyncMissingPeggoNonces(::grpc::ClientContext* context, const ::injective::peggy::v1::MissingNoncesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::MissingNoncesResponse>>(PrepareAsyncMissingPeggoNoncesRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Deployments queries deployments
      virtual void Params(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryParamsRequest* request, ::injective::peggy::v1::QueryParamsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Params(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryParamsRequest* request, ::injective::peggy::v1::QueryParamsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // valset
      virtual void CurrentValset(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryCurrentValsetRequest* request, ::injective::peggy::v1::QueryCurrentValsetResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CurrentValset(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryCurrentValsetRequest* request, ::injective::peggy::v1::QueryCurrentValsetResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ValsetRequest(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryValsetRequestRequest* request, ::injective::peggy::v1::QueryValsetRequestResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ValsetRequest(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryValsetRequestRequest* request, ::injective::peggy::v1::QueryValsetRequestResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ValsetConfirm(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryValsetConfirmRequest* request, ::injective::peggy::v1::QueryValsetConfirmResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ValsetConfirm(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryValsetConfirmRequest* request, ::injective::peggy::v1::QueryValsetConfirmResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ValsetConfirmsByNonce(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryValsetConfirmsByNonceRequest* request, ::injective::peggy::v1::QueryValsetConfirmsByNonceResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ValsetConfirmsByNonce(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryValsetConfirmsByNonceRequest* request, ::injective::peggy::v1::QueryValsetConfirmsByNonceResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void LastValsetRequests(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryLastValsetRequestsRequest* request, ::injective::peggy::v1::QueryLastValsetRequestsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void LastValsetRequests(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryLastValsetRequestsRequest* request, ::injective::peggy::v1::QueryLastValsetRequestsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void LastPendingValsetRequestByAddr(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryLastPendingValsetRequestByAddrRequest* request, ::injective::peggy::v1::QueryLastPendingValsetRequestByAddrResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void LastPendingValsetRequestByAddr(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryLastPendingValsetRequestByAddrRequest* request, ::injective::peggy::v1::QueryLastPendingValsetRequestByAddrResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // claim
      virtual void LastEventByAddr(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryLastEventByAddrRequest* request, ::injective::peggy::v1::QueryLastEventByAddrResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void LastEventByAddr(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryLastEventByAddrRequest* request, ::injective::peggy::v1::QueryLastEventByAddrResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // batch
      virtual void GetPendingSendToEth(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryPendingSendToEth* request, ::injective::peggy::v1::QueryPendingSendToEthResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetPendingSendToEth(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryPendingSendToEth* request, ::injective::peggy::v1::QueryPendingSendToEthResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void BatchFees(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryBatchFeeRequest* request, ::injective::peggy::v1::QueryBatchFeeResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void BatchFees(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryBatchFeeRequest* request, ::injective::peggy::v1::QueryBatchFeeResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void OutgoingTxBatches(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryOutgoingTxBatchesRequest* request, ::injective::peggy::v1::QueryOutgoingTxBatchesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void OutgoingTxBatches(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryOutgoingTxBatchesRequest* request, ::injective::peggy::v1::QueryOutgoingTxBatchesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void LastPendingBatchRequestByAddr(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryLastPendingBatchRequestByAddrRequest* request, ::injective::peggy::v1::QueryLastPendingBatchRequestByAddrResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void LastPendingBatchRequestByAddr(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryLastPendingBatchRequestByAddrRequest* request, ::injective::peggy::v1::QueryLastPendingBatchRequestByAddrResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void BatchRequestByNonce(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryBatchRequestByNonceRequest* request, ::injective::peggy::v1::QueryBatchRequestByNonceResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void BatchRequestByNonce(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryBatchRequestByNonceRequest* request, ::injective::peggy::v1::QueryBatchRequestByNonceResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void BatchConfirms(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryBatchConfirmsRequest* request, ::injective::peggy::v1::QueryBatchConfirmsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void BatchConfirms(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryBatchConfirmsRequest* request, ::injective::peggy::v1::QueryBatchConfirmsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ERC20ToDenom(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryERC20ToDenomRequest* request, ::injective::peggy::v1::QueryERC20ToDenomResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ERC20ToDenom(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryERC20ToDenomRequest* request, ::injective::peggy::v1::QueryERC20ToDenomResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DenomToERC20(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryDenomToERC20Request* request, ::injective::peggy::v1::QueryDenomToERC20Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DenomToERC20(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryDenomToERC20Request* request, ::injective::peggy::v1::QueryDenomToERC20Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetDelegateKeyByValidator(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryDelegateKeysByValidatorAddress* request, ::injective::peggy::v1::QueryDelegateKeysByValidatorAddressResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetDelegateKeyByValidator(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryDelegateKeysByValidatorAddress* request, ::injective::peggy::v1::QueryDelegateKeysByValidatorAddressResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetDelegateKeyByEth(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryDelegateKeysByEthAddress* request, ::injective::peggy::v1::QueryDelegateKeysByEthAddressResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetDelegateKeyByEth(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryDelegateKeysByEthAddress* request, ::injective::peggy::v1::QueryDelegateKeysByEthAddressResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetDelegateKeyByOrchestrator(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryDelegateKeysByOrchestratorAddress* request, ::injective::peggy::v1::QueryDelegateKeysByOrchestratorAddressResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetDelegateKeyByOrchestrator(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryDelegateKeysByOrchestratorAddress* request, ::injective::peggy::v1::QueryDelegateKeysByOrchestratorAddressResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Retrieves the entire peggy module's state
      virtual void PeggyModuleState(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryModuleStateRequest* request, ::injective::peggy::v1::QueryModuleStateResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PeggyModuleState(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryModuleStateRequest* request, ::injective::peggy::v1::QueryModuleStateResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void MissingPeggoNonces(::grpc::ClientContext* context, const ::injective::peggy::v1::MissingNoncesRequest* request, ::injective::peggy::v1::MissingNoncesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void MissingPeggoNonces(::grpc::ClientContext* context, const ::injective::peggy::v1::MissingNoncesRequest* request, ::injective::peggy::v1::MissingNoncesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::QueryParamsResponse>* AsyncParamsRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryParamsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::QueryParamsResponse>* PrepareAsyncParamsRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryParamsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::QueryCurrentValsetResponse>* AsyncCurrentValsetRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryCurrentValsetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::QueryCurrentValsetResponse>* PrepareAsyncCurrentValsetRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryCurrentValsetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::QueryValsetRequestResponse>* AsyncValsetRequestRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryValsetRequestRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::QueryValsetRequestResponse>* PrepareAsyncValsetRequestRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryValsetRequestRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::QueryValsetConfirmResponse>* AsyncValsetConfirmRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryValsetConfirmRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::QueryValsetConfirmResponse>* PrepareAsyncValsetConfirmRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryValsetConfirmRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::QueryValsetConfirmsByNonceResponse>* AsyncValsetConfirmsByNonceRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryValsetConfirmsByNonceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::QueryValsetConfirmsByNonceResponse>* PrepareAsyncValsetConfirmsByNonceRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryValsetConfirmsByNonceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::QueryLastValsetRequestsResponse>* AsyncLastValsetRequestsRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryLastValsetRequestsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::QueryLastValsetRequestsResponse>* PrepareAsyncLastValsetRequestsRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryLastValsetRequestsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::QueryLastPendingValsetRequestByAddrResponse>* AsyncLastPendingValsetRequestByAddrRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryLastPendingValsetRequestByAddrRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::QueryLastPendingValsetRequestByAddrResponse>* PrepareAsyncLastPendingValsetRequestByAddrRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryLastPendingValsetRequestByAddrRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::QueryLastEventByAddrResponse>* AsyncLastEventByAddrRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryLastEventByAddrRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::QueryLastEventByAddrResponse>* PrepareAsyncLastEventByAddrRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryLastEventByAddrRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::QueryPendingSendToEthResponse>* AsyncGetPendingSendToEthRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryPendingSendToEth& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::QueryPendingSendToEthResponse>* PrepareAsyncGetPendingSendToEthRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryPendingSendToEth& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::QueryBatchFeeResponse>* AsyncBatchFeesRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryBatchFeeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::QueryBatchFeeResponse>* PrepareAsyncBatchFeesRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryBatchFeeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::QueryOutgoingTxBatchesResponse>* AsyncOutgoingTxBatchesRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryOutgoingTxBatchesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::QueryOutgoingTxBatchesResponse>* PrepareAsyncOutgoingTxBatchesRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryOutgoingTxBatchesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::QueryLastPendingBatchRequestByAddrResponse>* AsyncLastPendingBatchRequestByAddrRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryLastPendingBatchRequestByAddrRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::QueryLastPendingBatchRequestByAddrResponse>* PrepareAsyncLastPendingBatchRequestByAddrRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryLastPendingBatchRequestByAddrRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::QueryBatchRequestByNonceResponse>* AsyncBatchRequestByNonceRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryBatchRequestByNonceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::QueryBatchRequestByNonceResponse>* PrepareAsyncBatchRequestByNonceRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryBatchRequestByNonceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::QueryBatchConfirmsResponse>* AsyncBatchConfirmsRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryBatchConfirmsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::QueryBatchConfirmsResponse>* PrepareAsyncBatchConfirmsRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryBatchConfirmsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::QueryERC20ToDenomResponse>* AsyncERC20ToDenomRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryERC20ToDenomRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::QueryERC20ToDenomResponse>* PrepareAsyncERC20ToDenomRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryERC20ToDenomRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::QueryDenomToERC20Response>* AsyncDenomToERC20Raw(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryDenomToERC20Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::QueryDenomToERC20Response>* PrepareAsyncDenomToERC20Raw(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryDenomToERC20Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::QueryDelegateKeysByValidatorAddressResponse>* AsyncGetDelegateKeyByValidatorRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryDelegateKeysByValidatorAddress& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::QueryDelegateKeysByValidatorAddressResponse>* PrepareAsyncGetDelegateKeyByValidatorRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryDelegateKeysByValidatorAddress& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::QueryDelegateKeysByEthAddressResponse>* AsyncGetDelegateKeyByEthRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryDelegateKeysByEthAddress& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::QueryDelegateKeysByEthAddressResponse>* PrepareAsyncGetDelegateKeyByEthRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryDelegateKeysByEthAddress& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::QueryDelegateKeysByOrchestratorAddressResponse>* AsyncGetDelegateKeyByOrchestratorRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryDelegateKeysByOrchestratorAddress& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::QueryDelegateKeysByOrchestratorAddressResponse>* PrepareAsyncGetDelegateKeyByOrchestratorRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryDelegateKeysByOrchestratorAddress& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::QueryModuleStateResponse>* AsyncPeggyModuleStateRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryModuleStateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::QueryModuleStateResponse>* PrepareAsyncPeggyModuleStateRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryModuleStateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::MissingNoncesResponse>* AsyncMissingPeggoNoncesRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::MissingNoncesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::MissingNoncesResponse>* PrepareAsyncMissingPeggoNoncesRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::MissingNoncesRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status Params(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryParamsRequest& request, ::injective::peggy::v1::QueryParamsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryParamsResponse>> AsyncParams(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryParamsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryParamsResponse>>(AsyncParamsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryParamsResponse>> PrepareAsyncParams(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryParamsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryParamsResponse>>(PrepareAsyncParamsRaw(context, request, cq));
    }
    ::grpc::Status CurrentValset(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryCurrentValsetRequest& request, ::injective::peggy::v1::QueryCurrentValsetResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryCurrentValsetResponse>> AsyncCurrentValset(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryCurrentValsetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryCurrentValsetResponse>>(AsyncCurrentValsetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryCurrentValsetResponse>> PrepareAsyncCurrentValset(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryCurrentValsetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryCurrentValsetResponse>>(PrepareAsyncCurrentValsetRaw(context, request, cq));
    }
    ::grpc::Status ValsetRequest(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryValsetRequestRequest& request, ::injective::peggy::v1::QueryValsetRequestResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryValsetRequestResponse>> AsyncValsetRequest(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryValsetRequestRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryValsetRequestResponse>>(AsyncValsetRequestRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryValsetRequestResponse>> PrepareAsyncValsetRequest(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryValsetRequestRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryValsetRequestResponse>>(PrepareAsyncValsetRequestRaw(context, request, cq));
    }
    ::grpc::Status ValsetConfirm(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryValsetConfirmRequest& request, ::injective::peggy::v1::QueryValsetConfirmResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryValsetConfirmResponse>> AsyncValsetConfirm(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryValsetConfirmRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryValsetConfirmResponse>>(AsyncValsetConfirmRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryValsetConfirmResponse>> PrepareAsyncValsetConfirm(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryValsetConfirmRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryValsetConfirmResponse>>(PrepareAsyncValsetConfirmRaw(context, request, cq));
    }
    ::grpc::Status ValsetConfirmsByNonce(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryValsetConfirmsByNonceRequest& request, ::injective::peggy::v1::QueryValsetConfirmsByNonceResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryValsetConfirmsByNonceResponse>> AsyncValsetConfirmsByNonce(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryValsetConfirmsByNonceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryValsetConfirmsByNonceResponse>>(AsyncValsetConfirmsByNonceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryValsetConfirmsByNonceResponse>> PrepareAsyncValsetConfirmsByNonce(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryValsetConfirmsByNonceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryValsetConfirmsByNonceResponse>>(PrepareAsyncValsetConfirmsByNonceRaw(context, request, cq));
    }
    ::grpc::Status LastValsetRequests(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryLastValsetRequestsRequest& request, ::injective::peggy::v1::QueryLastValsetRequestsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryLastValsetRequestsResponse>> AsyncLastValsetRequests(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryLastValsetRequestsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryLastValsetRequestsResponse>>(AsyncLastValsetRequestsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryLastValsetRequestsResponse>> PrepareAsyncLastValsetRequests(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryLastValsetRequestsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryLastValsetRequestsResponse>>(PrepareAsyncLastValsetRequestsRaw(context, request, cq));
    }
    ::grpc::Status LastPendingValsetRequestByAddr(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryLastPendingValsetRequestByAddrRequest& request, ::injective::peggy::v1::QueryLastPendingValsetRequestByAddrResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryLastPendingValsetRequestByAddrResponse>> AsyncLastPendingValsetRequestByAddr(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryLastPendingValsetRequestByAddrRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryLastPendingValsetRequestByAddrResponse>>(AsyncLastPendingValsetRequestByAddrRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryLastPendingValsetRequestByAddrResponse>> PrepareAsyncLastPendingValsetRequestByAddr(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryLastPendingValsetRequestByAddrRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryLastPendingValsetRequestByAddrResponse>>(PrepareAsyncLastPendingValsetRequestByAddrRaw(context, request, cq));
    }
    ::grpc::Status LastEventByAddr(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryLastEventByAddrRequest& request, ::injective::peggy::v1::QueryLastEventByAddrResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryLastEventByAddrResponse>> AsyncLastEventByAddr(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryLastEventByAddrRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryLastEventByAddrResponse>>(AsyncLastEventByAddrRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryLastEventByAddrResponse>> PrepareAsyncLastEventByAddr(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryLastEventByAddrRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryLastEventByAddrResponse>>(PrepareAsyncLastEventByAddrRaw(context, request, cq));
    }
    ::grpc::Status GetPendingSendToEth(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryPendingSendToEth& request, ::injective::peggy::v1::QueryPendingSendToEthResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryPendingSendToEthResponse>> AsyncGetPendingSendToEth(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryPendingSendToEth& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryPendingSendToEthResponse>>(AsyncGetPendingSendToEthRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryPendingSendToEthResponse>> PrepareAsyncGetPendingSendToEth(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryPendingSendToEth& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryPendingSendToEthResponse>>(PrepareAsyncGetPendingSendToEthRaw(context, request, cq));
    }
    ::grpc::Status BatchFees(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryBatchFeeRequest& request, ::injective::peggy::v1::QueryBatchFeeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryBatchFeeResponse>> AsyncBatchFees(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryBatchFeeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryBatchFeeResponse>>(AsyncBatchFeesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryBatchFeeResponse>> PrepareAsyncBatchFees(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryBatchFeeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryBatchFeeResponse>>(PrepareAsyncBatchFeesRaw(context, request, cq));
    }
    ::grpc::Status OutgoingTxBatches(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryOutgoingTxBatchesRequest& request, ::injective::peggy::v1::QueryOutgoingTxBatchesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryOutgoingTxBatchesResponse>> AsyncOutgoingTxBatches(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryOutgoingTxBatchesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryOutgoingTxBatchesResponse>>(AsyncOutgoingTxBatchesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryOutgoingTxBatchesResponse>> PrepareAsyncOutgoingTxBatches(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryOutgoingTxBatchesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryOutgoingTxBatchesResponse>>(PrepareAsyncOutgoingTxBatchesRaw(context, request, cq));
    }
    ::grpc::Status LastPendingBatchRequestByAddr(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryLastPendingBatchRequestByAddrRequest& request, ::injective::peggy::v1::QueryLastPendingBatchRequestByAddrResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryLastPendingBatchRequestByAddrResponse>> AsyncLastPendingBatchRequestByAddr(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryLastPendingBatchRequestByAddrRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryLastPendingBatchRequestByAddrResponse>>(AsyncLastPendingBatchRequestByAddrRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryLastPendingBatchRequestByAddrResponse>> PrepareAsyncLastPendingBatchRequestByAddr(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryLastPendingBatchRequestByAddrRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryLastPendingBatchRequestByAddrResponse>>(PrepareAsyncLastPendingBatchRequestByAddrRaw(context, request, cq));
    }
    ::grpc::Status BatchRequestByNonce(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryBatchRequestByNonceRequest& request, ::injective::peggy::v1::QueryBatchRequestByNonceResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryBatchRequestByNonceResponse>> AsyncBatchRequestByNonce(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryBatchRequestByNonceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryBatchRequestByNonceResponse>>(AsyncBatchRequestByNonceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryBatchRequestByNonceResponse>> PrepareAsyncBatchRequestByNonce(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryBatchRequestByNonceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryBatchRequestByNonceResponse>>(PrepareAsyncBatchRequestByNonceRaw(context, request, cq));
    }
    ::grpc::Status BatchConfirms(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryBatchConfirmsRequest& request, ::injective::peggy::v1::QueryBatchConfirmsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryBatchConfirmsResponse>> AsyncBatchConfirms(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryBatchConfirmsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryBatchConfirmsResponse>>(AsyncBatchConfirmsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryBatchConfirmsResponse>> PrepareAsyncBatchConfirms(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryBatchConfirmsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryBatchConfirmsResponse>>(PrepareAsyncBatchConfirmsRaw(context, request, cq));
    }
    ::grpc::Status ERC20ToDenom(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryERC20ToDenomRequest& request, ::injective::peggy::v1::QueryERC20ToDenomResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryERC20ToDenomResponse>> AsyncERC20ToDenom(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryERC20ToDenomRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryERC20ToDenomResponse>>(AsyncERC20ToDenomRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryERC20ToDenomResponse>> PrepareAsyncERC20ToDenom(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryERC20ToDenomRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryERC20ToDenomResponse>>(PrepareAsyncERC20ToDenomRaw(context, request, cq));
    }
    ::grpc::Status DenomToERC20(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryDenomToERC20Request& request, ::injective::peggy::v1::QueryDenomToERC20Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryDenomToERC20Response>> AsyncDenomToERC20(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryDenomToERC20Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryDenomToERC20Response>>(AsyncDenomToERC20Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryDenomToERC20Response>> PrepareAsyncDenomToERC20(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryDenomToERC20Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryDenomToERC20Response>>(PrepareAsyncDenomToERC20Raw(context, request, cq));
    }
    ::grpc::Status GetDelegateKeyByValidator(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryDelegateKeysByValidatorAddress& request, ::injective::peggy::v1::QueryDelegateKeysByValidatorAddressResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryDelegateKeysByValidatorAddressResponse>> AsyncGetDelegateKeyByValidator(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryDelegateKeysByValidatorAddress& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryDelegateKeysByValidatorAddressResponse>>(AsyncGetDelegateKeyByValidatorRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryDelegateKeysByValidatorAddressResponse>> PrepareAsyncGetDelegateKeyByValidator(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryDelegateKeysByValidatorAddress& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryDelegateKeysByValidatorAddressResponse>>(PrepareAsyncGetDelegateKeyByValidatorRaw(context, request, cq));
    }
    ::grpc::Status GetDelegateKeyByEth(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryDelegateKeysByEthAddress& request, ::injective::peggy::v1::QueryDelegateKeysByEthAddressResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryDelegateKeysByEthAddressResponse>> AsyncGetDelegateKeyByEth(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryDelegateKeysByEthAddress& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryDelegateKeysByEthAddressResponse>>(AsyncGetDelegateKeyByEthRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryDelegateKeysByEthAddressResponse>> PrepareAsyncGetDelegateKeyByEth(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryDelegateKeysByEthAddress& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryDelegateKeysByEthAddressResponse>>(PrepareAsyncGetDelegateKeyByEthRaw(context, request, cq));
    }
    ::grpc::Status GetDelegateKeyByOrchestrator(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryDelegateKeysByOrchestratorAddress& request, ::injective::peggy::v1::QueryDelegateKeysByOrchestratorAddressResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryDelegateKeysByOrchestratorAddressResponse>> AsyncGetDelegateKeyByOrchestrator(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryDelegateKeysByOrchestratorAddress& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryDelegateKeysByOrchestratorAddressResponse>>(AsyncGetDelegateKeyByOrchestratorRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryDelegateKeysByOrchestratorAddressResponse>> PrepareAsyncGetDelegateKeyByOrchestrator(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryDelegateKeysByOrchestratorAddress& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryDelegateKeysByOrchestratorAddressResponse>>(PrepareAsyncGetDelegateKeyByOrchestratorRaw(context, request, cq));
    }
    ::grpc::Status PeggyModuleState(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryModuleStateRequest& request, ::injective::peggy::v1::QueryModuleStateResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryModuleStateResponse>> AsyncPeggyModuleState(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryModuleStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryModuleStateResponse>>(AsyncPeggyModuleStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryModuleStateResponse>> PrepareAsyncPeggyModuleState(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryModuleStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryModuleStateResponse>>(PrepareAsyncPeggyModuleStateRaw(context, request, cq));
    }
    ::grpc::Status MissingPeggoNonces(::grpc::ClientContext* context, const ::injective::peggy::v1::MissingNoncesRequest& request, ::injective::peggy::v1::MissingNoncesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::MissingNoncesResponse>> AsyncMissingPeggoNonces(::grpc::ClientContext* context, const ::injective::peggy::v1::MissingNoncesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::MissingNoncesResponse>>(AsyncMissingPeggoNoncesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::MissingNoncesResponse>> PrepareAsyncMissingPeggoNonces(::grpc::ClientContext* context, const ::injective::peggy::v1::MissingNoncesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::MissingNoncesResponse>>(PrepareAsyncMissingPeggoNoncesRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Params(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryParamsRequest* request, ::injective::peggy::v1::QueryParamsResponse* response, std::function<void(::grpc::Status)>) override;
      void Params(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryParamsRequest* request, ::injective::peggy::v1::QueryParamsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CurrentValset(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryCurrentValsetRequest* request, ::injective::peggy::v1::QueryCurrentValsetResponse* response, std::function<void(::grpc::Status)>) override;
      void CurrentValset(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryCurrentValsetRequest* request, ::injective::peggy::v1::QueryCurrentValsetResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ValsetRequest(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryValsetRequestRequest* request, ::injective::peggy::v1::QueryValsetRequestResponse* response, std::function<void(::grpc::Status)>) override;
      void ValsetRequest(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryValsetRequestRequest* request, ::injective::peggy::v1::QueryValsetRequestResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ValsetConfirm(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryValsetConfirmRequest* request, ::injective::peggy::v1::QueryValsetConfirmResponse* response, std::function<void(::grpc::Status)>) override;
      void ValsetConfirm(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryValsetConfirmRequest* request, ::injective::peggy::v1::QueryValsetConfirmResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ValsetConfirmsByNonce(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryValsetConfirmsByNonceRequest* request, ::injective::peggy::v1::QueryValsetConfirmsByNonceResponse* response, std::function<void(::grpc::Status)>) override;
      void ValsetConfirmsByNonce(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryValsetConfirmsByNonceRequest* request, ::injective::peggy::v1::QueryValsetConfirmsByNonceResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void LastValsetRequests(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryLastValsetRequestsRequest* request, ::injective::peggy::v1::QueryLastValsetRequestsResponse* response, std::function<void(::grpc::Status)>) override;
      void LastValsetRequests(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryLastValsetRequestsRequest* request, ::injective::peggy::v1::QueryLastValsetRequestsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void LastPendingValsetRequestByAddr(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryLastPendingValsetRequestByAddrRequest* request, ::injective::peggy::v1::QueryLastPendingValsetRequestByAddrResponse* response, std::function<void(::grpc::Status)>) override;
      void LastPendingValsetRequestByAddr(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryLastPendingValsetRequestByAddrRequest* request, ::injective::peggy::v1::QueryLastPendingValsetRequestByAddrResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void LastEventByAddr(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryLastEventByAddrRequest* request, ::injective::peggy::v1::QueryLastEventByAddrResponse* response, std::function<void(::grpc::Status)>) override;
      void LastEventByAddr(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryLastEventByAddrRequest* request, ::injective::peggy::v1::QueryLastEventByAddrResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetPendingSendToEth(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryPendingSendToEth* request, ::injective::peggy::v1::QueryPendingSendToEthResponse* response, std::function<void(::grpc::Status)>) override;
      void GetPendingSendToEth(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryPendingSendToEth* request, ::injective::peggy::v1::QueryPendingSendToEthResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void BatchFees(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryBatchFeeRequest* request, ::injective::peggy::v1::QueryBatchFeeResponse* response, std::function<void(::grpc::Status)>) override;
      void BatchFees(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryBatchFeeRequest* request, ::injective::peggy::v1::QueryBatchFeeResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void OutgoingTxBatches(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryOutgoingTxBatchesRequest* request, ::injective::peggy::v1::QueryOutgoingTxBatchesResponse* response, std::function<void(::grpc::Status)>) override;
      void OutgoingTxBatches(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryOutgoingTxBatchesRequest* request, ::injective::peggy::v1::QueryOutgoingTxBatchesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void LastPendingBatchRequestByAddr(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryLastPendingBatchRequestByAddrRequest* request, ::injective::peggy::v1::QueryLastPendingBatchRequestByAddrResponse* response, std::function<void(::grpc::Status)>) override;
      void LastPendingBatchRequestByAddr(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryLastPendingBatchRequestByAddrRequest* request, ::injective::peggy::v1::QueryLastPendingBatchRequestByAddrResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void BatchRequestByNonce(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryBatchRequestByNonceRequest* request, ::injective::peggy::v1::QueryBatchRequestByNonceResponse* response, std::function<void(::grpc::Status)>) override;
      void BatchRequestByNonce(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryBatchRequestByNonceRequest* request, ::injective::peggy::v1::QueryBatchRequestByNonceResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void BatchConfirms(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryBatchConfirmsRequest* request, ::injective::peggy::v1::QueryBatchConfirmsResponse* response, std::function<void(::grpc::Status)>) override;
      void BatchConfirms(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryBatchConfirmsRequest* request, ::injective::peggy::v1::QueryBatchConfirmsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ERC20ToDenom(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryERC20ToDenomRequest* request, ::injective::peggy::v1::QueryERC20ToDenomResponse* response, std::function<void(::grpc::Status)>) override;
      void ERC20ToDenom(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryERC20ToDenomRequest* request, ::injective::peggy::v1::QueryERC20ToDenomResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DenomToERC20(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryDenomToERC20Request* request, ::injective::peggy::v1::QueryDenomToERC20Response* response, std::function<void(::grpc::Status)>) override;
      void DenomToERC20(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryDenomToERC20Request* request, ::injective::peggy::v1::QueryDenomToERC20Response* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetDelegateKeyByValidator(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryDelegateKeysByValidatorAddress* request, ::injective::peggy::v1::QueryDelegateKeysByValidatorAddressResponse* response, std::function<void(::grpc::Status)>) override;
      void GetDelegateKeyByValidator(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryDelegateKeysByValidatorAddress* request, ::injective::peggy::v1::QueryDelegateKeysByValidatorAddressResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetDelegateKeyByEth(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryDelegateKeysByEthAddress* request, ::injective::peggy::v1::QueryDelegateKeysByEthAddressResponse* response, std::function<void(::grpc::Status)>) override;
      void GetDelegateKeyByEth(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryDelegateKeysByEthAddress* request, ::injective::peggy::v1::QueryDelegateKeysByEthAddressResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetDelegateKeyByOrchestrator(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryDelegateKeysByOrchestratorAddress* request, ::injective::peggy::v1::QueryDelegateKeysByOrchestratorAddressResponse* response, std::function<void(::grpc::Status)>) override;
      void GetDelegateKeyByOrchestrator(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryDelegateKeysByOrchestratorAddress* request, ::injective::peggy::v1::QueryDelegateKeysByOrchestratorAddressResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void PeggyModuleState(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryModuleStateRequest* request, ::injective::peggy::v1::QueryModuleStateResponse* response, std::function<void(::grpc::Status)>) override;
      void PeggyModuleState(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryModuleStateRequest* request, ::injective::peggy::v1::QueryModuleStateResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void MissingPeggoNonces(::grpc::ClientContext* context, const ::injective::peggy::v1::MissingNoncesRequest* request, ::injective::peggy::v1::MissingNoncesResponse* response, std::function<void(::grpc::Status)>) override;
      void MissingPeggoNonces(::grpc::ClientContext* context, const ::injective::peggy::v1::MissingNoncesRequest* request, ::injective::peggy::v1::MissingNoncesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryParamsResponse>* AsyncParamsRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryParamsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryParamsResponse>* PrepareAsyncParamsRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryParamsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryCurrentValsetResponse>* AsyncCurrentValsetRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryCurrentValsetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryCurrentValsetResponse>* PrepareAsyncCurrentValsetRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryCurrentValsetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryValsetRequestResponse>* AsyncValsetRequestRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryValsetRequestRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryValsetRequestResponse>* PrepareAsyncValsetRequestRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryValsetRequestRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryValsetConfirmResponse>* AsyncValsetConfirmRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryValsetConfirmRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryValsetConfirmResponse>* PrepareAsyncValsetConfirmRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryValsetConfirmRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryValsetConfirmsByNonceResponse>* AsyncValsetConfirmsByNonceRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryValsetConfirmsByNonceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryValsetConfirmsByNonceResponse>* PrepareAsyncValsetConfirmsByNonceRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryValsetConfirmsByNonceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryLastValsetRequestsResponse>* AsyncLastValsetRequestsRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryLastValsetRequestsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryLastValsetRequestsResponse>* PrepareAsyncLastValsetRequestsRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryLastValsetRequestsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryLastPendingValsetRequestByAddrResponse>* AsyncLastPendingValsetRequestByAddrRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryLastPendingValsetRequestByAddrRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryLastPendingValsetRequestByAddrResponse>* PrepareAsyncLastPendingValsetRequestByAddrRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryLastPendingValsetRequestByAddrRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryLastEventByAddrResponse>* AsyncLastEventByAddrRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryLastEventByAddrRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryLastEventByAddrResponse>* PrepareAsyncLastEventByAddrRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryLastEventByAddrRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryPendingSendToEthResponse>* AsyncGetPendingSendToEthRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryPendingSendToEth& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryPendingSendToEthResponse>* PrepareAsyncGetPendingSendToEthRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryPendingSendToEth& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryBatchFeeResponse>* AsyncBatchFeesRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryBatchFeeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryBatchFeeResponse>* PrepareAsyncBatchFeesRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryBatchFeeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryOutgoingTxBatchesResponse>* AsyncOutgoingTxBatchesRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryOutgoingTxBatchesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryOutgoingTxBatchesResponse>* PrepareAsyncOutgoingTxBatchesRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryOutgoingTxBatchesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryLastPendingBatchRequestByAddrResponse>* AsyncLastPendingBatchRequestByAddrRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryLastPendingBatchRequestByAddrRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryLastPendingBatchRequestByAddrResponse>* PrepareAsyncLastPendingBatchRequestByAddrRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryLastPendingBatchRequestByAddrRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryBatchRequestByNonceResponse>* AsyncBatchRequestByNonceRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryBatchRequestByNonceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryBatchRequestByNonceResponse>* PrepareAsyncBatchRequestByNonceRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryBatchRequestByNonceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryBatchConfirmsResponse>* AsyncBatchConfirmsRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryBatchConfirmsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryBatchConfirmsResponse>* PrepareAsyncBatchConfirmsRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryBatchConfirmsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryERC20ToDenomResponse>* AsyncERC20ToDenomRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryERC20ToDenomRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryERC20ToDenomResponse>* PrepareAsyncERC20ToDenomRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryERC20ToDenomRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryDenomToERC20Response>* AsyncDenomToERC20Raw(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryDenomToERC20Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryDenomToERC20Response>* PrepareAsyncDenomToERC20Raw(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryDenomToERC20Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryDelegateKeysByValidatorAddressResponse>* AsyncGetDelegateKeyByValidatorRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryDelegateKeysByValidatorAddress& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryDelegateKeysByValidatorAddressResponse>* PrepareAsyncGetDelegateKeyByValidatorRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryDelegateKeysByValidatorAddress& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryDelegateKeysByEthAddressResponse>* AsyncGetDelegateKeyByEthRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryDelegateKeysByEthAddress& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryDelegateKeysByEthAddressResponse>* PrepareAsyncGetDelegateKeyByEthRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryDelegateKeysByEthAddress& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryDelegateKeysByOrchestratorAddressResponse>* AsyncGetDelegateKeyByOrchestratorRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryDelegateKeysByOrchestratorAddress& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryDelegateKeysByOrchestratorAddressResponse>* PrepareAsyncGetDelegateKeyByOrchestratorRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryDelegateKeysByOrchestratorAddress& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryModuleStateResponse>* AsyncPeggyModuleStateRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryModuleStateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::QueryModuleStateResponse>* PrepareAsyncPeggyModuleStateRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::QueryModuleStateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::MissingNoncesResponse>* AsyncMissingPeggoNoncesRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::MissingNoncesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::MissingNoncesResponse>* PrepareAsyncMissingPeggoNoncesRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::MissingNoncesRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Params_;
    const ::grpc::internal::RpcMethod rpcmethod_CurrentValset_;
    const ::grpc::internal::RpcMethod rpcmethod_ValsetRequest_;
    const ::grpc::internal::RpcMethod rpcmethod_ValsetConfirm_;
    const ::grpc::internal::RpcMethod rpcmethod_ValsetConfirmsByNonce_;
    const ::grpc::internal::RpcMethod rpcmethod_LastValsetRequests_;
    const ::grpc::internal::RpcMethod rpcmethod_LastPendingValsetRequestByAddr_;
    const ::grpc::internal::RpcMethod rpcmethod_LastEventByAddr_;
    const ::grpc::internal::RpcMethod rpcmethod_GetPendingSendToEth_;
    const ::grpc::internal::RpcMethod rpcmethod_BatchFees_;
    const ::grpc::internal::RpcMethod rpcmethod_OutgoingTxBatches_;
    const ::grpc::internal::RpcMethod rpcmethod_LastPendingBatchRequestByAddr_;
    const ::grpc::internal::RpcMethod rpcmethod_BatchRequestByNonce_;
    const ::grpc::internal::RpcMethod rpcmethod_BatchConfirms_;
    const ::grpc::internal::RpcMethod rpcmethod_ERC20ToDenom_;
    const ::grpc::internal::RpcMethod rpcmethod_DenomToERC20_;
    const ::grpc::internal::RpcMethod rpcmethod_GetDelegateKeyByValidator_;
    const ::grpc::internal::RpcMethod rpcmethod_GetDelegateKeyByEth_;
    const ::grpc::internal::RpcMethod rpcmethod_GetDelegateKeyByOrchestrator_;
    const ::grpc::internal::RpcMethod rpcmethod_PeggyModuleState_;
    const ::grpc::internal::RpcMethod rpcmethod_MissingPeggoNonces_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Deployments queries deployments
    virtual ::grpc::Status Params(::grpc::ServerContext* context, const ::injective::peggy::v1::QueryParamsRequest* request, ::injective::peggy::v1::QueryParamsResponse* response);
    // valset
    virtual ::grpc::Status CurrentValset(::grpc::ServerContext* context, const ::injective::peggy::v1::QueryCurrentValsetRequest* request, ::injective::peggy::v1::QueryCurrentValsetResponse* response);
    virtual ::grpc::Status ValsetRequest(::grpc::ServerContext* context, const ::injective::peggy::v1::QueryValsetRequestRequest* request, ::injective::peggy::v1::QueryValsetRequestResponse* response);
    virtual ::grpc::Status ValsetConfirm(::grpc::ServerContext* context, const ::injective::peggy::v1::QueryValsetConfirmRequest* request, ::injective::peggy::v1::QueryValsetConfirmResponse* response);
    virtual ::grpc::Status ValsetConfirmsByNonce(::grpc::ServerContext* context, const ::injective::peggy::v1::QueryValsetConfirmsByNonceRequest* request, ::injective::peggy::v1::QueryValsetConfirmsByNonceResponse* response);
    virtual ::grpc::Status LastValsetRequests(::grpc::ServerContext* context, const ::injective::peggy::v1::QueryLastValsetRequestsRequest* request, ::injective::peggy::v1::QueryLastValsetRequestsResponse* response);
    virtual ::grpc::Status LastPendingValsetRequestByAddr(::grpc::ServerContext* context, const ::injective::peggy::v1::QueryLastPendingValsetRequestByAddrRequest* request, ::injective::peggy::v1::QueryLastPendingValsetRequestByAddrResponse* response);
    // claim
    virtual ::grpc::Status LastEventByAddr(::grpc::ServerContext* context, const ::injective::peggy::v1::QueryLastEventByAddrRequest* request, ::injective::peggy::v1::QueryLastEventByAddrResponse* response);
    // batch
    virtual ::grpc::Status GetPendingSendToEth(::grpc::ServerContext* context, const ::injective::peggy::v1::QueryPendingSendToEth* request, ::injective::peggy::v1::QueryPendingSendToEthResponse* response);
    virtual ::grpc::Status BatchFees(::grpc::ServerContext* context, const ::injective::peggy::v1::QueryBatchFeeRequest* request, ::injective::peggy::v1::QueryBatchFeeResponse* response);
    virtual ::grpc::Status OutgoingTxBatches(::grpc::ServerContext* context, const ::injective::peggy::v1::QueryOutgoingTxBatchesRequest* request, ::injective::peggy::v1::QueryOutgoingTxBatchesResponse* response);
    virtual ::grpc::Status LastPendingBatchRequestByAddr(::grpc::ServerContext* context, const ::injective::peggy::v1::QueryLastPendingBatchRequestByAddrRequest* request, ::injective::peggy::v1::QueryLastPendingBatchRequestByAddrResponse* response);
    virtual ::grpc::Status BatchRequestByNonce(::grpc::ServerContext* context, const ::injective::peggy::v1::QueryBatchRequestByNonceRequest* request, ::injective::peggy::v1::QueryBatchRequestByNonceResponse* response);
    virtual ::grpc::Status BatchConfirms(::grpc::ServerContext* context, const ::injective::peggy::v1::QueryBatchConfirmsRequest* request, ::injective::peggy::v1::QueryBatchConfirmsResponse* response);
    virtual ::grpc::Status ERC20ToDenom(::grpc::ServerContext* context, const ::injective::peggy::v1::QueryERC20ToDenomRequest* request, ::injective::peggy::v1::QueryERC20ToDenomResponse* response);
    virtual ::grpc::Status DenomToERC20(::grpc::ServerContext* context, const ::injective::peggy::v1::QueryDenomToERC20Request* request, ::injective::peggy::v1::QueryDenomToERC20Response* response);
    virtual ::grpc::Status GetDelegateKeyByValidator(::grpc::ServerContext* context, const ::injective::peggy::v1::QueryDelegateKeysByValidatorAddress* request, ::injective::peggy::v1::QueryDelegateKeysByValidatorAddressResponse* response);
    virtual ::grpc::Status GetDelegateKeyByEth(::grpc::ServerContext* context, const ::injective::peggy::v1::QueryDelegateKeysByEthAddress* request, ::injective::peggy::v1::QueryDelegateKeysByEthAddressResponse* response);
    virtual ::grpc::Status GetDelegateKeyByOrchestrator(::grpc::ServerContext* context, const ::injective::peggy::v1::QueryDelegateKeysByOrchestratorAddress* request, ::injective::peggy::v1::QueryDelegateKeysByOrchestratorAddressResponse* response);
    // Retrieves the entire peggy module's state
    virtual ::grpc::Status PeggyModuleState(::grpc::ServerContext* context, const ::injective::peggy::v1::QueryModuleStateRequest* request, ::injective::peggy::v1::QueryModuleStateResponse* response);
    virtual ::grpc::Status MissingPeggoNonces(::grpc::ServerContext* context, const ::injective::peggy::v1::MissingNoncesRequest* request, ::injective::peggy::v1::MissingNoncesResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Params : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Params() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Params() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Params(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::QueryParamsRequest* /*request*/, ::injective::peggy::v1::QueryParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestParams(::grpc::ServerContext* context, ::injective::peggy::v1::QueryParamsRequest* request, ::grpc::ServerAsyncResponseWriter< ::injective::peggy::v1::QueryParamsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CurrentValset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CurrentValset() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_CurrentValset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CurrentValset(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::QueryCurrentValsetRequest* /*request*/, ::injective::peggy::v1::QueryCurrentValsetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCurrentValset(::grpc::ServerContext* context, ::injective::peggy::v1::QueryCurrentValsetRequest* request, ::grpc::ServerAsyncResponseWriter< ::injective::peggy::v1::QueryCurrentValsetResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ValsetRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ValsetRequest() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_ValsetRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValsetRequest(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::QueryValsetRequestRequest* /*request*/, ::injective::peggy::v1::QueryValsetRequestResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestValsetRequest(::grpc::ServerContext* context, ::injective::peggy::v1::QueryValsetRequestRequest* request, ::grpc::ServerAsyncResponseWriter< ::injective::peggy::v1::QueryValsetRequestResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ValsetConfirm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ValsetConfirm() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_ValsetConfirm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValsetConfirm(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::QueryValsetConfirmRequest* /*request*/, ::injective::peggy::v1::QueryValsetConfirmResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestValsetConfirm(::grpc::ServerContext* context, ::injective::peggy::v1::QueryValsetConfirmRequest* request, ::grpc::ServerAsyncResponseWriter< ::injective::peggy::v1::QueryValsetConfirmResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ValsetConfirmsByNonce : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ValsetConfirmsByNonce() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_ValsetConfirmsByNonce() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValsetConfirmsByNonce(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::QueryValsetConfirmsByNonceRequest* /*request*/, ::injective::peggy::v1::QueryValsetConfirmsByNonceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestValsetConfirmsByNonce(::grpc::ServerContext* context, ::injective::peggy::v1::QueryValsetConfirmsByNonceRequest* request, ::grpc::ServerAsyncResponseWriter< ::injective::peggy::v1::QueryValsetConfirmsByNonceResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_LastValsetRequests : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_LastValsetRequests() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_LastValsetRequests() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LastValsetRequests(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::QueryLastValsetRequestsRequest* /*request*/, ::injective::peggy::v1::QueryLastValsetRequestsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLastValsetRequests(::grpc::ServerContext* context, ::injective::peggy::v1::QueryLastValsetRequestsRequest* request, ::grpc::ServerAsyncResponseWriter< ::injective::peggy::v1::QueryLastValsetRequestsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_LastPendingValsetRequestByAddr : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_LastPendingValsetRequestByAddr() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_LastPendingValsetRequestByAddr() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LastPendingValsetRequestByAddr(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::QueryLastPendingValsetRequestByAddrRequest* /*request*/, ::injective::peggy::v1::QueryLastPendingValsetRequestByAddrResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLastPendingValsetRequestByAddr(::grpc::ServerContext* context, ::injective::peggy::v1::QueryLastPendingValsetRequestByAddrRequest* request, ::grpc::ServerAsyncResponseWriter< ::injective::peggy::v1::QueryLastPendingValsetRequestByAddrResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_LastEventByAddr : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_LastEventByAddr() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_LastEventByAddr() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LastEventByAddr(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::QueryLastEventByAddrRequest* /*request*/, ::injective::peggy::v1::QueryLastEventByAddrResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLastEventByAddr(::grpc::ServerContext* context, ::injective::peggy::v1::QueryLastEventByAddrRequest* request, ::grpc::ServerAsyncResponseWriter< ::injective::peggy::v1::QueryLastEventByAddrResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetPendingSendToEth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetPendingSendToEth() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_GetPendingSendToEth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPendingSendToEth(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::QueryPendingSendToEth* /*request*/, ::injective::peggy::v1::QueryPendingSendToEthResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPendingSendToEth(::grpc::ServerContext* context, ::injective::peggy::v1::QueryPendingSendToEth* request, ::grpc::ServerAsyncResponseWriter< ::injective::peggy::v1::QueryPendingSendToEthResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_BatchFees : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_BatchFees() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_BatchFees() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BatchFees(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::QueryBatchFeeRequest* /*request*/, ::injective::peggy::v1::QueryBatchFeeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBatchFees(::grpc::ServerContext* context, ::injective::peggy::v1::QueryBatchFeeRequest* request, ::grpc::ServerAsyncResponseWriter< ::injective::peggy::v1::QueryBatchFeeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_OutgoingTxBatches : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_OutgoingTxBatches() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_OutgoingTxBatches() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OutgoingTxBatches(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::QueryOutgoingTxBatchesRequest* /*request*/, ::injective::peggy::v1::QueryOutgoingTxBatchesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOutgoingTxBatches(::grpc::ServerContext* context, ::injective::peggy::v1::QueryOutgoingTxBatchesRequest* request, ::grpc::ServerAsyncResponseWriter< ::injective::peggy::v1::QueryOutgoingTxBatchesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_LastPendingBatchRequestByAddr : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_LastPendingBatchRequestByAddr() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_LastPendingBatchRequestByAddr() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LastPendingBatchRequestByAddr(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::QueryLastPendingBatchRequestByAddrRequest* /*request*/, ::injective::peggy::v1::QueryLastPendingBatchRequestByAddrResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLastPendingBatchRequestByAddr(::grpc::ServerContext* context, ::injective::peggy::v1::QueryLastPendingBatchRequestByAddrRequest* request, ::grpc::ServerAsyncResponseWriter< ::injective::peggy::v1::QueryLastPendingBatchRequestByAddrResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_BatchRequestByNonce : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_BatchRequestByNonce() {
      ::grpc::Service::MarkMethodAsync(12);
    }
    ~WithAsyncMethod_BatchRequestByNonce() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BatchRequestByNonce(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::QueryBatchRequestByNonceRequest* /*request*/, ::injective::peggy::v1::QueryBatchRequestByNonceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBatchRequestByNonce(::grpc::ServerContext* context, ::injective::peggy::v1::QueryBatchRequestByNonceRequest* request, ::grpc::ServerAsyncResponseWriter< ::injective::peggy::v1::QueryBatchRequestByNonceResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_BatchConfirms : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_BatchConfirms() {
      ::grpc::Service::MarkMethodAsync(13);
    }
    ~WithAsyncMethod_BatchConfirms() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BatchConfirms(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::QueryBatchConfirmsRequest* /*request*/, ::injective::peggy::v1::QueryBatchConfirmsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBatchConfirms(::grpc::ServerContext* context, ::injective::peggy::v1::QueryBatchConfirmsRequest* request, ::grpc::ServerAsyncResponseWriter< ::injective::peggy::v1::QueryBatchConfirmsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ERC20ToDenom : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ERC20ToDenom() {
      ::grpc::Service::MarkMethodAsync(14);
    }
    ~WithAsyncMethod_ERC20ToDenom() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ERC20ToDenom(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::QueryERC20ToDenomRequest* /*request*/, ::injective::peggy::v1::QueryERC20ToDenomResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestERC20ToDenom(::grpc::ServerContext* context, ::injective::peggy::v1::QueryERC20ToDenomRequest* request, ::grpc::ServerAsyncResponseWriter< ::injective::peggy::v1::QueryERC20ToDenomResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DenomToERC20 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DenomToERC20() {
      ::grpc::Service::MarkMethodAsync(15);
    }
    ~WithAsyncMethod_DenomToERC20() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DenomToERC20(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::QueryDenomToERC20Request* /*request*/, ::injective::peggy::v1::QueryDenomToERC20Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDenomToERC20(::grpc::ServerContext* context, ::injective::peggy::v1::QueryDenomToERC20Request* request, ::grpc::ServerAsyncResponseWriter< ::injective::peggy::v1::QueryDenomToERC20Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetDelegateKeyByValidator : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetDelegateKeyByValidator() {
      ::grpc::Service::MarkMethodAsync(16);
    }
    ~WithAsyncMethod_GetDelegateKeyByValidator() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDelegateKeyByValidator(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::QueryDelegateKeysByValidatorAddress* /*request*/, ::injective::peggy::v1::QueryDelegateKeysByValidatorAddressResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDelegateKeyByValidator(::grpc::ServerContext* context, ::injective::peggy::v1::QueryDelegateKeysByValidatorAddress* request, ::grpc::ServerAsyncResponseWriter< ::injective::peggy::v1::QueryDelegateKeysByValidatorAddressResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(16, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetDelegateKeyByEth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetDelegateKeyByEth() {
      ::grpc::Service::MarkMethodAsync(17);
    }
    ~WithAsyncMethod_GetDelegateKeyByEth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDelegateKeyByEth(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::QueryDelegateKeysByEthAddress* /*request*/, ::injective::peggy::v1::QueryDelegateKeysByEthAddressResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDelegateKeyByEth(::grpc::ServerContext* context, ::injective::peggy::v1::QueryDelegateKeysByEthAddress* request, ::grpc::ServerAsyncResponseWriter< ::injective::peggy::v1::QueryDelegateKeysByEthAddressResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(17, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetDelegateKeyByOrchestrator : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetDelegateKeyByOrchestrator() {
      ::grpc::Service::MarkMethodAsync(18);
    }
    ~WithAsyncMethod_GetDelegateKeyByOrchestrator() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDelegateKeyByOrchestrator(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::QueryDelegateKeysByOrchestratorAddress* /*request*/, ::injective::peggy::v1::QueryDelegateKeysByOrchestratorAddressResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDelegateKeyByOrchestrator(::grpc::ServerContext* context, ::injective::peggy::v1::QueryDelegateKeysByOrchestratorAddress* request, ::grpc::ServerAsyncResponseWriter< ::injective::peggy::v1::QueryDelegateKeysByOrchestratorAddressResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(18, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PeggyModuleState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PeggyModuleState() {
      ::grpc::Service::MarkMethodAsync(19);
    }
    ~WithAsyncMethod_PeggyModuleState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PeggyModuleState(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::QueryModuleStateRequest* /*request*/, ::injective::peggy::v1::QueryModuleStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPeggyModuleState(::grpc::ServerContext* context, ::injective::peggy::v1::QueryModuleStateRequest* request, ::grpc::ServerAsyncResponseWriter< ::injective::peggy::v1::QueryModuleStateResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(19, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_MissingPeggoNonces : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_MissingPeggoNonces() {
      ::grpc::Service::MarkMethodAsync(20);
    }
    ~WithAsyncMethod_MissingPeggoNonces() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MissingPeggoNonces(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::MissingNoncesRequest* /*request*/, ::injective::peggy::v1::MissingNoncesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMissingPeggoNonces(::grpc::ServerContext* context, ::injective::peggy::v1::MissingNoncesRequest* request, ::grpc::ServerAsyncResponseWriter< ::injective::peggy::v1::MissingNoncesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(20, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Params<WithAsyncMethod_CurrentValset<WithAsyncMethod_ValsetRequest<WithAsyncMethod_ValsetConfirm<WithAsyncMethod_ValsetConfirmsByNonce<WithAsyncMethod_LastValsetRequests<WithAsyncMethod_LastPendingValsetRequestByAddr<WithAsyncMethod_LastEventByAddr<WithAsyncMethod_GetPendingSendToEth<WithAsyncMethod_BatchFees<WithAsyncMethod_OutgoingTxBatches<WithAsyncMethod_LastPendingBatchRequestByAddr<WithAsyncMethod_BatchRequestByNonce<WithAsyncMethod_BatchConfirms<WithAsyncMethod_ERC20ToDenom<WithAsyncMethod_DenomToERC20<WithAsyncMethod_GetDelegateKeyByValidator<WithAsyncMethod_GetDelegateKeyByEth<WithAsyncMethod_GetDelegateKeyByOrchestrator<WithAsyncMethod_PeggyModuleState<WithAsyncMethod_MissingPeggoNonces<Service > > > > > > > > > > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Params : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Params() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::injective::peggy::v1::QueryParamsRequest, ::injective::peggy::v1::QueryParamsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::injective::peggy::v1::QueryParamsRequest* request, ::injective::peggy::v1::QueryParamsResponse* response) { return this->Params(context, request, response); }));}
    void SetMessageAllocatorFor_Params(
        ::grpc::MessageAllocator< ::injective::peggy::v1::QueryParamsRequest, ::injective::peggy::v1::QueryParamsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::injective::peggy::v1::QueryParamsRequest, ::injective::peggy::v1::QueryParamsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Params() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Params(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::QueryParamsRequest* /*request*/, ::injective::peggy::v1::QueryParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Params(
      ::grpc::CallbackServerContext* /*context*/, const ::injective::peggy::v1::QueryParamsRequest* /*request*/, ::injective::peggy::v1::QueryParamsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CurrentValset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CurrentValset() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::injective::peggy::v1::QueryCurrentValsetRequest, ::injective::peggy::v1::QueryCurrentValsetResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::injective::peggy::v1::QueryCurrentValsetRequest* request, ::injective::peggy::v1::QueryCurrentValsetResponse* response) { return this->CurrentValset(context, request, response); }));}
    void SetMessageAllocatorFor_CurrentValset(
        ::grpc::MessageAllocator< ::injective::peggy::v1::QueryCurrentValsetRequest, ::injective::peggy::v1::QueryCurrentValsetResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::injective::peggy::v1::QueryCurrentValsetRequest, ::injective::peggy::v1::QueryCurrentValsetResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CurrentValset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CurrentValset(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::QueryCurrentValsetRequest* /*request*/, ::injective::peggy::v1::QueryCurrentValsetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CurrentValset(
      ::grpc::CallbackServerContext* /*context*/, const ::injective::peggy::v1::QueryCurrentValsetRequest* /*request*/, ::injective::peggy::v1::QueryCurrentValsetResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ValsetRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ValsetRequest() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::injective::peggy::v1::QueryValsetRequestRequest, ::injective::peggy::v1::QueryValsetRequestResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::injective::peggy::v1::QueryValsetRequestRequest* request, ::injective::peggy::v1::QueryValsetRequestResponse* response) { return this->ValsetRequest(context, request, response); }));}
    void SetMessageAllocatorFor_ValsetRequest(
        ::grpc::MessageAllocator< ::injective::peggy::v1::QueryValsetRequestRequest, ::injective::peggy::v1::QueryValsetRequestResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::injective::peggy::v1::QueryValsetRequestRequest, ::injective::peggy::v1::QueryValsetRequestResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ValsetRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValsetRequest(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::QueryValsetRequestRequest* /*request*/, ::injective::peggy::v1::QueryValsetRequestResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ValsetRequest(
      ::grpc::CallbackServerContext* /*context*/, const ::injective::peggy::v1::QueryValsetRequestRequest* /*request*/, ::injective::peggy::v1::QueryValsetRequestResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ValsetConfirm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ValsetConfirm() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::injective::peggy::v1::QueryValsetConfirmRequest, ::injective::peggy::v1::QueryValsetConfirmResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::injective::peggy::v1::QueryValsetConfirmRequest* request, ::injective::peggy::v1::QueryValsetConfirmResponse* response) { return this->ValsetConfirm(context, request, response); }));}
    void SetMessageAllocatorFor_ValsetConfirm(
        ::grpc::MessageAllocator< ::injective::peggy::v1::QueryValsetConfirmRequest, ::injective::peggy::v1::QueryValsetConfirmResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::injective::peggy::v1::QueryValsetConfirmRequest, ::injective::peggy::v1::QueryValsetConfirmResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ValsetConfirm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValsetConfirm(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::QueryValsetConfirmRequest* /*request*/, ::injective::peggy::v1::QueryValsetConfirmResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ValsetConfirm(
      ::grpc::CallbackServerContext* /*context*/, const ::injective::peggy::v1::QueryValsetConfirmRequest* /*request*/, ::injective::peggy::v1::QueryValsetConfirmResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ValsetConfirmsByNonce : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ValsetConfirmsByNonce() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::injective::peggy::v1::QueryValsetConfirmsByNonceRequest, ::injective::peggy::v1::QueryValsetConfirmsByNonceResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::injective::peggy::v1::QueryValsetConfirmsByNonceRequest* request, ::injective::peggy::v1::QueryValsetConfirmsByNonceResponse* response) { return this->ValsetConfirmsByNonce(context, request, response); }));}
    void SetMessageAllocatorFor_ValsetConfirmsByNonce(
        ::grpc::MessageAllocator< ::injective::peggy::v1::QueryValsetConfirmsByNonceRequest, ::injective::peggy::v1::QueryValsetConfirmsByNonceResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::injective::peggy::v1::QueryValsetConfirmsByNonceRequest, ::injective::peggy::v1::QueryValsetConfirmsByNonceResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ValsetConfirmsByNonce() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValsetConfirmsByNonce(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::QueryValsetConfirmsByNonceRequest* /*request*/, ::injective::peggy::v1::QueryValsetConfirmsByNonceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ValsetConfirmsByNonce(
      ::grpc::CallbackServerContext* /*context*/, const ::injective::peggy::v1::QueryValsetConfirmsByNonceRequest* /*request*/, ::injective::peggy::v1::QueryValsetConfirmsByNonceResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_LastValsetRequests : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_LastValsetRequests() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::injective::peggy::v1::QueryLastValsetRequestsRequest, ::injective::peggy::v1::QueryLastValsetRequestsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::injective::peggy::v1::QueryLastValsetRequestsRequest* request, ::injective::peggy::v1::QueryLastValsetRequestsResponse* response) { return this->LastValsetRequests(context, request, response); }));}
    void SetMessageAllocatorFor_LastValsetRequests(
        ::grpc::MessageAllocator< ::injective::peggy::v1::QueryLastValsetRequestsRequest, ::injective::peggy::v1::QueryLastValsetRequestsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::injective::peggy::v1::QueryLastValsetRequestsRequest, ::injective::peggy::v1::QueryLastValsetRequestsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_LastValsetRequests() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LastValsetRequests(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::QueryLastValsetRequestsRequest* /*request*/, ::injective::peggy::v1::QueryLastValsetRequestsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* LastValsetRequests(
      ::grpc::CallbackServerContext* /*context*/, const ::injective::peggy::v1::QueryLastValsetRequestsRequest* /*request*/, ::injective::peggy::v1::QueryLastValsetRequestsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_LastPendingValsetRequestByAddr : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_LastPendingValsetRequestByAddr() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::injective::peggy::v1::QueryLastPendingValsetRequestByAddrRequest, ::injective::peggy::v1::QueryLastPendingValsetRequestByAddrResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::injective::peggy::v1::QueryLastPendingValsetRequestByAddrRequest* request, ::injective::peggy::v1::QueryLastPendingValsetRequestByAddrResponse* response) { return this->LastPendingValsetRequestByAddr(context, request, response); }));}
    void SetMessageAllocatorFor_LastPendingValsetRequestByAddr(
        ::grpc::MessageAllocator< ::injective::peggy::v1::QueryLastPendingValsetRequestByAddrRequest, ::injective::peggy::v1::QueryLastPendingValsetRequestByAddrResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::injective::peggy::v1::QueryLastPendingValsetRequestByAddrRequest, ::injective::peggy::v1::QueryLastPendingValsetRequestByAddrResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_LastPendingValsetRequestByAddr() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LastPendingValsetRequestByAddr(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::QueryLastPendingValsetRequestByAddrRequest* /*request*/, ::injective::peggy::v1::QueryLastPendingValsetRequestByAddrResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* LastPendingValsetRequestByAddr(
      ::grpc::CallbackServerContext* /*context*/, const ::injective::peggy::v1::QueryLastPendingValsetRequestByAddrRequest* /*request*/, ::injective::peggy::v1::QueryLastPendingValsetRequestByAddrResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_LastEventByAddr : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_LastEventByAddr() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::injective::peggy::v1::QueryLastEventByAddrRequest, ::injective::peggy::v1::QueryLastEventByAddrResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::injective::peggy::v1::QueryLastEventByAddrRequest* request, ::injective::peggy::v1::QueryLastEventByAddrResponse* response) { return this->LastEventByAddr(context, request, response); }));}
    void SetMessageAllocatorFor_LastEventByAddr(
        ::grpc::MessageAllocator< ::injective::peggy::v1::QueryLastEventByAddrRequest, ::injective::peggy::v1::QueryLastEventByAddrResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::injective::peggy::v1::QueryLastEventByAddrRequest, ::injective::peggy::v1::QueryLastEventByAddrResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_LastEventByAddr() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LastEventByAddr(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::QueryLastEventByAddrRequest* /*request*/, ::injective::peggy::v1::QueryLastEventByAddrResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* LastEventByAddr(
      ::grpc::CallbackServerContext* /*context*/, const ::injective::peggy::v1::QueryLastEventByAddrRequest* /*request*/, ::injective::peggy::v1::QueryLastEventByAddrResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetPendingSendToEth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetPendingSendToEth() {
      ::grpc::Service::MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::injective::peggy::v1::QueryPendingSendToEth, ::injective::peggy::v1::QueryPendingSendToEthResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::injective::peggy::v1::QueryPendingSendToEth* request, ::injective::peggy::v1::QueryPendingSendToEthResponse* response) { return this->GetPendingSendToEth(context, request, response); }));}
    void SetMessageAllocatorFor_GetPendingSendToEth(
        ::grpc::MessageAllocator< ::injective::peggy::v1::QueryPendingSendToEth, ::injective::peggy::v1::QueryPendingSendToEthResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::injective::peggy::v1::QueryPendingSendToEth, ::injective::peggy::v1::QueryPendingSendToEthResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetPendingSendToEth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPendingSendToEth(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::QueryPendingSendToEth* /*request*/, ::injective::peggy::v1::QueryPendingSendToEthResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetPendingSendToEth(
      ::grpc::CallbackServerContext* /*context*/, const ::injective::peggy::v1::QueryPendingSendToEth* /*request*/, ::injective::peggy::v1::QueryPendingSendToEthResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_BatchFees : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_BatchFees() {
      ::grpc::Service::MarkMethodCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::injective::peggy::v1::QueryBatchFeeRequest, ::injective::peggy::v1::QueryBatchFeeResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::injective::peggy::v1::QueryBatchFeeRequest* request, ::injective::peggy::v1::QueryBatchFeeResponse* response) { return this->BatchFees(context, request, response); }));}
    void SetMessageAllocatorFor_BatchFees(
        ::grpc::MessageAllocator< ::injective::peggy::v1::QueryBatchFeeRequest, ::injective::peggy::v1::QueryBatchFeeResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(9);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::injective::peggy::v1::QueryBatchFeeRequest, ::injective::peggy::v1::QueryBatchFeeResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_BatchFees() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BatchFees(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::QueryBatchFeeRequest* /*request*/, ::injective::peggy::v1::QueryBatchFeeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* BatchFees(
      ::grpc::CallbackServerContext* /*context*/, const ::injective::peggy::v1::QueryBatchFeeRequest* /*request*/, ::injective::peggy::v1::QueryBatchFeeResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_OutgoingTxBatches : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_OutgoingTxBatches() {
      ::grpc::Service::MarkMethodCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::injective::peggy::v1::QueryOutgoingTxBatchesRequest, ::injective::peggy::v1::QueryOutgoingTxBatchesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::injective::peggy::v1::QueryOutgoingTxBatchesRequest* request, ::injective::peggy::v1::QueryOutgoingTxBatchesResponse* response) { return this->OutgoingTxBatches(context, request, response); }));}
    void SetMessageAllocatorFor_OutgoingTxBatches(
        ::grpc::MessageAllocator< ::injective::peggy::v1::QueryOutgoingTxBatchesRequest, ::injective::peggy::v1::QueryOutgoingTxBatchesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(10);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::injective::peggy::v1::QueryOutgoingTxBatchesRequest, ::injective::peggy::v1::QueryOutgoingTxBatchesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_OutgoingTxBatches() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OutgoingTxBatches(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::QueryOutgoingTxBatchesRequest* /*request*/, ::injective::peggy::v1::QueryOutgoingTxBatchesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* OutgoingTxBatches(
      ::grpc::CallbackServerContext* /*context*/, const ::injective::peggy::v1::QueryOutgoingTxBatchesRequest* /*request*/, ::injective::peggy::v1::QueryOutgoingTxBatchesResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_LastPendingBatchRequestByAddr : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_LastPendingBatchRequestByAddr() {
      ::grpc::Service::MarkMethodCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::injective::peggy::v1::QueryLastPendingBatchRequestByAddrRequest, ::injective::peggy::v1::QueryLastPendingBatchRequestByAddrResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::injective::peggy::v1::QueryLastPendingBatchRequestByAddrRequest* request, ::injective::peggy::v1::QueryLastPendingBatchRequestByAddrResponse* response) { return this->LastPendingBatchRequestByAddr(context, request, response); }));}
    void SetMessageAllocatorFor_LastPendingBatchRequestByAddr(
        ::grpc::MessageAllocator< ::injective::peggy::v1::QueryLastPendingBatchRequestByAddrRequest, ::injective::peggy::v1::QueryLastPendingBatchRequestByAddrResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(11);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::injective::peggy::v1::QueryLastPendingBatchRequestByAddrRequest, ::injective::peggy::v1::QueryLastPendingBatchRequestByAddrResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_LastPendingBatchRequestByAddr() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LastPendingBatchRequestByAddr(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::QueryLastPendingBatchRequestByAddrRequest* /*request*/, ::injective::peggy::v1::QueryLastPendingBatchRequestByAddrResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* LastPendingBatchRequestByAddr(
      ::grpc::CallbackServerContext* /*context*/, const ::injective::peggy::v1::QueryLastPendingBatchRequestByAddrRequest* /*request*/, ::injective::peggy::v1::QueryLastPendingBatchRequestByAddrResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_BatchRequestByNonce : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_BatchRequestByNonce() {
      ::grpc::Service::MarkMethodCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::injective::peggy::v1::QueryBatchRequestByNonceRequest, ::injective::peggy::v1::QueryBatchRequestByNonceResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::injective::peggy::v1::QueryBatchRequestByNonceRequest* request, ::injective::peggy::v1::QueryBatchRequestByNonceResponse* response) { return this->BatchRequestByNonce(context, request, response); }));}
    void SetMessageAllocatorFor_BatchRequestByNonce(
        ::grpc::MessageAllocator< ::injective::peggy::v1::QueryBatchRequestByNonceRequest, ::injective::peggy::v1::QueryBatchRequestByNonceResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(12);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::injective::peggy::v1::QueryBatchRequestByNonceRequest, ::injective::peggy::v1::QueryBatchRequestByNonceResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_BatchRequestByNonce() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BatchRequestByNonce(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::QueryBatchRequestByNonceRequest* /*request*/, ::injective::peggy::v1::QueryBatchRequestByNonceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* BatchRequestByNonce(
      ::grpc::CallbackServerContext* /*context*/, const ::injective::peggy::v1::QueryBatchRequestByNonceRequest* /*request*/, ::injective::peggy::v1::QueryBatchRequestByNonceResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_BatchConfirms : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_BatchConfirms() {
      ::grpc::Service::MarkMethodCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::injective::peggy::v1::QueryBatchConfirmsRequest, ::injective::peggy::v1::QueryBatchConfirmsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::injective::peggy::v1::QueryBatchConfirmsRequest* request, ::injective::peggy::v1::QueryBatchConfirmsResponse* response) { return this->BatchConfirms(context, request, response); }));}
    void SetMessageAllocatorFor_BatchConfirms(
        ::grpc::MessageAllocator< ::injective::peggy::v1::QueryBatchConfirmsRequest, ::injective::peggy::v1::QueryBatchConfirmsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(13);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::injective::peggy::v1::QueryBatchConfirmsRequest, ::injective::peggy::v1::QueryBatchConfirmsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_BatchConfirms() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BatchConfirms(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::QueryBatchConfirmsRequest* /*request*/, ::injective::peggy::v1::QueryBatchConfirmsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* BatchConfirms(
      ::grpc::CallbackServerContext* /*context*/, const ::injective::peggy::v1::QueryBatchConfirmsRequest* /*request*/, ::injective::peggy::v1::QueryBatchConfirmsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ERC20ToDenom : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ERC20ToDenom() {
      ::grpc::Service::MarkMethodCallback(14,
          new ::grpc::internal::CallbackUnaryHandler< ::injective::peggy::v1::QueryERC20ToDenomRequest, ::injective::peggy::v1::QueryERC20ToDenomResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::injective::peggy::v1::QueryERC20ToDenomRequest* request, ::injective::peggy::v1::QueryERC20ToDenomResponse* response) { return this->ERC20ToDenom(context, request, response); }));}
    void SetMessageAllocatorFor_ERC20ToDenom(
        ::grpc::MessageAllocator< ::injective::peggy::v1::QueryERC20ToDenomRequest, ::injective::peggy::v1::QueryERC20ToDenomResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(14);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::injective::peggy::v1::QueryERC20ToDenomRequest, ::injective::peggy::v1::QueryERC20ToDenomResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ERC20ToDenom() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ERC20ToDenom(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::QueryERC20ToDenomRequest* /*request*/, ::injective::peggy::v1::QueryERC20ToDenomResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ERC20ToDenom(
      ::grpc::CallbackServerContext* /*context*/, const ::injective::peggy::v1::QueryERC20ToDenomRequest* /*request*/, ::injective::peggy::v1::QueryERC20ToDenomResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DenomToERC20 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DenomToERC20() {
      ::grpc::Service::MarkMethodCallback(15,
          new ::grpc::internal::CallbackUnaryHandler< ::injective::peggy::v1::QueryDenomToERC20Request, ::injective::peggy::v1::QueryDenomToERC20Response>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::injective::peggy::v1::QueryDenomToERC20Request* request, ::injective::peggy::v1::QueryDenomToERC20Response* response) { return this->DenomToERC20(context, request, response); }));}
    void SetMessageAllocatorFor_DenomToERC20(
        ::grpc::MessageAllocator< ::injective::peggy::v1::QueryDenomToERC20Request, ::injective::peggy::v1::QueryDenomToERC20Response>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(15);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::injective::peggy::v1::QueryDenomToERC20Request, ::injective::peggy::v1::QueryDenomToERC20Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DenomToERC20() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DenomToERC20(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::QueryDenomToERC20Request* /*request*/, ::injective::peggy::v1::QueryDenomToERC20Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DenomToERC20(
      ::grpc::CallbackServerContext* /*context*/, const ::injective::peggy::v1::QueryDenomToERC20Request* /*request*/, ::injective::peggy::v1::QueryDenomToERC20Response* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetDelegateKeyByValidator : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetDelegateKeyByValidator() {
      ::grpc::Service::MarkMethodCallback(16,
          new ::grpc::internal::CallbackUnaryHandler< ::injective::peggy::v1::QueryDelegateKeysByValidatorAddress, ::injective::peggy::v1::QueryDelegateKeysByValidatorAddressResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::injective::peggy::v1::QueryDelegateKeysByValidatorAddress* request, ::injective::peggy::v1::QueryDelegateKeysByValidatorAddressResponse* response) { return this->GetDelegateKeyByValidator(context, request, response); }));}
    void SetMessageAllocatorFor_GetDelegateKeyByValidator(
        ::grpc::MessageAllocator< ::injective::peggy::v1::QueryDelegateKeysByValidatorAddress, ::injective::peggy::v1::QueryDelegateKeysByValidatorAddressResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(16);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::injective::peggy::v1::QueryDelegateKeysByValidatorAddress, ::injective::peggy::v1::QueryDelegateKeysByValidatorAddressResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetDelegateKeyByValidator() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDelegateKeyByValidator(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::QueryDelegateKeysByValidatorAddress* /*request*/, ::injective::peggy::v1::QueryDelegateKeysByValidatorAddressResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetDelegateKeyByValidator(
      ::grpc::CallbackServerContext* /*context*/, const ::injective::peggy::v1::QueryDelegateKeysByValidatorAddress* /*request*/, ::injective::peggy::v1::QueryDelegateKeysByValidatorAddressResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetDelegateKeyByEth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetDelegateKeyByEth() {
      ::grpc::Service::MarkMethodCallback(17,
          new ::grpc::internal::CallbackUnaryHandler< ::injective::peggy::v1::QueryDelegateKeysByEthAddress, ::injective::peggy::v1::QueryDelegateKeysByEthAddressResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::injective::peggy::v1::QueryDelegateKeysByEthAddress* request, ::injective::peggy::v1::QueryDelegateKeysByEthAddressResponse* response) { return this->GetDelegateKeyByEth(context, request, response); }));}
    void SetMessageAllocatorFor_GetDelegateKeyByEth(
        ::grpc::MessageAllocator< ::injective::peggy::v1::QueryDelegateKeysByEthAddress, ::injective::peggy::v1::QueryDelegateKeysByEthAddressResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(17);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::injective::peggy::v1::QueryDelegateKeysByEthAddress, ::injective::peggy::v1::QueryDelegateKeysByEthAddressResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetDelegateKeyByEth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDelegateKeyByEth(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::QueryDelegateKeysByEthAddress* /*request*/, ::injective::peggy::v1::QueryDelegateKeysByEthAddressResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetDelegateKeyByEth(
      ::grpc::CallbackServerContext* /*context*/, const ::injective::peggy::v1::QueryDelegateKeysByEthAddress* /*request*/, ::injective::peggy::v1::QueryDelegateKeysByEthAddressResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetDelegateKeyByOrchestrator : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetDelegateKeyByOrchestrator() {
      ::grpc::Service::MarkMethodCallback(18,
          new ::grpc::internal::CallbackUnaryHandler< ::injective::peggy::v1::QueryDelegateKeysByOrchestratorAddress, ::injective::peggy::v1::QueryDelegateKeysByOrchestratorAddressResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::injective::peggy::v1::QueryDelegateKeysByOrchestratorAddress* request, ::injective::peggy::v1::QueryDelegateKeysByOrchestratorAddressResponse* response) { return this->GetDelegateKeyByOrchestrator(context, request, response); }));}
    void SetMessageAllocatorFor_GetDelegateKeyByOrchestrator(
        ::grpc::MessageAllocator< ::injective::peggy::v1::QueryDelegateKeysByOrchestratorAddress, ::injective::peggy::v1::QueryDelegateKeysByOrchestratorAddressResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(18);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::injective::peggy::v1::QueryDelegateKeysByOrchestratorAddress, ::injective::peggy::v1::QueryDelegateKeysByOrchestratorAddressResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetDelegateKeyByOrchestrator() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDelegateKeyByOrchestrator(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::QueryDelegateKeysByOrchestratorAddress* /*request*/, ::injective::peggy::v1::QueryDelegateKeysByOrchestratorAddressResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetDelegateKeyByOrchestrator(
      ::grpc::CallbackServerContext* /*context*/, const ::injective::peggy::v1::QueryDelegateKeysByOrchestratorAddress* /*request*/, ::injective::peggy::v1::QueryDelegateKeysByOrchestratorAddressResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PeggyModuleState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PeggyModuleState() {
      ::grpc::Service::MarkMethodCallback(19,
          new ::grpc::internal::CallbackUnaryHandler< ::injective::peggy::v1::QueryModuleStateRequest, ::injective::peggy::v1::QueryModuleStateResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::injective::peggy::v1::QueryModuleStateRequest* request, ::injective::peggy::v1::QueryModuleStateResponse* response) { return this->PeggyModuleState(context, request, response); }));}
    void SetMessageAllocatorFor_PeggyModuleState(
        ::grpc::MessageAllocator< ::injective::peggy::v1::QueryModuleStateRequest, ::injective::peggy::v1::QueryModuleStateResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(19);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::injective::peggy::v1::QueryModuleStateRequest, ::injective::peggy::v1::QueryModuleStateResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PeggyModuleState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PeggyModuleState(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::QueryModuleStateRequest* /*request*/, ::injective::peggy::v1::QueryModuleStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PeggyModuleState(
      ::grpc::CallbackServerContext* /*context*/, const ::injective::peggy::v1::QueryModuleStateRequest* /*request*/, ::injective::peggy::v1::QueryModuleStateResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_MissingPeggoNonces : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_MissingPeggoNonces() {
      ::grpc::Service::MarkMethodCallback(20,
          new ::grpc::internal::CallbackUnaryHandler< ::injective::peggy::v1::MissingNoncesRequest, ::injective::peggy::v1::MissingNoncesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::injective::peggy::v1::MissingNoncesRequest* request, ::injective::peggy::v1::MissingNoncesResponse* response) { return this->MissingPeggoNonces(context, request, response); }));}
    void SetMessageAllocatorFor_MissingPeggoNonces(
        ::grpc::MessageAllocator< ::injective::peggy::v1::MissingNoncesRequest, ::injective::peggy::v1::MissingNoncesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(20);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::injective::peggy::v1::MissingNoncesRequest, ::injective::peggy::v1::MissingNoncesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_MissingPeggoNonces() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MissingPeggoNonces(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::MissingNoncesRequest* /*request*/, ::injective::peggy::v1::MissingNoncesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* MissingPeggoNonces(
      ::grpc::CallbackServerContext* /*context*/, const ::injective::peggy::v1::MissingNoncesRequest* /*request*/, ::injective::peggy::v1::MissingNoncesResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Params<WithCallbackMethod_CurrentValset<WithCallbackMethod_ValsetRequest<WithCallbackMethod_ValsetConfirm<WithCallbackMethod_ValsetConfirmsByNonce<WithCallbackMethod_LastValsetRequests<WithCallbackMethod_LastPendingValsetRequestByAddr<WithCallbackMethod_LastEventByAddr<WithCallbackMethod_GetPendingSendToEth<WithCallbackMethod_BatchFees<WithCallbackMethod_OutgoingTxBatches<WithCallbackMethod_LastPendingBatchRequestByAddr<WithCallbackMethod_BatchRequestByNonce<WithCallbackMethod_BatchConfirms<WithCallbackMethod_ERC20ToDenom<WithCallbackMethod_DenomToERC20<WithCallbackMethod_GetDelegateKeyByValidator<WithCallbackMethod_GetDelegateKeyByEth<WithCallbackMethod_GetDelegateKeyByOrchestrator<WithCallbackMethod_PeggyModuleState<WithCallbackMethod_MissingPeggoNonces<Service > > > > > > > > > > > > > > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Params : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Params() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Params() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Params(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::QueryParamsRequest* /*request*/, ::injective::peggy::v1::QueryParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CurrentValset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CurrentValset() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_CurrentValset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CurrentValset(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::QueryCurrentValsetRequest* /*request*/, ::injective::peggy::v1::QueryCurrentValsetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ValsetRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ValsetRequest() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_ValsetRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValsetRequest(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::QueryValsetRequestRequest* /*request*/, ::injective::peggy::v1::QueryValsetRequestResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ValsetConfirm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ValsetConfirm() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_ValsetConfirm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValsetConfirm(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::QueryValsetConfirmRequest* /*request*/, ::injective::peggy::v1::QueryValsetConfirmResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ValsetConfirmsByNonce : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ValsetConfirmsByNonce() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_ValsetConfirmsByNonce() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValsetConfirmsByNonce(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::QueryValsetConfirmsByNonceRequest* /*request*/, ::injective::peggy::v1::QueryValsetConfirmsByNonceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_LastValsetRequests : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_LastValsetRequests() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_LastValsetRequests() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LastValsetRequests(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::QueryLastValsetRequestsRequest* /*request*/, ::injective::peggy::v1::QueryLastValsetRequestsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_LastPendingValsetRequestByAddr : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_LastPendingValsetRequestByAddr() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_LastPendingValsetRequestByAddr() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LastPendingValsetRequestByAddr(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::QueryLastPendingValsetRequestByAddrRequest* /*request*/, ::injective::peggy::v1::QueryLastPendingValsetRequestByAddrResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_LastEventByAddr : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_LastEventByAddr() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_LastEventByAddr() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LastEventByAddr(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::QueryLastEventByAddrRequest* /*request*/, ::injective::peggy::v1::QueryLastEventByAddrResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetPendingSendToEth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetPendingSendToEth() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_GetPendingSendToEth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPendingSendToEth(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::QueryPendingSendToEth* /*request*/, ::injective::peggy::v1::QueryPendingSendToEthResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_BatchFees : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_BatchFees() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_BatchFees() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BatchFees(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::QueryBatchFeeRequest* /*request*/, ::injective::peggy::v1::QueryBatchFeeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_OutgoingTxBatches : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_OutgoingTxBatches() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_OutgoingTxBatches() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OutgoingTxBatches(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::QueryOutgoingTxBatchesRequest* /*request*/, ::injective::peggy::v1::QueryOutgoingTxBatchesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_LastPendingBatchRequestByAddr : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_LastPendingBatchRequestByAddr() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_LastPendingBatchRequestByAddr() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LastPendingBatchRequestByAddr(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::QueryLastPendingBatchRequestByAddrRequest* /*request*/, ::injective::peggy::v1::QueryLastPendingBatchRequestByAddrResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_BatchRequestByNonce : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_BatchRequestByNonce() {
      ::grpc::Service::MarkMethodGeneric(12);
    }
    ~WithGenericMethod_BatchRequestByNonce() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BatchRequestByNonce(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::QueryBatchRequestByNonceRequest* /*request*/, ::injective::peggy::v1::QueryBatchRequestByNonceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_BatchConfirms : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_BatchConfirms() {
      ::grpc::Service::MarkMethodGeneric(13);
    }
    ~WithGenericMethod_BatchConfirms() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BatchConfirms(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::QueryBatchConfirmsRequest* /*request*/, ::injective::peggy::v1::QueryBatchConfirmsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ERC20ToDenom : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ERC20ToDenom() {
      ::grpc::Service::MarkMethodGeneric(14);
    }
    ~WithGenericMethod_ERC20ToDenom() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ERC20ToDenom(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::QueryERC20ToDenomRequest* /*request*/, ::injective::peggy::v1::QueryERC20ToDenomResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DenomToERC20 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DenomToERC20() {
      ::grpc::Service::MarkMethodGeneric(15);
    }
    ~WithGenericMethod_DenomToERC20() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DenomToERC20(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::QueryDenomToERC20Request* /*request*/, ::injective::peggy::v1::QueryDenomToERC20Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetDelegateKeyByValidator : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetDelegateKeyByValidator() {
      ::grpc::Service::MarkMethodGeneric(16);
    }
    ~WithGenericMethod_GetDelegateKeyByValidator() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDelegateKeyByValidator(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::QueryDelegateKeysByValidatorAddress* /*request*/, ::injective::peggy::v1::QueryDelegateKeysByValidatorAddressResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetDelegateKeyByEth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetDelegateKeyByEth() {
      ::grpc::Service::MarkMethodGeneric(17);
    }
    ~WithGenericMethod_GetDelegateKeyByEth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDelegateKeyByEth(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::QueryDelegateKeysByEthAddress* /*request*/, ::injective::peggy::v1::QueryDelegateKeysByEthAddressResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetDelegateKeyByOrchestrator : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetDelegateKeyByOrchestrator() {
      ::grpc::Service::MarkMethodGeneric(18);
    }
    ~WithGenericMethod_GetDelegateKeyByOrchestrator() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDelegateKeyByOrchestrator(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::QueryDelegateKeysByOrchestratorAddress* /*request*/, ::injective::peggy::v1::QueryDelegateKeysByOrchestratorAddressResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PeggyModuleState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PeggyModuleState() {
      ::grpc::Service::MarkMethodGeneric(19);
    }
    ~WithGenericMethod_PeggyModuleState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PeggyModuleState(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::QueryModuleStateRequest* /*request*/, ::injective::peggy::v1::QueryModuleStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_MissingPeggoNonces : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_MissingPeggoNonces() {
      ::grpc::Service::MarkMethodGeneric(20);
    }
    ~WithGenericMethod_MissingPeggoNonces() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MissingPeggoNonces(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::MissingNoncesRequest* /*request*/, ::injective::peggy::v1::MissingNoncesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Params : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Params() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Params() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Params(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::QueryParamsRequest* /*request*/, ::injective::peggy::v1::QueryParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestParams(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CurrentValset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CurrentValset() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_CurrentValset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CurrentValset(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::QueryCurrentValsetRequest* /*request*/, ::injective::peggy::v1::QueryCurrentValsetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCurrentValset(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ValsetRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ValsetRequest() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_ValsetRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValsetRequest(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::QueryValsetRequestRequest* /*request*/, ::injective::peggy::v1::QueryValsetRequestResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestValsetRequest(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ValsetConfirm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ValsetConfirm() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_ValsetConfirm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValsetConfirm(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::QueryValsetConfirmRequest* /*request*/, ::injective::peggy::v1::QueryValsetConfirmResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestValsetConfirm(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ValsetConfirmsByNonce : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ValsetConfirmsByNonce() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_ValsetConfirmsByNonce() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValsetConfirmsByNonce(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::QueryValsetConfirmsByNonceRequest* /*request*/, ::injective::peggy::v1::QueryValsetConfirmsByNonceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestValsetConfirmsByNonce(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_LastValsetRequests : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_LastValsetRequests() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_LastValsetRequests() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LastValsetRequests(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::QueryLastValsetRequestsRequest* /*request*/, ::injective::peggy::v1::QueryLastValsetRequestsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLastValsetRequests(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_LastPendingValsetRequestByAddr : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_LastPendingValsetRequestByAddr() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_LastPendingValsetRequestByAddr() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LastPendingValsetRequestByAddr(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::QueryLastPendingValsetRequestByAddrRequest* /*request*/, ::injective::peggy::v1::QueryLastPendingValsetRequestByAddrResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLastPendingValsetRequestByAddr(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_LastEventByAddr : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_LastEventByAddr() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_LastEventByAddr() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LastEventByAddr(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::QueryLastEventByAddrRequest* /*request*/, ::injective::peggy::v1::QueryLastEventByAddrResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLastEventByAddr(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetPendingSendToEth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetPendingSendToEth() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_GetPendingSendToEth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPendingSendToEth(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::QueryPendingSendToEth* /*request*/, ::injective::peggy::v1::QueryPendingSendToEthResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPendingSendToEth(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_BatchFees : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_BatchFees() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_BatchFees() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BatchFees(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::QueryBatchFeeRequest* /*request*/, ::injective::peggy::v1::QueryBatchFeeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBatchFees(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_OutgoingTxBatches : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_OutgoingTxBatches() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_OutgoingTxBatches() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OutgoingTxBatches(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::QueryOutgoingTxBatchesRequest* /*request*/, ::injective::peggy::v1::QueryOutgoingTxBatchesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOutgoingTxBatches(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_LastPendingBatchRequestByAddr : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_LastPendingBatchRequestByAddr() {
      ::grpc::Service::MarkMethodRaw(11);
    }
    ~WithRawMethod_LastPendingBatchRequestByAddr() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LastPendingBatchRequestByAddr(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::QueryLastPendingBatchRequestByAddrRequest* /*request*/, ::injective::peggy::v1::QueryLastPendingBatchRequestByAddrResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLastPendingBatchRequestByAddr(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_BatchRequestByNonce : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_BatchRequestByNonce() {
      ::grpc::Service::MarkMethodRaw(12);
    }
    ~WithRawMethod_BatchRequestByNonce() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BatchRequestByNonce(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::QueryBatchRequestByNonceRequest* /*request*/, ::injective::peggy::v1::QueryBatchRequestByNonceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBatchRequestByNonce(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_BatchConfirms : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_BatchConfirms() {
      ::grpc::Service::MarkMethodRaw(13);
    }
    ~WithRawMethod_BatchConfirms() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BatchConfirms(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::QueryBatchConfirmsRequest* /*request*/, ::injective::peggy::v1::QueryBatchConfirmsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBatchConfirms(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ERC20ToDenom : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ERC20ToDenom() {
      ::grpc::Service::MarkMethodRaw(14);
    }
    ~WithRawMethod_ERC20ToDenom() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ERC20ToDenom(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::QueryERC20ToDenomRequest* /*request*/, ::injective::peggy::v1::QueryERC20ToDenomResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestERC20ToDenom(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DenomToERC20 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DenomToERC20() {
      ::grpc::Service::MarkMethodRaw(15);
    }
    ~WithRawMethod_DenomToERC20() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DenomToERC20(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::QueryDenomToERC20Request* /*request*/, ::injective::peggy::v1::QueryDenomToERC20Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDenomToERC20(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetDelegateKeyByValidator : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetDelegateKeyByValidator() {
      ::grpc::Service::MarkMethodRaw(16);
    }
    ~WithRawMethod_GetDelegateKeyByValidator() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDelegateKeyByValidator(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::QueryDelegateKeysByValidatorAddress* /*request*/, ::injective::peggy::v1::QueryDelegateKeysByValidatorAddressResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDelegateKeyByValidator(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(16, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetDelegateKeyByEth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetDelegateKeyByEth() {
      ::grpc::Service::MarkMethodRaw(17);
    }
    ~WithRawMethod_GetDelegateKeyByEth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDelegateKeyByEth(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::QueryDelegateKeysByEthAddress* /*request*/, ::injective::peggy::v1::QueryDelegateKeysByEthAddressResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDelegateKeyByEth(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(17, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetDelegateKeyByOrchestrator : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetDelegateKeyByOrchestrator() {
      ::grpc::Service::MarkMethodRaw(18);
    }
    ~WithRawMethod_GetDelegateKeyByOrchestrator() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDelegateKeyByOrchestrator(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::QueryDelegateKeysByOrchestratorAddress* /*request*/, ::injective::peggy::v1::QueryDelegateKeysByOrchestratorAddressResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDelegateKeyByOrchestrator(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(18, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PeggyModuleState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PeggyModuleState() {
      ::grpc::Service::MarkMethodRaw(19);
    }
    ~WithRawMethod_PeggyModuleState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PeggyModuleState(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::QueryModuleStateRequest* /*request*/, ::injective::peggy::v1::QueryModuleStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPeggyModuleState(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(19, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_MissingPeggoNonces : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_MissingPeggoNonces() {
      ::grpc::Service::MarkMethodRaw(20);
    }
    ~WithRawMethod_MissingPeggoNonces() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MissingPeggoNonces(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::MissingNoncesRequest* /*request*/, ::injective::peggy::v1::MissingNoncesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMissingPeggoNonces(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(20, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Params : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Params() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Params(context, request, response); }));
    }
    ~WithRawCallbackMethod_Params() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Params(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::QueryParamsRequest* /*request*/, ::injective::peggy::v1::QueryParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Params(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CurrentValset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CurrentValset() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CurrentValset(context, request, response); }));
    }
    ~WithRawCallbackMethod_CurrentValset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CurrentValset(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::QueryCurrentValsetRequest* /*request*/, ::injective::peggy::v1::QueryCurrentValsetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CurrentValset(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ValsetRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ValsetRequest() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ValsetRequest(context, request, response); }));
    }
    ~WithRawCallbackMethod_ValsetRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValsetRequest(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::QueryValsetRequestRequest* /*request*/, ::injective::peggy::v1::QueryValsetRequestResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ValsetRequest(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ValsetConfirm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ValsetConfirm() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ValsetConfirm(context, request, response); }));
    }
    ~WithRawCallbackMethod_ValsetConfirm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValsetConfirm(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::QueryValsetConfirmRequest* /*request*/, ::injective::peggy::v1::QueryValsetConfirmResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ValsetConfirm(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ValsetConfirmsByNonce : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ValsetConfirmsByNonce() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ValsetConfirmsByNonce(context, request, response); }));
    }
    ~WithRawCallbackMethod_ValsetConfirmsByNonce() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValsetConfirmsByNonce(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::QueryValsetConfirmsByNonceRequest* /*request*/, ::injective::peggy::v1::QueryValsetConfirmsByNonceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ValsetConfirmsByNonce(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_LastValsetRequests : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_LastValsetRequests() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->LastValsetRequests(context, request, response); }));
    }
    ~WithRawCallbackMethod_LastValsetRequests() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LastValsetRequests(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::QueryLastValsetRequestsRequest* /*request*/, ::injective::peggy::v1::QueryLastValsetRequestsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* LastValsetRequests(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_LastPendingValsetRequestByAddr : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_LastPendingValsetRequestByAddr() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->LastPendingValsetRequestByAddr(context, request, response); }));
    }
    ~WithRawCallbackMethod_LastPendingValsetRequestByAddr() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LastPendingValsetRequestByAddr(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::QueryLastPendingValsetRequestByAddrRequest* /*request*/, ::injective::peggy::v1::QueryLastPendingValsetRequestByAddrResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* LastPendingValsetRequestByAddr(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_LastEventByAddr : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_LastEventByAddr() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->LastEventByAddr(context, request, response); }));
    }
    ~WithRawCallbackMethod_LastEventByAddr() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LastEventByAddr(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::QueryLastEventByAddrRequest* /*request*/, ::injective::peggy::v1::QueryLastEventByAddrResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* LastEventByAddr(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetPendingSendToEth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetPendingSendToEth() {
      ::grpc::Service::MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetPendingSendToEth(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetPendingSendToEth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPendingSendToEth(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::QueryPendingSendToEth* /*request*/, ::injective::peggy::v1::QueryPendingSendToEthResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetPendingSendToEth(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_BatchFees : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_BatchFees() {
      ::grpc::Service::MarkMethodRawCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->BatchFees(context, request, response); }));
    }
    ~WithRawCallbackMethod_BatchFees() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BatchFees(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::QueryBatchFeeRequest* /*request*/, ::injective::peggy::v1::QueryBatchFeeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* BatchFees(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_OutgoingTxBatches : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_OutgoingTxBatches() {
      ::grpc::Service::MarkMethodRawCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->OutgoingTxBatches(context, request, response); }));
    }
    ~WithRawCallbackMethod_OutgoingTxBatches() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OutgoingTxBatches(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::QueryOutgoingTxBatchesRequest* /*request*/, ::injective::peggy::v1::QueryOutgoingTxBatchesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* OutgoingTxBatches(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_LastPendingBatchRequestByAddr : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_LastPendingBatchRequestByAddr() {
      ::grpc::Service::MarkMethodRawCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->LastPendingBatchRequestByAddr(context, request, response); }));
    }
    ~WithRawCallbackMethod_LastPendingBatchRequestByAddr() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LastPendingBatchRequestByAddr(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::QueryLastPendingBatchRequestByAddrRequest* /*request*/, ::injective::peggy::v1::QueryLastPendingBatchRequestByAddrResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* LastPendingBatchRequestByAddr(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_BatchRequestByNonce : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_BatchRequestByNonce() {
      ::grpc::Service::MarkMethodRawCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->BatchRequestByNonce(context, request, response); }));
    }
    ~WithRawCallbackMethod_BatchRequestByNonce() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BatchRequestByNonce(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::QueryBatchRequestByNonceRequest* /*request*/, ::injective::peggy::v1::QueryBatchRequestByNonceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* BatchRequestByNonce(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_BatchConfirms : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_BatchConfirms() {
      ::grpc::Service::MarkMethodRawCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->BatchConfirms(context, request, response); }));
    }
    ~WithRawCallbackMethod_BatchConfirms() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BatchConfirms(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::QueryBatchConfirmsRequest* /*request*/, ::injective::peggy::v1::QueryBatchConfirmsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* BatchConfirms(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ERC20ToDenom : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ERC20ToDenom() {
      ::grpc::Service::MarkMethodRawCallback(14,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ERC20ToDenom(context, request, response); }));
    }
    ~WithRawCallbackMethod_ERC20ToDenom() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ERC20ToDenom(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::QueryERC20ToDenomRequest* /*request*/, ::injective::peggy::v1::QueryERC20ToDenomResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ERC20ToDenom(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DenomToERC20 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DenomToERC20() {
      ::grpc::Service::MarkMethodRawCallback(15,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DenomToERC20(context, request, response); }));
    }
    ~WithRawCallbackMethod_DenomToERC20() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DenomToERC20(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::QueryDenomToERC20Request* /*request*/, ::injective::peggy::v1::QueryDenomToERC20Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DenomToERC20(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetDelegateKeyByValidator : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetDelegateKeyByValidator() {
      ::grpc::Service::MarkMethodRawCallback(16,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetDelegateKeyByValidator(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetDelegateKeyByValidator() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDelegateKeyByValidator(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::QueryDelegateKeysByValidatorAddress* /*request*/, ::injective::peggy::v1::QueryDelegateKeysByValidatorAddressResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetDelegateKeyByValidator(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetDelegateKeyByEth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetDelegateKeyByEth() {
      ::grpc::Service::MarkMethodRawCallback(17,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetDelegateKeyByEth(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetDelegateKeyByEth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDelegateKeyByEth(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::QueryDelegateKeysByEthAddress* /*request*/, ::injective::peggy::v1::QueryDelegateKeysByEthAddressResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetDelegateKeyByEth(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetDelegateKeyByOrchestrator : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetDelegateKeyByOrchestrator() {
      ::grpc::Service::MarkMethodRawCallback(18,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetDelegateKeyByOrchestrator(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetDelegateKeyByOrchestrator() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDelegateKeyByOrchestrator(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::QueryDelegateKeysByOrchestratorAddress* /*request*/, ::injective::peggy::v1::QueryDelegateKeysByOrchestratorAddressResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetDelegateKeyByOrchestrator(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PeggyModuleState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PeggyModuleState() {
      ::grpc::Service::MarkMethodRawCallback(19,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PeggyModuleState(context, request, response); }));
    }
    ~WithRawCallbackMethod_PeggyModuleState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PeggyModuleState(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::QueryModuleStateRequest* /*request*/, ::injective::peggy::v1::QueryModuleStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PeggyModuleState(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_MissingPeggoNonces : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_MissingPeggoNonces() {
      ::grpc::Service::MarkMethodRawCallback(20,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->MissingPeggoNonces(context, request, response); }));
    }
    ~WithRawCallbackMethod_MissingPeggoNonces() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MissingPeggoNonces(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::MissingNoncesRequest* /*request*/, ::injective::peggy::v1::MissingNoncesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* MissingPeggoNonces(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Params : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Params() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::injective::peggy::v1::QueryParamsRequest, ::injective::peggy::v1::QueryParamsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::injective::peggy::v1::QueryParamsRequest, ::injective::peggy::v1::QueryParamsResponse>* streamer) {
                       return this->StreamedParams(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Params() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Params(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::QueryParamsRequest* /*request*/, ::injective::peggy::v1::QueryParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedParams(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::injective::peggy::v1::QueryParamsRequest,::injective::peggy::v1::QueryParamsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CurrentValset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CurrentValset() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::injective::peggy::v1::QueryCurrentValsetRequest, ::injective::peggy::v1::QueryCurrentValsetResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::injective::peggy::v1::QueryCurrentValsetRequest, ::injective::peggy::v1::QueryCurrentValsetResponse>* streamer) {
                       return this->StreamedCurrentValset(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CurrentValset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CurrentValset(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::QueryCurrentValsetRequest* /*request*/, ::injective::peggy::v1::QueryCurrentValsetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCurrentValset(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::injective::peggy::v1::QueryCurrentValsetRequest,::injective::peggy::v1::QueryCurrentValsetResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ValsetRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ValsetRequest() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::injective::peggy::v1::QueryValsetRequestRequest, ::injective::peggy::v1::QueryValsetRequestResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::injective::peggy::v1::QueryValsetRequestRequest, ::injective::peggy::v1::QueryValsetRequestResponse>* streamer) {
                       return this->StreamedValsetRequest(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ValsetRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ValsetRequest(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::QueryValsetRequestRequest* /*request*/, ::injective::peggy::v1::QueryValsetRequestResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedValsetRequest(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::injective::peggy::v1::QueryValsetRequestRequest,::injective::peggy::v1::QueryValsetRequestResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ValsetConfirm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ValsetConfirm() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::injective::peggy::v1::QueryValsetConfirmRequest, ::injective::peggy::v1::QueryValsetConfirmResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::injective::peggy::v1::QueryValsetConfirmRequest, ::injective::peggy::v1::QueryValsetConfirmResponse>* streamer) {
                       return this->StreamedValsetConfirm(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ValsetConfirm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ValsetConfirm(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::QueryValsetConfirmRequest* /*request*/, ::injective::peggy::v1::QueryValsetConfirmResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedValsetConfirm(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::injective::peggy::v1::QueryValsetConfirmRequest,::injective::peggy::v1::QueryValsetConfirmResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ValsetConfirmsByNonce : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ValsetConfirmsByNonce() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::injective::peggy::v1::QueryValsetConfirmsByNonceRequest, ::injective::peggy::v1::QueryValsetConfirmsByNonceResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::injective::peggy::v1::QueryValsetConfirmsByNonceRequest, ::injective::peggy::v1::QueryValsetConfirmsByNonceResponse>* streamer) {
                       return this->StreamedValsetConfirmsByNonce(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ValsetConfirmsByNonce() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ValsetConfirmsByNonce(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::QueryValsetConfirmsByNonceRequest* /*request*/, ::injective::peggy::v1::QueryValsetConfirmsByNonceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedValsetConfirmsByNonce(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::injective::peggy::v1::QueryValsetConfirmsByNonceRequest,::injective::peggy::v1::QueryValsetConfirmsByNonceResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_LastValsetRequests : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_LastValsetRequests() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::injective::peggy::v1::QueryLastValsetRequestsRequest, ::injective::peggy::v1::QueryLastValsetRequestsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::injective::peggy::v1::QueryLastValsetRequestsRequest, ::injective::peggy::v1::QueryLastValsetRequestsResponse>* streamer) {
                       return this->StreamedLastValsetRequests(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_LastValsetRequests() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status LastValsetRequests(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::QueryLastValsetRequestsRequest* /*request*/, ::injective::peggy::v1::QueryLastValsetRequestsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedLastValsetRequests(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::injective::peggy::v1::QueryLastValsetRequestsRequest,::injective::peggy::v1::QueryLastValsetRequestsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_LastPendingValsetRequestByAddr : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_LastPendingValsetRequestByAddr() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::injective::peggy::v1::QueryLastPendingValsetRequestByAddrRequest, ::injective::peggy::v1::QueryLastPendingValsetRequestByAddrResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::injective::peggy::v1::QueryLastPendingValsetRequestByAddrRequest, ::injective::peggy::v1::QueryLastPendingValsetRequestByAddrResponse>* streamer) {
                       return this->StreamedLastPendingValsetRequestByAddr(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_LastPendingValsetRequestByAddr() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status LastPendingValsetRequestByAddr(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::QueryLastPendingValsetRequestByAddrRequest* /*request*/, ::injective::peggy::v1::QueryLastPendingValsetRequestByAddrResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedLastPendingValsetRequestByAddr(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::injective::peggy::v1::QueryLastPendingValsetRequestByAddrRequest,::injective::peggy::v1::QueryLastPendingValsetRequestByAddrResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_LastEventByAddr : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_LastEventByAddr() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::injective::peggy::v1::QueryLastEventByAddrRequest, ::injective::peggy::v1::QueryLastEventByAddrResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::injective::peggy::v1::QueryLastEventByAddrRequest, ::injective::peggy::v1::QueryLastEventByAddrResponse>* streamer) {
                       return this->StreamedLastEventByAddr(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_LastEventByAddr() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status LastEventByAddr(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::QueryLastEventByAddrRequest* /*request*/, ::injective::peggy::v1::QueryLastEventByAddrResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedLastEventByAddr(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::injective::peggy::v1::QueryLastEventByAddrRequest,::injective::peggy::v1::QueryLastEventByAddrResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetPendingSendToEth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetPendingSendToEth() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::injective::peggy::v1::QueryPendingSendToEth, ::injective::peggy::v1::QueryPendingSendToEthResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::injective::peggy::v1::QueryPendingSendToEth, ::injective::peggy::v1::QueryPendingSendToEthResponse>* streamer) {
                       return this->StreamedGetPendingSendToEth(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetPendingSendToEth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetPendingSendToEth(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::QueryPendingSendToEth* /*request*/, ::injective::peggy::v1::QueryPendingSendToEthResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetPendingSendToEth(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::injective::peggy::v1::QueryPendingSendToEth,::injective::peggy::v1::QueryPendingSendToEthResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_BatchFees : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_BatchFees() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler<
          ::injective::peggy::v1::QueryBatchFeeRequest, ::injective::peggy::v1::QueryBatchFeeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::injective::peggy::v1::QueryBatchFeeRequest, ::injective::peggy::v1::QueryBatchFeeResponse>* streamer) {
                       return this->StreamedBatchFees(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_BatchFees() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status BatchFees(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::QueryBatchFeeRequest* /*request*/, ::injective::peggy::v1::QueryBatchFeeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedBatchFees(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::injective::peggy::v1::QueryBatchFeeRequest,::injective::peggy::v1::QueryBatchFeeResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_OutgoingTxBatches : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_OutgoingTxBatches() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler<
          ::injective::peggy::v1::QueryOutgoingTxBatchesRequest, ::injective::peggy::v1::QueryOutgoingTxBatchesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::injective::peggy::v1::QueryOutgoingTxBatchesRequest, ::injective::peggy::v1::QueryOutgoingTxBatchesResponse>* streamer) {
                       return this->StreamedOutgoingTxBatches(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_OutgoingTxBatches() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status OutgoingTxBatches(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::QueryOutgoingTxBatchesRequest* /*request*/, ::injective::peggy::v1::QueryOutgoingTxBatchesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedOutgoingTxBatches(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::injective::peggy::v1::QueryOutgoingTxBatchesRequest,::injective::peggy::v1::QueryOutgoingTxBatchesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_LastPendingBatchRequestByAddr : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_LastPendingBatchRequestByAddr() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::StreamedUnaryHandler<
          ::injective::peggy::v1::QueryLastPendingBatchRequestByAddrRequest, ::injective::peggy::v1::QueryLastPendingBatchRequestByAddrResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::injective::peggy::v1::QueryLastPendingBatchRequestByAddrRequest, ::injective::peggy::v1::QueryLastPendingBatchRequestByAddrResponse>* streamer) {
                       return this->StreamedLastPendingBatchRequestByAddr(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_LastPendingBatchRequestByAddr() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status LastPendingBatchRequestByAddr(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::QueryLastPendingBatchRequestByAddrRequest* /*request*/, ::injective::peggy::v1::QueryLastPendingBatchRequestByAddrResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedLastPendingBatchRequestByAddr(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::injective::peggy::v1::QueryLastPendingBatchRequestByAddrRequest,::injective::peggy::v1::QueryLastPendingBatchRequestByAddrResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_BatchRequestByNonce : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_BatchRequestByNonce() {
      ::grpc::Service::MarkMethodStreamed(12,
        new ::grpc::internal::StreamedUnaryHandler<
          ::injective::peggy::v1::QueryBatchRequestByNonceRequest, ::injective::peggy::v1::QueryBatchRequestByNonceResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::injective::peggy::v1::QueryBatchRequestByNonceRequest, ::injective::peggy::v1::QueryBatchRequestByNonceResponse>* streamer) {
                       return this->StreamedBatchRequestByNonce(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_BatchRequestByNonce() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status BatchRequestByNonce(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::QueryBatchRequestByNonceRequest* /*request*/, ::injective::peggy::v1::QueryBatchRequestByNonceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedBatchRequestByNonce(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::injective::peggy::v1::QueryBatchRequestByNonceRequest,::injective::peggy::v1::QueryBatchRequestByNonceResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_BatchConfirms : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_BatchConfirms() {
      ::grpc::Service::MarkMethodStreamed(13,
        new ::grpc::internal::StreamedUnaryHandler<
          ::injective::peggy::v1::QueryBatchConfirmsRequest, ::injective::peggy::v1::QueryBatchConfirmsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::injective::peggy::v1::QueryBatchConfirmsRequest, ::injective::peggy::v1::QueryBatchConfirmsResponse>* streamer) {
                       return this->StreamedBatchConfirms(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_BatchConfirms() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status BatchConfirms(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::QueryBatchConfirmsRequest* /*request*/, ::injective::peggy::v1::QueryBatchConfirmsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedBatchConfirms(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::injective::peggy::v1::QueryBatchConfirmsRequest,::injective::peggy::v1::QueryBatchConfirmsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ERC20ToDenom : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ERC20ToDenom() {
      ::grpc::Service::MarkMethodStreamed(14,
        new ::grpc::internal::StreamedUnaryHandler<
          ::injective::peggy::v1::QueryERC20ToDenomRequest, ::injective::peggy::v1::QueryERC20ToDenomResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::injective::peggy::v1::QueryERC20ToDenomRequest, ::injective::peggy::v1::QueryERC20ToDenomResponse>* streamer) {
                       return this->StreamedERC20ToDenom(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ERC20ToDenom() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ERC20ToDenom(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::QueryERC20ToDenomRequest* /*request*/, ::injective::peggy::v1::QueryERC20ToDenomResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedERC20ToDenom(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::injective::peggy::v1::QueryERC20ToDenomRequest,::injective::peggy::v1::QueryERC20ToDenomResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DenomToERC20 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DenomToERC20() {
      ::grpc::Service::MarkMethodStreamed(15,
        new ::grpc::internal::StreamedUnaryHandler<
          ::injective::peggy::v1::QueryDenomToERC20Request, ::injective::peggy::v1::QueryDenomToERC20Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::injective::peggy::v1::QueryDenomToERC20Request, ::injective::peggy::v1::QueryDenomToERC20Response>* streamer) {
                       return this->StreamedDenomToERC20(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DenomToERC20() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DenomToERC20(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::QueryDenomToERC20Request* /*request*/, ::injective::peggy::v1::QueryDenomToERC20Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDenomToERC20(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::injective::peggy::v1::QueryDenomToERC20Request,::injective::peggy::v1::QueryDenomToERC20Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetDelegateKeyByValidator : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetDelegateKeyByValidator() {
      ::grpc::Service::MarkMethodStreamed(16,
        new ::grpc::internal::StreamedUnaryHandler<
          ::injective::peggy::v1::QueryDelegateKeysByValidatorAddress, ::injective::peggy::v1::QueryDelegateKeysByValidatorAddressResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::injective::peggy::v1::QueryDelegateKeysByValidatorAddress, ::injective::peggy::v1::QueryDelegateKeysByValidatorAddressResponse>* streamer) {
                       return this->StreamedGetDelegateKeyByValidator(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetDelegateKeyByValidator() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetDelegateKeyByValidator(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::QueryDelegateKeysByValidatorAddress* /*request*/, ::injective::peggy::v1::QueryDelegateKeysByValidatorAddressResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetDelegateKeyByValidator(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::injective::peggy::v1::QueryDelegateKeysByValidatorAddress,::injective::peggy::v1::QueryDelegateKeysByValidatorAddressResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetDelegateKeyByEth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetDelegateKeyByEth() {
      ::grpc::Service::MarkMethodStreamed(17,
        new ::grpc::internal::StreamedUnaryHandler<
          ::injective::peggy::v1::QueryDelegateKeysByEthAddress, ::injective::peggy::v1::QueryDelegateKeysByEthAddressResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::injective::peggy::v1::QueryDelegateKeysByEthAddress, ::injective::peggy::v1::QueryDelegateKeysByEthAddressResponse>* streamer) {
                       return this->StreamedGetDelegateKeyByEth(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetDelegateKeyByEth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetDelegateKeyByEth(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::QueryDelegateKeysByEthAddress* /*request*/, ::injective::peggy::v1::QueryDelegateKeysByEthAddressResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetDelegateKeyByEth(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::injective::peggy::v1::QueryDelegateKeysByEthAddress,::injective::peggy::v1::QueryDelegateKeysByEthAddressResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetDelegateKeyByOrchestrator : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetDelegateKeyByOrchestrator() {
      ::grpc::Service::MarkMethodStreamed(18,
        new ::grpc::internal::StreamedUnaryHandler<
          ::injective::peggy::v1::QueryDelegateKeysByOrchestratorAddress, ::injective::peggy::v1::QueryDelegateKeysByOrchestratorAddressResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::injective::peggy::v1::QueryDelegateKeysByOrchestratorAddress, ::injective::peggy::v1::QueryDelegateKeysByOrchestratorAddressResponse>* streamer) {
                       return this->StreamedGetDelegateKeyByOrchestrator(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetDelegateKeyByOrchestrator() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetDelegateKeyByOrchestrator(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::QueryDelegateKeysByOrchestratorAddress* /*request*/, ::injective::peggy::v1::QueryDelegateKeysByOrchestratorAddressResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetDelegateKeyByOrchestrator(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::injective::peggy::v1::QueryDelegateKeysByOrchestratorAddress,::injective::peggy::v1::QueryDelegateKeysByOrchestratorAddressResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PeggyModuleState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PeggyModuleState() {
      ::grpc::Service::MarkMethodStreamed(19,
        new ::grpc::internal::StreamedUnaryHandler<
          ::injective::peggy::v1::QueryModuleStateRequest, ::injective::peggy::v1::QueryModuleStateResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::injective::peggy::v1::QueryModuleStateRequest, ::injective::peggy::v1::QueryModuleStateResponse>* streamer) {
                       return this->StreamedPeggyModuleState(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PeggyModuleState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PeggyModuleState(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::QueryModuleStateRequest* /*request*/, ::injective::peggy::v1::QueryModuleStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPeggyModuleState(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::injective::peggy::v1::QueryModuleStateRequest,::injective::peggy::v1::QueryModuleStateResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_MissingPeggoNonces : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_MissingPeggoNonces() {
      ::grpc::Service::MarkMethodStreamed(20,
        new ::grpc::internal::StreamedUnaryHandler<
          ::injective::peggy::v1::MissingNoncesRequest, ::injective::peggy::v1::MissingNoncesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::injective::peggy::v1::MissingNoncesRequest, ::injective::peggy::v1::MissingNoncesResponse>* streamer) {
                       return this->StreamedMissingPeggoNonces(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_MissingPeggoNonces() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status MissingPeggoNonces(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::MissingNoncesRequest* /*request*/, ::injective::peggy::v1::MissingNoncesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedMissingPeggoNonces(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::injective::peggy::v1::MissingNoncesRequest,::injective::peggy::v1::MissingNoncesResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Params<WithStreamedUnaryMethod_CurrentValset<WithStreamedUnaryMethod_ValsetRequest<WithStreamedUnaryMethod_ValsetConfirm<WithStreamedUnaryMethod_ValsetConfirmsByNonce<WithStreamedUnaryMethod_LastValsetRequests<WithStreamedUnaryMethod_LastPendingValsetRequestByAddr<WithStreamedUnaryMethod_LastEventByAddr<WithStreamedUnaryMethod_GetPendingSendToEth<WithStreamedUnaryMethod_BatchFees<WithStreamedUnaryMethod_OutgoingTxBatches<WithStreamedUnaryMethod_LastPendingBatchRequestByAddr<WithStreamedUnaryMethod_BatchRequestByNonce<WithStreamedUnaryMethod_BatchConfirms<WithStreamedUnaryMethod_ERC20ToDenom<WithStreamedUnaryMethod_DenomToERC20<WithStreamedUnaryMethod_GetDelegateKeyByValidator<WithStreamedUnaryMethod_GetDelegateKeyByEth<WithStreamedUnaryMethod_GetDelegateKeyByOrchestrator<WithStreamedUnaryMethod_PeggyModuleState<WithStreamedUnaryMethod_MissingPeggoNonces<Service > > > > > > > > > > > > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Params<WithStreamedUnaryMethod_CurrentValset<WithStreamedUnaryMethod_ValsetRequest<WithStreamedUnaryMethod_ValsetConfirm<WithStreamedUnaryMethod_ValsetConfirmsByNonce<WithStreamedUnaryMethod_LastValsetRequests<WithStreamedUnaryMethod_LastPendingValsetRequestByAddr<WithStreamedUnaryMethod_LastEventByAddr<WithStreamedUnaryMethod_GetPendingSendToEth<WithStreamedUnaryMethod_BatchFees<WithStreamedUnaryMethod_OutgoingTxBatches<WithStreamedUnaryMethod_LastPendingBatchRequestByAddr<WithStreamedUnaryMethod_BatchRequestByNonce<WithStreamedUnaryMethod_BatchConfirms<WithStreamedUnaryMethod_ERC20ToDenom<WithStreamedUnaryMethod_DenomToERC20<WithStreamedUnaryMethod_GetDelegateKeyByValidator<WithStreamedUnaryMethod_GetDelegateKeyByEth<WithStreamedUnaryMethod_GetDelegateKeyByOrchestrator<WithStreamedUnaryMethod_PeggyModuleState<WithStreamedUnaryMethod_MissingPeggoNonces<Service > > > > > > > > > > > > > > > > > > > > > StreamedService;
};

}  // namespace v1
}  // namespace peggy
}  // namespace injective


#endif  // GRPC_injective_2fpeggy_2fv1_2fquery_2eproto__INCLUDED

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: injective/peggy/v1/params.proto

#include "injective/peggy/v1/params.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace injective {
namespace peggy {
namespace v1 {
template <typename>
PROTOBUF_CONSTEXPR Params::Params(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.peggy_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.contract_source_hash_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.bridge_ethereum_address_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.slash_fraction_valset_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.slash_fraction_batch_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.slash_fraction_claim_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.slash_fraction_conflicting_claim_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.slash_fraction_bad_eth_signature_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.cosmos_coin_denom_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.cosmos_coin_erc20_contract_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.valset_reward_)*/nullptr
  , /*decltype(_impl_.bridge_chain_id_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.signed_valsets_window_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.signed_batches_window_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.signed_claims_window_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.target_batch_timeout_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.average_block_time_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.average_ethereum_block_time_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.unbond_slashing_valsets_window_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.bridge_contract_start_height_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.claim_slashing_enabled_)*/ false
} {}
struct ParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ParamsDefaultTypeInternal() {}
  union {
    Params _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ParamsDefaultTypeInternal _Params_default_instance_;
}  // namespace v1
}  // namespace peggy
}  // namespace injective
static ::_pb::Metadata file_level_metadata_injective_2fpeggy_2fv1_2fparams_2eproto[1];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_injective_2fpeggy_2fv1_2fparams_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_injective_2fpeggy_2fv1_2fparams_2eproto = nullptr;
const ::uint32_t TableStruct_injective_2fpeggy_2fv1_2fparams_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::Params, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::Params, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::Params, _impl_.peggy_id_),
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::Params, _impl_.contract_source_hash_),
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::Params, _impl_.bridge_ethereum_address_),
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::Params, _impl_.bridge_chain_id_),
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::Params, _impl_.signed_valsets_window_),
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::Params, _impl_.signed_batches_window_),
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::Params, _impl_.signed_claims_window_),
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::Params, _impl_.target_batch_timeout_),
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::Params, _impl_.average_block_time_),
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::Params, _impl_.average_ethereum_block_time_),
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::Params, _impl_.slash_fraction_valset_),
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::Params, _impl_.slash_fraction_batch_),
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::Params, _impl_.slash_fraction_claim_),
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::Params, _impl_.slash_fraction_conflicting_claim_),
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::Params, _impl_.unbond_slashing_valsets_window_),
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::Params, _impl_.slash_fraction_bad_eth_signature_),
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::Params, _impl_.cosmos_coin_denom_),
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::Params, _impl_.cosmos_coin_erc20_contract_),
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::Params, _impl_.claim_slashing_enabled_),
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::Params, _impl_.bridge_contract_start_height_),
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::Params, _impl_.valset_reward_),
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    0,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 29, -1, sizeof(::injective::peggy::v1::Params)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::injective::peggy::v1::_Params_default_instance_._instance,
};
const char descriptor_table_protodef_injective_2fpeggy_2fv1_2fparams_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\037injective/peggy/v1/params.proto\022\022injec"
    "tive.peggy.v1\032\024gogoproto/gogo.proto\032\036cos"
    "mos/base/v1beta1/coin.proto\"\370\n\n\006Params\022\031"
    "\n\010peggy_id\030\001 \001(\tR\007peggyId\0220\n\024contract_so"
    "urce_hash\030\002 \001(\tR\022contractSourceHash\0226\n\027b"
    "ridge_ethereum_address\030\003 \001(\tR\025bridgeEthe"
    "reumAddress\022&\n\017bridge_chain_id\030\004 \001(\004R\rbr"
    "idgeChainId\0222\n\025signed_valsets_window\030\005 \001"
    "(\004R\023signedValsetsWindow\0222\n\025signed_batche"
    "s_window\030\006 \001(\004R\023signedBatchesWindow\0220\n\024s"
    "igned_claims_window\030\007 \001(\004R\022signedClaimsW"
    "indow\0220\n\024target_batch_timeout\030\010 \001(\004R\022tar"
    "getBatchTimeout\022,\n\022average_block_time\030\t "
    "\001(\004R\020averageBlockTime\022=\n\033average_ethereu"
    "m_block_time\030\n \001(\004R\030averageEthereumBlock"
    "Time\022b\n\025slash_fraction_valset\030\013 \001(\014B.\310\336\037"
    "\000\332\336\037&github.com/cosmos/cosmos-sdk/types."
    "DecR\023slashFractionValset\022`\n\024slash_fracti"
    "on_batch\030\014 \001(\014B.\310\336\037\000\332\336\037&github.com/cosmo"
    "s/cosmos-sdk/types.DecR\022slashFractionBat"
    "ch\022`\n\024slash_fraction_claim\030\r \001(\014B.\310\336\037\000\332\336"
    "\037&github.com/cosmos/cosmos-sdk/types.Dec"
    "R\022slashFractionClaim\022w\n slash_fraction_c"
    "onflicting_claim\030\016 \001(\014B.\310\336\037\000\332\336\037&github.c"
    "om/cosmos/cosmos-sdk/types.DecR\035slashFra"
    "ctionConflictingClaim\022C\n\036unbond_slashing"
    "_valsets_window\030\017 \001(\004R\033unbondSlashingVal"
    "setsWindow\022v\n slash_fraction_bad_eth_sig"
    "nature\030\020 \001(\014B.\310\336\037\000\332\336\037&github.com/cosmos/"
    "cosmos-sdk/types.DecR\034slashFractionBadEt"
    "hSignature\022*\n\021cosmos_coin_denom\030\021 \001(\tR\017c"
    "osmosCoinDenom\022;\n\032cosmos_coin_erc20_cont"
    "ract\030\022 \001(\tR\027cosmosCoinErc20Contract\0224\n\026c"
    "laim_slashing_enabled\030\023 \001(\010R\024claimSlashi"
    "ngEnabled\022\?\n\034bridge_contract_start_heigh"
    "t\030\024 \001(\004R\031bridgeContractStartHeight\022D\n\rva"
    "lset_reward\030\025 \001(\0132\031.cosmos.base.v1beta1."
    "CoinB\004\310\336\037\000R\014valsetReward:\004\200\334 \000B\334\001\n\026com.i"
    "njective.peggy.v1B\013ParamsProtoP\001ZKgithub"
    ".com/InjectiveLabs/injective-core/inject"
    "ive-chain/modules/peggy/types\242\002\003IPX\252\002\022In"
    "jective.Peggy.V1\312\002\022Injective\\Peggy\\V1\342\002\036"
    "Injective\\Peggy\\V1\\GPBMetadata\352\002\024Injecti"
    "ve::Peggy::V1b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_injective_2fpeggy_2fv1_2fparams_2eproto_deps[2] =
    {
        &::descriptor_table_cosmos_2fbase_2fv1beta1_2fcoin_2eproto,
        &::descriptor_table_gogoproto_2fgogo_2eproto,
};
static ::absl::once_flag descriptor_table_injective_2fpeggy_2fv1_2fparams_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_injective_2fpeggy_2fv1_2fparams_2eproto = {
    false,
    false,
    1741,
    descriptor_table_protodef_injective_2fpeggy_2fv1_2fparams_2eproto,
    "injective/peggy/v1/params.proto",
    &descriptor_table_injective_2fpeggy_2fv1_2fparams_2eproto_once,
    descriptor_table_injective_2fpeggy_2fv1_2fparams_2eproto_deps,
    2,
    1,
    schemas,
    file_default_instances,
    TableStruct_injective_2fpeggy_2fv1_2fparams_2eproto::offsets,
    file_level_metadata_injective_2fpeggy_2fv1_2fparams_2eproto,
    file_level_enum_descriptors_injective_2fpeggy_2fv1_2fparams_2eproto,
    file_level_service_descriptors_injective_2fpeggy_2fv1_2fparams_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_injective_2fpeggy_2fv1_2fparams_2eproto_getter() {
  return &descriptor_table_injective_2fpeggy_2fv1_2fparams_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_injective_2fpeggy_2fv1_2fparams_2eproto(&descriptor_table_injective_2fpeggy_2fv1_2fparams_2eproto);
namespace injective {
namespace peggy {
namespace v1 {
// ===================================================================

class Params::_Internal {
 public:
  using HasBits = decltype(std::declval<Params>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Params, _impl_._has_bits_);
  static const ::cosmos::base::v1beta1::Coin& valset_reward(const Params* msg);
  static void set_has_valset_reward(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::cosmos::base::v1beta1::Coin&
Params::_Internal::valset_reward(const Params* msg) {
  return *msg->_impl_.valset_reward_;
}
void Params::clear_valset_reward() {
  if (_impl_.valset_reward_ != nullptr) _impl_.valset_reward_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
Params::Params(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.peggy.v1.Params)
}
Params::Params(const Params& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Params* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.peggy_id_) {}

    , decltype(_impl_.contract_source_hash_) {}

    , decltype(_impl_.bridge_ethereum_address_) {}

    , decltype(_impl_.slash_fraction_valset_) {}

    , decltype(_impl_.slash_fraction_batch_) {}

    , decltype(_impl_.slash_fraction_claim_) {}

    , decltype(_impl_.slash_fraction_conflicting_claim_) {}

    , decltype(_impl_.slash_fraction_bad_eth_signature_) {}

    , decltype(_impl_.cosmos_coin_denom_) {}

    , decltype(_impl_.cosmos_coin_erc20_contract_) {}

    , decltype(_impl_.valset_reward_){nullptr}
    , decltype(_impl_.bridge_chain_id_) {}

    , decltype(_impl_.signed_valsets_window_) {}

    , decltype(_impl_.signed_batches_window_) {}

    , decltype(_impl_.signed_claims_window_) {}

    , decltype(_impl_.target_batch_timeout_) {}

    , decltype(_impl_.average_block_time_) {}

    , decltype(_impl_.average_ethereum_block_time_) {}

    , decltype(_impl_.unbond_slashing_valsets_window_) {}

    , decltype(_impl_.bridge_contract_start_height_) {}

    , decltype(_impl_.claim_slashing_enabled_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.peggy_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.peggy_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_peggy_id().empty()) {
    _this->_impl_.peggy_id_.Set(from._internal_peggy_id(), _this->GetArenaForAllocation());
  }
  _impl_.contract_source_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.contract_source_hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_contract_source_hash().empty()) {
    _this->_impl_.contract_source_hash_.Set(from._internal_contract_source_hash(), _this->GetArenaForAllocation());
  }
  _impl_.bridge_ethereum_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.bridge_ethereum_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_bridge_ethereum_address().empty()) {
    _this->_impl_.bridge_ethereum_address_.Set(from._internal_bridge_ethereum_address(), _this->GetArenaForAllocation());
  }
  _impl_.slash_fraction_valset_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.slash_fraction_valset_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_slash_fraction_valset().empty()) {
    _this->_impl_.slash_fraction_valset_.Set(from._internal_slash_fraction_valset(), _this->GetArenaForAllocation());
  }
  _impl_.slash_fraction_batch_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.slash_fraction_batch_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_slash_fraction_batch().empty()) {
    _this->_impl_.slash_fraction_batch_.Set(from._internal_slash_fraction_batch(), _this->GetArenaForAllocation());
  }
  _impl_.slash_fraction_claim_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.slash_fraction_claim_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_slash_fraction_claim().empty()) {
    _this->_impl_.slash_fraction_claim_.Set(from._internal_slash_fraction_claim(), _this->GetArenaForAllocation());
  }
  _impl_.slash_fraction_conflicting_claim_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.slash_fraction_conflicting_claim_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_slash_fraction_conflicting_claim().empty()) {
    _this->_impl_.slash_fraction_conflicting_claim_.Set(from._internal_slash_fraction_conflicting_claim(), _this->GetArenaForAllocation());
  }
  _impl_.slash_fraction_bad_eth_signature_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.slash_fraction_bad_eth_signature_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_slash_fraction_bad_eth_signature().empty()) {
    _this->_impl_.slash_fraction_bad_eth_signature_.Set(from._internal_slash_fraction_bad_eth_signature(), _this->GetArenaForAllocation());
  }
  _impl_.cosmos_coin_denom_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.cosmos_coin_denom_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_cosmos_coin_denom().empty()) {
    _this->_impl_.cosmos_coin_denom_.Set(from._internal_cosmos_coin_denom(), _this->GetArenaForAllocation());
  }
  _impl_.cosmos_coin_erc20_contract_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.cosmos_coin_erc20_contract_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_cosmos_coin_erc20_contract().empty()) {
    _this->_impl_.cosmos_coin_erc20_contract_.Set(from._internal_cosmos_coin_erc20_contract(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.valset_reward_ = new ::cosmos::base::v1beta1::Coin(*from._impl_.valset_reward_);
  }
  ::memcpy(&_impl_.bridge_chain_id_, &from._impl_.bridge_chain_id_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.claim_slashing_enabled_) -
    reinterpret_cast<char*>(&_impl_.bridge_chain_id_)) + sizeof(_impl_.claim_slashing_enabled_));
  // @@protoc_insertion_point(copy_constructor:injective.peggy.v1.Params)
}

inline void Params::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.peggy_id_) {}

    , decltype(_impl_.contract_source_hash_) {}

    , decltype(_impl_.bridge_ethereum_address_) {}

    , decltype(_impl_.slash_fraction_valset_) {}

    , decltype(_impl_.slash_fraction_batch_) {}

    , decltype(_impl_.slash_fraction_claim_) {}

    , decltype(_impl_.slash_fraction_conflicting_claim_) {}

    , decltype(_impl_.slash_fraction_bad_eth_signature_) {}

    , decltype(_impl_.cosmos_coin_denom_) {}

    , decltype(_impl_.cosmos_coin_erc20_contract_) {}

    , decltype(_impl_.valset_reward_){nullptr}
    , decltype(_impl_.bridge_chain_id_) { ::uint64_t{0u} }

    , decltype(_impl_.signed_valsets_window_) { ::uint64_t{0u} }

    , decltype(_impl_.signed_batches_window_) { ::uint64_t{0u} }

    , decltype(_impl_.signed_claims_window_) { ::uint64_t{0u} }

    , decltype(_impl_.target_batch_timeout_) { ::uint64_t{0u} }

    , decltype(_impl_.average_block_time_) { ::uint64_t{0u} }

    , decltype(_impl_.average_ethereum_block_time_) { ::uint64_t{0u} }

    , decltype(_impl_.unbond_slashing_valsets_window_) { ::uint64_t{0u} }

    , decltype(_impl_.bridge_contract_start_height_) { ::uint64_t{0u} }

    , decltype(_impl_.claim_slashing_enabled_) { false }

  };
  _impl_.peggy_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.peggy_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.contract_source_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.contract_source_hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.bridge_ethereum_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.bridge_ethereum_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.slash_fraction_valset_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.slash_fraction_valset_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.slash_fraction_batch_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.slash_fraction_batch_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.slash_fraction_claim_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.slash_fraction_claim_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.slash_fraction_conflicting_claim_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.slash_fraction_conflicting_claim_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.slash_fraction_bad_eth_signature_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.slash_fraction_bad_eth_signature_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.cosmos_coin_denom_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.cosmos_coin_denom_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.cosmos_coin_erc20_contract_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.cosmos_coin_erc20_contract_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Params::~Params() {
  // @@protoc_insertion_point(destructor:injective.peggy.v1.Params)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Params::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.peggy_id_.Destroy();
  _impl_.contract_source_hash_.Destroy();
  _impl_.bridge_ethereum_address_.Destroy();
  _impl_.slash_fraction_valset_.Destroy();
  _impl_.slash_fraction_batch_.Destroy();
  _impl_.slash_fraction_claim_.Destroy();
  _impl_.slash_fraction_conflicting_claim_.Destroy();
  _impl_.slash_fraction_bad_eth_signature_.Destroy();
  _impl_.cosmos_coin_denom_.Destroy();
  _impl_.cosmos_coin_erc20_contract_.Destroy();
  if (this != internal_default_instance()) delete _impl_.valset_reward_;
}

void Params::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Params::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.peggy.v1.Params)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.peggy_id_.ClearToEmpty();
  _impl_.contract_source_hash_.ClearToEmpty();
  _impl_.bridge_ethereum_address_.ClearToEmpty();
  _impl_.slash_fraction_valset_.ClearToEmpty();
  _impl_.slash_fraction_batch_.ClearToEmpty();
  _impl_.slash_fraction_claim_.ClearToEmpty();
  _impl_.slash_fraction_conflicting_claim_.ClearToEmpty();
  _impl_.slash_fraction_bad_eth_signature_.ClearToEmpty();
  _impl_.cosmos_coin_denom_.ClearToEmpty();
  _impl_.cosmos_coin_erc20_contract_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.valset_reward_ != nullptr);
    _impl_.valset_reward_->Clear();
  }
  ::memset(&_impl_.bridge_chain_id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.claim_slashing_enabled_) -
      reinterpret_cast<char*>(&_impl_.bridge_chain_id_)) + sizeof(_impl_.claim_slashing_enabled_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Params::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string peggy_id = 1 [json_name = "peggyId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_peggy_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.peggy.v1.Params.peggy_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string contract_source_hash = 2 [json_name = "contractSourceHash"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_contract_source_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.peggy.v1.Params.contract_source_hash"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string bridge_ethereum_address = 3 [json_name = "bridgeEthereumAddress"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_bridge_ethereum_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.peggy.v1.Params.bridge_ethereum_address"));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 bridge_chain_id = 4 [json_name = "bridgeChainId"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _impl_.bridge_chain_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 signed_valsets_window = 5 [json_name = "signedValsetsWindow"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _impl_.signed_valsets_window_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 signed_batches_window = 6 [json_name = "signedBatchesWindow"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _impl_.signed_batches_window_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 signed_claims_window = 7 [json_name = "signedClaimsWindow"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 56)) {
          _impl_.signed_claims_window_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 target_batch_timeout = 8 [json_name = "targetBatchTimeout"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 64)) {
          _impl_.target_batch_timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 average_block_time = 9 [json_name = "averageBlockTime"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 72)) {
          _impl_.average_block_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 average_ethereum_block_time = 10 [json_name = "averageEthereumBlockTime"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 80)) {
          _impl_.average_ethereum_block_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes slash_fraction_valset = 11 [json_name = "slashFractionValset", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_slash_fraction_valset();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes slash_fraction_batch = 12 [json_name = "slashFractionBatch", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_slash_fraction_batch();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes slash_fraction_claim = 13 [json_name = "slashFractionClaim", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_slash_fraction_claim();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes slash_fraction_conflicting_claim = 14 [json_name = "slashFractionConflictingClaim", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_slash_fraction_conflicting_claim();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 unbond_slashing_valsets_window = 15 [json_name = "unbondSlashingValsetsWindow"];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 120)) {
          _impl_.unbond_slashing_valsets_window_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes slash_fraction_bad_eth_signature = 16 [json_name = "slashFractionBadEthSignature", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_slash_fraction_bad_eth_signature();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string cosmos_coin_denom = 17 [json_name = "cosmosCoinDenom"];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 138)) {
          auto str = _internal_mutable_cosmos_coin_denom();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.peggy.v1.Params.cosmos_coin_denom"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string cosmos_coin_erc20_contract = 18 [json_name = "cosmosCoinErc20Contract"];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 146)) {
          auto str = _internal_mutable_cosmos_coin_erc20_contract();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.peggy.v1.Params.cosmos_coin_erc20_contract"));
        } else {
          goto handle_unusual;
        }
        continue;
      // bool claim_slashing_enabled = 19 [json_name = "claimSlashingEnabled"];
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 152)) {
          _impl_.claim_slashing_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 bridge_contract_start_height = 20 [json_name = "bridgeContractStartHeight"];
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 160)) {
          _impl_.bridge_contract_start_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .cosmos.base.v1beta1.Coin valset_reward = 21 [json_name = "valsetReward", (.gogoproto.nullable) = false];
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_valset_reward(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Params::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.peggy.v1.Params)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string peggy_id = 1 [json_name = "peggyId"];
  if (!this->_internal_peggy_id().empty()) {
    const std::string& _s = this->_internal_peggy_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.peggy.v1.Params.peggy_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string contract_source_hash = 2 [json_name = "contractSourceHash"];
  if (!this->_internal_contract_source_hash().empty()) {
    const std::string& _s = this->_internal_contract_source_hash();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.peggy.v1.Params.contract_source_hash");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string bridge_ethereum_address = 3 [json_name = "bridgeEthereumAddress"];
  if (!this->_internal_bridge_ethereum_address().empty()) {
    const std::string& _s = this->_internal_bridge_ethereum_address();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.peggy.v1.Params.bridge_ethereum_address");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // uint64 bridge_chain_id = 4 [json_name = "bridgeChainId"];
  if (this->_internal_bridge_chain_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        4, this->_internal_bridge_chain_id(), target);
  }

  // uint64 signed_valsets_window = 5 [json_name = "signedValsetsWindow"];
  if (this->_internal_signed_valsets_window() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        5, this->_internal_signed_valsets_window(), target);
  }

  // uint64 signed_batches_window = 6 [json_name = "signedBatchesWindow"];
  if (this->_internal_signed_batches_window() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        6, this->_internal_signed_batches_window(), target);
  }

  // uint64 signed_claims_window = 7 [json_name = "signedClaimsWindow"];
  if (this->_internal_signed_claims_window() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        7, this->_internal_signed_claims_window(), target);
  }

  // uint64 target_batch_timeout = 8 [json_name = "targetBatchTimeout"];
  if (this->_internal_target_batch_timeout() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        8, this->_internal_target_batch_timeout(), target);
  }

  // uint64 average_block_time = 9 [json_name = "averageBlockTime"];
  if (this->_internal_average_block_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        9, this->_internal_average_block_time(), target);
  }

  // uint64 average_ethereum_block_time = 10 [json_name = "averageEthereumBlockTime"];
  if (this->_internal_average_ethereum_block_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        10, this->_internal_average_ethereum_block_time(), target);
  }

  // bytes slash_fraction_valset = 11 [json_name = "slashFractionValset", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_slash_fraction_valset().empty()) {
    const std::string& _s = this->_internal_slash_fraction_valset();
    target = stream->WriteBytesMaybeAliased(11, _s, target);
  }

  // bytes slash_fraction_batch = 12 [json_name = "slashFractionBatch", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_slash_fraction_batch().empty()) {
    const std::string& _s = this->_internal_slash_fraction_batch();
    target = stream->WriteBytesMaybeAliased(12, _s, target);
  }

  // bytes slash_fraction_claim = 13 [json_name = "slashFractionClaim", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_slash_fraction_claim().empty()) {
    const std::string& _s = this->_internal_slash_fraction_claim();
    target = stream->WriteBytesMaybeAliased(13, _s, target);
  }

  // bytes slash_fraction_conflicting_claim = 14 [json_name = "slashFractionConflictingClaim", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_slash_fraction_conflicting_claim().empty()) {
    const std::string& _s = this->_internal_slash_fraction_conflicting_claim();
    target = stream->WriteBytesMaybeAliased(14, _s, target);
  }

  // uint64 unbond_slashing_valsets_window = 15 [json_name = "unbondSlashingValsetsWindow"];
  if (this->_internal_unbond_slashing_valsets_window() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        15, this->_internal_unbond_slashing_valsets_window(), target);
  }

  // bytes slash_fraction_bad_eth_signature = 16 [json_name = "slashFractionBadEthSignature", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_slash_fraction_bad_eth_signature().empty()) {
    const std::string& _s = this->_internal_slash_fraction_bad_eth_signature();
    target = stream->WriteBytesMaybeAliased(16, _s, target);
  }

  // string cosmos_coin_denom = 17 [json_name = "cosmosCoinDenom"];
  if (!this->_internal_cosmos_coin_denom().empty()) {
    const std::string& _s = this->_internal_cosmos_coin_denom();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.peggy.v1.Params.cosmos_coin_denom");
    target = stream->WriteStringMaybeAliased(17, _s, target);
  }

  // string cosmos_coin_erc20_contract = 18 [json_name = "cosmosCoinErc20Contract"];
  if (!this->_internal_cosmos_coin_erc20_contract().empty()) {
    const std::string& _s = this->_internal_cosmos_coin_erc20_contract();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.peggy.v1.Params.cosmos_coin_erc20_contract");
    target = stream->WriteStringMaybeAliased(18, _s, target);
  }

  // bool claim_slashing_enabled = 19 [json_name = "claimSlashingEnabled"];
  if (this->_internal_claim_slashing_enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        19, this->_internal_claim_slashing_enabled(), target);
  }

  // uint64 bridge_contract_start_height = 20 [json_name = "bridgeContractStartHeight"];
  if (this->_internal_bridge_contract_start_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        20, this->_internal_bridge_contract_start_height(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .cosmos.base.v1beta1.Coin valset_reward = 21 [json_name = "valsetReward", (.gogoproto.nullable) = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(21, _Internal::valset_reward(this),
        _Internal::valset_reward(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.peggy.v1.Params)
  return target;
}

::size_t Params::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.peggy.v1.Params)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string peggy_id = 1 [json_name = "peggyId"];
  if (!this->_internal_peggy_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_peggy_id());
  }

  // string contract_source_hash = 2 [json_name = "contractSourceHash"];
  if (!this->_internal_contract_source_hash().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_contract_source_hash());
  }

  // string bridge_ethereum_address = 3 [json_name = "bridgeEthereumAddress"];
  if (!this->_internal_bridge_ethereum_address().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_bridge_ethereum_address());
  }

  // bytes slash_fraction_valset = 11 [json_name = "slashFractionValset", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_slash_fraction_valset().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_slash_fraction_valset());
  }

  // bytes slash_fraction_batch = 12 [json_name = "slashFractionBatch", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_slash_fraction_batch().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_slash_fraction_batch());
  }

  // bytes slash_fraction_claim = 13 [json_name = "slashFractionClaim", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_slash_fraction_claim().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_slash_fraction_claim());
  }

  // bytes slash_fraction_conflicting_claim = 14 [json_name = "slashFractionConflictingClaim", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_slash_fraction_conflicting_claim().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_slash_fraction_conflicting_claim());
  }

  // bytes slash_fraction_bad_eth_signature = 16 [json_name = "slashFractionBadEthSignature", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_slash_fraction_bad_eth_signature().empty()) {
    total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_slash_fraction_bad_eth_signature());
  }

  // string cosmos_coin_denom = 17 [json_name = "cosmosCoinDenom"];
  if (!this->_internal_cosmos_coin_denom().empty()) {
    total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_cosmos_coin_denom());
  }

  // string cosmos_coin_erc20_contract = 18 [json_name = "cosmosCoinErc20Contract"];
  if (!this->_internal_cosmos_coin_erc20_contract().empty()) {
    total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_cosmos_coin_erc20_contract());
  }

  // .cosmos.base.v1beta1.Coin valset_reward = 21 [json_name = "valsetReward", (.gogoproto.nullable) = false];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.valset_reward_);
  }

  // uint64 bridge_chain_id = 4 [json_name = "bridgeChainId"];
  if (this->_internal_bridge_chain_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_bridge_chain_id());
  }

  // uint64 signed_valsets_window = 5 [json_name = "signedValsetsWindow"];
  if (this->_internal_signed_valsets_window() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_signed_valsets_window());
  }

  // uint64 signed_batches_window = 6 [json_name = "signedBatchesWindow"];
  if (this->_internal_signed_batches_window() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_signed_batches_window());
  }

  // uint64 signed_claims_window = 7 [json_name = "signedClaimsWindow"];
  if (this->_internal_signed_claims_window() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_signed_claims_window());
  }

  // uint64 target_batch_timeout = 8 [json_name = "targetBatchTimeout"];
  if (this->_internal_target_batch_timeout() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_target_batch_timeout());
  }

  // uint64 average_block_time = 9 [json_name = "averageBlockTime"];
  if (this->_internal_average_block_time() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_average_block_time());
  }

  // uint64 average_ethereum_block_time = 10 [json_name = "averageEthereumBlockTime"];
  if (this->_internal_average_ethereum_block_time() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_average_ethereum_block_time());
  }

  // uint64 unbond_slashing_valsets_window = 15 [json_name = "unbondSlashingValsetsWindow"];
  if (this->_internal_unbond_slashing_valsets_window() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_unbond_slashing_valsets_window());
  }

  // uint64 bridge_contract_start_height = 20 [json_name = "bridgeContractStartHeight"];
  if (this->_internal_bridge_contract_start_height() != 0) {
    total_size += 2 + ::_pbi::WireFormatLite::UInt64Size(
                                    this->_internal_bridge_contract_start_height());
  }

  // bool claim_slashing_enabled = 19 [json_name = "claimSlashingEnabled"];
  if (this->_internal_claim_slashing_enabled() != 0) {
    total_size += 3;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Params::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Params::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Params::GetClassData() const { return &_class_data_; }


void Params::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Params*>(&to_msg);
  auto& from = static_cast<const Params&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.peggy.v1.Params)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_peggy_id().empty()) {
    _this->_internal_set_peggy_id(from._internal_peggy_id());
  }
  if (!from._internal_contract_source_hash().empty()) {
    _this->_internal_set_contract_source_hash(from._internal_contract_source_hash());
  }
  if (!from._internal_bridge_ethereum_address().empty()) {
    _this->_internal_set_bridge_ethereum_address(from._internal_bridge_ethereum_address());
  }
  if (!from._internal_slash_fraction_valset().empty()) {
    _this->_internal_set_slash_fraction_valset(from._internal_slash_fraction_valset());
  }
  if (!from._internal_slash_fraction_batch().empty()) {
    _this->_internal_set_slash_fraction_batch(from._internal_slash_fraction_batch());
  }
  if (!from._internal_slash_fraction_claim().empty()) {
    _this->_internal_set_slash_fraction_claim(from._internal_slash_fraction_claim());
  }
  if (!from._internal_slash_fraction_conflicting_claim().empty()) {
    _this->_internal_set_slash_fraction_conflicting_claim(from._internal_slash_fraction_conflicting_claim());
  }
  if (!from._internal_slash_fraction_bad_eth_signature().empty()) {
    _this->_internal_set_slash_fraction_bad_eth_signature(from._internal_slash_fraction_bad_eth_signature());
  }
  if (!from._internal_cosmos_coin_denom().empty()) {
    _this->_internal_set_cosmos_coin_denom(from._internal_cosmos_coin_denom());
  }
  if (!from._internal_cosmos_coin_erc20_contract().empty()) {
    _this->_internal_set_cosmos_coin_erc20_contract(from._internal_cosmos_coin_erc20_contract());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_valset_reward()->::cosmos::base::v1beta1::Coin::MergeFrom(
        from._internal_valset_reward());
  }
  if (from._internal_bridge_chain_id() != 0) {
    _this->_internal_set_bridge_chain_id(from._internal_bridge_chain_id());
  }
  if (from._internal_signed_valsets_window() != 0) {
    _this->_internal_set_signed_valsets_window(from._internal_signed_valsets_window());
  }
  if (from._internal_signed_batches_window() != 0) {
    _this->_internal_set_signed_batches_window(from._internal_signed_batches_window());
  }
  if (from._internal_signed_claims_window() != 0) {
    _this->_internal_set_signed_claims_window(from._internal_signed_claims_window());
  }
  if (from._internal_target_batch_timeout() != 0) {
    _this->_internal_set_target_batch_timeout(from._internal_target_batch_timeout());
  }
  if (from._internal_average_block_time() != 0) {
    _this->_internal_set_average_block_time(from._internal_average_block_time());
  }
  if (from._internal_average_ethereum_block_time() != 0) {
    _this->_internal_set_average_ethereum_block_time(from._internal_average_ethereum_block_time());
  }
  if (from._internal_unbond_slashing_valsets_window() != 0) {
    _this->_internal_set_unbond_slashing_valsets_window(from._internal_unbond_slashing_valsets_window());
  }
  if (from._internal_bridge_contract_start_height() != 0) {
    _this->_internal_set_bridge_contract_start_height(from._internal_bridge_contract_start_height());
  }
  if (from._internal_claim_slashing_enabled() != 0) {
    _this->_internal_set_claim_slashing_enabled(from._internal_claim_slashing_enabled());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Params::CopyFrom(const Params& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.peggy.v1.Params)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Params::IsInitialized() const {
  return true;
}

void Params::InternalSwap(Params* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.peggy_id_, lhs_arena,
                                       &other->_impl_.peggy_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.contract_source_hash_, lhs_arena,
                                       &other->_impl_.contract_source_hash_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.bridge_ethereum_address_, lhs_arena,
                                       &other->_impl_.bridge_ethereum_address_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.slash_fraction_valset_, lhs_arena,
                                       &other->_impl_.slash_fraction_valset_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.slash_fraction_batch_, lhs_arena,
                                       &other->_impl_.slash_fraction_batch_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.slash_fraction_claim_, lhs_arena,
                                       &other->_impl_.slash_fraction_claim_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.slash_fraction_conflicting_claim_, lhs_arena,
                                       &other->_impl_.slash_fraction_conflicting_claim_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.slash_fraction_bad_eth_signature_, lhs_arena,
                                       &other->_impl_.slash_fraction_bad_eth_signature_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.cosmos_coin_denom_, lhs_arena,
                                       &other->_impl_.cosmos_coin_denom_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.cosmos_coin_erc20_contract_, lhs_arena,
                                       &other->_impl_.cosmos_coin_erc20_contract_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Params, _impl_.claim_slashing_enabled_)
      + sizeof(Params::_impl_.claim_slashing_enabled_)
      - PROTOBUF_FIELD_OFFSET(Params, _impl_.valset_reward_)>(
          reinterpret_cast<char*>(&_impl_.valset_reward_),
          reinterpret_cast<char*>(&other->_impl_.valset_reward_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Params::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fpeggy_2fv1_2fparams_2eproto_getter, &descriptor_table_injective_2fpeggy_2fv1_2fparams_2eproto_once,
      file_level_metadata_injective_2fpeggy_2fv1_2fparams_2eproto[0]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace peggy
}  // namespace injective
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::injective::peggy::v1::Params*
Arena::CreateMaybeMessage< ::injective::peggy::v1::Params >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::peggy::v1::Params >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

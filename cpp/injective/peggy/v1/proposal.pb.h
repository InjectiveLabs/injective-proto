// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: injective/peggy/v1/proposal.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_injective_2fpeggy_2fv1_2fproposal_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_injective_2fpeggy_2fv1_2fproposal_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "cosmos_proto/cosmos.pb.h"
#include "gogoproto/gogo.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_injective_2fpeggy_2fv1_2fproposal_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_injective_2fpeggy_2fv1_2fproposal_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_injective_2fpeggy_2fv1_2fproposal_2eproto;
namespace injective {
namespace peggy {
namespace v1 {
class BlacklistEthereumAddressesProposal;
struct BlacklistEthereumAddressesProposalDefaultTypeInternal;
extern BlacklistEthereumAddressesProposalDefaultTypeInternal _BlacklistEthereumAddressesProposal_default_instance_;
class RevokeEthereumBlacklistProposal;
struct RevokeEthereumBlacklistProposalDefaultTypeInternal;
extern RevokeEthereumBlacklistProposalDefaultTypeInternal _RevokeEthereumBlacklistProposal_default_instance_;
}  // namespace v1
}  // namespace peggy
}  // namespace injective
PROTOBUF_NAMESPACE_OPEN
template <>
::injective::peggy::v1::BlacklistEthereumAddressesProposal* Arena::CreateMaybeMessage<::injective::peggy::v1::BlacklistEthereumAddressesProposal>(Arena*);
template <>
::injective::peggy::v1::RevokeEthereumBlacklistProposal* Arena::CreateMaybeMessage<::injective::peggy::v1::RevokeEthereumBlacklistProposal>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace injective {
namespace peggy {
namespace v1 {

// ===================================================================


// -------------------------------------------------------------------

class BlacklistEthereumAddressesProposal final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.peggy.v1.BlacklistEthereumAddressesProposal) */ {
 public:
  inline BlacklistEthereumAddressesProposal() : BlacklistEthereumAddressesProposal(nullptr) {}
  ~BlacklistEthereumAddressesProposal() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR BlacklistEthereumAddressesProposal(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BlacklistEthereumAddressesProposal(const BlacklistEthereumAddressesProposal& from);
  BlacklistEthereumAddressesProposal(BlacklistEthereumAddressesProposal&& from) noexcept
    : BlacklistEthereumAddressesProposal() {
    *this = ::std::move(from);
  }

  inline BlacklistEthereumAddressesProposal& operator=(const BlacklistEthereumAddressesProposal& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlacklistEthereumAddressesProposal& operator=(BlacklistEthereumAddressesProposal&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BlacklistEthereumAddressesProposal& default_instance() {
    return *internal_default_instance();
  }
  static inline const BlacklistEthereumAddressesProposal* internal_default_instance() {
    return reinterpret_cast<const BlacklistEthereumAddressesProposal*>(
               &_BlacklistEthereumAddressesProposal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BlacklistEthereumAddressesProposal& a, BlacklistEthereumAddressesProposal& b) {
    a.Swap(&b);
  }
  inline void Swap(BlacklistEthereumAddressesProposal* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlacklistEthereumAddressesProposal* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BlacklistEthereumAddressesProposal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BlacklistEthereumAddressesProposal>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BlacklistEthereumAddressesProposal& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BlacklistEthereumAddressesProposal& from) {
    BlacklistEthereumAddressesProposal::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlacklistEthereumAddressesProposal* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.peggy.v1.BlacklistEthereumAddressesProposal";
  }
  protected:
  explicit BlacklistEthereumAddressesProposal(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlacklistAddressesFieldNumber = 3,
    kTitleFieldNumber = 1,
    kDescriptionFieldNumber = 2,
  };
  // repeated string blacklist_addresses = 3 [json_name = "blacklistAddresses"];
  int blacklist_addresses_size() const;
  private:
  int _internal_blacklist_addresses_size() const;

  public:
  void clear_blacklist_addresses() ;
  const std::string& blacklist_addresses(int index) const;
  std::string* mutable_blacklist_addresses(int index);
  void set_blacklist_addresses(int index, const std::string& value);
  void set_blacklist_addresses(int index, std::string&& value);
  void set_blacklist_addresses(int index, const char* value);
  void set_blacklist_addresses(int index, const char* value, std::size_t size);
  void set_blacklist_addresses(int index, absl::string_view value);
  std::string* add_blacklist_addresses();
  void add_blacklist_addresses(const std::string& value);
  void add_blacklist_addresses(std::string&& value);
  void add_blacklist_addresses(const char* value);
  void add_blacklist_addresses(const char* value, std::size_t size);
  void add_blacklist_addresses(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& blacklist_addresses() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_blacklist_addresses();

  private:
  const std::string& _internal_blacklist_addresses(int index) const;
  std::string* _internal_add_blacklist_addresses();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_blacklist_addresses() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_blacklist_addresses();

  public:
  // string title = 1 [json_name = "title"];
  void clear_title() ;
  const std::string& title() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_title(Arg_&& arg, Args_... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* ptr);

  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(
      const std::string& value);
  std::string* _internal_mutable_title();

  public:
  // string description = 2 [json_name = "description"];
  void clear_description() ;
  const std::string& description() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_description(Arg_&& arg, Args_... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* ptr);

  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(
      const std::string& value);
  std::string* _internal_mutable_description();

  public:
  // @@protoc_insertion_point(class_scope:injective.peggy.v1.BlacklistEthereumAddressesProposal)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> blacklist_addresses_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2fpeggy_2fv1_2fproposal_2eproto;
};// -------------------------------------------------------------------

class RevokeEthereumBlacklistProposal final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.peggy.v1.RevokeEthereumBlacklistProposal) */ {
 public:
  inline RevokeEthereumBlacklistProposal() : RevokeEthereumBlacklistProposal(nullptr) {}
  ~RevokeEthereumBlacklistProposal() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR RevokeEthereumBlacklistProposal(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RevokeEthereumBlacklistProposal(const RevokeEthereumBlacklistProposal& from);
  RevokeEthereumBlacklistProposal(RevokeEthereumBlacklistProposal&& from) noexcept
    : RevokeEthereumBlacklistProposal() {
    *this = ::std::move(from);
  }

  inline RevokeEthereumBlacklistProposal& operator=(const RevokeEthereumBlacklistProposal& from) {
    CopyFrom(from);
    return *this;
  }
  inline RevokeEthereumBlacklistProposal& operator=(RevokeEthereumBlacklistProposal&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RevokeEthereumBlacklistProposal& default_instance() {
    return *internal_default_instance();
  }
  static inline const RevokeEthereumBlacklistProposal* internal_default_instance() {
    return reinterpret_cast<const RevokeEthereumBlacklistProposal*>(
               &_RevokeEthereumBlacklistProposal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RevokeEthereumBlacklistProposal& a, RevokeEthereumBlacklistProposal& b) {
    a.Swap(&b);
  }
  inline void Swap(RevokeEthereumBlacklistProposal* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RevokeEthereumBlacklistProposal* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RevokeEthereumBlacklistProposal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RevokeEthereumBlacklistProposal>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RevokeEthereumBlacklistProposal& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RevokeEthereumBlacklistProposal& from) {
    RevokeEthereumBlacklistProposal::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RevokeEthereumBlacklistProposal* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.peggy.v1.RevokeEthereumBlacklistProposal";
  }
  protected:
  explicit RevokeEthereumBlacklistProposal(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlacklistAddressesFieldNumber = 3,
    kTitleFieldNumber = 1,
    kDescriptionFieldNumber = 2,
  };
  // repeated string blacklist_addresses = 3 [json_name = "blacklistAddresses"];
  int blacklist_addresses_size() const;
  private:
  int _internal_blacklist_addresses_size() const;

  public:
  void clear_blacklist_addresses() ;
  const std::string& blacklist_addresses(int index) const;
  std::string* mutable_blacklist_addresses(int index);
  void set_blacklist_addresses(int index, const std::string& value);
  void set_blacklist_addresses(int index, std::string&& value);
  void set_blacklist_addresses(int index, const char* value);
  void set_blacklist_addresses(int index, const char* value, std::size_t size);
  void set_blacklist_addresses(int index, absl::string_view value);
  std::string* add_blacklist_addresses();
  void add_blacklist_addresses(const std::string& value);
  void add_blacklist_addresses(std::string&& value);
  void add_blacklist_addresses(const char* value);
  void add_blacklist_addresses(const char* value, std::size_t size);
  void add_blacklist_addresses(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& blacklist_addresses() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_blacklist_addresses();

  private:
  const std::string& _internal_blacklist_addresses(int index) const;
  std::string* _internal_add_blacklist_addresses();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_blacklist_addresses() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_blacklist_addresses();

  public:
  // string title = 1 [json_name = "title"];
  void clear_title() ;
  const std::string& title() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_title(Arg_&& arg, Args_... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* ptr);

  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(
      const std::string& value);
  std::string* _internal_mutable_title();

  public:
  // string description = 2 [json_name = "description"];
  void clear_description() ;
  const std::string& description() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_description(Arg_&& arg, Args_... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* ptr);

  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(
      const std::string& value);
  std::string* _internal_mutable_description();

  public:
  // @@protoc_insertion_point(class_scope:injective.peggy.v1.RevokeEthereumBlacklistProposal)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> blacklist_addresses_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2fpeggy_2fv1_2fproposal_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// BlacklistEthereumAddressesProposal

// string title = 1 [json_name = "title"];
inline void BlacklistEthereumAddressesProposal::clear_title() {
  _impl_.title_.ClearToEmpty();
}
inline const std::string& BlacklistEthereumAddressesProposal::title() const {
  // @@protoc_insertion_point(field_get:injective.peggy.v1.BlacklistEthereumAddressesProposal.title)
  return _internal_title();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void BlacklistEthereumAddressesProposal::set_title(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.title_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.peggy.v1.BlacklistEthereumAddressesProposal.title)
}
inline std::string* BlacklistEthereumAddressesProposal::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:injective.peggy.v1.BlacklistEthereumAddressesProposal.title)
  return _s;
}
inline const std::string& BlacklistEthereumAddressesProposal::_internal_title() const {
  return _impl_.title_.Get();
}
inline void BlacklistEthereumAddressesProposal::_internal_set_title(const std::string& value) {
  ;


  _impl_.title_.Set(value, GetArenaForAllocation());
}
inline std::string* BlacklistEthereumAddressesProposal::_internal_mutable_title() {
  ;
  return _impl_.title_.Mutable( GetArenaForAllocation());
}
inline std::string* BlacklistEthereumAddressesProposal::release_title() {
  // @@protoc_insertion_point(field_release:injective.peggy.v1.BlacklistEthereumAddressesProposal.title)
  return _impl_.title_.Release();
}
inline void BlacklistEthereumAddressesProposal::set_allocated_title(std::string* value) {
  _impl_.title_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.title_.IsDefault()) {
          _impl_.title_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.peggy.v1.BlacklistEthereumAddressesProposal.title)
}

// string description = 2 [json_name = "description"];
inline void BlacklistEthereumAddressesProposal::clear_description() {
  _impl_.description_.ClearToEmpty();
}
inline const std::string& BlacklistEthereumAddressesProposal::description() const {
  // @@protoc_insertion_point(field_get:injective.peggy.v1.BlacklistEthereumAddressesProposal.description)
  return _internal_description();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void BlacklistEthereumAddressesProposal::set_description(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.description_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.peggy.v1.BlacklistEthereumAddressesProposal.description)
}
inline std::string* BlacklistEthereumAddressesProposal::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:injective.peggy.v1.BlacklistEthereumAddressesProposal.description)
  return _s;
}
inline const std::string& BlacklistEthereumAddressesProposal::_internal_description() const {
  return _impl_.description_.Get();
}
inline void BlacklistEthereumAddressesProposal::_internal_set_description(const std::string& value) {
  ;


  _impl_.description_.Set(value, GetArenaForAllocation());
}
inline std::string* BlacklistEthereumAddressesProposal::_internal_mutable_description() {
  ;
  return _impl_.description_.Mutable( GetArenaForAllocation());
}
inline std::string* BlacklistEthereumAddressesProposal::release_description() {
  // @@protoc_insertion_point(field_release:injective.peggy.v1.BlacklistEthereumAddressesProposal.description)
  return _impl_.description_.Release();
}
inline void BlacklistEthereumAddressesProposal::set_allocated_description(std::string* value) {
  _impl_.description_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.description_.IsDefault()) {
          _impl_.description_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.peggy.v1.BlacklistEthereumAddressesProposal.description)
}

// repeated string blacklist_addresses = 3 [json_name = "blacklistAddresses"];
inline int BlacklistEthereumAddressesProposal::_internal_blacklist_addresses_size() const {
  return _impl_.blacklist_addresses_.size();
}
inline int BlacklistEthereumAddressesProposal::blacklist_addresses_size() const {
  return _internal_blacklist_addresses_size();
}
inline void BlacklistEthereumAddressesProposal::clear_blacklist_addresses() {
  _internal_mutable_blacklist_addresses()->Clear();
}
inline std::string* BlacklistEthereumAddressesProposal::add_blacklist_addresses() {
  std::string* _s = _internal_add_blacklist_addresses();
  // @@protoc_insertion_point(field_add_mutable:injective.peggy.v1.BlacklistEthereumAddressesProposal.blacklist_addresses)
  return _s;
}
inline const std::string& BlacklistEthereumAddressesProposal::blacklist_addresses(int index) const {
  // @@protoc_insertion_point(field_get:injective.peggy.v1.BlacklistEthereumAddressesProposal.blacklist_addresses)
  return _internal_blacklist_addresses(index);
}
inline std::string* BlacklistEthereumAddressesProposal::mutable_blacklist_addresses(int index) {
  // @@protoc_insertion_point(field_mutable:injective.peggy.v1.BlacklistEthereumAddressesProposal.blacklist_addresses)
  return _internal_mutable_blacklist_addresses()->Mutable(index);
}
inline void BlacklistEthereumAddressesProposal::set_blacklist_addresses(int index, const std::string& value) {
  _internal_mutable_blacklist_addresses()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:injective.peggy.v1.BlacklistEthereumAddressesProposal.blacklist_addresses)
}
inline void BlacklistEthereumAddressesProposal::set_blacklist_addresses(int index, std::string&& value) {
  _internal_mutable_blacklist_addresses()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:injective.peggy.v1.BlacklistEthereumAddressesProposal.blacklist_addresses)
}
inline void BlacklistEthereumAddressesProposal::set_blacklist_addresses(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_blacklist_addresses()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:injective.peggy.v1.BlacklistEthereumAddressesProposal.blacklist_addresses)
}
inline void BlacklistEthereumAddressesProposal::set_blacklist_addresses(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_blacklist_addresses()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:injective.peggy.v1.BlacklistEthereumAddressesProposal.blacklist_addresses)
}
inline void BlacklistEthereumAddressesProposal::set_blacklist_addresses(int index, absl::string_view value) {
  _internal_mutable_blacklist_addresses()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:injective.peggy.v1.BlacklistEthereumAddressesProposal.blacklist_addresses)
}
inline void BlacklistEthereumAddressesProposal::add_blacklist_addresses(const std::string& value) {
  _internal_mutable_blacklist_addresses()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:injective.peggy.v1.BlacklistEthereumAddressesProposal.blacklist_addresses)
}
inline void BlacklistEthereumAddressesProposal::add_blacklist_addresses(std::string&& value) {
  _internal_mutable_blacklist_addresses()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:injective.peggy.v1.BlacklistEthereumAddressesProposal.blacklist_addresses)
}
inline void BlacklistEthereumAddressesProposal::add_blacklist_addresses(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_blacklist_addresses()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:injective.peggy.v1.BlacklistEthereumAddressesProposal.blacklist_addresses)
}
inline void BlacklistEthereumAddressesProposal::add_blacklist_addresses(const char* value, std::size_t size) {
  _internal_mutable_blacklist_addresses()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:injective.peggy.v1.BlacklistEthereumAddressesProposal.blacklist_addresses)
}
inline void BlacklistEthereumAddressesProposal::add_blacklist_addresses(absl::string_view value) {
  _internal_mutable_blacklist_addresses()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:injective.peggy.v1.BlacklistEthereumAddressesProposal.blacklist_addresses)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
BlacklistEthereumAddressesProposal::blacklist_addresses() const {
  // @@protoc_insertion_point(field_list:injective.peggy.v1.BlacklistEthereumAddressesProposal.blacklist_addresses)
  return _internal_blacklist_addresses();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* BlacklistEthereumAddressesProposal::mutable_blacklist_addresses() {
  // @@protoc_insertion_point(field_mutable_list:injective.peggy.v1.BlacklistEthereumAddressesProposal.blacklist_addresses)
  return _internal_mutable_blacklist_addresses();
}
inline const std::string& BlacklistEthereumAddressesProposal::_internal_blacklist_addresses(int index) const {
  return _internal_blacklist_addresses().Get(index);
}
inline std::string* BlacklistEthereumAddressesProposal::_internal_add_blacklist_addresses() {
  return _internal_mutable_blacklist_addresses()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
BlacklistEthereumAddressesProposal::_internal_blacklist_addresses() const {
  return _impl_.blacklist_addresses_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
BlacklistEthereumAddressesProposal::_internal_mutable_blacklist_addresses() {
  return &_impl_.blacklist_addresses_;
}

// -------------------------------------------------------------------

// RevokeEthereumBlacklistProposal

// string title = 1 [json_name = "title"];
inline void RevokeEthereumBlacklistProposal::clear_title() {
  _impl_.title_.ClearToEmpty();
}
inline const std::string& RevokeEthereumBlacklistProposal::title() const {
  // @@protoc_insertion_point(field_get:injective.peggy.v1.RevokeEthereumBlacklistProposal.title)
  return _internal_title();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RevokeEthereumBlacklistProposal::set_title(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.title_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.peggy.v1.RevokeEthereumBlacklistProposal.title)
}
inline std::string* RevokeEthereumBlacklistProposal::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:injective.peggy.v1.RevokeEthereumBlacklistProposal.title)
  return _s;
}
inline const std::string& RevokeEthereumBlacklistProposal::_internal_title() const {
  return _impl_.title_.Get();
}
inline void RevokeEthereumBlacklistProposal::_internal_set_title(const std::string& value) {
  ;


  _impl_.title_.Set(value, GetArenaForAllocation());
}
inline std::string* RevokeEthereumBlacklistProposal::_internal_mutable_title() {
  ;
  return _impl_.title_.Mutable( GetArenaForAllocation());
}
inline std::string* RevokeEthereumBlacklistProposal::release_title() {
  // @@protoc_insertion_point(field_release:injective.peggy.v1.RevokeEthereumBlacklistProposal.title)
  return _impl_.title_.Release();
}
inline void RevokeEthereumBlacklistProposal::set_allocated_title(std::string* value) {
  _impl_.title_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.title_.IsDefault()) {
          _impl_.title_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.peggy.v1.RevokeEthereumBlacklistProposal.title)
}

// string description = 2 [json_name = "description"];
inline void RevokeEthereumBlacklistProposal::clear_description() {
  _impl_.description_.ClearToEmpty();
}
inline const std::string& RevokeEthereumBlacklistProposal::description() const {
  // @@protoc_insertion_point(field_get:injective.peggy.v1.RevokeEthereumBlacklistProposal.description)
  return _internal_description();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RevokeEthereumBlacklistProposal::set_description(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.description_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.peggy.v1.RevokeEthereumBlacklistProposal.description)
}
inline std::string* RevokeEthereumBlacklistProposal::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:injective.peggy.v1.RevokeEthereumBlacklistProposal.description)
  return _s;
}
inline const std::string& RevokeEthereumBlacklistProposal::_internal_description() const {
  return _impl_.description_.Get();
}
inline void RevokeEthereumBlacklistProposal::_internal_set_description(const std::string& value) {
  ;


  _impl_.description_.Set(value, GetArenaForAllocation());
}
inline std::string* RevokeEthereumBlacklistProposal::_internal_mutable_description() {
  ;
  return _impl_.description_.Mutable( GetArenaForAllocation());
}
inline std::string* RevokeEthereumBlacklistProposal::release_description() {
  // @@protoc_insertion_point(field_release:injective.peggy.v1.RevokeEthereumBlacklistProposal.description)
  return _impl_.description_.Release();
}
inline void RevokeEthereumBlacklistProposal::set_allocated_description(std::string* value) {
  _impl_.description_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.description_.IsDefault()) {
          _impl_.description_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.peggy.v1.RevokeEthereumBlacklistProposal.description)
}

// repeated string blacklist_addresses = 3 [json_name = "blacklistAddresses"];
inline int RevokeEthereumBlacklistProposal::_internal_blacklist_addresses_size() const {
  return _impl_.blacklist_addresses_.size();
}
inline int RevokeEthereumBlacklistProposal::blacklist_addresses_size() const {
  return _internal_blacklist_addresses_size();
}
inline void RevokeEthereumBlacklistProposal::clear_blacklist_addresses() {
  _internal_mutable_blacklist_addresses()->Clear();
}
inline std::string* RevokeEthereumBlacklistProposal::add_blacklist_addresses() {
  std::string* _s = _internal_add_blacklist_addresses();
  // @@protoc_insertion_point(field_add_mutable:injective.peggy.v1.RevokeEthereumBlacklistProposal.blacklist_addresses)
  return _s;
}
inline const std::string& RevokeEthereumBlacklistProposal::blacklist_addresses(int index) const {
  // @@protoc_insertion_point(field_get:injective.peggy.v1.RevokeEthereumBlacklistProposal.blacklist_addresses)
  return _internal_blacklist_addresses(index);
}
inline std::string* RevokeEthereumBlacklistProposal::mutable_blacklist_addresses(int index) {
  // @@protoc_insertion_point(field_mutable:injective.peggy.v1.RevokeEthereumBlacklistProposal.blacklist_addresses)
  return _internal_mutable_blacklist_addresses()->Mutable(index);
}
inline void RevokeEthereumBlacklistProposal::set_blacklist_addresses(int index, const std::string& value) {
  _internal_mutable_blacklist_addresses()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:injective.peggy.v1.RevokeEthereumBlacklistProposal.blacklist_addresses)
}
inline void RevokeEthereumBlacklistProposal::set_blacklist_addresses(int index, std::string&& value) {
  _internal_mutable_blacklist_addresses()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:injective.peggy.v1.RevokeEthereumBlacklistProposal.blacklist_addresses)
}
inline void RevokeEthereumBlacklistProposal::set_blacklist_addresses(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_blacklist_addresses()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:injective.peggy.v1.RevokeEthereumBlacklistProposal.blacklist_addresses)
}
inline void RevokeEthereumBlacklistProposal::set_blacklist_addresses(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_blacklist_addresses()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:injective.peggy.v1.RevokeEthereumBlacklistProposal.blacklist_addresses)
}
inline void RevokeEthereumBlacklistProposal::set_blacklist_addresses(int index, absl::string_view value) {
  _internal_mutable_blacklist_addresses()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:injective.peggy.v1.RevokeEthereumBlacklistProposal.blacklist_addresses)
}
inline void RevokeEthereumBlacklistProposal::add_blacklist_addresses(const std::string& value) {
  _internal_mutable_blacklist_addresses()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:injective.peggy.v1.RevokeEthereumBlacklistProposal.blacklist_addresses)
}
inline void RevokeEthereumBlacklistProposal::add_blacklist_addresses(std::string&& value) {
  _internal_mutable_blacklist_addresses()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:injective.peggy.v1.RevokeEthereumBlacklistProposal.blacklist_addresses)
}
inline void RevokeEthereumBlacklistProposal::add_blacklist_addresses(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_blacklist_addresses()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:injective.peggy.v1.RevokeEthereumBlacklistProposal.blacklist_addresses)
}
inline void RevokeEthereumBlacklistProposal::add_blacklist_addresses(const char* value, std::size_t size) {
  _internal_mutable_blacklist_addresses()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:injective.peggy.v1.RevokeEthereumBlacklistProposal.blacklist_addresses)
}
inline void RevokeEthereumBlacklistProposal::add_blacklist_addresses(absl::string_view value) {
  _internal_mutable_blacklist_addresses()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:injective.peggy.v1.RevokeEthereumBlacklistProposal.blacklist_addresses)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
RevokeEthereumBlacklistProposal::blacklist_addresses() const {
  // @@protoc_insertion_point(field_list:injective.peggy.v1.RevokeEthereumBlacklistProposal.blacklist_addresses)
  return _internal_blacklist_addresses();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* RevokeEthereumBlacklistProposal::mutable_blacklist_addresses() {
  // @@protoc_insertion_point(field_mutable_list:injective.peggy.v1.RevokeEthereumBlacklistProposal.blacklist_addresses)
  return _internal_mutable_blacklist_addresses();
}
inline const std::string& RevokeEthereumBlacklistProposal::_internal_blacklist_addresses(int index) const {
  return _internal_blacklist_addresses().Get(index);
}
inline std::string* RevokeEthereumBlacklistProposal::_internal_add_blacklist_addresses() {
  return _internal_mutable_blacklist_addresses()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
RevokeEthereumBlacklistProposal::_internal_blacklist_addresses() const {
  return _impl_.blacklist_addresses_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
RevokeEthereumBlacklistProposal::_internal_mutable_blacklist_addresses() {
  return &_impl_.blacklist_addresses_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace peggy
}  // namespace injective


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_injective_2fpeggy_2fv1_2fproposal_2eproto_2epb_2eh

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: injective/peggy/v1/types.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_injective_2fpeggy_2fv1_2ftypes_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_injective_2fpeggy_2fv1_2ftypes_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "gogoproto/gogo.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_injective_2fpeggy_2fv1_2ftypes_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_injective_2fpeggy_2fv1_2ftypes_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_injective_2fpeggy_2fv1_2ftypes_2eproto;
namespace injective {
namespace peggy {
namespace v1 {
class BridgeValidator;
struct BridgeValidatorDefaultTypeInternal;
extern BridgeValidatorDefaultTypeInternal _BridgeValidator_default_instance_;
class ERC20ToDenom;
struct ERC20ToDenomDefaultTypeInternal;
extern ERC20ToDenomDefaultTypeInternal _ERC20ToDenom_default_instance_;
class LastClaimEvent;
struct LastClaimEventDefaultTypeInternal;
extern LastClaimEventDefaultTypeInternal _LastClaimEvent_default_instance_;
class LastObservedEthereumBlockHeight;
struct LastObservedEthereumBlockHeightDefaultTypeInternal;
extern LastObservedEthereumBlockHeightDefaultTypeInternal _LastObservedEthereumBlockHeight_default_instance_;
class Valset;
struct ValsetDefaultTypeInternal;
extern ValsetDefaultTypeInternal _Valset_default_instance_;
}  // namespace v1
}  // namespace peggy
}  // namespace injective
PROTOBUF_NAMESPACE_OPEN
template <>
::injective::peggy::v1::BridgeValidator* Arena::CreateMaybeMessage<::injective::peggy::v1::BridgeValidator>(Arena*);
template <>
::injective::peggy::v1::ERC20ToDenom* Arena::CreateMaybeMessage<::injective::peggy::v1::ERC20ToDenom>(Arena*);
template <>
::injective::peggy::v1::LastClaimEvent* Arena::CreateMaybeMessage<::injective::peggy::v1::LastClaimEvent>(Arena*);
template <>
::injective::peggy::v1::LastObservedEthereumBlockHeight* Arena::CreateMaybeMessage<::injective::peggy::v1::LastObservedEthereumBlockHeight>(Arena*);
template <>
::injective::peggy::v1::Valset* Arena::CreateMaybeMessage<::injective::peggy::v1::Valset>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace injective {
namespace peggy {
namespace v1 {

// ===================================================================


// -------------------------------------------------------------------

class BridgeValidator final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.peggy.v1.BridgeValidator) */ {
 public:
  inline BridgeValidator() : BridgeValidator(nullptr) {}
  ~BridgeValidator() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR BridgeValidator(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BridgeValidator(const BridgeValidator& from);
  BridgeValidator(BridgeValidator&& from) noexcept
    : BridgeValidator() {
    *this = ::std::move(from);
  }

  inline BridgeValidator& operator=(const BridgeValidator& from) {
    CopyFrom(from);
    return *this;
  }
  inline BridgeValidator& operator=(BridgeValidator&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BridgeValidator& default_instance() {
    return *internal_default_instance();
  }
  static inline const BridgeValidator* internal_default_instance() {
    return reinterpret_cast<const BridgeValidator*>(
               &_BridgeValidator_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BridgeValidator& a, BridgeValidator& b) {
    a.Swap(&b);
  }
  inline void Swap(BridgeValidator* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BridgeValidator* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BridgeValidator* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BridgeValidator>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BridgeValidator& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BridgeValidator& from) {
    BridgeValidator::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BridgeValidator* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.peggy.v1.BridgeValidator";
  }
  protected:
  explicit BridgeValidator(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEthereumAddressFieldNumber = 2,
    kPowerFieldNumber = 1,
  };
  // string ethereum_address = 2 [json_name = "ethereumAddress"];
  void clear_ethereum_address() ;
  const std::string& ethereum_address() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_ethereum_address(Arg_&& arg, Args_... args);
  std::string* mutable_ethereum_address();
  PROTOBUF_NODISCARD std::string* release_ethereum_address();
  void set_allocated_ethereum_address(std::string* ptr);

  private:
  const std::string& _internal_ethereum_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ethereum_address(
      const std::string& value);
  std::string* _internal_mutable_ethereum_address();

  public:
  // uint64 power = 1 [json_name = "power"];
  void clear_power() ;
  ::uint64_t power() const;
  void set_power(::uint64_t value);

  private:
  ::uint64_t _internal_power() const;
  void _internal_set_power(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:injective.peggy.v1.BridgeValidator)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ethereum_address_;
    ::uint64_t power_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2fpeggy_2fv1_2ftypes_2eproto;
};// -------------------------------------------------------------------

class Valset final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.peggy.v1.Valset) */ {
 public:
  inline Valset() : Valset(nullptr) {}
  ~Valset() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Valset(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Valset(const Valset& from);
  Valset(Valset&& from) noexcept
    : Valset() {
    *this = ::std::move(from);
  }

  inline Valset& operator=(const Valset& from) {
    CopyFrom(from);
    return *this;
  }
  inline Valset& operator=(Valset&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Valset& default_instance() {
    return *internal_default_instance();
  }
  static inline const Valset* internal_default_instance() {
    return reinterpret_cast<const Valset*>(
               &_Valset_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Valset& a, Valset& b) {
    a.Swap(&b);
  }
  inline void Swap(Valset* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Valset* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Valset* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Valset>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Valset& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Valset& from) {
    Valset::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Valset* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.peggy.v1.Valset";
  }
  protected:
  explicit Valset(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMembersFieldNumber = 2,
    kRewardAmountFieldNumber = 4,
    kRewardTokenFieldNumber = 5,
    kNonceFieldNumber = 1,
    kHeightFieldNumber = 3,
  };
  // repeated .injective.peggy.v1.BridgeValidator members = 2 [json_name = "members"];
  int members_size() const;
  private:
  int _internal_members_size() const;

  public:
  void clear_members() ;
  ::injective::peggy::v1::BridgeValidator* mutable_members(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::peggy::v1::BridgeValidator >*
      mutable_members();
  private:
  const ::injective::peggy::v1::BridgeValidator& _internal_members(int index) const;
  ::injective::peggy::v1::BridgeValidator* _internal_add_members();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::peggy::v1::BridgeValidator>& _internal_members() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::peggy::v1::BridgeValidator>* _internal_mutable_members();
  public:
  const ::injective::peggy::v1::BridgeValidator& members(int index) const;
  ::injective::peggy::v1::BridgeValidator* add_members();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::peggy::v1::BridgeValidator >&
      members() const;
  // string reward_amount = 4 [json_name = "rewardAmount", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int"];
  void clear_reward_amount() ;
  const std::string& reward_amount() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_reward_amount(Arg_&& arg, Args_... args);
  std::string* mutable_reward_amount();
  PROTOBUF_NODISCARD std::string* release_reward_amount();
  void set_allocated_reward_amount(std::string* ptr);

  private:
  const std::string& _internal_reward_amount() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reward_amount(
      const std::string& value);
  std::string* _internal_mutable_reward_amount();

  public:
  // string reward_token = 5 [json_name = "rewardToken"];
  void clear_reward_token() ;
  const std::string& reward_token() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_reward_token(Arg_&& arg, Args_... args);
  std::string* mutable_reward_token();
  PROTOBUF_NODISCARD std::string* release_reward_token();
  void set_allocated_reward_token(std::string* ptr);

  private:
  const std::string& _internal_reward_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reward_token(
      const std::string& value);
  std::string* _internal_mutable_reward_token();

  public:
  // uint64 nonce = 1 [json_name = "nonce"];
  void clear_nonce() ;
  ::uint64_t nonce() const;
  void set_nonce(::uint64_t value);

  private:
  ::uint64_t _internal_nonce() const;
  void _internal_set_nonce(::uint64_t value);

  public:
  // uint64 height = 3 [json_name = "height"];
  void clear_height() ;
  ::uint64_t height() const;
  void set_height(::uint64_t value);

  private:
  ::uint64_t _internal_height() const;
  void _internal_set_height(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:injective.peggy.v1.Valset)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::peggy::v1::BridgeValidator > members_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reward_amount_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reward_token_;
    ::uint64_t nonce_;
    ::uint64_t height_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2fpeggy_2fv1_2ftypes_2eproto;
};// -------------------------------------------------------------------

class LastObservedEthereumBlockHeight final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.peggy.v1.LastObservedEthereumBlockHeight) */ {
 public:
  inline LastObservedEthereumBlockHeight() : LastObservedEthereumBlockHeight(nullptr) {}
  ~LastObservedEthereumBlockHeight() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR LastObservedEthereumBlockHeight(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LastObservedEthereumBlockHeight(const LastObservedEthereumBlockHeight& from);
  LastObservedEthereumBlockHeight(LastObservedEthereumBlockHeight&& from) noexcept
    : LastObservedEthereumBlockHeight() {
    *this = ::std::move(from);
  }

  inline LastObservedEthereumBlockHeight& operator=(const LastObservedEthereumBlockHeight& from) {
    CopyFrom(from);
    return *this;
  }
  inline LastObservedEthereumBlockHeight& operator=(LastObservedEthereumBlockHeight&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LastObservedEthereumBlockHeight& default_instance() {
    return *internal_default_instance();
  }
  static inline const LastObservedEthereumBlockHeight* internal_default_instance() {
    return reinterpret_cast<const LastObservedEthereumBlockHeight*>(
               &_LastObservedEthereumBlockHeight_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(LastObservedEthereumBlockHeight& a, LastObservedEthereumBlockHeight& b) {
    a.Swap(&b);
  }
  inline void Swap(LastObservedEthereumBlockHeight* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LastObservedEthereumBlockHeight* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LastObservedEthereumBlockHeight* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LastObservedEthereumBlockHeight>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LastObservedEthereumBlockHeight& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LastObservedEthereumBlockHeight& from) {
    LastObservedEthereumBlockHeight::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LastObservedEthereumBlockHeight* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.peggy.v1.LastObservedEthereumBlockHeight";
  }
  protected:
  explicit LastObservedEthereumBlockHeight(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCosmosBlockHeightFieldNumber = 1,
    kEthereumBlockHeightFieldNumber = 2,
  };
  // uint64 cosmos_block_height = 1 [json_name = "cosmosBlockHeight"];
  void clear_cosmos_block_height() ;
  ::uint64_t cosmos_block_height() const;
  void set_cosmos_block_height(::uint64_t value);

  private:
  ::uint64_t _internal_cosmos_block_height() const;
  void _internal_set_cosmos_block_height(::uint64_t value);

  public:
  // uint64 ethereum_block_height = 2 [json_name = "ethereumBlockHeight"];
  void clear_ethereum_block_height() ;
  ::uint64_t ethereum_block_height() const;
  void set_ethereum_block_height(::uint64_t value);

  private:
  ::uint64_t _internal_ethereum_block_height() const;
  void _internal_set_ethereum_block_height(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:injective.peggy.v1.LastObservedEthereumBlockHeight)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::uint64_t cosmos_block_height_;
    ::uint64_t ethereum_block_height_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2fpeggy_2fv1_2ftypes_2eproto;
};// -------------------------------------------------------------------

class LastClaimEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.peggy.v1.LastClaimEvent) */ {
 public:
  inline LastClaimEvent() : LastClaimEvent(nullptr) {}
  ~LastClaimEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR LastClaimEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LastClaimEvent(const LastClaimEvent& from);
  LastClaimEvent(LastClaimEvent&& from) noexcept
    : LastClaimEvent() {
    *this = ::std::move(from);
  }

  inline LastClaimEvent& operator=(const LastClaimEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline LastClaimEvent& operator=(LastClaimEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LastClaimEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const LastClaimEvent* internal_default_instance() {
    return reinterpret_cast<const LastClaimEvent*>(
               &_LastClaimEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(LastClaimEvent& a, LastClaimEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(LastClaimEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LastClaimEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LastClaimEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LastClaimEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LastClaimEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LastClaimEvent& from) {
    LastClaimEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LastClaimEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.peggy.v1.LastClaimEvent";
  }
  protected:
  explicit LastClaimEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEthereumEventNonceFieldNumber = 1,
    kEthereumEventHeightFieldNumber = 2,
  };
  // uint64 ethereum_event_nonce = 1 [json_name = "ethereumEventNonce"];
  void clear_ethereum_event_nonce() ;
  ::uint64_t ethereum_event_nonce() const;
  void set_ethereum_event_nonce(::uint64_t value);

  private:
  ::uint64_t _internal_ethereum_event_nonce() const;
  void _internal_set_ethereum_event_nonce(::uint64_t value);

  public:
  // uint64 ethereum_event_height = 2 [json_name = "ethereumEventHeight"];
  void clear_ethereum_event_height() ;
  ::uint64_t ethereum_event_height() const;
  void set_ethereum_event_height(::uint64_t value);

  private:
  ::uint64_t _internal_ethereum_event_height() const;
  void _internal_set_ethereum_event_height(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:injective.peggy.v1.LastClaimEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::uint64_t ethereum_event_nonce_;
    ::uint64_t ethereum_event_height_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2fpeggy_2fv1_2ftypes_2eproto;
};// -------------------------------------------------------------------

class ERC20ToDenom final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.peggy.v1.ERC20ToDenom) */ {
 public:
  inline ERC20ToDenom() : ERC20ToDenom(nullptr) {}
  ~ERC20ToDenom() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ERC20ToDenom(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ERC20ToDenom(const ERC20ToDenom& from);
  ERC20ToDenom(ERC20ToDenom&& from) noexcept
    : ERC20ToDenom() {
    *this = ::std::move(from);
  }

  inline ERC20ToDenom& operator=(const ERC20ToDenom& from) {
    CopyFrom(from);
    return *this;
  }
  inline ERC20ToDenom& operator=(ERC20ToDenom&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ERC20ToDenom& default_instance() {
    return *internal_default_instance();
  }
  static inline const ERC20ToDenom* internal_default_instance() {
    return reinterpret_cast<const ERC20ToDenom*>(
               &_ERC20ToDenom_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ERC20ToDenom& a, ERC20ToDenom& b) {
    a.Swap(&b);
  }
  inline void Swap(ERC20ToDenom* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ERC20ToDenom* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ERC20ToDenom* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ERC20ToDenom>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ERC20ToDenom& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ERC20ToDenom& from) {
    ERC20ToDenom::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ERC20ToDenom* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.peggy.v1.ERC20ToDenom";
  }
  protected:
  explicit ERC20ToDenom(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErc20FieldNumber = 1,
    kDenomFieldNumber = 2,
  };
  // string erc20 = 1 [json_name = "erc20"];
  void clear_erc20() ;
  const std::string& erc20() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_erc20(Arg_&& arg, Args_... args);
  std::string* mutable_erc20();
  PROTOBUF_NODISCARD std::string* release_erc20();
  void set_allocated_erc20(std::string* ptr);

  private:
  const std::string& _internal_erc20() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_erc20(
      const std::string& value);
  std::string* _internal_mutable_erc20();

  public:
  // string denom = 2 [json_name = "denom"];
  void clear_denom() ;
  const std::string& denom() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_denom(Arg_&& arg, Args_... args);
  std::string* mutable_denom();
  PROTOBUF_NODISCARD std::string* release_denom();
  void set_allocated_denom(std::string* ptr);

  private:
  const std::string& _internal_denom() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_denom(
      const std::string& value);
  std::string* _internal_mutable_denom();

  public:
  // @@protoc_insertion_point(class_scope:injective.peggy.v1.ERC20ToDenom)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr erc20_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr denom_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2fpeggy_2fv1_2ftypes_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// BridgeValidator

// uint64 power = 1 [json_name = "power"];
inline void BridgeValidator::clear_power() {
  _impl_.power_ = ::uint64_t{0u};
}
inline ::uint64_t BridgeValidator::power() const {
  // @@protoc_insertion_point(field_get:injective.peggy.v1.BridgeValidator.power)
  return _internal_power();
}
inline void BridgeValidator::set_power(::uint64_t value) {
  _internal_set_power(value);
  // @@protoc_insertion_point(field_set:injective.peggy.v1.BridgeValidator.power)
}
inline ::uint64_t BridgeValidator::_internal_power() const {
  return _impl_.power_;
}
inline void BridgeValidator::_internal_set_power(::uint64_t value) {
  ;
  _impl_.power_ = value;
}

// string ethereum_address = 2 [json_name = "ethereumAddress"];
inline void BridgeValidator::clear_ethereum_address() {
  _impl_.ethereum_address_.ClearToEmpty();
}
inline const std::string& BridgeValidator::ethereum_address() const {
  // @@protoc_insertion_point(field_get:injective.peggy.v1.BridgeValidator.ethereum_address)
  return _internal_ethereum_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void BridgeValidator::set_ethereum_address(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.ethereum_address_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.peggy.v1.BridgeValidator.ethereum_address)
}
inline std::string* BridgeValidator::mutable_ethereum_address() {
  std::string* _s = _internal_mutable_ethereum_address();
  // @@protoc_insertion_point(field_mutable:injective.peggy.v1.BridgeValidator.ethereum_address)
  return _s;
}
inline const std::string& BridgeValidator::_internal_ethereum_address() const {
  return _impl_.ethereum_address_.Get();
}
inline void BridgeValidator::_internal_set_ethereum_address(const std::string& value) {
  ;


  _impl_.ethereum_address_.Set(value, GetArenaForAllocation());
}
inline std::string* BridgeValidator::_internal_mutable_ethereum_address() {
  ;
  return _impl_.ethereum_address_.Mutable( GetArenaForAllocation());
}
inline std::string* BridgeValidator::release_ethereum_address() {
  // @@protoc_insertion_point(field_release:injective.peggy.v1.BridgeValidator.ethereum_address)
  return _impl_.ethereum_address_.Release();
}
inline void BridgeValidator::set_allocated_ethereum_address(std::string* value) {
  _impl_.ethereum_address_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.ethereum_address_.IsDefault()) {
          _impl_.ethereum_address_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.peggy.v1.BridgeValidator.ethereum_address)
}

// -------------------------------------------------------------------

// Valset

// uint64 nonce = 1 [json_name = "nonce"];
inline void Valset::clear_nonce() {
  _impl_.nonce_ = ::uint64_t{0u};
}
inline ::uint64_t Valset::nonce() const {
  // @@protoc_insertion_point(field_get:injective.peggy.v1.Valset.nonce)
  return _internal_nonce();
}
inline void Valset::set_nonce(::uint64_t value) {
  _internal_set_nonce(value);
  // @@protoc_insertion_point(field_set:injective.peggy.v1.Valset.nonce)
}
inline ::uint64_t Valset::_internal_nonce() const {
  return _impl_.nonce_;
}
inline void Valset::_internal_set_nonce(::uint64_t value) {
  ;
  _impl_.nonce_ = value;
}

// repeated .injective.peggy.v1.BridgeValidator members = 2 [json_name = "members"];
inline int Valset::_internal_members_size() const {
  return _impl_.members_.size();
}
inline int Valset::members_size() const {
  return _internal_members_size();
}
inline void Valset::clear_members() {
  _internal_mutable_members()->Clear();
}
inline ::injective::peggy::v1::BridgeValidator* Valset::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:injective.peggy.v1.Valset.members)
  return _internal_mutable_members()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::peggy::v1::BridgeValidator >*
Valset::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:injective.peggy.v1.Valset.members)
  return _internal_mutable_members();
}
inline const ::injective::peggy::v1::BridgeValidator& Valset::_internal_members(int index) const {
  return _internal_members().Get(index);
}
inline const ::injective::peggy::v1::BridgeValidator& Valset::members(int index) const {
  // @@protoc_insertion_point(field_get:injective.peggy.v1.Valset.members)
  return _internal_members(index);
}
inline ::injective::peggy::v1::BridgeValidator* Valset::_internal_add_members() {
  return _internal_mutable_members()->Add();
}
inline ::injective::peggy::v1::BridgeValidator* Valset::add_members() {
  ::injective::peggy::v1::BridgeValidator* _add = _internal_add_members();
  // @@protoc_insertion_point(field_add:injective.peggy.v1.Valset.members)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::peggy::v1::BridgeValidator >&
Valset::members() const {
  // @@protoc_insertion_point(field_list:injective.peggy.v1.Valset.members)
  return _internal_members();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::peggy::v1::BridgeValidator>&
Valset::_internal_members() const {
  return _impl_.members_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::peggy::v1::BridgeValidator>*
Valset::_internal_mutable_members() {
  return &_impl_.members_;
}

// uint64 height = 3 [json_name = "height"];
inline void Valset::clear_height() {
  _impl_.height_ = ::uint64_t{0u};
}
inline ::uint64_t Valset::height() const {
  // @@protoc_insertion_point(field_get:injective.peggy.v1.Valset.height)
  return _internal_height();
}
inline void Valset::set_height(::uint64_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:injective.peggy.v1.Valset.height)
}
inline ::uint64_t Valset::_internal_height() const {
  return _impl_.height_;
}
inline void Valset::_internal_set_height(::uint64_t value) {
  ;
  _impl_.height_ = value;
}

// string reward_amount = 4 [json_name = "rewardAmount", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int"];
inline void Valset::clear_reward_amount() {
  _impl_.reward_amount_.ClearToEmpty();
}
inline const std::string& Valset::reward_amount() const {
  // @@protoc_insertion_point(field_get:injective.peggy.v1.Valset.reward_amount)
  return _internal_reward_amount();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Valset::set_reward_amount(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.reward_amount_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.peggy.v1.Valset.reward_amount)
}
inline std::string* Valset::mutable_reward_amount() {
  std::string* _s = _internal_mutable_reward_amount();
  // @@protoc_insertion_point(field_mutable:injective.peggy.v1.Valset.reward_amount)
  return _s;
}
inline const std::string& Valset::_internal_reward_amount() const {
  return _impl_.reward_amount_.Get();
}
inline void Valset::_internal_set_reward_amount(const std::string& value) {
  ;


  _impl_.reward_amount_.Set(value, GetArenaForAllocation());
}
inline std::string* Valset::_internal_mutable_reward_amount() {
  ;
  return _impl_.reward_amount_.Mutable( GetArenaForAllocation());
}
inline std::string* Valset::release_reward_amount() {
  // @@protoc_insertion_point(field_release:injective.peggy.v1.Valset.reward_amount)
  return _impl_.reward_amount_.Release();
}
inline void Valset::set_allocated_reward_amount(std::string* value) {
  _impl_.reward_amount_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.reward_amount_.IsDefault()) {
          _impl_.reward_amount_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.peggy.v1.Valset.reward_amount)
}

// string reward_token = 5 [json_name = "rewardToken"];
inline void Valset::clear_reward_token() {
  _impl_.reward_token_.ClearToEmpty();
}
inline const std::string& Valset::reward_token() const {
  // @@protoc_insertion_point(field_get:injective.peggy.v1.Valset.reward_token)
  return _internal_reward_token();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Valset::set_reward_token(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.reward_token_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.peggy.v1.Valset.reward_token)
}
inline std::string* Valset::mutable_reward_token() {
  std::string* _s = _internal_mutable_reward_token();
  // @@protoc_insertion_point(field_mutable:injective.peggy.v1.Valset.reward_token)
  return _s;
}
inline const std::string& Valset::_internal_reward_token() const {
  return _impl_.reward_token_.Get();
}
inline void Valset::_internal_set_reward_token(const std::string& value) {
  ;


  _impl_.reward_token_.Set(value, GetArenaForAllocation());
}
inline std::string* Valset::_internal_mutable_reward_token() {
  ;
  return _impl_.reward_token_.Mutable( GetArenaForAllocation());
}
inline std::string* Valset::release_reward_token() {
  // @@protoc_insertion_point(field_release:injective.peggy.v1.Valset.reward_token)
  return _impl_.reward_token_.Release();
}
inline void Valset::set_allocated_reward_token(std::string* value) {
  _impl_.reward_token_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.reward_token_.IsDefault()) {
          _impl_.reward_token_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.peggy.v1.Valset.reward_token)
}

// -------------------------------------------------------------------

// LastObservedEthereumBlockHeight

// uint64 cosmos_block_height = 1 [json_name = "cosmosBlockHeight"];
inline void LastObservedEthereumBlockHeight::clear_cosmos_block_height() {
  _impl_.cosmos_block_height_ = ::uint64_t{0u};
}
inline ::uint64_t LastObservedEthereumBlockHeight::cosmos_block_height() const {
  // @@protoc_insertion_point(field_get:injective.peggy.v1.LastObservedEthereumBlockHeight.cosmos_block_height)
  return _internal_cosmos_block_height();
}
inline void LastObservedEthereumBlockHeight::set_cosmos_block_height(::uint64_t value) {
  _internal_set_cosmos_block_height(value);
  // @@protoc_insertion_point(field_set:injective.peggy.v1.LastObservedEthereumBlockHeight.cosmos_block_height)
}
inline ::uint64_t LastObservedEthereumBlockHeight::_internal_cosmos_block_height() const {
  return _impl_.cosmos_block_height_;
}
inline void LastObservedEthereumBlockHeight::_internal_set_cosmos_block_height(::uint64_t value) {
  ;
  _impl_.cosmos_block_height_ = value;
}

// uint64 ethereum_block_height = 2 [json_name = "ethereumBlockHeight"];
inline void LastObservedEthereumBlockHeight::clear_ethereum_block_height() {
  _impl_.ethereum_block_height_ = ::uint64_t{0u};
}
inline ::uint64_t LastObservedEthereumBlockHeight::ethereum_block_height() const {
  // @@protoc_insertion_point(field_get:injective.peggy.v1.LastObservedEthereumBlockHeight.ethereum_block_height)
  return _internal_ethereum_block_height();
}
inline void LastObservedEthereumBlockHeight::set_ethereum_block_height(::uint64_t value) {
  _internal_set_ethereum_block_height(value);
  // @@protoc_insertion_point(field_set:injective.peggy.v1.LastObservedEthereumBlockHeight.ethereum_block_height)
}
inline ::uint64_t LastObservedEthereumBlockHeight::_internal_ethereum_block_height() const {
  return _impl_.ethereum_block_height_;
}
inline void LastObservedEthereumBlockHeight::_internal_set_ethereum_block_height(::uint64_t value) {
  ;
  _impl_.ethereum_block_height_ = value;
}

// -------------------------------------------------------------------

// LastClaimEvent

// uint64 ethereum_event_nonce = 1 [json_name = "ethereumEventNonce"];
inline void LastClaimEvent::clear_ethereum_event_nonce() {
  _impl_.ethereum_event_nonce_ = ::uint64_t{0u};
}
inline ::uint64_t LastClaimEvent::ethereum_event_nonce() const {
  // @@protoc_insertion_point(field_get:injective.peggy.v1.LastClaimEvent.ethereum_event_nonce)
  return _internal_ethereum_event_nonce();
}
inline void LastClaimEvent::set_ethereum_event_nonce(::uint64_t value) {
  _internal_set_ethereum_event_nonce(value);
  // @@protoc_insertion_point(field_set:injective.peggy.v1.LastClaimEvent.ethereum_event_nonce)
}
inline ::uint64_t LastClaimEvent::_internal_ethereum_event_nonce() const {
  return _impl_.ethereum_event_nonce_;
}
inline void LastClaimEvent::_internal_set_ethereum_event_nonce(::uint64_t value) {
  ;
  _impl_.ethereum_event_nonce_ = value;
}

// uint64 ethereum_event_height = 2 [json_name = "ethereumEventHeight"];
inline void LastClaimEvent::clear_ethereum_event_height() {
  _impl_.ethereum_event_height_ = ::uint64_t{0u};
}
inline ::uint64_t LastClaimEvent::ethereum_event_height() const {
  // @@protoc_insertion_point(field_get:injective.peggy.v1.LastClaimEvent.ethereum_event_height)
  return _internal_ethereum_event_height();
}
inline void LastClaimEvent::set_ethereum_event_height(::uint64_t value) {
  _internal_set_ethereum_event_height(value);
  // @@protoc_insertion_point(field_set:injective.peggy.v1.LastClaimEvent.ethereum_event_height)
}
inline ::uint64_t LastClaimEvent::_internal_ethereum_event_height() const {
  return _impl_.ethereum_event_height_;
}
inline void LastClaimEvent::_internal_set_ethereum_event_height(::uint64_t value) {
  ;
  _impl_.ethereum_event_height_ = value;
}

// -------------------------------------------------------------------

// ERC20ToDenom

// string erc20 = 1 [json_name = "erc20"];
inline void ERC20ToDenom::clear_erc20() {
  _impl_.erc20_.ClearToEmpty();
}
inline const std::string& ERC20ToDenom::erc20() const {
  // @@protoc_insertion_point(field_get:injective.peggy.v1.ERC20ToDenom.erc20)
  return _internal_erc20();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ERC20ToDenom::set_erc20(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.erc20_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.peggy.v1.ERC20ToDenom.erc20)
}
inline std::string* ERC20ToDenom::mutable_erc20() {
  std::string* _s = _internal_mutable_erc20();
  // @@protoc_insertion_point(field_mutable:injective.peggy.v1.ERC20ToDenom.erc20)
  return _s;
}
inline const std::string& ERC20ToDenom::_internal_erc20() const {
  return _impl_.erc20_.Get();
}
inline void ERC20ToDenom::_internal_set_erc20(const std::string& value) {
  ;


  _impl_.erc20_.Set(value, GetArenaForAllocation());
}
inline std::string* ERC20ToDenom::_internal_mutable_erc20() {
  ;
  return _impl_.erc20_.Mutable( GetArenaForAllocation());
}
inline std::string* ERC20ToDenom::release_erc20() {
  // @@protoc_insertion_point(field_release:injective.peggy.v1.ERC20ToDenom.erc20)
  return _impl_.erc20_.Release();
}
inline void ERC20ToDenom::set_allocated_erc20(std::string* value) {
  _impl_.erc20_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.erc20_.IsDefault()) {
          _impl_.erc20_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.peggy.v1.ERC20ToDenom.erc20)
}

// string denom = 2 [json_name = "denom"];
inline void ERC20ToDenom::clear_denom() {
  _impl_.denom_.ClearToEmpty();
}
inline const std::string& ERC20ToDenom::denom() const {
  // @@protoc_insertion_point(field_get:injective.peggy.v1.ERC20ToDenom.denom)
  return _internal_denom();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ERC20ToDenom::set_denom(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.denom_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.peggy.v1.ERC20ToDenom.denom)
}
inline std::string* ERC20ToDenom::mutable_denom() {
  std::string* _s = _internal_mutable_denom();
  // @@protoc_insertion_point(field_mutable:injective.peggy.v1.ERC20ToDenom.denom)
  return _s;
}
inline const std::string& ERC20ToDenom::_internal_denom() const {
  return _impl_.denom_.Get();
}
inline void ERC20ToDenom::_internal_set_denom(const std::string& value) {
  ;


  _impl_.denom_.Set(value, GetArenaForAllocation());
}
inline std::string* ERC20ToDenom::_internal_mutable_denom() {
  ;
  return _impl_.denom_.Mutable( GetArenaForAllocation());
}
inline std::string* ERC20ToDenom::release_denom() {
  // @@protoc_insertion_point(field_release:injective.peggy.v1.ERC20ToDenom.denom)
  return _impl_.denom_.Release();
}
inline void ERC20ToDenom::set_allocated_denom(std::string* value) {
  _impl_.denom_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.denom_.IsDefault()) {
          _impl_.denom_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.peggy.v1.ERC20ToDenom.denom)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace peggy
}  // namespace injective


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_injective_2fpeggy_2fv1_2ftypes_2eproto_2epb_2eh

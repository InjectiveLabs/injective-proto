// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: injective/peggy/v1/genesis.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_injective_2fpeggy_2fv1_2fgenesis_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_injective_2fpeggy_2fv1_2fgenesis_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "gogoproto/gogo.pb.h"
#include "injective/peggy/v1/types.pb.h"
#include "injective/peggy/v1/msgs.pb.h"
#include "injective/peggy/v1/batch.pb.h"
#include "injective/peggy/v1/attestation.pb.h"
#include "injective/peggy/v1/params.pb.h"
#include "cosmos/base/v1beta1/coin.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_injective_2fpeggy_2fv1_2fgenesis_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_injective_2fpeggy_2fv1_2fgenesis_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_injective_2fpeggy_2fv1_2fgenesis_2eproto;
namespace injective {
namespace peggy {
namespace v1 {
class GenesisState;
struct GenesisStateDefaultTypeInternal;
extern GenesisStateDefaultTypeInternal _GenesisState_default_instance_;
}  // namespace v1
}  // namespace peggy
}  // namespace injective
PROTOBUF_NAMESPACE_OPEN
template <>
::injective::peggy::v1::GenesisState* Arena::CreateMaybeMessage<::injective::peggy::v1::GenesisState>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace injective {
namespace peggy {
namespace v1 {

// ===================================================================


// -------------------------------------------------------------------

class GenesisState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.peggy.v1.GenesisState) */ {
 public:
  inline GenesisState() : GenesisState(nullptr) {}
  ~GenesisState() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GenesisState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GenesisState(const GenesisState& from);
  GenesisState(GenesisState&& from) noexcept
    : GenesisState() {
    *this = ::std::move(from);
  }

  inline GenesisState& operator=(const GenesisState& from) {
    CopyFrom(from);
    return *this;
  }
  inline GenesisState& operator=(GenesisState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GenesisState& default_instance() {
    return *internal_default_instance();
  }
  static inline const GenesisState* internal_default_instance() {
    return reinterpret_cast<const GenesisState*>(
               &_GenesisState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GenesisState& a, GenesisState& b) {
    a.Swap(&b);
  }
  inline void Swap(GenesisState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GenesisState* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GenesisState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GenesisState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GenesisState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GenesisState& from) {
    GenesisState::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GenesisState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.peggy.v1.GenesisState";
  }
  protected:
  explicit GenesisState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValsetsFieldNumber = 3,
    kValsetConfirmsFieldNumber = 4,
    kBatchesFieldNumber = 5,
    kBatchConfirmsFieldNumber = 6,
    kAttestationsFieldNumber = 7,
    kOrchestratorAddressesFieldNumber = 8,
    kErc20ToDenomsFieldNumber = 9,
    kUnbatchedTransfersFieldNumber = 10,
    kEthereumBlacklistFieldNumber = 15,
    kParamsFieldNumber = 1,
    kLastObservedValsetFieldNumber = 14,
    kLastObservedNonceFieldNumber = 2,
    kLastObservedEthereumHeightFieldNumber = 11,
    kLastOutgoingBatchIdFieldNumber = 12,
    kLastOutgoingPoolIdFieldNumber = 13,
  };
  // repeated .injective.peggy.v1.Valset valsets = 3 [json_name = "valsets"];
  int valsets_size() const;
  private:
  int _internal_valsets_size() const;

  public:
  void clear_valsets() ;
  ::injective::peggy::v1::Valset* mutable_valsets(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::peggy::v1::Valset >*
      mutable_valsets();
  private:
  const ::injective::peggy::v1::Valset& _internal_valsets(int index) const;
  ::injective::peggy::v1::Valset* _internal_add_valsets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::peggy::v1::Valset>& _internal_valsets() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::peggy::v1::Valset>* _internal_mutable_valsets();
  public:
  const ::injective::peggy::v1::Valset& valsets(int index) const;
  ::injective::peggy::v1::Valset* add_valsets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::peggy::v1::Valset >&
      valsets() const;
  // repeated .injective.peggy.v1.MsgValsetConfirm valset_confirms = 4 [json_name = "valsetConfirms"];
  int valset_confirms_size() const;
  private:
  int _internal_valset_confirms_size() const;

  public:
  void clear_valset_confirms() ;
  ::injective::peggy::v1::MsgValsetConfirm* mutable_valset_confirms(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::peggy::v1::MsgValsetConfirm >*
      mutable_valset_confirms();
  private:
  const ::injective::peggy::v1::MsgValsetConfirm& _internal_valset_confirms(int index) const;
  ::injective::peggy::v1::MsgValsetConfirm* _internal_add_valset_confirms();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::peggy::v1::MsgValsetConfirm>& _internal_valset_confirms() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::peggy::v1::MsgValsetConfirm>* _internal_mutable_valset_confirms();
  public:
  const ::injective::peggy::v1::MsgValsetConfirm& valset_confirms(int index) const;
  ::injective::peggy::v1::MsgValsetConfirm* add_valset_confirms();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::peggy::v1::MsgValsetConfirm >&
      valset_confirms() const;
  // repeated .injective.peggy.v1.OutgoingTxBatch batches = 5 [json_name = "batches"];
  int batches_size() const;
  private:
  int _internal_batches_size() const;

  public:
  void clear_batches() ;
  ::injective::peggy::v1::OutgoingTxBatch* mutable_batches(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::peggy::v1::OutgoingTxBatch >*
      mutable_batches();
  private:
  const ::injective::peggy::v1::OutgoingTxBatch& _internal_batches(int index) const;
  ::injective::peggy::v1::OutgoingTxBatch* _internal_add_batches();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::peggy::v1::OutgoingTxBatch>& _internal_batches() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::peggy::v1::OutgoingTxBatch>* _internal_mutable_batches();
  public:
  const ::injective::peggy::v1::OutgoingTxBatch& batches(int index) const;
  ::injective::peggy::v1::OutgoingTxBatch* add_batches();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::peggy::v1::OutgoingTxBatch >&
      batches() const;
  // repeated .injective.peggy.v1.MsgConfirmBatch batch_confirms = 6 [json_name = "batchConfirms"];
  int batch_confirms_size() const;
  private:
  int _internal_batch_confirms_size() const;

  public:
  void clear_batch_confirms() ;
  ::injective::peggy::v1::MsgConfirmBatch* mutable_batch_confirms(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::peggy::v1::MsgConfirmBatch >*
      mutable_batch_confirms();
  private:
  const ::injective::peggy::v1::MsgConfirmBatch& _internal_batch_confirms(int index) const;
  ::injective::peggy::v1::MsgConfirmBatch* _internal_add_batch_confirms();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::peggy::v1::MsgConfirmBatch>& _internal_batch_confirms() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::peggy::v1::MsgConfirmBatch>* _internal_mutable_batch_confirms();
  public:
  const ::injective::peggy::v1::MsgConfirmBatch& batch_confirms(int index) const;
  ::injective::peggy::v1::MsgConfirmBatch* add_batch_confirms();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::peggy::v1::MsgConfirmBatch >&
      batch_confirms() const;
  // repeated .injective.peggy.v1.Attestation attestations = 7 [json_name = "attestations"];
  int attestations_size() const;
  private:
  int _internal_attestations_size() const;

  public:
  void clear_attestations() ;
  ::injective::peggy::v1::Attestation* mutable_attestations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::peggy::v1::Attestation >*
      mutable_attestations();
  private:
  const ::injective::peggy::v1::Attestation& _internal_attestations(int index) const;
  ::injective::peggy::v1::Attestation* _internal_add_attestations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::peggy::v1::Attestation>& _internal_attestations() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::peggy::v1::Attestation>* _internal_mutable_attestations();
  public:
  const ::injective::peggy::v1::Attestation& attestations(int index) const;
  ::injective::peggy::v1::Attestation* add_attestations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::peggy::v1::Attestation >&
      attestations() const;
  // repeated .injective.peggy.v1.MsgSetOrchestratorAddresses orchestrator_addresses = 8 [json_name = "orchestratorAddresses"];
  int orchestrator_addresses_size() const;
  private:
  int _internal_orchestrator_addresses_size() const;

  public:
  void clear_orchestrator_addresses() ;
  ::injective::peggy::v1::MsgSetOrchestratorAddresses* mutable_orchestrator_addresses(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::peggy::v1::MsgSetOrchestratorAddresses >*
      mutable_orchestrator_addresses();
  private:
  const ::injective::peggy::v1::MsgSetOrchestratorAddresses& _internal_orchestrator_addresses(int index) const;
  ::injective::peggy::v1::MsgSetOrchestratorAddresses* _internal_add_orchestrator_addresses();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::peggy::v1::MsgSetOrchestratorAddresses>& _internal_orchestrator_addresses() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::peggy::v1::MsgSetOrchestratorAddresses>* _internal_mutable_orchestrator_addresses();
  public:
  const ::injective::peggy::v1::MsgSetOrchestratorAddresses& orchestrator_addresses(int index) const;
  ::injective::peggy::v1::MsgSetOrchestratorAddresses* add_orchestrator_addresses();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::peggy::v1::MsgSetOrchestratorAddresses >&
      orchestrator_addresses() const;
  // repeated .injective.peggy.v1.ERC20ToDenom erc20_to_denoms = 9 [json_name = "erc20ToDenoms"];
  int erc20_to_denoms_size() const;
  private:
  int _internal_erc20_to_denoms_size() const;

  public:
  void clear_erc20_to_denoms() ;
  ::injective::peggy::v1::ERC20ToDenom* mutable_erc20_to_denoms(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::peggy::v1::ERC20ToDenom >*
      mutable_erc20_to_denoms();
  private:
  const ::injective::peggy::v1::ERC20ToDenom& _internal_erc20_to_denoms(int index) const;
  ::injective::peggy::v1::ERC20ToDenom* _internal_add_erc20_to_denoms();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::peggy::v1::ERC20ToDenom>& _internal_erc20_to_denoms() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::peggy::v1::ERC20ToDenom>* _internal_mutable_erc20_to_denoms();
  public:
  const ::injective::peggy::v1::ERC20ToDenom& erc20_to_denoms(int index) const;
  ::injective::peggy::v1::ERC20ToDenom* add_erc20_to_denoms();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::peggy::v1::ERC20ToDenom >&
      erc20_to_denoms() const;
  // repeated .injective.peggy.v1.OutgoingTransferTx unbatched_transfers = 10 [json_name = "unbatchedTransfers"];
  int unbatched_transfers_size() const;
  private:
  int _internal_unbatched_transfers_size() const;

  public:
  void clear_unbatched_transfers() ;
  ::injective::peggy::v1::OutgoingTransferTx* mutable_unbatched_transfers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::peggy::v1::OutgoingTransferTx >*
      mutable_unbatched_transfers();
  private:
  const ::injective::peggy::v1::OutgoingTransferTx& _internal_unbatched_transfers(int index) const;
  ::injective::peggy::v1::OutgoingTransferTx* _internal_add_unbatched_transfers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::peggy::v1::OutgoingTransferTx>& _internal_unbatched_transfers() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::peggy::v1::OutgoingTransferTx>* _internal_mutable_unbatched_transfers();
  public:
  const ::injective::peggy::v1::OutgoingTransferTx& unbatched_transfers(int index) const;
  ::injective::peggy::v1::OutgoingTransferTx* add_unbatched_transfers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::peggy::v1::OutgoingTransferTx >&
      unbatched_transfers() const;
  // repeated string ethereum_blacklist = 15 [json_name = "ethereumBlacklist"];
  int ethereum_blacklist_size() const;
  private:
  int _internal_ethereum_blacklist_size() const;

  public:
  void clear_ethereum_blacklist() ;
  const std::string& ethereum_blacklist(int index) const;
  std::string* mutable_ethereum_blacklist(int index);
  void set_ethereum_blacklist(int index, const std::string& value);
  void set_ethereum_blacklist(int index, std::string&& value);
  void set_ethereum_blacklist(int index, const char* value);
  void set_ethereum_blacklist(int index, const char* value, std::size_t size);
  void set_ethereum_blacklist(int index, absl::string_view value);
  std::string* add_ethereum_blacklist();
  void add_ethereum_blacklist(const std::string& value);
  void add_ethereum_blacklist(std::string&& value);
  void add_ethereum_blacklist(const char* value);
  void add_ethereum_blacklist(const char* value, std::size_t size);
  void add_ethereum_blacklist(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& ethereum_blacklist() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_ethereum_blacklist();

  private:
  const std::string& _internal_ethereum_blacklist(int index) const;
  std::string* _internal_add_ethereum_blacklist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_ethereum_blacklist() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_ethereum_blacklist();

  public:
  // .injective.peggy.v1.Params params = 1 [json_name = "params"];
  bool has_params() const;
  void clear_params() ;
  const ::injective::peggy::v1::Params& params() const;
  PROTOBUF_NODISCARD ::injective::peggy::v1::Params* release_params();
  ::injective::peggy::v1::Params* mutable_params();
  void set_allocated_params(::injective::peggy::v1::Params* params);
  private:
  const ::injective::peggy::v1::Params& _internal_params() const;
  ::injective::peggy::v1::Params* _internal_mutable_params();
  public:
  void unsafe_arena_set_allocated_params(
      ::injective::peggy::v1::Params* params);
  ::injective::peggy::v1::Params* unsafe_arena_release_params();
  // .injective.peggy.v1.Valset last_observed_valset = 14 [json_name = "lastObservedValset", (.gogoproto.nullable) = false];
  bool has_last_observed_valset() const;
  void clear_last_observed_valset() ;
  const ::injective::peggy::v1::Valset& last_observed_valset() const;
  PROTOBUF_NODISCARD ::injective::peggy::v1::Valset* release_last_observed_valset();
  ::injective::peggy::v1::Valset* mutable_last_observed_valset();
  void set_allocated_last_observed_valset(::injective::peggy::v1::Valset* last_observed_valset);
  private:
  const ::injective::peggy::v1::Valset& _internal_last_observed_valset() const;
  ::injective::peggy::v1::Valset* _internal_mutable_last_observed_valset();
  public:
  void unsafe_arena_set_allocated_last_observed_valset(
      ::injective::peggy::v1::Valset* last_observed_valset);
  ::injective::peggy::v1::Valset* unsafe_arena_release_last_observed_valset();
  // uint64 last_observed_nonce = 2 [json_name = "lastObservedNonce"];
  void clear_last_observed_nonce() ;
  ::uint64_t last_observed_nonce() const;
  void set_last_observed_nonce(::uint64_t value);

  private:
  ::uint64_t _internal_last_observed_nonce() const;
  void _internal_set_last_observed_nonce(::uint64_t value);

  public:
  // uint64 last_observed_ethereum_height = 11 [json_name = "lastObservedEthereumHeight"];
  void clear_last_observed_ethereum_height() ;
  ::uint64_t last_observed_ethereum_height() const;
  void set_last_observed_ethereum_height(::uint64_t value);

  private:
  ::uint64_t _internal_last_observed_ethereum_height() const;
  void _internal_set_last_observed_ethereum_height(::uint64_t value);

  public:
  // uint64 last_outgoing_batch_id = 12 [json_name = "lastOutgoingBatchId"];
  void clear_last_outgoing_batch_id() ;
  ::uint64_t last_outgoing_batch_id() const;
  void set_last_outgoing_batch_id(::uint64_t value);

  private:
  ::uint64_t _internal_last_outgoing_batch_id() const;
  void _internal_set_last_outgoing_batch_id(::uint64_t value);

  public:
  // uint64 last_outgoing_pool_id = 13 [json_name = "lastOutgoingPoolId"];
  void clear_last_outgoing_pool_id() ;
  ::uint64_t last_outgoing_pool_id() const;
  void set_last_outgoing_pool_id(::uint64_t value);

  private:
  ::uint64_t _internal_last_outgoing_pool_id() const;
  void _internal_set_last_outgoing_pool_id(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:injective.peggy.v1.GenesisState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::peggy::v1::Valset > valsets_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::peggy::v1::MsgValsetConfirm > valset_confirms_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::peggy::v1::OutgoingTxBatch > batches_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::peggy::v1::MsgConfirmBatch > batch_confirms_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::peggy::v1::Attestation > attestations_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::peggy::v1::MsgSetOrchestratorAddresses > orchestrator_addresses_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::peggy::v1::ERC20ToDenom > erc20_to_denoms_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::peggy::v1::OutgoingTransferTx > unbatched_transfers_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> ethereum_blacklist_;
    ::injective::peggy::v1::Params* params_;
    ::injective::peggy::v1::Valset* last_observed_valset_;
    ::uint64_t last_observed_nonce_;
    ::uint64_t last_observed_ethereum_height_;
    ::uint64_t last_outgoing_batch_id_;
    ::uint64_t last_outgoing_pool_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2fpeggy_2fv1_2fgenesis_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// GenesisState

// .injective.peggy.v1.Params params = 1 [json_name = "params"];
inline bool GenesisState::has_params() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.params_ != nullptr);
  return value;
}
inline const ::injective::peggy::v1::Params& GenesisState::_internal_params() const {
  const ::injective::peggy::v1::Params* p = _impl_.params_;
  return p != nullptr ? *p : reinterpret_cast<const ::injective::peggy::v1::Params&>(
      ::injective::peggy::v1::_Params_default_instance_);
}
inline const ::injective::peggy::v1::Params& GenesisState::params() const {
  // @@protoc_insertion_point(field_get:injective.peggy.v1.GenesisState.params)
  return _internal_params();
}
inline void GenesisState::unsafe_arena_set_allocated_params(
    ::injective::peggy::v1::Params* params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.params_);
  }
  _impl_.params_ = params;
  if (params) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:injective.peggy.v1.GenesisState.params)
}
inline ::injective::peggy::v1::Params* GenesisState::release_params() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::injective::peggy::v1::Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::injective::peggy::v1::Params* GenesisState::unsafe_arena_release_params() {
  // @@protoc_insertion_point(field_release:injective.peggy.v1.GenesisState.params)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::injective::peggy::v1::Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
  return temp;
}
inline ::injective::peggy::v1::Params* GenesisState::_internal_mutable_params() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.params_ == nullptr) {
    auto* p = CreateMaybeMessage<::injective::peggy::v1::Params>(GetArenaForAllocation());
    _impl_.params_ = p;
  }
  return _impl_.params_;
}
inline ::injective::peggy::v1::Params* GenesisState::mutable_params() {
  ::injective::peggy::v1::Params* _msg = _internal_mutable_params();
  // @@protoc_insertion_point(field_mutable:injective.peggy.v1.GenesisState.params)
  return _msg;
}
inline void GenesisState::set_allocated_params(::injective::peggy::v1::Params* params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.params_);
  }
  if (params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(params));
    if (message_arena != submessage_arena) {
      params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, params, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.params_ = params;
  // @@protoc_insertion_point(field_set_allocated:injective.peggy.v1.GenesisState.params)
}

// uint64 last_observed_nonce = 2 [json_name = "lastObservedNonce"];
inline void GenesisState::clear_last_observed_nonce() {
  _impl_.last_observed_nonce_ = ::uint64_t{0u};
}
inline ::uint64_t GenesisState::last_observed_nonce() const {
  // @@protoc_insertion_point(field_get:injective.peggy.v1.GenesisState.last_observed_nonce)
  return _internal_last_observed_nonce();
}
inline void GenesisState::set_last_observed_nonce(::uint64_t value) {
  _internal_set_last_observed_nonce(value);
  // @@protoc_insertion_point(field_set:injective.peggy.v1.GenesisState.last_observed_nonce)
}
inline ::uint64_t GenesisState::_internal_last_observed_nonce() const {
  return _impl_.last_observed_nonce_;
}
inline void GenesisState::_internal_set_last_observed_nonce(::uint64_t value) {
  ;
  _impl_.last_observed_nonce_ = value;
}

// repeated .injective.peggy.v1.Valset valsets = 3 [json_name = "valsets"];
inline int GenesisState::_internal_valsets_size() const {
  return _impl_.valsets_.size();
}
inline int GenesisState::valsets_size() const {
  return _internal_valsets_size();
}
inline ::injective::peggy::v1::Valset* GenesisState::mutable_valsets(int index) {
  // @@protoc_insertion_point(field_mutable:injective.peggy.v1.GenesisState.valsets)
  return _internal_mutable_valsets()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::peggy::v1::Valset >*
GenesisState::mutable_valsets() {
  // @@protoc_insertion_point(field_mutable_list:injective.peggy.v1.GenesisState.valsets)
  return _internal_mutable_valsets();
}
inline const ::injective::peggy::v1::Valset& GenesisState::_internal_valsets(int index) const {
  return _internal_valsets().Get(index);
}
inline const ::injective::peggy::v1::Valset& GenesisState::valsets(int index) const {
  // @@protoc_insertion_point(field_get:injective.peggy.v1.GenesisState.valsets)
  return _internal_valsets(index);
}
inline ::injective::peggy::v1::Valset* GenesisState::_internal_add_valsets() {
  return _internal_mutable_valsets()->Add();
}
inline ::injective::peggy::v1::Valset* GenesisState::add_valsets() {
  ::injective::peggy::v1::Valset* _add = _internal_add_valsets();
  // @@protoc_insertion_point(field_add:injective.peggy.v1.GenesisState.valsets)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::peggy::v1::Valset >&
GenesisState::valsets() const {
  // @@protoc_insertion_point(field_list:injective.peggy.v1.GenesisState.valsets)
  return _internal_valsets();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::peggy::v1::Valset>&
GenesisState::_internal_valsets() const {
  return _impl_.valsets_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::peggy::v1::Valset>*
GenesisState::_internal_mutable_valsets() {
  return &_impl_.valsets_;
}

// repeated .injective.peggy.v1.MsgValsetConfirm valset_confirms = 4 [json_name = "valsetConfirms"];
inline int GenesisState::_internal_valset_confirms_size() const {
  return _impl_.valset_confirms_.size();
}
inline int GenesisState::valset_confirms_size() const {
  return _internal_valset_confirms_size();
}
inline ::injective::peggy::v1::MsgValsetConfirm* GenesisState::mutable_valset_confirms(int index) {
  // @@protoc_insertion_point(field_mutable:injective.peggy.v1.GenesisState.valset_confirms)
  return _internal_mutable_valset_confirms()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::peggy::v1::MsgValsetConfirm >*
GenesisState::mutable_valset_confirms() {
  // @@protoc_insertion_point(field_mutable_list:injective.peggy.v1.GenesisState.valset_confirms)
  return _internal_mutable_valset_confirms();
}
inline const ::injective::peggy::v1::MsgValsetConfirm& GenesisState::_internal_valset_confirms(int index) const {
  return _internal_valset_confirms().Get(index);
}
inline const ::injective::peggy::v1::MsgValsetConfirm& GenesisState::valset_confirms(int index) const {
  // @@protoc_insertion_point(field_get:injective.peggy.v1.GenesisState.valset_confirms)
  return _internal_valset_confirms(index);
}
inline ::injective::peggy::v1::MsgValsetConfirm* GenesisState::_internal_add_valset_confirms() {
  return _internal_mutable_valset_confirms()->Add();
}
inline ::injective::peggy::v1::MsgValsetConfirm* GenesisState::add_valset_confirms() {
  ::injective::peggy::v1::MsgValsetConfirm* _add = _internal_add_valset_confirms();
  // @@protoc_insertion_point(field_add:injective.peggy.v1.GenesisState.valset_confirms)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::peggy::v1::MsgValsetConfirm >&
GenesisState::valset_confirms() const {
  // @@protoc_insertion_point(field_list:injective.peggy.v1.GenesisState.valset_confirms)
  return _internal_valset_confirms();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::peggy::v1::MsgValsetConfirm>&
GenesisState::_internal_valset_confirms() const {
  return _impl_.valset_confirms_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::peggy::v1::MsgValsetConfirm>*
GenesisState::_internal_mutable_valset_confirms() {
  return &_impl_.valset_confirms_;
}

// repeated .injective.peggy.v1.OutgoingTxBatch batches = 5 [json_name = "batches"];
inline int GenesisState::_internal_batches_size() const {
  return _impl_.batches_.size();
}
inline int GenesisState::batches_size() const {
  return _internal_batches_size();
}
inline ::injective::peggy::v1::OutgoingTxBatch* GenesisState::mutable_batches(int index) {
  // @@protoc_insertion_point(field_mutable:injective.peggy.v1.GenesisState.batches)
  return _internal_mutable_batches()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::peggy::v1::OutgoingTxBatch >*
GenesisState::mutable_batches() {
  // @@protoc_insertion_point(field_mutable_list:injective.peggy.v1.GenesisState.batches)
  return _internal_mutable_batches();
}
inline const ::injective::peggy::v1::OutgoingTxBatch& GenesisState::_internal_batches(int index) const {
  return _internal_batches().Get(index);
}
inline const ::injective::peggy::v1::OutgoingTxBatch& GenesisState::batches(int index) const {
  // @@protoc_insertion_point(field_get:injective.peggy.v1.GenesisState.batches)
  return _internal_batches(index);
}
inline ::injective::peggy::v1::OutgoingTxBatch* GenesisState::_internal_add_batches() {
  return _internal_mutable_batches()->Add();
}
inline ::injective::peggy::v1::OutgoingTxBatch* GenesisState::add_batches() {
  ::injective::peggy::v1::OutgoingTxBatch* _add = _internal_add_batches();
  // @@protoc_insertion_point(field_add:injective.peggy.v1.GenesisState.batches)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::peggy::v1::OutgoingTxBatch >&
GenesisState::batches() const {
  // @@protoc_insertion_point(field_list:injective.peggy.v1.GenesisState.batches)
  return _internal_batches();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::peggy::v1::OutgoingTxBatch>&
GenesisState::_internal_batches() const {
  return _impl_.batches_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::peggy::v1::OutgoingTxBatch>*
GenesisState::_internal_mutable_batches() {
  return &_impl_.batches_;
}

// repeated .injective.peggy.v1.MsgConfirmBatch batch_confirms = 6 [json_name = "batchConfirms"];
inline int GenesisState::_internal_batch_confirms_size() const {
  return _impl_.batch_confirms_.size();
}
inline int GenesisState::batch_confirms_size() const {
  return _internal_batch_confirms_size();
}
inline ::injective::peggy::v1::MsgConfirmBatch* GenesisState::mutable_batch_confirms(int index) {
  // @@protoc_insertion_point(field_mutable:injective.peggy.v1.GenesisState.batch_confirms)
  return _internal_mutable_batch_confirms()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::peggy::v1::MsgConfirmBatch >*
GenesisState::mutable_batch_confirms() {
  // @@protoc_insertion_point(field_mutable_list:injective.peggy.v1.GenesisState.batch_confirms)
  return _internal_mutable_batch_confirms();
}
inline const ::injective::peggy::v1::MsgConfirmBatch& GenesisState::_internal_batch_confirms(int index) const {
  return _internal_batch_confirms().Get(index);
}
inline const ::injective::peggy::v1::MsgConfirmBatch& GenesisState::batch_confirms(int index) const {
  // @@protoc_insertion_point(field_get:injective.peggy.v1.GenesisState.batch_confirms)
  return _internal_batch_confirms(index);
}
inline ::injective::peggy::v1::MsgConfirmBatch* GenesisState::_internal_add_batch_confirms() {
  return _internal_mutable_batch_confirms()->Add();
}
inline ::injective::peggy::v1::MsgConfirmBatch* GenesisState::add_batch_confirms() {
  ::injective::peggy::v1::MsgConfirmBatch* _add = _internal_add_batch_confirms();
  // @@protoc_insertion_point(field_add:injective.peggy.v1.GenesisState.batch_confirms)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::peggy::v1::MsgConfirmBatch >&
GenesisState::batch_confirms() const {
  // @@protoc_insertion_point(field_list:injective.peggy.v1.GenesisState.batch_confirms)
  return _internal_batch_confirms();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::peggy::v1::MsgConfirmBatch>&
GenesisState::_internal_batch_confirms() const {
  return _impl_.batch_confirms_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::peggy::v1::MsgConfirmBatch>*
GenesisState::_internal_mutable_batch_confirms() {
  return &_impl_.batch_confirms_;
}

// repeated .injective.peggy.v1.Attestation attestations = 7 [json_name = "attestations"];
inline int GenesisState::_internal_attestations_size() const {
  return _impl_.attestations_.size();
}
inline int GenesisState::attestations_size() const {
  return _internal_attestations_size();
}
inline ::injective::peggy::v1::Attestation* GenesisState::mutable_attestations(int index) {
  // @@protoc_insertion_point(field_mutable:injective.peggy.v1.GenesisState.attestations)
  return _internal_mutable_attestations()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::peggy::v1::Attestation >*
GenesisState::mutable_attestations() {
  // @@protoc_insertion_point(field_mutable_list:injective.peggy.v1.GenesisState.attestations)
  return _internal_mutable_attestations();
}
inline const ::injective::peggy::v1::Attestation& GenesisState::_internal_attestations(int index) const {
  return _internal_attestations().Get(index);
}
inline const ::injective::peggy::v1::Attestation& GenesisState::attestations(int index) const {
  // @@protoc_insertion_point(field_get:injective.peggy.v1.GenesisState.attestations)
  return _internal_attestations(index);
}
inline ::injective::peggy::v1::Attestation* GenesisState::_internal_add_attestations() {
  return _internal_mutable_attestations()->Add();
}
inline ::injective::peggy::v1::Attestation* GenesisState::add_attestations() {
  ::injective::peggy::v1::Attestation* _add = _internal_add_attestations();
  // @@protoc_insertion_point(field_add:injective.peggy.v1.GenesisState.attestations)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::peggy::v1::Attestation >&
GenesisState::attestations() const {
  // @@protoc_insertion_point(field_list:injective.peggy.v1.GenesisState.attestations)
  return _internal_attestations();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::peggy::v1::Attestation>&
GenesisState::_internal_attestations() const {
  return _impl_.attestations_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::peggy::v1::Attestation>*
GenesisState::_internal_mutable_attestations() {
  return &_impl_.attestations_;
}

// repeated .injective.peggy.v1.MsgSetOrchestratorAddresses orchestrator_addresses = 8 [json_name = "orchestratorAddresses"];
inline int GenesisState::_internal_orchestrator_addresses_size() const {
  return _impl_.orchestrator_addresses_.size();
}
inline int GenesisState::orchestrator_addresses_size() const {
  return _internal_orchestrator_addresses_size();
}
inline ::injective::peggy::v1::MsgSetOrchestratorAddresses* GenesisState::mutable_orchestrator_addresses(int index) {
  // @@protoc_insertion_point(field_mutable:injective.peggy.v1.GenesisState.orchestrator_addresses)
  return _internal_mutable_orchestrator_addresses()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::peggy::v1::MsgSetOrchestratorAddresses >*
GenesisState::mutable_orchestrator_addresses() {
  // @@protoc_insertion_point(field_mutable_list:injective.peggy.v1.GenesisState.orchestrator_addresses)
  return _internal_mutable_orchestrator_addresses();
}
inline const ::injective::peggy::v1::MsgSetOrchestratorAddresses& GenesisState::_internal_orchestrator_addresses(int index) const {
  return _internal_orchestrator_addresses().Get(index);
}
inline const ::injective::peggy::v1::MsgSetOrchestratorAddresses& GenesisState::orchestrator_addresses(int index) const {
  // @@protoc_insertion_point(field_get:injective.peggy.v1.GenesisState.orchestrator_addresses)
  return _internal_orchestrator_addresses(index);
}
inline ::injective::peggy::v1::MsgSetOrchestratorAddresses* GenesisState::_internal_add_orchestrator_addresses() {
  return _internal_mutable_orchestrator_addresses()->Add();
}
inline ::injective::peggy::v1::MsgSetOrchestratorAddresses* GenesisState::add_orchestrator_addresses() {
  ::injective::peggy::v1::MsgSetOrchestratorAddresses* _add = _internal_add_orchestrator_addresses();
  // @@protoc_insertion_point(field_add:injective.peggy.v1.GenesisState.orchestrator_addresses)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::peggy::v1::MsgSetOrchestratorAddresses >&
GenesisState::orchestrator_addresses() const {
  // @@protoc_insertion_point(field_list:injective.peggy.v1.GenesisState.orchestrator_addresses)
  return _internal_orchestrator_addresses();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::peggy::v1::MsgSetOrchestratorAddresses>&
GenesisState::_internal_orchestrator_addresses() const {
  return _impl_.orchestrator_addresses_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::peggy::v1::MsgSetOrchestratorAddresses>*
GenesisState::_internal_mutable_orchestrator_addresses() {
  return &_impl_.orchestrator_addresses_;
}

// repeated .injective.peggy.v1.ERC20ToDenom erc20_to_denoms = 9 [json_name = "erc20ToDenoms"];
inline int GenesisState::_internal_erc20_to_denoms_size() const {
  return _impl_.erc20_to_denoms_.size();
}
inline int GenesisState::erc20_to_denoms_size() const {
  return _internal_erc20_to_denoms_size();
}
inline ::injective::peggy::v1::ERC20ToDenom* GenesisState::mutable_erc20_to_denoms(int index) {
  // @@protoc_insertion_point(field_mutable:injective.peggy.v1.GenesisState.erc20_to_denoms)
  return _internal_mutable_erc20_to_denoms()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::peggy::v1::ERC20ToDenom >*
GenesisState::mutable_erc20_to_denoms() {
  // @@protoc_insertion_point(field_mutable_list:injective.peggy.v1.GenesisState.erc20_to_denoms)
  return _internal_mutable_erc20_to_denoms();
}
inline const ::injective::peggy::v1::ERC20ToDenom& GenesisState::_internal_erc20_to_denoms(int index) const {
  return _internal_erc20_to_denoms().Get(index);
}
inline const ::injective::peggy::v1::ERC20ToDenom& GenesisState::erc20_to_denoms(int index) const {
  // @@protoc_insertion_point(field_get:injective.peggy.v1.GenesisState.erc20_to_denoms)
  return _internal_erc20_to_denoms(index);
}
inline ::injective::peggy::v1::ERC20ToDenom* GenesisState::_internal_add_erc20_to_denoms() {
  return _internal_mutable_erc20_to_denoms()->Add();
}
inline ::injective::peggy::v1::ERC20ToDenom* GenesisState::add_erc20_to_denoms() {
  ::injective::peggy::v1::ERC20ToDenom* _add = _internal_add_erc20_to_denoms();
  // @@protoc_insertion_point(field_add:injective.peggy.v1.GenesisState.erc20_to_denoms)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::peggy::v1::ERC20ToDenom >&
GenesisState::erc20_to_denoms() const {
  // @@protoc_insertion_point(field_list:injective.peggy.v1.GenesisState.erc20_to_denoms)
  return _internal_erc20_to_denoms();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::peggy::v1::ERC20ToDenom>&
GenesisState::_internal_erc20_to_denoms() const {
  return _impl_.erc20_to_denoms_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::peggy::v1::ERC20ToDenom>*
GenesisState::_internal_mutable_erc20_to_denoms() {
  return &_impl_.erc20_to_denoms_;
}

// repeated .injective.peggy.v1.OutgoingTransferTx unbatched_transfers = 10 [json_name = "unbatchedTransfers"];
inline int GenesisState::_internal_unbatched_transfers_size() const {
  return _impl_.unbatched_transfers_.size();
}
inline int GenesisState::unbatched_transfers_size() const {
  return _internal_unbatched_transfers_size();
}
inline ::injective::peggy::v1::OutgoingTransferTx* GenesisState::mutable_unbatched_transfers(int index) {
  // @@protoc_insertion_point(field_mutable:injective.peggy.v1.GenesisState.unbatched_transfers)
  return _internal_mutable_unbatched_transfers()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::peggy::v1::OutgoingTransferTx >*
GenesisState::mutable_unbatched_transfers() {
  // @@protoc_insertion_point(field_mutable_list:injective.peggy.v1.GenesisState.unbatched_transfers)
  return _internal_mutable_unbatched_transfers();
}
inline const ::injective::peggy::v1::OutgoingTransferTx& GenesisState::_internal_unbatched_transfers(int index) const {
  return _internal_unbatched_transfers().Get(index);
}
inline const ::injective::peggy::v1::OutgoingTransferTx& GenesisState::unbatched_transfers(int index) const {
  // @@protoc_insertion_point(field_get:injective.peggy.v1.GenesisState.unbatched_transfers)
  return _internal_unbatched_transfers(index);
}
inline ::injective::peggy::v1::OutgoingTransferTx* GenesisState::_internal_add_unbatched_transfers() {
  return _internal_mutable_unbatched_transfers()->Add();
}
inline ::injective::peggy::v1::OutgoingTransferTx* GenesisState::add_unbatched_transfers() {
  ::injective::peggy::v1::OutgoingTransferTx* _add = _internal_add_unbatched_transfers();
  // @@protoc_insertion_point(field_add:injective.peggy.v1.GenesisState.unbatched_transfers)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::peggy::v1::OutgoingTransferTx >&
GenesisState::unbatched_transfers() const {
  // @@protoc_insertion_point(field_list:injective.peggy.v1.GenesisState.unbatched_transfers)
  return _internal_unbatched_transfers();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::peggy::v1::OutgoingTransferTx>&
GenesisState::_internal_unbatched_transfers() const {
  return _impl_.unbatched_transfers_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::peggy::v1::OutgoingTransferTx>*
GenesisState::_internal_mutable_unbatched_transfers() {
  return &_impl_.unbatched_transfers_;
}

// uint64 last_observed_ethereum_height = 11 [json_name = "lastObservedEthereumHeight"];
inline void GenesisState::clear_last_observed_ethereum_height() {
  _impl_.last_observed_ethereum_height_ = ::uint64_t{0u};
}
inline ::uint64_t GenesisState::last_observed_ethereum_height() const {
  // @@protoc_insertion_point(field_get:injective.peggy.v1.GenesisState.last_observed_ethereum_height)
  return _internal_last_observed_ethereum_height();
}
inline void GenesisState::set_last_observed_ethereum_height(::uint64_t value) {
  _internal_set_last_observed_ethereum_height(value);
  // @@protoc_insertion_point(field_set:injective.peggy.v1.GenesisState.last_observed_ethereum_height)
}
inline ::uint64_t GenesisState::_internal_last_observed_ethereum_height() const {
  return _impl_.last_observed_ethereum_height_;
}
inline void GenesisState::_internal_set_last_observed_ethereum_height(::uint64_t value) {
  ;
  _impl_.last_observed_ethereum_height_ = value;
}

// uint64 last_outgoing_batch_id = 12 [json_name = "lastOutgoingBatchId"];
inline void GenesisState::clear_last_outgoing_batch_id() {
  _impl_.last_outgoing_batch_id_ = ::uint64_t{0u};
}
inline ::uint64_t GenesisState::last_outgoing_batch_id() const {
  // @@protoc_insertion_point(field_get:injective.peggy.v1.GenesisState.last_outgoing_batch_id)
  return _internal_last_outgoing_batch_id();
}
inline void GenesisState::set_last_outgoing_batch_id(::uint64_t value) {
  _internal_set_last_outgoing_batch_id(value);
  // @@protoc_insertion_point(field_set:injective.peggy.v1.GenesisState.last_outgoing_batch_id)
}
inline ::uint64_t GenesisState::_internal_last_outgoing_batch_id() const {
  return _impl_.last_outgoing_batch_id_;
}
inline void GenesisState::_internal_set_last_outgoing_batch_id(::uint64_t value) {
  ;
  _impl_.last_outgoing_batch_id_ = value;
}

// uint64 last_outgoing_pool_id = 13 [json_name = "lastOutgoingPoolId"];
inline void GenesisState::clear_last_outgoing_pool_id() {
  _impl_.last_outgoing_pool_id_ = ::uint64_t{0u};
}
inline ::uint64_t GenesisState::last_outgoing_pool_id() const {
  // @@protoc_insertion_point(field_get:injective.peggy.v1.GenesisState.last_outgoing_pool_id)
  return _internal_last_outgoing_pool_id();
}
inline void GenesisState::set_last_outgoing_pool_id(::uint64_t value) {
  _internal_set_last_outgoing_pool_id(value);
  // @@protoc_insertion_point(field_set:injective.peggy.v1.GenesisState.last_outgoing_pool_id)
}
inline ::uint64_t GenesisState::_internal_last_outgoing_pool_id() const {
  return _impl_.last_outgoing_pool_id_;
}
inline void GenesisState::_internal_set_last_outgoing_pool_id(::uint64_t value) {
  ;
  _impl_.last_outgoing_pool_id_ = value;
}

// .injective.peggy.v1.Valset last_observed_valset = 14 [json_name = "lastObservedValset", (.gogoproto.nullable) = false];
inline bool GenesisState::has_last_observed_valset() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.last_observed_valset_ != nullptr);
  return value;
}
inline const ::injective::peggy::v1::Valset& GenesisState::_internal_last_observed_valset() const {
  const ::injective::peggy::v1::Valset* p = _impl_.last_observed_valset_;
  return p != nullptr ? *p : reinterpret_cast<const ::injective::peggy::v1::Valset&>(
      ::injective::peggy::v1::_Valset_default_instance_);
}
inline const ::injective::peggy::v1::Valset& GenesisState::last_observed_valset() const {
  // @@protoc_insertion_point(field_get:injective.peggy.v1.GenesisState.last_observed_valset)
  return _internal_last_observed_valset();
}
inline void GenesisState::unsafe_arena_set_allocated_last_observed_valset(
    ::injective::peggy::v1::Valset* last_observed_valset) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.last_observed_valset_);
  }
  _impl_.last_observed_valset_ = last_observed_valset;
  if (last_observed_valset) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:injective.peggy.v1.GenesisState.last_observed_valset)
}
inline ::injective::peggy::v1::Valset* GenesisState::release_last_observed_valset() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::injective::peggy::v1::Valset* temp = _impl_.last_observed_valset_;
  _impl_.last_observed_valset_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::injective::peggy::v1::Valset* GenesisState::unsafe_arena_release_last_observed_valset() {
  // @@protoc_insertion_point(field_release:injective.peggy.v1.GenesisState.last_observed_valset)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::injective::peggy::v1::Valset* temp = _impl_.last_observed_valset_;
  _impl_.last_observed_valset_ = nullptr;
  return temp;
}
inline ::injective::peggy::v1::Valset* GenesisState::_internal_mutable_last_observed_valset() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.last_observed_valset_ == nullptr) {
    auto* p = CreateMaybeMessage<::injective::peggy::v1::Valset>(GetArenaForAllocation());
    _impl_.last_observed_valset_ = p;
  }
  return _impl_.last_observed_valset_;
}
inline ::injective::peggy::v1::Valset* GenesisState::mutable_last_observed_valset() {
  ::injective::peggy::v1::Valset* _msg = _internal_mutable_last_observed_valset();
  // @@protoc_insertion_point(field_mutable:injective.peggy.v1.GenesisState.last_observed_valset)
  return _msg;
}
inline void GenesisState::set_allocated_last_observed_valset(::injective::peggy::v1::Valset* last_observed_valset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.last_observed_valset_);
  }
  if (last_observed_valset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_observed_valset));
    if (message_arena != submessage_arena) {
      last_observed_valset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, last_observed_valset, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.last_observed_valset_ = last_observed_valset;
  // @@protoc_insertion_point(field_set_allocated:injective.peggy.v1.GenesisState.last_observed_valset)
}

// repeated string ethereum_blacklist = 15 [json_name = "ethereumBlacklist"];
inline int GenesisState::_internal_ethereum_blacklist_size() const {
  return _impl_.ethereum_blacklist_.size();
}
inline int GenesisState::ethereum_blacklist_size() const {
  return _internal_ethereum_blacklist_size();
}
inline void GenesisState::clear_ethereum_blacklist() {
  _internal_mutable_ethereum_blacklist()->Clear();
}
inline std::string* GenesisState::add_ethereum_blacklist() {
  std::string* _s = _internal_add_ethereum_blacklist();
  // @@protoc_insertion_point(field_add_mutable:injective.peggy.v1.GenesisState.ethereum_blacklist)
  return _s;
}
inline const std::string& GenesisState::ethereum_blacklist(int index) const {
  // @@protoc_insertion_point(field_get:injective.peggy.v1.GenesisState.ethereum_blacklist)
  return _internal_ethereum_blacklist(index);
}
inline std::string* GenesisState::mutable_ethereum_blacklist(int index) {
  // @@protoc_insertion_point(field_mutable:injective.peggy.v1.GenesisState.ethereum_blacklist)
  return _internal_mutable_ethereum_blacklist()->Mutable(index);
}
inline void GenesisState::set_ethereum_blacklist(int index, const std::string& value) {
  _internal_mutable_ethereum_blacklist()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:injective.peggy.v1.GenesisState.ethereum_blacklist)
}
inline void GenesisState::set_ethereum_blacklist(int index, std::string&& value) {
  _internal_mutable_ethereum_blacklist()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:injective.peggy.v1.GenesisState.ethereum_blacklist)
}
inline void GenesisState::set_ethereum_blacklist(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_ethereum_blacklist()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:injective.peggy.v1.GenesisState.ethereum_blacklist)
}
inline void GenesisState::set_ethereum_blacklist(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_ethereum_blacklist()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:injective.peggy.v1.GenesisState.ethereum_blacklist)
}
inline void GenesisState::set_ethereum_blacklist(int index, absl::string_view value) {
  _internal_mutable_ethereum_blacklist()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:injective.peggy.v1.GenesisState.ethereum_blacklist)
}
inline void GenesisState::add_ethereum_blacklist(const std::string& value) {
  _internal_mutable_ethereum_blacklist()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:injective.peggy.v1.GenesisState.ethereum_blacklist)
}
inline void GenesisState::add_ethereum_blacklist(std::string&& value) {
  _internal_mutable_ethereum_blacklist()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:injective.peggy.v1.GenesisState.ethereum_blacklist)
}
inline void GenesisState::add_ethereum_blacklist(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_ethereum_blacklist()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:injective.peggy.v1.GenesisState.ethereum_blacklist)
}
inline void GenesisState::add_ethereum_blacklist(const char* value, std::size_t size) {
  _internal_mutable_ethereum_blacklist()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:injective.peggy.v1.GenesisState.ethereum_blacklist)
}
inline void GenesisState::add_ethereum_blacklist(absl::string_view value) {
  _internal_mutable_ethereum_blacklist()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:injective.peggy.v1.GenesisState.ethereum_blacklist)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GenesisState::ethereum_blacklist() const {
  // @@protoc_insertion_point(field_list:injective.peggy.v1.GenesisState.ethereum_blacklist)
  return _internal_ethereum_blacklist();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* GenesisState::mutable_ethereum_blacklist() {
  // @@protoc_insertion_point(field_mutable_list:injective.peggy.v1.GenesisState.ethereum_blacklist)
  return _internal_mutable_ethereum_blacklist();
}
inline const std::string& GenesisState::_internal_ethereum_blacklist(int index) const {
  return _internal_ethereum_blacklist().Get(index);
}
inline std::string* GenesisState::_internal_add_ethereum_blacklist() {
  return _internal_mutable_ethereum_blacklist()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GenesisState::_internal_ethereum_blacklist() const {
  return _impl_.ethereum_blacklist_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GenesisState::_internal_mutable_ethereum_blacklist() {
  return &_impl_.ethereum_blacklist_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace peggy
}  // namespace injective


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_injective_2fpeggy_2fv1_2fgenesis_2eproto_2epb_2eh

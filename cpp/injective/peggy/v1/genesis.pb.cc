// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: injective/peggy/v1/genesis.proto

#include "injective/peggy/v1/genesis.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace injective {
namespace peggy {
namespace v1 {
template <typename>
PROTOBUF_CONSTEXPR GenesisState::GenesisState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.valsets_)*/{}
  , /*decltype(_impl_.valset_confirms_)*/{}
  , /*decltype(_impl_.batches_)*/{}
  , /*decltype(_impl_.batch_confirms_)*/{}
  , /*decltype(_impl_.attestations_)*/{}
  , /*decltype(_impl_.orchestrator_addresses_)*/{}
  , /*decltype(_impl_.erc20_to_denoms_)*/{}
  , /*decltype(_impl_.unbatched_transfers_)*/{}
  , /*decltype(_impl_.ethereum_blacklist_)*/{}
  , /*decltype(_impl_.params_)*/nullptr
  , /*decltype(_impl_.last_observed_valset_)*/nullptr
  , /*decltype(_impl_.last_observed_nonce_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.last_observed_ethereum_height_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.last_outgoing_batch_id_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.last_outgoing_pool_id_)*/ ::uint64_t{0u}
} {}
struct GenesisStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GenesisStateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GenesisStateDefaultTypeInternal() {}
  union {
    GenesisState _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GenesisStateDefaultTypeInternal _GenesisState_default_instance_;
}  // namespace v1
}  // namespace peggy
}  // namespace injective
static ::_pb::Metadata file_level_metadata_injective_2fpeggy_2fv1_2fgenesis_2eproto[1];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_injective_2fpeggy_2fv1_2fgenesis_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_injective_2fpeggy_2fv1_2fgenesis_2eproto = nullptr;
const ::uint32_t TableStruct_injective_2fpeggy_2fv1_2fgenesis_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::GenesisState, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::GenesisState, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::GenesisState, _impl_.params_),
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::GenesisState, _impl_.last_observed_nonce_),
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::GenesisState, _impl_.valsets_),
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::GenesisState, _impl_.valset_confirms_),
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::GenesisState, _impl_.batches_),
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::GenesisState, _impl_.batch_confirms_),
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::GenesisState, _impl_.attestations_),
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::GenesisState, _impl_.orchestrator_addresses_),
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::GenesisState, _impl_.erc20_to_denoms_),
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::GenesisState, _impl_.unbatched_transfers_),
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::GenesisState, _impl_.last_observed_ethereum_height_),
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::GenesisState, _impl_.last_outgoing_batch_id_),
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::GenesisState, _impl_.last_outgoing_pool_id_),
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::GenesisState, _impl_.last_observed_valset_),
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::GenesisState, _impl_.ethereum_blacklist_),
    0,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    1,
    ~0u,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 23, -1, sizeof(::injective::peggy::v1::GenesisState)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::injective::peggy::v1::_GenesisState_default_instance_._instance,
};
const char descriptor_table_protodef_injective_2fpeggy_2fv1_2fgenesis_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n injective/peggy/v1/genesis.proto\022\022inje"
    "ctive.peggy.v1\032\024gogoproto/gogo.proto\032\036in"
    "jective/peggy/v1/types.proto\032\035injective/"
    "peggy/v1/msgs.proto\032\036injective/peggy/v1/"
    "batch.proto\032$injective/peggy/v1/attestat"
    "ion.proto\032\037injective/peggy/v1/params.pro"
    "to\032\036cosmos/base/v1beta1/coin.proto\"\200\010\n\014G"
    "enesisState\0222\n\006params\030\001 \001(\0132\032.injective."
    "peggy.v1.ParamsR\006params\022.\n\023last_observed"
    "_nonce\030\002 \001(\004R\021lastObservedNonce\0224\n\007valse"
    "ts\030\003 \003(\0132\032.injective.peggy.v1.ValsetR\007va"
    "lsets\022M\n\017valset_confirms\030\004 \003(\0132$.injecti"
    "ve.peggy.v1.MsgValsetConfirmR\016valsetConf"
    "irms\022=\n\007batches\030\005 \003(\0132#.injective.peggy."
    "v1.OutgoingTxBatchR\007batches\022J\n\016batch_con"
    "firms\030\006 \003(\0132#.injective.peggy.v1.MsgConf"
    "irmBatchR\rbatchConfirms\022C\n\014attestations\030"
    "\007 \003(\0132\037.injective.peggy.v1.AttestationR\014"
    "attestations\022f\n\026orchestrator_addresses\030\010"
    " \003(\0132/.injective.peggy.v1.MsgSetOrchestr"
    "atorAddressesR\025orchestratorAddresses\022H\n\017"
    "erc20_to_denoms\030\t \003(\0132 .injective.peggy."
    "v1.ERC20ToDenomR\rerc20ToDenoms\022W\n\023unbatc"
    "hed_transfers\030\n \003(\0132&.injective.peggy.v1"
    ".OutgoingTransferTxR\022unbatchedTransfers\022"
    "A\n\035last_observed_ethereum_height\030\013 \001(\004R\032"
    "lastObservedEthereumHeight\0223\n\026last_outgo"
    "ing_batch_id\030\014 \001(\004R\023lastOutgoingBatchId\022"
    "1\n\025last_outgoing_pool_id\030\r \001(\004R\022lastOutg"
    "oingPoolId\022R\n\024last_observed_valset\030\016 \001(\013"
    "2\032.injective.peggy.v1.ValsetB\004\310\336\037\000R\022last"
    "ObservedValset\022-\n\022ethereum_blacklist\030\017 \003"
    "(\tR\021ethereumBlacklistB\335\001\n\026com.injective."
    "peggy.v1B\014GenesisProtoP\001ZKgithub.com/Inj"
    "ectiveLabs/injective-core/injective-chai"
    "n/modules/peggy/types\242\002\003IPX\252\002\022Injective."
    "Peggy.V1\312\002\022Injective\\Peggy\\V1\342\002\036Injectiv"
    "e\\Peggy\\V1\\GPBMetadata\352\002\024Injective::Pegg"
    "y::V1b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_injective_2fpeggy_2fv1_2fgenesis_2eproto_deps[7] =
    {
        &::descriptor_table_cosmos_2fbase_2fv1beta1_2fcoin_2eproto,
        &::descriptor_table_gogoproto_2fgogo_2eproto,
        &::descriptor_table_injective_2fpeggy_2fv1_2fattestation_2eproto,
        &::descriptor_table_injective_2fpeggy_2fv1_2fbatch_2eproto,
        &::descriptor_table_injective_2fpeggy_2fv1_2fmsgs_2eproto,
        &::descriptor_table_injective_2fpeggy_2fv1_2fparams_2eproto,
        &::descriptor_table_injective_2fpeggy_2fv1_2ftypes_2eproto,
};
static ::absl::once_flag descriptor_table_injective_2fpeggy_2fv1_2fgenesis_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_injective_2fpeggy_2fv1_2fgenesis_2eproto = {
    false,
    false,
    1533,
    descriptor_table_protodef_injective_2fpeggy_2fv1_2fgenesis_2eproto,
    "injective/peggy/v1/genesis.proto",
    &descriptor_table_injective_2fpeggy_2fv1_2fgenesis_2eproto_once,
    descriptor_table_injective_2fpeggy_2fv1_2fgenesis_2eproto_deps,
    7,
    1,
    schemas,
    file_default_instances,
    TableStruct_injective_2fpeggy_2fv1_2fgenesis_2eproto::offsets,
    file_level_metadata_injective_2fpeggy_2fv1_2fgenesis_2eproto,
    file_level_enum_descriptors_injective_2fpeggy_2fv1_2fgenesis_2eproto,
    file_level_service_descriptors_injective_2fpeggy_2fv1_2fgenesis_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_injective_2fpeggy_2fv1_2fgenesis_2eproto_getter() {
  return &descriptor_table_injective_2fpeggy_2fv1_2fgenesis_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_injective_2fpeggy_2fv1_2fgenesis_2eproto(&descriptor_table_injective_2fpeggy_2fv1_2fgenesis_2eproto);
namespace injective {
namespace peggy {
namespace v1 {
// ===================================================================

class GenesisState::_Internal {
 public:
  using HasBits = decltype(std::declval<GenesisState>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GenesisState, _impl_._has_bits_);
  static const ::injective::peggy::v1::Params& params(const GenesisState* msg);
  static void set_has_params(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::injective::peggy::v1::Valset& last_observed_valset(const GenesisState* msg);
  static void set_has_last_observed_valset(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::injective::peggy::v1::Params&
GenesisState::_Internal::params(const GenesisState* msg) {
  return *msg->_impl_.params_;
}
const ::injective::peggy::v1::Valset&
GenesisState::_Internal::last_observed_valset(const GenesisState* msg) {
  return *msg->_impl_.last_observed_valset_;
}
void GenesisState::clear_params() {
  if (_impl_.params_ != nullptr) _impl_.params_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void GenesisState::clear_valsets() {
  _internal_mutable_valsets()->Clear();
}
void GenesisState::clear_valset_confirms() {
  _internal_mutable_valset_confirms()->Clear();
}
void GenesisState::clear_batches() {
  _internal_mutable_batches()->Clear();
}
void GenesisState::clear_batch_confirms() {
  _internal_mutable_batch_confirms()->Clear();
}
void GenesisState::clear_attestations() {
  _internal_mutable_attestations()->Clear();
}
void GenesisState::clear_orchestrator_addresses() {
  _internal_mutable_orchestrator_addresses()->Clear();
}
void GenesisState::clear_erc20_to_denoms() {
  _internal_mutable_erc20_to_denoms()->Clear();
}
void GenesisState::clear_unbatched_transfers() {
  _internal_mutable_unbatched_transfers()->Clear();
}
void GenesisState::clear_last_observed_valset() {
  if (_impl_.last_observed_valset_ != nullptr) _impl_.last_observed_valset_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
GenesisState::GenesisState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.peggy.v1.GenesisState)
}
GenesisState::GenesisState(const GenesisState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GenesisState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.valsets_){from._impl_.valsets_}
    , decltype(_impl_.valset_confirms_){from._impl_.valset_confirms_}
    , decltype(_impl_.batches_){from._impl_.batches_}
    , decltype(_impl_.batch_confirms_){from._impl_.batch_confirms_}
    , decltype(_impl_.attestations_){from._impl_.attestations_}
    , decltype(_impl_.orchestrator_addresses_){from._impl_.orchestrator_addresses_}
    , decltype(_impl_.erc20_to_denoms_){from._impl_.erc20_to_denoms_}
    , decltype(_impl_.unbatched_transfers_){from._impl_.unbatched_transfers_}
    , decltype(_impl_.ethereum_blacklist_){from._impl_.ethereum_blacklist_}
    , decltype(_impl_.params_){nullptr}
    , decltype(_impl_.last_observed_valset_){nullptr}
    , decltype(_impl_.last_observed_nonce_) {}

    , decltype(_impl_.last_observed_ethereum_height_) {}

    , decltype(_impl_.last_outgoing_batch_id_) {}

    , decltype(_impl_.last_outgoing_pool_id_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.params_ = new ::injective::peggy::v1::Params(*from._impl_.params_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.last_observed_valset_ = new ::injective::peggy::v1::Valset(*from._impl_.last_observed_valset_);
  }
  ::memcpy(&_impl_.last_observed_nonce_, &from._impl_.last_observed_nonce_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.last_outgoing_pool_id_) -
    reinterpret_cast<char*>(&_impl_.last_observed_nonce_)) + sizeof(_impl_.last_outgoing_pool_id_));
  // @@protoc_insertion_point(copy_constructor:injective.peggy.v1.GenesisState)
}

inline void GenesisState::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.valsets_){arena}
    , decltype(_impl_.valset_confirms_){arena}
    , decltype(_impl_.batches_){arena}
    , decltype(_impl_.batch_confirms_){arena}
    , decltype(_impl_.attestations_){arena}
    , decltype(_impl_.orchestrator_addresses_){arena}
    , decltype(_impl_.erc20_to_denoms_){arena}
    , decltype(_impl_.unbatched_transfers_){arena}
    , decltype(_impl_.ethereum_blacklist_){arena}
    , decltype(_impl_.params_){nullptr}
    , decltype(_impl_.last_observed_valset_){nullptr}
    , decltype(_impl_.last_observed_nonce_) { ::uint64_t{0u} }

    , decltype(_impl_.last_observed_ethereum_height_) { ::uint64_t{0u} }

    , decltype(_impl_.last_outgoing_batch_id_) { ::uint64_t{0u} }

    , decltype(_impl_.last_outgoing_pool_id_) { ::uint64_t{0u} }

  };
}

GenesisState::~GenesisState() {
  // @@protoc_insertion_point(destructor:injective.peggy.v1.GenesisState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GenesisState::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_valsets()->~RepeatedPtrField();
  _internal_mutable_valset_confirms()->~RepeatedPtrField();
  _internal_mutable_batches()->~RepeatedPtrField();
  _internal_mutable_batch_confirms()->~RepeatedPtrField();
  _internal_mutable_attestations()->~RepeatedPtrField();
  _internal_mutable_orchestrator_addresses()->~RepeatedPtrField();
  _internal_mutable_erc20_to_denoms()->~RepeatedPtrField();
  _internal_mutable_unbatched_transfers()->~RepeatedPtrField();
  _internal_mutable_ethereum_blacklist()->~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.params_;
  if (this != internal_default_instance()) delete _impl_.last_observed_valset_;
}

void GenesisState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GenesisState::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.peggy.v1.GenesisState)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_valsets()->Clear();
  _internal_mutable_valset_confirms()->Clear();
  _internal_mutable_batches()->Clear();
  _internal_mutable_batch_confirms()->Clear();
  _internal_mutable_attestations()->Clear();
  _internal_mutable_orchestrator_addresses()->Clear();
  _internal_mutable_erc20_to_denoms()->Clear();
  _internal_mutable_unbatched_transfers()->Clear();
  _internal_mutable_ethereum_blacklist()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.params_ != nullptr);
      _impl_.params_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.last_observed_valset_ != nullptr);
      _impl_.last_observed_valset_->Clear();
    }
  }
  ::memset(&_impl_.last_observed_nonce_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.last_outgoing_pool_id_) -
      reinterpret_cast<char*>(&_impl_.last_observed_nonce_)) + sizeof(_impl_.last_outgoing_pool_id_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GenesisState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .injective.peggy.v1.Params params = 1 [json_name = "params"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_params(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 last_observed_nonce = 2 [json_name = "lastObservedNonce"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.last_observed_nonce_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .injective.peggy.v1.Valset valsets = 3 [json_name = "valsets"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_valsets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .injective.peggy.v1.MsgValsetConfirm valset_confirms = 4 [json_name = "valsetConfirms"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_valset_confirms(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .injective.peggy.v1.OutgoingTxBatch batches = 5 [json_name = "batches"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_batches(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .injective.peggy.v1.MsgConfirmBatch batch_confirms = 6 [json_name = "batchConfirms"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_batch_confirms(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .injective.peggy.v1.Attestation attestations = 7 [json_name = "attestations"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attestations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .injective.peggy.v1.MsgSetOrchestratorAddresses orchestrator_addresses = 8 [json_name = "orchestratorAddresses"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_orchestrator_addresses(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .injective.peggy.v1.ERC20ToDenom erc20_to_denoms = 9 [json_name = "erc20ToDenoms"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_erc20_to_denoms(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .injective.peggy.v1.OutgoingTransferTx unbatched_transfers = 10 [json_name = "unbatchedTransfers"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_unbatched_transfers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 last_observed_ethereum_height = 11 [json_name = "lastObservedEthereumHeight"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 88)) {
          _impl_.last_observed_ethereum_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 last_outgoing_batch_id = 12 [json_name = "lastOutgoingBatchId"];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 96)) {
          _impl_.last_outgoing_batch_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 last_outgoing_pool_id = 13 [json_name = "lastOutgoingPoolId"];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 104)) {
          _impl_.last_outgoing_pool_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .injective.peggy.v1.Valset last_observed_valset = 14 [json_name = "lastObservedValset", (.gogoproto.nullable) = false];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_last_observed_valset(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string ethereum_blacklist = 15 [json_name = "ethereumBlacklist"];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_ethereum_blacklist();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "injective.peggy.v1.GenesisState.ethereum_blacklist"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GenesisState::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.peggy.v1.GenesisState)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .injective.peggy.v1.Params params = 1 [json_name = "params"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::params(this),
        _Internal::params(this).GetCachedSize(), target, stream);
  }

  // uint64 last_observed_nonce = 2 [json_name = "lastObservedNonce"];
  if (this->_internal_last_observed_nonce() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_last_observed_nonce(), target);
  }

  // repeated .injective.peggy.v1.Valset valsets = 3 [json_name = "valsets"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_valsets_size()); i < n; i++) {
    const auto& repfield = this->_internal_valsets(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .injective.peggy.v1.MsgValsetConfirm valset_confirms = 4 [json_name = "valsetConfirms"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_valset_confirms_size()); i < n; i++) {
    const auto& repfield = this->_internal_valset_confirms(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .injective.peggy.v1.OutgoingTxBatch batches = 5 [json_name = "batches"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_batches_size()); i < n; i++) {
    const auto& repfield = this->_internal_batches(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .injective.peggy.v1.MsgConfirmBatch batch_confirms = 6 [json_name = "batchConfirms"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_batch_confirms_size()); i < n; i++) {
    const auto& repfield = this->_internal_batch_confirms(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .injective.peggy.v1.Attestation attestations = 7 [json_name = "attestations"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_attestations_size()); i < n; i++) {
    const auto& repfield = this->_internal_attestations(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .injective.peggy.v1.MsgSetOrchestratorAddresses orchestrator_addresses = 8 [json_name = "orchestratorAddresses"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_orchestrator_addresses_size()); i < n; i++) {
    const auto& repfield = this->_internal_orchestrator_addresses(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .injective.peggy.v1.ERC20ToDenom erc20_to_denoms = 9 [json_name = "erc20ToDenoms"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_erc20_to_denoms_size()); i < n; i++) {
    const auto& repfield = this->_internal_erc20_to_denoms(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .injective.peggy.v1.OutgoingTransferTx unbatched_transfers = 10 [json_name = "unbatchedTransfers"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_unbatched_transfers_size()); i < n; i++) {
    const auto& repfield = this->_internal_unbatched_transfers(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(10, repfield, repfield.GetCachedSize(), target, stream);
  }

  // uint64 last_observed_ethereum_height = 11 [json_name = "lastObservedEthereumHeight"];
  if (this->_internal_last_observed_ethereum_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        11, this->_internal_last_observed_ethereum_height(), target);
  }

  // uint64 last_outgoing_batch_id = 12 [json_name = "lastOutgoingBatchId"];
  if (this->_internal_last_outgoing_batch_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        12, this->_internal_last_outgoing_batch_id(), target);
  }

  // uint64 last_outgoing_pool_id = 13 [json_name = "lastOutgoingPoolId"];
  if (this->_internal_last_outgoing_pool_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        13, this->_internal_last_outgoing_pool_id(), target);
  }

  // .injective.peggy.v1.Valset last_observed_valset = 14 [json_name = "lastObservedValset", (.gogoproto.nullable) = false];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::last_observed_valset(this),
        _Internal::last_observed_valset(this).GetCachedSize(), target, stream);
  }

  // repeated string ethereum_blacklist = 15 [json_name = "ethereumBlacklist"];
  for (int i = 0, n = this->_internal_ethereum_blacklist_size(); i < n; ++i) {
    const auto& s = this->_internal_ethereum_blacklist(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.peggy.v1.GenesisState.ethereum_blacklist");
    target = stream->WriteString(15, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.peggy.v1.GenesisState)
  return target;
}

::size_t GenesisState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.peggy.v1.GenesisState)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .injective.peggy.v1.Valset valsets = 3 [json_name = "valsets"];
  total_size += 1UL * this->_internal_valsets_size();
  for (const auto& msg : this->_internal_valsets()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .injective.peggy.v1.MsgValsetConfirm valset_confirms = 4 [json_name = "valsetConfirms"];
  total_size += 1UL * this->_internal_valset_confirms_size();
  for (const auto& msg : this->_internal_valset_confirms()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .injective.peggy.v1.OutgoingTxBatch batches = 5 [json_name = "batches"];
  total_size += 1UL * this->_internal_batches_size();
  for (const auto& msg : this->_internal_batches()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .injective.peggy.v1.MsgConfirmBatch batch_confirms = 6 [json_name = "batchConfirms"];
  total_size += 1UL * this->_internal_batch_confirms_size();
  for (const auto& msg : this->_internal_batch_confirms()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .injective.peggy.v1.Attestation attestations = 7 [json_name = "attestations"];
  total_size += 1UL * this->_internal_attestations_size();
  for (const auto& msg : this->_internal_attestations()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .injective.peggy.v1.MsgSetOrchestratorAddresses orchestrator_addresses = 8 [json_name = "orchestratorAddresses"];
  total_size += 1UL * this->_internal_orchestrator_addresses_size();
  for (const auto& msg : this->_internal_orchestrator_addresses()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .injective.peggy.v1.ERC20ToDenom erc20_to_denoms = 9 [json_name = "erc20ToDenoms"];
  total_size += 1UL * this->_internal_erc20_to_denoms_size();
  for (const auto& msg : this->_internal_erc20_to_denoms()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .injective.peggy.v1.OutgoingTransferTx unbatched_transfers = 10 [json_name = "unbatchedTransfers"];
  total_size += 1UL * this->_internal_unbatched_transfers_size();
  for (const auto& msg : this->_internal_unbatched_transfers()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string ethereum_blacklist = 15 [json_name = "ethereumBlacklist"];
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_ethereum_blacklist().size());
  for (int i = 0, n = _internal_ethereum_blacklist().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_ethereum_blacklist().Get(i));
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .injective.peggy.v1.Params params = 1 [json_name = "params"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.params_);
    }

    // .injective.peggy.v1.Valset last_observed_valset = 14 [json_name = "lastObservedValset", (.gogoproto.nullable) = false];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.last_observed_valset_);
    }

  }
  // uint64 last_observed_nonce = 2 [json_name = "lastObservedNonce"];
  if (this->_internal_last_observed_nonce() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_last_observed_nonce());
  }

  // uint64 last_observed_ethereum_height = 11 [json_name = "lastObservedEthereumHeight"];
  if (this->_internal_last_observed_ethereum_height() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_last_observed_ethereum_height());
  }

  // uint64 last_outgoing_batch_id = 12 [json_name = "lastOutgoingBatchId"];
  if (this->_internal_last_outgoing_batch_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_last_outgoing_batch_id());
  }

  // uint64 last_outgoing_pool_id = 13 [json_name = "lastOutgoingPoolId"];
  if (this->_internal_last_outgoing_pool_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_last_outgoing_pool_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GenesisState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GenesisState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GenesisState::GetClassData() const { return &_class_data_; }


void GenesisState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GenesisState*>(&to_msg);
  auto& from = static_cast<const GenesisState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.peggy.v1.GenesisState)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_valsets()->MergeFrom(from._internal_valsets());
  _this->_internal_mutable_valset_confirms()->MergeFrom(from._internal_valset_confirms());
  _this->_internal_mutable_batches()->MergeFrom(from._internal_batches());
  _this->_internal_mutable_batch_confirms()->MergeFrom(from._internal_batch_confirms());
  _this->_internal_mutable_attestations()->MergeFrom(from._internal_attestations());
  _this->_internal_mutable_orchestrator_addresses()->MergeFrom(from._internal_orchestrator_addresses());
  _this->_internal_mutable_erc20_to_denoms()->MergeFrom(from._internal_erc20_to_denoms());
  _this->_internal_mutable_unbatched_transfers()->MergeFrom(from._internal_unbatched_transfers());
  _this->_internal_mutable_ethereum_blacklist()->MergeFrom(from._internal_ethereum_blacklist());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_params()->::injective::peggy::v1::Params::MergeFrom(
          from._internal_params());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_last_observed_valset()->::injective::peggy::v1::Valset::MergeFrom(
          from._internal_last_observed_valset());
    }
  }
  if (from._internal_last_observed_nonce() != 0) {
    _this->_internal_set_last_observed_nonce(from._internal_last_observed_nonce());
  }
  if (from._internal_last_observed_ethereum_height() != 0) {
    _this->_internal_set_last_observed_ethereum_height(from._internal_last_observed_ethereum_height());
  }
  if (from._internal_last_outgoing_batch_id() != 0) {
    _this->_internal_set_last_outgoing_batch_id(from._internal_last_outgoing_batch_id());
  }
  if (from._internal_last_outgoing_pool_id() != 0) {
    _this->_internal_set_last_outgoing_pool_id(from._internal_last_outgoing_pool_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GenesisState::CopyFrom(const GenesisState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.peggy.v1.GenesisState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenesisState::IsInitialized() const {
  return true;
}

void GenesisState::InternalSwap(GenesisState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_valsets()->InternalSwap(other->_internal_mutable_valsets());
  _internal_mutable_valset_confirms()->InternalSwap(other->_internal_mutable_valset_confirms());
  _internal_mutable_batches()->InternalSwap(other->_internal_mutable_batches());
  _internal_mutable_batch_confirms()->InternalSwap(other->_internal_mutable_batch_confirms());
  _internal_mutable_attestations()->InternalSwap(other->_internal_mutable_attestations());
  _internal_mutable_orchestrator_addresses()->InternalSwap(other->_internal_mutable_orchestrator_addresses());
  _internal_mutable_erc20_to_denoms()->InternalSwap(other->_internal_mutable_erc20_to_denoms());
  _internal_mutable_unbatched_transfers()->InternalSwap(other->_internal_mutable_unbatched_transfers());
  _internal_mutable_ethereum_blacklist()->InternalSwap(
      other->_internal_mutable_ethereum_blacklist());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GenesisState, _impl_.last_outgoing_pool_id_)
      + sizeof(GenesisState::_impl_.last_outgoing_pool_id_)
      - PROTOBUF_FIELD_OFFSET(GenesisState, _impl_.params_)>(
          reinterpret_cast<char*>(&_impl_.params_),
          reinterpret_cast<char*>(&other->_impl_.params_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GenesisState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fpeggy_2fv1_2fgenesis_2eproto_getter, &descriptor_table_injective_2fpeggy_2fv1_2fgenesis_2eproto_once,
      file_level_metadata_injective_2fpeggy_2fv1_2fgenesis_2eproto[0]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace peggy
}  // namespace injective
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::injective::peggy::v1::GenesisState*
Arena::CreateMaybeMessage< ::injective::peggy::v1::GenesisState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::peggy::v1::GenesisState >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: injective/peggy/v1/msgs.proto

#include "injective/peggy/v1/msgs.pb.h"
#include "injective/peggy/v1/msgs.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace injective {
namespace peggy {
namespace v1 {

static const char* Msg_method_names[] = {
  "/injective.peggy.v1.Msg/ValsetConfirm",
  "/injective.peggy.v1.Msg/SendToEth",
  "/injective.peggy.v1.Msg/RequestBatch",
  "/injective.peggy.v1.Msg/ConfirmBatch",
  "/injective.peggy.v1.Msg/DepositClaim",
  "/injective.peggy.v1.Msg/WithdrawClaim",
  "/injective.peggy.v1.Msg/ValsetUpdateClaim",
  "/injective.peggy.v1.Msg/ERC20DeployedClaim",
  "/injective.peggy.v1.Msg/SetOrchestratorAddresses",
  "/injective.peggy.v1.Msg/CancelSendToEth",
  "/injective.peggy.v1.Msg/SubmitBadSignatureEvidence",
  "/injective.peggy.v1.Msg/UpdateParams",
};

std::unique_ptr< Msg::Stub> Msg::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Msg::Stub> stub(new Msg::Stub(channel, options));
  return stub;
}

Msg::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_ValsetConfirm_(Msg_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SendToEth_(Msg_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RequestBatch_(Msg_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ConfirmBatch_(Msg_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DepositClaim_(Msg_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_WithdrawClaim_(Msg_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ValsetUpdateClaim_(Msg_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ERC20DeployedClaim_(Msg_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetOrchestratorAddresses_(Msg_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CancelSendToEth_(Msg_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SubmitBadSignatureEvidence_(Msg_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateParams_(Msg_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Msg::Stub::ValsetConfirm(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgValsetConfirm& request, ::injective::peggy::v1::MsgValsetConfirmResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::peggy::v1::MsgValsetConfirm, ::injective::peggy::v1::MsgValsetConfirmResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ValsetConfirm_, context, request, response);
}

void Msg::Stub::async::ValsetConfirm(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgValsetConfirm* request, ::injective::peggy::v1::MsgValsetConfirmResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::peggy::v1::MsgValsetConfirm, ::injective::peggy::v1::MsgValsetConfirmResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ValsetConfirm_, context, request, response, std::move(f));
}

void Msg::Stub::async::ValsetConfirm(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgValsetConfirm* request, ::injective::peggy::v1::MsgValsetConfirmResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ValsetConfirm_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::MsgValsetConfirmResponse>* Msg::Stub::PrepareAsyncValsetConfirmRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgValsetConfirm& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::peggy::v1::MsgValsetConfirmResponse, ::injective::peggy::v1::MsgValsetConfirm, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ValsetConfirm_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::MsgValsetConfirmResponse>* Msg::Stub::AsyncValsetConfirmRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgValsetConfirm& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncValsetConfirmRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Msg::Stub::SendToEth(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgSendToEth& request, ::injective::peggy::v1::MsgSendToEthResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::peggy::v1::MsgSendToEth, ::injective::peggy::v1::MsgSendToEthResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SendToEth_, context, request, response);
}

void Msg::Stub::async::SendToEth(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgSendToEth* request, ::injective::peggy::v1::MsgSendToEthResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::peggy::v1::MsgSendToEth, ::injective::peggy::v1::MsgSendToEthResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendToEth_, context, request, response, std::move(f));
}

void Msg::Stub::async::SendToEth(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgSendToEth* request, ::injective::peggy::v1::MsgSendToEthResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendToEth_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::MsgSendToEthResponse>* Msg::Stub::PrepareAsyncSendToEthRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgSendToEth& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::peggy::v1::MsgSendToEthResponse, ::injective::peggy::v1::MsgSendToEth, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SendToEth_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::MsgSendToEthResponse>* Msg::Stub::AsyncSendToEthRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgSendToEth& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSendToEthRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Msg::Stub::RequestBatch(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgRequestBatch& request, ::injective::peggy::v1::MsgRequestBatchResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::peggy::v1::MsgRequestBatch, ::injective::peggy::v1::MsgRequestBatchResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RequestBatch_, context, request, response);
}

void Msg::Stub::async::RequestBatch(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgRequestBatch* request, ::injective::peggy::v1::MsgRequestBatchResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::peggy::v1::MsgRequestBatch, ::injective::peggy::v1::MsgRequestBatchResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RequestBatch_, context, request, response, std::move(f));
}

void Msg::Stub::async::RequestBatch(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgRequestBatch* request, ::injective::peggy::v1::MsgRequestBatchResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RequestBatch_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::MsgRequestBatchResponse>* Msg::Stub::PrepareAsyncRequestBatchRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgRequestBatch& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::peggy::v1::MsgRequestBatchResponse, ::injective::peggy::v1::MsgRequestBatch, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RequestBatch_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::MsgRequestBatchResponse>* Msg::Stub::AsyncRequestBatchRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgRequestBatch& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRequestBatchRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Msg::Stub::ConfirmBatch(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgConfirmBatch& request, ::injective::peggy::v1::MsgConfirmBatchResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::peggy::v1::MsgConfirmBatch, ::injective::peggy::v1::MsgConfirmBatchResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ConfirmBatch_, context, request, response);
}

void Msg::Stub::async::ConfirmBatch(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgConfirmBatch* request, ::injective::peggy::v1::MsgConfirmBatchResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::peggy::v1::MsgConfirmBatch, ::injective::peggy::v1::MsgConfirmBatchResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ConfirmBatch_, context, request, response, std::move(f));
}

void Msg::Stub::async::ConfirmBatch(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgConfirmBatch* request, ::injective::peggy::v1::MsgConfirmBatchResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ConfirmBatch_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::MsgConfirmBatchResponse>* Msg::Stub::PrepareAsyncConfirmBatchRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgConfirmBatch& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::peggy::v1::MsgConfirmBatchResponse, ::injective::peggy::v1::MsgConfirmBatch, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ConfirmBatch_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::MsgConfirmBatchResponse>* Msg::Stub::AsyncConfirmBatchRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgConfirmBatch& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncConfirmBatchRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Msg::Stub::DepositClaim(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgDepositClaim& request, ::injective::peggy::v1::MsgDepositClaimResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::peggy::v1::MsgDepositClaim, ::injective::peggy::v1::MsgDepositClaimResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DepositClaim_, context, request, response);
}

void Msg::Stub::async::DepositClaim(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgDepositClaim* request, ::injective::peggy::v1::MsgDepositClaimResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::peggy::v1::MsgDepositClaim, ::injective::peggy::v1::MsgDepositClaimResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DepositClaim_, context, request, response, std::move(f));
}

void Msg::Stub::async::DepositClaim(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgDepositClaim* request, ::injective::peggy::v1::MsgDepositClaimResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DepositClaim_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::MsgDepositClaimResponse>* Msg::Stub::PrepareAsyncDepositClaimRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgDepositClaim& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::peggy::v1::MsgDepositClaimResponse, ::injective::peggy::v1::MsgDepositClaim, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DepositClaim_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::MsgDepositClaimResponse>* Msg::Stub::AsyncDepositClaimRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgDepositClaim& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDepositClaimRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Msg::Stub::WithdrawClaim(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgWithdrawClaim& request, ::injective::peggy::v1::MsgWithdrawClaimResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::peggy::v1::MsgWithdrawClaim, ::injective::peggy::v1::MsgWithdrawClaimResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_WithdrawClaim_, context, request, response);
}

void Msg::Stub::async::WithdrawClaim(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgWithdrawClaim* request, ::injective::peggy::v1::MsgWithdrawClaimResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::peggy::v1::MsgWithdrawClaim, ::injective::peggy::v1::MsgWithdrawClaimResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_WithdrawClaim_, context, request, response, std::move(f));
}

void Msg::Stub::async::WithdrawClaim(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgWithdrawClaim* request, ::injective::peggy::v1::MsgWithdrawClaimResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_WithdrawClaim_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::MsgWithdrawClaimResponse>* Msg::Stub::PrepareAsyncWithdrawClaimRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgWithdrawClaim& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::peggy::v1::MsgWithdrawClaimResponse, ::injective::peggy::v1::MsgWithdrawClaim, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_WithdrawClaim_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::MsgWithdrawClaimResponse>* Msg::Stub::AsyncWithdrawClaimRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgWithdrawClaim& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncWithdrawClaimRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Msg::Stub::ValsetUpdateClaim(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgValsetUpdatedClaim& request, ::injective::peggy::v1::MsgValsetUpdatedClaimResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::peggy::v1::MsgValsetUpdatedClaim, ::injective::peggy::v1::MsgValsetUpdatedClaimResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ValsetUpdateClaim_, context, request, response);
}

void Msg::Stub::async::ValsetUpdateClaim(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgValsetUpdatedClaim* request, ::injective::peggy::v1::MsgValsetUpdatedClaimResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::peggy::v1::MsgValsetUpdatedClaim, ::injective::peggy::v1::MsgValsetUpdatedClaimResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ValsetUpdateClaim_, context, request, response, std::move(f));
}

void Msg::Stub::async::ValsetUpdateClaim(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgValsetUpdatedClaim* request, ::injective::peggy::v1::MsgValsetUpdatedClaimResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ValsetUpdateClaim_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::MsgValsetUpdatedClaimResponse>* Msg::Stub::PrepareAsyncValsetUpdateClaimRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgValsetUpdatedClaim& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::peggy::v1::MsgValsetUpdatedClaimResponse, ::injective::peggy::v1::MsgValsetUpdatedClaim, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ValsetUpdateClaim_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::MsgValsetUpdatedClaimResponse>* Msg::Stub::AsyncValsetUpdateClaimRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgValsetUpdatedClaim& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncValsetUpdateClaimRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Msg::Stub::ERC20DeployedClaim(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgERC20DeployedClaim& request, ::injective::peggy::v1::MsgERC20DeployedClaimResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::peggy::v1::MsgERC20DeployedClaim, ::injective::peggy::v1::MsgERC20DeployedClaimResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ERC20DeployedClaim_, context, request, response);
}

void Msg::Stub::async::ERC20DeployedClaim(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgERC20DeployedClaim* request, ::injective::peggy::v1::MsgERC20DeployedClaimResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::peggy::v1::MsgERC20DeployedClaim, ::injective::peggy::v1::MsgERC20DeployedClaimResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ERC20DeployedClaim_, context, request, response, std::move(f));
}

void Msg::Stub::async::ERC20DeployedClaim(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgERC20DeployedClaim* request, ::injective::peggy::v1::MsgERC20DeployedClaimResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ERC20DeployedClaim_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::MsgERC20DeployedClaimResponse>* Msg::Stub::PrepareAsyncERC20DeployedClaimRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgERC20DeployedClaim& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::peggy::v1::MsgERC20DeployedClaimResponse, ::injective::peggy::v1::MsgERC20DeployedClaim, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ERC20DeployedClaim_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::MsgERC20DeployedClaimResponse>* Msg::Stub::AsyncERC20DeployedClaimRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgERC20DeployedClaim& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncERC20DeployedClaimRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Msg::Stub::SetOrchestratorAddresses(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgSetOrchestratorAddresses& request, ::injective::peggy::v1::MsgSetOrchestratorAddressesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::peggy::v1::MsgSetOrchestratorAddresses, ::injective::peggy::v1::MsgSetOrchestratorAddressesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetOrchestratorAddresses_, context, request, response);
}

void Msg::Stub::async::SetOrchestratorAddresses(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgSetOrchestratorAddresses* request, ::injective::peggy::v1::MsgSetOrchestratorAddressesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::peggy::v1::MsgSetOrchestratorAddresses, ::injective::peggy::v1::MsgSetOrchestratorAddressesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetOrchestratorAddresses_, context, request, response, std::move(f));
}

void Msg::Stub::async::SetOrchestratorAddresses(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgSetOrchestratorAddresses* request, ::injective::peggy::v1::MsgSetOrchestratorAddressesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetOrchestratorAddresses_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::MsgSetOrchestratorAddressesResponse>* Msg::Stub::PrepareAsyncSetOrchestratorAddressesRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgSetOrchestratorAddresses& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::peggy::v1::MsgSetOrchestratorAddressesResponse, ::injective::peggy::v1::MsgSetOrchestratorAddresses, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetOrchestratorAddresses_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::MsgSetOrchestratorAddressesResponse>* Msg::Stub::AsyncSetOrchestratorAddressesRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgSetOrchestratorAddresses& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetOrchestratorAddressesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Msg::Stub::CancelSendToEth(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgCancelSendToEth& request, ::injective::peggy::v1::MsgCancelSendToEthResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::peggy::v1::MsgCancelSendToEth, ::injective::peggy::v1::MsgCancelSendToEthResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CancelSendToEth_, context, request, response);
}

void Msg::Stub::async::CancelSendToEth(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgCancelSendToEth* request, ::injective::peggy::v1::MsgCancelSendToEthResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::peggy::v1::MsgCancelSendToEth, ::injective::peggy::v1::MsgCancelSendToEthResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CancelSendToEth_, context, request, response, std::move(f));
}

void Msg::Stub::async::CancelSendToEth(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgCancelSendToEth* request, ::injective::peggy::v1::MsgCancelSendToEthResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CancelSendToEth_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::MsgCancelSendToEthResponse>* Msg::Stub::PrepareAsyncCancelSendToEthRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgCancelSendToEth& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::peggy::v1::MsgCancelSendToEthResponse, ::injective::peggy::v1::MsgCancelSendToEth, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CancelSendToEth_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::MsgCancelSendToEthResponse>* Msg::Stub::AsyncCancelSendToEthRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgCancelSendToEth& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCancelSendToEthRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Msg::Stub::SubmitBadSignatureEvidence(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgSubmitBadSignatureEvidence& request, ::injective::peggy::v1::MsgSubmitBadSignatureEvidenceResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::peggy::v1::MsgSubmitBadSignatureEvidence, ::injective::peggy::v1::MsgSubmitBadSignatureEvidenceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SubmitBadSignatureEvidence_, context, request, response);
}

void Msg::Stub::async::SubmitBadSignatureEvidence(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgSubmitBadSignatureEvidence* request, ::injective::peggy::v1::MsgSubmitBadSignatureEvidenceResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::peggy::v1::MsgSubmitBadSignatureEvidence, ::injective::peggy::v1::MsgSubmitBadSignatureEvidenceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SubmitBadSignatureEvidence_, context, request, response, std::move(f));
}

void Msg::Stub::async::SubmitBadSignatureEvidence(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgSubmitBadSignatureEvidence* request, ::injective::peggy::v1::MsgSubmitBadSignatureEvidenceResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SubmitBadSignatureEvidence_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::MsgSubmitBadSignatureEvidenceResponse>* Msg::Stub::PrepareAsyncSubmitBadSignatureEvidenceRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgSubmitBadSignatureEvidence& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::peggy::v1::MsgSubmitBadSignatureEvidenceResponse, ::injective::peggy::v1::MsgSubmitBadSignatureEvidence, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SubmitBadSignatureEvidence_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::MsgSubmitBadSignatureEvidenceResponse>* Msg::Stub::AsyncSubmitBadSignatureEvidenceRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgSubmitBadSignatureEvidence& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSubmitBadSignatureEvidenceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Msg::Stub::UpdateParams(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgUpdateParams& request, ::injective::peggy::v1::MsgUpdateParamsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::peggy::v1::MsgUpdateParams, ::injective::peggy::v1::MsgUpdateParamsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateParams_, context, request, response);
}

void Msg::Stub::async::UpdateParams(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgUpdateParams* request, ::injective::peggy::v1::MsgUpdateParamsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::peggy::v1::MsgUpdateParams, ::injective::peggy::v1::MsgUpdateParamsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateParams_, context, request, response, std::move(f));
}

void Msg::Stub::async::UpdateParams(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgUpdateParams* request, ::injective::peggy::v1::MsgUpdateParamsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateParams_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::MsgUpdateParamsResponse>* Msg::Stub::PrepareAsyncUpdateParamsRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgUpdateParams& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::peggy::v1::MsgUpdateParamsResponse, ::injective::peggy::v1::MsgUpdateParams, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateParams_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::MsgUpdateParamsResponse>* Msg::Stub::AsyncUpdateParamsRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgUpdateParams& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateParamsRaw(context, request, cq);
  result->StartCall();
  return result;
}

Msg::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Msg_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Msg::Service, ::injective::peggy::v1::MsgValsetConfirm, ::injective::peggy::v1::MsgValsetConfirmResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Msg::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::peggy::v1::MsgValsetConfirm* req,
             ::injective::peggy::v1::MsgValsetConfirmResponse* resp) {
               return service->ValsetConfirm(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Msg_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Msg::Service, ::injective::peggy::v1::MsgSendToEth, ::injective::peggy::v1::MsgSendToEthResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Msg::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::peggy::v1::MsgSendToEth* req,
             ::injective::peggy::v1::MsgSendToEthResponse* resp) {
               return service->SendToEth(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Msg_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Msg::Service, ::injective::peggy::v1::MsgRequestBatch, ::injective::peggy::v1::MsgRequestBatchResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Msg::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::peggy::v1::MsgRequestBatch* req,
             ::injective::peggy::v1::MsgRequestBatchResponse* resp) {
               return service->RequestBatch(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Msg_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Msg::Service, ::injective::peggy::v1::MsgConfirmBatch, ::injective::peggy::v1::MsgConfirmBatchResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Msg::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::peggy::v1::MsgConfirmBatch* req,
             ::injective::peggy::v1::MsgConfirmBatchResponse* resp) {
               return service->ConfirmBatch(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Msg_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Msg::Service, ::injective::peggy::v1::MsgDepositClaim, ::injective::peggy::v1::MsgDepositClaimResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Msg::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::peggy::v1::MsgDepositClaim* req,
             ::injective::peggy::v1::MsgDepositClaimResponse* resp) {
               return service->DepositClaim(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Msg_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Msg::Service, ::injective::peggy::v1::MsgWithdrawClaim, ::injective::peggy::v1::MsgWithdrawClaimResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Msg::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::peggy::v1::MsgWithdrawClaim* req,
             ::injective::peggy::v1::MsgWithdrawClaimResponse* resp) {
               return service->WithdrawClaim(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Msg_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Msg::Service, ::injective::peggy::v1::MsgValsetUpdatedClaim, ::injective::peggy::v1::MsgValsetUpdatedClaimResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Msg::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::peggy::v1::MsgValsetUpdatedClaim* req,
             ::injective::peggy::v1::MsgValsetUpdatedClaimResponse* resp) {
               return service->ValsetUpdateClaim(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Msg_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Msg::Service, ::injective::peggy::v1::MsgERC20DeployedClaim, ::injective::peggy::v1::MsgERC20DeployedClaimResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Msg::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::peggy::v1::MsgERC20DeployedClaim* req,
             ::injective::peggy::v1::MsgERC20DeployedClaimResponse* resp) {
               return service->ERC20DeployedClaim(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Msg_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Msg::Service, ::injective::peggy::v1::MsgSetOrchestratorAddresses, ::injective::peggy::v1::MsgSetOrchestratorAddressesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Msg::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::peggy::v1::MsgSetOrchestratorAddresses* req,
             ::injective::peggy::v1::MsgSetOrchestratorAddressesResponse* resp) {
               return service->SetOrchestratorAddresses(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Msg_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Msg::Service, ::injective::peggy::v1::MsgCancelSendToEth, ::injective::peggy::v1::MsgCancelSendToEthResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Msg::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::peggy::v1::MsgCancelSendToEth* req,
             ::injective::peggy::v1::MsgCancelSendToEthResponse* resp) {
               return service->CancelSendToEth(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Msg_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Msg::Service, ::injective::peggy::v1::MsgSubmitBadSignatureEvidence, ::injective::peggy::v1::MsgSubmitBadSignatureEvidenceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Msg::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::peggy::v1::MsgSubmitBadSignatureEvidence* req,
             ::injective::peggy::v1::MsgSubmitBadSignatureEvidenceResponse* resp) {
               return service->SubmitBadSignatureEvidence(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Msg_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Msg::Service, ::injective::peggy::v1::MsgUpdateParams, ::injective::peggy::v1::MsgUpdateParamsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Msg::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::peggy::v1::MsgUpdateParams* req,
             ::injective::peggy::v1::MsgUpdateParamsResponse* resp) {
               return service->UpdateParams(ctx, req, resp);
             }, this)));
}

Msg::Service::~Service() {
}

::grpc::Status Msg::Service::ValsetConfirm(::grpc::ServerContext* context, const ::injective::peggy::v1::MsgValsetConfirm* request, ::injective::peggy::v1::MsgValsetConfirmResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Msg::Service::SendToEth(::grpc::ServerContext* context, const ::injective::peggy::v1::MsgSendToEth* request, ::injective::peggy::v1::MsgSendToEthResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Msg::Service::RequestBatch(::grpc::ServerContext* context, const ::injective::peggy::v1::MsgRequestBatch* request, ::injective::peggy::v1::MsgRequestBatchResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Msg::Service::ConfirmBatch(::grpc::ServerContext* context, const ::injective::peggy::v1::MsgConfirmBatch* request, ::injective::peggy::v1::MsgConfirmBatchResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Msg::Service::DepositClaim(::grpc::ServerContext* context, const ::injective::peggy::v1::MsgDepositClaim* request, ::injective::peggy::v1::MsgDepositClaimResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Msg::Service::WithdrawClaim(::grpc::ServerContext* context, const ::injective::peggy::v1::MsgWithdrawClaim* request, ::injective::peggy::v1::MsgWithdrawClaimResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Msg::Service::ValsetUpdateClaim(::grpc::ServerContext* context, const ::injective::peggy::v1::MsgValsetUpdatedClaim* request, ::injective::peggy::v1::MsgValsetUpdatedClaimResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Msg::Service::ERC20DeployedClaim(::grpc::ServerContext* context, const ::injective::peggy::v1::MsgERC20DeployedClaim* request, ::injective::peggy::v1::MsgERC20DeployedClaimResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Msg::Service::SetOrchestratorAddresses(::grpc::ServerContext* context, const ::injective::peggy::v1::MsgSetOrchestratorAddresses* request, ::injective::peggy::v1::MsgSetOrchestratorAddressesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Msg::Service::CancelSendToEth(::grpc::ServerContext* context, const ::injective::peggy::v1::MsgCancelSendToEth* request, ::injective::peggy::v1::MsgCancelSendToEthResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Msg::Service::SubmitBadSignatureEvidence(::grpc::ServerContext* context, const ::injective::peggy::v1::MsgSubmitBadSignatureEvidence* request, ::injective::peggy::v1::MsgSubmitBadSignatureEvidenceResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Msg::Service::UpdateParams(::grpc::ServerContext* context, const ::injective::peggy::v1::MsgUpdateParams* request, ::injective::peggy::v1::MsgUpdateParamsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace injective
}  // namespace peggy
}  // namespace v1


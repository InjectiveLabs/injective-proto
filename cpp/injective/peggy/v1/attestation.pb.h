// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: injective/peggy/v1/attestation.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_injective_2fpeggy_2fv1_2fattestation_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_injective_2fpeggy_2fv1_2fattestation_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "gogoproto/gogo.pb.h"
#include "google/protobuf/any.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_injective_2fpeggy_2fv1_2fattestation_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_injective_2fpeggy_2fv1_2fattestation_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_injective_2fpeggy_2fv1_2fattestation_2eproto;
namespace injective {
namespace peggy {
namespace v1 {
class Attestation;
struct AttestationDefaultTypeInternal;
extern AttestationDefaultTypeInternal _Attestation_default_instance_;
class ERC20Token;
struct ERC20TokenDefaultTypeInternal;
extern ERC20TokenDefaultTypeInternal _ERC20Token_default_instance_;
}  // namespace v1
}  // namespace peggy
}  // namespace injective
PROTOBUF_NAMESPACE_OPEN
template <>
::injective::peggy::v1::Attestation* Arena::CreateMaybeMessage<::injective::peggy::v1::Attestation>(Arena*);
template <>
::injective::peggy::v1::ERC20Token* Arena::CreateMaybeMessage<::injective::peggy::v1::ERC20Token>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace injective {
namespace peggy {
namespace v1 {
enum ClaimType : int {
  CLAIM_TYPE_UNKNOWN = 0,
  CLAIM_TYPE_DEPOSIT = 1,
  CLAIM_TYPE_WITHDRAW = 2,
  CLAIM_TYPE_ERC20_DEPLOYED = 3,
  CLAIM_TYPE_VALSET_UPDATED = 4,
  ClaimType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  ClaimType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool ClaimType_IsValid(int value);
constexpr ClaimType ClaimType_MIN = static_cast<ClaimType>(0);
constexpr ClaimType ClaimType_MAX = static_cast<ClaimType>(4);
constexpr int ClaimType_ARRAYSIZE = 4 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
ClaimType_descriptor();
template <typename T>
const std::string& ClaimType_Name(T value) {
  static_assert(std::is_same<T, ClaimType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to ClaimType_Name().");
  return ClaimType_Name(static_cast<ClaimType>(value));
}
template <>
inline const std::string& ClaimType_Name(ClaimType value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<ClaimType_descriptor,
                                                 0, 4>(
      static_cast<int>(value));
}
inline bool ClaimType_Parse(absl::string_view name, ClaimType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ClaimType>(
      ClaimType_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class Attestation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.peggy.v1.Attestation) */ {
 public:
  inline Attestation() : Attestation(nullptr) {}
  ~Attestation() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Attestation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Attestation(const Attestation& from);
  Attestation(Attestation&& from) noexcept
    : Attestation() {
    *this = ::std::move(from);
  }

  inline Attestation& operator=(const Attestation& from) {
    CopyFrom(from);
    return *this;
  }
  inline Attestation& operator=(Attestation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Attestation& default_instance() {
    return *internal_default_instance();
  }
  static inline const Attestation* internal_default_instance() {
    return reinterpret_cast<const Attestation*>(
               &_Attestation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Attestation& a, Attestation& b) {
    a.Swap(&b);
  }
  inline void Swap(Attestation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Attestation* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Attestation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Attestation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Attestation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Attestation& from) {
    Attestation::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Attestation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.peggy.v1.Attestation";
  }
  protected:
  explicit Attestation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVotesFieldNumber = 2,
    kClaimFieldNumber = 4,
    kHeightFieldNumber = 3,
    kObservedFieldNumber = 1,
  };
  // repeated string votes = 2 [json_name = "votes"];
  int votes_size() const;
  private:
  int _internal_votes_size() const;

  public:
  void clear_votes() ;
  const std::string& votes(int index) const;
  std::string* mutable_votes(int index);
  void set_votes(int index, const std::string& value);
  void set_votes(int index, std::string&& value);
  void set_votes(int index, const char* value);
  void set_votes(int index, const char* value, std::size_t size);
  void set_votes(int index, absl::string_view value);
  std::string* add_votes();
  void add_votes(const std::string& value);
  void add_votes(std::string&& value);
  void add_votes(const char* value);
  void add_votes(const char* value, std::size_t size);
  void add_votes(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& votes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_votes();

  private:
  const std::string& _internal_votes(int index) const;
  std::string* _internal_add_votes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_votes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_votes();

  public:
  // .google.protobuf.Any claim = 4 [json_name = "claim"];
  bool has_claim() const;
  void clear_claim() ;
  const ::PROTOBUF_NAMESPACE_ID::Any& claim() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Any* release_claim();
  ::PROTOBUF_NAMESPACE_ID::Any* mutable_claim();
  void set_allocated_claim(::PROTOBUF_NAMESPACE_ID::Any* claim);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Any& _internal_claim() const;
  ::PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_claim();
  public:
  void unsafe_arena_set_allocated_claim(
      ::PROTOBUF_NAMESPACE_ID::Any* claim);
  ::PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_claim();
  // uint64 height = 3 [json_name = "height"];
  void clear_height() ;
  ::uint64_t height() const;
  void set_height(::uint64_t value);

  private:
  ::uint64_t _internal_height() const;
  void _internal_set_height(::uint64_t value);

  public:
  // bool observed = 1 [json_name = "observed"];
  void clear_observed() ;
  bool observed() const;
  void set_observed(bool value);

  private:
  bool _internal_observed() const;
  void _internal_set_observed(bool value);

  public:
  // @@protoc_insertion_point(class_scope:injective.peggy.v1.Attestation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> votes_;
    ::PROTOBUF_NAMESPACE_ID::Any* claim_;
    ::uint64_t height_;
    bool observed_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2fpeggy_2fv1_2fattestation_2eproto;
};// -------------------------------------------------------------------

class ERC20Token final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.peggy.v1.ERC20Token) */ {
 public:
  inline ERC20Token() : ERC20Token(nullptr) {}
  ~ERC20Token() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ERC20Token(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ERC20Token(const ERC20Token& from);
  ERC20Token(ERC20Token&& from) noexcept
    : ERC20Token() {
    *this = ::std::move(from);
  }

  inline ERC20Token& operator=(const ERC20Token& from) {
    CopyFrom(from);
    return *this;
  }
  inline ERC20Token& operator=(ERC20Token&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ERC20Token& default_instance() {
    return *internal_default_instance();
  }
  static inline const ERC20Token* internal_default_instance() {
    return reinterpret_cast<const ERC20Token*>(
               &_ERC20Token_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ERC20Token& a, ERC20Token& b) {
    a.Swap(&b);
  }
  inline void Swap(ERC20Token* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ERC20Token* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ERC20Token* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ERC20Token>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ERC20Token& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ERC20Token& from) {
    ERC20Token::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ERC20Token* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.peggy.v1.ERC20Token";
  }
  protected:
  explicit ERC20Token(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContractFieldNumber = 1,
    kAmountFieldNumber = 2,
  };
  // string contract = 1 [json_name = "contract"];
  void clear_contract() ;
  const std::string& contract() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_contract(Arg_&& arg, Args_... args);
  std::string* mutable_contract();
  PROTOBUF_NODISCARD std::string* release_contract();
  void set_allocated_contract(std::string* ptr);

  private:
  const std::string& _internal_contract() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_contract(
      const std::string& value);
  std::string* _internal_mutable_contract();

  public:
  // string amount = 2 [json_name = "amount", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int"];
  void clear_amount() ;
  const std::string& amount() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_amount(Arg_&& arg, Args_... args);
  std::string* mutable_amount();
  PROTOBUF_NODISCARD std::string* release_amount();
  void set_allocated_amount(std::string* ptr);

  private:
  const std::string& _internal_amount() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_amount(
      const std::string& value);
  std::string* _internal_mutable_amount();

  public:
  // @@protoc_insertion_point(class_scope:injective.peggy.v1.ERC20Token)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contract_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr amount_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2fpeggy_2fv1_2fattestation_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Attestation

// bool observed = 1 [json_name = "observed"];
inline void Attestation::clear_observed() {
  _impl_.observed_ = false;
}
inline bool Attestation::observed() const {
  // @@protoc_insertion_point(field_get:injective.peggy.v1.Attestation.observed)
  return _internal_observed();
}
inline void Attestation::set_observed(bool value) {
  _internal_set_observed(value);
  // @@protoc_insertion_point(field_set:injective.peggy.v1.Attestation.observed)
}
inline bool Attestation::_internal_observed() const {
  return _impl_.observed_;
}
inline void Attestation::_internal_set_observed(bool value) {
  ;
  _impl_.observed_ = value;
}

// repeated string votes = 2 [json_name = "votes"];
inline int Attestation::_internal_votes_size() const {
  return _impl_.votes_.size();
}
inline int Attestation::votes_size() const {
  return _internal_votes_size();
}
inline void Attestation::clear_votes() {
  _internal_mutable_votes()->Clear();
}
inline std::string* Attestation::add_votes() {
  std::string* _s = _internal_add_votes();
  // @@protoc_insertion_point(field_add_mutable:injective.peggy.v1.Attestation.votes)
  return _s;
}
inline const std::string& Attestation::votes(int index) const {
  // @@protoc_insertion_point(field_get:injective.peggy.v1.Attestation.votes)
  return _internal_votes(index);
}
inline std::string* Attestation::mutable_votes(int index) {
  // @@protoc_insertion_point(field_mutable:injective.peggy.v1.Attestation.votes)
  return _internal_mutable_votes()->Mutable(index);
}
inline void Attestation::set_votes(int index, const std::string& value) {
  _internal_mutable_votes()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:injective.peggy.v1.Attestation.votes)
}
inline void Attestation::set_votes(int index, std::string&& value) {
  _internal_mutable_votes()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:injective.peggy.v1.Attestation.votes)
}
inline void Attestation::set_votes(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_votes()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:injective.peggy.v1.Attestation.votes)
}
inline void Attestation::set_votes(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_votes()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:injective.peggy.v1.Attestation.votes)
}
inline void Attestation::set_votes(int index, absl::string_view value) {
  _internal_mutable_votes()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:injective.peggy.v1.Attestation.votes)
}
inline void Attestation::add_votes(const std::string& value) {
  _internal_mutable_votes()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:injective.peggy.v1.Attestation.votes)
}
inline void Attestation::add_votes(std::string&& value) {
  _internal_mutable_votes()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:injective.peggy.v1.Attestation.votes)
}
inline void Attestation::add_votes(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_votes()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:injective.peggy.v1.Attestation.votes)
}
inline void Attestation::add_votes(const char* value, std::size_t size) {
  _internal_mutable_votes()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:injective.peggy.v1.Attestation.votes)
}
inline void Attestation::add_votes(absl::string_view value) {
  _internal_mutable_votes()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:injective.peggy.v1.Attestation.votes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Attestation::votes() const {
  // @@protoc_insertion_point(field_list:injective.peggy.v1.Attestation.votes)
  return _internal_votes();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* Attestation::mutable_votes() {
  // @@protoc_insertion_point(field_mutable_list:injective.peggy.v1.Attestation.votes)
  return _internal_mutable_votes();
}
inline const std::string& Attestation::_internal_votes(int index) const {
  return _internal_votes().Get(index);
}
inline std::string* Attestation::_internal_add_votes() {
  return _internal_mutable_votes()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Attestation::_internal_votes() const {
  return _impl_.votes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Attestation::_internal_mutable_votes() {
  return &_impl_.votes_;
}

// uint64 height = 3 [json_name = "height"];
inline void Attestation::clear_height() {
  _impl_.height_ = ::uint64_t{0u};
}
inline ::uint64_t Attestation::height() const {
  // @@protoc_insertion_point(field_get:injective.peggy.v1.Attestation.height)
  return _internal_height();
}
inline void Attestation::set_height(::uint64_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:injective.peggy.v1.Attestation.height)
}
inline ::uint64_t Attestation::_internal_height() const {
  return _impl_.height_;
}
inline void Attestation::_internal_set_height(::uint64_t value) {
  ;
  _impl_.height_ = value;
}

// .google.protobuf.Any claim = 4 [json_name = "claim"];
inline bool Attestation::has_claim() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.claim_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& Attestation::_internal_claim() const {
  const ::PROTOBUF_NAMESPACE_ID::Any* p = _impl_.claim_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Any&>(
      ::PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& Attestation::claim() const {
  // @@protoc_insertion_point(field_get:injective.peggy.v1.Attestation.claim)
  return _internal_claim();
}
inline void Attestation::unsafe_arena_set_allocated_claim(
    ::PROTOBUF_NAMESPACE_ID::Any* claim) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.claim_);
  }
  _impl_.claim_ = claim;
  if (claim) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:injective.peggy.v1.Attestation.claim)
}
inline ::PROTOBUF_NAMESPACE_ID::Any* Attestation::release_claim() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Any* temp = _impl_.claim_;
  _impl_.claim_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* Attestation::unsafe_arena_release_claim() {
  // @@protoc_insertion_point(field_release:injective.peggy.v1.Attestation.claim)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Any* temp = _impl_.claim_;
  _impl_.claim_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* Attestation::_internal_mutable_claim() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.claim_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Any>(GetArenaForAllocation());
    _impl_.claim_ = p;
  }
  return _impl_.claim_;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* Attestation::mutable_claim() {
  ::PROTOBUF_NAMESPACE_ID::Any* _msg = _internal_mutable_claim();
  // @@protoc_insertion_point(field_mutable:injective.peggy.v1.Attestation.claim)
  return _msg;
}
inline void Attestation::set_allocated_claim(::PROTOBUF_NAMESPACE_ID::Any* claim) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.claim_);
  }
  if (claim) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(claim));
    if (message_arena != submessage_arena) {
      claim = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, claim, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.claim_ = claim;
  // @@protoc_insertion_point(field_set_allocated:injective.peggy.v1.Attestation.claim)
}

// -------------------------------------------------------------------

// ERC20Token

// string contract = 1 [json_name = "contract"];
inline void ERC20Token::clear_contract() {
  _impl_.contract_.ClearToEmpty();
}
inline const std::string& ERC20Token::contract() const {
  // @@protoc_insertion_point(field_get:injective.peggy.v1.ERC20Token.contract)
  return _internal_contract();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ERC20Token::set_contract(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.contract_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.peggy.v1.ERC20Token.contract)
}
inline std::string* ERC20Token::mutable_contract() {
  std::string* _s = _internal_mutable_contract();
  // @@protoc_insertion_point(field_mutable:injective.peggy.v1.ERC20Token.contract)
  return _s;
}
inline const std::string& ERC20Token::_internal_contract() const {
  return _impl_.contract_.Get();
}
inline void ERC20Token::_internal_set_contract(const std::string& value) {
  ;


  _impl_.contract_.Set(value, GetArenaForAllocation());
}
inline std::string* ERC20Token::_internal_mutable_contract() {
  ;
  return _impl_.contract_.Mutable( GetArenaForAllocation());
}
inline std::string* ERC20Token::release_contract() {
  // @@protoc_insertion_point(field_release:injective.peggy.v1.ERC20Token.contract)
  return _impl_.contract_.Release();
}
inline void ERC20Token::set_allocated_contract(std::string* value) {
  _impl_.contract_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.contract_.IsDefault()) {
          _impl_.contract_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.peggy.v1.ERC20Token.contract)
}

// string amount = 2 [json_name = "amount", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int"];
inline void ERC20Token::clear_amount() {
  _impl_.amount_.ClearToEmpty();
}
inline const std::string& ERC20Token::amount() const {
  // @@protoc_insertion_point(field_get:injective.peggy.v1.ERC20Token.amount)
  return _internal_amount();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ERC20Token::set_amount(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.amount_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.peggy.v1.ERC20Token.amount)
}
inline std::string* ERC20Token::mutable_amount() {
  std::string* _s = _internal_mutable_amount();
  // @@protoc_insertion_point(field_mutable:injective.peggy.v1.ERC20Token.amount)
  return _s;
}
inline const std::string& ERC20Token::_internal_amount() const {
  return _impl_.amount_.Get();
}
inline void ERC20Token::_internal_set_amount(const std::string& value) {
  ;


  _impl_.amount_.Set(value, GetArenaForAllocation());
}
inline std::string* ERC20Token::_internal_mutable_amount() {
  ;
  return _impl_.amount_.Mutable( GetArenaForAllocation());
}
inline std::string* ERC20Token::release_amount() {
  // @@protoc_insertion_point(field_release:injective.peggy.v1.ERC20Token.amount)
  return _impl_.amount_.Release();
}
inline void ERC20Token::set_allocated_amount(std::string* value) {
  _impl_.amount_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.amount_.IsDefault()) {
          _impl_.amount_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.peggy.v1.ERC20Token.amount)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace peggy
}  // namespace injective


PROTOBUF_NAMESPACE_OPEN

template <>
struct is_proto_enum<::injective::peggy::v1::ClaimType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::injective::peggy::v1::ClaimType>() {
  return ::injective::peggy::v1::ClaimType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_injective_2fpeggy_2fv1_2fattestation_2eproto_2epb_2eh

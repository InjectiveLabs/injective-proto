// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: injective/peggy/v1/events.proto

#include "injective/peggy/v1/events.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace injective {
namespace peggy {
namespace v1 {
template <typename>
PROTOBUF_CONSTEXPR EventAttestationObserved::EventAttestationObserved(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.bridge_contract_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.attestation_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.bridge_chain_id_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.nonce_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.attestation_type_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EventAttestationObservedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EventAttestationObservedDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EventAttestationObservedDefaultTypeInternal() {}
  union {
    EventAttestationObserved _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EventAttestationObservedDefaultTypeInternal _EventAttestationObserved_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR EventBridgeWithdrawCanceled::EventBridgeWithdrawCanceled(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.bridge_contract_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.bridge_chain_id_)*/ ::uint64_t{0u}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EventBridgeWithdrawCanceledDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EventBridgeWithdrawCanceledDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EventBridgeWithdrawCanceledDefaultTypeInternal() {}
  union {
    EventBridgeWithdrawCanceled _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EventBridgeWithdrawCanceledDefaultTypeInternal _EventBridgeWithdrawCanceled_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR EventOutgoingBatch::EventOutgoingBatch(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.batch_tx_ids_)*/ {}
  ,/* _impl_._batch_tx_ids_cached_byte_size_ = */ { 0 }

  , /*decltype(_impl_.denom_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.orchestrator_address_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.batch_nonce_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.batch_timeout_)*/ ::uint64_t{0u}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EventOutgoingBatchDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EventOutgoingBatchDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EventOutgoingBatchDefaultTypeInternal() {}
  union {
    EventOutgoingBatch _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EventOutgoingBatchDefaultTypeInternal _EventOutgoingBatch_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR EventOutgoingBatchCanceled::EventOutgoingBatchCanceled(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.bridge_contract_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.bridge_chain_id_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.batch_id_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.nonce_)*/ ::uint64_t{0u}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EventOutgoingBatchCanceledDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EventOutgoingBatchCanceledDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EventOutgoingBatchCanceledDefaultTypeInternal() {}
  union {
    EventOutgoingBatchCanceled _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EventOutgoingBatchCanceledDefaultTypeInternal _EventOutgoingBatchCanceled_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR EventValsetUpdateRequest::EventValsetUpdateRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.valset_members_)*/{}
  , /*decltype(_impl_.reward_amount_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.reward_token_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.valset_nonce_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.valset_height_)*/ ::uint64_t{0u}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EventValsetUpdateRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EventValsetUpdateRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EventValsetUpdateRequestDefaultTypeInternal() {}
  union {
    EventValsetUpdateRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EventValsetUpdateRequestDefaultTypeInternal _EventValsetUpdateRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR EventSetOrchestratorAddresses::EventSetOrchestratorAddresses(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.validator_address_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.orchestrator_address_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.operator_eth_address_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EventSetOrchestratorAddressesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EventSetOrchestratorAddressesDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EventSetOrchestratorAddressesDefaultTypeInternal() {}
  union {
    EventSetOrchestratorAddresses _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EventSetOrchestratorAddressesDefaultTypeInternal _EventSetOrchestratorAddresses_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR EventValsetConfirm::EventValsetConfirm(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.orchestrator_address_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.valset_nonce_)*/ ::uint64_t{0u}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EventValsetConfirmDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EventValsetConfirmDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EventValsetConfirmDefaultTypeInternal() {}
  union {
    EventValsetConfirm _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EventValsetConfirmDefaultTypeInternal _EventValsetConfirm_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR EventSendToEth::EventSendToEth(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sender_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.receiver_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.amount_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.bridge_fee_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.outgoing_tx_id_)*/ ::uint64_t{0u}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EventSendToEthDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EventSendToEthDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EventSendToEthDefaultTypeInternal() {}
  union {
    EventSendToEth _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EventSendToEthDefaultTypeInternal _EventSendToEth_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR EventConfirmBatch::EventConfirmBatch(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.orchestrator_address_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.batch_nonce_)*/ ::uint64_t{0u}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EventConfirmBatchDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EventConfirmBatchDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EventConfirmBatchDefaultTypeInternal() {}
  union {
    EventConfirmBatch _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EventConfirmBatchDefaultTypeInternal _EventConfirmBatch_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR EventAttestationVote::EventAttestationVote(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.attestation_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.voter_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.event_nonce_)*/ ::uint64_t{0u}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EventAttestationVoteDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EventAttestationVoteDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EventAttestationVoteDefaultTypeInternal() {}
  union {
    EventAttestationVote _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EventAttestationVoteDefaultTypeInternal _EventAttestationVote_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR EventDepositClaim::EventDepositClaim(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.attestation_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.ethereum_sender_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.cosmos_receiver_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.token_contract_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.amount_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.orchestrator_address_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.data_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.event_nonce_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.event_height_)*/ ::uint64_t{0u}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EventDepositClaimDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EventDepositClaimDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EventDepositClaimDefaultTypeInternal() {}
  union {
    EventDepositClaim _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EventDepositClaimDefaultTypeInternal _EventDepositClaim_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR EventWithdrawClaim::EventWithdrawClaim(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.attestation_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.token_contract_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.orchestrator_address_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.event_nonce_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.event_height_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.batch_nonce_)*/ ::uint64_t{0u}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EventWithdrawClaimDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EventWithdrawClaimDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EventWithdrawClaimDefaultTypeInternal() {}
  union {
    EventWithdrawClaim _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EventWithdrawClaimDefaultTypeInternal _EventWithdrawClaim_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR EventERC20DeployedClaim::EventERC20DeployedClaim(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.attestation_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.cosmos_denom_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.token_contract_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.symbol_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.orchestrator_address_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.event_nonce_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.event_height_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.decimals_)*/ ::uint64_t{0u}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EventERC20DeployedClaimDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EventERC20DeployedClaimDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EventERC20DeployedClaimDefaultTypeInternal() {}
  union {
    EventERC20DeployedClaim _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EventERC20DeployedClaimDefaultTypeInternal _EventERC20DeployedClaim_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR EventValsetUpdateClaim::EventValsetUpdateClaim(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.valset_members_)*/{}
  , /*decltype(_impl_.attestation_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.reward_amount_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.reward_token_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.orchestrator_address_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.event_nonce_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.event_height_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.valset_nonce_)*/ ::uint64_t{0u}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EventValsetUpdateClaimDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EventValsetUpdateClaimDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EventValsetUpdateClaimDefaultTypeInternal() {}
  union {
    EventValsetUpdateClaim _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EventValsetUpdateClaimDefaultTypeInternal _EventValsetUpdateClaim_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR EventCancelSendToEth::EventCancelSendToEth(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.outgoing_tx_id_)*/ ::uint64_t{0u}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EventCancelSendToEthDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EventCancelSendToEthDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EventCancelSendToEthDefaultTypeInternal() {}
  union {
    EventCancelSendToEth _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EventCancelSendToEthDefaultTypeInternal _EventCancelSendToEth_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR EventSubmitBadSignatureEvidence::EventSubmitBadSignatureEvidence(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.bad_eth_signature_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.bad_eth_signature_subject_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EventSubmitBadSignatureEvidenceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EventSubmitBadSignatureEvidenceDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EventSubmitBadSignatureEvidenceDefaultTypeInternal() {}
  union {
    EventSubmitBadSignatureEvidence _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EventSubmitBadSignatureEvidenceDefaultTypeInternal _EventSubmitBadSignatureEvidence_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR EventValidatorSlash::EventValidatorSlash(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.reason_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.consensus_address_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.operator_address_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.moniker_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.power_)*/ ::int64_t{0}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EventValidatorSlashDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EventValidatorSlashDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EventValidatorSlashDefaultTypeInternal() {}
  union {
    EventValidatorSlash _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EventValidatorSlashDefaultTypeInternal _EventValidatorSlash_default_instance_;
}  // namespace v1
}  // namespace peggy
}  // namespace injective
static ::_pb::Metadata file_level_metadata_injective_2fpeggy_2fv1_2fevents_2eproto[17];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_injective_2fpeggy_2fv1_2fevents_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_injective_2fpeggy_2fv1_2fevents_2eproto = nullptr;
const ::uint32_t TableStruct_injective_2fpeggy_2fv1_2fevents_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::EventAttestationObserved, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::EventAttestationObserved, _impl_.attestation_type_),
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::EventAttestationObserved, _impl_.bridge_contract_),
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::EventAttestationObserved, _impl_.bridge_chain_id_),
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::EventAttestationObserved, _impl_.attestation_id_),
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::EventAttestationObserved, _impl_.nonce_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::EventBridgeWithdrawCanceled, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::EventBridgeWithdrawCanceled, _impl_.bridge_contract_),
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::EventBridgeWithdrawCanceled, _impl_.bridge_chain_id_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::EventOutgoingBatch, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::EventOutgoingBatch, _impl_.denom_),
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::EventOutgoingBatch, _impl_.orchestrator_address_),
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::EventOutgoingBatch, _impl_.batch_nonce_),
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::EventOutgoingBatch, _impl_.batch_timeout_),
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::EventOutgoingBatch, _impl_.batch_tx_ids_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::EventOutgoingBatchCanceled, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::EventOutgoingBatchCanceled, _impl_.bridge_contract_),
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::EventOutgoingBatchCanceled, _impl_.bridge_chain_id_),
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::EventOutgoingBatchCanceled, _impl_.batch_id_),
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::EventOutgoingBatchCanceled, _impl_.nonce_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::EventValsetUpdateRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::EventValsetUpdateRequest, _impl_.valset_nonce_),
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::EventValsetUpdateRequest, _impl_.valset_height_),
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::EventValsetUpdateRequest, _impl_.valset_members_),
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::EventValsetUpdateRequest, _impl_.reward_amount_),
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::EventValsetUpdateRequest, _impl_.reward_token_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::EventSetOrchestratorAddresses, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::EventSetOrchestratorAddresses, _impl_.validator_address_),
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::EventSetOrchestratorAddresses, _impl_.orchestrator_address_),
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::EventSetOrchestratorAddresses, _impl_.operator_eth_address_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::EventValsetConfirm, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::EventValsetConfirm, _impl_.valset_nonce_),
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::EventValsetConfirm, _impl_.orchestrator_address_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::EventSendToEth, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::EventSendToEth, _impl_.outgoing_tx_id_),
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::EventSendToEth, _impl_.sender_),
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::EventSendToEth, _impl_.receiver_),
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::EventSendToEth, _impl_.amount_),
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::EventSendToEth, _impl_.bridge_fee_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::EventConfirmBatch, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::EventConfirmBatch, _impl_.batch_nonce_),
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::EventConfirmBatch, _impl_.orchestrator_address_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::EventAttestationVote, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::EventAttestationVote, _impl_.event_nonce_),
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::EventAttestationVote, _impl_.attestation_id_),
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::EventAttestationVote, _impl_.voter_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::EventDepositClaim, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::EventDepositClaim, _impl_.event_nonce_),
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::EventDepositClaim, _impl_.event_height_),
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::EventDepositClaim, _impl_.attestation_id_),
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::EventDepositClaim, _impl_.ethereum_sender_),
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::EventDepositClaim, _impl_.cosmos_receiver_),
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::EventDepositClaim, _impl_.token_contract_),
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::EventDepositClaim, _impl_.amount_),
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::EventDepositClaim, _impl_.orchestrator_address_),
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::EventDepositClaim, _impl_.data_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::EventWithdrawClaim, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::EventWithdrawClaim, _impl_.event_nonce_),
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::EventWithdrawClaim, _impl_.event_height_),
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::EventWithdrawClaim, _impl_.attestation_id_),
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::EventWithdrawClaim, _impl_.batch_nonce_),
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::EventWithdrawClaim, _impl_.token_contract_),
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::EventWithdrawClaim, _impl_.orchestrator_address_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::EventERC20DeployedClaim, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::EventERC20DeployedClaim, _impl_.event_nonce_),
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::EventERC20DeployedClaim, _impl_.event_height_),
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::EventERC20DeployedClaim, _impl_.attestation_id_),
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::EventERC20DeployedClaim, _impl_.cosmos_denom_),
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::EventERC20DeployedClaim, _impl_.token_contract_),
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::EventERC20DeployedClaim, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::EventERC20DeployedClaim, _impl_.symbol_),
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::EventERC20DeployedClaim, _impl_.decimals_),
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::EventERC20DeployedClaim, _impl_.orchestrator_address_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::EventValsetUpdateClaim, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::EventValsetUpdateClaim, _impl_.event_nonce_),
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::EventValsetUpdateClaim, _impl_.event_height_),
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::EventValsetUpdateClaim, _impl_.attestation_id_),
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::EventValsetUpdateClaim, _impl_.valset_nonce_),
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::EventValsetUpdateClaim, _impl_.valset_members_),
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::EventValsetUpdateClaim, _impl_.reward_amount_),
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::EventValsetUpdateClaim, _impl_.reward_token_),
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::EventValsetUpdateClaim, _impl_.orchestrator_address_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::EventCancelSendToEth, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::EventCancelSendToEth, _impl_.outgoing_tx_id_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::EventSubmitBadSignatureEvidence, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::EventSubmitBadSignatureEvidence, _impl_.bad_eth_signature_),
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::EventSubmitBadSignatureEvidence, _impl_.bad_eth_signature_subject_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::EventValidatorSlash, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::EventValidatorSlash, _impl_.power_),
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::EventValidatorSlash, _impl_.reason_),
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::EventValidatorSlash, _impl_.consensus_address_),
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::EventValidatorSlash, _impl_.operator_address_),
    PROTOBUF_FIELD_OFFSET(::injective::peggy::v1::EventValidatorSlash, _impl_.moniker_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::injective::peggy::v1::EventAttestationObserved)},
        { 13, -1, -1, sizeof(::injective::peggy::v1::EventBridgeWithdrawCanceled)},
        { 23, -1, -1, sizeof(::injective::peggy::v1::EventOutgoingBatch)},
        { 36, -1, -1, sizeof(::injective::peggy::v1::EventOutgoingBatchCanceled)},
        { 48, -1, -1, sizeof(::injective::peggy::v1::EventValsetUpdateRequest)},
        { 61, -1, -1, sizeof(::injective::peggy::v1::EventSetOrchestratorAddresses)},
        { 72, -1, -1, sizeof(::injective::peggy::v1::EventValsetConfirm)},
        { 82, -1, -1, sizeof(::injective::peggy::v1::EventSendToEth)},
        { 95, -1, -1, sizeof(::injective::peggy::v1::EventConfirmBatch)},
        { 105, -1, -1, sizeof(::injective::peggy::v1::EventAttestationVote)},
        { 116, -1, -1, sizeof(::injective::peggy::v1::EventDepositClaim)},
        { 133, -1, -1, sizeof(::injective::peggy::v1::EventWithdrawClaim)},
        { 147, -1, -1, sizeof(::injective::peggy::v1::EventERC20DeployedClaim)},
        { 164, -1, -1, sizeof(::injective::peggy::v1::EventValsetUpdateClaim)},
        { 180, -1, -1, sizeof(::injective::peggy::v1::EventCancelSendToEth)},
        { 189, -1, -1, sizeof(::injective::peggy::v1::EventSubmitBadSignatureEvidence)},
        { 199, -1, -1, sizeof(::injective::peggy::v1::EventValidatorSlash)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::injective::peggy::v1::_EventAttestationObserved_default_instance_._instance,
    &::injective::peggy::v1::_EventBridgeWithdrawCanceled_default_instance_._instance,
    &::injective::peggy::v1::_EventOutgoingBatch_default_instance_._instance,
    &::injective::peggy::v1::_EventOutgoingBatchCanceled_default_instance_._instance,
    &::injective::peggy::v1::_EventValsetUpdateRequest_default_instance_._instance,
    &::injective::peggy::v1::_EventSetOrchestratorAddresses_default_instance_._instance,
    &::injective::peggy::v1::_EventValsetConfirm_default_instance_._instance,
    &::injective::peggy::v1::_EventSendToEth_default_instance_._instance,
    &::injective::peggy::v1::_EventConfirmBatch_default_instance_._instance,
    &::injective::peggy::v1::_EventAttestationVote_default_instance_._instance,
    &::injective::peggy::v1::_EventDepositClaim_default_instance_._instance,
    &::injective::peggy::v1::_EventWithdrawClaim_default_instance_._instance,
    &::injective::peggy::v1::_EventERC20DeployedClaim_default_instance_._instance,
    &::injective::peggy::v1::_EventValsetUpdateClaim_default_instance_._instance,
    &::injective::peggy::v1::_EventCancelSendToEth_default_instance_._instance,
    &::injective::peggy::v1::_EventSubmitBadSignatureEvidence_default_instance_._instance,
    &::injective::peggy::v1::_EventValidatorSlash_default_instance_._instance,
};
const char descriptor_table_protodef_injective_2fpeggy_2fv1_2fevents_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\037injective/peggy/v1/events.proto\022\022injec"
    "tive.peggy.v1\032\024gogoproto/gogo.proto\032$inj"
    "ective/peggy/v1/attestation.proto\032\036injec"
    "tive/peggy/v1/types.proto\"\362\001\n\030EventAttes"
    "tationObserved\022H\n\020attestation_type\030\001 \001(\016"
    "2\035.injective.peggy.v1.ClaimTypeR\017attesta"
    "tionType\022\'\n\017bridge_contract\030\002 \001(\tR\016bridg"
    "eContract\022&\n\017bridge_chain_id\030\003 \001(\004R\rbrid"
    "geChainId\022%\n\016attestation_id\030\004 \001(\014R\rattes"
    "tationId\022\024\n\005nonce\030\005 \001(\004R\005nonce\"n\n\033EventB"
    "ridgeWithdrawCanceled\022\'\n\017bridge_contract"
    "\030\001 \001(\tR\016bridgeContract\022&\n\017bridge_chain_i"
    "d\030\002 \001(\004R\rbridgeChainId\"\305\001\n\022EventOutgoing"
    "Batch\022\024\n\005denom\030\001 \001(\tR\005denom\0221\n\024orchestra"
    "tor_address\030\002 \001(\tR\023orchestratorAddress\022\037"
    "\n\013batch_nonce\030\003 \001(\004R\nbatchNonce\022#\n\rbatch"
    "_timeout\030\004 \001(\004R\014batchTimeout\022 \n\014batch_tx"
    "_ids\030\005 \003(\004R\nbatchTxIds\"\236\001\n\032EventOutgoing"
    "BatchCanceled\022\'\n\017bridge_contract\030\001 \001(\tR\016"
    "bridgeContract\022&\n\017bridge_chain_id\030\002 \001(\004R"
    "\rbridgeChainId\022\031\n\010batch_id\030\003 \001(\004R\007batchI"
    "d\022\024\n\005nonce\030\004 \001(\004R\005nonce\"\246\002\n\030EventValsetU"
    "pdateRequest\022!\n\014valset_nonce\030\001 \001(\004R\013vals"
    "etNonce\022#\n\rvalset_height\030\002 \001(\004R\014valsetHe"
    "ight\022J\n\016valset_members\030\003 \003(\0132#.injective"
    ".peggy.v1.BridgeValidatorR\rvalsetMembers"
    "\022S\n\rreward_amount\030\004 \001(\tB.\310\336\037\000\332\336\037&github."
    "com/cosmos/cosmos-sdk/types.IntR\014rewardA"
    "mount\022!\n\014reward_token\030\005 \001(\tR\013rewardToken"
    "\"\261\001\n\035EventSetOrchestratorAddresses\022+\n\021va"
    "lidator_address\030\001 \001(\tR\020validatorAddress\022"
    "1\n\024orchestrator_address\030\002 \001(\tR\023orchestra"
    "torAddress\0220\n\024operator_eth_address\030\003 \001(\t"
    "R\022operatorEthAddress\"j\n\022EventValsetConfi"
    "rm\022!\n\014valset_nonce\030\001 \001(\004R\013valsetNonce\0221\n"
    "\024orchestrator_address\030\002 \001(\tR\023orchestrato"
    "rAddress\"\203\002\n\016EventSendToEth\022$\n\016outgoing_"
    "tx_id\030\001 \001(\004R\014outgoingTxId\022\026\n\006sender\030\002 \001("
    "\tR\006sender\022\032\n\010receiver\030\003 \001(\tR\010receiver\022G\n"
    "\006amount\030\004 \001(\tB/\310\336\037\000\332\336\037\'github.com/cosmos"
    "/cosmos-sdk/types.CoinR\006amount\022N\n\nbridge"
    "_fee\030\005 \001(\tB/\310\336\037\000\332\336\037\'github.com/cosmos/co"
    "smos-sdk/types.CoinR\tbridgeFee\"g\n\021EventC"
    "onfirmBatch\022\037\n\013batch_nonce\030\001 \001(\004R\nbatchN"
    "once\0221\n\024orchestrator_address\030\002 \001(\tR\023orch"
    "estratorAddress\"t\n\024EventAttestationVote\022"
    "\037\n\013event_nonce\030\001 \001(\004R\neventNonce\022%\n\016atte"
    "station_id\030\002 \001(\014R\rattestationId\022\024\n\005voter"
    "\030\003 \001(\tR\005voter\"\206\003\n\021EventDepositClaim\022\037\n\013e"
    "vent_nonce\030\001 \001(\004R\neventNonce\022!\n\014event_he"
    "ight\030\002 \001(\004R\013eventHeight\022%\n\016attestation_i"
    "d\030\003 \001(\014R\rattestationId\022\'\n\017ethereum_sende"
    "r\030\004 \001(\tR\016ethereumSender\022\'\n\017cosmos_receiv"
    "er\030\005 \001(\tR\016cosmosReceiver\022%\n\016token_contra"
    "ct\030\006 \001(\tR\rtokenContract\022F\n\006amount\030\007 \001(\tB"
    ".\310\336\037\000\332\336\037&github.com/cosmos/cosmos-sdk/ty"
    "pes.IntR\006amount\0221\n\024orchestrator_address\030"
    "\010 \001(\tR\023orchestratorAddress\022\022\n\004data\030\t \001(\t"
    "R\004data\"\372\001\n\022EventWithdrawClaim\022\037\n\013event_n"
    "once\030\001 \001(\004R\neventNonce\022!\n\014event_height\030\002"
    " \001(\004R\013eventHeight\022%\n\016attestation_id\030\003 \001("
    "\014R\rattestationId\022\037\n\013batch_nonce\030\004 \001(\004R\nb"
    "atchNonce\022%\n\016token_contract\030\005 \001(\tR\rtoken"
    "Contract\0221\n\024orchestrator_address\030\006 \001(\tR\023"
    "orchestratorAddress\"\311\002\n\027EventERC20Deploy"
    "edClaim\022\037\n\013event_nonce\030\001 \001(\004R\neventNonce"
    "\022!\n\014event_height\030\002 \001(\004R\013eventHeight\022%\n\016a"
    "ttestation_id\030\003 \001(\014R\rattestationId\022!\n\014co"
    "smos_denom\030\004 \001(\tR\013cosmosDenom\022%\n\016token_c"
    "ontract\030\005 \001(\tR\rtokenContract\022\022\n\004name\030\006 \001"
    "(\tR\004name\022\026\n\006symbol\030\007 \001(\tR\006symbol\022\032\n\010deci"
    "mals\030\010 \001(\004R\010decimals\0221\n\024orchestrator_add"
    "ress\030\t \001(\tR\023orchestratorAddress\"\235\003\n\026Even"
    "tValsetUpdateClaim\022\037\n\013event_nonce\030\001 \001(\004R"
    "\neventNonce\022!\n\014event_height\030\002 \001(\004R\013event"
    "Height\022%\n\016attestation_id\030\003 \001(\014R\rattestat"
    "ionId\022!\n\014valset_nonce\030\004 \001(\004R\013valsetNonce"
    "\022J\n\016valset_members\030\005 \003(\0132#.injective.peg"
    "gy.v1.BridgeValidatorR\rvalsetMembers\022S\n\r"
    "reward_amount\030\006 \001(\tB.\310\336\037\000\332\336\037&github.com/"
    "cosmos/cosmos-sdk/types.IntR\014rewardAmoun"
    "t\022!\n\014reward_token\030\007 \001(\tR\013rewardToken\0221\n\024"
    "orchestrator_address\030\010 \001(\tR\023orchestrator"
    "Address\"<\n\024EventCancelSendToEth\022$\n\016outgo"
    "ing_tx_id\030\001 \001(\004R\014outgoingTxId\"\210\001\n\037EventS"
    "ubmitBadSignatureEvidence\022*\n\021bad_eth_sig"
    "nature\030\001 \001(\tR\017badEthSignature\0229\n\031bad_eth"
    "_signature_subject\030\002 \001(\tR\026badEthSignatur"
    "eSubject\"\265\001\n\023EventValidatorSlash\022\024\n\005powe"
    "r\030\001 \001(\003R\005power\022\026\n\006reason\030\002 \001(\tR\006reason\022+"
    "\n\021consensus_address\030\003 \001(\tR\020consensusAddr"
    "ess\022)\n\020operator_address\030\004 \001(\tR\017operatorA"
    "ddress\022\030\n\007moniker\030\005 \001(\tR\007monikerB\334\001\n\026com"
    ".injective.peggy.v1B\013EventsProtoP\001ZKgith"
    "ub.com/InjectiveLabs/injective-core/inje"
    "ctive-chain/modules/peggy/types\242\002\003IPX\252\002\022"
    "Injective.Peggy.V1\312\002\022Injective\\Peggy\\V1\342"
    "\002\036Injective\\Peggy\\V1\\GPBMetadata\352\002\024Injec"
    "tive::Peggy::V1b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_injective_2fpeggy_2fv1_2fevents_2eproto_deps[3] =
    {
        &::descriptor_table_gogoproto_2fgogo_2eproto,
        &::descriptor_table_injective_2fpeggy_2fv1_2fattestation_2eproto,
        &::descriptor_table_injective_2fpeggy_2fv1_2ftypes_2eproto,
};
static ::absl::once_flag descriptor_table_injective_2fpeggy_2fv1_2fevents_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_injective_2fpeggy_2fv1_2fevents_2eproto = {
    false,
    false,
    3943,
    descriptor_table_protodef_injective_2fpeggy_2fv1_2fevents_2eproto,
    "injective/peggy/v1/events.proto",
    &descriptor_table_injective_2fpeggy_2fv1_2fevents_2eproto_once,
    descriptor_table_injective_2fpeggy_2fv1_2fevents_2eproto_deps,
    3,
    17,
    schemas,
    file_default_instances,
    TableStruct_injective_2fpeggy_2fv1_2fevents_2eproto::offsets,
    file_level_metadata_injective_2fpeggy_2fv1_2fevents_2eproto,
    file_level_enum_descriptors_injective_2fpeggy_2fv1_2fevents_2eproto,
    file_level_service_descriptors_injective_2fpeggy_2fv1_2fevents_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_injective_2fpeggy_2fv1_2fevents_2eproto_getter() {
  return &descriptor_table_injective_2fpeggy_2fv1_2fevents_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_injective_2fpeggy_2fv1_2fevents_2eproto(&descriptor_table_injective_2fpeggy_2fv1_2fevents_2eproto);
namespace injective {
namespace peggy {
namespace v1 {
// ===================================================================

class EventAttestationObserved::_Internal {
 public:
};

EventAttestationObserved::EventAttestationObserved(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.peggy.v1.EventAttestationObserved)
}
EventAttestationObserved::EventAttestationObserved(const EventAttestationObserved& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EventAttestationObserved* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.bridge_contract_) {}

    , decltype(_impl_.attestation_id_) {}

    , decltype(_impl_.bridge_chain_id_) {}

    , decltype(_impl_.nonce_) {}

    , decltype(_impl_.attestation_type_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.bridge_contract_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.bridge_contract_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_bridge_contract().empty()) {
    _this->_impl_.bridge_contract_.Set(from._internal_bridge_contract(), _this->GetArenaForAllocation());
  }
  _impl_.attestation_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.attestation_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_attestation_id().empty()) {
    _this->_impl_.attestation_id_.Set(from._internal_attestation_id(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.bridge_chain_id_, &from._impl_.bridge_chain_id_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.attestation_type_) -
    reinterpret_cast<char*>(&_impl_.bridge_chain_id_)) + sizeof(_impl_.attestation_type_));
  // @@protoc_insertion_point(copy_constructor:injective.peggy.v1.EventAttestationObserved)
}

inline void EventAttestationObserved::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.bridge_contract_) {}

    , decltype(_impl_.attestation_id_) {}

    , decltype(_impl_.bridge_chain_id_) { ::uint64_t{0u} }

    , decltype(_impl_.nonce_) { ::uint64_t{0u} }

    , decltype(_impl_.attestation_type_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.bridge_contract_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.bridge_contract_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.attestation_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.attestation_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

EventAttestationObserved::~EventAttestationObserved() {
  // @@protoc_insertion_point(destructor:injective.peggy.v1.EventAttestationObserved)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EventAttestationObserved::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.bridge_contract_.Destroy();
  _impl_.attestation_id_.Destroy();
}

void EventAttestationObserved::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EventAttestationObserved::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.peggy.v1.EventAttestationObserved)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bridge_contract_.ClearToEmpty();
  _impl_.attestation_id_.ClearToEmpty();
  ::memset(&_impl_.bridge_chain_id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.attestation_type_) -
      reinterpret_cast<char*>(&_impl_.bridge_chain_id_)) + sizeof(_impl_.attestation_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EventAttestationObserved::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .injective.peggy.v1.ClaimType attestation_type = 1 [json_name = "attestationType"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_attestation_type(static_cast<::injective::peggy::v1::ClaimType>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // string bridge_contract = 2 [json_name = "bridgeContract"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_bridge_contract();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.peggy.v1.EventAttestationObserved.bridge_contract"));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 bridge_chain_id = 3 [json_name = "bridgeChainId"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.bridge_chain_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes attestation_id = 4 [json_name = "attestationId"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_attestation_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 nonce = 5 [json_name = "nonce"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _impl_.nonce_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* EventAttestationObserved::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.peggy.v1.EventAttestationObserved)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .injective.peggy.v1.ClaimType attestation_type = 1 [json_name = "attestationType"];
  if (this->_internal_attestation_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_attestation_type(), target);
  }

  // string bridge_contract = 2 [json_name = "bridgeContract"];
  if (!this->_internal_bridge_contract().empty()) {
    const std::string& _s = this->_internal_bridge_contract();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.peggy.v1.EventAttestationObserved.bridge_contract");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // uint64 bridge_chain_id = 3 [json_name = "bridgeChainId"];
  if (this->_internal_bridge_chain_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        3, this->_internal_bridge_chain_id(), target);
  }

  // bytes attestation_id = 4 [json_name = "attestationId"];
  if (!this->_internal_attestation_id().empty()) {
    const std::string& _s = this->_internal_attestation_id();
    target = stream->WriteBytesMaybeAliased(4, _s, target);
  }

  // uint64 nonce = 5 [json_name = "nonce"];
  if (this->_internal_nonce() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        5, this->_internal_nonce(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.peggy.v1.EventAttestationObserved)
  return target;
}

::size_t EventAttestationObserved::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.peggy.v1.EventAttestationObserved)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string bridge_contract = 2 [json_name = "bridgeContract"];
  if (!this->_internal_bridge_contract().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_bridge_contract());
  }

  // bytes attestation_id = 4 [json_name = "attestationId"];
  if (!this->_internal_attestation_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_attestation_id());
  }

  // uint64 bridge_chain_id = 3 [json_name = "bridgeChainId"];
  if (this->_internal_bridge_chain_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_bridge_chain_id());
  }

  // uint64 nonce = 5 [json_name = "nonce"];
  if (this->_internal_nonce() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_nonce());
  }

  // .injective.peggy.v1.ClaimType attestation_type = 1 [json_name = "attestationType"];
  if (this->_internal_attestation_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_attestation_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EventAttestationObserved::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EventAttestationObserved::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EventAttestationObserved::GetClassData() const { return &_class_data_; }


void EventAttestationObserved::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EventAttestationObserved*>(&to_msg);
  auto& from = static_cast<const EventAttestationObserved&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.peggy.v1.EventAttestationObserved)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_bridge_contract().empty()) {
    _this->_internal_set_bridge_contract(from._internal_bridge_contract());
  }
  if (!from._internal_attestation_id().empty()) {
    _this->_internal_set_attestation_id(from._internal_attestation_id());
  }
  if (from._internal_bridge_chain_id() != 0) {
    _this->_internal_set_bridge_chain_id(from._internal_bridge_chain_id());
  }
  if (from._internal_nonce() != 0) {
    _this->_internal_set_nonce(from._internal_nonce());
  }
  if (from._internal_attestation_type() != 0) {
    _this->_internal_set_attestation_type(from._internal_attestation_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EventAttestationObserved::CopyFrom(const EventAttestationObserved& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.peggy.v1.EventAttestationObserved)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventAttestationObserved::IsInitialized() const {
  return true;
}

void EventAttestationObserved::InternalSwap(EventAttestationObserved* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.bridge_contract_, lhs_arena,
                                       &other->_impl_.bridge_contract_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.attestation_id_, lhs_arena,
                                       &other->_impl_.attestation_id_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EventAttestationObserved, _impl_.attestation_type_)
      + sizeof(EventAttestationObserved::_impl_.attestation_type_)
      - PROTOBUF_FIELD_OFFSET(EventAttestationObserved, _impl_.bridge_chain_id_)>(
          reinterpret_cast<char*>(&_impl_.bridge_chain_id_),
          reinterpret_cast<char*>(&other->_impl_.bridge_chain_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EventAttestationObserved::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fpeggy_2fv1_2fevents_2eproto_getter, &descriptor_table_injective_2fpeggy_2fv1_2fevents_2eproto_once,
      file_level_metadata_injective_2fpeggy_2fv1_2fevents_2eproto[0]);
}
// ===================================================================

class EventBridgeWithdrawCanceled::_Internal {
 public:
};

EventBridgeWithdrawCanceled::EventBridgeWithdrawCanceled(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.peggy.v1.EventBridgeWithdrawCanceled)
}
EventBridgeWithdrawCanceled::EventBridgeWithdrawCanceled(const EventBridgeWithdrawCanceled& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EventBridgeWithdrawCanceled* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.bridge_contract_) {}

    , decltype(_impl_.bridge_chain_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.bridge_contract_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.bridge_contract_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_bridge_contract().empty()) {
    _this->_impl_.bridge_contract_.Set(from._internal_bridge_contract(), _this->GetArenaForAllocation());
  }
  _this->_impl_.bridge_chain_id_ = from._impl_.bridge_chain_id_;
  // @@protoc_insertion_point(copy_constructor:injective.peggy.v1.EventBridgeWithdrawCanceled)
}

inline void EventBridgeWithdrawCanceled::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.bridge_contract_) {}

    , decltype(_impl_.bridge_chain_id_) { ::uint64_t{0u} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.bridge_contract_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.bridge_contract_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

EventBridgeWithdrawCanceled::~EventBridgeWithdrawCanceled() {
  // @@protoc_insertion_point(destructor:injective.peggy.v1.EventBridgeWithdrawCanceled)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EventBridgeWithdrawCanceled::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.bridge_contract_.Destroy();
}

void EventBridgeWithdrawCanceled::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EventBridgeWithdrawCanceled::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.peggy.v1.EventBridgeWithdrawCanceled)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bridge_contract_.ClearToEmpty();
  _impl_.bridge_chain_id_ = ::uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EventBridgeWithdrawCanceled::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string bridge_contract = 1 [json_name = "bridgeContract"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_bridge_contract();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.peggy.v1.EventBridgeWithdrawCanceled.bridge_contract"));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 bridge_chain_id = 2 [json_name = "bridgeChainId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.bridge_chain_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* EventBridgeWithdrawCanceled::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.peggy.v1.EventBridgeWithdrawCanceled)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string bridge_contract = 1 [json_name = "bridgeContract"];
  if (!this->_internal_bridge_contract().empty()) {
    const std::string& _s = this->_internal_bridge_contract();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.peggy.v1.EventBridgeWithdrawCanceled.bridge_contract");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // uint64 bridge_chain_id = 2 [json_name = "bridgeChainId"];
  if (this->_internal_bridge_chain_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_bridge_chain_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.peggy.v1.EventBridgeWithdrawCanceled)
  return target;
}

::size_t EventBridgeWithdrawCanceled::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.peggy.v1.EventBridgeWithdrawCanceled)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string bridge_contract = 1 [json_name = "bridgeContract"];
  if (!this->_internal_bridge_contract().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_bridge_contract());
  }

  // uint64 bridge_chain_id = 2 [json_name = "bridgeChainId"];
  if (this->_internal_bridge_chain_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_bridge_chain_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EventBridgeWithdrawCanceled::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EventBridgeWithdrawCanceled::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EventBridgeWithdrawCanceled::GetClassData() const { return &_class_data_; }


void EventBridgeWithdrawCanceled::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EventBridgeWithdrawCanceled*>(&to_msg);
  auto& from = static_cast<const EventBridgeWithdrawCanceled&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.peggy.v1.EventBridgeWithdrawCanceled)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_bridge_contract().empty()) {
    _this->_internal_set_bridge_contract(from._internal_bridge_contract());
  }
  if (from._internal_bridge_chain_id() != 0) {
    _this->_internal_set_bridge_chain_id(from._internal_bridge_chain_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EventBridgeWithdrawCanceled::CopyFrom(const EventBridgeWithdrawCanceled& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.peggy.v1.EventBridgeWithdrawCanceled)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventBridgeWithdrawCanceled::IsInitialized() const {
  return true;
}

void EventBridgeWithdrawCanceled::InternalSwap(EventBridgeWithdrawCanceled* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.bridge_contract_, lhs_arena,
                                       &other->_impl_.bridge_contract_, rhs_arena);

  swap(_impl_.bridge_chain_id_, other->_impl_.bridge_chain_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EventBridgeWithdrawCanceled::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fpeggy_2fv1_2fevents_2eproto_getter, &descriptor_table_injective_2fpeggy_2fv1_2fevents_2eproto_once,
      file_level_metadata_injective_2fpeggy_2fv1_2fevents_2eproto[1]);
}
// ===================================================================

class EventOutgoingBatch::_Internal {
 public:
};

EventOutgoingBatch::EventOutgoingBatch(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.peggy.v1.EventOutgoingBatch)
}
EventOutgoingBatch::EventOutgoingBatch(const EventOutgoingBatch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EventOutgoingBatch* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.batch_tx_ids_) { from._impl_.batch_tx_ids_ }
    ,/* _impl_._batch_tx_ids_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.denom_) {}

    , decltype(_impl_.orchestrator_address_) {}

    , decltype(_impl_.batch_nonce_) {}

    , decltype(_impl_.batch_timeout_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.denom_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.denom_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_denom().empty()) {
    _this->_impl_.denom_.Set(from._internal_denom(), _this->GetArenaForAllocation());
  }
  _impl_.orchestrator_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.orchestrator_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_orchestrator_address().empty()) {
    _this->_impl_.orchestrator_address_.Set(from._internal_orchestrator_address(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.batch_nonce_, &from._impl_.batch_nonce_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.batch_timeout_) -
    reinterpret_cast<char*>(&_impl_.batch_nonce_)) + sizeof(_impl_.batch_timeout_));
  // @@protoc_insertion_point(copy_constructor:injective.peggy.v1.EventOutgoingBatch)
}

inline void EventOutgoingBatch::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.batch_tx_ids_) { arena }
    ,/* _impl_._batch_tx_ids_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.denom_) {}

    , decltype(_impl_.orchestrator_address_) {}

    , decltype(_impl_.batch_nonce_) { ::uint64_t{0u} }

    , decltype(_impl_.batch_timeout_) { ::uint64_t{0u} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.denom_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.denom_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.orchestrator_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.orchestrator_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

EventOutgoingBatch::~EventOutgoingBatch() {
  // @@protoc_insertion_point(destructor:injective.peggy.v1.EventOutgoingBatch)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EventOutgoingBatch::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.batch_tx_ids_.~RepeatedField();
  _impl_.denom_.Destroy();
  _impl_.orchestrator_address_.Destroy();
}

void EventOutgoingBatch::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EventOutgoingBatch::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.peggy.v1.EventOutgoingBatch)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_batch_tx_ids()->Clear();
  _impl_.denom_.ClearToEmpty();
  _impl_.orchestrator_address_.ClearToEmpty();
  ::memset(&_impl_.batch_nonce_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.batch_timeout_) -
      reinterpret_cast<char*>(&_impl_.batch_nonce_)) + sizeof(_impl_.batch_timeout_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EventOutgoingBatch::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string denom = 1 [json_name = "denom"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_denom();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.peggy.v1.EventOutgoingBatch.denom"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string orchestrator_address = 2 [json_name = "orchestratorAddress"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_orchestrator_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.peggy.v1.EventOutgoingBatch.orchestrator_address"));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 batch_nonce = 3 [json_name = "batchNonce"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.batch_nonce_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 batch_timeout = 4 [json_name = "batchTimeout"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _impl_.batch_timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated uint64 batch_tx_ids = 5 [json_name = "batchTxIds"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_batch_tx_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::uint8_t>(tag) == 40) {
          _internal_add_batch_tx_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* EventOutgoingBatch::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.peggy.v1.EventOutgoingBatch)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string denom = 1 [json_name = "denom"];
  if (!this->_internal_denom().empty()) {
    const std::string& _s = this->_internal_denom();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.peggy.v1.EventOutgoingBatch.denom");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string orchestrator_address = 2 [json_name = "orchestratorAddress"];
  if (!this->_internal_orchestrator_address().empty()) {
    const std::string& _s = this->_internal_orchestrator_address();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.peggy.v1.EventOutgoingBatch.orchestrator_address");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // uint64 batch_nonce = 3 [json_name = "batchNonce"];
  if (this->_internal_batch_nonce() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        3, this->_internal_batch_nonce(), target);
  }

  // uint64 batch_timeout = 4 [json_name = "batchTimeout"];
  if (this->_internal_batch_timeout() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        4, this->_internal_batch_timeout(), target);
  }

  // repeated uint64 batch_tx_ids = 5 [json_name = "batchTxIds"];
  {
    int byte_size = _impl_._batch_tx_ids_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(5, _internal_batch_tx_ids(),
                                                 byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.peggy.v1.EventOutgoingBatch)
  return target;
}

::size_t EventOutgoingBatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.peggy.v1.EventOutgoingBatch)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 batch_tx_ids = 5 [json_name = "batchTxIds"];
  {
    std::size_t data_size = ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_batch_tx_ids())
    ;
    _impl_._batch_tx_ids_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }

  // string denom = 1 [json_name = "denom"];
  if (!this->_internal_denom().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_denom());
  }

  // string orchestrator_address = 2 [json_name = "orchestratorAddress"];
  if (!this->_internal_orchestrator_address().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_orchestrator_address());
  }

  // uint64 batch_nonce = 3 [json_name = "batchNonce"];
  if (this->_internal_batch_nonce() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_batch_nonce());
  }

  // uint64 batch_timeout = 4 [json_name = "batchTimeout"];
  if (this->_internal_batch_timeout() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_batch_timeout());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EventOutgoingBatch::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EventOutgoingBatch::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EventOutgoingBatch::GetClassData() const { return &_class_data_; }


void EventOutgoingBatch::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EventOutgoingBatch*>(&to_msg);
  auto& from = static_cast<const EventOutgoingBatch&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.peggy.v1.EventOutgoingBatch)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.batch_tx_ids_.MergeFrom(from._impl_.batch_tx_ids_);
  if (!from._internal_denom().empty()) {
    _this->_internal_set_denom(from._internal_denom());
  }
  if (!from._internal_orchestrator_address().empty()) {
    _this->_internal_set_orchestrator_address(from._internal_orchestrator_address());
  }
  if (from._internal_batch_nonce() != 0) {
    _this->_internal_set_batch_nonce(from._internal_batch_nonce());
  }
  if (from._internal_batch_timeout() != 0) {
    _this->_internal_set_batch_timeout(from._internal_batch_timeout());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EventOutgoingBatch::CopyFrom(const EventOutgoingBatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.peggy.v1.EventOutgoingBatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventOutgoingBatch::IsInitialized() const {
  return true;
}

void EventOutgoingBatch::InternalSwap(EventOutgoingBatch* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.batch_tx_ids_.InternalSwap(&other->_impl_.batch_tx_ids_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.denom_, lhs_arena,
                                       &other->_impl_.denom_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.orchestrator_address_, lhs_arena,
                                       &other->_impl_.orchestrator_address_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EventOutgoingBatch, _impl_.batch_timeout_)
      + sizeof(EventOutgoingBatch::_impl_.batch_timeout_)
      - PROTOBUF_FIELD_OFFSET(EventOutgoingBatch, _impl_.batch_nonce_)>(
          reinterpret_cast<char*>(&_impl_.batch_nonce_),
          reinterpret_cast<char*>(&other->_impl_.batch_nonce_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EventOutgoingBatch::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fpeggy_2fv1_2fevents_2eproto_getter, &descriptor_table_injective_2fpeggy_2fv1_2fevents_2eproto_once,
      file_level_metadata_injective_2fpeggy_2fv1_2fevents_2eproto[2]);
}
// ===================================================================

class EventOutgoingBatchCanceled::_Internal {
 public:
};

EventOutgoingBatchCanceled::EventOutgoingBatchCanceled(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.peggy.v1.EventOutgoingBatchCanceled)
}
EventOutgoingBatchCanceled::EventOutgoingBatchCanceled(const EventOutgoingBatchCanceled& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EventOutgoingBatchCanceled* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.bridge_contract_) {}

    , decltype(_impl_.bridge_chain_id_) {}

    , decltype(_impl_.batch_id_) {}

    , decltype(_impl_.nonce_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.bridge_contract_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.bridge_contract_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_bridge_contract().empty()) {
    _this->_impl_.bridge_contract_.Set(from._internal_bridge_contract(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.bridge_chain_id_, &from._impl_.bridge_chain_id_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.nonce_) -
    reinterpret_cast<char*>(&_impl_.bridge_chain_id_)) + sizeof(_impl_.nonce_));
  // @@protoc_insertion_point(copy_constructor:injective.peggy.v1.EventOutgoingBatchCanceled)
}

inline void EventOutgoingBatchCanceled::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.bridge_contract_) {}

    , decltype(_impl_.bridge_chain_id_) { ::uint64_t{0u} }

    , decltype(_impl_.batch_id_) { ::uint64_t{0u} }

    , decltype(_impl_.nonce_) { ::uint64_t{0u} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.bridge_contract_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.bridge_contract_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

EventOutgoingBatchCanceled::~EventOutgoingBatchCanceled() {
  // @@protoc_insertion_point(destructor:injective.peggy.v1.EventOutgoingBatchCanceled)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EventOutgoingBatchCanceled::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.bridge_contract_.Destroy();
}

void EventOutgoingBatchCanceled::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EventOutgoingBatchCanceled::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.peggy.v1.EventOutgoingBatchCanceled)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bridge_contract_.ClearToEmpty();
  ::memset(&_impl_.bridge_chain_id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.nonce_) -
      reinterpret_cast<char*>(&_impl_.bridge_chain_id_)) + sizeof(_impl_.nonce_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EventOutgoingBatchCanceled::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string bridge_contract = 1 [json_name = "bridgeContract"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_bridge_contract();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.peggy.v1.EventOutgoingBatchCanceled.bridge_contract"));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 bridge_chain_id = 2 [json_name = "bridgeChainId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.bridge_chain_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 batch_id = 3 [json_name = "batchId"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.batch_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 nonce = 4 [json_name = "nonce"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _impl_.nonce_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* EventOutgoingBatchCanceled::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.peggy.v1.EventOutgoingBatchCanceled)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string bridge_contract = 1 [json_name = "bridgeContract"];
  if (!this->_internal_bridge_contract().empty()) {
    const std::string& _s = this->_internal_bridge_contract();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.peggy.v1.EventOutgoingBatchCanceled.bridge_contract");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // uint64 bridge_chain_id = 2 [json_name = "bridgeChainId"];
  if (this->_internal_bridge_chain_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_bridge_chain_id(), target);
  }

  // uint64 batch_id = 3 [json_name = "batchId"];
  if (this->_internal_batch_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        3, this->_internal_batch_id(), target);
  }

  // uint64 nonce = 4 [json_name = "nonce"];
  if (this->_internal_nonce() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        4, this->_internal_nonce(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.peggy.v1.EventOutgoingBatchCanceled)
  return target;
}

::size_t EventOutgoingBatchCanceled::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.peggy.v1.EventOutgoingBatchCanceled)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string bridge_contract = 1 [json_name = "bridgeContract"];
  if (!this->_internal_bridge_contract().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_bridge_contract());
  }

  // uint64 bridge_chain_id = 2 [json_name = "bridgeChainId"];
  if (this->_internal_bridge_chain_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_bridge_chain_id());
  }

  // uint64 batch_id = 3 [json_name = "batchId"];
  if (this->_internal_batch_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_batch_id());
  }

  // uint64 nonce = 4 [json_name = "nonce"];
  if (this->_internal_nonce() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_nonce());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EventOutgoingBatchCanceled::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EventOutgoingBatchCanceled::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EventOutgoingBatchCanceled::GetClassData() const { return &_class_data_; }


void EventOutgoingBatchCanceled::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EventOutgoingBatchCanceled*>(&to_msg);
  auto& from = static_cast<const EventOutgoingBatchCanceled&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.peggy.v1.EventOutgoingBatchCanceled)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_bridge_contract().empty()) {
    _this->_internal_set_bridge_contract(from._internal_bridge_contract());
  }
  if (from._internal_bridge_chain_id() != 0) {
    _this->_internal_set_bridge_chain_id(from._internal_bridge_chain_id());
  }
  if (from._internal_batch_id() != 0) {
    _this->_internal_set_batch_id(from._internal_batch_id());
  }
  if (from._internal_nonce() != 0) {
    _this->_internal_set_nonce(from._internal_nonce());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EventOutgoingBatchCanceled::CopyFrom(const EventOutgoingBatchCanceled& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.peggy.v1.EventOutgoingBatchCanceled)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventOutgoingBatchCanceled::IsInitialized() const {
  return true;
}

void EventOutgoingBatchCanceled::InternalSwap(EventOutgoingBatchCanceled* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.bridge_contract_, lhs_arena,
                                       &other->_impl_.bridge_contract_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EventOutgoingBatchCanceled, _impl_.nonce_)
      + sizeof(EventOutgoingBatchCanceled::_impl_.nonce_)
      - PROTOBUF_FIELD_OFFSET(EventOutgoingBatchCanceled, _impl_.bridge_chain_id_)>(
          reinterpret_cast<char*>(&_impl_.bridge_chain_id_),
          reinterpret_cast<char*>(&other->_impl_.bridge_chain_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EventOutgoingBatchCanceled::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fpeggy_2fv1_2fevents_2eproto_getter, &descriptor_table_injective_2fpeggy_2fv1_2fevents_2eproto_once,
      file_level_metadata_injective_2fpeggy_2fv1_2fevents_2eproto[3]);
}
// ===================================================================

class EventValsetUpdateRequest::_Internal {
 public:
};

void EventValsetUpdateRequest::clear_valset_members() {
  _internal_mutable_valset_members()->Clear();
}
EventValsetUpdateRequest::EventValsetUpdateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.peggy.v1.EventValsetUpdateRequest)
}
EventValsetUpdateRequest::EventValsetUpdateRequest(const EventValsetUpdateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EventValsetUpdateRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.valset_members_){from._impl_.valset_members_}
    , decltype(_impl_.reward_amount_) {}

    , decltype(_impl_.reward_token_) {}

    , decltype(_impl_.valset_nonce_) {}

    , decltype(_impl_.valset_height_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.reward_amount_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.reward_amount_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_reward_amount().empty()) {
    _this->_impl_.reward_amount_.Set(from._internal_reward_amount(), _this->GetArenaForAllocation());
  }
  _impl_.reward_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.reward_token_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_reward_token().empty()) {
    _this->_impl_.reward_token_.Set(from._internal_reward_token(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.valset_nonce_, &from._impl_.valset_nonce_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.valset_height_) -
    reinterpret_cast<char*>(&_impl_.valset_nonce_)) + sizeof(_impl_.valset_height_));
  // @@protoc_insertion_point(copy_constructor:injective.peggy.v1.EventValsetUpdateRequest)
}

inline void EventValsetUpdateRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.valset_members_){arena}
    , decltype(_impl_.reward_amount_) {}

    , decltype(_impl_.reward_token_) {}

    , decltype(_impl_.valset_nonce_) { ::uint64_t{0u} }

    , decltype(_impl_.valset_height_) { ::uint64_t{0u} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.reward_amount_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.reward_amount_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.reward_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.reward_token_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

EventValsetUpdateRequest::~EventValsetUpdateRequest() {
  // @@protoc_insertion_point(destructor:injective.peggy.v1.EventValsetUpdateRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EventValsetUpdateRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_valset_members()->~RepeatedPtrField();
  _impl_.reward_amount_.Destroy();
  _impl_.reward_token_.Destroy();
}

void EventValsetUpdateRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EventValsetUpdateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.peggy.v1.EventValsetUpdateRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_valset_members()->Clear();
  _impl_.reward_amount_.ClearToEmpty();
  _impl_.reward_token_.ClearToEmpty();
  ::memset(&_impl_.valset_nonce_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.valset_height_) -
      reinterpret_cast<char*>(&_impl_.valset_nonce_)) + sizeof(_impl_.valset_height_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EventValsetUpdateRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 valset_nonce = 1 [json_name = "valsetNonce"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.valset_nonce_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 valset_height = 2 [json_name = "valsetHeight"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.valset_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .injective.peggy.v1.BridgeValidator valset_members = 3 [json_name = "valsetMembers"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_valset_members(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // string reward_amount = 4 [json_name = "rewardAmount", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_reward_amount();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.peggy.v1.EventValsetUpdateRequest.reward_amount"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string reward_token = 5 [json_name = "rewardToken"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_reward_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.peggy.v1.EventValsetUpdateRequest.reward_token"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* EventValsetUpdateRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.peggy.v1.EventValsetUpdateRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 valset_nonce = 1 [json_name = "valsetNonce"];
  if (this->_internal_valset_nonce() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_valset_nonce(), target);
  }

  // uint64 valset_height = 2 [json_name = "valsetHeight"];
  if (this->_internal_valset_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_valset_height(), target);
  }

  // repeated .injective.peggy.v1.BridgeValidator valset_members = 3 [json_name = "valsetMembers"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_valset_members_size()); i < n; i++) {
    const auto& repfield = this->_internal_valset_members(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string reward_amount = 4 [json_name = "rewardAmount", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int"];
  if (!this->_internal_reward_amount().empty()) {
    const std::string& _s = this->_internal_reward_amount();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.peggy.v1.EventValsetUpdateRequest.reward_amount");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // string reward_token = 5 [json_name = "rewardToken"];
  if (!this->_internal_reward_token().empty()) {
    const std::string& _s = this->_internal_reward_token();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.peggy.v1.EventValsetUpdateRequest.reward_token");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.peggy.v1.EventValsetUpdateRequest)
  return target;
}

::size_t EventValsetUpdateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.peggy.v1.EventValsetUpdateRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .injective.peggy.v1.BridgeValidator valset_members = 3 [json_name = "valsetMembers"];
  total_size += 1UL * this->_internal_valset_members_size();
  for (const auto& msg : this->_internal_valset_members()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string reward_amount = 4 [json_name = "rewardAmount", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int"];
  if (!this->_internal_reward_amount().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_reward_amount());
  }

  // string reward_token = 5 [json_name = "rewardToken"];
  if (!this->_internal_reward_token().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_reward_token());
  }

  // uint64 valset_nonce = 1 [json_name = "valsetNonce"];
  if (this->_internal_valset_nonce() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_valset_nonce());
  }

  // uint64 valset_height = 2 [json_name = "valsetHeight"];
  if (this->_internal_valset_height() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_valset_height());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EventValsetUpdateRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EventValsetUpdateRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EventValsetUpdateRequest::GetClassData() const { return &_class_data_; }


void EventValsetUpdateRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EventValsetUpdateRequest*>(&to_msg);
  auto& from = static_cast<const EventValsetUpdateRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.peggy.v1.EventValsetUpdateRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_valset_members()->MergeFrom(from._internal_valset_members());
  if (!from._internal_reward_amount().empty()) {
    _this->_internal_set_reward_amount(from._internal_reward_amount());
  }
  if (!from._internal_reward_token().empty()) {
    _this->_internal_set_reward_token(from._internal_reward_token());
  }
  if (from._internal_valset_nonce() != 0) {
    _this->_internal_set_valset_nonce(from._internal_valset_nonce());
  }
  if (from._internal_valset_height() != 0) {
    _this->_internal_set_valset_height(from._internal_valset_height());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EventValsetUpdateRequest::CopyFrom(const EventValsetUpdateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.peggy.v1.EventValsetUpdateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventValsetUpdateRequest::IsInitialized() const {
  return true;
}

void EventValsetUpdateRequest::InternalSwap(EventValsetUpdateRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_valset_members()->InternalSwap(other->_internal_mutable_valset_members());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.reward_amount_, lhs_arena,
                                       &other->_impl_.reward_amount_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.reward_token_, lhs_arena,
                                       &other->_impl_.reward_token_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EventValsetUpdateRequest, _impl_.valset_height_)
      + sizeof(EventValsetUpdateRequest::_impl_.valset_height_)
      - PROTOBUF_FIELD_OFFSET(EventValsetUpdateRequest, _impl_.valset_nonce_)>(
          reinterpret_cast<char*>(&_impl_.valset_nonce_),
          reinterpret_cast<char*>(&other->_impl_.valset_nonce_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EventValsetUpdateRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fpeggy_2fv1_2fevents_2eproto_getter, &descriptor_table_injective_2fpeggy_2fv1_2fevents_2eproto_once,
      file_level_metadata_injective_2fpeggy_2fv1_2fevents_2eproto[4]);
}
// ===================================================================

class EventSetOrchestratorAddresses::_Internal {
 public:
};

EventSetOrchestratorAddresses::EventSetOrchestratorAddresses(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.peggy.v1.EventSetOrchestratorAddresses)
}
EventSetOrchestratorAddresses::EventSetOrchestratorAddresses(const EventSetOrchestratorAddresses& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EventSetOrchestratorAddresses* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.validator_address_) {}

    , decltype(_impl_.orchestrator_address_) {}

    , decltype(_impl_.operator_eth_address_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.validator_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.validator_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_validator_address().empty()) {
    _this->_impl_.validator_address_.Set(from._internal_validator_address(), _this->GetArenaForAllocation());
  }
  _impl_.orchestrator_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.orchestrator_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_orchestrator_address().empty()) {
    _this->_impl_.orchestrator_address_.Set(from._internal_orchestrator_address(), _this->GetArenaForAllocation());
  }
  _impl_.operator_eth_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.operator_eth_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_operator_eth_address().empty()) {
    _this->_impl_.operator_eth_address_.Set(from._internal_operator_eth_address(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:injective.peggy.v1.EventSetOrchestratorAddresses)
}

inline void EventSetOrchestratorAddresses::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.validator_address_) {}

    , decltype(_impl_.orchestrator_address_) {}

    , decltype(_impl_.operator_eth_address_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.validator_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.validator_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.orchestrator_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.orchestrator_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.operator_eth_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.operator_eth_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

EventSetOrchestratorAddresses::~EventSetOrchestratorAddresses() {
  // @@protoc_insertion_point(destructor:injective.peggy.v1.EventSetOrchestratorAddresses)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EventSetOrchestratorAddresses::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.validator_address_.Destroy();
  _impl_.orchestrator_address_.Destroy();
  _impl_.operator_eth_address_.Destroy();
}

void EventSetOrchestratorAddresses::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EventSetOrchestratorAddresses::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.peggy.v1.EventSetOrchestratorAddresses)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.validator_address_.ClearToEmpty();
  _impl_.orchestrator_address_.ClearToEmpty();
  _impl_.operator_eth_address_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EventSetOrchestratorAddresses::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string validator_address = 1 [json_name = "validatorAddress"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_validator_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.peggy.v1.EventSetOrchestratorAddresses.validator_address"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string orchestrator_address = 2 [json_name = "orchestratorAddress"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_orchestrator_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.peggy.v1.EventSetOrchestratorAddresses.orchestrator_address"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string operator_eth_address = 3 [json_name = "operatorEthAddress"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_operator_eth_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.peggy.v1.EventSetOrchestratorAddresses.operator_eth_address"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* EventSetOrchestratorAddresses::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.peggy.v1.EventSetOrchestratorAddresses)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string validator_address = 1 [json_name = "validatorAddress"];
  if (!this->_internal_validator_address().empty()) {
    const std::string& _s = this->_internal_validator_address();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.peggy.v1.EventSetOrchestratorAddresses.validator_address");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string orchestrator_address = 2 [json_name = "orchestratorAddress"];
  if (!this->_internal_orchestrator_address().empty()) {
    const std::string& _s = this->_internal_orchestrator_address();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.peggy.v1.EventSetOrchestratorAddresses.orchestrator_address");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string operator_eth_address = 3 [json_name = "operatorEthAddress"];
  if (!this->_internal_operator_eth_address().empty()) {
    const std::string& _s = this->_internal_operator_eth_address();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.peggy.v1.EventSetOrchestratorAddresses.operator_eth_address");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.peggy.v1.EventSetOrchestratorAddresses)
  return target;
}

::size_t EventSetOrchestratorAddresses::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.peggy.v1.EventSetOrchestratorAddresses)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string validator_address = 1 [json_name = "validatorAddress"];
  if (!this->_internal_validator_address().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_validator_address());
  }

  // string orchestrator_address = 2 [json_name = "orchestratorAddress"];
  if (!this->_internal_orchestrator_address().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_orchestrator_address());
  }

  // string operator_eth_address = 3 [json_name = "operatorEthAddress"];
  if (!this->_internal_operator_eth_address().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_operator_eth_address());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EventSetOrchestratorAddresses::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EventSetOrchestratorAddresses::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EventSetOrchestratorAddresses::GetClassData() const { return &_class_data_; }


void EventSetOrchestratorAddresses::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EventSetOrchestratorAddresses*>(&to_msg);
  auto& from = static_cast<const EventSetOrchestratorAddresses&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.peggy.v1.EventSetOrchestratorAddresses)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_validator_address().empty()) {
    _this->_internal_set_validator_address(from._internal_validator_address());
  }
  if (!from._internal_orchestrator_address().empty()) {
    _this->_internal_set_orchestrator_address(from._internal_orchestrator_address());
  }
  if (!from._internal_operator_eth_address().empty()) {
    _this->_internal_set_operator_eth_address(from._internal_operator_eth_address());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EventSetOrchestratorAddresses::CopyFrom(const EventSetOrchestratorAddresses& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.peggy.v1.EventSetOrchestratorAddresses)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventSetOrchestratorAddresses::IsInitialized() const {
  return true;
}

void EventSetOrchestratorAddresses::InternalSwap(EventSetOrchestratorAddresses* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.validator_address_, lhs_arena,
                                       &other->_impl_.validator_address_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.orchestrator_address_, lhs_arena,
                                       &other->_impl_.orchestrator_address_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.operator_eth_address_, lhs_arena,
                                       &other->_impl_.operator_eth_address_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata EventSetOrchestratorAddresses::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fpeggy_2fv1_2fevents_2eproto_getter, &descriptor_table_injective_2fpeggy_2fv1_2fevents_2eproto_once,
      file_level_metadata_injective_2fpeggy_2fv1_2fevents_2eproto[5]);
}
// ===================================================================

class EventValsetConfirm::_Internal {
 public:
};

EventValsetConfirm::EventValsetConfirm(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.peggy.v1.EventValsetConfirm)
}
EventValsetConfirm::EventValsetConfirm(const EventValsetConfirm& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EventValsetConfirm* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.orchestrator_address_) {}

    , decltype(_impl_.valset_nonce_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.orchestrator_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.orchestrator_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_orchestrator_address().empty()) {
    _this->_impl_.orchestrator_address_.Set(from._internal_orchestrator_address(), _this->GetArenaForAllocation());
  }
  _this->_impl_.valset_nonce_ = from._impl_.valset_nonce_;
  // @@protoc_insertion_point(copy_constructor:injective.peggy.v1.EventValsetConfirm)
}

inline void EventValsetConfirm::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.orchestrator_address_) {}

    , decltype(_impl_.valset_nonce_) { ::uint64_t{0u} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.orchestrator_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.orchestrator_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

EventValsetConfirm::~EventValsetConfirm() {
  // @@protoc_insertion_point(destructor:injective.peggy.v1.EventValsetConfirm)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EventValsetConfirm::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.orchestrator_address_.Destroy();
}

void EventValsetConfirm::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EventValsetConfirm::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.peggy.v1.EventValsetConfirm)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.orchestrator_address_.ClearToEmpty();
  _impl_.valset_nonce_ = ::uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EventValsetConfirm::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 valset_nonce = 1 [json_name = "valsetNonce"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.valset_nonce_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string orchestrator_address = 2 [json_name = "orchestratorAddress"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_orchestrator_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.peggy.v1.EventValsetConfirm.orchestrator_address"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* EventValsetConfirm::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.peggy.v1.EventValsetConfirm)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 valset_nonce = 1 [json_name = "valsetNonce"];
  if (this->_internal_valset_nonce() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_valset_nonce(), target);
  }

  // string orchestrator_address = 2 [json_name = "orchestratorAddress"];
  if (!this->_internal_orchestrator_address().empty()) {
    const std::string& _s = this->_internal_orchestrator_address();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.peggy.v1.EventValsetConfirm.orchestrator_address");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.peggy.v1.EventValsetConfirm)
  return target;
}

::size_t EventValsetConfirm::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.peggy.v1.EventValsetConfirm)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string orchestrator_address = 2 [json_name = "orchestratorAddress"];
  if (!this->_internal_orchestrator_address().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_orchestrator_address());
  }

  // uint64 valset_nonce = 1 [json_name = "valsetNonce"];
  if (this->_internal_valset_nonce() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_valset_nonce());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EventValsetConfirm::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EventValsetConfirm::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EventValsetConfirm::GetClassData() const { return &_class_data_; }


void EventValsetConfirm::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EventValsetConfirm*>(&to_msg);
  auto& from = static_cast<const EventValsetConfirm&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.peggy.v1.EventValsetConfirm)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_orchestrator_address().empty()) {
    _this->_internal_set_orchestrator_address(from._internal_orchestrator_address());
  }
  if (from._internal_valset_nonce() != 0) {
    _this->_internal_set_valset_nonce(from._internal_valset_nonce());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EventValsetConfirm::CopyFrom(const EventValsetConfirm& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.peggy.v1.EventValsetConfirm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventValsetConfirm::IsInitialized() const {
  return true;
}

void EventValsetConfirm::InternalSwap(EventValsetConfirm* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.orchestrator_address_, lhs_arena,
                                       &other->_impl_.orchestrator_address_, rhs_arena);

  swap(_impl_.valset_nonce_, other->_impl_.valset_nonce_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EventValsetConfirm::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fpeggy_2fv1_2fevents_2eproto_getter, &descriptor_table_injective_2fpeggy_2fv1_2fevents_2eproto_once,
      file_level_metadata_injective_2fpeggy_2fv1_2fevents_2eproto[6]);
}
// ===================================================================

class EventSendToEth::_Internal {
 public:
};

EventSendToEth::EventSendToEth(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.peggy.v1.EventSendToEth)
}
EventSendToEth::EventSendToEth(const EventSendToEth& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EventSendToEth* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.sender_) {}

    , decltype(_impl_.receiver_) {}

    , decltype(_impl_.amount_) {}

    , decltype(_impl_.bridge_fee_) {}

    , decltype(_impl_.outgoing_tx_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.sender_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.sender_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sender().empty()) {
    _this->_impl_.sender_.Set(from._internal_sender(), _this->GetArenaForAllocation());
  }
  _impl_.receiver_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.receiver_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_receiver().empty()) {
    _this->_impl_.receiver_.Set(from._internal_receiver(), _this->GetArenaForAllocation());
  }
  _impl_.amount_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.amount_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_amount().empty()) {
    _this->_impl_.amount_.Set(from._internal_amount(), _this->GetArenaForAllocation());
  }
  _impl_.bridge_fee_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.bridge_fee_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_bridge_fee().empty()) {
    _this->_impl_.bridge_fee_.Set(from._internal_bridge_fee(), _this->GetArenaForAllocation());
  }
  _this->_impl_.outgoing_tx_id_ = from._impl_.outgoing_tx_id_;
  // @@protoc_insertion_point(copy_constructor:injective.peggy.v1.EventSendToEth)
}

inline void EventSendToEth::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.sender_) {}

    , decltype(_impl_.receiver_) {}

    , decltype(_impl_.amount_) {}

    , decltype(_impl_.bridge_fee_) {}

    , decltype(_impl_.outgoing_tx_id_) { ::uint64_t{0u} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.sender_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.sender_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.receiver_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.receiver_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.amount_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.amount_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.bridge_fee_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.bridge_fee_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

EventSendToEth::~EventSendToEth() {
  // @@protoc_insertion_point(destructor:injective.peggy.v1.EventSendToEth)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EventSendToEth::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sender_.Destroy();
  _impl_.receiver_.Destroy();
  _impl_.amount_.Destroy();
  _impl_.bridge_fee_.Destroy();
}

void EventSendToEth::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EventSendToEth::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.peggy.v1.EventSendToEth)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sender_.ClearToEmpty();
  _impl_.receiver_.ClearToEmpty();
  _impl_.amount_.ClearToEmpty();
  _impl_.bridge_fee_.ClearToEmpty();
  _impl_.outgoing_tx_id_ = ::uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EventSendToEth::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 outgoing_tx_id = 1 [json_name = "outgoingTxId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.outgoing_tx_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string sender = 2 [json_name = "sender"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_sender();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.peggy.v1.EventSendToEth.sender"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string receiver = 3 [json_name = "receiver"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_receiver();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.peggy.v1.EventSendToEth.receiver"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string amount = 4 [json_name = "amount", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Coin"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_amount();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.peggy.v1.EventSendToEth.amount"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string bridge_fee = 5 [json_name = "bridgeFee", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Coin"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_bridge_fee();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.peggy.v1.EventSendToEth.bridge_fee"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* EventSendToEth::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.peggy.v1.EventSendToEth)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 outgoing_tx_id = 1 [json_name = "outgoingTxId"];
  if (this->_internal_outgoing_tx_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_outgoing_tx_id(), target);
  }

  // string sender = 2 [json_name = "sender"];
  if (!this->_internal_sender().empty()) {
    const std::string& _s = this->_internal_sender();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.peggy.v1.EventSendToEth.sender");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string receiver = 3 [json_name = "receiver"];
  if (!this->_internal_receiver().empty()) {
    const std::string& _s = this->_internal_receiver();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.peggy.v1.EventSendToEth.receiver");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string amount = 4 [json_name = "amount", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Coin"];
  if (!this->_internal_amount().empty()) {
    const std::string& _s = this->_internal_amount();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.peggy.v1.EventSendToEth.amount");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // string bridge_fee = 5 [json_name = "bridgeFee", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Coin"];
  if (!this->_internal_bridge_fee().empty()) {
    const std::string& _s = this->_internal_bridge_fee();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.peggy.v1.EventSendToEth.bridge_fee");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.peggy.v1.EventSendToEth)
  return target;
}

::size_t EventSendToEth::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.peggy.v1.EventSendToEth)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sender = 2 [json_name = "sender"];
  if (!this->_internal_sender().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_sender());
  }

  // string receiver = 3 [json_name = "receiver"];
  if (!this->_internal_receiver().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_receiver());
  }

  // string amount = 4 [json_name = "amount", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Coin"];
  if (!this->_internal_amount().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_amount());
  }

  // string bridge_fee = 5 [json_name = "bridgeFee", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Coin"];
  if (!this->_internal_bridge_fee().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_bridge_fee());
  }

  // uint64 outgoing_tx_id = 1 [json_name = "outgoingTxId"];
  if (this->_internal_outgoing_tx_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_outgoing_tx_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EventSendToEth::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EventSendToEth::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EventSendToEth::GetClassData() const { return &_class_data_; }


void EventSendToEth::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EventSendToEth*>(&to_msg);
  auto& from = static_cast<const EventSendToEth&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.peggy.v1.EventSendToEth)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_sender().empty()) {
    _this->_internal_set_sender(from._internal_sender());
  }
  if (!from._internal_receiver().empty()) {
    _this->_internal_set_receiver(from._internal_receiver());
  }
  if (!from._internal_amount().empty()) {
    _this->_internal_set_amount(from._internal_amount());
  }
  if (!from._internal_bridge_fee().empty()) {
    _this->_internal_set_bridge_fee(from._internal_bridge_fee());
  }
  if (from._internal_outgoing_tx_id() != 0) {
    _this->_internal_set_outgoing_tx_id(from._internal_outgoing_tx_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EventSendToEth::CopyFrom(const EventSendToEth& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.peggy.v1.EventSendToEth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventSendToEth::IsInitialized() const {
  return true;
}

void EventSendToEth::InternalSwap(EventSendToEth* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.sender_, lhs_arena,
                                       &other->_impl_.sender_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.receiver_, lhs_arena,
                                       &other->_impl_.receiver_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.amount_, lhs_arena,
                                       &other->_impl_.amount_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.bridge_fee_, lhs_arena,
                                       &other->_impl_.bridge_fee_, rhs_arena);

  swap(_impl_.outgoing_tx_id_, other->_impl_.outgoing_tx_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EventSendToEth::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fpeggy_2fv1_2fevents_2eproto_getter, &descriptor_table_injective_2fpeggy_2fv1_2fevents_2eproto_once,
      file_level_metadata_injective_2fpeggy_2fv1_2fevents_2eproto[7]);
}
// ===================================================================

class EventConfirmBatch::_Internal {
 public:
};

EventConfirmBatch::EventConfirmBatch(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.peggy.v1.EventConfirmBatch)
}
EventConfirmBatch::EventConfirmBatch(const EventConfirmBatch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EventConfirmBatch* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.orchestrator_address_) {}

    , decltype(_impl_.batch_nonce_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.orchestrator_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.orchestrator_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_orchestrator_address().empty()) {
    _this->_impl_.orchestrator_address_.Set(from._internal_orchestrator_address(), _this->GetArenaForAllocation());
  }
  _this->_impl_.batch_nonce_ = from._impl_.batch_nonce_;
  // @@protoc_insertion_point(copy_constructor:injective.peggy.v1.EventConfirmBatch)
}

inline void EventConfirmBatch::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.orchestrator_address_) {}

    , decltype(_impl_.batch_nonce_) { ::uint64_t{0u} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.orchestrator_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.orchestrator_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

EventConfirmBatch::~EventConfirmBatch() {
  // @@protoc_insertion_point(destructor:injective.peggy.v1.EventConfirmBatch)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EventConfirmBatch::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.orchestrator_address_.Destroy();
}

void EventConfirmBatch::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EventConfirmBatch::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.peggy.v1.EventConfirmBatch)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.orchestrator_address_.ClearToEmpty();
  _impl_.batch_nonce_ = ::uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EventConfirmBatch::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 batch_nonce = 1 [json_name = "batchNonce"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.batch_nonce_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string orchestrator_address = 2 [json_name = "orchestratorAddress"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_orchestrator_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.peggy.v1.EventConfirmBatch.orchestrator_address"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* EventConfirmBatch::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.peggy.v1.EventConfirmBatch)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 batch_nonce = 1 [json_name = "batchNonce"];
  if (this->_internal_batch_nonce() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_batch_nonce(), target);
  }

  // string orchestrator_address = 2 [json_name = "orchestratorAddress"];
  if (!this->_internal_orchestrator_address().empty()) {
    const std::string& _s = this->_internal_orchestrator_address();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.peggy.v1.EventConfirmBatch.orchestrator_address");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.peggy.v1.EventConfirmBatch)
  return target;
}

::size_t EventConfirmBatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.peggy.v1.EventConfirmBatch)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string orchestrator_address = 2 [json_name = "orchestratorAddress"];
  if (!this->_internal_orchestrator_address().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_orchestrator_address());
  }

  // uint64 batch_nonce = 1 [json_name = "batchNonce"];
  if (this->_internal_batch_nonce() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_batch_nonce());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EventConfirmBatch::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EventConfirmBatch::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EventConfirmBatch::GetClassData() const { return &_class_data_; }


void EventConfirmBatch::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EventConfirmBatch*>(&to_msg);
  auto& from = static_cast<const EventConfirmBatch&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.peggy.v1.EventConfirmBatch)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_orchestrator_address().empty()) {
    _this->_internal_set_orchestrator_address(from._internal_orchestrator_address());
  }
  if (from._internal_batch_nonce() != 0) {
    _this->_internal_set_batch_nonce(from._internal_batch_nonce());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EventConfirmBatch::CopyFrom(const EventConfirmBatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.peggy.v1.EventConfirmBatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventConfirmBatch::IsInitialized() const {
  return true;
}

void EventConfirmBatch::InternalSwap(EventConfirmBatch* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.orchestrator_address_, lhs_arena,
                                       &other->_impl_.orchestrator_address_, rhs_arena);

  swap(_impl_.batch_nonce_, other->_impl_.batch_nonce_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EventConfirmBatch::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fpeggy_2fv1_2fevents_2eproto_getter, &descriptor_table_injective_2fpeggy_2fv1_2fevents_2eproto_once,
      file_level_metadata_injective_2fpeggy_2fv1_2fevents_2eproto[8]);
}
// ===================================================================

class EventAttestationVote::_Internal {
 public:
};

EventAttestationVote::EventAttestationVote(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.peggy.v1.EventAttestationVote)
}
EventAttestationVote::EventAttestationVote(const EventAttestationVote& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EventAttestationVote* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.attestation_id_) {}

    , decltype(_impl_.voter_) {}

    , decltype(_impl_.event_nonce_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.attestation_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.attestation_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_attestation_id().empty()) {
    _this->_impl_.attestation_id_.Set(from._internal_attestation_id(), _this->GetArenaForAllocation());
  }
  _impl_.voter_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.voter_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_voter().empty()) {
    _this->_impl_.voter_.Set(from._internal_voter(), _this->GetArenaForAllocation());
  }
  _this->_impl_.event_nonce_ = from._impl_.event_nonce_;
  // @@protoc_insertion_point(copy_constructor:injective.peggy.v1.EventAttestationVote)
}

inline void EventAttestationVote::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.attestation_id_) {}

    , decltype(_impl_.voter_) {}

    , decltype(_impl_.event_nonce_) { ::uint64_t{0u} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.attestation_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.attestation_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.voter_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.voter_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

EventAttestationVote::~EventAttestationVote() {
  // @@protoc_insertion_point(destructor:injective.peggy.v1.EventAttestationVote)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EventAttestationVote::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.attestation_id_.Destroy();
  _impl_.voter_.Destroy();
}

void EventAttestationVote::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EventAttestationVote::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.peggy.v1.EventAttestationVote)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.attestation_id_.ClearToEmpty();
  _impl_.voter_.ClearToEmpty();
  _impl_.event_nonce_ = ::uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EventAttestationVote::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 event_nonce = 1 [json_name = "eventNonce"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.event_nonce_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes attestation_id = 2 [json_name = "attestationId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_attestation_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string voter = 3 [json_name = "voter"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_voter();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.peggy.v1.EventAttestationVote.voter"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* EventAttestationVote::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.peggy.v1.EventAttestationVote)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 event_nonce = 1 [json_name = "eventNonce"];
  if (this->_internal_event_nonce() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_event_nonce(), target);
  }

  // bytes attestation_id = 2 [json_name = "attestationId"];
  if (!this->_internal_attestation_id().empty()) {
    const std::string& _s = this->_internal_attestation_id();
    target = stream->WriteBytesMaybeAliased(2, _s, target);
  }

  // string voter = 3 [json_name = "voter"];
  if (!this->_internal_voter().empty()) {
    const std::string& _s = this->_internal_voter();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.peggy.v1.EventAttestationVote.voter");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.peggy.v1.EventAttestationVote)
  return target;
}

::size_t EventAttestationVote::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.peggy.v1.EventAttestationVote)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes attestation_id = 2 [json_name = "attestationId"];
  if (!this->_internal_attestation_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_attestation_id());
  }

  // string voter = 3 [json_name = "voter"];
  if (!this->_internal_voter().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_voter());
  }

  // uint64 event_nonce = 1 [json_name = "eventNonce"];
  if (this->_internal_event_nonce() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_event_nonce());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EventAttestationVote::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EventAttestationVote::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EventAttestationVote::GetClassData() const { return &_class_data_; }


void EventAttestationVote::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EventAttestationVote*>(&to_msg);
  auto& from = static_cast<const EventAttestationVote&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.peggy.v1.EventAttestationVote)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_attestation_id().empty()) {
    _this->_internal_set_attestation_id(from._internal_attestation_id());
  }
  if (!from._internal_voter().empty()) {
    _this->_internal_set_voter(from._internal_voter());
  }
  if (from._internal_event_nonce() != 0) {
    _this->_internal_set_event_nonce(from._internal_event_nonce());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EventAttestationVote::CopyFrom(const EventAttestationVote& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.peggy.v1.EventAttestationVote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventAttestationVote::IsInitialized() const {
  return true;
}

void EventAttestationVote::InternalSwap(EventAttestationVote* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.attestation_id_, lhs_arena,
                                       &other->_impl_.attestation_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.voter_, lhs_arena,
                                       &other->_impl_.voter_, rhs_arena);

  swap(_impl_.event_nonce_, other->_impl_.event_nonce_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EventAttestationVote::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fpeggy_2fv1_2fevents_2eproto_getter, &descriptor_table_injective_2fpeggy_2fv1_2fevents_2eproto_once,
      file_level_metadata_injective_2fpeggy_2fv1_2fevents_2eproto[9]);
}
// ===================================================================

class EventDepositClaim::_Internal {
 public:
};

EventDepositClaim::EventDepositClaim(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.peggy.v1.EventDepositClaim)
}
EventDepositClaim::EventDepositClaim(const EventDepositClaim& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EventDepositClaim* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.attestation_id_) {}

    , decltype(_impl_.ethereum_sender_) {}

    , decltype(_impl_.cosmos_receiver_) {}

    , decltype(_impl_.token_contract_) {}

    , decltype(_impl_.amount_) {}

    , decltype(_impl_.orchestrator_address_) {}

    , decltype(_impl_.data_) {}

    , decltype(_impl_.event_nonce_) {}

    , decltype(_impl_.event_height_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.attestation_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.attestation_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_attestation_id().empty()) {
    _this->_impl_.attestation_id_.Set(from._internal_attestation_id(), _this->GetArenaForAllocation());
  }
  _impl_.ethereum_sender_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.ethereum_sender_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ethereum_sender().empty()) {
    _this->_impl_.ethereum_sender_.Set(from._internal_ethereum_sender(), _this->GetArenaForAllocation());
  }
  _impl_.cosmos_receiver_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.cosmos_receiver_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_cosmos_receiver().empty()) {
    _this->_impl_.cosmos_receiver_.Set(from._internal_cosmos_receiver(), _this->GetArenaForAllocation());
  }
  _impl_.token_contract_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.token_contract_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_token_contract().empty()) {
    _this->_impl_.token_contract_.Set(from._internal_token_contract(), _this->GetArenaForAllocation());
  }
  _impl_.amount_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.amount_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_amount().empty()) {
    _this->_impl_.amount_.Set(from._internal_amount(), _this->GetArenaForAllocation());
  }
  _impl_.orchestrator_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.orchestrator_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_orchestrator_address().empty()) {
    _this->_impl_.orchestrator_address_.Set(from._internal_orchestrator_address(), _this->GetArenaForAllocation());
  }
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.data_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.event_nonce_, &from._impl_.event_nonce_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.event_height_) -
    reinterpret_cast<char*>(&_impl_.event_nonce_)) + sizeof(_impl_.event_height_));
  // @@protoc_insertion_point(copy_constructor:injective.peggy.v1.EventDepositClaim)
}

inline void EventDepositClaim::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.attestation_id_) {}

    , decltype(_impl_.ethereum_sender_) {}

    , decltype(_impl_.cosmos_receiver_) {}

    , decltype(_impl_.token_contract_) {}

    , decltype(_impl_.amount_) {}

    , decltype(_impl_.orchestrator_address_) {}

    , decltype(_impl_.data_) {}

    , decltype(_impl_.event_nonce_) { ::uint64_t{0u} }

    , decltype(_impl_.event_height_) { ::uint64_t{0u} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.attestation_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.attestation_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ethereum_sender_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.ethereum_sender_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.cosmos_receiver_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.cosmos_receiver_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.token_contract_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.token_contract_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.amount_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.amount_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.orchestrator_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.orchestrator_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.data_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

EventDepositClaim::~EventDepositClaim() {
  // @@protoc_insertion_point(destructor:injective.peggy.v1.EventDepositClaim)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EventDepositClaim::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.attestation_id_.Destroy();
  _impl_.ethereum_sender_.Destroy();
  _impl_.cosmos_receiver_.Destroy();
  _impl_.token_contract_.Destroy();
  _impl_.amount_.Destroy();
  _impl_.orchestrator_address_.Destroy();
  _impl_.data_.Destroy();
}

void EventDepositClaim::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EventDepositClaim::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.peggy.v1.EventDepositClaim)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.attestation_id_.ClearToEmpty();
  _impl_.ethereum_sender_.ClearToEmpty();
  _impl_.cosmos_receiver_.ClearToEmpty();
  _impl_.token_contract_.ClearToEmpty();
  _impl_.amount_.ClearToEmpty();
  _impl_.orchestrator_address_.ClearToEmpty();
  _impl_.data_.ClearToEmpty();
  ::memset(&_impl_.event_nonce_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.event_height_) -
      reinterpret_cast<char*>(&_impl_.event_nonce_)) + sizeof(_impl_.event_height_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EventDepositClaim::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 event_nonce = 1 [json_name = "eventNonce"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.event_nonce_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 event_height = 2 [json_name = "eventHeight"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.event_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes attestation_id = 3 [json_name = "attestationId"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_attestation_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string ethereum_sender = 4 [json_name = "ethereumSender"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_ethereum_sender();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.peggy.v1.EventDepositClaim.ethereum_sender"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string cosmos_receiver = 5 [json_name = "cosmosReceiver"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_cosmos_receiver();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.peggy.v1.EventDepositClaim.cosmos_receiver"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string token_contract = 6 [json_name = "tokenContract"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_token_contract();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.peggy.v1.EventDepositClaim.token_contract"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string amount = 7 [json_name = "amount", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_amount();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.peggy.v1.EventDepositClaim.amount"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string orchestrator_address = 8 [json_name = "orchestratorAddress"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_orchestrator_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.peggy.v1.EventDepositClaim.orchestrator_address"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string data = 9 [json_name = "data"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.peggy.v1.EventDepositClaim.data"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* EventDepositClaim::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.peggy.v1.EventDepositClaim)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 event_nonce = 1 [json_name = "eventNonce"];
  if (this->_internal_event_nonce() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_event_nonce(), target);
  }

  // uint64 event_height = 2 [json_name = "eventHeight"];
  if (this->_internal_event_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_event_height(), target);
  }

  // bytes attestation_id = 3 [json_name = "attestationId"];
  if (!this->_internal_attestation_id().empty()) {
    const std::string& _s = this->_internal_attestation_id();
    target = stream->WriteBytesMaybeAliased(3, _s, target);
  }

  // string ethereum_sender = 4 [json_name = "ethereumSender"];
  if (!this->_internal_ethereum_sender().empty()) {
    const std::string& _s = this->_internal_ethereum_sender();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.peggy.v1.EventDepositClaim.ethereum_sender");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // string cosmos_receiver = 5 [json_name = "cosmosReceiver"];
  if (!this->_internal_cosmos_receiver().empty()) {
    const std::string& _s = this->_internal_cosmos_receiver();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.peggy.v1.EventDepositClaim.cosmos_receiver");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // string token_contract = 6 [json_name = "tokenContract"];
  if (!this->_internal_token_contract().empty()) {
    const std::string& _s = this->_internal_token_contract();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.peggy.v1.EventDepositClaim.token_contract");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  // string amount = 7 [json_name = "amount", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int"];
  if (!this->_internal_amount().empty()) {
    const std::string& _s = this->_internal_amount();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.peggy.v1.EventDepositClaim.amount");
    target = stream->WriteStringMaybeAliased(7, _s, target);
  }

  // string orchestrator_address = 8 [json_name = "orchestratorAddress"];
  if (!this->_internal_orchestrator_address().empty()) {
    const std::string& _s = this->_internal_orchestrator_address();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.peggy.v1.EventDepositClaim.orchestrator_address");
    target = stream->WriteStringMaybeAliased(8, _s, target);
  }

  // string data = 9 [json_name = "data"];
  if (!this->_internal_data().empty()) {
    const std::string& _s = this->_internal_data();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.peggy.v1.EventDepositClaim.data");
    target = stream->WriteStringMaybeAliased(9, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.peggy.v1.EventDepositClaim)
  return target;
}

::size_t EventDepositClaim::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.peggy.v1.EventDepositClaim)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes attestation_id = 3 [json_name = "attestationId"];
  if (!this->_internal_attestation_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_attestation_id());
  }

  // string ethereum_sender = 4 [json_name = "ethereumSender"];
  if (!this->_internal_ethereum_sender().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_ethereum_sender());
  }

  // string cosmos_receiver = 5 [json_name = "cosmosReceiver"];
  if (!this->_internal_cosmos_receiver().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_cosmos_receiver());
  }

  // string token_contract = 6 [json_name = "tokenContract"];
  if (!this->_internal_token_contract().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_token_contract());
  }

  // string amount = 7 [json_name = "amount", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int"];
  if (!this->_internal_amount().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_amount());
  }

  // string orchestrator_address = 8 [json_name = "orchestratorAddress"];
  if (!this->_internal_orchestrator_address().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_orchestrator_address());
  }

  // string data = 9 [json_name = "data"];
  if (!this->_internal_data().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_data());
  }

  // uint64 event_nonce = 1 [json_name = "eventNonce"];
  if (this->_internal_event_nonce() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_event_nonce());
  }

  // uint64 event_height = 2 [json_name = "eventHeight"];
  if (this->_internal_event_height() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_event_height());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EventDepositClaim::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EventDepositClaim::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EventDepositClaim::GetClassData() const { return &_class_data_; }


void EventDepositClaim::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EventDepositClaim*>(&to_msg);
  auto& from = static_cast<const EventDepositClaim&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.peggy.v1.EventDepositClaim)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_attestation_id().empty()) {
    _this->_internal_set_attestation_id(from._internal_attestation_id());
  }
  if (!from._internal_ethereum_sender().empty()) {
    _this->_internal_set_ethereum_sender(from._internal_ethereum_sender());
  }
  if (!from._internal_cosmos_receiver().empty()) {
    _this->_internal_set_cosmos_receiver(from._internal_cosmos_receiver());
  }
  if (!from._internal_token_contract().empty()) {
    _this->_internal_set_token_contract(from._internal_token_contract());
  }
  if (!from._internal_amount().empty()) {
    _this->_internal_set_amount(from._internal_amount());
  }
  if (!from._internal_orchestrator_address().empty()) {
    _this->_internal_set_orchestrator_address(from._internal_orchestrator_address());
  }
  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  if (from._internal_event_nonce() != 0) {
    _this->_internal_set_event_nonce(from._internal_event_nonce());
  }
  if (from._internal_event_height() != 0) {
    _this->_internal_set_event_height(from._internal_event_height());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EventDepositClaim::CopyFrom(const EventDepositClaim& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.peggy.v1.EventDepositClaim)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventDepositClaim::IsInitialized() const {
  return true;
}

void EventDepositClaim::InternalSwap(EventDepositClaim* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.attestation_id_, lhs_arena,
                                       &other->_impl_.attestation_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.ethereum_sender_, lhs_arena,
                                       &other->_impl_.ethereum_sender_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.cosmos_receiver_, lhs_arena,
                                       &other->_impl_.cosmos_receiver_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.token_contract_, lhs_arena,
                                       &other->_impl_.token_contract_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.amount_, lhs_arena,
                                       &other->_impl_.amount_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.orchestrator_address_, lhs_arena,
                                       &other->_impl_.orchestrator_address_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.data_, lhs_arena,
                                       &other->_impl_.data_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EventDepositClaim, _impl_.event_height_)
      + sizeof(EventDepositClaim::_impl_.event_height_)
      - PROTOBUF_FIELD_OFFSET(EventDepositClaim, _impl_.event_nonce_)>(
          reinterpret_cast<char*>(&_impl_.event_nonce_),
          reinterpret_cast<char*>(&other->_impl_.event_nonce_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EventDepositClaim::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fpeggy_2fv1_2fevents_2eproto_getter, &descriptor_table_injective_2fpeggy_2fv1_2fevents_2eproto_once,
      file_level_metadata_injective_2fpeggy_2fv1_2fevents_2eproto[10]);
}
// ===================================================================

class EventWithdrawClaim::_Internal {
 public:
};

EventWithdrawClaim::EventWithdrawClaim(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.peggy.v1.EventWithdrawClaim)
}
EventWithdrawClaim::EventWithdrawClaim(const EventWithdrawClaim& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EventWithdrawClaim* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.attestation_id_) {}

    , decltype(_impl_.token_contract_) {}

    , decltype(_impl_.orchestrator_address_) {}

    , decltype(_impl_.event_nonce_) {}

    , decltype(_impl_.event_height_) {}

    , decltype(_impl_.batch_nonce_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.attestation_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.attestation_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_attestation_id().empty()) {
    _this->_impl_.attestation_id_.Set(from._internal_attestation_id(), _this->GetArenaForAllocation());
  }
  _impl_.token_contract_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.token_contract_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_token_contract().empty()) {
    _this->_impl_.token_contract_.Set(from._internal_token_contract(), _this->GetArenaForAllocation());
  }
  _impl_.orchestrator_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.orchestrator_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_orchestrator_address().empty()) {
    _this->_impl_.orchestrator_address_.Set(from._internal_orchestrator_address(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.event_nonce_, &from._impl_.event_nonce_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.batch_nonce_) -
    reinterpret_cast<char*>(&_impl_.event_nonce_)) + sizeof(_impl_.batch_nonce_));
  // @@protoc_insertion_point(copy_constructor:injective.peggy.v1.EventWithdrawClaim)
}

inline void EventWithdrawClaim::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.attestation_id_) {}

    , decltype(_impl_.token_contract_) {}

    , decltype(_impl_.orchestrator_address_) {}

    , decltype(_impl_.event_nonce_) { ::uint64_t{0u} }

    , decltype(_impl_.event_height_) { ::uint64_t{0u} }

    , decltype(_impl_.batch_nonce_) { ::uint64_t{0u} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.attestation_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.attestation_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.token_contract_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.token_contract_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.orchestrator_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.orchestrator_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

EventWithdrawClaim::~EventWithdrawClaim() {
  // @@protoc_insertion_point(destructor:injective.peggy.v1.EventWithdrawClaim)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EventWithdrawClaim::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.attestation_id_.Destroy();
  _impl_.token_contract_.Destroy();
  _impl_.orchestrator_address_.Destroy();
}

void EventWithdrawClaim::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EventWithdrawClaim::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.peggy.v1.EventWithdrawClaim)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.attestation_id_.ClearToEmpty();
  _impl_.token_contract_.ClearToEmpty();
  _impl_.orchestrator_address_.ClearToEmpty();
  ::memset(&_impl_.event_nonce_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.batch_nonce_) -
      reinterpret_cast<char*>(&_impl_.event_nonce_)) + sizeof(_impl_.batch_nonce_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EventWithdrawClaim::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 event_nonce = 1 [json_name = "eventNonce"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.event_nonce_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 event_height = 2 [json_name = "eventHeight"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.event_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes attestation_id = 3 [json_name = "attestationId"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_attestation_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 batch_nonce = 4 [json_name = "batchNonce"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _impl_.batch_nonce_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string token_contract = 5 [json_name = "tokenContract"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_token_contract();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.peggy.v1.EventWithdrawClaim.token_contract"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string orchestrator_address = 6 [json_name = "orchestratorAddress"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_orchestrator_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.peggy.v1.EventWithdrawClaim.orchestrator_address"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* EventWithdrawClaim::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.peggy.v1.EventWithdrawClaim)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 event_nonce = 1 [json_name = "eventNonce"];
  if (this->_internal_event_nonce() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_event_nonce(), target);
  }

  // uint64 event_height = 2 [json_name = "eventHeight"];
  if (this->_internal_event_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_event_height(), target);
  }

  // bytes attestation_id = 3 [json_name = "attestationId"];
  if (!this->_internal_attestation_id().empty()) {
    const std::string& _s = this->_internal_attestation_id();
    target = stream->WriteBytesMaybeAliased(3, _s, target);
  }

  // uint64 batch_nonce = 4 [json_name = "batchNonce"];
  if (this->_internal_batch_nonce() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        4, this->_internal_batch_nonce(), target);
  }

  // string token_contract = 5 [json_name = "tokenContract"];
  if (!this->_internal_token_contract().empty()) {
    const std::string& _s = this->_internal_token_contract();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.peggy.v1.EventWithdrawClaim.token_contract");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // string orchestrator_address = 6 [json_name = "orchestratorAddress"];
  if (!this->_internal_orchestrator_address().empty()) {
    const std::string& _s = this->_internal_orchestrator_address();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.peggy.v1.EventWithdrawClaim.orchestrator_address");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.peggy.v1.EventWithdrawClaim)
  return target;
}

::size_t EventWithdrawClaim::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.peggy.v1.EventWithdrawClaim)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes attestation_id = 3 [json_name = "attestationId"];
  if (!this->_internal_attestation_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_attestation_id());
  }

  // string token_contract = 5 [json_name = "tokenContract"];
  if (!this->_internal_token_contract().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_token_contract());
  }

  // string orchestrator_address = 6 [json_name = "orchestratorAddress"];
  if (!this->_internal_orchestrator_address().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_orchestrator_address());
  }

  // uint64 event_nonce = 1 [json_name = "eventNonce"];
  if (this->_internal_event_nonce() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_event_nonce());
  }

  // uint64 event_height = 2 [json_name = "eventHeight"];
  if (this->_internal_event_height() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_event_height());
  }

  // uint64 batch_nonce = 4 [json_name = "batchNonce"];
  if (this->_internal_batch_nonce() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_batch_nonce());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EventWithdrawClaim::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EventWithdrawClaim::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EventWithdrawClaim::GetClassData() const { return &_class_data_; }


void EventWithdrawClaim::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EventWithdrawClaim*>(&to_msg);
  auto& from = static_cast<const EventWithdrawClaim&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.peggy.v1.EventWithdrawClaim)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_attestation_id().empty()) {
    _this->_internal_set_attestation_id(from._internal_attestation_id());
  }
  if (!from._internal_token_contract().empty()) {
    _this->_internal_set_token_contract(from._internal_token_contract());
  }
  if (!from._internal_orchestrator_address().empty()) {
    _this->_internal_set_orchestrator_address(from._internal_orchestrator_address());
  }
  if (from._internal_event_nonce() != 0) {
    _this->_internal_set_event_nonce(from._internal_event_nonce());
  }
  if (from._internal_event_height() != 0) {
    _this->_internal_set_event_height(from._internal_event_height());
  }
  if (from._internal_batch_nonce() != 0) {
    _this->_internal_set_batch_nonce(from._internal_batch_nonce());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EventWithdrawClaim::CopyFrom(const EventWithdrawClaim& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.peggy.v1.EventWithdrawClaim)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventWithdrawClaim::IsInitialized() const {
  return true;
}

void EventWithdrawClaim::InternalSwap(EventWithdrawClaim* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.attestation_id_, lhs_arena,
                                       &other->_impl_.attestation_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.token_contract_, lhs_arena,
                                       &other->_impl_.token_contract_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.orchestrator_address_, lhs_arena,
                                       &other->_impl_.orchestrator_address_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EventWithdrawClaim, _impl_.batch_nonce_)
      + sizeof(EventWithdrawClaim::_impl_.batch_nonce_)
      - PROTOBUF_FIELD_OFFSET(EventWithdrawClaim, _impl_.event_nonce_)>(
          reinterpret_cast<char*>(&_impl_.event_nonce_),
          reinterpret_cast<char*>(&other->_impl_.event_nonce_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EventWithdrawClaim::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fpeggy_2fv1_2fevents_2eproto_getter, &descriptor_table_injective_2fpeggy_2fv1_2fevents_2eproto_once,
      file_level_metadata_injective_2fpeggy_2fv1_2fevents_2eproto[11]);
}
// ===================================================================

class EventERC20DeployedClaim::_Internal {
 public:
};

EventERC20DeployedClaim::EventERC20DeployedClaim(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.peggy.v1.EventERC20DeployedClaim)
}
EventERC20DeployedClaim::EventERC20DeployedClaim(const EventERC20DeployedClaim& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EventERC20DeployedClaim* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.attestation_id_) {}

    , decltype(_impl_.cosmos_denom_) {}

    , decltype(_impl_.token_contract_) {}

    , decltype(_impl_.name_) {}

    , decltype(_impl_.symbol_) {}

    , decltype(_impl_.orchestrator_address_) {}

    , decltype(_impl_.event_nonce_) {}

    , decltype(_impl_.event_height_) {}

    , decltype(_impl_.decimals_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.attestation_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.attestation_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_attestation_id().empty()) {
    _this->_impl_.attestation_id_.Set(from._internal_attestation_id(), _this->GetArenaForAllocation());
  }
  _impl_.cosmos_denom_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.cosmos_denom_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_cosmos_denom().empty()) {
    _this->_impl_.cosmos_denom_.Set(from._internal_cosmos_denom(), _this->GetArenaForAllocation());
  }
  _impl_.token_contract_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.token_contract_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_token_contract().empty()) {
    _this->_impl_.token_contract_.Set(from._internal_token_contract(), _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }
  _impl_.symbol_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.symbol_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_symbol().empty()) {
    _this->_impl_.symbol_.Set(from._internal_symbol(), _this->GetArenaForAllocation());
  }
  _impl_.orchestrator_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.orchestrator_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_orchestrator_address().empty()) {
    _this->_impl_.orchestrator_address_.Set(from._internal_orchestrator_address(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.event_nonce_, &from._impl_.event_nonce_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.decimals_) -
    reinterpret_cast<char*>(&_impl_.event_nonce_)) + sizeof(_impl_.decimals_));
  // @@protoc_insertion_point(copy_constructor:injective.peggy.v1.EventERC20DeployedClaim)
}

inline void EventERC20DeployedClaim::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.attestation_id_) {}

    , decltype(_impl_.cosmos_denom_) {}

    , decltype(_impl_.token_contract_) {}

    , decltype(_impl_.name_) {}

    , decltype(_impl_.symbol_) {}

    , decltype(_impl_.orchestrator_address_) {}

    , decltype(_impl_.event_nonce_) { ::uint64_t{0u} }

    , decltype(_impl_.event_height_) { ::uint64_t{0u} }

    , decltype(_impl_.decimals_) { ::uint64_t{0u} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.attestation_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.attestation_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.cosmos_denom_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.cosmos_denom_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.token_contract_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.token_contract_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.symbol_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.symbol_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.orchestrator_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.orchestrator_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

EventERC20DeployedClaim::~EventERC20DeployedClaim() {
  // @@protoc_insertion_point(destructor:injective.peggy.v1.EventERC20DeployedClaim)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EventERC20DeployedClaim::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.attestation_id_.Destroy();
  _impl_.cosmos_denom_.Destroy();
  _impl_.token_contract_.Destroy();
  _impl_.name_.Destroy();
  _impl_.symbol_.Destroy();
  _impl_.orchestrator_address_.Destroy();
}

void EventERC20DeployedClaim::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EventERC20DeployedClaim::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.peggy.v1.EventERC20DeployedClaim)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.attestation_id_.ClearToEmpty();
  _impl_.cosmos_denom_.ClearToEmpty();
  _impl_.token_contract_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _impl_.symbol_.ClearToEmpty();
  _impl_.orchestrator_address_.ClearToEmpty();
  ::memset(&_impl_.event_nonce_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.decimals_) -
      reinterpret_cast<char*>(&_impl_.event_nonce_)) + sizeof(_impl_.decimals_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EventERC20DeployedClaim::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 event_nonce = 1 [json_name = "eventNonce"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.event_nonce_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 event_height = 2 [json_name = "eventHeight"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.event_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes attestation_id = 3 [json_name = "attestationId"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_attestation_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string cosmos_denom = 4 [json_name = "cosmosDenom"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_cosmos_denom();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.peggy.v1.EventERC20DeployedClaim.cosmos_denom"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string token_contract = 5 [json_name = "tokenContract"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_token_contract();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.peggy.v1.EventERC20DeployedClaim.token_contract"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string name = 6 [json_name = "name"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.peggy.v1.EventERC20DeployedClaim.name"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string symbol = 7 [json_name = "symbol"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_symbol();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.peggy.v1.EventERC20DeployedClaim.symbol"));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 decimals = 8 [json_name = "decimals"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 64)) {
          _impl_.decimals_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string orchestrator_address = 9 [json_name = "orchestratorAddress"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_orchestrator_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.peggy.v1.EventERC20DeployedClaim.orchestrator_address"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* EventERC20DeployedClaim::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.peggy.v1.EventERC20DeployedClaim)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 event_nonce = 1 [json_name = "eventNonce"];
  if (this->_internal_event_nonce() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_event_nonce(), target);
  }

  // uint64 event_height = 2 [json_name = "eventHeight"];
  if (this->_internal_event_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_event_height(), target);
  }

  // bytes attestation_id = 3 [json_name = "attestationId"];
  if (!this->_internal_attestation_id().empty()) {
    const std::string& _s = this->_internal_attestation_id();
    target = stream->WriteBytesMaybeAliased(3, _s, target);
  }

  // string cosmos_denom = 4 [json_name = "cosmosDenom"];
  if (!this->_internal_cosmos_denom().empty()) {
    const std::string& _s = this->_internal_cosmos_denom();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.peggy.v1.EventERC20DeployedClaim.cosmos_denom");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // string token_contract = 5 [json_name = "tokenContract"];
  if (!this->_internal_token_contract().empty()) {
    const std::string& _s = this->_internal_token_contract();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.peggy.v1.EventERC20DeployedClaim.token_contract");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // string name = 6 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    const std::string& _s = this->_internal_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.peggy.v1.EventERC20DeployedClaim.name");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  // string symbol = 7 [json_name = "symbol"];
  if (!this->_internal_symbol().empty()) {
    const std::string& _s = this->_internal_symbol();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.peggy.v1.EventERC20DeployedClaim.symbol");
    target = stream->WriteStringMaybeAliased(7, _s, target);
  }

  // uint64 decimals = 8 [json_name = "decimals"];
  if (this->_internal_decimals() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        8, this->_internal_decimals(), target);
  }

  // string orchestrator_address = 9 [json_name = "orchestratorAddress"];
  if (!this->_internal_orchestrator_address().empty()) {
    const std::string& _s = this->_internal_orchestrator_address();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.peggy.v1.EventERC20DeployedClaim.orchestrator_address");
    target = stream->WriteStringMaybeAliased(9, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.peggy.v1.EventERC20DeployedClaim)
  return target;
}

::size_t EventERC20DeployedClaim::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.peggy.v1.EventERC20DeployedClaim)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes attestation_id = 3 [json_name = "attestationId"];
  if (!this->_internal_attestation_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_attestation_id());
  }

  // string cosmos_denom = 4 [json_name = "cosmosDenom"];
  if (!this->_internal_cosmos_denom().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_cosmos_denom());
  }

  // string token_contract = 5 [json_name = "tokenContract"];
  if (!this->_internal_token_contract().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_token_contract());
  }

  // string name = 6 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  // string symbol = 7 [json_name = "symbol"];
  if (!this->_internal_symbol().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_symbol());
  }

  // string orchestrator_address = 9 [json_name = "orchestratorAddress"];
  if (!this->_internal_orchestrator_address().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_orchestrator_address());
  }

  // uint64 event_nonce = 1 [json_name = "eventNonce"];
  if (this->_internal_event_nonce() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_event_nonce());
  }

  // uint64 event_height = 2 [json_name = "eventHeight"];
  if (this->_internal_event_height() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_event_height());
  }

  // uint64 decimals = 8 [json_name = "decimals"];
  if (this->_internal_decimals() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_decimals());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EventERC20DeployedClaim::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EventERC20DeployedClaim::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EventERC20DeployedClaim::GetClassData() const { return &_class_data_; }


void EventERC20DeployedClaim::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EventERC20DeployedClaim*>(&to_msg);
  auto& from = static_cast<const EventERC20DeployedClaim&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.peggy.v1.EventERC20DeployedClaim)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_attestation_id().empty()) {
    _this->_internal_set_attestation_id(from._internal_attestation_id());
  }
  if (!from._internal_cosmos_denom().empty()) {
    _this->_internal_set_cosmos_denom(from._internal_cosmos_denom());
  }
  if (!from._internal_token_contract().empty()) {
    _this->_internal_set_token_contract(from._internal_token_contract());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_symbol().empty()) {
    _this->_internal_set_symbol(from._internal_symbol());
  }
  if (!from._internal_orchestrator_address().empty()) {
    _this->_internal_set_orchestrator_address(from._internal_orchestrator_address());
  }
  if (from._internal_event_nonce() != 0) {
    _this->_internal_set_event_nonce(from._internal_event_nonce());
  }
  if (from._internal_event_height() != 0) {
    _this->_internal_set_event_height(from._internal_event_height());
  }
  if (from._internal_decimals() != 0) {
    _this->_internal_set_decimals(from._internal_decimals());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EventERC20DeployedClaim::CopyFrom(const EventERC20DeployedClaim& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.peggy.v1.EventERC20DeployedClaim)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventERC20DeployedClaim::IsInitialized() const {
  return true;
}

void EventERC20DeployedClaim::InternalSwap(EventERC20DeployedClaim* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.attestation_id_, lhs_arena,
                                       &other->_impl_.attestation_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.cosmos_denom_, lhs_arena,
                                       &other->_impl_.cosmos_denom_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.token_contract_, lhs_arena,
                                       &other->_impl_.token_contract_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.symbol_, lhs_arena,
                                       &other->_impl_.symbol_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.orchestrator_address_, lhs_arena,
                                       &other->_impl_.orchestrator_address_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EventERC20DeployedClaim, _impl_.decimals_)
      + sizeof(EventERC20DeployedClaim::_impl_.decimals_)
      - PROTOBUF_FIELD_OFFSET(EventERC20DeployedClaim, _impl_.event_nonce_)>(
          reinterpret_cast<char*>(&_impl_.event_nonce_),
          reinterpret_cast<char*>(&other->_impl_.event_nonce_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EventERC20DeployedClaim::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fpeggy_2fv1_2fevents_2eproto_getter, &descriptor_table_injective_2fpeggy_2fv1_2fevents_2eproto_once,
      file_level_metadata_injective_2fpeggy_2fv1_2fevents_2eproto[12]);
}
// ===================================================================

class EventValsetUpdateClaim::_Internal {
 public:
};

void EventValsetUpdateClaim::clear_valset_members() {
  _internal_mutable_valset_members()->Clear();
}
EventValsetUpdateClaim::EventValsetUpdateClaim(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.peggy.v1.EventValsetUpdateClaim)
}
EventValsetUpdateClaim::EventValsetUpdateClaim(const EventValsetUpdateClaim& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EventValsetUpdateClaim* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.valset_members_){from._impl_.valset_members_}
    , decltype(_impl_.attestation_id_) {}

    , decltype(_impl_.reward_amount_) {}

    , decltype(_impl_.reward_token_) {}

    , decltype(_impl_.orchestrator_address_) {}

    , decltype(_impl_.event_nonce_) {}

    , decltype(_impl_.event_height_) {}

    , decltype(_impl_.valset_nonce_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.attestation_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.attestation_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_attestation_id().empty()) {
    _this->_impl_.attestation_id_.Set(from._internal_attestation_id(), _this->GetArenaForAllocation());
  }
  _impl_.reward_amount_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.reward_amount_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_reward_amount().empty()) {
    _this->_impl_.reward_amount_.Set(from._internal_reward_amount(), _this->GetArenaForAllocation());
  }
  _impl_.reward_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.reward_token_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_reward_token().empty()) {
    _this->_impl_.reward_token_.Set(from._internal_reward_token(), _this->GetArenaForAllocation());
  }
  _impl_.orchestrator_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.orchestrator_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_orchestrator_address().empty()) {
    _this->_impl_.orchestrator_address_.Set(from._internal_orchestrator_address(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.event_nonce_, &from._impl_.event_nonce_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.valset_nonce_) -
    reinterpret_cast<char*>(&_impl_.event_nonce_)) + sizeof(_impl_.valset_nonce_));
  // @@protoc_insertion_point(copy_constructor:injective.peggy.v1.EventValsetUpdateClaim)
}

inline void EventValsetUpdateClaim::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.valset_members_){arena}
    , decltype(_impl_.attestation_id_) {}

    , decltype(_impl_.reward_amount_) {}

    , decltype(_impl_.reward_token_) {}

    , decltype(_impl_.orchestrator_address_) {}

    , decltype(_impl_.event_nonce_) { ::uint64_t{0u} }

    , decltype(_impl_.event_height_) { ::uint64_t{0u} }

    , decltype(_impl_.valset_nonce_) { ::uint64_t{0u} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.attestation_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.attestation_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.reward_amount_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.reward_amount_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.reward_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.reward_token_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.orchestrator_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.orchestrator_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

EventValsetUpdateClaim::~EventValsetUpdateClaim() {
  // @@protoc_insertion_point(destructor:injective.peggy.v1.EventValsetUpdateClaim)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EventValsetUpdateClaim::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_valset_members()->~RepeatedPtrField();
  _impl_.attestation_id_.Destroy();
  _impl_.reward_amount_.Destroy();
  _impl_.reward_token_.Destroy();
  _impl_.orchestrator_address_.Destroy();
}

void EventValsetUpdateClaim::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EventValsetUpdateClaim::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.peggy.v1.EventValsetUpdateClaim)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_valset_members()->Clear();
  _impl_.attestation_id_.ClearToEmpty();
  _impl_.reward_amount_.ClearToEmpty();
  _impl_.reward_token_.ClearToEmpty();
  _impl_.orchestrator_address_.ClearToEmpty();
  ::memset(&_impl_.event_nonce_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.valset_nonce_) -
      reinterpret_cast<char*>(&_impl_.event_nonce_)) + sizeof(_impl_.valset_nonce_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EventValsetUpdateClaim::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 event_nonce = 1 [json_name = "eventNonce"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.event_nonce_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 event_height = 2 [json_name = "eventHeight"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.event_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes attestation_id = 3 [json_name = "attestationId"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_attestation_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 valset_nonce = 4 [json_name = "valsetNonce"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _impl_.valset_nonce_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .injective.peggy.v1.BridgeValidator valset_members = 5 [json_name = "valsetMembers"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_valset_members(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // string reward_amount = 6 [json_name = "rewardAmount", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_reward_amount();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.peggy.v1.EventValsetUpdateClaim.reward_amount"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string reward_token = 7 [json_name = "rewardToken"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_reward_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.peggy.v1.EventValsetUpdateClaim.reward_token"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string orchestrator_address = 8 [json_name = "orchestratorAddress"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_orchestrator_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.peggy.v1.EventValsetUpdateClaim.orchestrator_address"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* EventValsetUpdateClaim::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.peggy.v1.EventValsetUpdateClaim)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 event_nonce = 1 [json_name = "eventNonce"];
  if (this->_internal_event_nonce() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_event_nonce(), target);
  }

  // uint64 event_height = 2 [json_name = "eventHeight"];
  if (this->_internal_event_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_event_height(), target);
  }

  // bytes attestation_id = 3 [json_name = "attestationId"];
  if (!this->_internal_attestation_id().empty()) {
    const std::string& _s = this->_internal_attestation_id();
    target = stream->WriteBytesMaybeAliased(3, _s, target);
  }

  // uint64 valset_nonce = 4 [json_name = "valsetNonce"];
  if (this->_internal_valset_nonce() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        4, this->_internal_valset_nonce(), target);
  }

  // repeated .injective.peggy.v1.BridgeValidator valset_members = 5 [json_name = "valsetMembers"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_valset_members_size()); i < n; i++) {
    const auto& repfield = this->_internal_valset_members(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string reward_amount = 6 [json_name = "rewardAmount", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int"];
  if (!this->_internal_reward_amount().empty()) {
    const std::string& _s = this->_internal_reward_amount();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.peggy.v1.EventValsetUpdateClaim.reward_amount");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  // string reward_token = 7 [json_name = "rewardToken"];
  if (!this->_internal_reward_token().empty()) {
    const std::string& _s = this->_internal_reward_token();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.peggy.v1.EventValsetUpdateClaim.reward_token");
    target = stream->WriteStringMaybeAliased(7, _s, target);
  }

  // string orchestrator_address = 8 [json_name = "orchestratorAddress"];
  if (!this->_internal_orchestrator_address().empty()) {
    const std::string& _s = this->_internal_orchestrator_address();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.peggy.v1.EventValsetUpdateClaim.orchestrator_address");
    target = stream->WriteStringMaybeAliased(8, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.peggy.v1.EventValsetUpdateClaim)
  return target;
}

::size_t EventValsetUpdateClaim::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.peggy.v1.EventValsetUpdateClaim)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .injective.peggy.v1.BridgeValidator valset_members = 5 [json_name = "valsetMembers"];
  total_size += 1UL * this->_internal_valset_members_size();
  for (const auto& msg : this->_internal_valset_members()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes attestation_id = 3 [json_name = "attestationId"];
  if (!this->_internal_attestation_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_attestation_id());
  }

  // string reward_amount = 6 [json_name = "rewardAmount", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int"];
  if (!this->_internal_reward_amount().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_reward_amount());
  }

  // string reward_token = 7 [json_name = "rewardToken"];
  if (!this->_internal_reward_token().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_reward_token());
  }

  // string orchestrator_address = 8 [json_name = "orchestratorAddress"];
  if (!this->_internal_orchestrator_address().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_orchestrator_address());
  }

  // uint64 event_nonce = 1 [json_name = "eventNonce"];
  if (this->_internal_event_nonce() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_event_nonce());
  }

  // uint64 event_height = 2 [json_name = "eventHeight"];
  if (this->_internal_event_height() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_event_height());
  }

  // uint64 valset_nonce = 4 [json_name = "valsetNonce"];
  if (this->_internal_valset_nonce() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_valset_nonce());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EventValsetUpdateClaim::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EventValsetUpdateClaim::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EventValsetUpdateClaim::GetClassData() const { return &_class_data_; }


void EventValsetUpdateClaim::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EventValsetUpdateClaim*>(&to_msg);
  auto& from = static_cast<const EventValsetUpdateClaim&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.peggy.v1.EventValsetUpdateClaim)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_valset_members()->MergeFrom(from._internal_valset_members());
  if (!from._internal_attestation_id().empty()) {
    _this->_internal_set_attestation_id(from._internal_attestation_id());
  }
  if (!from._internal_reward_amount().empty()) {
    _this->_internal_set_reward_amount(from._internal_reward_amount());
  }
  if (!from._internal_reward_token().empty()) {
    _this->_internal_set_reward_token(from._internal_reward_token());
  }
  if (!from._internal_orchestrator_address().empty()) {
    _this->_internal_set_orchestrator_address(from._internal_orchestrator_address());
  }
  if (from._internal_event_nonce() != 0) {
    _this->_internal_set_event_nonce(from._internal_event_nonce());
  }
  if (from._internal_event_height() != 0) {
    _this->_internal_set_event_height(from._internal_event_height());
  }
  if (from._internal_valset_nonce() != 0) {
    _this->_internal_set_valset_nonce(from._internal_valset_nonce());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EventValsetUpdateClaim::CopyFrom(const EventValsetUpdateClaim& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.peggy.v1.EventValsetUpdateClaim)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventValsetUpdateClaim::IsInitialized() const {
  return true;
}

void EventValsetUpdateClaim::InternalSwap(EventValsetUpdateClaim* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_valset_members()->InternalSwap(other->_internal_mutable_valset_members());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.attestation_id_, lhs_arena,
                                       &other->_impl_.attestation_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.reward_amount_, lhs_arena,
                                       &other->_impl_.reward_amount_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.reward_token_, lhs_arena,
                                       &other->_impl_.reward_token_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.orchestrator_address_, lhs_arena,
                                       &other->_impl_.orchestrator_address_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EventValsetUpdateClaim, _impl_.valset_nonce_)
      + sizeof(EventValsetUpdateClaim::_impl_.valset_nonce_)
      - PROTOBUF_FIELD_OFFSET(EventValsetUpdateClaim, _impl_.event_nonce_)>(
          reinterpret_cast<char*>(&_impl_.event_nonce_),
          reinterpret_cast<char*>(&other->_impl_.event_nonce_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EventValsetUpdateClaim::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fpeggy_2fv1_2fevents_2eproto_getter, &descriptor_table_injective_2fpeggy_2fv1_2fevents_2eproto_once,
      file_level_metadata_injective_2fpeggy_2fv1_2fevents_2eproto[13]);
}
// ===================================================================

class EventCancelSendToEth::_Internal {
 public:
};

EventCancelSendToEth::EventCancelSendToEth(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.peggy.v1.EventCancelSendToEth)
}
EventCancelSendToEth::EventCancelSendToEth(const EventCancelSendToEth& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:injective.peggy.v1.EventCancelSendToEth)
}

inline void EventCancelSendToEth::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.outgoing_tx_id_) { ::uint64_t{0u} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

EventCancelSendToEth::~EventCancelSendToEth() {
  // @@protoc_insertion_point(destructor:injective.peggy.v1.EventCancelSendToEth)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EventCancelSendToEth::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void EventCancelSendToEth::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EventCancelSendToEth::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.peggy.v1.EventCancelSendToEth)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.outgoing_tx_id_ = ::uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EventCancelSendToEth::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 outgoing_tx_id = 1 [json_name = "outgoingTxId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.outgoing_tx_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* EventCancelSendToEth::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.peggy.v1.EventCancelSendToEth)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 outgoing_tx_id = 1 [json_name = "outgoingTxId"];
  if (this->_internal_outgoing_tx_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_outgoing_tx_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.peggy.v1.EventCancelSendToEth)
  return target;
}

::size_t EventCancelSendToEth::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.peggy.v1.EventCancelSendToEth)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 outgoing_tx_id = 1 [json_name = "outgoingTxId"];
  if (this->_internal_outgoing_tx_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_outgoing_tx_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EventCancelSendToEth::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EventCancelSendToEth::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EventCancelSendToEth::GetClassData() const { return &_class_data_; }


void EventCancelSendToEth::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EventCancelSendToEth*>(&to_msg);
  auto& from = static_cast<const EventCancelSendToEth&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.peggy.v1.EventCancelSendToEth)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_outgoing_tx_id() != 0) {
    _this->_internal_set_outgoing_tx_id(from._internal_outgoing_tx_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EventCancelSendToEth::CopyFrom(const EventCancelSendToEth& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.peggy.v1.EventCancelSendToEth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventCancelSendToEth::IsInitialized() const {
  return true;
}

void EventCancelSendToEth::InternalSwap(EventCancelSendToEth* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);

  swap(_impl_.outgoing_tx_id_, other->_impl_.outgoing_tx_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EventCancelSendToEth::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fpeggy_2fv1_2fevents_2eproto_getter, &descriptor_table_injective_2fpeggy_2fv1_2fevents_2eproto_once,
      file_level_metadata_injective_2fpeggy_2fv1_2fevents_2eproto[14]);
}
// ===================================================================

class EventSubmitBadSignatureEvidence::_Internal {
 public:
};

EventSubmitBadSignatureEvidence::EventSubmitBadSignatureEvidence(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.peggy.v1.EventSubmitBadSignatureEvidence)
}
EventSubmitBadSignatureEvidence::EventSubmitBadSignatureEvidence(const EventSubmitBadSignatureEvidence& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EventSubmitBadSignatureEvidence* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.bad_eth_signature_) {}

    , decltype(_impl_.bad_eth_signature_subject_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.bad_eth_signature_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.bad_eth_signature_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_bad_eth_signature().empty()) {
    _this->_impl_.bad_eth_signature_.Set(from._internal_bad_eth_signature(), _this->GetArenaForAllocation());
  }
  _impl_.bad_eth_signature_subject_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.bad_eth_signature_subject_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_bad_eth_signature_subject().empty()) {
    _this->_impl_.bad_eth_signature_subject_.Set(from._internal_bad_eth_signature_subject(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:injective.peggy.v1.EventSubmitBadSignatureEvidence)
}

inline void EventSubmitBadSignatureEvidence::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.bad_eth_signature_) {}

    , decltype(_impl_.bad_eth_signature_subject_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.bad_eth_signature_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.bad_eth_signature_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.bad_eth_signature_subject_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.bad_eth_signature_subject_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

EventSubmitBadSignatureEvidence::~EventSubmitBadSignatureEvidence() {
  // @@protoc_insertion_point(destructor:injective.peggy.v1.EventSubmitBadSignatureEvidence)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EventSubmitBadSignatureEvidence::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.bad_eth_signature_.Destroy();
  _impl_.bad_eth_signature_subject_.Destroy();
}

void EventSubmitBadSignatureEvidence::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EventSubmitBadSignatureEvidence::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.peggy.v1.EventSubmitBadSignatureEvidence)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bad_eth_signature_.ClearToEmpty();
  _impl_.bad_eth_signature_subject_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EventSubmitBadSignatureEvidence::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string bad_eth_signature = 1 [json_name = "badEthSignature"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_bad_eth_signature();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.peggy.v1.EventSubmitBadSignatureEvidence.bad_eth_signature"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string bad_eth_signature_subject = 2 [json_name = "badEthSignatureSubject"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_bad_eth_signature_subject();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.peggy.v1.EventSubmitBadSignatureEvidence.bad_eth_signature_subject"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* EventSubmitBadSignatureEvidence::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.peggy.v1.EventSubmitBadSignatureEvidence)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string bad_eth_signature = 1 [json_name = "badEthSignature"];
  if (!this->_internal_bad_eth_signature().empty()) {
    const std::string& _s = this->_internal_bad_eth_signature();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.peggy.v1.EventSubmitBadSignatureEvidence.bad_eth_signature");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string bad_eth_signature_subject = 2 [json_name = "badEthSignatureSubject"];
  if (!this->_internal_bad_eth_signature_subject().empty()) {
    const std::string& _s = this->_internal_bad_eth_signature_subject();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.peggy.v1.EventSubmitBadSignatureEvidence.bad_eth_signature_subject");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.peggy.v1.EventSubmitBadSignatureEvidence)
  return target;
}

::size_t EventSubmitBadSignatureEvidence::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.peggy.v1.EventSubmitBadSignatureEvidence)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string bad_eth_signature = 1 [json_name = "badEthSignature"];
  if (!this->_internal_bad_eth_signature().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_bad_eth_signature());
  }

  // string bad_eth_signature_subject = 2 [json_name = "badEthSignatureSubject"];
  if (!this->_internal_bad_eth_signature_subject().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_bad_eth_signature_subject());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EventSubmitBadSignatureEvidence::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EventSubmitBadSignatureEvidence::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EventSubmitBadSignatureEvidence::GetClassData() const { return &_class_data_; }


void EventSubmitBadSignatureEvidence::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EventSubmitBadSignatureEvidence*>(&to_msg);
  auto& from = static_cast<const EventSubmitBadSignatureEvidence&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.peggy.v1.EventSubmitBadSignatureEvidence)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_bad_eth_signature().empty()) {
    _this->_internal_set_bad_eth_signature(from._internal_bad_eth_signature());
  }
  if (!from._internal_bad_eth_signature_subject().empty()) {
    _this->_internal_set_bad_eth_signature_subject(from._internal_bad_eth_signature_subject());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EventSubmitBadSignatureEvidence::CopyFrom(const EventSubmitBadSignatureEvidence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.peggy.v1.EventSubmitBadSignatureEvidence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventSubmitBadSignatureEvidence::IsInitialized() const {
  return true;
}

void EventSubmitBadSignatureEvidence::InternalSwap(EventSubmitBadSignatureEvidence* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.bad_eth_signature_, lhs_arena,
                                       &other->_impl_.bad_eth_signature_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.bad_eth_signature_subject_, lhs_arena,
                                       &other->_impl_.bad_eth_signature_subject_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata EventSubmitBadSignatureEvidence::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fpeggy_2fv1_2fevents_2eproto_getter, &descriptor_table_injective_2fpeggy_2fv1_2fevents_2eproto_once,
      file_level_metadata_injective_2fpeggy_2fv1_2fevents_2eproto[15]);
}
// ===================================================================

class EventValidatorSlash::_Internal {
 public:
};

EventValidatorSlash::EventValidatorSlash(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.peggy.v1.EventValidatorSlash)
}
EventValidatorSlash::EventValidatorSlash(const EventValidatorSlash& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EventValidatorSlash* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.reason_) {}

    , decltype(_impl_.consensus_address_) {}

    , decltype(_impl_.operator_address_) {}

    , decltype(_impl_.moniker_) {}

    , decltype(_impl_.power_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.reason_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.reason_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_reason().empty()) {
    _this->_impl_.reason_.Set(from._internal_reason(), _this->GetArenaForAllocation());
  }
  _impl_.consensus_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.consensus_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_consensus_address().empty()) {
    _this->_impl_.consensus_address_.Set(from._internal_consensus_address(), _this->GetArenaForAllocation());
  }
  _impl_.operator_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.operator_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_operator_address().empty()) {
    _this->_impl_.operator_address_.Set(from._internal_operator_address(), _this->GetArenaForAllocation());
  }
  _impl_.moniker_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.moniker_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_moniker().empty()) {
    _this->_impl_.moniker_.Set(from._internal_moniker(), _this->GetArenaForAllocation());
  }
  _this->_impl_.power_ = from._impl_.power_;
  // @@protoc_insertion_point(copy_constructor:injective.peggy.v1.EventValidatorSlash)
}

inline void EventValidatorSlash::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.reason_) {}

    , decltype(_impl_.consensus_address_) {}

    , decltype(_impl_.operator_address_) {}

    , decltype(_impl_.moniker_) {}

    , decltype(_impl_.power_) { ::int64_t{0} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.reason_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.reason_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.consensus_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.consensus_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.operator_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.operator_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.moniker_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.moniker_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

EventValidatorSlash::~EventValidatorSlash() {
  // @@protoc_insertion_point(destructor:injective.peggy.v1.EventValidatorSlash)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EventValidatorSlash::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.reason_.Destroy();
  _impl_.consensus_address_.Destroy();
  _impl_.operator_address_.Destroy();
  _impl_.moniker_.Destroy();
}

void EventValidatorSlash::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EventValidatorSlash::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.peggy.v1.EventValidatorSlash)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.reason_.ClearToEmpty();
  _impl_.consensus_address_.ClearToEmpty();
  _impl_.operator_address_.ClearToEmpty();
  _impl_.moniker_.ClearToEmpty();
  _impl_.power_ = ::int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EventValidatorSlash::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 power = 1 [json_name = "power"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.power_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string reason = 2 [json_name = "reason"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_reason();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.peggy.v1.EventValidatorSlash.reason"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string consensus_address = 3 [json_name = "consensusAddress"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_consensus_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.peggy.v1.EventValidatorSlash.consensus_address"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string operator_address = 4 [json_name = "operatorAddress"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_operator_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.peggy.v1.EventValidatorSlash.operator_address"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string moniker = 5 [json_name = "moniker"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_moniker();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.peggy.v1.EventValidatorSlash.moniker"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* EventValidatorSlash::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.peggy.v1.EventValidatorSlash)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 power = 1 [json_name = "power"];
  if (this->_internal_power() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        1, this->_internal_power(), target);
  }

  // string reason = 2 [json_name = "reason"];
  if (!this->_internal_reason().empty()) {
    const std::string& _s = this->_internal_reason();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.peggy.v1.EventValidatorSlash.reason");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string consensus_address = 3 [json_name = "consensusAddress"];
  if (!this->_internal_consensus_address().empty()) {
    const std::string& _s = this->_internal_consensus_address();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.peggy.v1.EventValidatorSlash.consensus_address");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string operator_address = 4 [json_name = "operatorAddress"];
  if (!this->_internal_operator_address().empty()) {
    const std::string& _s = this->_internal_operator_address();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.peggy.v1.EventValidatorSlash.operator_address");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // string moniker = 5 [json_name = "moniker"];
  if (!this->_internal_moniker().empty()) {
    const std::string& _s = this->_internal_moniker();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.peggy.v1.EventValidatorSlash.moniker");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.peggy.v1.EventValidatorSlash)
  return target;
}

::size_t EventValidatorSlash::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.peggy.v1.EventValidatorSlash)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string reason = 2 [json_name = "reason"];
  if (!this->_internal_reason().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_reason());
  }

  // string consensus_address = 3 [json_name = "consensusAddress"];
  if (!this->_internal_consensus_address().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_consensus_address());
  }

  // string operator_address = 4 [json_name = "operatorAddress"];
  if (!this->_internal_operator_address().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_operator_address());
  }

  // string moniker = 5 [json_name = "moniker"];
  if (!this->_internal_moniker().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_moniker());
  }

  // int64 power = 1 [json_name = "power"];
  if (this->_internal_power() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_power());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EventValidatorSlash::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EventValidatorSlash::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EventValidatorSlash::GetClassData() const { return &_class_data_; }


void EventValidatorSlash::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EventValidatorSlash*>(&to_msg);
  auto& from = static_cast<const EventValidatorSlash&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.peggy.v1.EventValidatorSlash)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_reason().empty()) {
    _this->_internal_set_reason(from._internal_reason());
  }
  if (!from._internal_consensus_address().empty()) {
    _this->_internal_set_consensus_address(from._internal_consensus_address());
  }
  if (!from._internal_operator_address().empty()) {
    _this->_internal_set_operator_address(from._internal_operator_address());
  }
  if (!from._internal_moniker().empty()) {
    _this->_internal_set_moniker(from._internal_moniker());
  }
  if (from._internal_power() != 0) {
    _this->_internal_set_power(from._internal_power());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EventValidatorSlash::CopyFrom(const EventValidatorSlash& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.peggy.v1.EventValidatorSlash)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventValidatorSlash::IsInitialized() const {
  return true;
}

void EventValidatorSlash::InternalSwap(EventValidatorSlash* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.reason_, lhs_arena,
                                       &other->_impl_.reason_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.consensus_address_, lhs_arena,
                                       &other->_impl_.consensus_address_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.operator_address_, lhs_arena,
                                       &other->_impl_.operator_address_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.moniker_, lhs_arena,
                                       &other->_impl_.moniker_, rhs_arena);

  swap(_impl_.power_, other->_impl_.power_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EventValidatorSlash::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fpeggy_2fv1_2fevents_2eproto_getter, &descriptor_table_injective_2fpeggy_2fv1_2fevents_2eproto_once,
      file_level_metadata_injective_2fpeggy_2fv1_2fevents_2eproto[16]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace peggy
}  // namespace injective
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::injective::peggy::v1::EventAttestationObserved*
Arena::CreateMaybeMessage< ::injective::peggy::v1::EventAttestationObserved >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::peggy::v1::EventAttestationObserved >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::peggy::v1::EventBridgeWithdrawCanceled*
Arena::CreateMaybeMessage< ::injective::peggy::v1::EventBridgeWithdrawCanceled >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::peggy::v1::EventBridgeWithdrawCanceled >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::peggy::v1::EventOutgoingBatch*
Arena::CreateMaybeMessage< ::injective::peggy::v1::EventOutgoingBatch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::peggy::v1::EventOutgoingBatch >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::peggy::v1::EventOutgoingBatchCanceled*
Arena::CreateMaybeMessage< ::injective::peggy::v1::EventOutgoingBatchCanceled >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::peggy::v1::EventOutgoingBatchCanceled >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::peggy::v1::EventValsetUpdateRequest*
Arena::CreateMaybeMessage< ::injective::peggy::v1::EventValsetUpdateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::peggy::v1::EventValsetUpdateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::peggy::v1::EventSetOrchestratorAddresses*
Arena::CreateMaybeMessage< ::injective::peggy::v1::EventSetOrchestratorAddresses >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::peggy::v1::EventSetOrchestratorAddresses >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::peggy::v1::EventValsetConfirm*
Arena::CreateMaybeMessage< ::injective::peggy::v1::EventValsetConfirm >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::peggy::v1::EventValsetConfirm >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::peggy::v1::EventSendToEth*
Arena::CreateMaybeMessage< ::injective::peggy::v1::EventSendToEth >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::peggy::v1::EventSendToEth >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::peggy::v1::EventConfirmBatch*
Arena::CreateMaybeMessage< ::injective::peggy::v1::EventConfirmBatch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::peggy::v1::EventConfirmBatch >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::peggy::v1::EventAttestationVote*
Arena::CreateMaybeMessage< ::injective::peggy::v1::EventAttestationVote >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::peggy::v1::EventAttestationVote >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::peggy::v1::EventDepositClaim*
Arena::CreateMaybeMessage< ::injective::peggy::v1::EventDepositClaim >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::peggy::v1::EventDepositClaim >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::peggy::v1::EventWithdrawClaim*
Arena::CreateMaybeMessage< ::injective::peggy::v1::EventWithdrawClaim >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::peggy::v1::EventWithdrawClaim >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::peggy::v1::EventERC20DeployedClaim*
Arena::CreateMaybeMessage< ::injective::peggy::v1::EventERC20DeployedClaim >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::peggy::v1::EventERC20DeployedClaim >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::peggy::v1::EventValsetUpdateClaim*
Arena::CreateMaybeMessage< ::injective::peggy::v1::EventValsetUpdateClaim >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::peggy::v1::EventValsetUpdateClaim >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::peggy::v1::EventCancelSendToEth*
Arena::CreateMaybeMessage< ::injective::peggy::v1::EventCancelSendToEth >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::peggy::v1::EventCancelSendToEth >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::peggy::v1::EventSubmitBadSignatureEvidence*
Arena::CreateMaybeMessage< ::injective::peggy::v1::EventSubmitBadSignatureEvidence >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::peggy::v1::EventSubmitBadSignatureEvidence >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::peggy::v1::EventValidatorSlash*
Arena::CreateMaybeMessage< ::injective::peggy::v1::EventValidatorSlash >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::peggy::v1::EventValidatorSlash >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

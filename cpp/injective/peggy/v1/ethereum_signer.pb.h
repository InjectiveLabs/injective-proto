// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: injective/peggy/v1/ethereum_signer.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_injective_2fpeggy_2fv1_2fethereum_5fsigner_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_injective_2fpeggy_2fv1_2fethereum_5fsigner_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "gogoproto/gogo.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_injective_2fpeggy_2fv1_2fethereum_5fsigner_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_injective_2fpeggy_2fv1_2fethereum_5fsigner_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_injective_2fpeggy_2fv1_2fethereum_5fsigner_2eproto;
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE

namespace injective {
namespace peggy {
namespace v1 {
enum SignType : int {
  SIGN_TYPE_UNKNOWN = 0,
  SIGN_TYPE_ORCHESTRATOR_SIGNED_MULTI_SIG_UPDATE = 1,
  SIGN_TYPE_ORCHESTRATOR_SIGNED_WITHDRAW_BATCH = 2,
  SignType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  SignType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool SignType_IsValid(int value);
constexpr SignType SignType_MIN = static_cast<SignType>(0);
constexpr SignType SignType_MAX = static_cast<SignType>(2);
constexpr int SignType_ARRAYSIZE = 2 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
SignType_descriptor();
template <typename T>
const std::string& SignType_Name(T value) {
  static_assert(std::is_same<T, SignType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to SignType_Name().");
  return SignType_Name(static_cast<SignType>(value));
}
template <>
inline const std::string& SignType_Name(SignType value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<SignType_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool SignType_Parse(absl::string_view name, SignType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SignType>(
      SignType_descriptor(), name, value);
}

// ===================================================================



// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace peggy
}  // namespace injective


PROTOBUF_NAMESPACE_OPEN

template <>
struct is_proto_enum<::injective::peggy::v1::SignType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::injective::peggy::v1::SignType>() {
  return ::injective::peggy::v1::SignType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_injective_2fpeggy_2fv1_2fethereum_5fsigner_2eproto_2epb_2eh

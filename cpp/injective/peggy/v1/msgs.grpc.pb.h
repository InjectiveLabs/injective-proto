// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: injective/peggy/v1/msgs.proto
#ifndef GRPC_injective_2fpeggy_2fv1_2fmsgs_2eproto__INCLUDED
#define GRPC_injective_2fpeggy_2fv1_2fmsgs_2eproto__INCLUDED

#include "injective/peggy/v1/msgs.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace injective {
namespace peggy {
namespace v1 {

class Msg final {
 public:
  static constexpr char const* service_full_name() {
    return "injective.peggy.v1.Msg";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status ValsetConfirm(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgValsetConfirm& request, ::injective::peggy::v1::MsgValsetConfirmResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::MsgValsetConfirmResponse>> AsyncValsetConfirm(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgValsetConfirm& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::MsgValsetConfirmResponse>>(AsyncValsetConfirmRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::MsgValsetConfirmResponse>> PrepareAsyncValsetConfirm(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgValsetConfirm& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::MsgValsetConfirmResponse>>(PrepareAsyncValsetConfirmRaw(context, request, cq));
    }
    virtual ::grpc::Status SendToEth(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgSendToEth& request, ::injective::peggy::v1::MsgSendToEthResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::MsgSendToEthResponse>> AsyncSendToEth(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgSendToEth& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::MsgSendToEthResponse>>(AsyncSendToEthRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::MsgSendToEthResponse>> PrepareAsyncSendToEth(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgSendToEth& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::MsgSendToEthResponse>>(PrepareAsyncSendToEthRaw(context, request, cq));
    }
    virtual ::grpc::Status RequestBatch(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgRequestBatch& request, ::injective::peggy::v1::MsgRequestBatchResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::MsgRequestBatchResponse>> AsyncRequestBatch(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgRequestBatch& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::MsgRequestBatchResponse>>(AsyncRequestBatchRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::MsgRequestBatchResponse>> PrepareAsyncRequestBatch(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgRequestBatch& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::MsgRequestBatchResponse>>(PrepareAsyncRequestBatchRaw(context, request, cq));
    }
    virtual ::grpc::Status ConfirmBatch(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgConfirmBatch& request, ::injective::peggy::v1::MsgConfirmBatchResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::MsgConfirmBatchResponse>> AsyncConfirmBatch(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgConfirmBatch& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::MsgConfirmBatchResponse>>(AsyncConfirmBatchRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::MsgConfirmBatchResponse>> PrepareAsyncConfirmBatch(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgConfirmBatch& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::MsgConfirmBatchResponse>>(PrepareAsyncConfirmBatchRaw(context, request, cq));
    }
    virtual ::grpc::Status DepositClaim(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgDepositClaim& request, ::injective::peggy::v1::MsgDepositClaimResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::MsgDepositClaimResponse>> AsyncDepositClaim(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgDepositClaim& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::MsgDepositClaimResponse>>(AsyncDepositClaimRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::MsgDepositClaimResponse>> PrepareAsyncDepositClaim(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgDepositClaim& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::MsgDepositClaimResponse>>(PrepareAsyncDepositClaimRaw(context, request, cq));
    }
    virtual ::grpc::Status WithdrawClaim(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgWithdrawClaim& request, ::injective::peggy::v1::MsgWithdrawClaimResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::MsgWithdrawClaimResponse>> AsyncWithdrawClaim(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgWithdrawClaim& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::MsgWithdrawClaimResponse>>(AsyncWithdrawClaimRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::MsgWithdrawClaimResponse>> PrepareAsyncWithdrawClaim(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgWithdrawClaim& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::MsgWithdrawClaimResponse>>(PrepareAsyncWithdrawClaimRaw(context, request, cq));
    }
    virtual ::grpc::Status ValsetUpdateClaim(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgValsetUpdatedClaim& request, ::injective::peggy::v1::MsgValsetUpdatedClaimResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::MsgValsetUpdatedClaimResponse>> AsyncValsetUpdateClaim(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgValsetUpdatedClaim& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::MsgValsetUpdatedClaimResponse>>(AsyncValsetUpdateClaimRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::MsgValsetUpdatedClaimResponse>> PrepareAsyncValsetUpdateClaim(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgValsetUpdatedClaim& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::MsgValsetUpdatedClaimResponse>>(PrepareAsyncValsetUpdateClaimRaw(context, request, cq));
    }
    virtual ::grpc::Status ERC20DeployedClaim(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgERC20DeployedClaim& request, ::injective::peggy::v1::MsgERC20DeployedClaimResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::MsgERC20DeployedClaimResponse>> AsyncERC20DeployedClaim(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgERC20DeployedClaim& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::MsgERC20DeployedClaimResponse>>(AsyncERC20DeployedClaimRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::MsgERC20DeployedClaimResponse>> PrepareAsyncERC20DeployedClaim(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgERC20DeployedClaim& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::MsgERC20DeployedClaimResponse>>(PrepareAsyncERC20DeployedClaimRaw(context, request, cq));
    }
    virtual ::grpc::Status SetOrchestratorAddresses(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgSetOrchestratorAddresses& request, ::injective::peggy::v1::MsgSetOrchestratorAddressesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::MsgSetOrchestratorAddressesResponse>> AsyncSetOrchestratorAddresses(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgSetOrchestratorAddresses& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::MsgSetOrchestratorAddressesResponse>>(AsyncSetOrchestratorAddressesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::MsgSetOrchestratorAddressesResponse>> PrepareAsyncSetOrchestratorAddresses(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgSetOrchestratorAddresses& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::MsgSetOrchestratorAddressesResponse>>(PrepareAsyncSetOrchestratorAddressesRaw(context, request, cq));
    }
    virtual ::grpc::Status CancelSendToEth(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgCancelSendToEth& request, ::injective::peggy::v1::MsgCancelSendToEthResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::MsgCancelSendToEthResponse>> AsyncCancelSendToEth(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgCancelSendToEth& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::MsgCancelSendToEthResponse>>(AsyncCancelSendToEthRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::MsgCancelSendToEthResponse>> PrepareAsyncCancelSendToEth(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgCancelSendToEth& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::MsgCancelSendToEthResponse>>(PrepareAsyncCancelSendToEthRaw(context, request, cq));
    }
    virtual ::grpc::Status SubmitBadSignatureEvidence(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgSubmitBadSignatureEvidence& request, ::injective::peggy::v1::MsgSubmitBadSignatureEvidenceResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::MsgSubmitBadSignatureEvidenceResponse>> AsyncSubmitBadSignatureEvidence(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgSubmitBadSignatureEvidence& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::MsgSubmitBadSignatureEvidenceResponse>>(AsyncSubmitBadSignatureEvidenceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::MsgSubmitBadSignatureEvidenceResponse>> PrepareAsyncSubmitBadSignatureEvidence(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgSubmitBadSignatureEvidence& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::MsgSubmitBadSignatureEvidenceResponse>>(PrepareAsyncSubmitBadSignatureEvidenceRaw(context, request, cq));
    }
    virtual ::grpc::Status UpdateParams(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgUpdateParams& request, ::injective::peggy::v1::MsgUpdateParamsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::MsgUpdateParamsResponse>> AsyncUpdateParams(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgUpdateParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::MsgUpdateParamsResponse>>(AsyncUpdateParamsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::MsgUpdateParamsResponse>> PrepareAsyncUpdateParams(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgUpdateParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::MsgUpdateParamsResponse>>(PrepareAsyncUpdateParamsRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void ValsetConfirm(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgValsetConfirm* request, ::injective::peggy::v1::MsgValsetConfirmResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ValsetConfirm(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgValsetConfirm* request, ::injective::peggy::v1::MsgValsetConfirmResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void SendToEth(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgSendToEth* request, ::injective::peggy::v1::MsgSendToEthResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SendToEth(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgSendToEth* request, ::injective::peggy::v1::MsgSendToEthResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void RequestBatch(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgRequestBatch* request, ::injective::peggy::v1::MsgRequestBatchResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RequestBatch(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgRequestBatch* request, ::injective::peggy::v1::MsgRequestBatchResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ConfirmBatch(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgConfirmBatch* request, ::injective::peggy::v1::MsgConfirmBatchResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ConfirmBatch(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgConfirmBatch* request, ::injective::peggy::v1::MsgConfirmBatchResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DepositClaim(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgDepositClaim* request, ::injective::peggy::v1::MsgDepositClaimResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DepositClaim(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgDepositClaim* request, ::injective::peggy::v1::MsgDepositClaimResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void WithdrawClaim(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgWithdrawClaim* request, ::injective::peggy::v1::MsgWithdrawClaimResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void WithdrawClaim(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgWithdrawClaim* request, ::injective::peggy::v1::MsgWithdrawClaimResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ValsetUpdateClaim(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgValsetUpdatedClaim* request, ::injective::peggy::v1::MsgValsetUpdatedClaimResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ValsetUpdateClaim(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgValsetUpdatedClaim* request, ::injective::peggy::v1::MsgValsetUpdatedClaimResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ERC20DeployedClaim(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgERC20DeployedClaim* request, ::injective::peggy::v1::MsgERC20DeployedClaimResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ERC20DeployedClaim(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgERC20DeployedClaim* request, ::injective::peggy::v1::MsgERC20DeployedClaimResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void SetOrchestratorAddresses(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgSetOrchestratorAddresses* request, ::injective::peggy::v1::MsgSetOrchestratorAddressesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetOrchestratorAddresses(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgSetOrchestratorAddresses* request, ::injective::peggy::v1::MsgSetOrchestratorAddressesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void CancelSendToEth(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgCancelSendToEth* request, ::injective::peggy::v1::MsgCancelSendToEthResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CancelSendToEth(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgCancelSendToEth* request, ::injective::peggy::v1::MsgCancelSendToEthResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void SubmitBadSignatureEvidence(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgSubmitBadSignatureEvidence* request, ::injective::peggy::v1::MsgSubmitBadSignatureEvidenceResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SubmitBadSignatureEvidence(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgSubmitBadSignatureEvidence* request, ::injective::peggy::v1::MsgSubmitBadSignatureEvidenceResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void UpdateParams(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgUpdateParams* request, ::injective::peggy::v1::MsgUpdateParamsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateParams(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgUpdateParams* request, ::injective::peggy::v1::MsgUpdateParamsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::MsgValsetConfirmResponse>* AsyncValsetConfirmRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgValsetConfirm& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::MsgValsetConfirmResponse>* PrepareAsyncValsetConfirmRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgValsetConfirm& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::MsgSendToEthResponse>* AsyncSendToEthRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgSendToEth& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::MsgSendToEthResponse>* PrepareAsyncSendToEthRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgSendToEth& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::MsgRequestBatchResponse>* AsyncRequestBatchRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgRequestBatch& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::MsgRequestBatchResponse>* PrepareAsyncRequestBatchRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgRequestBatch& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::MsgConfirmBatchResponse>* AsyncConfirmBatchRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgConfirmBatch& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::MsgConfirmBatchResponse>* PrepareAsyncConfirmBatchRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgConfirmBatch& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::MsgDepositClaimResponse>* AsyncDepositClaimRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgDepositClaim& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::MsgDepositClaimResponse>* PrepareAsyncDepositClaimRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgDepositClaim& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::MsgWithdrawClaimResponse>* AsyncWithdrawClaimRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgWithdrawClaim& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::MsgWithdrawClaimResponse>* PrepareAsyncWithdrawClaimRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgWithdrawClaim& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::MsgValsetUpdatedClaimResponse>* AsyncValsetUpdateClaimRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgValsetUpdatedClaim& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::MsgValsetUpdatedClaimResponse>* PrepareAsyncValsetUpdateClaimRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgValsetUpdatedClaim& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::MsgERC20DeployedClaimResponse>* AsyncERC20DeployedClaimRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgERC20DeployedClaim& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::MsgERC20DeployedClaimResponse>* PrepareAsyncERC20DeployedClaimRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgERC20DeployedClaim& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::MsgSetOrchestratorAddressesResponse>* AsyncSetOrchestratorAddressesRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgSetOrchestratorAddresses& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::MsgSetOrchestratorAddressesResponse>* PrepareAsyncSetOrchestratorAddressesRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgSetOrchestratorAddresses& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::MsgCancelSendToEthResponse>* AsyncCancelSendToEthRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgCancelSendToEth& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::MsgCancelSendToEthResponse>* PrepareAsyncCancelSendToEthRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgCancelSendToEth& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::MsgSubmitBadSignatureEvidenceResponse>* AsyncSubmitBadSignatureEvidenceRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgSubmitBadSignatureEvidence& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::MsgSubmitBadSignatureEvidenceResponse>* PrepareAsyncSubmitBadSignatureEvidenceRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgSubmitBadSignatureEvidence& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::MsgUpdateParamsResponse>* AsyncUpdateParamsRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgUpdateParams& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::peggy::v1::MsgUpdateParamsResponse>* PrepareAsyncUpdateParamsRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgUpdateParams& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status ValsetConfirm(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgValsetConfirm& request, ::injective::peggy::v1::MsgValsetConfirmResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::MsgValsetConfirmResponse>> AsyncValsetConfirm(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgValsetConfirm& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::MsgValsetConfirmResponse>>(AsyncValsetConfirmRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::MsgValsetConfirmResponse>> PrepareAsyncValsetConfirm(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgValsetConfirm& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::MsgValsetConfirmResponse>>(PrepareAsyncValsetConfirmRaw(context, request, cq));
    }
    ::grpc::Status SendToEth(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgSendToEth& request, ::injective::peggy::v1::MsgSendToEthResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::MsgSendToEthResponse>> AsyncSendToEth(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgSendToEth& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::MsgSendToEthResponse>>(AsyncSendToEthRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::MsgSendToEthResponse>> PrepareAsyncSendToEth(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgSendToEth& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::MsgSendToEthResponse>>(PrepareAsyncSendToEthRaw(context, request, cq));
    }
    ::grpc::Status RequestBatch(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgRequestBatch& request, ::injective::peggy::v1::MsgRequestBatchResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::MsgRequestBatchResponse>> AsyncRequestBatch(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgRequestBatch& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::MsgRequestBatchResponse>>(AsyncRequestBatchRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::MsgRequestBatchResponse>> PrepareAsyncRequestBatch(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgRequestBatch& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::MsgRequestBatchResponse>>(PrepareAsyncRequestBatchRaw(context, request, cq));
    }
    ::grpc::Status ConfirmBatch(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgConfirmBatch& request, ::injective::peggy::v1::MsgConfirmBatchResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::MsgConfirmBatchResponse>> AsyncConfirmBatch(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgConfirmBatch& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::MsgConfirmBatchResponse>>(AsyncConfirmBatchRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::MsgConfirmBatchResponse>> PrepareAsyncConfirmBatch(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgConfirmBatch& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::MsgConfirmBatchResponse>>(PrepareAsyncConfirmBatchRaw(context, request, cq));
    }
    ::grpc::Status DepositClaim(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgDepositClaim& request, ::injective::peggy::v1::MsgDepositClaimResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::MsgDepositClaimResponse>> AsyncDepositClaim(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgDepositClaim& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::MsgDepositClaimResponse>>(AsyncDepositClaimRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::MsgDepositClaimResponse>> PrepareAsyncDepositClaim(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgDepositClaim& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::MsgDepositClaimResponse>>(PrepareAsyncDepositClaimRaw(context, request, cq));
    }
    ::grpc::Status WithdrawClaim(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgWithdrawClaim& request, ::injective::peggy::v1::MsgWithdrawClaimResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::MsgWithdrawClaimResponse>> AsyncWithdrawClaim(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgWithdrawClaim& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::MsgWithdrawClaimResponse>>(AsyncWithdrawClaimRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::MsgWithdrawClaimResponse>> PrepareAsyncWithdrawClaim(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgWithdrawClaim& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::MsgWithdrawClaimResponse>>(PrepareAsyncWithdrawClaimRaw(context, request, cq));
    }
    ::grpc::Status ValsetUpdateClaim(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgValsetUpdatedClaim& request, ::injective::peggy::v1::MsgValsetUpdatedClaimResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::MsgValsetUpdatedClaimResponse>> AsyncValsetUpdateClaim(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgValsetUpdatedClaim& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::MsgValsetUpdatedClaimResponse>>(AsyncValsetUpdateClaimRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::MsgValsetUpdatedClaimResponse>> PrepareAsyncValsetUpdateClaim(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgValsetUpdatedClaim& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::MsgValsetUpdatedClaimResponse>>(PrepareAsyncValsetUpdateClaimRaw(context, request, cq));
    }
    ::grpc::Status ERC20DeployedClaim(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgERC20DeployedClaim& request, ::injective::peggy::v1::MsgERC20DeployedClaimResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::MsgERC20DeployedClaimResponse>> AsyncERC20DeployedClaim(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgERC20DeployedClaim& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::MsgERC20DeployedClaimResponse>>(AsyncERC20DeployedClaimRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::MsgERC20DeployedClaimResponse>> PrepareAsyncERC20DeployedClaim(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgERC20DeployedClaim& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::MsgERC20DeployedClaimResponse>>(PrepareAsyncERC20DeployedClaimRaw(context, request, cq));
    }
    ::grpc::Status SetOrchestratorAddresses(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgSetOrchestratorAddresses& request, ::injective::peggy::v1::MsgSetOrchestratorAddressesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::MsgSetOrchestratorAddressesResponse>> AsyncSetOrchestratorAddresses(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgSetOrchestratorAddresses& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::MsgSetOrchestratorAddressesResponse>>(AsyncSetOrchestratorAddressesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::MsgSetOrchestratorAddressesResponse>> PrepareAsyncSetOrchestratorAddresses(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgSetOrchestratorAddresses& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::MsgSetOrchestratorAddressesResponse>>(PrepareAsyncSetOrchestratorAddressesRaw(context, request, cq));
    }
    ::grpc::Status CancelSendToEth(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgCancelSendToEth& request, ::injective::peggy::v1::MsgCancelSendToEthResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::MsgCancelSendToEthResponse>> AsyncCancelSendToEth(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgCancelSendToEth& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::MsgCancelSendToEthResponse>>(AsyncCancelSendToEthRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::MsgCancelSendToEthResponse>> PrepareAsyncCancelSendToEth(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgCancelSendToEth& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::MsgCancelSendToEthResponse>>(PrepareAsyncCancelSendToEthRaw(context, request, cq));
    }
    ::grpc::Status SubmitBadSignatureEvidence(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgSubmitBadSignatureEvidence& request, ::injective::peggy::v1::MsgSubmitBadSignatureEvidenceResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::MsgSubmitBadSignatureEvidenceResponse>> AsyncSubmitBadSignatureEvidence(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgSubmitBadSignatureEvidence& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::MsgSubmitBadSignatureEvidenceResponse>>(AsyncSubmitBadSignatureEvidenceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::MsgSubmitBadSignatureEvidenceResponse>> PrepareAsyncSubmitBadSignatureEvidence(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgSubmitBadSignatureEvidence& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::MsgSubmitBadSignatureEvidenceResponse>>(PrepareAsyncSubmitBadSignatureEvidenceRaw(context, request, cq));
    }
    ::grpc::Status UpdateParams(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgUpdateParams& request, ::injective::peggy::v1::MsgUpdateParamsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::MsgUpdateParamsResponse>> AsyncUpdateParams(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgUpdateParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::MsgUpdateParamsResponse>>(AsyncUpdateParamsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::MsgUpdateParamsResponse>> PrepareAsyncUpdateParams(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgUpdateParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::MsgUpdateParamsResponse>>(PrepareAsyncUpdateParamsRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void ValsetConfirm(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgValsetConfirm* request, ::injective::peggy::v1::MsgValsetConfirmResponse* response, std::function<void(::grpc::Status)>) override;
      void ValsetConfirm(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgValsetConfirm* request, ::injective::peggy::v1::MsgValsetConfirmResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SendToEth(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgSendToEth* request, ::injective::peggy::v1::MsgSendToEthResponse* response, std::function<void(::grpc::Status)>) override;
      void SendToEth(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgSendToEth* request, ::injective::peggy::v1::MsgSendToEthResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void RequestBatch(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgRequestBatch* request, ::injective::peggy::v1::MsgRequestBatchResponse* response, std::function<void(::grpc::Status)>) override;
      void RequestBatch(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgRequestBatch* request, ::injective::peggy::v1::MsgRequestBatchResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ConfirmBatch(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgConfirmBatch* request, ::injective::peggy::v1::MsgConfirmBatchResponse* response, std::function<void(::grpc::Status)>) override;
      void ConfirmBatch(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgConfirmBatch* request, ::injective::peggy::v1::MsgConfirmBatchResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DepositClaim(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgDepositClaim* request, ::injective::peggy::v1::MsgDepositClaimResponse* response, std::function<void(::grpc::Status)>) override;
      void DepositClaim(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgDepositClaim* request, ::injective::peggy::v1::MsgDepositClaimResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void WithdrawClaim(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgWithdrawClaim* request, ::injective::peggy::v1::MsgWithdrawClaimResponse* response, std::function<void(::grpc::Status)>) override;
      void WithdrawClaim(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgWithdrawClaim* request, ::injective::peggy::v1::MsgWithdrawClaimResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ValsetUpdateClaim(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgValsetUpdatedClaim* request, ::injective::peggy::v1::MsgValsetUpdatedClaimResponse* response, std::function<void(::grpc::Status)>) override;
      void ValsetUpdateClaim(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgValsetUpdatedClaim* request, ::injective::peggy::v1::MsgValsetUpdatedClaimResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ERC20DeployedClaim(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgERC20DeployedClaim* request, ::injective::peggy::v1::MsgERC20DeployedClaimResponse* response, std::function<void(::grpc::Status)>) override;
      void ERC20DeployedClaim(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgERC20DeployedClaim* request, ::injective::peggy::v1::MsgERC20DeployedClaimResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SetOrchestratorAddresses(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgSetOrchestratorAddresses* request, ::injective::peggy::v1::MsgSetOrchestratorAddressesResponse* response, std::function<void(::grpc::Status)>) override;
      void SetOrchestratorAddresses(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgSetOrchestratorAddresses* request, ::injective::peggy::v1::MsgSetOrchestratorAddressesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CancelSendToEth(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgCancelSendToEth* request, ::injective::peggy::v1::MsgCancelSendToEthResponse* response, std::function<void(::grpc::Status)>) override;
      void CancelSendToEth(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgCancelSendToEth* request, ::injective::peggy::v1::MsgCancelSendToEthResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SubmitBadSignatureEvidence(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgSubmitBadSignatureEvidence* request, ::injective::peggy::v1::MsgSubmitBadSignatureEvidenceResponse* response, std::function<void(::grpc::Status)>) override;
      void SubmitBadSignatureEvidence(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgSubmitBadSignatureEvidence* request, ::injective::peggy::v1::MsgSubmitBadSignatureEvidenceResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UpdateParams(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgUpdateParams* request, ::injective::peggy::v1::MsgUpdateParamsResponse* response, std::function<void(::grpc::Status)>) override;
      void UpdateParams(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgUpdateParams* request, ::injective::peggy::v1::MsgUpdateParamsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::MsgValsetConfirmResponse>* AsyncValsetConfirmRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgValsetConfirm& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::MsgValsetConfirmResponse>* PrepareAsyncValsetConfirmRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgValsetConfirm& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::MsgSendToEthResponse>* AsyncSendToEthRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgSendToEth& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::MsgSendToEthResponse>* PrepareAsyncSendToEthRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgSendToEth& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::MsgRequestBatchResponse>* AsyncRequestBatchRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgRequestBatch& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::MsgRequestBatchResponse>* PrepareAsyncRequestBatchRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgRequestBatch& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::MsgConfirmBatchResponse>* AsyncConfirmBatchRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgConfirmBatch& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::MsgConfirmBatchResponse>* PrepareAsyncConfirmBatchRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgConfirmBatch& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::MsgDepositClaimResponse>* AsyncDepositClaimRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgDepositClaim& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::MsgDepositClaimResponse>* PrepareAsyncDepositClaimRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgDepositClaim& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::MsgWithdrawClaimResponse>* AsyncWithdrawClaimRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgWithdrawClaim& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::MsgWithdrawClaimResponse>* PrepareAsyncWithdrawClaimRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgWithdrawClaim& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::MsgValsetUpdatedClaimResponse>* AsyncValsetUpdateClaimRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgValsetUpdatedClaim& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::MsgValsetUpdatedClaimResponse>* PrepareAsyncValsetUpdateClaimRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgValsetUpdatedClaim& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::MsgERC20DeployedClaimResponse>* AsyncERC20DeployedClaimRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgERC20DeployedClaim& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::MsgERC20DeployedClaimResponse>* PrepareAsyncERC20DeployedClaimRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgERC20DeployedClaim& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::MsgSetOrchestratorAddressesResponse>* AsyncSetOrchestratorAddressesRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgSetOrchestratorAddresses& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::MsgSetOrchestratorAddressesResponse>* PrepareAsyncSetOrchestratorAddressesRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgSetOrchestratorAddresses& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::MsgCancelSendToEthResponse>* AsyncCancelSendToEthRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgCancelSendToEth& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::MsgCancelSendToEthResponse>* PrepareAsyncCancelSendToEthRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgCancelSendToEth& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::MsgSubmitBadSignatureEvidenceResponse>* AsyncSubmitBadSignatureEvidenceRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgSubmitBadSignatureEvidence& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::MsgSubmitBadSignatureEvidenceResponse>* PrepareAsyncSubmitBadSignatureEvidenceRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgSubmitBadSignatureEvidence& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::MsgUpdateParamsResponse>* AsyncUpdateParamsRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgUpdateParams& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::peggy::v1::MsgUpdateParamsResponse>* PrepareAsyncUpdateParamsRaw(::grpc::ClientContext* context, const ::injective::peggy::v1::MsgUpdateParams& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_ValsetConfirm_;
    const ::grpc::internal::RpcMethod rpcmethod_SendToEth_;
    const ::grpc::internal::RpcMethod rpcmethod_RequestBatch_;
    const ::grpc::internal::RpcMethod rpcmethod_ConfirmBatch_;
    const ::grpc::internal::RpcMethod rpcmethod_DepositClaim_;
    const ::grpc::internal::RpcMethod rpcmethod_WithdrawClaim_;
    const ::grpc::internal::RpcMethod rpcmethod_ValsetUpdateClaim_;
    const ::grpc::internal::RpcMethod rpcmethod_ERC20DeployedClaim_;
    const ::grpc::internal::RpcMethod rpcmethod_SetOrchestratorAddresses_;
    const ::grpc::internal::RpcMethod rpcmethod_CancelSendToEth_;
    const ::grpc::internal::RpcMethod rpcmethod_SubmitBadSignatureEvidence_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateParams_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status ValsetConfirm(::grpc::ServerContext* context, const ::injective::peggy::v1::MsgValsetConfirm* request, ::injective::peggy::v1::MsgValsetConfirmResponse* response);
    virtual ::grpc::Status SendToEth(::grpc::ServerContext* context, const ::injective::peggy::v1::MsgSendToEth* request, ::injective::peggy::v1::MsgSendToEthResponse* response);
    virtual ::grpc::Status RequestBatch(::grpc::ServerContext* context, const ::injective::peggy::v1::MsgRequestBatch* request, ::injective::peggy::v1::MsgRequestBatchResponse* response);
    virtual ::grpc::Status ConfirmBatch(::grpc::ServerContext* context, const ::injective::peggy::v1::MsgConfirmBatch* request, ::injective::peggy::v1::MsgConfirmBatchResponse* response);
    virtual ::grpc::Status DepositClaim(::grpc::ServerContext* context, const ::injective::peggy::v1::MsgDepositClaim* request, ::injective::peggy::v1::MsgDepositClaimResponse* response);
    virtual ::grpc::Status WithdrawClaim(::grpc::ServerContext* context, const ::injective::peggy::v1::MsgWithdrawClaim* request, ::injective::peggy::v1::MsgWithdrawClaimResponse* response);
    virtual ::grpc::Status ValsetUpdateClaim(::grpc::ServerContext* context, const ::injective::peggy::v1::MsgValsetUpdatedClaim* request, ::injective::peggy::v1::MsgValsetUpdatedClaimResponse* response);
    virtual ::grpc::Status ERC20DeployedClaim(::grpc::ServerContext* context, const ::injective::peggy::v1::MsgERC20DeployedClaim* request, ::injective::peggy::v1::MsgERC20DeployedClaimResponse* response);
    virtual ::grpc::Status SetOrchestratorAddresses(::grpc::ServerContext* context, const ::injective::peggy::v1::MsgSetOrchestratorAddresses* request, ::injective::peggy::v1::MsgSetOrchestratorAddressesResponse* response);
    virtual ::grpc::Status CancelSendToEth(::grpc::ServerContext* context, const ::injective::peggy::v1::MsgCancelSendToEth* request, ::injective::peggy::v1::MsgCancelSendToEthResponse* response);
    virtual ::grpc::Status SubmitBadSignatureEvidence(::grpc::ServerContext* context, const ::injective::peggy::v1::MsgSubmitBadSignatureEvidence* request, ::injective::peggy::v1::MsgSubmitBadSignatureEvidenceResponse* response);
    virtual ::grpc::Status UpdateParams(::grpc::ServerContext* context, const ::injective::peggy::v1::MsgUpdateParams* request, ::injective::peggy::v1::MsgUpdateParamsResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_ValsetConfirm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ValsetConfirm() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_ValsetConfirm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValsetConfirm(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::MsgValsetConfirm* /*request*/, ::injective::peggy::v1::MsgValsetConfirmResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestValsetConfirm(::grpc::ServerContext* context, ::injective::peggy::v1::MsgValsetConfirm* request, ::grpc::ServerAsyncResponseWriter< ::injective::peggy::v1::MsgValsetConfirmResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SendToEth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SendToEth() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_SendToEth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendToEth(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::MsgSendToEth* /*request*/, ::injective::peggy::v1::MsgSendToEthResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendToEth(::grpc::ServerContext* context, ::injective::peggy::v1::MsgSendToEth* request, ::grpc::ServerAsyncResponseWriter< ::injective::peggy::v1::MsgSendToEthResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RequestBatch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RequestBatch() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_RequestBatch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestBatch(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::MsgRequestBatch* /*request*/, ::injective::peggy::v1::MsgRequestBatchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRequestBatch(::grpc::ServerContext* context, ::injective::peggy::v1::MsgRequestBatch* request, ::grpc::ServerAsyncResponseWriter< ::injective::peggy::v1::MsgRequestBatchResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ConfirmBatch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ConfirmBatch() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_ConfirmBatch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConfirmBatch(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::MsgConfirmBatch* /*request*/, ::injective::peggy::v1::MsgConfirmBatchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestConfirmBatch(::grpc::ServerContext* context, ::injective::peggy::v1::MsgConfirmBatch* request, ::grpc::ServerAsyncResponseWriter< ::injective::peggy::v1::MsgConfirmBatchResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DepositClaim : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DepositClaim() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_DepositClaim() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DepositClaim(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::MsgDepositClaim* /*request*/, ::injective::peggy::v1::MsgDepositClaimResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDepositClaim(::grpc::ServerContext* context, ::injective::peggy::v1::MsgDepositClaim* request, ::grpc::ServerAsyncResponseWriter< ::injective::peggy::v1::MsgDepositClaimResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_WithdrawClaim : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_WithdrawClaim() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_WithdrawClaim() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WithdrawClaim(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::MsgWithdrawClaim* /*request*/, ::injective::peggy::v1::MsgWithdrawClaimResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestWithdrawClaim(::grpc::ServerContext* context, ::injective::peggy::v1::MsgWithdrawClaim* request, ::grpc::ServerAsyncResponseWriter< ::injective::peggy::v1::MsgWithdrawClaimResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ValsetUpdateClaim : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ValsetUpdateClaim() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_ValsetUpdateClaim() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValsetUpdateClaim(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::MsgValsetUpdatedClaim* /*request*/, ::injective::peggy::v1::MsgValsetUpdatedClaimResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestValsetUpdateClaim(::grpc::ServerContext* context, ::injective::peggy::v1::MsgValsetUpdatedClaim* request, ::grpc::ServerAsyncResponseWriter< ::injective::peggy::v1::MsgValsetUpdatedClaimResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ERC20DeployedClaim : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ERC20DeployedClaim() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_ERC20DeployedClaim() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ERC20DeployedClaim(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::MsgERC20DeployedClaim* /*request*/, ::injective::peggy::v1::MsgERC20DeployedClaimResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestERC20DeployedClaim(::grpc::ServerContext* context, ::injective::peggy::v1::MsgERC20DeployedClaim* request, ::grpc::ServerAsyncResponseWriter< ::injective::peggy::v1::MsgERC20DeployedClaimResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetOrchestratorAddresses : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetOrchestratorAddresses() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_SetOrchestratorAddresses() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetOrchestratorAddresses(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::MsgSetOrchestratorAddresses* /*request*/, ::injective::peggy::v1::MsgSetOrchestratorAddressesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetOrchestratorAddresses(::grpc::ServerContext* context, ::injective::peggy::v1::MsgSetOrchestratorAddresses* request, ::grpc::ServerAsyncResponseWriter< ::injective::peggy::v1::MsgSetOrchestratorAddressesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CancelSendToEth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CancelSendToEth() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_CancelSendToEth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CancelSendToEth(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::MsgCancelSendToEth* /*request*/, ::injective::peggy::v1::MsgCancelSendToEthResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCancelSendToEth(::grpc::ServerContext* context, ::injective::peggy::v1::MsgCancelSendToEth* request, ::grpc::ServerAsyncResponseWriter< ::injective::peggy::v1::MsgCancelSendToEthResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SubmitBadSignatureEvidence : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SubmitBadSignatureEvidence() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_SubmitBadSignatureEvidence() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitBadSignatureEvidence(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::MsgSubmitBadSignatureEvidence* /*request*/, ::injective::peggy::v1::MsgSubmitBadSignatureEvidenceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubmitBadSignatureEvidence(::grpc::ServerContext* context, ::injective::peggy::v1::MsgSubmitBadSignatureEvidence* request, ::grpc::ServerAsyncResponseWriter< ::injective::peggy::v1::MsgSubmitBadSignatureEvidenceResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateParams : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateParams() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_UpdateParams() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateParams(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::MsgUpdateParams* /*request*/, ::injective::peggy::v1::MsgUpdateParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateParams(::grpc::ServerContext* context, ::injective::peggy::v1::MsgUpdateParams* request, ::grpc::ServerAsyncResponseWriter< ::injective::peggy::v1::MsgUpdateParamsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_ValsetConfirm<WithAsyncMethod_SendToEth<WithAsyncMethod_RequestBatch<WithAsyncMethod_ConfirmBatch<WithAsyncMethod_DepositClaim<WithAsyncMethod_WithdrawClaim<WithAsyncMethod_ValsetUpdateClaim<WithAsyncMethod_ERC20DeployedClaim<WithAsyncMethod_SetOrchestratorAddresses<WithAsyncMethod_CancelSendToEth<WithAsyncMethod_SubmitBadSignatureEvidence<WithAsyncMethod_UpdateParams<Service > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_ValsetConfirm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ValsetConfirm() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::injective::peggy::v1::MsgValsetConfirm, ::injective::peggy::v1::MsgValsetConfirmResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::injective::peggy::v1::MsgValsetConfirm* request, ::injective::peggy::v1::MsgValsetConfirmResponse* response) { return this->ValsetConfirm(context, request, response); }));}
    void SetMessageAllocatorFor_ValsetConfirm(
        ::grpc::MessageAllocator< ::injective::peggy::v1::MsgValsetConfirm, ::injective::peggy::v1::MsgValsetConfirmResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::injective::peggy::v1::MsgValsetConfirm, ::injective::peggy::v1::MsgValsetConfirmResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ValsetConfirm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValsetConfirm(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::MsgValsetConfirm* /*request*/, ::injective::peggy::v1::MsgValsetConfirmResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ValsetConfirm(
      ::grpc::CallbackServerContext* /*context*/, const ::injective::peggy::v1::MsgValsetConfirm* /*request*/, ::injective::peggy::v1::MsgValsetConfirmResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SendToEth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SendToEth() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::injective::peggy::v1::MsgSendToEth, ::injective::peggy::v1::MsgSendToEthResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::injective::peggy::v1::MsgSendToEth* request, ::injective::peggy::v1::MsgSendToEthResponse* response) { return this->SendToEth(context, request, response); }));}
    void SetMessageAllocatorFor_SendToEth(
        ::grpc::MessageAllocator< ::injective::peggy::v1::MsgSendToEth, ::injective::peggy::v1::MsgSendToEthResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::injective::peggy::v1::MsgSendToEth, ::injective::peggy::v1::MsgSendToEthResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SendToEth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendToEth(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::MsgSendToEth* /*request*/, ::injective::peggy::v1::MsgSendToEthResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SendToEth(
      ::grpc::CallbackServerContext* /*context*/, const ::injective::peggy::v1::MsgSendToEth* /*request*/, ::injective::peggy::v1::MsgSendToEthResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_RequestBatch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RequestBatch() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::injective::peggy::v1::MsgRequestBatch, ::injective::peggy::v1::MsgRequestBatchResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::injective::peggy::v1::MsgRequestBatch* request, ::injective::peggy::v1::MsgRequestBatchResponse* response) { return this->RequestBatch(context, request, response); }));}
    void SetMessageAllocatorFor_RequestBatch(
        ::grpc::MessageAllocator< ::injective::peggy::v1::MsgRequestBatch, ::injective::peggy::v1::MsgRequestBatchResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::injective::peggy::v1::MsgRequestBatch, ::injective::peggy::v1::MsgRequestBatchResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RequestBatch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestBatch(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::MsgRequestBatch* /*request*/, ::injective::peggy::v1::MsgRequestBatchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RequestBatch(
      ::grpc::CallbackServerContext* /*context*/, const ::injective::peggy::v1::MsgRequestBatch* /*request*/, ::injective::peggy::v1::MsgRequestBatchResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ConfirmBatch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ConfirmBatch() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::injective::peggy::v1::MsgConfirmBatch, ::injective::peggy::v1::MsgConfirmBatchResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::injective::peggy::v1::MsgConfirmBatch* request, ::injective::peggy::v1::MsgConfirmBatchResponse* response) { return this->ConfirmBatch(context, request, response); }));}
    void SetMessageAllocatorFor_ConfirmBatch(
        ::grpc::MessageAllocator< ::injective::peggy::v1::MsgConfirmBatch, ::injective::peggy::v1::MsgConfirmBatchResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::injective::peggy::v1::MsgConfirmBatch, ::injective::peggy::v1::MsgConfirmBatchResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ConfirmBatch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConfirmBatch(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::MsgConfirmBatch* /*request*/, ::injective::peggy::v1::MsgConfirmBatchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ConfirmBatch(
      ::grpc::CallbackServerContext* /*context*/, const ::injective::peggy::v1::MsgConfirmBatch* /*request*/, ::injective::peggy::v1::MsgConfirmBatchResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DepositClaim : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DepositClaim() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::injective::peggy::v1::MsgDepositClaim, ::injective::peggy::v1::MsgDepositClaimResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::injective::peggy::v1::MsgDepositClaim* request, ::injective::peggy::v1::MsgDepositClaimResponse* response) { return this->DepositClaim(context, request, response); }));}
    void SetMessageAllocatorFor_DepositClaim(
        ::grpc::MessageAllocator< ::injective::peggy::v1::MsgDepositClaim, ::injective::peggy::v1::MsgDepositClaimResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::injective::peggy::v1::MsgDepositClaim, ::injective::peggy::v1::MsgDepositClaimResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DepositClaim() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DepositClaim(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::MsgDepositClaim* /*request*/, ::injective::peggy::v1::MsgDepositClaimResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DepositClaim(
      ::grpc::CallbackServerContext* /*context*/, const ::injective::peggy::v1::MsgDepositClaim* /*request*/, ::injective::peggy::v1::MsgDepositClaimResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_WithdrawClaim : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_WithdrawClaim() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::injective::peggy::v1::MsgWithdrawClaim, ::injective::peggy::v1::MsgWithdrawClaimResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::injective::peggy::v1::MsgWithdrawClaim* request, ::injective::peggy::v1::MsgWithdrawClaimResponse* response) { return this->WithdrawClaim(context, request, response); }));}
    void SetMessageAllocatorFor_WithdrawClaim(
        ::grpc::MessageAllocator< ::injective::peggy::v1::MsgWithdrawClaim, ::injective::peggy::v1::MsgWithdrawClaimResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::injective::peggy::v1::MsgWithdrawClaim, ::injective::peggy::v1::MsgWithdrawClaimResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_WithdrawClaim() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WithdrawClaim(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::MsgWithdrawClaim* /*request*/, ::injective::peggy::v1::MsgWithdrawClaimResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* WithdrawClaim(
      ::grpc::CallbackServerContext* /*context*/, const ::injective::peggy::v1::MsgWithdrawClaim* /*request*/, ::injective::peggy::v1::MsgWithdrawClaimResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ValsetUpdateClaim : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ValsetUpdateClaim() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::injective::peggy::v1::MsgValsetUpdatedClaim, ::injective::peggy::v1::MsgValsetUpdatedClaimResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::injective::peggy::v1::MsgValsetUpdatedClaim* request, ::injective::peggy::v1::MsgValsetUpdatedClaimResponse* response) { return this->ValsetUpdateClaim(context, request, response); }));}
    void SetMessageAllocatorFor_ValsetUpdateClaim(
        ::grpc::MessageAllocator< ::injective::peggy::v1::MsgValsetUpdatedClaim, ::injective::peggy::v1::MsgValsetUpdatedClaimResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::injective::peggy::v1::MsgValsetUpdatedClaim, ::injective::peggy::v1::MsgValsetUpdatedClaimResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ValsetUpdateClaim() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValsetUpdateClaim(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::MsgValsetUpdatedClaim* /*request*/, ::injective::peggy::v1::MsgValsetUpdatedClaimResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ValsetUpdateClaim(
      ::grpc::CallbackServerContext* /*context*/, const ::injective::peggy::v1::MsgValsetUpdatedClaim* /*request*/, ::injective::peggy::v1::MsgValsetUpdatedClaimResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ERC20DeployedClaim : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ERC20DeployedClaim() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::injective::peggy::v1::MsgERC20DeployedClaim, ::injective::peggy::v1::MsgERC20DeployedClaimResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::injective::peggy::v1::MsgERC20DeployedClaim* request, ::injective::peggy::v1::MsgERC20DeployedClaimResponse* response) { return this->ERC20DeployedClaim(context, request, response); }));}
    void SetMessageAllocatorFor_ERC20DeployedClaim(
        ::grpc::MessageAllocator< ::injective::peggy::v1::MsgERC20DeployedClaim, ::injective::peggy::v1::MsgERC20DeployedClaimResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::injective::peggy::v1::MsgERC20DeployedClaim, ::injective::peggy::v1::MsgERC20DeployedClaimResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ERC20DeployedClaim() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ERC20DeployedClaim(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::MsgERC20DeployedClaim* /*request*/, ::injective::peggy::v1::MsgERC20DeployedClaimResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ERC20DeployedClaim(
      ::grpc::CallbackServerContext* /*context*/, const ::injective::peggy::v1::MsgERC20DeployedClaim* /*request*/, ::injective::peggy::v1::MsgERC20DeployedClaimResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SetOrchestratorAddresses : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SetOrchestratorAddresses() {
      ::grpc::Service::MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::injective::peggy::v1::MsgSetOrchestratorAddresses, ::injective::peggy::v1::MsgSetOrchestratorAddressesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::injective::peggy::v1::MsgSetOrchestratorAddresses* request, ::injective::peggy::v1::MsgSetOrchestratorAddressesResponse* response) { return this->SetOrchestratorAddresses(context, request, response); }));}
    void SetMessageAllocatorFor_SetOrchestratorAddresses(
        ::grpc::MessageAllocator< ::injective::peggy::v1::MsgSetOrchestratorAddresses, ::injective::peggy::v1::MsgSetOrchestratorAddressesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::injective::peggy::v1::MsgSetOrchestratorAddresses, ::injective::peggy::v1::MsgSetOrchestratorAddressesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SetOrchestratorAddresses() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetOrchestratorAddresses(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::MsgSetOrchestratorAddresses* /*request*/, ::injective::peggy::v1::MsgSetOrchestratorAddressesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetOrchestratorAddresses(
      ::grpc::CallbackServerContext* /*context*/, const ::injective::peggy::v1::MsgSetOrchestratorAddresses* /*request*/, ::injective::peggy::v1::MsgSetOrchestratorAddressesResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CancelSendToEth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CancelSendToEth() {
      ::grpc::Service::MarkMethodCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::injective::peggy::v1::MsgCancelSendToEth, ::injective::peggy::v1::MsgCancelSendToEthResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::injective::peggy::v1::MsgCancelSendToEth* request, ::injective::peggy::v1::MsgCancelSendToEthResponse* response) { return this->CancelSendToEth(context, request, response); }));}
    void SetMessageAllocatorFor_CancelSendToEth(
        ::grpc::MessageAllocator< ::injective::peggy::v1::MsgCancelSendToEth, ::injective::peggy::v1::MsgCancelSendToEthResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(9);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::injective::peggy::v1::MsgCancelSendToEth, ::injective::peggy::v1::MsgCancelSendToEthResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CancelSendToEth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CancelSendToEth(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::MsgCancelSendToEth* /*request*/, ::injective::peggy::v1::MsgCancelSendToEthResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CancelSendToEth(
      ::grpc::CallbackServerContext* /*context*/, const ::injective::peggy::v1::MsgCancelSendToEth* /*request*/, ::injective::peggy::v1::MsgCancelSendToEthResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SubmitBadSignatureEvidence : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SubmitBadSignatureEvidence() {
      ::grpc::Service::MarkMethodCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::injective::peggy::v1::MsgSubmitBadSignatureEvidence, ::injective::peggy::v1::MsgSubmitBadSignatureEvidenceResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::injective::peggy::v1::MsgSubmitBadSignatureEvidence* request, ::injective::peggy::v1::MsgSubmitBadSignatureEvidenceResponse* response) { return this->SubmitBadSignatureEvidence(context, request, response); }));}
    void SetMessageAllocatorFor_SubmitBadSignatureEvidence(
        ::grpc::MessageAllocator< ::injective::peggy::v1::MsgSubmitBadSignatureEvidence, ::injective::peggy::v1::MsgSubmitBadSignatureEvidenceResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(10);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::injective::peggy::v1::MsgSubmitBadSignatureEvidence, ::injective::peggy::v1::MsgSubmitBadSignatureEvidenceResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SubmitBadSignatureEvidence() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitBadSignatureEvidence(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::MsgSubmitBadSignatureEvidence* /*request*/, ::injective::peggy::v1::MsgSubmitBadSignatureEvidenceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SubmitBadSignatureEvidence(
      ::grpc::CallbackServerContext* /*context*/, const ::injective::peggy::v1::MsgSubmitBadSignatureEvidence* /*request*/, ::injective::peggy::v1::MsgSubmitBadSignatureEvidenceResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdateParams : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdateParams() {
      ::grpc::Service::MarkMethodCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::injective::peggy::v1::MsgUpdateParams, ::injective::peggy::v1::MsgUpdateParamsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::injective::peggy::v1::MsgUpdateParams* request, ::injective::peggy::v1::MsgUpdateParamsResponse* response) { return this->UpdateParams(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateParams(
        ::grpc::MessageAllocator< ::injective::peggy::v1::MsgUpdateParams, ::injective::peggy::v1::MsgUpdateParamsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(11);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::injective::peggy::v1::MsgUpdateParams, ::injective::peggy::v1::MsgUpdateParamsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdateParams() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateParams(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::MsgUpdateParams* /*request*/, ::injective::peggy::v1::MsgUpdateParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateParams(
      ::grpc::CallbackServerContext* /*context*/, const ::injective::peggy::v1::MsgUpdateParams* /*request*/, ::injective::peggy::v1::MsgUpdateParamsResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_ValsetConfirm<WithCallbackMethod_SendToEth<WithCallbackMethod_RequestBatch<WithCallbackMethod_ConfirmBatch<WithCallbackMethod_DepositClaim<WithCallbackMethod_WithdrawClaim<WithCallbackMethod_ValsetUpdateClaim<WithCallbackMethod_ERC20DeployedClaim<WithCallbackMethod_SetOrchestratorAddresses<WithCallbackMethod_CancelSendToEth<WithCallbackMethod_SubmitBadSignatureEvidence<WithCallbackMethod_UpdateParams<Service > > > > > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_ValsetConfirm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ValsetConfirm() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_ValsetConfirm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValsetConfirm(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::MsgValsetConfirm* /*request*/, ::injective::peggy::v1::MsgValsetConfirmResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SendToEth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SendToEth() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_SendToEth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendToEth(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::MsgSendToEth* /*request*/, ::injective::peggy::v1::MsgSendToEthResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RequestBatch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RequestBatch() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_RequestBatch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestBatch(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::MsgRequestBatch* /*request*/, ::injective::peggy::v1::MsgRequestBatchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ConfirmBatch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ConfirmBatch() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_ConfirmBatch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConfirmBatch(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::MsgConfirmBatch* /*request*/, ::injective::peggy::v1::MsgConfirmBatchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DepositClaim : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DepositClaim() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_DepositClaim() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DepositClaim(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::MsgDepositClaim* /*request*/, ::injective::peggy::v1::MsgDepositClaimResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_WithdrawClaim : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_WithdrawClaim() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_WithdrawClaim() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WithdrawClaim(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::MsgWithdrawClaim* /*request*/, ::injective::peggy::v1::MsgWithdrawClaimResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ValsetUpdateClaim : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ValsetUpdateClaim() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_ValsetUpdateClaim() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValsetUpdateClaim(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::MsgValsetUpdatedClaim* /*request*/, ::injective::peggy::v1::MsgValsetUpdatedClaimResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ERC20DeployedClaim : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ERC20DeployedClaim() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_ERC20DeployedClaim() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ERC20DeployedClaim(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::MsgERC20DeployedClaim* /*request*/, ::injective::peggy::v1::MsgERC20DeployedClaimResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetOrchestratorAddresses : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetOrchestratorAddresses() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_SetOrchestratorAddresses() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetOrchestratorAddresses(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::MsgSetOrchestratorAddresses* /*request*/, ::injective::peggy::v1::MsgSetOrchestratorAddressesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CancelSendToEth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CancelSendToEth() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_CancelSendToEth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CancelSendToEth(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::MsgCancelSendToEth* /*request*/, ::injective::peggy::v1::MsgCancelSendToEthResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SubmitBadSignatureEvidence : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SubmitBadSignatureEvidence() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_SubmitBadSignatureEvidence() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitBadSignatureEvidence(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::MsgSubmitBadSignatureEvidence* /*request*/, ::injective::peggy::v1::MsgSubmitBadSignatureEvidenceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateParams : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateParams() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_UpdateParams() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateParams(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::MsgUpdateParams* /*request*/, ::injective::peggy::v1::MsgUpdateParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_ValsetConfirm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ValsetConfirm() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_ValsetConfirm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValsetConfirm(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::MsgValsetConfirm* /*request*/, ::injective::peggy::v1::MsgValsetConfirmResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestValsetConfirm(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SendToEth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SendToEth() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_SendToEth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendToEth(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::MsgSendToEth* /*request*/, ::injective::peggy::v1::MsgSendToEthResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendToEth(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RequestBatch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RequestBatch() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_RequestBatch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestBatch(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::MsgRequestBatch* /*request*/, ::injective::peggy::v1::MsgRequestBatchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRequestBatch(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ConfirmBatch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ConfirmBatch() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_ConfirmBatch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConfirmBatch(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::MsgConfirmBatch* /*request*/, ::injective::peggy::v1::MsgConfirmBatchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestConfirmBatch(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DepositClaim : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DepositClaim() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_DepositClaim() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DepositClaim(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::MsgDepositClaim* /*request*/, ::injective::peggy::v1::MsgDepositClaimResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDepositClaim(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_WithdrawClaim : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_WithdrawClaim() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_WithdrawClaim() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WithdrawClaim(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::MsgWithdrawClaim* /*request*/, ::injective::peggy::v1::MsgWithdrawClaimResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestWithdrawClaim(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ValsetUpdateClaim : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ValsetUpdateClaim() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_ValsetUpdateClaim() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValsetUpdateClaim(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::MsgValsetUpdatedClaim* /*request*/, ::injective::peggy::v1::MsgValsetUpdatedClaimResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestValsetUpdateClaim(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ERC20DeployedClaim : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ERC20DeployedClaim() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_ERC20DeployedClaim() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ERC20DeployedClaim(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::MsgERC20DeployedClaim* /*request*/, ::injective::peggy::v1::MsgERC20DeployedClaimResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestERC20DeployedClaim(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetOrchestratorAddresses : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetOrchestratorAddresses() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_SetOrchestratorAddresses() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetOrchestratorAddresses(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::MsgSetOrchestratorAddresses* /*request*/, ::injective::peggy::v1::MsgSetOrchestratorAddressesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetOrchestratorAddresses(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CancelSendToEth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CancelSendToEth() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_CancelSendToEth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CancelSendToEth(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::MsgCancelSendToEth* /*request*/, ::injective::peggy::v1::MsgCancelSendToEthResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCancelSendToEth(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SubmitBadSignatureEvidence : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SubmitBadSignatureEvidence() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_SubmitBadSignatureEvidence() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitBadSignatureEvidence(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::MsgSubmitBadSignatureEvidence* /*request*/, ::injective::peggy::v1::MsgSubmitBadSignatureEvidenceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubmitBadSignatureEvidence(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateParams : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateParams() {
      ::grpc::Service::MarkMethodRaw(11);
    }
    ~WithRawMethod_UpdateParams() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateParams(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::MsgUpdateParams* /*request*/, ::injective::peggy::v1::MsgUpdateParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateParams(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ValsetConfirm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ValsetConfirm() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ValsetConfirm(context, request, response); }));
    }
    ~WithRawCallbackMethod_ValsetConfirm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValsetConfirm(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::MsgValsetConfirm* /*request*/, ::injective::peggy::v1::MsgValsetConfirmResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ValsetConfirm(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SendToEth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SendToEth() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SendToEth(context, request, response); }));
    }
    ~WithRawCallbackMethod_SendToEth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendToEth(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::MsgSendToEth* /*request*/, ::injective::peggy::v1::MsgSendToEthResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SendToEth(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RequestBatch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RequestBatch() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RequestBatch(context, request, response); }));
    }
    ~WithRawCallbackMethod_RequestBatch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestBatch(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::MsgRequestBatch* /*request*/, ::injective::peggy::v1::MsgRequestBatchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RequestBatch(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ConfirmBatch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ConfirmBatch() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ConfirmBatch(context, request, response); }));
    }
    ~WithRawCallbackMethod_ConfirmBatch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConfirmBatch(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::MsgConfirmBatch* /*request*/, ::injective::peggy::v1::MsgConfirmBatchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ConfirmBatch(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DepositClaim : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DepositClaim() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DepositClaim(context, request, response); }));
    }
    ~WithRawCallbackMethod_DepositClaim() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DepositClaim(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::MsgDepositClaim* /*request*/, ::injective::peggy::v1::MsgDepositClaimResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DepositClaim(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_WithdrawClaim : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_WithdrawClaim() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->WithdrawClaim(context, request, response); }));
    }
    ~WithRawCallbackMethod_WithdrawClaim() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WithdrawClaim(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::MsgWithdrawClaim* /*request*/, ::injective::peggy::v1::MsgWithdrawClaimResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* WithdrawClaim(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ValsetUpdateClaim : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ValsetUpdateClaim() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ValsetUpdateClaim(context, request, response); }));
    }
    ~WithRawCallbackMethod_ValsetUpdateClaim() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValsetUpdateClaim(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::MsgValsetUpdatedClaim* /*request*/, ::injective::peggy::v1::MsgValsetUpdatedClaimResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ValsetUpdateClaim(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ERC20DeployedClaim : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ERC20DeployedClaim() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ERC20DeployedClaim(context, request, response); }));
    }
    ~WithRawCallbackMethod_ERC20DeployedClaim() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ERC20DeployedClaim(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::MsgERC20DeployedClaim* /*request*/, ::injective::peggy::v1::MsgERC20DeployedClaimResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ERC20DeployedClaim(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SetOrchestratorAddresses : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SetOrchestratorAddresses() {
      ::grpc::Service::MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetOrchestratorAddresses(context, request, response); }));
    }
    ~WithRawCallbackMethod_SetOrchestratorAddresses() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetOrchestratorAddresses(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::MsgSetOrchestratorAddresses* /*request*/, ::injective::peggy::v1::MsgSetOrchestratorAddressesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetOrchestratorAddresses(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CancelSendToEth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CancelSendToEth() {
      ::grpc::Service::MarkMethodRawCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CancelSendToEth(context, request, response); }));
    }
    ~WithRawCallbackMethod_CancelSendToEth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CancelSendToEth(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::MsgCancelSendToEth* /*request*/, ::injective::peggy::v1::MsgCancelSendToEthResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CancelSendToEth(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SubmitBadSignatureEvidence : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SubmitBadSignatureEvidence() {
      ::grpc::Service::MarkMethodRawCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SubmitBadSignatureEvidence(context, request, response); }));
    }
    ~WithRawCallbackMethod_SubmitBadSignatureEvidence() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitBadSignatureEvidence(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::MsgSubmitBadSignatureEvidence* /*request*/, ::injective::peggy::v1::MsgSubmitBadSignatureEvidenceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SubmitBadSignatureEvidence(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdateParams : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdateParams() {
      ::grpc::Service::MarkMethodRawCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateParams(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdateParams() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateParams(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::MsgUpdateParams* /*request*/, ::injective::peggy::v1::MsgUpdateParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateParams(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ValsetConfirm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ValsetConfirm() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::injective::peggy::v1::MsgValsetConfirm, ::injective::peggy::v1::MsgValsetConfirmResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::injective::peggy::v1::MsgValsetConfirm, ::injective::peggy::v1::MsgValsetConfirmResponse>* streamer) {
                       return this->StreamedValsetConfirm(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ValsetConfirm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ValsetConfirm(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::MsgValsetConfirm* /*request*/, ::injective::peggy::v1::MsgValsetConfirmResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedValsetConfirm(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::injective::peggy::v1::MsgValsetConfirm,::injective::peggy::v1::MsgValsetConfirmResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SendToEth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SendToEth() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::injective::peggy::v1::MsgSendToEth, ::injective::peggy::v1::MsgSendToEthResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::injective::peggy::v1::MsgSendToEth, ::injective::peggy::v1::MsgSendToEthResponse>* streamer) {
                       return this->StreamedSendToEth(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SendToEth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SendToEth(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::MsgSendToEth* /*request*/, ::injective::peggy::v1::MsgSendToEthResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSendToEth(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::injective::peggy::v1::MsgSendToEth,::injective::peggy::v1::MsgSendToEthResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RequestBatch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RequestBatch() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::injective::peggy::v1::MsgRequestBatch, ::injective::peggy::v1::MsgRequestBatchResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::injective::peggy::v1::MsgRequestBatch, ::injective::peggy::v1::MsgRequestBatchResponse>* streamer) {
                       return this->StreamedRequestBatch(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RequestBatch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RequestBatch(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::MsgRequestBatch* /*request*/, ::injective::peggy::v1::MsgRequestBatchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRequestBatch(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::injective::peggy::v1::MsgRequestBatch,::injective::peggy::v1::MsgRequestBatchResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ConfirmBatch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ConfirmBatch() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::injective::peggy::v1::MsgConfirmBatch, ::injective::peggy::v1::MsgConfirmBatchResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::injective::peggy::v1::MsgConfirmBatch, ::injective::peggy::v1::MsgConfirmBatchResponse>* streamer) {
                       return this->StreamedConfirmBatch(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ConfirmBatch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ConfirmBatch(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::MsgConfirmBatch* /*request*/, ::injective::peggy::v1::MsgConfirmBatchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedConfirmBatch(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::injective::peggy::v1::MsgConfirmBatch,::injective::peggy::v1::MsgConfirmBatchResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DepositClaim : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DepositClaim() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::injective::peggy::v1::MsgDepositClaim, ::injective::peggy::v1::MsgDepositClaimResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::injective::peggy::v1::MsgDepositClaim, ::injective::peggy::v1::MsgDepositClaimResponse>* streamer) {
                       return this->StreamedDepositClaim(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DepositClaim() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DepositClaim(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::MsgDepositClaim* /*request*/, ::injective::peggy::v1::MsgDepositClaimResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDepositClaim(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::injective::peggy::v1::MsgDepositClaim,::injective::peggy::v1::MsgDepositClaimResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_WithdrawClaim : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_WithdrawClaim() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::injective::peggy::v1::MsgWithdrawClaim, ::injective::peggy::v1::MsgWithdrawClaimResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::injective::peggy::v1::MsgWithdrawClaim, ::injective::peggy::v1::MsgWithdrawClaimResponse>* streamer) {
                       return this->StreamedWithdrawClaim(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_WithdrawClaim() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status WithdrawClaim(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::MsgWithdrawClaim* /*request*/, ::injective::peggy::v1::MsgWithdrawClaimResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedWithdrawClaim(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::injective::peggy::v1::MsgWithdrawClaim,::injective::peggy::v1::MsgWithdrawClaimResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ValsetUpdateClaim : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ValsetUpdateClaim() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::injective::peggy::v1::MsgValsetUpdatedClaim, ::injective::peggy::v1::MsgValsetUpdatedClaimResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::injective::peggy::v1::MsgValsetUpdatedClaim, ::injective::peggy::v1::MsgValsetUpdatedClaimResponse>* streamer) {
                       return this->StreamedValsetUpdateClaim(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ValsetUpdateClaim() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ValsetUpdateClaim(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::MsgValsetUpdatedClaim* /*request*/, ::injective::peggy::v1::MsgValsetUpdatedClaimResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedValsetUpdateClaim(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::injective::peggy::v1::MsgValsetUpdatedClaim,::injective::peggy::v1::MsgValsetUpdatedClaimResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ERC20DeployedClaim : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ERC20DeployedClaim() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::injective::peggy::v1::MsgERC20DeployedClaim, ::injective::peggy::v1::MsgERC20DeployedClaimResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::injective::peggy::v1::MsgERC20DeployedClaim, ::injective::peggy::v1::MsgERC20DeployedClaimResponse>* streamer) {
                       return this->StreamedERC20DeployedClaim(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ERC20DeployedClaim() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ERC20DeployedClaim(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::MsgERC20DeployedClaim* /*request*/, ::injective::peggy::v1::MsgERC20DeployedClaimResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedERC20DeployedClaim(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::injective::peggy::v1::MsgERC20DeployedClaim,::injective::peggy::v1::MsgERC20DeployedClaimResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetOrchestratorAddresses : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetOrchestratorAddresses() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::injective::peggy::v1::MsgSetOrchestratorAddresses, ::injective::peggy::v1::MsgSetOrchestratorAddressesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::injective::peggy::v1::MsgSetOrchestratorAddresses, ::injective::peggy::v1::MsgSetOrchestratorAddressesResponse>* streamer) {
                       return this->StreamedSetOrchestratorAddresses(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetOrchestratorAddresses() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetOrchestratorAddresses(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::MsgSetOrchestratorAddresses* /*request*/, ::injective::peggy::v1::MsgSetOrchestratorAddressesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetOrchestratorAddresses(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::injective::peggy::v1::MsgSetOrchestratorAddresses,::injective::peggy::v1::MsgSetOrchestratorAddressesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CancelSendToEth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CancelSendToEth() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler<
          ::injective::peggy::v1::MsgCancelSendToEth, ::injective::peggy::v1::MsgCancelSendToEthResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::injective::peggy::v1::MsgCancelSendToEth, ::injective::peggy::v1::MsgCancelSendToEthResponse>* streamer) {
                       return this->StreamedCancelSendToEth(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CancelSendToEth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CancelSendToEth(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::MsgCancelSendToEth* /*request*/, ::injective::peggy::v1::MsgCancelSendToEthResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCancelSendToEth(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::injective::peggy::v1::MsgCancelSendToEth,::injective::peggy::v1::MsgCancelSendToEthResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SubmitBadSignatureEvidence : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SubmitBadSignatureEvidence() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler<
          ::injective::peggy::v1::MsgSubmitBadSignatureEvidence, ::injective::peggy::v1::MsgSubmitBadSignatureEvidenceResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::injective::peggy::v1::MsgSubmitBadSignatureEvidence, ::injective::peggy::v1::MsgSubmitBadSignatureEvidenceResponse>* streamer) {
                       return this->StreamedSubmitBadSignatureEvidence(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SubmitBadSignatureEvidence() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SubmitBadSignatureEvidence(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::MsgSubmitBadSignatureEvidence* /*request*/, ::injective::peggy::v1::MsgSubmitBadSignatureEvidenceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSubmitBadSignatureEvidence(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::injective::peggy::v1::MsgSubmitBadSignatureEvidence,::injective::peggy::v1::MsgSubmitBadSignatureEvidenceResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateParams : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateParams() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::StreamedUnaryHandler<
          ::injective::peggy::v1::MsgUpdateParams, ::injective::peggy::v1::MsgUpdateParamsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::injective::peggy::v1::MsgUpdateParams, ::injective::peggy::v1::MsgUpdateParamsResponse>* streamer) {
                       return this->StreamedUpdateParams(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateParams() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateParams(::grpc::ServerContext* /*context*/, const ::injective::peggy::v1::MsgUpdateParams* /*request*/, ::injective::peggy::v1::MsgUpdateParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateParams(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::injective::peggy::v1::MsgUpdateParams,::injective::peggy::v1::MsgUpdateParamsResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_ValsetConfirm<WithStreamedUnaryMethod_SendToEth<WithStreamedUnaryMethod_RequestBatch<WithStreamedUnaryMethod_ConfirmBatch<WithStreamedUnaryMethod_DepositClaim<WithStreamedUnaryMethod_WithdrawClaim<WithStreamedUnaryMethod_ValsetUpdateClaim<WithStreamedUnaryMethod_ERC20DeployedClaim<WithStreamedUnaryMethod_SetOrchestratorAddresses<WithStreamedUnaryMethod_CancelSendToEth<WithStreamedUnaryMethod_SubmitBadSignatureEvidence<WithStreamedUnaryMethod_UpdateParams<Service > > > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_ValsetConfirm<WithStreamedUnaryMethod_SendToEth<WithStreamedUnaryMethod_RequestBatch<WithStreamedUnaryMethod_ConfirmBatch<WithStreamedUnaryMethod_DepositClaim<WithStreamedUnaryMethod_WithdrawClaim<WithStreamedUnaryMethod_ValsetUpdateClaim<WithStreamedUnaryMethod_ERC20DeployedClaim<WithStreamedUnaryMethod_SetOrchestratorAddresses<WithStreamedUnaryMethod_CancelSendToEth<WithStreamedUnaryMethod_SubmitBadSignatureEvidence<WithStreamedUnaryMethod_UpdateParams<Service > > > > > > > > > > > > StreamedService;
};

}  // namespace v1
}  // namespace peggy
}  // namespace injective


#endif  // GRPC_injective_2fpeggy_2fv1_2fmsgs_2eproto__INCLUDED

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: injective/peggy/v1/params.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_injective_2fpeggy_2fv1_2fparams_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_injective_2fpeggy_2fv1_2fparams_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "gogoproto/gogo.pb.h"
#include "cosmos/base/v1beta1/coin.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_injective_2fpeggy_2fv1_2fparams_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_injective_2fpeggy_2fv1_2fparams_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_injective_2fpeggy_2fv1_2fparams_2eproto;
namespace injective {
namespace peggy {
namespace v1 {
class Params;
struct ParamsDefaultTypeInternal;
extern ParamsDefaultTypeInternal _Params_default_instance_;
}  // namespace v1
}  // namespace peggy
}  // namespace injective
PROTOBUF_NAMESPACE_OPEN
template <>
::injective::peggy::v1::Params* Arena::CreateMaybeMessage<::injective::peggy::v1::Params>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace injective {
namespace peggy {
namespace v1 {

// ===================================================================


// -------------------------------------------------------------------

class Params final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.peggy.v1.Params) */ {
 public:
  inline Params() : Params(nullptr) {}
  ~Params() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Params(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Params(const Params& from);
  Params(Params&& from) noexcept
    : Params() {
    *this = ::std::move(from);
  }

  inline Params& operator=(const Params& from) {
    CopyFrom(from);
    return *this;
  }
  inline Params& operator=(Params&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Params& default_instance() {
    return *internal_default_instance();
  }
  static inline const Params* internal_default_instance() {
    return reinterpret_cast<const Params*>(
               &_Params_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Params& a, Params& b) {
    a.Swap(&b);
  }
  inline void Swap(Params* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Params* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Params* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Params>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Params& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Params& from) {
    Params::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Params* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.peggy.v1.Params";
  }
  protected:
  explicit Params(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPeggyIdFieldNumber = 1,
    kContractSourceHashFieldNumber = 2,
    kBridgeEthereumAddressFieldNumber = 3,
    kSlashFractionValsetFieldNumber = 11,
    kSlashFractionBatchFieldNumber = 12,
    kSlashFractionClaimFieldNumber = 13,
    kSlashFractionConflictingClaimFieldNumber = 14,
    kSlashFractionBadEthSignatureFieldNumber = 16,
    kCosmosCoinDenomFieldNumber = 17,
    kCosmosCoinErc20ContractFieldNumber = 18,
    kValsetRewardFieldNumber = 21,
    kBridgeChainIdFieldNumber = 4,
    kSignedValsetsWindowFieldNumber = 5,
    kSignedBatchesWindowFieldNumber = 6,
    kSignedClaimsWindowFieldNumber = 7,
    kTargetBatchTimeoutFieldNumber = 8,
    kAverageBlockTimeFieldNumber = 9,
    kAverageEthereumBlockTimeFieldNumber = 10,
    kUnbondSlashingValsetsWindowFieldNumber = 15,
    kBridgeContractStartHeightFieldNumber = 20,
    kClaimSlashingEnabledFieldNumber = 19,
  };
  // string peggy_id = 1 [json_name = "peggyId"];
  void clear_peggy_id() ;
  const std::string& peggy_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_peggy_id(Arg_&& arg, Args_... args);
  std::string* mutable_peggy_id();
  PROTOBUF_NODISCARD std::string* release_peggy_id();
  void set_allocated_peggy_id(std::string* ptr);

  private:
  const std::string& _internal_peggy_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_peggy_id(
      const std::string& value);
  std::string* _internal_mutable_peggy_id();

  public:
  // string contract_source_hash = 2 [json_name = "contractSourceHash"];
  void clear_contract_source_hash() ;
  const std::string& contract_source_hash() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_contract_source_hash(Arg_&& arg, Args_... args);
  std::string* mutable_contract_source_hash();
  PROTOBUF_NODISCARD std::string* release_contract_source_hash();
  void set_allocated_contract_source_hash(std::string* ptr);

  private:
  const std::string& _internal_contract_source_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_contract_source_hash(
      const std::string& value);
  std::string* _internal_mutable_contract_source_hash();

  public:
  // string bridge_ethereum_address = 3 [json_name = "bridgeEthereumAddress"];
  void clear_bridge_ethereum_address() ;
  const std::string& bridge_ethereum_address() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_bridge_ethereum_address(Arg_&& arg, Args_... args);
  std::string* mutable_bridge_ethereum_address();
  PROTOBUF_NODISCARD std::string* release_bridge_ethereum_address();
  void set_allocated_bridge_ethereum_address(std::string* ptr);

  private:
  const std::string& _internal_bridge_ethereum_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bridge_ethereum_address(
      const std::string& value);
  std::string* _internal_mutable_bridge_ethereum_address();

  public:
  // bytes slash_fraction_valset = 11 [json_name = "slashFractionValset", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  void clear_slash_fraction_valset() ;
  const std::string& slash_fraction_valset() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_slash_fraction_valset(Arg_&& arg, Args_... args);
  std::string* mutable_slash_fraction_valset();
  PROTOBUF_NODISCARD std::string* release_slash_fraction_valset();
  void set_allocated_slash_fraction_valset(std::string* ptr);

  private:
  const std::string& _internal_slash_fraction_valset() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_slash_fraction_valset(
      const std::string& value);
  std::string* _internal_mutable_slash_fraction_valset();

  public:
  // bytes slash_fraction_batch = 12 [json_name = "slashFractionBatch", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  void clear_slash_fraction_batch() ;
  const std::string& slash_fraction_batch() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_slash_fraction_batch(Arg_&& arg, Args_... args);
  std::string* mutable_slash_fraction_batch();
  PROTOBUF_NODISCARD std::string* release_slash_fraction_batch();
  void set_allocated_slash_fraction_batch(std::string* ptr);

  private:
  const std::string& _internal_slash_fraction_batch() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_slash_fraction_batch(
      const std::string& value);
  std::string* _internal_mutable_slash_fraction_batch();

  public:
  // bytes slash_fraction_claim = 13 [json_name = "slashFractionClaim", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  void clear_slash_fraction_claim() ;
  const std::string& slash_fraction_claim() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_slash_fraction_claim(Arg_&& arg, Args_... args);
  std::string* mutable_slash_fraction_claim();
  PROTOBUF_NODISCARD std::string* release_slash_fraction_claim();
  void set_allocated_slash_fraction_claim(std::string* ptr);

  private:
  const std::string& _internal_slash_fraction_claim() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_slash_fraction_claim(
      const std::string& value);
  std::string* _internal_mutable_slash_fraction_claim();

  public:
  // bytes slash_fraction_conflicting_claim = 14 [json_name = "slashFractionConflictingClaim", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  void clear_slash_fraction_conflicting_claim() ;
  const std::string& slash_fraction_conflicting_claim() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_slash_fraction_conflicting_claim(Arg_&& arg, Args_... args);
  std::string* mutable_slash_fraction_conflicting_claim();
  PROTOBUF_NODISCARD std::string* release_slash_fraction_conflicting_claim();
  void set_allocated_slash_fraction_conflicting_claim(std::string* ptr);

  private:
  const std::string& _internal_slash_fraction_conflicting_claim() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_slash_fraction_conflicting_claim(
      const std::string& value);
  std::string* _internal_mutable_slash_fraction_conflicting_claim();

  public:
  // bytes slash_fraction_bad_eth_signature = 16 [json_name = "slashFractionBadEthSignature", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  void clear_slash_fraction_bad_eth_signature() ;
  const std::string& slash_fraction_bad_eth_signature() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_slash_fraction_bad_eth_signature(Arg_&& arg, Args_... args);
  std::string* mutable_slash_fraction_bad_eth_signature();
  PROTOBUF_NODISCARD std::string* release_slash_fraction_bad_eth_signature();
  void set_allocated_slash_fraction_bad_eth_signature(std::string* ptr);

  private:
  const std::string& _internal_slash_fraction_bad_eth_signature() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_slash_fraction_bad_eth_signature(
      const std::string& value);
  std::string* _internal_mutable_slash_fraction_bad_eth_signature();

  public:
  // string cosmos_coin_denom = 17 [json_name = "cosmosCoinDenom"];
  void clear_cosmos_coin_denom() ;
  const std::string& cosmos_coin_denom() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_cosmos_coin_denom(Arg_&& arg, Args_... args);
  std::string* mutable_cosmos_coin_denom();
  PROTOBUF_NODISCARD std::string* release_cosmos_coin_denom();
  void set_allocated_cosmos_coin_denom(std::string* ptr);

  private:
  const std::string& _internal_cosmos_coin_denom() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cosmos_coin_denom(
      const std::string& value);
  std::string* _internal_mutable_cosmos_coin_denom();

  public:
  // string cosmos_coin_erc20_contract = 18 [json_name = "cosmosCoinErc20Contract"];
  void clear_cosmos_coin_erc20_contract() ;
  const std::string& cosmos_coin_erc20_contract() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_cosmos_coin_erc20_contract(Arg_&& arg, Args_... args);
  std::string* mutable_cosmos_coin_erc20_contract();
  PROTOBUF_NODISCARD std::string* release_cosmos_coin_erc20_contract();
  void set_allocated_cosmos_coin_erc20_contract(std::string* ptr);

  private:
  const std::string& _internal_cosmos_coin_erc20_contract() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cosmos_coin_erc20_contract(
      const std::string& value);
  std::string* _internal_mutable_cosmos_coin_erc20_contract();

  public:
  // .cosmos.base.v1beta1.Coin valset_reward = 21 [json_name = "valsetReward", (.gogoproto.nullable) = false];
  bool has_valset_reward() const;
  void clear_valset_reward() ;
  const ::cosmos::base::v1beta1::Coin& valset_reward() const;
  PROTOBUF_NODISCARD ::cosmos::base::v1beta1::Coin* release_valset_reward();
  ::cosmos::base::v1beta1::Coin* mutable_valset_reward();
  void set_allocated_valset_reward(::cosmos::base::v1beta1::Coin* valset_reward);
  private:
  const ::cosmos::base::v1beta1::Coin& _internal_valset_reward() const;
  ::cosmos::base::v1beta1::Coin* _internal_mutable_valset_reward();
  public:
  void unsafe_arena_set_allocated_valset_reward(
      ::cosmos::base::v1beta1::Coin* valset_reward);
  ::cosmos::base::v1beta1::Coin* unsafe_arena_release_valset_reward();
  // uint64 bridge_chain_id = 4 [json_name = "bridgeChainId"];
  void clear_bridge_chain_id() ;
  ::uint64_t bridge_chain_id() const;
  void set_bridge_chain_id(::uint64_t value);

  private:
  ::uint64_t _internal_bridge_chain_id() const;
  void _internal_set_bridge_chain_id(::uint64_t value);

  public:
  // uint64 signed_valsets_window = 5 [json_name = "signedValsetsWindow"];
  void clear_signed_valsets_window() ;
  ::uint64_t signed_valsets_window() const;
  void set_signed_valsets_window(::uint64_t value);

  private:
  ::uint64_t _internal_signed_valsets_window() const;
  void _internal_set_signed_valsets_window(::uint64_t value);

  public:
  // uint64 signed_batches_window = 6 [json_name = "signedBatchesWindow"];
  void clear_signed_batches_window() ;
  ::uint64_t signed_batches_window() const;
  void set_signed_batches_window(::uint64_t value);

  private:
  ::uint64_t _internal_signed_batches_window() const;
  void _internal_set_signed_batches_window(::uint64_t value);

  public:
  // uint64 signed_claims_window = 7 [json_name = "signedClaimsWindow"];
  void clear_signed_claims_window() ;
  ::uint64_t signed_claims_window() const;
  void set_signed_claims_window(::uint64_t value);

  private:
  ::uint64_t _internal_signed_claims_window() const;
  void _internal_set_signed_claims_window(::uint64_t value);

  public:
  // uint64 target_batch_timeout = 8 [json_name = "targetBatchTimeout"];
  void clear_target_batch_timeout() ;
  ::uint64_t target_batch_timeout() const;
  void set_target_batch_timeout(::uint64_t value);

  private:
  ::uint64_t _internal_target_batch_timeout() const;
  void _internal_set_target_batch_timeout(::uint64_t value);

  public:
  // uint64 average_block_time = 9 [json_name = "averageBlockTime"];
  void clear_average_block_time() ;
  ::uint64_t average_block_time() const;
  void set_average_block_time(::uint64_t value);

  private:
  ::uint64_t _internal_average_block_time() const;
  void _internal_set_average_block_time(::uint64_t value);

  public:
  // uint64 average_ethereum_block_time = 10 [json_name = "averageEthereumBlockTime"];
  void clear_average_ethereum_block_time() ;
  ::uint64_t average_ethereum_block_time() const;
  void set_average_ethereum_block_time(::uint64_t value);

  private:
  ::uint64_t _internal_average_ethereum_block_time() const;
  void _internal_set_average_ethereum_block_time(::uint64_t value);

  public:
  // uint64 unbond_slashing_valsets_window = 15 [json_name = "unbondSlashingValsetsWindow"];
  void clear_unbond_slashing_valsets_window() ;
  ::uint64_t unbond_slashing_valsets_window() const;
  void set_unbond_slashing_valsets_window(::uint64_t value);

  private:
  ::uint64_t _internal_unbond_slashing_valsets_window() const;
  void _internal_set_unbond_slashing_valsets_window(::uint64_t value);

  public:
  // uint64 bridge_contract_start_height = 20 [json_name = "bridgeContractStartHeight"];
  void clear_bridge_contract_start_height() ;
  ::uint64_t bridge_contract_start_height() const;
  void set_bridge_contract_start_height(::uint64_t value);

  private:
  ::uint64_t _internal_bridge_contract_start_height() const;
  void _internal_set_bridge_contract_start_height(::uint64_t value);

  public:
  // bool claim_slashing_enabled = 19 [json_name = "claimSlashingEnabled"];
  void clear_claim_slashing_enabled() ;
  bool claim_slashing_enabled() const;
  void set_claim_slashing_enabled(bool value);

  private:
  bool _internal_claim_slashing_enabled() const;
  void _internal_set_claim_slashing_enabled(bool value);

  public:
  // @@protoc_insertion_point(class_scope:injective.peggy.v1.Params)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr peggy_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contract_source_hash_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bridge_ethereum_address_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr slash_fraction_valset_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr slash_fraction_batch_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr slash_fraction_claim_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr slash_fraction_conflicting_claim_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr slash_fraction_bad_eth_signature_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cosmos_coin_denom_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cosmos_coin_erc20_contract_;
    ::cosmos::base::v1beta1::Coin* valset_reward_;
    ::uint64_t bridge_chain_id_;
    ::uint64_t signed_valsets_window_;
    ::uint64_t signed_batches_window_;
    ::uint64_t signed_claims_window_;
    ::uint64_t target_batch_timeout_;
    ::uint64_t average_block_time_;
    ::uint64_t average_ethereum_block_time_;
    ::uint64_t unbond_slashing_valsets_window_;
    ::uint64_t bridge_contract_start_height_;
    bool claim_slashing_enabled_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2fpeggy_2fv1_2fparams_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Params

// string peggy_id = 1 [json_name = "peggyId"];
inline void Params::clear_peggy_id() {
  _impl_.peggy_id_.ClearToEmpty();
}
inline const std::string& Params::peggy_id() const {
  // @@protoc_insertion_point(field_get:injective.peggy.v1.Params.peggy_id)
  return _internal_peggy_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Params::set_peggy_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.peggy_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.peggy.v1.Params.peggy_id)
}
inline std::string* Params::mutable_peggy_id() {
  std::string* _s = _internal_mutable_peggy_id();
  // @@protoc_insertion_point(field_mutable:injective.peggy.v1.Params.peggy_id)
  return _s;
}
inline const std::string& Params::_internal_peggy_id() const {
  return _impl_.peggy_id_.Get();
}
inline void Params::_internal_set_peggy_id(const std::string& value) {
  ;


  _impl_.peggy_id_.Set(value, GetArenaForAllocation());
}
inline std::string* Params::_internal_mutable_peggy_id() {
  ;
  return _impl_.peggy_id_.Mutable( GetArenaForAllocation());
}
inline std::string* Params::release_peggy_id() {
  // @@protoc_insertion_point(field_release:injective.peggy.v1.Params.peggy_id)
  return _impl_.peggy_id_.Release();
}
inline void Params::set_allocated_peggy_id(std::string* value) {
  _impl_.peggy_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.peggy_id_.IsDefault()) {
          _impl_.peggy_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.peggy.v1.Params.peggy_id)
}

// string contract_source_hash = 2 [json_name = "contractSourceHash"];
inline void Params::clear_contract_source_hash() {
  _impl_.contract_source_hash_.ClearToEmpty();
}
inline const std::string& Params::contract_source_hash() const {
  // @@protoc_insertion_point(field_get:injective.peggy.v1.Params.contract_source_hash)
  return _internal_contract_source_hash();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Params::set_contract_source_hash(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.contract_source_hash_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.peggy.v1.Params.contract_source_hash)
}
inline std::string* Params::mutable_contract_source_hash() {
  std::string* _s = _internal_mutable_contract_source_hash();
  // @@protoc_insertion_point(field_mutable:injective.peggy.v1.Params.contract_source_hash)
  return _s;
}
inline const std::string& Params::_internal_contract_source_hash() const {
  return _impl_.contract_source_hash_.Get();
}
inline void Params::_internal_set_contract_source_hash(const std::string& value) {
  ;


  _impl_.contract_source_hash_.Set(value, GetArenaForAllocation());
}
inline std::string* Params::_internal_mutable_contract_source_hash() {
  ;
  return _impl_.contract_source_hash_.Mutable( GetArenaForAllocation());
}
inline std::string* Params::release_contract_source_hash() {
  // @@protoc_insertion_point(field_release:injective.peggy.v1.Params.contract_source_hash)
  return _impl_.contract_source_hash_.Release();
}
inline void Params::set_allocated_contract_source_hash(std::string* value) {
  _impl_.contract_source_hash_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.contract_source_hash_.IsDefault()) {
          _impl_.contract_source_hash_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.peggy.v1.Params.contract_source_hash)
}

// string bridge_ethereum_address = 3 [json_name = "bridgeEthereumAddress"];
inline void Params::clear_bridge_ethereum_address() {
  _impl_.bridge_ethereum_address_.ClearToEmpty();
}
inline const std::string& Params::bridge_ethereum_address() const {
  // @@protoc_insertion_point(field_get:injective.peggy.v1.Params.bridge_ethereum_address)
  return _internal_bridge_ethereum_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Params::set_bridge_ethereum_address(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.bridge_ethereum_address_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.peggy.v1.Params.bridge_ethereum_address)
}
inline std::string* Params::mutable_bridge_ethereum_address() {
  std::string* _s = _internal_mutable_bridge_ethereum_address();
  // @@protoc_insertion_point(field_mutable:injective.peggy.v1.Params.bridge_ethereum_address)
  return _s;
}
inline const std::string& Params::_internal_bridge_ethereum_address() const {
  return _impl_.bridge_ethereum_address_.Get();
}
inline void Params::_internal_set_bridge_ethereum_address(const std::string& value) {
  ;


  _impl_.bridge_ethereum_address_.Set(value, GetArenaForAllocation());
}
inline std::string* Params::_internal_mutable_bridge_ethereum_address() {
  ;
  return _impl_.bridge_ethereum_address_.Mutable( GetArenaForAllocation());
}
inline std::string* Params::release_bridge_ethereum_address() {
  // @@protoc_insertion_point(field_release:injective.peggy.v1.Params.bridge_ethereum_address)
  return _impl_.bridge_ethereum_address_.Release();
}
inline void Params::set_allocated_bridge_ethereum_address(std::string* value) {
  _impl_.bridge_ethereum_address_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.bridge_ethereum_address_.IsDefault()) {
          _impl_.bridge_ethereum_address_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.peggy.v1.Params.bridge_ethereum_address)
}

// uint64 bridge_chain_id = 4 [json_name = "bridgeChainId"];
inline void Params::clear_bridge_chain_id() {
  _impl_.bridge_chain_id_ = ::uint64_t{0u};
}
inline ::uint64_t Params::bridge_chain_id() const {
  // @@protoc_insertion_point(field_get:injective.peggy.v1.Params.bridge_chain_id)
  return _internal_bridge_chain_id();
}
inline void Params::set_bridge_chain_id(::uint64_t value) {
  _internal_set_bridge_chain_id(value);
  // @@protoc_insertion_point(field_set:injective.peggy.v1.Params.bridge_chain_id)
}
inline ::uint64_t Params::_internal_bridge_chain_id() const {
  return _impl_.bridge_chain_id_;
}
inline void Params::_internal_set_bridge_chain_id(::uint64_t value) {
  ;
  _impl_.bridge_chain_id_ = value;
}

// uint64 signed_valsets_window = 5 [json_name = "signedValsetsWindow"];
inline void Params::clear_signed_valsets_window() {
  _impl_.signed_valsets_window_ = ::uint64_t{0u};
}
inline ::uint64_t Params::signed_valsets_window() const {
  // @@protoc_insertion_point(field_get:injective.peggy.v1.Params.signed_valsets_window)
  return _internal_signed_valsets_window();
}
inline void Params::set_signed_valsets_window(::uint64_t value) {
  _internal_set_signed_valsets_window(value);
  // @@protoc_insertion_point(field_set:injective.peggy.v1.Params.signed_valsets_window)
}
inline ::uint64_t Params::_internal_signed_valsets_window() const {
  return _impl_.signed_valsets_window_;
}
inline void Params::_internal_set_signed_valsets_window(::uint64_t value) {
  ;
  _impl_.signed_valsets_window_ = value;
}

// uint64 signed_batches_window = 6 [json_name = "signedBatchesWindow"];
inline void Params::clear_signed_batches_window() {
  _impl_.signed_batches_window_ = ::uint64_t{0u};
}
inline ::uint64_t Params::signed_batches_window() const {
  // @@protoc_insertion_point(field_get:injective.peggy.v1.Params.signed_batches_window)
  return _internal_signed_batches_window();
}
inline void Params::set_signed_batches_window(::uint64_t value) {
  _internal_set_signed_batches_window(value);
  // @@protoc_insertion_point(field_set:injective.peggy.v1.Params.signed_batches_window)
}
inline ::uint64_t Params::_internal_signed_batches_window() const {
  return _impl_.signed_batches_window_;
}
inline void Params::_internal_set_signed_batches_window(::uint64_t value) {
  ;
  _impl_.signed_batches_window_ = value;
}

// uint64 signed_claims_window = 7 [json_name = "signedClaimsWindow"];
inline void Params::clear_signed_claims_window() {
  _impl_.signed_claims_window_ = ::uint64_t{0u};
}
inline ::uint64_t Params::signed_claims_window() const {
  // @@protoc_insertion_point(field_get:injective.peggy.v1.Params.signed_claims_window)
  return _internal_signed_claims_window();
}
inline void Params::set_signed_claims_window(::uint64_t value) {
  _internal_set_signed_claims_window(value);
  // @@protoc_insertion_point(field_set:injective.peggy.v1.Params.signed_claims_window)
}
inline ::uint64_t Params::_internal_signed_claims_window() const {
  return _impl_.signed_claims_window_;
}
inline void Params::_internal_set_signed_claims_window(::uint64_t value) {
  ;
  _impl_.signed_claims_window_ = value;
}

// uint64 target_batch_timeout = 8 [json_name = "targetBatchTimeout"];
inline void Params::clear_target_batch_timeout() {
  _impl_.target_batch_timeout_ = ::uint64_t{0u};
}
inline ::uint64_t Params::target_batch_timeout() const {
  // @@protoc_insertion_point(field_get:injective.peggy.v1.Params.target_batch_timeout)
  return _internal_target_batch_timeout();
}
inline void Params::set_target_batch_timeout(::uint64_t value) {
  _internal_set_target_batch_timeout(value);
  // @@protoc_insertion_point(field_set:injective.peggy.v1.Params.target_batch_timeout)
}
inline ::uint64_t Params::_internal_target_batch_timeout() const {
  return _impl_.target_batch_timeout_;
}
inline void Params::_internal_set_target_batch_timeout(::uint64_t value) {
  ;
  _impl_.target_batch_timeout_ = value;
}

// uint64 average_block_time = 9 [json_name = "averageBlockTime"];
inline void Params::clear_average_block_time() {
  _impl_.average_block_time_ = ::uint64_t{0u};
}
inline ::uint64_t Params::average_block_time() const {
  // @@protoc_insertion_point(field_get:injective.peggy.v1.Params.average_block_time)
  return _internal_average_block_time();
}
inline void Params::set_average_block_time(::uint64_t value) {
  _internal_set_average_block_time(value);
  // @@protoc_insertion_point(field_set:injective.peggy.v1.Params.average_block_time)
}
inline ::uint64_t Params::_internal_average_block_time() const {
  return _impl_.average_block_time_;
}
inline void Params::_internal_set_average_block_time(::uint64_t value) {
  ;
  _impl_.average_block_time_ = value;
}

// uint64 average_ethereum_block_time = 10 [json_name = "averageEthereumBlockTime"];
inline void Params::clear_average_ethereum_block_time() {
  _impl_.average_ethereum_block_time_ = ::uint64_t{0u};
}
inline ::uint64_t Params::average_ethereum_block_time() const {
  // @@protoc_insertion_point(field_get:injective.peggy.v1.Params.average_ethereum_block_time)
  return _internal_average_ethereum_block_time();
}
inline void Params::set_average_ethereum_block_time(::uint64_t value) {
  _internal_set_average_ethereum_block_time(value);
  // @@protoc_insertion_point(field_set:injective.peggy.v1.Params.average_ethereum_block_time)
}
inline ::uint64_t Params::_internal_average_ethereum_block_time() const {
  return _impl_.average_ethereum_block_time_;
}
inline void Params::_internal_set_average_ethereum_block_time(::uint64_t value) {
  ;
  _impl_.average_ethereum_block_time_ = value;
}

// bytes slash_fraction_valset = 11 [json_name = "slashFractionValset", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
inline void Params::clear_slash_fraction_valset() {
  _impl_.slash_fraction_valset_.ClearToEmpty();
}
inline const std::string& Params::slash_fraction_valset() const {
  // @@protoc_insertion_point(field_get:injective.peggy.v1.Params.slash_fraction_valset)
  return _internal_slash_fraction_valset();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Params::set_slash_fraction_valset(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.slash_fraction_valset_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.peggy.v1.Params.slash_fraction_valset)
}
inline std::string* Params::mutable_slash_fraction_valset() {
  std::string* _s = _internal_mutable_slash_fraction_valset();
  // @@protoc_insertion_point(field_mutable:injective.peggy.v1.Params.slash_fraction_valset)
  return _s;
}
inline const std::string& Params::_internal_slash_fraction_valset() const {
  return _impl_.slash_fraction_valset_.Get();
}
inline void Params::_internal_set_slash_fraction_valset(const std::string& value) {
  ;


  _impl_.slash_fraction_valset_.Set(value, GetArenaForAllocation());
}
inline std::string* Params::_internal_mutable_slash_fraction_valset() {
  ;
  return _impl_.slash_fraction_valset_.Mutable( GetArenaForAllocation());
}
inline std::string* Params::release_slash_fraction_valset() {
  // @@protoc_insertion_point(field_release:injective.peggy.v1.Params.slash_fraction_valset)
  return _impl_.slash_fraction_valset_.Release();
}
inline void Params::set_allocated_slash_fraction_valset(std::string* value) {
  _impl_.slash_fraction_valset_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.slash_fraction_valset_.IsDefault()) {
          _impl_.slash_fraction_valset_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.peggy.v1.Params.slash_fraction_valset)
}

// bytes slash_fraction_batch = 12 [json_name = "slashFractionBatch", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
inline void Params::clear_slash_fraction_batch() {
  _impl_.slash_fraction_batch_.ClearToEmpty();
}
inline const std::string& Params::slash_fraction_batch() const {
  // @@protoc_insertion_point(field_get:injective.peggy.v1.Params.slash_fraction_batch)
  return _internal_slash_fraction_batch();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Params::set_slash_fraction_batch(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.slash_fraction_batch_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.peggy.v1.Params.slash_fraction_batch)
}
inline std::string* Params::mutable_slash_fraction_batch() {
  std::string* _s = _internal_mutable_slash_fraction_batch();
  // @@protoc_insertion_point(field_mutable:injective.peggy.v1.Params.slash_fraction_batch)
  return _s;
}
inline const std::string& Params::_internal_slash_fraction_batch() const {
  return _impl_.slash_fraction_batch_.Get();
}
inline void Params::_internal_set_slash_fraction_batch(const std::string& value) {
  ;


  _impl_.slash_fraction_batch_.Set(value, GetArenaForAllocation());
}
inline std::string* Params::_internal_mutable_slash_fraction_batch() {
  ;
  return _impl_.slash_fraction_batch_.Mutable( GetArenaForAllocation());
}
inline std::string* Params::release_slash_fraction_batch() {
  // @@protoc_insertion_point(field_release:injective.peggy.v1.Params.slash_fraction_batch)
  return _impl_.slash_fraction_batch_.Release();
}
inline void Params::set_allocated_slash_fraction_batch(std::string* value) {
  _impl_.slash_fraction_batch_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.slash_fraction_batch_.IsDefault()) {
          _impl_.slash_fraction_batch_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.peggy.v1.Params.slash_fraction_batch)
}

// bytes slash_fraction_claim = 13 [json_name = "slashFractionClaim", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
inline void Params::clear_slash_fraction_claim() {
  _impl_.slash_fraction_claim_.ClearToEmpty();
}
inline const std::string& Params::slash_fraction_claim() const {
  // @@protoc_insertion_point(field_get:injective.peggy.v1.Params.slash_fraction_claim)
  return _internal_slash_fraction_claim();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Params::set_slash_fraction_claim(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.slash_fraction_claim_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.peggy.v1.Params.slash_fraction_claim)
}
inline std::string* Params::mutable_slash_fraction_claim() {
  std::string* _s = _internal_mutable_slash_fraction_claim();
  // @@protoc_insertion_point(field_mutable:injective.peggy.v1.Params.slash_fraction_claim)
  return _s;
}
inline const std::string& Params::_internal_slash_fraction_claim() const {
  return _impl_.slash_fraction_claim_.Get();
}
inline void Params::_internal_set_slash_fraction_claim(const std::string& value) {
  ;


  _impl_.slash_fraction_claim_.Set(value, GetArenaForAllocation());
}
inline std::string* Params::_internal_mutable_slash_fraction_claim() {
  ;
  return _impl_.slash_fraction_claim_.Mutable( GetArenaForAllocation());
}
inline std::string* Params::release_slash_fraction_claim() {
  // @@protoc_insertion_point(field_release:injective.peggy.v1.Params.slash_fraction_claim)
  return _impl_.slash_fraction_claim_.Release();
}
inline void Params::set_allocated_slash_fraction_claim(std::string* value) {
  _impl_.slash_fraction_claim_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.slash_fraction_claim_.IsDefault()) {
          _impl_.slash_fraction_claim_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.peggy.v1.Params.slash_fraction_claim)
}

// bytes slash_fraction_conflicting_claim = 14 [json_name = "slashFractionConflictingClaim", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
inline void Params::clear_slash_fraction_conflicting_claim() {
  _impl_.slash_fraction_conflicting_claim_.ClearToEmpty();
}
inline const std::string& Params::slash_fraction_conflicting_claim() const {
  // @@protoc_insertion_point(field_get:injective.peggy.v1.Params.slash_fraction_conflicting_claim)
  return _internal_slash_fraction_conflicting_claim();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Params::set_slash_fraction_conflicting_claim(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.slash_fraction_conflicting_claim_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.peggy.v1.Params.slash_fraction_conflicting_claim)
}
inline std::string* Params::mutable_slash_fraction_conflicting_claim() {
  std::string* _s = _internal_mutable_slash_fraction_conflicting_claim();
  // @@protoc_insertion_point(field_mutable:injective.peggy.v1.Params.slash_fraction_conflicting_claim)
  return _s;
}
inline const std::string& Params::_internal_slash_fraction_conflicting_claim() const {
  return _impl_.slash_fraction_conflicting_claim_.Get();
}
inline void Params::_internal_set_slash_fraction_conflicting_claim(const std::string& value) {
  ;


  _impl_.slash_fraction_conflicting_claim_.Set(value, GetArenaForAllocation());
}
inline std::string* Params::_internal_mutable_slash_fraction_conflicting_claim() {
  ;
  return _impl_.slash_fraction_conflicting_claim_.Mutable( GetArenaForAllocation());
}
inline std::string* Params::release_slash_fraction_conflicting_claim() {
  // @@protoc_insertion_point(field_release:injective.peggy.v1.Params.slash_fraction_conflicting_claim)
  return _impl_.slash_fraction_conflicting_claim_.Release();
}
inline void Params::set_allocated_slash_fraction_conflicting_claim(std::string* value) {
  _impl_.slash_fraction_conflicting_claim_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.slash_fraction_conflicting_claim_.IsDefault()) {
          _impl_.slash_fraction_conflicting_claim_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.peggy.v1.Params.slash_fraction_conflicting_claim)
}

// uint64 unbond_slashing_valsets_window = 15 [json_name = "unbondSlashingValsetsWindow"];
inline void Params::clear_unbond_slashing_valsets_window() {
  _impl_.unbond_slashing_valsets_window_ = ::uint64_t{0u};
}
inline ::uint64_t Params::unbond_slashing_valsets_window() const {
  // @@protoc_insertion_point(field_get:injective.peggy.v1.Params.unbond_slashing_valsets_window)
  return _internal_unbond_slashing_valsets_window();
}
inline void Params::set_unbond_slashing_valsets_window(::uint64_t value) {
  _internal_set_unbond_slashing_valsets_window(value);
  // @@protoc_insertion_point(field_set:injective.peggy.v1.Params.unbond_slashing_valsets_window)
}
inline ::uint64_t Params::_internal_unbond_slashing_valsets_window() const {
  return _impl_.unbond_slashing_valsets_window_;
}
inline void Params::_internal_set_unbond_slashing_valsets_window(::uint64_t value) {
  ;
  _impl_.unbond_slashing_valsets_window_ = value;
}

// bytes slash_fraction_bad_eth_signature = 16 [json_name = "slashFractionBadEthSignature", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
inline void Params::clear_slash_fraction_bad_eth_signature() {
  _impl_.slash_fraction_bad_eth_signature_.ClearToEmpty();
}
inline const std::string& Params::slash_fraction_bad_eth_signature() const {
  // @@protoc_insertion_point(field_get:injective.peggy.v1.Params.slash_fraction_bad_eth_signature)
  return _internal_slash_fraction_bad_eth_signature();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Params::set_slash_fraction_bad_eth_signature(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.slash_fraction_bad_eth_signature_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.peggy.v1.Params.slash_fraction_bad_eth_signature)
}
inline std::string* Params::mutable_slash_fraction_bad_eth_signature() {
  std::string* _s = _internal_mutable_slash_fraction_bad_eth_signature();
  // @@protoc_insertion_point(field_mutable:injective.peggy.v1.Params.slash_fraction_bad_eth_signature)
  return _s;
}
inline const std::string& Params::_internal_slash_fraction_bad_eth_signature() const {
  return _impl_.slash_fraction_bad_eth_signature_.Get();
}
inline void Params::_internal_set_slash_fraction_bad_eth_signature(const std::string& value) {
  ;


  _impl_.slash_fraction_bad_eth_signature_.Set(value, GetArenaForAllocation());
}
inline std::string* Params::_internal_mutable_slash_fraction_bad_eth_signature() {
  ;
  return _impl_.slash_fraction_bad_eth_signature_.Mutable( GetArenaForAllocation());
}
inline std::string* Params::release_slash_fraction_bad_eth_signature() {
  // @@protoc_insertion_point(field_release:injective.peggy.v1.Params.slash_fraction_bad_eth_signature)
  return _impl_.slash_fraction_bad_eth_signature_.Release();
}
inline void Params::set_allocated_slash_fraction_bad_eth_signature(std::string* value) {
  _impl_.slash_fraction_bad_eth_signature_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.slash_fraction_bad_eth_signature_.IsDefault()) {
          _impl_.slash_fraction_bad_eth_signature_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.peggy.v1.Params.slash_fraction_bad_eth_signature)
}

// string cosmos_coin_denom = 17 [json_name = "cosmosCoinDenom"];
inline void Params::clear_cosmos_coin_denom() {
  _impl_.cosmos_coin_denom_.ClearToEmpty();
}
inline const std::string& Params::cosmos_coin_denom() const {
  // @@protoc_insertion_point(field_get:injective.peggy.v1.Params.cosmos_coin_denom)
  return _internal_cosmos_coin_denom();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Params::set_cosmos_coin_denom(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.cosmos_coin_denom_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.peggy.v1.Params.cosmos_coin_denom)
}
inline std::string* Params::mutable_cosmos_coin_denom() {
  std::string* _s = _internal_mutable_cosmos_coin_denom();
  // @@protoc_insertion_point(field_mutable:injective.peggy.v1.Params.cosmos_coin_denom)
  return _s;
}
inline const std::string& Params::_internal_cosmos_coin_denom() const {
  return _impl_.cosmos_coin_denom_.Get();
}
inline void Params::_internal_set_cosmos_coin_denom(const std::string& value) {
  ;


  _impl_.cosmos_coin_denom_.Set(value, GetArenaForAllocation());
}
inline std::string* Params::_internal_mutable_cosmos_coin_denom() {
  ;
  return _impl_.cosmos_coin_denom_.Mutable( GetArenaForAllocation());
}
inline std::string* Params::release_cosmos_coin_denom() {
  // @@protoc_insertion_point(field_release:injective.peggy.v1.Params.cosmos_coin_denom)
  return _impl_.cosmos_coin_denom_.Release();
}
inline void Params::set_allocated_cosmos_coin_denom(std::string* value) {
  _impl_.cosmos_coin_denom_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.cosmos_coin_denom_.IsDefault()) {
          _impl_.cosmos_coin_denom_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.peggy.v1.Params.cosmos_coin_denom)
}

// string cosmos_coin_erc20_contract = 18 [json_name = "cosmosCoinErc20Contract"];
inline void Params::clear_cosmos_coin_erc20_contract() {
  _impl_.cosmos_coin_erc20_contract_.ClearToEmpty();
}
inline const std::string& Params::cosmos_coin_erc20_contract() const {
  // @@protoc_insertion_point(field_get:injective.peggy.v1.Params.cosmos_coin_erc20_contract)
  return _internal_cosmos_coin_erc20_contract();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Params::set_cosmos_coin_erc20_contract(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.cosmos_coin_erc20_contract_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.peggy.v1.Params.cosmos_coin_erc20_contract)
}
inline std::string* Params::mutable_cosmos_coin_erc20_contract() {
  std::string* _s = _internal_mutable_cosmos_coin_erc20_contract();
  // @@protoc_insertion_point(field_mutable:injective.peggy.v1.Params.cosmos_coin_erc20_contract)
  return _s;
}
inline const std::string& Params::_internal_cosmos_coin_erc20_contract() const {
  return _impl_.cosmos_coin_erc20_contract_.Get();
}
inline void Params::_internal_set_cosmos_coin_erc20_contract(const std::string& value) {
  ;


  _impl_.cosmos_coin_erc20_contract_.Set(value, GetArenaForAllocation());
}
inline std::string* Params::_internal_mutable_cosmos_coin_erc20_contract() {
  ;
  return _impl_.cosmos_coin_erc20_contract_.Mutable( GetArenaForAllocation());
}
inline std::string* Params::release_cosmos_coin_erc20_contract() {
  // @@protoc_insertion_point(field_release:injective.peggy.v1.Params.cosmos_coin_erc20_contract)
  return _impl_.cosmos_coin_erc20_contract_.Release();
}
inline void Params::set_allocated_cosmos_coin_erc20_contract(std::string* value) {
  _impl_.cosmos_coin_erc20_contract_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.cosmos_coin_erc20_contract_.IsDefault()) {
          _impl_.cosmos_coin_erc20_contract_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.peggy.v1.Params.cosmos_coin_erc20_contract)
}

// bool claim_slashing_enabled = 19 [json_name = "claimSlashingEnabled"];
inline void Params::clear_claim_slashing_enabled() {
  _impl_.claim_slashing_enabled_ = false;
}
inline bool Params::claim_slashing_enabled() const {
  // @@protoc_insertion_point(field_get:injective.peggy.v1.Params.claim_slashing_enabled)
  return _internal_claim_slashing_enabled();
}
inline void Params::set_claim_slashing_enabled(bool value) {
  _internal_set_claim_slashing_enabled(value);
  // @@protoc_insertion_point(field_set:injective.peggy.v1.Params.claim_slashing_enabled)
}
inline bool Params::_internal_claim_slashing_enabled() const {
  return _impl_.claim_slashing_enabled_;
}
inline void Params::_internal_set_claim_slashing_enabled(bool value) {
  ;
  _impl_.claim_slashing_enabled_ = value;
}

// uint64 bridge_contract_start_height = 20 [json_name = "bridgeContractStartHeight"];
inline void Params::clear_bridge_contract_start_height() {
  _impl_.bridge_contract_start_height_ = ::uint64_t{0u};
}
inline ::uint64_t Params::bridge_contract_start_height() const {
  // @@protoc_insertion_point(field_get:injective.peggy.v1.Params.bridge_contract_start_height)
  return _internal_bridge_contract_start_height();
}
inline void Params::set_bridge_contract_start_height(::uint64_t value) {
  _internal_set_bridge_contract_start_height(value);
  // @@protoc_insertion_point(field_set:injective.peggy.v1.Params.bridge_contract_start_height)
}
inline ::uint64_t Params::_internal_bridge_contract_start_height() const {
  return _impl_.bridge_contract_start_height_;
}
inline void Params::_internal_set_bridge_contract_start_height(::uint64_t value) {
  ;
  _impl_.bridge_contract_start_height_ = value;
}

// .cosmos.base.v1beta1.Coin valset_reward = 21 [json_name = "valsetReward", (.gogoproto.nullable) = false];
inline bool Params::has_valset_reward() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.valset_reward_ != nullptr);
  return value;
}
inline const ::cosmos::base::v1beta1::Coin& Params::_internal_valset_reward() const {
  const ::cosmos::base::v1beta1::Coin* p = _impl_.valset_reward_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::v1beta1::Coin&>(
      ::cosmos::base::v1beta1::_Coin_default_instance_);
}
inline const ::cosmos::base::v1beta1::Coin& Params::valset_reward() const {
  // @@protoc_insertion_point(field_get:injective.peggy.v1.Params.valset_reward)
  return _internal_valset_reward();
}
inline void Params::unsafe_arena_set_allocated_valset_reward(
    ::cosmos::base::v1beta1::Coin* valset_reward) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.valset_reward_);
  }
  _impl_.valset_reward_ = valset_reward;
  if (valset_reward) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:injective.peggy.v1.Params.valset_reward)
}
inline ::cosmos::base::v1beta1::Coin* Params::release_valset_reward() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::v1beta1::Coin* temp = _impl_.valset_reward_;
  _impl_.valset_reward_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::base::v1beta1::Coin* Params::unsafe_arena_release_valset_reward() {
  // @@protoc_insertion_point(field_release:injective.peggy.v1.Params.valset_reward)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::v1beta1::Coin* temp = _impl_.valset_reward_;
  _impl_.valset_reward_ = nullptr;
  return temp;
}
inline ::cosmos::base::v1beta1::Coin* Params::_internal_mutable_valset_reward() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.valset_reward_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::base::v1beta1::Coin>(GetArenaForAllocation());
    _impl_.valset_reward_ = p;
  }
  return _impl_.valset_reward_;
}
inline ::cosmos::base::v1beta1::Coin* Params::mutable_valset_reward() {
  ::cosmos::base::v1beta1::Coin* _msg = _internal_mutable_valset_reward();
  // @@protoc_insertion_point(field_mutable:injective.peggy.v1.Params.valset_reward)
  return _msg;
}
inline void Params::set_allocated_valset_reward(::cosmos::base::v1beta1::Coin* valset_reward) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.valset_reward_);
  }
  if (valset_reward) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(valset_reward));
    if (message_arena != submessage_arena) {
      valset_reward = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, valset_reward, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.valset_reward_ = valset_reward;
  // @@protoc_insertion_point(field_set_allocated:injective.peggy.v1.Params.valset_reward)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace peggy
}  // namespace injective


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_injective_2fpeggy_2fv1_2fparams_2eproto_2epb_2eh

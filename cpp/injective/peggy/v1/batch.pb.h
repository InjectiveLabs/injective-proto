// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: injective/peggy/v1/batch.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_injective_2fpeggy_2fv1_2fbatch_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_injective_2fpeggy_2fv1_2fbatch_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "injective/peggy/v1/attestation.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_injective_2fpeggy_2fv1_2fbatch_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_injective_2fpeggy_2fv1_2fbatch_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_injective_2fpeggy_2fv1_2fbatch_2eproto;
namespace injective {
namespace peggy {
namespace v1 {
class OutgoingTransferTx;
struct OutgoingTransferTxDefaultTypeInternal;
extern OutgoingTransferTxDefaultTypeInternal _OutgoingTransferTx_default_instance_;
class OutgoingTxBatch;
struct OutgoingTxBatchDefaultTypeInternal;
extern OutgoingTxBatchDefaultTypeInternal _OutgoingTxBatch_default_instance_;
}  // namespace v1
}  // namespace peggy
}  // namespace injective
PROTOBUF_NAMESPACE_OPEN
template <>
::injective::peggy::v1::OutgoingTransferTx* Arena::CreateMaybeMessage<::injective::peggy::v1::OutgoingTransferTx>(Arena*);
template <>
::injective::peggy::v1::OutgoingTxBatch* Arena::CreateMaybeMessage<::injective::peggy::v1::OutgoingTxBatch>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace injective {
namespace peggy {
namespace v1 {

// ===================================================================


// -------------------------------------------------------------------

class OutgoingTxBatch final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.peggy.v1.OutgoingTxBatch) */ {
 public:
  inline OutgoingTxBatch() : OutgoingTxBatch(nullptr) {}
  ~OutgoingTxBatch() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR OutgoingTxBatch(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OutgoingTxBatch(const OutgoingTxBatch& from);
  OutgoingTxBatch(OutgoingTxBatch&& from) noexcept
    : OutgoingTxBatch() {
    *this = ::std::move(from);
  }

  inline OutgoingTxBatch& operator=(const OutgoingTxBatch& from) {
    CopyFrom(from);
    return *this;
  }
  inline OutgoingTxBatch& operator=(OutgoingTxBatch&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OutgoingTxBatch& default_instance() {
    return *internal_default_instance();
  }
  static inline const OutgoingTxBatch* internal_default_instance() {
    return reinterpret_cast<const OutgoingTxBatch*>(
               &_OutgoingTxBatch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(OutgoingTxBatch& a, OutgoingTxBatch& b) {
    a.Swap(&b);
  }
  inline void Swap(OutgoingTxBatch* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OutgoingTxBatch* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OutgoingTxBatch* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OutgoingTxBatch>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OutgoingTxBatch& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const OutgoingTxBatch& from) {
    OutgoingTxBatch::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OutgoingTxBatch* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.peggy.v1.OutgoingTxBatch";
  }
  protected:
  explicit OutgoingTxBatch(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransactionsFieldNumber = 3,
    kTokenContractFieldNumber = 4,
    kBatchNonceFieldNumber = 1,
    kBatchTimeoutFieldNumber = 2,
    kBlockFieldNumber = 5,
  };
  // repeated .injective.peggy.v1.OutgoingTransferTx transactions = 3 [json_name = "transactions"];
  int transactions_size() const;
  private:
  int _internal_transactions_size() const;

  public:
  void clear_transactions() ;
  ::injective::peggy::v1::OutgoingTransferTx* mutable_transactions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::peggy::v1::OutgoingTransferTx >*
      mutable_transactions();
  private:
  const ::injective::peggy::v1::OutgoingTransferTx& _internal_transactions(int index) const;
  ::injective::peggy::v1::OutgoingTransferTx* _internal_add_transactions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::peggy::v1::OutgoingTransferTx>& _internal_transactions() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::peggy::v1::OutgoingTransferTx>* _internal_mutable_transactions();
  public:
  const ::injective::peggy::v1::OutgoingTransferTx& transactions(int index) const;
  ::injective::peggy::v1::OutgoingTransferTx* add_transactions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::peggy::v1::OutgoingTransferTx >&
      transactions() const;
  // string token_contract = 4 [json_name = "tokenContract"];
  void clear_token_contract() ;
  const std::string& token_contract() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_token_contract(Arg_&& arg, Args_... args);
  std::string* mutable_token_contract();
  PROTOBUF_NODISCARD std::string* release_token_contract();
  void set_allocated_token_contract(std::string* ptr);

  private:
  const std::string& _internal_token_contract() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token_contract(
      const std::string& value);
  std::string* _internal_mutable_token_contract();

  public:
  // uint64 batch_nonce = 1 [json_name = "batchNonce"];
  void clear_batch_nonce() ;
  ::uint64_t batch_nonce() const;
  void set_batch_nonce(::uint64_t value);

  private:
  ::uint64_t _internal_batch_nonce() const;
  void _internal_set_batch_nonce(::uint64_t value);

  public:
  // uint64 batch_timeout = 2 [json_name = "batchTimeout"];
  void clear_batch_timeout() ;
  ::uint64_t batch_timeout() const;
  void set_batch_timeout(::uint64_t value);

  private:
  ::uint64_t _internal_batch_timeout() const;
  void _internal_set_batch_timeout(::uint64_t value);

  public:
  // uint64 block = 5 [json_name = "block"];
  void clear_block() ;
  ::uint64_t block() const;
  void set_block(::uint64_t value);

  private:
  ::uint64_t _internal_block() const;
  void _internal_set_block(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:injective.peggy.v1.OutgoingTxBatch)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::peggy::v1::OutgoingTransferTx > transactions_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_contract_;
    ::uint64_t batch_nonce_;
    ::uint64_t batch_timeout_;
    ::uint64_t block_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2fpeggy_2fv1_2fbatch_2eproto;
};// -------------------------------------------------------------------

class OutgoingTransferTx final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.peggy.v1.OutgoingTransferTx) */ {
 public:
  inline OutgoingTransferTx() : OutgoingTransferTx(nullptr) {}
  ~OutgoingTransferTx() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR OutgoingTransferTx(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OutgoingTransferTx(const OutgoingTransferTx& from);
  OutgoingTransferTx(OutgoingTransferTx&& from) noexcept
    : OutgoingTransferTx() {
    *this = ::std::move(from);
  }

  inline OutgoingTransferTx& operator=(const OutgoingTransferTx& from) {
    CopyFrom(from);
    return *this;
  }
  inline OutgoingTransferTx& operator=(OutgoingTransferTx&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OutgoingTransferTx& default_instance() {
    return *internal_default_instance();
  }
  static inline const OutgoingTransferTx* internal_default_instance() {
    return reinterpret_cast<const OutgoingTransferTx*>(
               &_OutgoingTransferTx_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(OutgoingTransferTx& a, OutgoingTransferTx& b) {
    a.Swap(&b);
  }
  inline void Swap(OutgoingTransferTx* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OutgoingTransferTx* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OutgoingTransferTx* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OutgoingTransferTx>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OutgoingTransferTx& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const OutgoingTransferTx& from) {
    OutgoingTransferTx::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OutgoingTransferTx* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.peggy.v1.OutgoingTransferTx";
  }
  protected:
  explicit OutgoingTransferTx(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSenderFieldNumber = 2,
    kDestAddressFieldNumber = 3,
    kErc20TokenFieldNumber = 4,
    kErc20FeeFieldNumber = 5,
    kIdFieldNumber = 1,
  };
  // string sender = 2 [json_name = "sender"];
  void clear_sender() ;
  const std::string& sender() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_sender(Arg_&& arg, Args_... args);
  std::string* mutable_sender();
  PROTOBUF_NODISCARD std::string* release_sender();
  void set_allocated_sender(std::string* ptr);

  private:
  const std::string& _internal_sender() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sender(
      const std::string& value);
  std::string* _internal_mutable_sender();

  public:
  // string dest_address = 3 [json_name = "destAddress"];
  void clear_dest_address() ;
  const std::string& dest_address() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_dest_address(Arg_&& arg, Args_... args);
  std::string* mutable_dest_address();
  PROTOBUF_NODISCARD std::string* release_dest_address();
  void set_allocated_dest_address(std::string* ptr);

  private:
  const std::string& _internal_dest_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dest_address(
      const std::string& value);
  std::string* _internal_mutable_dest_address();

  public:
  // .injective.peggy.v1.ERC20Token erc20_token = 4 [json_name = "erc20Token"];
  bool has_erc20_token() const;
  void clear_erc20_token() ;
  const ::injective::peggy::v1::ERC20Token& erc20_token() const;
  PROTOBUF_NODISCARD ::injective::peggy::v1::ERC20Token* release_erc20_token();
  ::injective::peggy::v1::ERC20Token* mutable_erc20_token();
  void set_allocated_erc20_token(::injective::peggy::v1::ERC20Token* erc20_token);
  private:
  const ::injective::peggy::v1::ERC20Token& _internal_erc20_token() const;
  ::injective::peggy::v1::ERC20Token* _internal_mutable_erc20_token();
  public:
  void unsafe_arena_set_allocated_erc20_token(
      ::injective::peggy::v1::ERC20Token* erc20_token);
  ::injective::peggy::v1::ERC20Token* unsafe_arena_release_erc20_token();
  // .injective.peggy.v1.ERC20Token erc20_fee = 5 [json_name = "erc20Fee"];
  bool has_erc20_fee() const;
  void clear_erc20_fee() ;
  const ::injective::peggy::v1::ERC20Token& erc20_fee() const;
  PROTOBUF_NODISCARD ::injective::peggy::v1::ERC20Token* release_erc20_fee();
  ::injective::peggy::v1::ERC20Token* mutable_erc20_fee();
  void set_allocated_erc20_fee(::injective::peggy::v1::ERC20Token* erc20_fee);
  private:
  const ::injective::peggy::v1::ERC20Token& _internal_erc20_fee() const;
  ::injective::peggy::v1::ERC20Token* _internal_mutable_erc20_fee();
  public:
  void unsafe_arena_set_allocated_erc20_fee(
      ::injective::peggy::v1::ERC20Token* erc20_fee);
  ::injective::peggy::v1::ERC20Token* unsafe_arena_release_erc20_fee();
  // uint64 id = 1 [json_name = "id"];
  void clear_id() ;
  ::uint64_t id() const;
  void set_id(::uint64_t value);

  private:
  ::uint64_t _internal_id() const;
  void _internal_set_id(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:injective.peggy.v1.OutgoingTransferTx)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sender_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dest_address_;
    ::injective::peggy::v1::ERC20Token* erc20_token_;
    ::injective::peggy::v1::ERC20Token* erc20_fee_;
    ::uint64_t id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2fpeggy_2fv1_2fbatch_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// OutgoingTxBatch

// uint64 batch_nonce = 1 [json_name = "batchNonce"];
inline void OutgoingTxBatch::clear_batch_nonce() {
  _impl_.batch_nonce_ = ::uint64_t{0u};
}
inline ::uint64_t OutgoingTxBatch::batch_nonce() const {
  // @@protoc_insertion_point(field_get:injective.peggy.v1.OutgoingTxBatch.batch_nonce)
  return _internal_batch_nonce();
}
inline void OutgoingTxBatch::set_batch_nonce(::uint64_t value) {
  _internal_set_batch_nonce(value);
  // @@protoc_insertion_point(field_set:injective.peggy.v1.OutgoingTxBatch.batch_nonce)
}
inline ::uint64_t OutgoingTxBatch::_internal_batch_nonce() const {
  return _impl_.batch_nonce_;
}
inline void OutgoingTxBatch::_internal_set_batch_nonce(::uint64_t value) {
  ;
  _impl_.batch_nonce_ = value;
}

// uint64 batch_timeout = 2 [json_name = "batchTimeout"];
inline void OutgoingTxBatch::clear_batch_timeout() {
  _impl_.batch_timeout_ = ::uint64_t{0u};
}
inline ::uint64_t OutgoingTxBatch::batch_timeout() const {
  // @@protoc_insertion_point(field_get:injective.peggy.v1.OutgoingTxBatch.batch_timeout)
  return _internal_batch_timeout();
}
inline void OutgoingTxBatch::set_batch_timeout(::uint64_t value) {
  _internal_set_batch_timeout(value);
  // @@protoc_insertion_point(field_set:injective.peggy.v1.OutgoingTxBatch.batch_timeout)
}
inline ::uint64_t OutgoingTxBatch::_internal_batch_timeout() const {
  return _impl_.batch_timeout_;
}
inline void OutgoingTxBatch::_internal_set_batch_timeout(::uint64_t value) {
  ;
  _impl_.batch_timeout_ = value;
}

// repeated .injective.peggy.v1.OutgoingTransferTx transactions = 3 [json_name = "transactions"];
inline int OutgoingTxBatch::_internal_transactions_size() const {
  return _impl_.transactions_.size();
}
inline int OutgoingTxBatch::transactions_size() const {
  return _internal_transactions_size();
}
inline void OutgoingTxBatch::clear_transactions() {
  _internal_mutable_transactions()->Clear();
}
inline ::injective::peggy::v1::OutgoingTransferTx* OutgoingTxBatch::mutable_transactions(int index) {
  // @@protoc_insertion_point(field_mutable:injective.peggy.v1.OutgoingTxBatch.transactions)
  return _internal_mutable_transactions()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::peggy::v1::OutgoingTransferTx >*
OutgoingTxBatch::mutable_transactions() {
  // @@protoc_insertion_point(field_mutable_list:injective.peggy.v1.OutgoingTxBatch.transactions)
  return _internal_mutable_transactions();
}
inline const ::injective::peggy::v1::OutgoingTransferTx& OutgoingTxBatch::_internal_transactions(int index) const {
  return _internal_transactions().Get(index);
}
inline const ::injective::peggy::v1::OutgoingTransferTx& OutgoingTxBatch::transactions(int index) const {
  // @@protoc_insertion_point(field_get:injective.peggy.v1.OutgoingTxBatch.transactions)
  return _internal_transactions(index);
}
inline ::injective::peggy::v1::OutgoingTransferTx* OutgoingTxBatch::_internal_add_transactions() {
  return _internal_mutable_transactions()->Add();
}
inline ::injective::peggy::v1::OutgoingTransferTx* OutgoingTxBatch::add_transactions() {
  ::injective::peggy::v1::OutgoingTransferTx* _add = _internal_add_transactions();
  // @@protoc_insertion_point(field_add:injective.peggy.v1.OutgoingTxBatch.transactions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::peggy::v1::OutgoingTransferTx >&
OutgoingTxBatch::transactions() const {
  // @@protoc_insertion_point(field_list:injective.peggy.v1.OutgoingTxBatch.transactions)
  return _internal_transactions();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::peggy::v1::OutgoingTransferTx>&
OutgoingTxBatch::_internal_transactions() const {
  return _impl_.transactions_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::peggy::v1::OutgoingTransferTx>*
OutgoingTxBatch::_internal_mutable_transactions() {
  return &_impl_.transactions_;
}

// string token_contract = 4 [json_name = "tokenContract"];
inline void OutgoingTxBatch::clear_token_contract() {
  _impl_.token_contract_.ClearToEmpty();
}
inline const std::string& OutgoingTxBatch::token_contract() const {
  // @@protoc_insertion_point(field_get:injective.peggy.v1.OutgoingTxBatch.token_contract)
  return _internal_token_contract();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OutgoingTxBatch::set_token_contract(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.token_contract_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.peggy.v1.OutgoingTxBatch.token_contract)
}
inline std::string* OutgoingTxBatch::mutable_token_contract() {
  std::string* _s = _internal_mutable_token_contract();
  // @@protoc_insertion_point(field_mutable:injective.peggy.v1.OutgoingTxBatch.token_contract)
  return _s;
}
inline const std::string& OutgoingTxBatch::_internal_token_contract() const {
  return _impl_.token_contract_.Get();
}
inline void OutgoingTxBatch::_internal_set_token_contract(const std::string& value) {
  ;


  _impl_.token_contract_.Set(value, GetArenaForAllocation());
}
inline std::string* OutgoingTxBatch::_internal_mutable_token_contract() {
  ;
  return _impl_.token_contract_.Mutable( GetArenaForAllocation());
}
inline std::string* OutgoingTxBatch::release_token_contract() {
  // @@protoc_insertion_point(field_release:injective.peggy.v1.OutgoingTxBatch.token_contract)
  return _impl_.token_contract_.Release();
}
inline void OutgoingTxBatch::set_allocated_token_contract(std::string* value) {
  _impl_.token_contract_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.token_contract_.IsDefault()) {
          _impl_.token_contract_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.peggy.v1.OutgoingTxBatch.token_contract)
}

// uint64 block = 5 [json_name = "block"];
inline void OutgoingTxBatch::clear_block() {
  _impl_.block_ = ::uint64_t{0u};
}
inline ::uint64_t OutgoingTxBatch::block() const {
  // @@protoc_insertion_point(field_get:injective.peggy.v1.OutgoingTxBatch.block)
  return _internal_block();
}
inline void OutgoingTxBatch::set_block(::uint64_t value) {
  _internal_set_block(value);
  // @@protoc_insertion_point(field_set:injective.peggy.v1.OutgoingTxBatch.block)
}
inline ::uint64_t OutgoingTxBatch::_internal_block() const {
  return _impl_.block_;
}
inline void OutgoingTxBatch::_internal_set_block(::uint64_t value) {
  ;
  _impl_.block_ = value;
}

// -------------------------------------------------------------------

// OutgoingTransferTx

// uint64 id = 1 [json_name = "id"];
inline void OutgoingTransferTx::clear_id() {
  _impl_.id_ = ::uint64_t{0u};
}
inline ::uint64_t OutgoingTransferTx::id() const {
  // @@protoc_insertion_point(field_get:injective.peggy.v1.OutgoingTransferTx.id)
  return _internal_id();
}
inline void OutgoingTransferTx::set_id(::uint64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:injective.peggy.v1.OutgoingTransferTx.id)
}
inline ::uint64_t OutgoingTransferTx::_internal_id() const {
  return _impl_.id_;
}
inline void OutgoingTransferTx::_internal_set_id(::uint64_t value) {
  ;
  _impl_.id_ = value;
}

// string sender = 2 [json_name = "sender"];
inline void OutgoingTransferTx::clear_sender() {
  _impl_.sender_.ClearToEmpty();
}
inline const std::string& OutgoingTransferTx::sender() const {
  // @@protoc_insertion_point(field_get:injective.peggy.v1.OutgoingTransferTx.sender)
  return _internal_sender();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OutgoingTransferTx::set_sender(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.sender_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.peggy.v1.OutgoingTransferTx.sender)
}
inline std::string* OutgoingTransferTx::mutable_sender() {
  std::string* _s = _internal_mutable_sender();
  // @@protoc_insertion_point(field_mutable:injective.peggy.v1.OutgoingTransferTx.sender)
  return _s;
}
inline const std::string& OutgoingTransferTx::_internal_sender() const {
  return _impl_.sender_.Get();
}
inline void OutgoingTransferTx::_internal_set_sender(const std::string& value) {
  ;


  _impl_.sender_.Set(value, GetArenaForAllocation());
}
inline std::string* OutgoingTransferTx::_internal_mutable_sender() {
  ;
  return _impl_.sender_.Mutable( GetArenaForAllocation());
}
inline std::string* OutgoingTransferTx::release_sender() {
  // @@protoc_insertion_point(field_release:injective.peggy.v1.OutgoingTransferTx.sender)
  return _impl_.sender_.Release();
}
inline void OutgoingTransferTx::set_allocated_sender(std::string* value) {
  _impl_.sender_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.sender_.IsDefault()) {
          _impl_.sender_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.peggy.v1.OutgoingTransferTx.sender)
}

// string dest_address = 3 [json_name = "destAddress"];
inline void OutgoingTransferTx::clear_dest_address() {
  _impl_.dest_address_.ClearToEmpty();
}
inline const std::string& OutgoingTransferTx::dest_address() const {
  // @@protoc_insertion_point(field_get:injective.peggy.v1.OutgoingTransferTx.dest_address)
  return _internal_dest_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OutgoingTransferTx::set_dest_address(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.dest_address_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.peggy.v1.OutgoingTransferTx.dest_address)
}
inline std::string* OutgoingTransferTx::mutable_dest_address() {
  std::string* _s = _internal_mutable_dest_address();
  // @@protoc_insertion_point(field_mutable:injective.peggy.v1.OutgoingTransferTx.dest_address)
  return _s;
}
inline const std::string& OutgoingTransferTx::_internal_dest_address() const {
  return _impl_.dest_address_.Get();
}
inline void OutgoingTransferTx::_internal_set_dest_address(const std::string& value) {
  ;


  _impl_.dest_address_.Set(value, GetArenaForAllocation());
}
inline std::string* OutgoingTransferTx::_internal_mutable_dest_address() {
  ;
  return _impl_.dest_address_.Mutable( GetArenaForAllocation());
}
inline std::string* OutgoingTransferTx::release_dest_address() {
  // @@protoc_insertion_point(field_release:injective.peggy.v1.OutgoingTransferTx.dest_address)
  return _impl_.dest_address_.Release();
}
inline void OutgoingTransferTx::set_allocated_dest_address(std::string* value) {
  _impl_.dest_address_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.dest_address_.IsDefault()) {
          _impl_.dest_address_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.peggy.v1.OutgoingTransferTx.dest_address)
}

// .injective.peggy.v1.ERC20Token erc20_token = 4 [json_name = "erc20Token"];
inline bool OutgoingTransferTx::has_erc20_token() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.erc20_token_ != nullptr);
  return value;
}
inline const ::injective::peggy::v1::ERC20Token& OutgoingTransferTx::_internal_erc20_token() const {
  const ::injective::peggy::v1::ERC20Token* p = _impl_.erc20_token_;
  return p != nullptr ? *p : reinterpret_cast<const ::injective::peggy::v1::ERC20Token&>(
      ::injective::peggy::v1::_ERC20Token_default_instance_);
}
inline const ::injective::peggy::v1::ERC20Token& OutgoingTransferTx::erc20_token() const {
  // @@protoc_insertion_point(field_get:injective.peggy.v1.OutgoingTransferTx.erc20_token)
  return _internal_erc20_token();
}
inline void OutgoingTransferTx::unsafe_arena_set_allocated_erc20_token(
    ::injective::peggy::v1::ERC20Token* erc20_token) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.erc20_token_);
  }
  _impl_.erc20_token_ = erc20_token;
  if (erc20_token) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:injective.peggy.v1.OutgoingTransferTx.erc20_token)
}
inline ::injective::peggy::v1::ERC20Token* OutgoingTransferTx::release_erc20_token() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::injective::peggy::v1::ERC20Token* temp = _impl_.erc20_token_;
  _impl_.erc20_token_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::injective::peggy::v1::ERC20Token* OutgoingTransferTx::unsafe_arena_release_erc20_token() {
  // @@protoc_insertion_point(field_release:injective.peggy.v1.OutgoingTransferTx.erc20_token)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::injective::peggy::v1::ERC20Token* temp = _impl_.erc20_token_;
  _impl_.erc20_token_ = nullptr;
  return temp;
}
inline ::injective::peggy::v1::ERC20Token* OutgoingTransferTx::_internal_mutable_erc20_token() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.erc20_token_ == nullptr) {
    auto* p = CreateMaybeMessage<::injective::peggy::v1::ERC20Token>(GetArenaForAllocation());
    _impl_.erc20_token_ = p;
  }
  return _impl_.erc20_token_;
}
inline ::injective::peggy::v1::ERC20Token* OutgoingTransferTx::mutable_erc20_token() {
  ::injective::peggy::v1::ERC20Token* _msg = _internal_mutable_erc20_token();
  // @@protoc_insertion_point(field_mutable:injective.peggy.v1.OutgoingTransferTx.erc20_token)
  return _msg;
}
inline void OutgoingTransferTx::set_allocated_erc20_token(::injective::peggy::v1::ERC20Token* erc20_token) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.erc20_token_);
  }
  if (erc20_token) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(erc20_token));
    if (message_arena != submessage_arena) {
      erc20_token = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, erc20_token, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.erc20_token_ = erc20_token;
  // @@protoc_insertion_point(field_set_allocated:injective.peggy.v1.OutgoingTransferTx.erc20_token)
}

// .injective.peggy.v1.ERC20Token erc20_fee = 5 [json_name = "erc20Fee"];
inline bool OutgoingTransferTx::has_erc20_fee() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.erc20_fee_ != nullptr);
  return value;
}
inline const ::injective::peggy::v1::ERC20Token& OutgoingTransferTx::_internal_erc20_fee() const {
  const ::injective::peggy::v1::ERC20Token* p = _impl_.erc20_fee_;
  return p != nullptr ? *p : reinterpret_cast<const ::injective::peggy::v1::ERC20Token&>(
      ::injective::peggy::v1::_ERC20Token_default_instance_);
}
inline const ::injective::peggy::v1::ERC20Token& OutgoingTransferTx::erc20_fee() const {
  // @@protoc_insertion_point(field_get:injective.peggy.v1.OutgoingTransferTx.erc20_fee)
  return _internal_erc20_fee();
}
inline void OutgoingTransferTx::unsafe_arena_set_allocated_erc20_fee(
    ::injective::peggy::v1::ERC20Token* erc20_fee) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.erc20_fee_);
  }
  _impl_.erc20_fee_ = erc20_fee;
  if (erc20_fee) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:injective.peggy.v1.OutgoingTransferTx.erc20_fee)
}
inline ::injective::peggy::v1::ERC20Token* OutgoingTransferTx::release_erc20_fee() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::injective::peggy::v1::ERC20Token* temp = _impl_.erc20_fee_;
  _impl_.erc20_fee_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::injective::peggy::v1::ERC20Token* OutgoingTransferTx::unsafe_arena_release_erc20_fee() {
  // @@protoc_insertion_point(field_release:injective.peggy.v1.OutgoingTransferTx.erc20_fee)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::injective::peggy::v1::ERC20Token* temp = _impl_.erc20_fee_;
  _impl_.erc20_fee_ = nullptr;
  return temp;
}
inline ::injective::peggy::v1::ERC20Token* OutgoingTransferTx::_internal_mutable_erc20_fee() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.erc20_fee_ == nullptr) {
    auto* p = CreateMaybeMessage<::injective::peggy::v1::ERC20Token>(GetArenaForAllocation());
    _impl_.erc20_fee_ = p;
  }
  return _impl_.erc20_fee_;
}
inline ::injective::peggy::v1::ERC20Token* OutgoingTransferTx::mutable_erc20_fee() {
  ::injective::peggy::v1::ERC20Token* _msg = _internal_mutable_erc20_fee();
  // @@protoc_insertion_point(field_mutable:injective.peggy.v1.OutgoingTransferTx.erc20_fee)
  return _msg;
}
inline void OutgoingTransferTx::set_allocated_erc20_fee(::injective::peggy::v1::ERC20Token* erc20_fee) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.erc20_fee_);
  }
  if (erc20_fee) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(erc20_fee));
    if (message_arena != submessage_arena) {
      erc20_fee = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, erc20_fee, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.erc20_fee_ = erc20_fee;
  // @@protoc_insertion_point(field_set_allocated:injective.peggy.v1.OutgoingTransferTx.erc20_fee)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace peggy
}  // namespace injective


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_injective_2fpeggy_2fv1_2fbatch_2eproto_2epb_2eh

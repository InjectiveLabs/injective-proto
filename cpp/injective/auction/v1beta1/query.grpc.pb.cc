// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: injective/auction/v1beta1/query.proto

#include "injective/auction/v1beta1/query.pb.h"
#include "injective/auction/v1beta1/query.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace injective {
namespace auction {
namespace v1beta1 {

static const char* Query_method_names[] = {
  "/injective.auction.v1beta1.Query/AuctionParams",
  "/injective.auction.v1beta1.Query/CurrentAuctionBasket",
  "/injective.auction.v1beta1.Query/AuctionModuleState",
};

std::unique_ptr< Query::Stub> Query::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Query::Stub> stub(new Query::Stub(channel, options));
  return stub;
}

Query::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_AuctionParams_(Query_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CurrentAuctionBasket_(Query_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AuctionModuleState_(Query_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Query::Stub::AuctionParams(::grpc::ClientContext* context, const ::injective::auction::v1beta1::QueryAuctionParamsRequest& request, ::injective::auction::v1beta1::QueryAuctionParamsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::auction::v1beta1::QueryAuctionParamsRequest, ::injective::auction::v1beta1::QueryAuctionParamsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AuctionParams_, context, request, response);
}

void Query::Stub::async::AuctionParams(::grpc::ClientContext* context, const ::injective::auction::v1beta1::QueryAuctionParamsRequest* request, ::injective::auction::v1beta1::QueryAuctionParamsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::auction::v1beta1::QueryAuctionParamsRequest, ::injective::auction::v1beta1::QueryAuctionParamsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AuctionParams_, context, request, response, std::move(f));
}

void Query::Stub::async::AuctionParams(::grpc::ClientContext* context, const ::injective::auction::v1beta1::QueryAuctionParamsRequest* request, ::injective::auction::v1beta1::QueryAuctionParamsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AuctionParams_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::auction::v1beta1::QueryAuctionParamsResponse>* Query::Stub::PrepareAsyncAuctionParamsRaw(::grpc::ClientContext* context, const ::injective::auction::v1beta1::QueryAuctionParamsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::auction::v1beta1::QueryAuctionParamsResponse, ::injective::auction::v1beta1::QueryAuctionParamsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AuctionParams_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::auction::v1beta1::QueryAuctionParamsResponse>* Query::Stub::AsyncAuctionParamsRaw(::grpc::ClientContext* context, const ::injective::auction::v1beta1::QueryAuctionParamsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAuctionParamsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::CurrentAuctionBasket(::grpc::ClientContext* context, const ::injective::auction::v1beta1::QueryCurrentAuctionBasketRequest& request, ::injective::auction::v1beta1::QueryCurrentAuctionBasketResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::auction::v1beta1::QueryCurrentAuctionBasketRequest, ::injective::auction::v1beta1::QueryCurrentAuctionBasketResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CurrentAuctionBasket_, context, request, response);
}

void Query::Stub::async::CurrentAuctionBasket(::grpc::ClientContext* context, const ::injective::auction::v1beta1::QueryCurrentAuctionBasketRequest* request, ::injective::auction::v1beta1::QueryCurrentAuctionBasketResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::auction::v1beta1::QueryCurrentAuctionBasketRequest, ::injective::auction::v1beta1::QueryCurrentAuctionBasketResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CurrentAuctionBasket_, context, request, response, std::move(f));
}

void Query::Stub::async::CurrentAuctionBasket(::grpc::ClientContext* context, const ::injective::auction::v1beta1::QueryCurrentAuctionBasketRequest* request, ::injective::auction::v1beta1::QueryCurrentAuctionBasketResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CurrentAuctionBasket_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::auction::v1beta1::QueryCurrentAuctionBasketResponse>* Query::Stub::PrepareAsyncCurrentAuctionBasketRaw(::grpc::ClientContext* context, const ::injective::auction::v1beta1::QueryCurrentAuctionBasketRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::auction::v1beta1::QueryCurrentAuctionBasketResponse, ::injective::auction::v1beta1::QueryCurrentAuctionBasketRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CurrentAuctionBasket_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::auction::v1beta1::QueryCurrentAuctionBasketResponse>* Query::Stub::AsyncCurrentAuctionBasketRaw(::grpc::ClientContext* context, const ::injective::auction::v1beta1::QueryCurrentAuctionBasketRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCurrentAuctionBasketRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::AuctionModuleState(::grpc::ClientContext* context, const ::injective::auction::v1beta1::QueryModuleStateRequest& request, ::injective::auction::v1beta1::QueryModuleStateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::auction::v1beta1::QueryModuleStateRequest, ::injective::auction::v1beta1::QueryModuleStateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AuctionModuleState_, context, request, response);
}

void Query::Stub::async::AuctionModuleState(::grpc::ClientContext* context, const ::injective::auction::v1beta1::QueryModuleStateRequest* request, ::injective::auction::v1beta1::QueryModuleStateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::auction::v1beta1::QueryModuleStateRequest, ::injective::auction::v1beta1::QueryModuleStateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AuctionModuleState_, context, request, response, std::move(f));
}

void Query::Stub::async::AuctionModuleState(::grpc::ClientContext* context, const ::injective::auction::v1beta1::QueryModuleStateRequest* request, ::injective::auction::v1beta1::QueryModuleStateResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AuctionModuleState_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::auction::v1beta1::QueryModuleStateResponse>* Query::Stub::PrepareAsyncAuctionModuleStateRaw(::grpc::ClientContext* context, const ::injective::auction::v1beta1::QueryModuleStateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::auction::v1beta1::QueryModuleStateResponse, ::injective::auction::v1beta1::QueryModuleStateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AuctionModuleState_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::auction::v1beta1::QueryModuleStateResponse>* Query::Stub::AsyncAuctionModuleStateRaw(::grpc::ClientContext* context, const ::injective::auction::v1beta1::QueryModuleStateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAuctionModuleStateRaw(context, request, cq);
  result->StartCall();
  return result;
}

Query::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::injective::auction::v1beta1::QueryAuctionParamsRequest, ::injective::auction::v1beta1::QueryAuctionParamsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::auction::v1beta1::QueryAuctionParamsRequest* req,
             ::injective::auction::v1beta1::QueryAuctionParamsResponse* resp) {
               return service->AuctionParams(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::injective::auction::v1beta1::QueryCurrentAuctionBasketRequest, ::injective::auction::v1beta1::QueryCurrentAuctionBasketResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::auction::v1beta1::QueryCurrentAuctionBasketRequest* req,
             ::injective::auction::v1beta1::QueryCurrentAuctionBasketResponse* resp) {
               return service->CurrentAuctionBasket(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::injective::auction::v1beta1::QueryModuleStateRequest, ::injective::auction::v1beta1::QueryModuleStateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::auction::v1beta1::QueryModuleStateRequest* req,
             ::injective::auction::v1beta1::QueryModuleStateResponse* resp) {
               return service->AuctionModuleState(ctx, req, resp);
             }, this)));
}

Query::Service::~Service() {
}

::grpc::Status Query::Service::AuctionParams(::grpc::ServerContext* context, const ::injective::auction::v1beta1::QueryAuctionParamsRequest* request, ::injective::auction::v1beta1::QueryAuctionParamsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::CurrentAuctionBasket(::grpc::ServerContext* context, const ::injective::auction::v1beta1::QueryCurrentAuctionBasketRequest* request, ::injective::auction::v1beta1::QueryCurrentAuctionBasketResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::AuctionModuleState(::grpc::ServerContext* context, const ::injective::auction::v1beta1::QueryModuleStateRequest* request, ::injective::auction::v1beta1::QueryModuleStateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace injective
}  // namespace auction
}  // namespace v1beta1


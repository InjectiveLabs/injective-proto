// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: injective/auction/v1beta1/query.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_injective_2fauction_2fv1beta1_2fquery_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_injective_2fauction_2fv1beta1_2fquery_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "google/api/annotations.pb.h"
#include "injective/auction/v1beta1/auction.pb.h"
#include "injective/auction/v1beta1/genesis.pb.h"
#include "gogoproto/gogo.pb.h"
#include "cosmos/base/v1beta1/coin.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_injective_2fauction_2fv1beta1_2fquery_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_injective_2fauction_2fv1beta1_2fquery_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_injective_2fauction_2fv1beta1_2fquery_2eproto;
namespace injective {
namespace auction {
namespace v1beta1 {
class QueryAuctionParamsRequest;
struct QueryAuctionParamsRequestDefaultTypeInternal;
extern QueryAuctionParamsRequestDefaultTypeInternal _QueryAuctionParamsRequest_default_instance_;
class QueryAuctionParamsResponse;
struct QueryAuctionParamsResponseDefaultTypeInternal;
extern QueryAuctionParamsResponseDefaultTypeInternal _QueryAuctionParamsResponse_default_instance_;
class QueryCurrentAuctionBasketRequest;
struct QueryCurrentAuctionBasketRequestDefaultTypeInternal;
extern QueryCurrentAuctionBasketRequestDefaultTypeInternal _QueryCurrentAuctionBasketRequest_default_instance_;
class QueryCurrentAuctionBasketResponse;
struct QueryCurrentAuctionBasketResponseDefaultTypeInternal;
extern QueryCurrentAuctionBasketResponseDefaultTypeInternal _QueryCurrentAuctionBasketResponse_default_instance_;
class QueryModuleStateRequest;
struct QueryModuleStateRequestDefaultTypeInternal;
extern QueryModuleStateRequestDefaultTypeInternal _QueryModuleStateRequest_default_instance_;
class QueryModuleStateResponse;
struct QueryModuleStateResponseDefaultTypeInternal;
extern QueryModuleStateResponseDefaultTypeInternal _QueryModuleStateResponse_default_instance_;
}  // namespace v1beta1
}  // namespace auction
}  // namespace injective
PROTOBUF_NAMESPACE_OPEN
template <>
::injective::auction::v1beta1::QueryAuctionParamsRequest* Arena::CreateMaybeMessage<::injective::auction::v1beta1::QueryAuctionParamsRequest>(Arena*);
template <>
::injective::auction::v1beta1::QueryAuctionParamsResponse* Arena::CreateMaybeMessage<::injective::auction::v1beta1::QueryAuctionParamsResponse>(Arena*);
template <>
::injective::auction::v1beta1::QueryCurrentAuctionBasketRequest* Arena::CreateMaybeMessage<::injective::auction::v1beta1::QueryCurrentAuctionBasketRequest>(Arena*);
template <>
::injective::auction::v1beta1::QueryCurrentAuctionBasketResponse* Arena::CreateMaybeMessage<::injective::auction::v1beta1::QueryCurrentAuctionBasketResponse>(Arena*);
template <>
::injective::auction::v1beta1::QueryModuleStateRequest* Arena::CreateMaybeMessage<::injective::auction::v1beta1::QueryModuleStateRequest>(Arena*);
template <>
::injective::auction::v1beta1::QueryModuleStateResponse* Arena::CreateMaybeMessage<::injective::auction::v1beta1::QueryModuleStateResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace injective {
namespace auction {
namespace v1beta1 {

// ===================================================================


// -------------------------------------------------------------------

class QueryAuctionParamsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:injective.auction.v1beta1.QueryAuctionParamsRequest) */ {
 public:
  inline QueryAuctionParamsRequest() : QueryAuctionParamsRequest(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryAuctionParamsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryAuctionParamsRequest(const QueryAuctionParamsRequest& from);
  QueryAuctionParamsRequest(QueryAuctionParamsRequest&& from) noexcept
    : QueryAuctionParamsRequest() {
    *this = ::std::move(from);
  }

  inline QueryAuctionParamsRequest& operator=(const QueryAuctionParamsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryAuctionParamsRequest& operator=(QueryAuctionParamsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryAuctionParamsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryAuctionParamsRequest* internal_default_instance() {
    return reinterpret_cast<const QueryAuctionParamsRequest*>(
               &_QueryAuctionParamsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(QueryAuctionParamsRequest& a, QueryAuctionParamsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryAuctionParamsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryAuctionParamsRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryAuctionParamsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryAuctionParamsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const QueryAuctionParamsRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const QueryAuctionParamsRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.auction.v1beta1.QueryAuctionParamsRequest";
  }
  protected:
  explicit QueryAuctionParamsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:injective.auction.v1beta1.QueryAuctionParamsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_injective_2fauction_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryAuctionParamsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.auction.v1beta1.QueryAuctionParamsResponse) */ {
 public:
  inline QueryAuctionParamsResponse() : QueryAuctionParamsResponse(nullptr) {}
  ~QueryAuctionParamsResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryAuctionParamsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryAuctionParamsResponse(const QueryAuctionParamsResponse& from);
  QueryAuctionParamsResponse(QueryAuctionParamsResponse&& from) noexcept
    : QueryAuctionParamsResponse() {
    *this = ::std::move(from);
  }

  inline QueryAuctionParamsResponse& operator=(const QueryAuctionParamsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryAuctionParamsResponse& operator=(QueryAuctionParamsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryAuctionParamsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryAuctionParamsResponse* internal_default_instance() {
    return reinterpret_cast<const QueryAuctionParamsResponse*>(
               &_QueryAuctionParamsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(QueryAuctionParamsResponse& a, QueryAuctionParamsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryAuctionParamsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryAuctionParamsResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryAuctionParamsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryAuctionParamsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryAuctionParamsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryAuctionParamsResponse& from) {
    QueryAuctionParamsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryAuctionParamsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.auction.v1beta1.QueryAuctionParamsResponse";
  }
  protected:
  explicit QueryAuctionParamsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParamsFieldNumber = 1,
  };
  // .injective.auction.v1beta1.Params params = 1 [json_name = "params", (.gogoproto.nullable) = false];
  bool has_params() const;
  void clear_params() ;
  const ::injective::auction::v1beta1::Params& params() const;
  PROTOBUF_NODISCARD ::injective::auction::v1beta1::Params* release_params();
  ::injective::auction::v1beta1::Params* mutable_params();
  void set_allocated_params(::injective::auction::v1beta1::Params* params);
  private:
  const ::injective::auction::v1beta1::Params& _internal_params() const;
  ::injective::auction::v1beta1::Params* _internal_mutable_params();
  public:
  void unsafe_arena_set_allocated_params(
      ::injective::auction::v1beta1::Params* params);
  ::injective::auction::v1beta1::Params* unsafe_arena_release_params();
  // @@protoc_insertion_point(class_scope:injective.auction.v1beta1.QueryAuctionParamsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::injective::auction::v1beta1::Params* params_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2fauction_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryCurrentAuctionBasketRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:injective.auction.v1beta1.QueryCurrentAuctionBasketRequest) */ {
 public:
  inline QueryCurrentAuctionBasketRequest() : QueryCurrentAuctionBasketRequest(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryCurrentAuctionBasketRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryCurrentAuctionBasketRequest(const QueryCurrentAuctionBasketRequest& from);
  QueryCurrentAuctionBasketRequest(QueryCurrentAuctionBasketRequest&& from) noexcept
    : QueryCurrentAuctionBasketRequest() {
    *this = ::std::move(from);
  }

  inline QueryCurrentAuctionBasketRequest& operator=(const QueryCurrentAuctionBasketRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryCurrentAuctionBasketRequest& operator=(QueryCurrentAuctionBasketRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryCurrentAuctionBasketRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryCurrentAuctionBasketRequest* internal_default_instance() {
    return reinterpret_cast<const QueryCurrentAuctionBasketRequest*>(
               &_QueryCurrentAuctionBasketRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(QueryCurrentAuctionBasketRequest& a, QueryCurrentAuctionBasketRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryCurrentAuctionBasketRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryCurrentAuctionBasketRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryCurrentAuctionBasketRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryCurrentAuctionBasketRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const QueryCurrentAuctionBasketRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const QueryCurrentAuctionBasketRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.auction.v1beta1.QueryCurrentAuctionBasketRequest";
  }
  protected:
  explicit QueryCurrentAuctionBasketRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:injective.auction.v1beta1.QueryCurrentAuctionBasketRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_injective_2fauction_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryCurrentAuctionBasketResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.auction.v1beta1.QueryCurrentAuctionBasketResponse) */ {
 public:
  inline QueryCurrentAuctionBasketResponse() : QueryCurrentAuctionBasketResponse(nullptr) {}
  ~QueryCurrentAuctionBasketResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryCurrentAuctionBasketResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryCurrentAuctionBasketResponse(const QueryCurrentAuctionBasketResponse& from);
  QueryCurrentAuctionBasketResponse(QueryCurrentAuctionBasketResponse&& from) noexcept
    : QueryCurrentAuctionBasketResponse() {
    *this = ::std::move(from);
  }

  inline QueryCurrentAuctionBasketResponse& operator=(const QueryCurrentAuctionBasketResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryCurrentAuctionBasketResponse& operator=(QueryCurrentAuctionBasketResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryCurrentAuctionBasketResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryCurrentAuctionBasketResponse* internal_default_instance() {
    return reinterpret_cast<const QueryCurrentAuctionBasketResponse*>(
               &_QueryCurrentAuctionBasketResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(QueryCurrentAuctionBasketResponse& a, QueryCurrentAuctionBasketResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryCurrentAuctionBasketResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryCurrentAuctionBasketResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryCurrentAuctionBasketResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryCurrentAuctionBasketResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryCurrentAuctionBasketResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryCurrentAuctionBasketResponse& from) {
    QueryCurrentAuctionBasketResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryCurrentAuctionBasketResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.auction.v1beta1.QueryCurrentAuctionBasketResponse";
  }
  protected:
  explicit QueryCurrentAuctionBasketResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAmountFieldNumber = 1,
    kHighestBidderFieldNumber = 4,
    kHighestBidAmountFieldNumber = 5,
    kAuctionRoundFieldNumber = 2,
    kAuctionClosingTimeFieldNumber = 3,
  };
  // repeated .cosmos.base.v1beta1.Coin amount = 1 [json_name = "amount", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];
  int amount_size() const;
  private:
  int _internal_amount_size() const;

  public:
  void clear_amount() ;
  ::cosmos::base::v1beta1::Coin* mutable_amount(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin >*
      mutable_amount();
  private:
  const ::cosmos::base::v1beta1::Coin& _internal_amount(int index) const;
  ::cosmos::base::v1beta1::Coin* _internal_add_amount();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::v1beta1::Coin>& _internal_amount() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::v1beta1::Coin>* _internal_mutable_amount();
  public:
  const ::cosmos::base::v1beta1::Coin& amount(int index) const;
  ::cosmos::base::v1beta1::Coin* add_amount();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin >&
      amount() const;
  // string highestBidder = 4 [json_name = "highestBidder"];
  void clear_highestbidder() ;
  const std::string& highestbidder() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_highestbidder(Arg_&& arg, Args_... args);
  std::string* mutable_highestbidder();
  PROTOBUF_NODISCARD std::string* release_highestbidder();
  void set_allocated_highestbidder(std::string* ptr);

  private:
  const std::string& _internal_highestbidder() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_highestbidder(
      const std::string& value);
  std::string* _internal_mutable_highestbidder();

  public:
  // string highestBidAmount = 5 [json_name = "highestBidAmount", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int"];
  void clear_highestbidamount() ;
  const std::string& highestbidamount() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_highestbidamount(Arg_&& arg, Args_... args);
  std::string* mutable_highestbidamount();
  PROTOBUF_NODISCARD std::string* release_highestbidamount();
  void set_allocated_highestbidamount(std::string* ptr);

  private:
  const std::string& _internal_highestbidamount() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_highestbidamount(
      const std::string& value);
  std::string* _internal_mutable_highestbidamount();

  public:
  // uint64 auctionRound = 2 [json_name = "auctionRound"];
  void clear_auctionround() ;
  ::uint64_t auctionround() const;
  void set_auctionround(::uint64_t value);

  private:
  ::uint64_t _internal_auctionround() const;
  void _internal_set_auctionround(::uint64_t value);

  public:
  // int64 auctionClosingTime = 3 [json_name = "auctionClosingTime"];
  void clear_auctionclosingtime() ;
  ::int64_t auctionclosingtime() const;
  void set_auctionclosingtime(::int64_t value);

  private:
  ::int64_t _internal_auctionclosingtime() const;
  void _internal_set_auctionclosingtime(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:injective.auction.v1beta1.QueryCurrentAuctionBasketResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin > amount_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr highestbidder_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr highestbidamount_;
    ::uint64_t auctionround_;
    ::int64_t auctionclosingtime_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2fauction_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryModuleStateRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:injective.auction.v1beta1.QueryModuleStateRequest) */ {
 public:
  inline QueryModuleStateRequest() : QueryModuleStateRequest(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryModuleStateRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryModuleStateRequest(const QueryModuleStateRequest& from);
  QueryModuleStateRequest(QueryModuleStateRequest&& from) noexcept
    : QueryModuleStateRequest() {
    *this = ::std::move(from);
  }

  inline QueryModuleStateRequest& operator=(const QueryModuleStateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryModuleStateRequest& operator=(QueryModuleStateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryModuleStateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryModuleStateRequest* internal_default_instance() {
    return reinterpret_cast<const QueryModuleStateRequest*>(
               &_QueryModuleStateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(QueryModuleStateRequest& a, QueryModuleStateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryModuleStateRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryModuleStateRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryModuleStateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryModuleStateRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const QueryModuleStateRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const QueryModuleStateRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.auction.v1beta1.QueryModuleStateRequest";
  }
  protected:
  explicit QueryModuleStateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:injective.auction.v1beta1.QueryModuleStateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_injective_2fauction_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryModuleStateResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.auction.v1beta1.QueryModuleStateResponse) */ {
 public:
  inline QueryModuleStateResponse() : QueryModuleStateResponse(nullptr) {}
  ~QueryModuleStateResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryModuleStateResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryModuleStateResponse(const QueryModuleStateResponse& from);
  QueryModuleStateResponse(QueryModuleStateResponse&& from) noexcept
    : QueryModuleStateResponse() {
    *this = ::std::move(from);
  }

  inline QueryModuleStateResponse& operator=(const QueryModuleStateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryModuleStateResponse& operator=(QueryModuleStateResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryModuleStateResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryModuleStateResponse* internal_default_instance() {
    return reinterpret_cast<const QueryModuleStateResponse*>(
               &_QueryModuleStateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(QueryModuleStateResponse& a, QueryModuleStateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryModuleStateResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryModuleStateResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryModuleStateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryModuleStateResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryModuleStateResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryModuleStateResponse& from) {
    QueryModuleStateResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryModuleStateResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.auction.v1beta1.QueryModuleStateResponse";
  }
  protected:
  explicit QueryModuleStateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStateFieldNumber = 1,
  };
  // .injective.auction.v1beta1.GenesisState state = 1 [json_name = "state"];
  bool has_state() const;
  void clear_state() ;
  const ::injective::auction::v1beta1::GenesisState& state() const;
  PROTOBUF_NODISCARD ::injective::auction::v1beta1::GenesisState* release_state();
  ::injective::auction::v1beta1::GenesisState* mutable_state();
  void set_allocated_state(::injective::auction::v1beta1::GenesisState* state);
  private:
  const ::injective::auction::v1beta1::GenesisState& _internal_state() const;
  ::injective::auction::v1beta1::GenesisState* _internal_mutable_state();
  public:
  void unsafe_arena_set_allocated_state(
      ::injective::auction::v1beta1::GenesisState* state);
  ::injective::auction::v1beta1::GenesisState* unsafe_arena_release_state();
  // @@protoc_insertion_point(class_scope:injective.auction.v1beta1.QueryModuleStateResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::injective::auction::v1beta1::GenesisState* state_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2fauction_2fv1beta1_2fquery_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// QueryAuctionParamsRequest

// -------------------------------------------------------------------

// QueryAuctionParamsResponse

// .injective.auction.v1beta1.Params params = 1 [json_name = "params", (.gogoproto.nullable) = false];
inline bool QueryAuctionParamsResponse::has_params() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.params_ != nullptr);
  return value;
}
inline const ::injective::auction::v1beta1::Params& QueryAuctionParamsResponse::_internal_params() const {
  const ::injective::auction::v1beta1::Params* p = _impl_.params_;
  return p != nullptr ? *p : reinterpret_cast<const ::injective::auction::v1beta1::Params&>(
      ::injective::auction::v1beta1::_Params_default_instance_);
}
inline const ::injective::auction::v1beta1::Params& QueryAuctionParamsResponse::params() const {
  // @@protoc_insertion_point(field_get:injective.auction.v1beta1.QueryAuctionParamsResponse.params)
  return _internal_params();
}
inline void QueryAuctionParamsResponse::unsafe_arena_set_allocated_params(
    ::injective::auction::v1beta1::Params* params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.params_);
  }
  _impl_.params_ = params;
  if (params) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:injective.auction.v1beta1.QueryAuctionParamsResponse.params)
}
inline ::injective::auction::v1beta1::Params* QueryAuctionParamsResponse::release_params() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::injective::auction::v1beta1::Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::injective::auction::v1beta1::Params* QueryAuctionParamsResponse::unsafe_arena_release_params() {
  // @@protoc_insertion_point(field_release:injective.auction.v1beta1.QueryAuctionParamsResponse.params)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::injective::auction::v1beta1::Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
  return temp;
}
inline ::injective::auction::v1beta1::Params* QueryAuctionParamsResponse::_internal_mutable_params() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.params_ == nullptr) {
    auto* p = CreateMaybeMessage<::injective::auction::v1beta1::Params>(GetArenaForAllocation());
    _impl_.params_ = p;
  }
  return _impl_.params_;
}
inline ::injective::auction::v1beta1::Params* QueryAuctionParamsResponse::mutable_params() {
  ::injective::auction::v1beta1::Params* _msg = _internal_mutable_params();
  // @@protoc_insertion_point(field_mutable:injective.auction.v1beta1.QueryAuctionParamsResponse.params)
  return _msg;
}
inline void QueryAuctionParamsResponse::set_allocated_params(::injective::auction::v1beta1::Params* params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.params_);
  }
  if (params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(params));
    if (message_arena != submessage_arena) {
      params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, params, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.params_ = params;
  // @@protoc_insertion_point(field_set_allocated:injective.auction.v1beta1.QueryAuctionParamsResponse.params)
}

// -------------------------------------------------------------------

// QueryCurrentAuctionBasketRequest

// -------------------------------------------------------------------

// QueryCurrentAuctionBasketResponse

// repeated .cosmos.base.v1beta1.Coin amount = 1 [json_name = "amount", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];
inline int QueryCurrentAuctionBasketResponse::_internal_amount_size() const {
  return _impl_.amount_.size();
}
inline int QueryCurrentAuctionBasketResponse::amount_size() const {
  return _internal_amount_size();
}
inline ::cosmos::base::v1beta1::Coin* QueryCurrentAuctionBasketResponse::mutable_amount(int index) {
  // @@protoc_insertion_point(field_mutable:injective.auction.v1beta1.QueryCurrentAuctionBasketResponse.amount)
  return _internal_mutable_amount()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin >*
QueryCurrentAuctionBasketResponse::mutable_amount() {
  // @@protoc_insertion_point(field_mutable_list:injective.auction.v1beta1.QueryCurrentAuctionBasketResponse.amount)
  return _internal_mutable_amount();
}
inline const ::cosmos::base::v1beta1::Coin& QueryCurrentAuctionBasketResponse::_internal_amount(int index) const {
  return _internal_amount().Get(index);
}
inline const ::cosmos::base::v1beta1::Coin& QueryCurrentAuctionBasketResponse::amount(int index) const {
  // @@protoc_insertion_point(field_get:injective.auction.v1beta1.QueryCurrentAuctionBasketResponse.amount)
  return _internal_amount(index);
}
inline ::cosmos::base::v1beta1::Coin* QueryCurrentAuctionBasketResponse::_internal_add_amount() {
  return _internal_mutable_amount()->Add();
}
inline ::cosmos::base::v1beta1::Coin* QueryCurrentAuctionBasketResponse::add_amount() {
  ::cosmos::base::v1beta1::Coin* _add = _internal_add_amount();
  // @@protoc_insertion_point(field_add:injective.auction.v1beta1.QueryCurrentAuctionBasketResponse.amount)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin >&
QueryCurrentAuctionBasketResponse::amount() const {
  // @@protoc_insertion_point(field_list:injective.auction.v1beta1.QueryCurrentAuctionBasketResponse.amount)
  return _internal_amount();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::v1beta1::Coin>&
QueryCurrentAuctionBasketResponse::_internal_amount() const {
  return _impl_.amount_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::v1beta1::Coin>*
QueryCurrentAuctionBasketResponse::_internal_mutable_amount() {
  return &_impl_.amount_;
}

// uint64 auctionRound = 2 [json_name = "auctionRound"];
inline void QueryCurrentAuctionBasketResponse::clear_auctionround() {
  _impl_.auctionround_ = ::uint64_t{0u};
}
inline ::uint64_t QueryCurrentAuctionBasketResponse::auctionround() const {
  // @@protoc_insertion_point(field_get:injective.auction.v1beta1.QueryCurrentAuctionBasketResponse.auctionRound)
  return _internal_auctionround();
}
inline void QueryCurrentAuctionBasketResponse::set_auctionround(::uint64_t value) {
  _internal_set_auctionround(value);
  // @@protoc_insertion_point(field_set:injective.auction.v1beta1.QueryCurrentAuctionBasketResponse.auctionRound)
}
inline ::uint64_t QueryCurrentAuctionBasketResponse::_internal_auctionround() const {
  return _impl_.auctionround_;
}
inline void QueryCurrentAuctionBasketResponse::_internal_set_auctionround(::uint64_t value) {
  ;
  _impl_.auctionround_ = value;
}

// int64 auctionClosingTime = 3 [json_name = "auctionClosingTime"];
inline void QueryCurrentAuctionBasketResponse::clear_auctionclosingtime() {
  _impl_.auctionclosingtime_ = ::int64_t{0};
}
inline ::int64_t QueryCurrentAuctionBasketResponse::auctionclosingtime() const {
  // @@protoc_insertion_point(field_get:injective.auction.v1beta1.QueryCurrentAuctionBasketResponse.auctionClosingTime)
  return _internal_auctionclosingtime();
}
inline void QueryCurrentAuctionBasketResponse::set_auctionclosingtime(::int64_t value) {
  _internal_set_auctionclosingtime(value);
  // @@protoc_insertion_point(field_set:injective.auction.v1beta1.QueryCurrentAuctionBasketResponse.auctionClosingTime)
}
inline ::int64_t QueryCurrentAuctionBasketResponse::_internal_auctionclosingtime() const {
  return _impl_.auctionclosingtime_;
}
inline void QueryCurrentAuctionBasketResponse::_internal_set_auctionclosingtime(::int64_t value) {
  ;
  _impl_.auctionclosingtime_ = value;
}

// string highestBidder = 4 [json_name = "highestBidder"];
inline void QueryCurrentAuctionBasketResponse::clear_highestbidder() {
  _impl_.highestbidder_.ClearToEmpty();
}
inline const std::string& QueryCurrentAuctionBasketResponse::highestbidder() const {
  // @@protoc_insertion_point(field_get:injective.auction.v1beta1.QueryCurrentAuctionBasketResponse.highestBidder)
  return _internal_highestbidder();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryCurrentAuctionBasketResponse::set_highestbidder(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.highestbidder_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.auction.v1beta1.QueryCurrentAuctionBasketResponse.highestBidder)
}
inline std::string* QueryCurrentAuctionBasketResponse::mutable_highestbidder() {
  std::string* _s = _internal_mutable_highestbidder();
  // @@protoc_insertion_point(field_mutable:injective.auction.v1beta1.QueryCurrentAuctionBasketResponse.highestBidder)
  return _s;
}
inline const std::string& QueryCurrentAuctionBasketResponse::_internal_highestbidder() const {
  return _impl_.highestbidder_.Get();
}
inline void QueryCurrentAuctionBasketResponse::_internal_set_highestbidder(const std::string& value) {
  ;


  _impl_.highestbidder_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryCurrentAuctionBasketResponse::_internal_mutable_highestbidder() {
  ;
  return _impl_.highestbidder_.Mutable( GetArenaForAllocation());
}
inline std::string* QueryCurrentAuctionBasketResponse::release_highestbidder() {
  // @@protoc_insertion_point(field_release:injective.auction.v1beta1.QueryCurrentAuctionBasketResponse.highestBidder)
  return _impl_.highestbidder_.Release();
}
inline void QueryCurrentAuctionBasketResponse::set_allocated_highestbidder(std::string* value) {
  _impl_.highestbidder_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.highestbidder_.IsDefault()) {
          _impl_.highestbidder_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.auction.v1beta1.QueryCurrentAuctionBasketResponse.highestBidder)
}

// string highestBidAmount = 5 [json_name = "highestBidAmount", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int"];
inline void QueryCurrentAuctionBasketResponse::clear_highestbidamount() {
  _impl_.highestbidamount_.ClearToEmpty();
}
inline const std::string& QueryCurrentAuctionBasketResponse::highestbidamount() const {
  // @@protoc_insertion_point(field_get:injective.auction.v1beta1.QueryCurrentAuctionBasketResponse.highestBidAmount)
  return _internal_highestbidamount();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryCurrentAuctionBasketResponse::set_highestbidamount(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.highestbidamount_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.auction.v1beta1.QueryCurrentAuctionBasketResponse.highestBidAmount)
}
inline std::string* QueryCurrentAuctionBasketResponse::mutable_highestbidamount() {
  std::string* _s = _internal_mutable_highestbidamount();
  // @@protoc_insertion_point(field_mutable:injective.auction.v1beta1.QueryCurrentAuctionBasketResponse.highestBidAmount)
  return _s;
}
inline const std::string& QueryCurrentAuctionBasketResponse::_internal_highestbidamount() const {
  return _impl_.highestbidamount_.Get();
}
inline void QueryCurrentAuctionBasketResponse::_internal_set_highestbidamount(const std::string& value) {
  ;


  _impl_.highestbidamount_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryCurrentAuctionBasketResponse::_internal_mutable_highestbidamount() {
  ;
  return _impl_.highestbidamount_.Mutable( GetArenaForAllocation());
}
inline std::string* QueryCurrentAuctionBasketResponse::release_highestbidamount() {
  // @@protoc_insertion_point(field_release:injective.auction.v1beta1.QueryCurrentAuctionBasketResponse.highestBidAmount)
  return _impl_.highestbidamount_.Release();
}
inline void QueryCurrentAuctionBasketResponse::set_allocated_highestbidamount(std::string* value) {
  _impl_.highestbidamount_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.highestbidamount_.IsDefault()) {
          _impl_.highestbidamount_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.auction.v1beta1.QueryCurrentAuctionBasketResponse.highestBidAmount)
}

// -------------------------------------------------------------------

// QueryModuleStateRequest

// -------------------------------------------------------------------

// QueryModuleStateResponse

// .injective.auction.v1beta1.GenesisState state = 1 [json_name = "state"];
inline bool QueryModuleStateResponse::has_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.state_ != nullptr);
  return value;
}
inline const ::injective::auction::v1beta1::GenesisState& QueryModuleStateResponse::_internal_state() const {
  const ::injective::auction::v1beta1::GenesisState* p = _impl_.state_;
  return p != nullptr ? *p : reinterpret_cast<const ::injective::auction::v1beta1::GenesisState&>(
      ::injective::auction::v1beta1::_GenesisState_default_instance_);
}
inline const ::injective::auction::v1beta1::GenesisState& QueryModuleStateResponse::state() const {
  // @@protoc_insertion_point(field_get:injective.auction.v1beta1.QueryModuleStateResponse.state)
  return _internal_state();
}
inline void QueryModuleStateResponse::unsafe_arena_set_allocated_state(
    ::injective::auction::v1beta1::GenesisState* state) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.state_);
  }
  _impl_.state_ = state;
  if (state) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:injective.auction.v1beta1.QueryModuleStateResponse.state)
}
inline ::injective::auction::v1beta1::GenesisState* QueryModuleStateResponse::release_state() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::injective::auction::v1beta1::GenesisState* temp = _impl_.state_;
  _impl_.state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::injective::auction::v1beta1::GenesisState* QueryModuleStateResponse::unsafe_arena_release_state() {
  // @@protoc_insertion_point(field_release:injective.auction.v1beta1.QueryModuleStateResponse.state)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::injective::auction::v1beta1::GenesisState* temp = _impl_.state_;
  _impl_.state_ = nullptr;
  return temp;
}
inline ::injective::auction::v1beta1::GenesisState* QueryModuleStateResponse::_internal_mutable_state() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.state_ == nullptr) {
    auto* p = CreateMaybeMessage<::injective::auction::v1beta1::GenesisState>(GetArenaForAllocation());
    _impl_.state_ = p;
  }
  return _impl_.state_;
}
inline ::injective::auction::v1beta1::GenesisState* QueryModuleStateResponse::mutable_state() {
  ::injective::auction::v1beta1::GenesisState* _msg = _internal_mutable_state();
  // @@protoc_insertion_point(field_mutable:injective.auction.v1beta1.QueryModuleStateResponse.state)
  return _msg;
}
inline void QueryModuleStateResponse::set_allocated_state(::injective::auction::v1beta1::GenesisState* state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.state_);
  }
  if (state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(state));
    if (message_arena != submessage_arena) {
      state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.state_ = state;
  // @@protoc_insertion_point(field_set_allocated:injective.auction.v1beta1.QueryModuleStateResponse.state)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1beta1
}  // namespace auction
}  // namespace injective


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_injective_2fauction_2fv1beta1_2fquery_2eproto_2epb_2eh

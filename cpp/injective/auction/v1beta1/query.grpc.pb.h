// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: injective/auction/v1beta1/query.proto
#ifndef GRPC_injective_2fauction_2fv1beta1_2fquery_2eproto__INCLUDED
#define GRPC_injective_2fauction_2fv1beta1_2fquery_2eproto__INCLUDED

#include "injective/auction/v1beta1/query.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace injective {
namespace auction {
namespace v1beta1 {

// Query defines the gRPC querier service.
class Query final {
 public:
  static constexpr char const* service_full_name() {
    return "injective.auction.v1beta1.Query";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Retrieves auction params
    virtual ::grpc::Status AuctionParams(::grpc::ClientContext* context, const ::injective::auction::v1beta1::QueryAuctionParamsRequest& request, ::injective::auction::v1beta1::QueryAuctionParamsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::auction::v1beta1::QueryAuctionParamsResponse>> AsyncAuctionParams(::grpc::ClientContext* context, const ::injective::auction::v1beta1::QueryAuctionParamsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::auction::v1beta1::QueryAuctionParamsResponse>>(AsyncAuctionParamsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::auction::v1beta1::QueryAuctionParamsResponse>> PrepareAsyncAuctionParams(::grpc::ClientContext* context, const ::injective::auction::v1beta1::QueryAuctionParamsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::auction::v1beta1::QueryAuctionParamsResponse>>(PrepareAsyncAuctionParamsRaw(context, request, cq));
    }
    // Retrieves current auction basket with current highest bid and bidder
    virtual ::grpc::Status CurrentAuctionBasket(::grpc::ClientContext* context, const ::injective::auction::v1beta1::QueryCurrentAuctionBasketRequest& request, ::injective::auction::v1beta1::QueryCurrentAuctionBasketResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::auction::v1beta1::QueryCurrentAuctionBasketResponse>> AsyncCurrentAuctionBasket(::grpc::ClientContext* context, const ::injective::auction::v1beta1::QueryCurrentAuctionBasketRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::auction::v1beta1::QueryCurrentAuctionBasketResponse>>(AsyncCurrentAuctionBasketRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::auction::v1beta1::QueryCurrentAuctionBasketResponse>> PrepareAsyncCurrentAuctionBasket(::grpc::ClientContext* context, const ::injective::auction::v1beta1::QueryCurrentAuctionBasketRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::auction::v1beta1::QueryCurrentAuctionBasketResponse>>(PrepareAsyncCurrentAuctionBasketRaw(context, request, cq));
    }
    // Retrieves the entire auction module's state
    virtual ::grpc::Status AuctionModuleState(::grpc::ClientContext* context, const ::injective::auction::v1beta1::QueryModuleStateRequest& request, ::injective::auction::v1beta1::QueryModuleStateResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::auction::v1beta1::QueryModuleStateResponse>> AsyncAuctionModuleState(::grpc::ClientContext* context, const ::injective::auction::v1beta1::QueryModuleStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::auction::v1beta1::QueryModuleStateResponse>>(AsyncAuctionModuleStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::auction::v1beta1::QueryModuleStateResponse>> PrepareAsyncAuctionModuleState(::grpc::ClientContext* context, const ::injective::auction::v1beta1::QueryModuleStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::auction::v1beta1::QueryModuleStateResponse>>(PrepareAsyncAuctionModuleStateRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Retrieves auction params
      virtual void AuctionParams(::grpc::ClientContext* context, const ::injective::auction::v1beta1::QueryAuctionParamsRequest* request, ::injective::auction::v1beta1::QueryAuctionParamsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AuctionParams(::grpc::ClientContext* context, const ::injective::auction::v1beta1::QueryAuctionParamsRequest* request, ::injective::auction::v1beta1::QueryAuctionParamsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Retrieves current auction basket with current highest bid and bidder
      virtual void CurrentAuctionBasket(::grpc::ClientContext* context, const ::injective::auction::v1beta1::QueryCurrentAuctionBasketRequest* request, ::injective::auction::v1beta1::QueryCurrentAuctionBasketResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CurrentAuctionBasket(::grpc::ClientContext* context, const ::injective::auction::v1beta1::QueryCurrentAuctionBasketRequest* request, ::injective::auction::v1beta1::QueryCurrentAuctionBasketResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Retrieves the entire auction module's state
      virtual void AuctionModuleState(::grpc::ClientContext* context, const ::injective::auction::v1beta1::QueryModuleStateRequest* request, ::injective::auction::v1beta1::QueryModuleStateResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AuctionModuleState(::grpc::ClientContext* context, const ::injective::auction::v1beta1::QueryModuleStateRequest* request, ::injective::auction::v1beta1::QueryModuleStateResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::auction::v1beta1::QueryAuctionParamsResponse>* AsyncAuctionParamsRaw(::grpc::ClientContext* context, const ::injective::auction::v1beta1::QueryAuctionParamsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::auction::v1beta1::QueryAuctionParamsResponse>* PrepareAsyncAuctionParamsRaw(::grpc::ClientContext* context, const ::injective::auction::v1beta1::QueryAuctionParamsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::auction::v1beta1::QueryCurrentAuctionBasketResponse>* AsyncCurrentAuctionBasketRaw(::grpc::ClientContext* context, const ::injective::auction::v1beta1::QueryCurrentAuctionBasketRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::auction::v1beta1::QueryCurrentAuctionBasketResponse>* PrepareAsyncCurrentAuctionBasketRaw(::grpc::ClientContext* context, const ::injective::auction::v1beta1::QueryCurrentAuctionBasketRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::auction::v1beta1::QueryModuleStateResponse>* AsyncAuctionModuleStateRaw(::grpc::ClientContext* context, const ::injective::auction::v1beta1::QueryModuleStateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::auction::v1beta1::QueryModuleStateResponse>* PrepareAsyncAuctionModuleStateRaw(::grpc::ClientContext* context, const ::injective::auction::v1beta1::QueryModuleStateRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status AuctionParams(::grpc::ClientContext* context, const ::injective::auction::v1beta1::QueryAuctionParamsRequest& request, ::injective::auction::v1beta1::QueryAuctionParamsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::auction::v1beta1::QueryAuctionParamsResponse>> AsyncAuctionParams(::grpc::ClientContext* context, const ::injective::auction::v1beta1::QueryAuctionParamsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::auction::v1beta1::QueryAuctionParamsResponse>>(AsyncAuctionParamsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::auction::v1beta1::QueryAuctionParamsResponse>> PrepareAsyncAuctionParams(::grpc::ClientContext* context, const ::injective::auction::v1beta1::QueryAuctionParamsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::auction::v1beta1::QueryAuctionParamsResponse>>(PrepareAsyncAuctionParamsRaw(context, request, cq));
    }
    ::grpc::Status CurrentAuctionBasket(::grpc::ClientContext* context, const ::injective::auction::v1beta1::QueryCurrentAuctionBasketRequest& request, ::injective::auction::v1beta1::QueryCurrentAuctionBasketResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::auction::v1beta1::QueryCurrentAuctionBasketResponse>> AsyncCurrentAuctionBasket(::grpc::ClientContext* context, const ::injective::auction::v1beta1::QueryCurrentAuctionBasketRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::auction::v1beta1::QueryCurrentAuctionBasketResponse>>(AsyncCurrentAuctionBasketRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::auction::v1beta1::QueryCurrentAuctionBasketResponse>> PrepareAsyncCurrentAuctionBasket(::grpc::ClientContext* context, const ::injective::auction::v1beta1::QueryCurrentAuctionBasketRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::auction::v1beta1::QueryCurrentAuctionBasketResponse>>(PrepareAsyncCurrentAuctionBasketRaw(context, request, cq));
    }
    ::grpc::Status AuctionModuleState(::grpc::ClientContext* context, const ::injective::auction::v1beta1::QueryModuleStateRequest& request, ::injective::auction::v1beta1::QueryModuleStateResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::auction::v1beta1::QueryModuleStateResponse>> AsyncAuctionModuleState(::grpc::ClientContext* context, const ::injective::auction::v1beta1::QueryModuleStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::auction::v1beta1::QueryModuleStateResponse>>(AsyncAuctionModuleStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::auction::v1beta1::QueryModuleStateResponse>> PrepareAsyncAuctionModuleState(::grpc::ClientContext* context, const ::injective::auction::v1beta1::QueryModuleStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::auction::v1beta1::QueryModuleStateResponse>>(PrepareAsyncAuctionModuleStateRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void AuctionParams(::grpc::ClientContext* context, const ::injective::auction::v1beta1::QueryAuctionParamsRequest* request, ::injective::auction::v1beta1::QueryAuctionParamsResponse* response, std::function<void(::grpc::Status)>) override;
      void AuctionParams(::grpc::ClientContext* context, const ::injective::auction::v1beta1::QueryAuctionParamsRequest* request, ::injective::auction::v1beta1::QueryAuctionParamsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CurrentAuctionBasket(::grpc::ClientContext* context, const ::injective::auction::v1beta1::QueryCurrentAuctionBasketRequest* request, ::injective::auction::v1beta1::QueryCurrentAuctionBasketResponse* response, std::function<void(::grpc::Status)>) override;
      void CurrentAuctionBasket(::grpc::ClientContext* context, const ::injective::auction::v1beta1::QueryCurrentAuctionBasketRequest* request, ::injective::auction::v1beta1::QueryCurrentAuctionBasketResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void AuctionModuleState(::grpc::ClientContext* context, const ::injective::auction::v1beta1::QueryModuleStateRequest* request, ::injective::auction::v1beta1::QueryModuleStateResponse* response, std::function<void(::grpc::Status)>) override;
      void AuctionModuleState(::grpc::ClientContext* context, const ::injective::auction::v1beta1::QueryModuleStateRequest* request, ::injective::auction::v1beta1::QueryModuleStateResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::injective::auction::v1beta1::QueryAuctionParamsResponse>* AsyncAuctionParamsRaw(::grpc::ClientContext* context, const ::injective::auction::v1beta1::QueryAuctionParamsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::auction::v1beta1::QueryAuctionParamsResponse>* PrepareAsyncAuctionParamsRaw(::grpc::ClientContext* context, const ::injective::auction::v1beta1::QueryAuctionParamsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::auction::v1beta1::QueryCurrentAuctionBasketResponse>* AsyncCurrentAuctionBasketRaw(::grpc::ClientContext* context, const ::injective::auction::v1beta1::QueryCurrentAuctionBasketRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::auction::v1beta1::QueryCurrentAuctionBasketResponse>* PrepareAsyncCurrentAuctionBasketRaw(::grpc::ClientContext* context, const ::injective::auction::v1beta1::QueryCurrentAuctionBasketRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::auction::v1beta1::QueryModuleStateResponse>* AsyncAuctionModuleStateRaw(::grpc::ClientContext* context, const ::injective::auction::v1beta1::QueryModuleStateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::auction::v1beta1::QueryModuleStateResponse>* PrepareAsyncAuctionModuleStateRaw(::grpc::ClientContext* context, const ::injective::auction::v1beta1::QueryModuleStateRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_AuctionParams_;
    const ::grpc::internal::RpcMethod rpcmethod_CurrentAuctionBasket_;
    const ::grpc::internal::RpcMethod rpcmethod_AuctionModuleState_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Retrieves auction params
    virtual ::grpc::Status AuctionParams(::grpc::ServerContext* context, const ::injective::auction::v1beta1::QueryAuctionParamsRequest* request, ::injective::auction::v1beta1::QueryAuctionParamsResponse* response);
    // Retrieves current auction basket with current highest bid and bidder
    virtual ::grpc::Status CurrentAuctionBasket(::grpc::ServerContext* context, const ::injective::auction::v1beta1::QueryCurrentAuctionBasketRequest* request, ::injective::auction::v1beta1::QueryCurrentAuctionBasketResponse* response);
    // Retrieves the entire auction module's state
    virtual ::grpc::Status AuctionModuleState(::grpc::ServerContext* context, const ::injective::auction::v1beta1::QueryModuleStateRequest* request, ::injective::auction::v1beta1::QueryModuleStateResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_AuctionParams : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AuctionParams() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_AuctionParams() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AuctionParams(::grpc::ServerContext* /*context*/, const ::injective::auction::v1beta1::QueryAuctionParamsRequest* /*request*/, ::injective::auction::v1beta1::QueryAuctionParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAuctionParams(::grpc::ServerContext* context, ::injective::auction::v1beta1::QueryAuctionParamsRequest* request, ::grpc::ServerAsyncResponseWriter< ::injective::auction::v1beta1::QueryAuctionParamsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CurrentAuctionBasket : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CurrentAuctionBasket() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_CurrentAuctionBasket() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CurrentAuctionBasket(::grpc::ServerContext* /*context*/, const ::injective::auction::v1beta1::QueryCurrentAuctionBasketRequest* /*request*/, ::injective::auction::v1beta1::QueryCurrentAuctionBasketResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCurrentAuctionBasket(::grpc::ServerContext* context, ::injective::auction::v1beta1::QueryCurrentAuctionBasketRequest* request, ::grpc::ServerAsyncResponseWriter< ::injective::auction::v1beta1::QueryCurrentAuctionBasketResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AuctionModuleState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AuctionModuleState() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_AuctionModuleState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AuctionModuleState(::grpc::ServerContext* /*context*/, const ::injective::auction::v1beta1::QueryModuleStateRequest* /*request*/, ::injective::auction::v1beta1::QueryModuleStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAuctionModuleState(::grpc::ServerContext* context, ::injective::auction::v1beta1::QueryModuleStateRequest* request, ::grpc::ServerAsyncResponseWriter< ::injective::auction::v1beta1::QueryModuleStateResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_AuctionParams<WithAsyncMethod_CurrentAuctionBasket<WithAsyncMethod_AuctionModuleState<Service > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_AuctionParams : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_AuctionParams() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::injective::auction::v1beta1::QueryAuctionParamsRequest, ::injective::auction::v1beta1::QueryAuctionParamsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::injective::auction::v1beta1::QueryAuctionParamsRequest* request, ::injective::auction::v1beta1::QueryAuctionParamsResponse* response) { return this->AuctionParams(context, request, response); }));}
    void SetMessageAllocatorFor_AuctionParams(
        ::grpc::MessageAllocator< ::injective::auction::v1beta1::QueryAuctionParamsRequest, ::injective::auction::v1beta1::QueryAuctionParamsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::injective::auction::v1beta1::QueryAuctionParamsRequest, ::injective::auction::v1beta1::QueryAuctionParamsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_AuctionParams() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AuctionParams(::grpc::ServerContext* /*context*/, const ::injective::auction::v1beta1::QueryAuctionParamsRequest* /*request*/, ::injective::auction::v1beta1::QueryAuctionParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AuctionParams(
      ::grpc::CallbackServerContext* /*context*/, const ::injective::auction::v1beta1::QueryAuctionParamsRequest* /*request*/, ::injective::auction::v1beta1::QueryAuctionParamsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CurrentAuctionBasket : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CurrentAuctionBasket() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::injective::auction::v1beta1::QueryCurrentAuctionBasketRequest, ::injective::auction::v1beta1::QueryCurrentAuctionBasketResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::injective::auction::v1beta1::QueryCurrentAuctionBasketRequest* request, ::injective::auction::v1beta1::QueryCurrentAuctionBasketResponse* response) { return this->CurrentAuctionBasket(context, request, response); }));}
    void SetMessageAllocatorFor_CurrentAuctionBasket(
        ::grpc::MessageAllocator< ::injective::auction::v1beta1::QueryCurrentAuctionBasketRequest, ::injective::auction::v1beta1::QueryCurrentAuctionBasketResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::injective::auction::v1beta1::QueryCurrentAuctionBasketRequest, ::injective::auction::v1beta1::QueryCurrentAuctionBasketResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CurrentAuctionBasket() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CurrentAuctionBasket(::grpc::ServerContext* /*context*/, const ::injective::auction::v1beta1::QueryCurrentAuctionBasketRequest* /*request*/, ::injective::auction::v1beta1::QueryCurrentAuctionBasketResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CurrentAuctionBasket(
      ::grpc::CallbackServerContext* /*context*/, const ::injective::auction::v1beta1::QueryCurrentAuctionBasketRequest* /*request*/, ::injective::auction::v1beta1::QueryCurrentAuctionBasketResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_AuctionModuleState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_AuctionModuleState() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::injective::auction::v1beta1::QueryModuleStateRequest, ::injective::auction::v1beta1::QueryModuleStateResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::injective::auction::v1beta1::QueryModuleStateRequest* request, ::injective::auction::v1beta1::QueryModuleStateResponse* response) { return this->AuctionModuleState(context, request, response); }));}
    void SetMessageAllocatorFor_AuctionModuleState(
        ::grpc::MessageAllocator< ::injective::auction::v1beta1::QueryModuleStateRequest, ::injective::auction::v1beta1::QueryModuleStateResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::injective::auction::v1beta1::QueryModuleStateRequest, ::injective::auction::v1beta1::QueryModuleStateResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_AuctionModuleState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AuctionModuleState(::grpc::ServerContext* /*context*/, const ::injective::auction::v1beta1::QueryModuleStateRequest* /*request*/, ::injective::auction::v1beta1::QueryModuleStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AuctionModuleState(
      ::grpc::CallbackServerContext* /*context*/, const ::injective::auction::v1beta1::QueryModuleStateRequest* /*request*/, ::injective::auction::v1beta1::QueryModuleStateResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_AuctionParams<WithCallbackMethod_CurrentAuctionBasket<WithCallbackMethod_AuctionModuleState<Service > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_AuctionParams : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AuctionParams() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_AuctionParams() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AuctionParams(::grpc::ServerContext* /*context*/, const ::injective::auction::v1beta1::QueryAuctionParamsRequest* /*request*/, ::injective::auction::v1beta1::QueryAuctionParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CurrentAuctionBasket : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CurrentAuctionBasket() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_CurrentAuctionBasket() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CurrentAuctionBasket(::grpc::ServerContext* /*context*/, const ::injective::auction::v1beta1::QueryCurrentAuctionBasketRequest* /*request*/, ::injective::auction::v1beta1::QueryCurrentAuctionBasketResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AuctionModuleState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AuctionModuleState() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_AuctionModuleState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AuctionModuleState(::grpc::ServerContext* /*context*/, const ::injective::auction::v1beta1::QueryModuleStateRequest* /*request*/, ::injective::auction::v1beta1::QueryModuleStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_AuctionParams : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AuctionParams() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_AuctionParams() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AuctionParams(::grpc::ServerContext* /*context*/, const ::injective::auction::v1beta1::QueryAuctionParamsRequest* /*request*/, ::injective::auction::v1beta1::QueryAuctionParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAuctionParams(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CurrentAuctionBasket : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CurrentAuctionBasket() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_CurrentAuctionBasket() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CurrentAuctionBasket(::grpc::ServerContext* /*context*/, const ::injective::auction::v1beta1::QueryCurrentAuctionBasketRequest* /*request*/, ::injective::auction::v1beta1::QueryCurrentAuctionBasketResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCurrentAuctionBasket(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AuctionModuleState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AuctionModuleState() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_AuctionModuleState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AuctionModuleState(::grpc::ServerContext* /*context*/, const ::injective::auction::v1beta1::QueryModuleStateRequest* /*request*/, ::injective::auction::v1beta1::QueryModuleStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAuctionModuleState(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_AuctionParams : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_AuctionParams() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AuctionParams(context, request, response); }));
    }
    ~WithRawCallbackMethod_AuctionParams() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AuctionParams(::grpc::ServerContext* /*context*/, const ::injective::auction::v1beta1::QueryAuctionParamsRequest* /*request*/, ::injective::auction::v1beta1::QueryAuctionParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AuctionParams(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CurrentAuctionBasket : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CurrentAuctionBasket() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CurrentAuctionBasket(context, request, response); }));
    }
    ~WithRawCallbackMethod_CurrentAuctionBasket() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CurrentAuctionBasket(::grpc::ServerContext* /*context*/, const ::injective::auction::v1beta1::QueryCurrentAuctionBasketRequest* /*request*/, ::injective::auction::v1beta1::QueryCurrentAuctionBasketResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CurrentAuctionBasket(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_AuctionModuleState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_AuctionModuleState() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AuctionModuleState(context, request, response); }));
    }
    ~WithRawCallbackMethod_AuctionModuleState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AuctionModuleState(::grpc::ServerContext* /*context*/, const ::injective::auction::v1beta1::QueryModuleStateRequest* /*request*/, ::injective::auction::v1beta1::QueryModuleStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AuctionModuleState(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AuctionParams : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AuctionParams() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::injective::auction::v1beta1::QueryAuctionParamsRequest, ::injective::auction::v1beta1::QueryAuctionParamsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::injective::auction::v1beta1::QueryAuctionParamsRequest, ::injective::auction::v1beta1::QueryAuctionParamsResponse>* streamer) {
                       return this->StreamedAuctionParams(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AuctionParams() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AuctionParams(::grpc::ServerContext* /*context*/, const ::injective::auction::v1beta1::QueryAuctionParamsRequest* /*request*/, ::injective::auction::v1beta1::QueryAuctionParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAuctionParams(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::injective::auction::v1beta1::QueryAuctionParamsRequest,::injective::auction::v1beta1::QueryAuctionParamsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CurrentAuctionBasket : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CurrentAuctionBasket() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::injective::auction::v1beta1::QueryCurrentAuctionBasketRequest, ::injective::auction::v1beta1::QueryCurrentAuctionBasketResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::injective::auction::v1beta1::QueryCurrentAuctionBasketRequest, ::injective::auction::v1beta1::QueryCurrentAuctionBasketResponse>* streamer) {
                       return this->StreamedCurrentAuctionBasket(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CurrentAuctionBasket() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CurrentAuctionBasket(::grpc::ServerContext* /*context*/, const ::injective::auction::v1beta1::QueryCurrentAuctionBasketRequest* /*request*/, ::injective::auction::v1beta1::QueryCurrentAuctionBasketResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCurrentAuctionBasket(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::injective::auction::v1beta1::QueryCurrentAuctionBasketRequest,::injective::auction::v1beta1::QueryCurrentAuctionBasketResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AuctionModuleState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AuctionModuleState() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::injective::auction::v1beta1::QueryModuleStateRequest, ::injective::auction::v1beta1::QueryModuleStateResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::injective::auction::v1beta1::QueryModuleStateRequest, ::injective::auction::v1beta1::QueryModuleStateResponse>* streamer) {
                       return this->StreamedAuctionModuleState(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AuctionModuleState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AuctionModuleState(::grpc::ServerContext* /*context*/, const ::injective::auction::v1beta1::QueryModuleStateRequest* /*request*/, ::injective::auction::v1beta1::QueryModuleStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAuctionModuleState(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::injective::auction::v1beta1::QueryModuleStateRequest,::injective::auction::v1beta1::QueryModuleStateResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_AuctionParams<WithStreamedUnaryMethod_CurrentAuctionBasket<WithStreamedUnaryMethod_AuctionModuleState<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_AuctionParams<WithStreamedUnaryMethod_CurrentAuctionBasket<WithStreamedUnaryMethod_AuctionModuleState<Service > > > StreamedService;
};

}  // namespace v1beta1
}  // namespace auction
}  // namespace injective


#endif  // GRPC_injective_2fauction_2fv1beta1_2fquery_2eproto__INCLUDED

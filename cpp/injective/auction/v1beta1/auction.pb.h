// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: injective/auction/v1beta1/auction.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_injective_2fauction_2fv1beta1_2fauction_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_injective_2fauction_2fv1beta1_2fauction_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "gogoproto/gogo.pb.h"
#include "cosmos/base/v1beta1/coin.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_injective_2fauction_2fv1beta1_2fauction_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_injective_2fauction_2fv1beta1_2fauction_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_injective_2fauction_2fv1beta1_2fauction_2eproto;
namespace injective {
namespace auction {
namespace v1beta1 {
class Bid;
struct BidDefaultTypeInternal;
extern BidDefaultTypeInternal _Bid_default_instance_;
class EventAuctionResult;
struct EventAuctionResultDefaultTypeInternal;
extern EventAuctionResultDefaultTypeInternal _EventAuctionResult_default_instance_;
class EventAuctionStart;
struct EventAuctionStartDefaultTypeInternal;
extern EventAuctionStartDefaultTypeInternal _EventAuctionStart_default_instance_;
class EventBid;
struct EventBidDefaultTypeInternal;
extern EventBidDefaultTypeInternal _EventBid_default_instance_;
class Params;
struct ParamsDefaultTypeInternal;
extern ParamsDefaultTypeInternal _Params_default_instance_;
}  // namespace v1beta1
}  // namespace auction
}  // namespace injective
PROTOBUF_NAMESPACE_OPEN
template <>
::injective::auction::v1beta1::Bid* Arena::CreateMaybeMessage<::injective::auction::v1beta1::Bid>(Arena*);
template <>
::injective::auction::v1beta1::EventAuctionResult* Arena::CreateMaybeMessage<::injective::auction::v1beta1::EventAuctionResult>(Arena*);
template <>
::injective::auction::v1beta1::EventAuctionStart* Arena::CreateMaybeMessage<::injective::auction::v1beta1::EventAuctionStart>(Arena*);
template <>
::injective::auction::v1beta1::EventBid* Arena::CreateMaybeMessage<::injective::auction::v1beta1::EventBid>(Arena*);
template <>
::injective::auction::v1beta1::Params* Arena::CreateMaybeMessage<::injective::auction::v1beta1::Params>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace injective {
namespace auction {
namespace v1beta1 {

// ===================================================================


// -------------------------------------------------------------------

class Params final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.auction.v1beta1.Params) */ {
 public:
  inline Params() : Params(nullptr) {}
  ~Params() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Params(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Params(const Params& from);
  Params(Params&& from) noexcept
    : Params() {
    *this = ::std::move(from);
  }

  inline Params& operator=(const Params& from) {
    CopyFrom(from);
    return *this;
  }
  inline Params& operator=(Params&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Params& default_instance() {
    return *internal_default_instance();
  }
  static inline const Params* internal_default_instance() {
    return reinterpret_cast<const Params*>(
               &_Params_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Params& a, Params& b) {
    a.Swap(&b);
  }
  inline void Swap(Params* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Params* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Params* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Params>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Params& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Params& from) {
    Params::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Params* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.auction.v1beta1.Params";
  }
  protected:
  explicit Params(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMinNextBidIncrementRateFieldNumber = 2,
    kAuctionPeriodFieldNumber = 1,
  };
  // string min_next_bid_increment_rate = 2 [json_name = "minNextBidIncrementRate", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  void clear_min_next_bid_increment_rate() ;
  const std::string& min_next_bid_increment_rate() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_min_next_bid_increment_rate(Arg_&& arg, Args_... args);
  std::string* mutable_min_next_bid_increment_rate();
  PROTOBUF_NODISCARD std::string* release_min_next_bid_increment_rate();
  void set_allocated_min_next_bid_increment_rate(std::string* ptr);

  private:
  const std::string& _internal_min_next_bid_increment_rate() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_min_next_bid_increment_rate(
      const std::string& value);
  std::string* _internal_mutable_min_next_bid_increment_rate();

  public:
  // int64 auction_period = 1 [json_name = "auctionPeriod"];
  void clear_auction_period() ;
  ::int64_t auction_period() const;
  void set_auction_period(::int64_t value);

  private:
  ::int64_t _internal_auction_period() const;
  void _internal_set_auction_period(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:injective.auction.v1beta1.Params)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr min_next_bid_increment_rate_;
    ::int64_t auction_period_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2fauction_2fv1beta1_2fauction_2eproto;
};// -------------------------------------------------------------------

class Bid final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.auction.v1beta1.Bid) */ {
 public:
  inline Bid() : Bid(nullptr) {}
  ~Bid() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Bid(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Bid(const Bid& from);
  Bid(Bid&& from) noexcept
    : Bid() {
    *this = ::std::move(from);
  }

  inline Bid& operator=(const Bid& from) {
    CopyFrom(from);
    return *this;
  }
  inline Bid& operator=(Bid&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Bid& default_instance() {
    return *internal_default_instance();
  }
  static inline const Bid* internal_default_instance() {
    return reinterpret_cast<const Bid*>(
               &_Bid_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Bid& a, Bid& b) {
    a.Swap(&b);
  }
  inline void Swap(Bid* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Bid* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Bid* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Bid>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Bid& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Bid& from) {
    Bid::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Bid* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.auction.v1beta1.Bid";
  }
  protected:
  explicit Bid(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBidderFieldNumber = 1,
    kAmountFieldNumber = 2,
  };
  // string bidder = 1 [json_name = "bidder", (.gogoproto.jsontag) = "bidder", (.gogoproto.moretags) = "yaml:\"bidder\""];
  void clear_bidder() ;
  const std::string& bidder() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_bidder(Arg_&& arg, Args_... args);
  std::string* mutable_bidder();
  PROTOBUF_NODISCARD std::string* release_bidder();
  void set_allocated_bidder(std::string* ptr);

  private:
  const std::string& _internal_bidder() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bidder(
      const std::string& value);
  std::string* _internal_mutable_bidder();

  public:
  // string amount = 2 [json_name = "amount", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Coin"];
  void clear_amount() ;
  const std::string& amount() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_amount(Arg_&& arg, Args_... args);
  std::string* mutable_amount();
  PROTOBUF_NODISCARD std::string* release_amount();
  void set_allocated_amount(std::string* ptr);

  private:
  const std::string& _internal_amount() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_amount(
      const std::string& value);
  std::string* _internal_mutable_amount();

  public:
  // @@protoc_insertion_point(class_scope:injective.auction.v1beta1.Bid)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bidder_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr amount_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2fauction_2fv1beta1_2fauction_2eproto;
};// -------------------------------------------------------------------

class EventBid final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.auction.v1beta1.EventBid) */ {
 public:
  inline EventBid() : EventBid(nullptr) {}
  ~EventBid() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR EventBid(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EventBid(const EventBid& from);
  EventBid(EventBid&& from) noexcept
    : EventBid() {
    *this = ::std::move(from);
  }

  inline EventBid& operator=(const EventBid& from) {
    CopyFrom(from);
    return *this;
  }
  inline EventBid& operator=(EventBid&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EventBid& default_instance() {
    return *internal_default_instance();
  }
  static inline const EventBid* internal_default_instance() {
    return reinterpret_cast<const EventBid*>(
               &_EventBid_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(EventBid& a, EventBid& b) {
    a.Swap(&b);
  }
  inline void Swap(EventBid* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EventBid* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EventBid* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EventBid>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EventBid& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EventBid& from) {
    EventBid::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EventBid* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.auction.v1beta1.EventBid";
  }
  protected:
  explicit EventBid(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBidderFieldNumber = 1,
    kAmountFieldNumber = 2,
    kRoundFieldNumber = 3,
  };
  // string bidder = 1 [json_name = "bidder"];
  void clear_bidder() ;
  const std::string& bidder() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_bidder(Arg_&& arg, Args_... args);
  std::string* mutable_bidder();
  PROTOBUF_NODISCARD std::string* release_bidder();
  void set_allocated_bidder(std::string* ptr);

  private:
  const std::string& _internal_bidder() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bidder(
      const std::string& value);
  std::string* _internal_mutable_bidder();

  public:
  // string amount = 2 [json_name = "amount", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Coin"];
  void clear_amount() ;
  const std::string& amount() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_amount(Arg_&& arg, Args_... args);
  std::string* mutable_amount();
  PROTOBUF_NODISCARD std::string* release_amount();
  void set_allocated_amount(std::string* ptr);

  private:
  const std::string& _internal_amount() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_amount(
      const std::string& value);
  std::string* _internal_mutable_amount();

  public:
  // uint64 round = 3 [json_name = "round"];
  void clear_round() ;
  ::uint64_t round() const;
  void set_round(::uint64_t value);

  private:
  ::uint64_t _internal_round() const;
  void _internal_set_round(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:injective.auction.v1beta1.EventBid)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bidder_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr amount_;
    ::uint64_t round_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2fauction_2fv1beta1_2fauction_2eproto;
};// -------------------------------------------------------------------

class EventAuctionResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.auction.v1beta1.EventAuctionResult) */ {
 public:
  inline EventAuctionResult() : EventAuctionResult(nullptr) {}
  ~EventAuctionResult() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR EventAuctionResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EventAuctionResult(const EventAuctionResult& from);
  EventAuctionResult(EventAuctionResult&& from) noexcept
    : EventAuctionResult() {
    *this = ::std::move(from);
  }

  inline EventAuctionResult& operator=(const EventAuctionResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline EventAuctionResult& operator=(EventAuctionResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EventAuctionResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const EventAuctionResult* internal_default_instance() {
    return reinterpret_cast<const EventAuctionResult*>(
               &_EventAuctionResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(EventAuctionResult& a, EventAuctionResult& b) {
    a.Swap(&b);
  }
  inline void Swap(EventAuctionResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EventAuctionResult* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EventAuctionResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EventAuctionResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EventAuctionResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EventAuctionResult& from) {
    EventAuctionResult::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EventAuctionResult* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.auction.v1beta1.EventAuctionResult";
  }
  protected:
  explicit EventAuctionResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWinnerFieldNumber = 1,
    kAmountFieldNumber = 2,
    kRoundFieldNumber = 3,
  };
  // string winner = 1 [json_name = "winner"];
  void clear_winner() ;
  const std::string& winner() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_winner(Arg_&& arg, Args_... args);
  std::string* mutable_winner();
  PROTOBUF_NODISCARD std::string* release_winner();
  void set_allocated_winner(std::string* ptr);

  private:
  const std::string& _internal_winner() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_winner(
      const std::string& value);
  std::string* _internal_mutable_winner();

  public:
  // string amount = 2 [json_name = "amount", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Coin"];
  void clear_amount() ;
  const std::string& amount() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_amount(Arg_&& arg, Args_... args);
  std::string* mutable_amount();
  PROTOBUF_NODISCARD std::string* release_amount();
  void set_allocated_amount(std::string* ptr);

  private:
  const std::string& _internal_amount() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_amount(
      const std::string& value);
  std::string* _internal_mutable_amount();

  public:
  // uint64 round = 3 [json_name = "round"];
  void clear_round() ;
  ::uint64_t round() const;
  void set_round(::uint64_t value);

  private:
  ::uint64_t _internal_round() const;
  void _internal_set_round(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:injective.auction.v1beta1.EventAuctionResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr winner_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr amount_;
    ::uint64_t round_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2fauction_2fv1beta1_2fauction_2eproto;
};// -------------------------------------------------------------------

class EventAuctionStart final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.auction.v1beta1.EventAuctionStart) */ {
 public:
  inline EventAuctionStart() : EventAuctionStart(nullptr) {}
  ~EventAuctionStart() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR EventAuctionStart(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EventAuctionStart(const EventAuctionStart& from);
  EventAuctionStart(EventAuctionStart&& from) noexcept
    : EventAuctionStart() {
    *this = ::std::move(from);
  }

  inline EventAuctionStart& operator=(const EventAuctionStart& from) {
    CopyFrom(from);
    return *this;
  }
  inline EventAuctionStart& operator=(EventAuctionStart&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EventAuctionStart& default_instance() {
    return *internal_default_instance();
  }
  static inline const EventAuctionStart* internal_default_instance() {
    return reinterpret_cast<const EventAuctionStart*>(
               &_EventAuctionStart_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(EventAuctionStart& a, EventAuctionStart& b) {
    a.Swap(&b);
  }
  inline void Swap(EventAuctionStart* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EventAuctionStart* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EventAuctionStart* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EventAuctionStart>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EventAuctionStart& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EventAuctionStart& from) {
    EventAuctionStart::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EventAuctionStart* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.auction.v1beta1.EventAuctionStart";
  }
  protected:
  explicit EventAuctionStart(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNewBasketFieldNumber = 3,
    kRoundFieldNumber = 1,
    kEndingTimestampFieldNumber = 2,
  };
  // repeated .cosmos.base.v1beta1.Coin new_basket = 3 [json_name = "newBasket", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];
  int new_basket_size() const;
  private:
  int _internal_new_basket_size() const;

  public:
  void clear_new_basket() ;
  ::cosmos::base::v1beta1::Coin* mutable_new_basket(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin >*
      mutable_new_basket();
  private:
  const ::cosmos::base::v1beta1::Coin& _internal_new_basket(int index) const;
  ::cosmos::base::v1beta1::Coin* _internal_add_new_basket();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::v1beta1::Coin>& _internal_new_basket() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::v1beta1::Coin>* _internal_mutable_new_basket();
  public:
  const ::cosmos::base::v1beta1::Coin& new_basket(int index) const;
  ::cosmos::base::v1beta1::Coin* add_new_basket();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin >&
      new_basket() const;
  // uint64 round = 1 [json_name = "round"];
  void clear_round() ;
  ::uint64_t round() const;
  void set_round(::uint64_t value);

  private:
  ::uint64_t _internal_round() const;
  void _internal_set_round(::uint64_t value);

  public:
  // int64 ending_timestamp = 2 [json_name = "endingTimestamp"];
  void clear_ending_timestamp() ;
  ::int64_t ending_timestamp() const;
  void set_ending_timestamp(::int64_t value);

  private:
  ::int64_t _internal_ending_timestamp() const;
  void _internal_set_ending_timestamp(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:injective.auction.v1beta1.EventAuctionStart)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin > new_basket_;
    ::uint64_t round_;
    ::int64_t ending_timestamp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2fauction_2fv1beta1_2fauction_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Params

// int64 auction_period = 1 [json_name = "auctionPeriod"];
inline void Params::clear_auction_period() {
  _impl_.auction_period_ = ::int64_t{0};
}
inline ::int64_t Params::auction_period() const {
  // @@protoc_insertion_point(field_get:injective.auction.v1beta1.Params.auction_period)
  return _internal_auction_period();
}
inline void Params::set_auction_period(::int64_t value) {
  _internal_set_auction_period(value);
  // @@protoc_insertion_point(field_set:injective.auction.v1beta1.Params.auction_period)
}
inline ::int64_t Params::_internal_auction_period() const {
  return _impl_.auction_period_;
}
inline void Params::_internal_set_auction_period(::int64_t value) {
  ;
  _impl_.auction_period_ = value;
}

// string min_next_bid_increment_rate = 2 [json_name = "minNextBidIncrementRate", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
inline void Params::clear_min_next_bid_increment_rate() {
  _impl_.min_next_bid_increment_rate_.ClearToEmpty();
}
inline const std::string& Params::min_next_bid_increment_rate() const {
  // @@protoc_insertion_point(field_get:injective.auction.v1beta1.Params.min_next_bid_increment_rate)
  return _internal_min_next_bid_increment_rate();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Params::set_min_next_bid_increment_rate(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.min_next_bid_increment_rate_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.auction.v1beta1.Params.min_next_bid_increment_rate)
}
inline std::string* Params::mutable_min_next_bid_increment_rate() {
  std::string* _s = _internal_mutable_min_next_bid_increment_rate();
  // @@protoc_insertion_point(field_mutable:injective.auction.v1beta1.Params.min_next_bid_increment_rate)
  return _s;
}
inline const std::string& Params::_internal_min_next_bid_increment_rate() const {
  return _impl_.min_next_bid_increment_rate_.Get();
}
inline void Params::_internal_set_min_next_bid_increment_rate(const std::string& value) {
  ;


  _impl_.min_next_bid_increment_rate_.Set(value, GetArenaForAllocation());
}
inline std::string* Params::_internal_mutable_min_next_bid_increment_rate() {
  ;
  return _impl_.min_next_bid_increment_rate_.Mutable( GetArenaForAllocation());
}
inline std::string* Params::release_min_next_bid_increment_rate() {
  // @@protoc_insertion_point(field_release:injective.auction.v1beta1.Params.min_next_bid_increment_rate)
  return _impl_.min_next_bid_increment_rate_.Release();
}
inline void Params::set_allocated_min_next_bid_increment_rate(std::string* value) {
  _impl_.min_next_bid_increment_rate_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.min_next_bid_increment_rate_.IsDefault()) {
          _impl_.min_next_bid_increment_rate_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.auction.v1beta1.Params.min_next_bid_increment_rate)
}

// -------------------------------------------------------------------

// Bid

// string bidder = 1 [json_name = "bidder", (.gogoproto.jsontag) = "bidder", (.gogoproto.moretags) = "yaml:\"bidder\""];
inline void Bid::clear_bidder() {
  _impl_.bidder_.ClearToEmpty();
}
inline const std::string& Bid::bidder() const {
  // @@protoc_insertion_point(field_get:injective.auction.v1beta1.Bid.bidder)
  return _internal_bidder();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Bid::set_bidder(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.bidder_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.auction.v1beta1.Bid.bidder)
}
inline std::string* Bid::mutable_bidder() {
  std::string* _s = _internal_mutable_bidder();
  // @@protoc_insertion_point(field_mutable:injective.auction.v1beta1.Bid.bidder)
  return _s;
}
inline const std::string& Bid::_internal_bidder() const {
  return _impl_.bidder_.Get();
}
inline void Bid::_internal_set_bidder(const std::string& value) {
  ;


  _impl_.bidder_.Set(value, GetArenaForAllocation());
}
inline std::string* Bid::_internal_mutable_bidder() {
  ;
  return _impl_.bidder_.Mutable( GetArenaForAllocation());
}
inline std::string* Bid::release_bidder() {
  // @@protoc_insertion_point(field_release:injective.auction.v1beta1.Bid.bidder)
  return _impl_.bidder_.Release();
}
inline void Bid::set_allocated_bidder(std::string* value) {
  _impl_.bidder_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.bidder_.IsDefault()) {
          _impl_.bidder_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.auction.v1beta1.Bid.bidder)
}

// string amount = 2 [json_name = "amount", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Coin"];
inline void Bid::clear_amount() {
  _impl_.amount_.ClearToEmpty();
}
inline const std::string& Bid::amount() const {
  // @@protoc_insertion_point(field_get:injective.auction.v1beta1.Bid.amount)
  return _internal_amount();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Bid::set_amount(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.amount_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.auction.v1beta1.Bid.amount)
}
inline std::string* Bid::mutable_amount() {
  std::string* _s = _internal_mutable_amount();
  // @@protoc_insertion_point(field_mutable:injective.auction.v1beta1.Bid.amount)
  return _s;
}
inline const std::string& Bid::_internal_amount() const {
  return _impl_.amount_.Get();
}
inline void Bid::_internal_set_amount(const std::string& value) {
  ;


  _impl_.amount_.Set(value, GetArenaForAllocation());
}
inline std::string* Bid::_internal_mutable_amount() {
  ;
  return _impl_.amount_.Mutable( GetArenaForAllocation());
}
inline std::string* Bid::release_amount() {
  // @@protoc_insertion_point(field_release:injective.auction.v1beta1.Bid.amount)
  return _impl_.amount_.Release();
}
inline void Bid::set_allocated_amount(std::string* value) {
  _impl_.amount_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.amount_.IsDefault()) {
          _impl_.amount_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.auction.v1beta1.Bid.amount)
}

// -------------------------------------------------------------------

// EventBid

// string bidder = 1 [json_name = "bidder"];
inline void EventBid::clear_bidder() {
  _impl_.bidder_.ClearToEmpty();
}
inline const std::string& EventBid::bidder() const {
  // @@protoc_insertion_point(field_get:injective.auction.v1beta1.EventBid.bidder)
  return _internal_bidder();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EventBid::set_bidder(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.bidder_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.auction.v1beta1.EventBid.bidder)
}
inline std::string* EventBid::mutable_bidder() {
  std::string* _s = _internal_mutable_bidder();
  // @@protoc_insertion_point(field_mutable:injective.auction.v1beta1.EventBid.bidder)
  return _s;
}
inline const std::string& EventBid::_internal_bidder() const {
  return _impl_.bidder_.Get();
}
inline void EventBid::_internal_set_bidder(const std::string& value) {
  ;


  _impl_.bidder_.Set(value, GetArenaForAllocation());
}
inline std::string* EventBid::_internal_mutable_bidder() {
  ;
  return _impl_.bidder_.Mutable( GetArenaForAllocation());
}
inline std::string* EventBid::release_bidder() {
  // @@protoc_insertion_point(field_release:injective.auction.v1beta1.EventBid.bidder)
  return _impl_.bidder_.Release();
}
inline void EventBid::set_allocated_bidder(std::string* value) {
  _impl_.bidder_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.bidder_.IsDefault()) {
          _impl_.bidder_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.auction.v1beta1.EventBid.bidder)
}

// string amount = 2 [json_name = "amount", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Coin"];
inline void EventBid::clear_amount() {
  _impl_.amount_.ClearToEmpty();
}
inline const std::string& EventBid::amount() const {
  // @@protoc_insertion_point(field_get:injective.auction.v1beta1.EventBid.amount)
  return _internal_amount();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EventBid::set_amount(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.amount_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.auction.v1beta1.EventBid.amount)
}
inline std::string* EventBid::mutable_amount() {
  std::string* _s = _internal_mutable_amount();
  // @@protoc_insertion_point(field_mutable:injective.auction.v1beta1.EventBid.amount)
  return _s;
}
inline const std::string& EventBid::_internal_amount() const {
  return _impl_.amount_.Get();
}
inline void EventBid::_internal_set_amount(const std::string& value) {
  ;


  _impl_.amount_.Set(value, GetArenaForAllocation());
}
inline std::string* EventBid::_internal_mutable_amount() {
  ;
  return _impl_.amount_.Mutable( GetArenaForAllocation());
}
inline std::string* EventBid::release_amount() {
  // @@protoc_insertion_point(field_release:injective.auction.v1beta1.EventBid.amount)
  return _impl_.amount_.Release();
}
inline void EventBid::set_allocated_amount(std::string* value) {
  _impl_.amount_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.amount_.IsDefault()) {
          _impl_.amount_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.auction.v1beta1.EventBid.amount)
}

// uint64 round = 3 [json_name = "round"];
inline void EventBid::clear_round() {
  _impl_.round_ = ::uint64_t{0u};
}
inline ::uint64_t EventBid::round() const {
  // @@protoc_insertion_point(field_get:injective.auction.v1beta1.EventBid.round)
  return _internal_round();
}
inline void EventBid::set_round(::uint64_t value) {
  _internal_set_round(value);
  // @@protoc_insertion_point(field_set:injective.auction.v1beta1.EventBid.round)
}
inline ::uint64_t EventBid::_internal_round() const {
  return _impl_.round_;
}
inline void EventBid::_internal_set_round(::uint64_t value) {
  ;
  _impl_.round_ = value;
}

// -------------------------------------------------------------------

// EventAuctionResult

// string winner = 1 [json_name = "winner"];
inline void EventAuctionResult::clear_winner() {
  _impl_.winner_.ClearToEmpty();
}
inline const std::string& EventAuctionResult::winner() const {
  // @@protoc_insertion_point(field_get:injective.auction.v1beta1.EventAuctionResult.winner)
  return _internal_winner();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EventAuctionResult::set_winner(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.winner_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.auction.v1beta1.EventAuctionResult.winner)
}
inline std::string* EventAuctionResult::mutable_winner() {
  std::string* _s = _internal_mutable_winner();
  // @@protoc_insertion_point(field_mutable:injective.auction.v1beta1.EventAuctionResult.winner)
  return _s;
}
inline const std::string& EventAuctionResult::_internal_winner() const {
  return _impl_.winner_.Get();
}
inline void EventAuctionResult::_internal_set_winner(const std::string& value) {
  ;


  _impl_.winner_.Set(value, GetArenaForAllocation());
}
inline std::string* EventAuctionResult::_internal_mutable_winner() {
  ;
  return _impl_.winner_.Mutable( GetArenaForAllocation());
}
inline std::string* EventAuctionResult::release_winner() {
  // @@protoc_insertion_point(field_release:injective.auction.v1beta1.EventAuctionResult.winner)
  return _impl_.winner_.Release();
}
inline void EventAuctionResult::set_allocated_winner(std::string* value) {
  _impl_.winner_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.winner_.IsDefault()) {
          _impl_.winner_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.auction.v1beta1.EventAuctionResult.winner)
}

// string amount = 2 [json_name = "amount", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Coin"];
inline void EventAuctionResult::clear_amount() {
  _impl_.amount_.ClearToEmpty();
}
inline const std::string& EventAuctionResult::amount() const {
  // @@protoc_insertion_point(field_get:injective.auction.v1beta1.EventAuctionResult.amount)
  return _internal_amount();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EventAuctionResult::set_amount(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.amount_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.auction.v1beta1.EventAuctionResult.amount)
}
inline std::string* EventAuctionResult::mutable_amount() {
  std::string* _s = _internal_mutable_amount();
  // @@protoc_insertion_point(field_mutable:injective.auction.v1beta1.EventAuctionResult.amount)
  return _s;
}
inline const std::string& EventAuctionResult::_internal_amount() const {
  return _impl_.amount_.Get();
}
inline void EventAuctionResult::_internal_set_amount(const std::string& value) {
  ;


  _impl_.amount_.Set(value, GetArenaForAllocation());
}
inline std::string* EventAuctionResult::_internal_mutable_amount() {
  ;
  return _impl_.amount_.Mutable( GetArenaForAllocation());
}
inline std::string* EventAuctionResult::release_amount() {
  // @@protoc_insertion_point(field_release:injective.auction.v1beta1.EventAuctionResult.amount)
  return _impl_.amount_.Release();
}
inline void EventAuctionResult::set_allocated_amount(std::string* value) {
  _impl_.amount_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.amount_.IsDefault()) {
          _impl_.amount_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.auction.v1beta1.EventAuctionResult.amount)
}

// uint64 round = 3 [json_name = "round"];
inline void EventAuctionResult::clear_round() {
  _impl_.round_ = ::uint64_t{0u};
}
inline ::uint64_t EventAuctionResult::round() const {
  // @@protoc_insertion_point(field_get:injective.auction.v1beta1.EventAuctionResult.round)
  return _internal_round();
}
inline void EventAuctionResult::set_round(::uint64_t value) {
  _internal_set_round(value);
  // @@protoc_insertion_point(field_set:injective.auction.v1beta1.EventAuctionResult.round)
}
inline ::uint64_t EventAuctionResult::_internal_round() const {
  return _impl_.round_;
}
inline void EventAuctionResult::_internal_set_round(::uint64_t value) {
  ;
  _impl_.round_ = value;
}

// -------------------------------------------------------------------

// EventAuctionStart

// uint64 round = 1 [json_name = "round"];
inline void EventAuctionStart::clear_round() {
  _impl_.round_ = ::uint64_t{0u};
}
inline ::uint64_t EventAuctionStart::round() const {
  // @@protoc_insertion_point(field_get:injective.auction.v1beta1.EventAuctionStart.round)
  return _internal_round();
}
inline void EventAuctionStart::set_round(::uint64_t value) {
  _internal_set_round(value);
  // @@protoc_insertion_point(field_set:injective.auction.v1beta1.EventAuctionStart.round)
}
inline ::uint64_t EventAuctionStart::_internal_round() const {
  return _impl_.round_;
}
inline void EventAuctionStart::_internal_set_round(::uint64_t value) {
  ;
  _impl_.round_ = value;
}

// int64 ending_timestamp = 2 [json_name = "endingTimestamp"];
inline void EventAuctionStart::clear_ending_timestamp() {
  _impl_.ending_timestamp_ = ::int64_t{0};
}
inline ::int64_t EventAuctionStart::ending_timestamp() const {
  // @@protoc_insertion_point(field_get:injective.auction.v1beta1.EventAuctionStart.ending_timestamp)
  return _internal_ending_timestamp();
}
inline void EventAuctionStart::set_ending_timestamp(::int64_t value) {
  _internal_set_ending_timestamp(value);
  // @@protoc_insertion_point(field_set:injective.auction.v1beta1.EventAuctionStart.ending_timestamp)
}
inline ::int64_t EventAuctionStart::_internal_ending_timestamp() const {
  return _impl_.ending_timestamp_;
}
inline void EventAuctionStart::_internal_set_ending_timestamp(::int64_t value) {
  ;
  _impl_.ending_timestamp_ = value;
}

// repeated .cosmos.base.v1beta1.Coin new_basket = 3 [json_name = "newBasket", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];
inline int EventAuctionStart::_internal_new_basket_size() const {
  return _impl_.new_basket_.size();
}
inline int EventAuctionStart::new_basket_size() const {
  return _internal_new_basket_size();
}
inline ::cosmos::base::v1beta1::Coin* EventAuctionStart::mutable_new_basket(int index) {
  // @@protoc_insertion_point(field_mutable:injective.auction.v1beta1.EventAuctionStart.new_basket)
  return _internal_mutable_new_basket()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin >*
EventAuctionStart::mutable_new_basket() {
  // @@protoc_insertion_point(field_mutable_list:injective.auction.v1beta1.EventAuctionStart.new_basket)
  return _internal_mutable_new_basket();
}
inline const ::cosmos::base::v1beta1::Coin& EventAuctionStart::_internal_new_basket(int index) const {
  return _internal_new_basket().Get(index);
}
inline const ::cosmos::base::v1beta1::Coin& EventAuctionStart::new_basket(int index) const {
  // @@protoc_insertion_point(field_get:injective.auction.v1beta1.EventAuctionStart.new_basket)
  return _internal_new_basket(index);
}
inline ::cosmos::base::v1beta1::Coin* EventAuctionStart::_internal_add_new_basket() {
  return _internal_mutable_new_basket()->Add();
}
inline ::cosmos::base::v1beta1::Coin* EventAuctionStart::add_new_basket() {
  ::cosmos::base::v1beta1::Coin* _add = _internal_add_new_basket();
  // @@protoc_insertion_point(field_add:injective.auction.v1beta1.EventAuctionStart.new_basket)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin >&
EventAuctionStart::new_basket() const {
  // @@protoc_insertion_point(field_list:injective.auction.v1beta1.EventAuctionStart.new_basket)
  return _internal_new_basket();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::v1beta1::Coin>&
EventAuctionStart::_internal_new_basket() const {
  return _impl_.new_basket_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::v1beta1::Coin>*
EventAuctionStart::_internal_mutable_new_basket() {
  return &_impl_.new_basket_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1beta1
}  // namespace auction
}  // namespace injective


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_injective_2fauction_2fv1beta1_2fauction_2eproto_2epb_2eh

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: injective/auction/v1beta1/auction.proto

#include "injective/auction/v1beta1/auction.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace injective {
namespace auction {
namespace v1beta1 {
template <typename>
PROTOBUF_CONSTEXPR Params::Params(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.min_next_bid_increment_rate_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.auction_period_)*/ ::int64_t{0}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ParamsDefaultTypeInternal() {}
  union {
    Params _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ParamsDefaultTypeInternal _Params_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Bid::Bid(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.bidder_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.amount_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BidDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BidDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BidDefaultTypeInternal() {}
  union {
    Bid _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BidDefaultTypeInternal _Bid_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR EventBid::EventBid(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.bidder_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.amount_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.round_)*/ ::uint64_t{0u}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EventBidDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EventBidDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EventBidDefaultTypeInternal() {}
  union {
    EventBid _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EventBidDefaultTypeInternal _EventBid_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR EventAuctionResult::EventAuctionResult(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.winner_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.amount_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.round_)*/ ::uint64_t{0u}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EventAuctionResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EventAuctionResultDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EventAuctionResultDefaultTypeInternal() {}
  union {
    EventAuctionResult _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EventAuctionResultDefaultTypeInternal _EventAuctionResult_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR EventAuctionStart::EventAuctionStart(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.new_basket_)*/{}
  , /*decltype(_impl_.round_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.ending_timestamp_)*/ ::int64_t{0}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EventAuctionStartDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EventAuctionStartDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EventAuctionStartDefaultTypeInternal() {}
  union {
    EventAuctionStart _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EventAuctionStartDefaultTypeInternal _EventAuctionStart_default_instance_;
}  // namespace v1beta1
}  // namespace auction
}  // namespace injective
static ::_pb::Metadata file_level_metadata_injective_2fauction_2fv1beta1_2fauction_2eproto[5];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_injective_2fauction_2fv1beta1_2fauction_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_injective_2fauction_2fv1beta1_2fauction_2eproto = nullptr;
const ::uint32_t TableStruct_injective_2fauction_2fv1beta1_2fauction_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::auction::v1beta1::Params, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::auction::v1beta1::Params, _impl_.auction_period_),
    PROTOBUF_FIELD_OFFSET(::injective::auction::v1beta1::Params, _impl_.min_next_bid_increment_rate_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::auction::v1beta1::Bid, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::auction::v1beta1::Bid, _impl_.bidder_),
    PROTOBUF_FIELD_OFFSET(::injective::auction::v1beta1::Bid, _impl_.amount_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::auction::v1beta1::EventBid, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::auction::v1beta1::EventBid, _impl_.bidder_),
    PROTOBUF_FIELD_OFFSET(::injective::auction::v1beta1::EventBid, _impl_.amount_),
    PROTOBUF_FIELD_OFFSET(::injective::auction::v1beta1::EventBid, _impl_.round_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::auction::v1beta1::EventAuctionResult, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::auction::v1beta1::EventAuctionResult, _impl_.winner_),
    PROTOBUF_FIELD_OFFSET(::injective::auction::v1beta1::EventAuctionResult, _impl_.amount_),
    PROTOBUF_FIELD_OFFSET(::injective::auction::v1beta1::EventAuctionResult, _impl_.round_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::auction::v1beta1::EventAuctionStart, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::auction::v1beta1::EventAuctionStart, _impl_.round_),
    PROTOBUF_FIELD_OFFSET(::injective::auction::v1beta1::EventAuctionStart, _impl_.ending_timestamp_),
    PROTOBUF_FIELD_OFFSET(::injective::auction::v1beta1::EventAuctionStart, _impl_.new_basket_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::injective::auction::v1beta1::Params)},
        { 10, -1, -1, sizeof(::injective::auction::v1beta1::Bid)},
        { 20, -1, -1, sizeof(::injective::auction::v1beta1::EventBid)},
        { 31, -1, -1, sizeof(::injective::auction::v1beta1::EventAuctionResult)},
        { 42, -1, -1, sizeof(::injective::auction::v1beta1::EventAuctionStart)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::injective::auction::v1beta1::_Params_default_instance_._instance,
    &::injective::auction::v1beta1::_Bid_default_instance_._instance,
    &::injective::auction::v1beta1::_EventBid_default_instance_._instance,
    &::injective::auction::v1beta1::_EventAuctionResult_default_instance_._instance,
    &::injective::auction::v1beta1::_EventAuctionStart_default_instance_._instance,
};
const char descriptor_table_protodef_injective_2fauction_2fv1beta1_2fauction_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\'injective/auction/v1beta1/auction.prot"
    "o\022\031injective.auction.v1beta1\032\024gogoproto/"
    "gogo.proto\032\036cosmos/base/v1beta1/coin.pro"
    "to\"\243\001\n\006Params\022%\n\016auction_period\030\001 \001(\003R\ra"
    "uctionPeriod\022l\n\033min_next_bid_increment_r"
    "ate\030\002 \001(\tB.\310\336\037\000\332\336\037&github.com/cosmos/cos"
    "mos-sdk/types.DecR\027minNextBidIncrementRa"
    "te:\004\350\240\037\001\"\203\001\n\003Bid\0223\n\006bidder\030\001 \001(\tB\033\352\336\037\006bi"
    "dder\362\336\037\ryaml:\"bidder\"R\006bidder\022G\n\006amount\030"
    "\002 \001(\tB/\310\336\037\000\332\336\037\'github.com/cosmos/cosmos-"
    "sdk/types.CoinR\006amount\"\201\001\n\010EventBid\022\026\n\006b"
    "idder\030\001 \001(\tR\006bidder\022G\n\006amount\030\002 \001(\tB/\310\336\037"
    "\000\332\336\037\'github.com/cosmos/cosmos-sdk/types."
    "CoinR\006amount\022\024\n\005round\030\003 \001(\004R\005round\"\213\001\n\022E"
    "ventAuctionResult\022\026\n\006winner\030\001 \001(\tR\006winne"
    "r\022G\n\006amount\030\002 \001(\tB/\310\336\037\000\332\336\037\'github.com/co"
    "smos/cosmos-sdk/types.CoinR\006amount\022\024\n\005ro"
    "und\030\003 \001(\004R\005round\"\300\001\n\021EventAuctionStart\022\024"
    "\n\005round\030\001 \001(\004R\005round\022)\n\020ending_timestamp"
    "\030\002 \001(\003R\017endingTimestamp\022j\n\nnew_basket\030\003 "
    "\003(\0132\031.cosmos.base.v1beta1.CoinB0\310\336\037\000\252\337\037("
    "github.com/cosmos/cosmos-sdk/types.Coins"
    "R\tnewBasketB\202\002\n\035com.injective.auction.v1"
    "beta1B\014AuctionProtoP\001ZMgithub.com/Inject"
    "iveLabs/injective-core/injective-chain/m"
    "odules/auction/types\242\002\003IAX\252\002\031Injective.A"
    "uction.V1beta1\312\002\031Injective\\Auction\\V1bet"
    "a1\342\002%Injective\\Auction\\V1beta1\\GPBMetada"
    "ta\352\002\033Injective::Auction::V1beta1b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_injective_2fauction_2fv1beta1_2fauction_2eproto_deps[2] =
    {
        &::descriptor_table_cosmos_2fbase_2fv1beta1_2fcoin_2eproto,
        &::descriptor_table_gogoproto_2fgogo_2eproto,
};
static ::absl::once_flag descriptor_table_injective_2fauction_2fv1beta1_2fauction_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_injective_2fauction_2fv1beta1_2fauction_2eproto = {
    false,
    false,
    1160,
    descriptor_table_protodef_injective_2fauction_2fv1beta1_2fauction_2eproto,
    "injective/auction/v1beta1/auction.proto",
    &descriptor_table_injective_2fauction_2fv1beta1_2fauction_2eproto_once,
    descriptor_table_injective_2fauction_2fv1beta1_2fauction_2eproto_deps,
    2,
    5,
    schemas,
    file_default_instances,
    TableStruct_injective_2fauction_2fv1beta1_2fauction_2eproto::offsets,
    file_level_metadata_injective_2fauction_2fv1beta1_2fauction_2eproto,
    file_level_enum_descriptors_injective_2fauction_2fv1beta1_2fauction_2eproto,
    file_level_service_descriptors_injective_2fauction_2fv1beta1_2fauction_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_injective_2fauction_2fv1beta1_2fauction_2eproto_getter() {
  return &descriptor_table_injective_2fauction_2fv1beta1_2fauction_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_injective_2fauction_2fv1beta1_2fauction_2eproto(&descriptor_table_injective_2fauction_2fv1beta1_2fauction_2eproto);
namespace injective {
namespace auction {
namespace v1beta1 {
// ===================================================================

class Params::_Internal {
 public:
};

Params::Params(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.auction.v1beta1.Params)
}
Params::Params(const Params& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Params* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.min_next_bid_increment_rate_) {}

    , decltype(_impl_.auction_period_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.min_next_bid_increment_rate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.min_next_bid_increment_rate_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_min_next_bid_increment_rate().empty()) {
    _this->_impl_.min_next_bid_increment_rate_.Set(from._internal_min_next_bid_increment_rate(), _this->GetArenaForAllocation());
  }
  _this->_impl_.auction_period_ = from._impl_.auction_period_;
  // @@protoc_insertion_point(copy_constructor:injective.auction.v1beta1.Params)
}

inline void Params::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.min_next_bid_increment_rate_) {}

    , decltype(_impl_.auction_period_) { ::int64_t{0} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.min_next_bid_increment_rate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.min_next_bid_increment_rate_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Params::~Params() {
  // @@protoc_insertion_point(destructor:injective.auction.v1beta1.Params)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Params::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.min_next_bid_increment_rate_.Destroy();
}

void Params::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Params::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.auction.v1beta1.Params)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.min_next_bid_increment_rate_.ClearToEmpty();
  _impl_.auction_period_ = ::int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Params::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 auction_period = 1 [json_name = "auctionPeriod"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.auction_period_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string min_next_bid_increment_rate = 2 [json_name = "minNextBidIncrementRate", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_min_next_bid_increment_rate();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.auction.v1beta1.Params.min_next_bid_increment_rate"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Params::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.auction.v1beta1.Params)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 auction_period = 1 [json_name = "auctionPeriod"];
  if (this->_internal_auction_period() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        1, this->_internal_auction_period(), target);
  }

  // string min_next_bid_increment_rate = 2 [json_name = "minNextBidIncrementRate", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_min_next_bid_increment_rate().empty()) {
    const std::string& _s = this->_internal_min_next_bid_increment_rate();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.auction.v1beta1.Params.min_next_bid_increment_rate");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.auction.v1beta1.Params)
  return target;
}

::size_t Params::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.auction.v1beta1.Params)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string min_next_bid_increment_rate = 2 [json_name = "minNextBidIncrementRate", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_min_next_bid_increment_rate().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_min_next_bid_increment_rate());
  }

  // int64 auction_period = 1 [json_name = "auctionPeriod"];
  if (this->_internal_auction_period() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_auction_period());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Params::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Params::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Params::GetClassData() const { return &_class_data_; }


void Params::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Params*>(&to_msg);
  auto& from = static_cast<const Params&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.auction.v1beta1.Params)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_min_next_bid_increment_rate().empty()) {
    _this->_internal_set_min_next_bid_increment_rate(from._internal_min_next_bid_increment_rate());
  }
  if (from._internal_auction_period() != 0) {
    _this->_internal_set_auction_period(from._internal_auction_period());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Params::CopyFrom(const Params& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.auction.v1beta1.Params)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Params::IsInitialized() const {
  return true;
}

void Params::InternalSwap(Params* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.min_next_bid_increment_rate_, lhs_arena,
                                       &other->_impl_.min_next_bid_increment_rate_, rhs_arena);

  swap(_impl_.auction_period_, other->_impl_.auction_period_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Params::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fauction_2fv1beta1_2fauction_2eproto_getter, &descriptor_table_injective_2fauction_2fv1beta1_2fauction_2eproto_once,
      file_level_metadata_injective_2fauction_2fv1beta1_2fauction_2eproto[0]);
}
// ===================================================================

class Bid::_Internal {
 public:
};

Bid::Bid(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.auction.v1beta1.Bid)
}
Bid::Bid(const Bid& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Bid* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.bidder_) {}

    , decltype(_impl_.amount_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.bidder_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.bidder_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_bidder().empty()) {
    _this->_impl_.bidder_.Set(from._internal_bidder(), _this->GetArenaForAllocation());
  }
  _impl_.amount_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.amount_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_amount().empty()) {
    _this->_impl_.amount_.Set(from._internal_amount(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:injective.auction.v1beta1.Bid)
}

inline void Bid::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.bidder_) {}

    , decltype(_impl_.amount_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.bidder_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.bidder_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.amount_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.amount_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Bid::~Bid() {
  // @@protoc_insertion_point(destructor:injective.auction.v1beta1.Bid)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Bid::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.bidder_.Destroy();
  _impl_.amount_.Destroy();
}

void Bid::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Bid::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.auction.v1beta1.Bid)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bidder_.ClearToEmpty();
  _impl_.amount_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Bid::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string bidder = 1 [json_name = "bidder", (.gogoproto.jsontag) = "bidder", (.gogoproto.moretags) = "yaml:\"bidder\""];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_bidder();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.auction.v1beta1.Bid.bidder"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string amount = 2 [json_name = "amount", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Coin"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_amount();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.auction.v1beta1.Bid.amount"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Bid::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.auction.v1beta1.Bid)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string bidder = 1 [json_name = "bidder", (.gogoproto.jsontag) = "bidder", (.gogoproto.moretags) = "yaml:\"bidder\""];
  if (!this->_internal_bidder().empty()) {
    const std::string& _s = this->_internal_bidder();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.auction.v1beta1.Bid.bidder");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string amount = 2 [json_name = "amount", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Coin"];
  if (!this->_internal_amount().empty()) {
    const std::string& _s = this->_internal_amount();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.auction.v1beta1.Bid.amount");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.auction.v1beta1.Bid)
  return target;
}

::size_t Bid::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.auction.v1beta1.Bid)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string bidder = 1 [json_name = "bidder", (.gogoproto.jsontag) = "bidder", (.gogoproto.moretags) = "yaml:\"bidder\""];
  if (!this->_internal_bidder().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_bidder());
  }

  // string amount = 2 [json_name = "amount", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Coin"];
  if (!this->_internal_amount().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_amount());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Bid::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Bid::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Bid::GetClassData() const { return &_class_data_; }


void Bid::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Bid*>(&to_msg);
  auto& from = static_cast<const Bid&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.auction.v1beta1.Bid)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_bidder().empty()) {
    _this->_internal_set_bidder(from._internal_bidder());
  }
  if (!from._internal_amount().empty()) {
    _this->_internal_set_amount(from._internal_amount());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Bid::CopyFrom(const Bid& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.auction.v1beta1.Bid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Bid::IsInitialized() const {
  return true;
}

void Bid::InternalSwap(Bid* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.bidder_, lhs_arena,
                                       &other->_impl_.bidder_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.amount_, lhs_arena,
                                       &other->_impl_.amount_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata Bid::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fauction_2fv1beta1_2fauction_2eproto_getter, &descriptor_table_injective_2fauction_2fv1beta1_2fauction_2eproto_once,
      file_level_metadata_injective_2fauction_2fv1beta1_2fauction_2eproto[1]);
}
// ===================================================================

class EventBid::_Internal {
 public:
};

EventBid::EventBid(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.auction.v1beta1.EventBid)
}
EventBid::EventBid(const EventBid& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EventBid* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.bidder_) {}

    , decltype(_impl_.amount_) {}

    , decltype(_impl_.round_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.bidder_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.bidder_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_bidder().empty()) {
    _this->_impl_.bidder_.Set(from._internal_bidder(), _this->GetArenaForAllocation());
  }
  _impl_.amount_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.amount_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_amount().empty()) {
    _this->_impl_.amount_.Set(from._internal_amount(), _this->GetArenaForAllocation());
  }
  _this->_impl_.round_ = from._impl_.round_;
  // @@protoc_insertion_point(copy_constructor:injective.auction.v1beta1.EventBid)
}

inline void EventBid::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.bidder_) {}

    , decltype(_impl_.amount_) {}

    , decltype(_impl_.round_) { ::uint64_t{0u} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.bidder_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.bidder_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.amount_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.amount_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

EventBid::~EventBid() {
  // @@protoc_insertion_point(destructor:injective.auction.v1beta1.EventBid)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EventBid::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.bidder_.Destroy();
  _impl_.amount_.Destroy();
}

void EventBid::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EventBid::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.auction.v1beta1.EventBid)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bidder_.ClearToEmpty();
  _impl_.amount_.ClearToEmpty();
  _impl_.round_ = ::uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EventBid::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string bidder = 1 [json_name = "bidder"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_bidder();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.auction.v1beta1.EventBid.bidder"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string amount = 2 [json_name = "amount", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Coin"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_amount();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.auction.v1beta1.EventBid.amount"));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 round = 3 [json_name = "round"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.round_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* EventBid::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.auction.v1beta1.EventBid)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string bidder = 1 [json_name = "bidder"];
  if (!this->_internal_bidder().empty()) {
    const std::string& _s = this->_internal_bidder();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.auction.v1beta1.EventBid.bidder");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string amount = 2 [json_name = "amount", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Coin"];
  if (!this->_internal_amount().empty()) {
    const std::string& _s = this->_internal_amount();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.auction.v1beta1.EventBid.amount");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // uint64 round = 3 [json_name = "round"];
  if (this->_internal_round() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        3, this->_internal_round(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.auction.v1beta1.EventBid)
  return target;
}

::size_t EventBid::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.auction.v1beta1.EventBid)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string bidder = 1 [json_name = "bidder"];
  if (!this->_internal_bidder().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_bidder());
  }

  // string amount = 2 [json_name = "amount", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Coin"];
  if (!this->_internal_amount().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_amount());
  }

  // uint64 round = 3 [json_name = "round"];
  if (this->_internal_round() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_round());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EventBid::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EventBid::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EventBid::GetClassData() const { return &_class_data_; }


void EventBid::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EventBid*>(&to_msg);
  auto& from = static_cast<const EventBid&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.auction.v1beta1.EventBid)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_bidder().empty()) {
    _this->_internal_set_bidder(from._internal_bidder());
  }
  if (!from._internal_amount().empty()) {
    _this->_internal_set_amount(from._internal_amount());
  }
  if (from._internal_round() != 0) {
    _this->_internal_set_round(from._internal_round());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EventBid::CopyFrom(const EventBid& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.auction.v1beta1.EventBid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventBid::IsInitialized() const {
  return true;
}

void EventBid::InternalSwap(EventBid* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.bidder_, lhs_arena,
                                       &other->_impl_.bidder_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.amount_, lhs_arena,
                                       &other->_impl_.amount_, rhs_arena);

  swap(_impl_.round_, other->_impl_.round_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EventBid::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fauction_2fv1beta1_2fauction_2eproto_getter, &descriptor_table_injective_2fauction_2fv1beta1_2fauction_2eproto_once,
      file_level_metadata_injective_2fauction_2fv1beta1_2fauction_2eproto[2]);
}
// ===================================================================

class EventAuctionResult::_Internal {
 public:
};

EventAuctionResult::EventAuctionResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.auction.v1beta1.EventAuctionResult)
}
EventAuctionResult::EventAuctionResult(const EventAuctionResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EventAuctionResult* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.winner_) {}

    , decltype(_impl_.amount_) {}

    , decltype(_impl_.round_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.winner_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.winner_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_winner().empty()) {
    _this->_impl_.winner_.Set(from._internal_winner(), _this->GetArenaForAllocation());
  }
  _impl_.amount_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.amount_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_amount().empty()) {
    _this->_impl_.amount_.Set(from._internal_amount(), _this->GetArenaForAllocation());
  }
  _this->_impl_.round_ = from._impl_.round_;
  // @@protoc_insertion_point(copy_constructor:injective.auction.v1beta1.EventAuctionResult)
}

inline void EventAuctionResult::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.winner_) {}

    , decltype(_impl_.amount_) {}

    , decltype(_impl_.round_) { ::uint64_t{0u} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.winner_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.winner_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.amount_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.amount_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

EventAuctionResult::~EventAuctionResult() {
  // @@protoc_insertion_point(destructor:injective.auction.v1beta1.EventAuctionResult)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EventAuctionResult::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.winner_.Destroy();
  _impl_.amount_.Destroy();
}

void EventAuctionResult::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EventAuctionResult::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.auction.v1beta1.EventAuctionResult)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.winner_.ClearToEmpty();
  _impl_.amount_.ClearToEmpty();
  _impl_.round_ = ::uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EventAuctionResult::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string winner = 1 [json_name = "winner"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_winner();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.auction.v1beta1.EventAuctionResult.winner"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string amount = 2 [json_name = "amount", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Coin"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_amount();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.auction.v1beta1.EventAuctionResult.amount"));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 round = 3 [json_name = "round"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.round_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* EventAuctionResult::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.auction.v1beta1.EventAuctionResult)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string winner = 1 [json_name = "winner"];
  if (!this->_internal_winner().empty()) {
    const std::string& _s = this->_internal_winner();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.auction.v1beta1.EventAuctionResult.winner");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string amount = 2 [json_name = "amount", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Coin"];
  if (!this->_internal_amount().empty()) {
    const std::string& _s = this->_internal_amount();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.auction.v1beta1.EventAuctionResult.amount");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // uint64 round = 3 [json_name = "round"];
  if (this->_internal_round() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        3, this->_internal_round(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.auction.v1beta1.EventAuctionResult)
  return target;
}

::size_t EventAuctionResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.auction.v1beta1.EventAuctionResult)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string winner = 1 [json_name = "winner"];
  if (!this->_internal_winner().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_winner());
  }

  // string amount = 2 [json_name = "amount", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Coin"];
  if (!this->_internal_amount().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_amount());
  }

  // uint64 round = 3 [json_name = "round"];
  if (this->_internal_round() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_round());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EventAuctionResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EventAuctionResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EventAuctionResult::GetClassData() const { return &_class_data_; }


void EventAuctionResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EventAuctionResult*>(&to_msg);
  auto& from = static_cast<const EventAuctionResult&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.auction.v1beta1.EventAuctionResult)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_winner().empty()) {
    _this->_internal_set_winner(from._internal_winner());
  }
  if (!from._internal_amount().empty()) {
    _this->_internal_set_amount(from._internal_amount());
  }
  if (from._internal_round() != 0) {
    _this->_internal_set_round(from._internal_round());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EventAuctionResult::CopyFrom(const EventAuctionResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.auction.v1beta1.EventAuctionResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventAuctionResult::IsInitialized() const {
  return true;
}

void EventAuctionResult::InternalSwap(EventAuctionResult* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.winner_, lhs_arena,
                                       &other->_impl_.winner_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.amount_, lhs_arena,
                                       &other->_impl_.amount_, rhs_arena);

  swap(_impl_.round_, other->_impl_.round_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EventAuctionResult::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fauction_2fv1beta1_2fauction_2eproto_getter, &descriptor_table_injective_2fauction_2fv1beta1_2fauction_2eproto_once,
      file_level_metadata_injective_2fauction_2fv1beta1_2fauction_2eproto[3]);
}
// ===================================================================

class EventAuctionStart::_Internal {
 public:
};

void EventAuctionStart::clear_new_basket() {
  _internal_mutable_new_basket()->Clear();
}
EventAuctionStart::EventAuctionStart(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.auction.v1beta1.EventAuctionStart)
}
EventAuctionStart::EventAuctionStart(const EventAuctionStart& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EventAuctionStart* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.new_basket_){from._impl_.new_basket_}
    , decltype(_impl_.round_) {}

    , decltype(_impl_.ending_timestamp_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.round_, &from._impl_.round_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.ending_timestamp_) -
    reinterpret_cast<char*>(&_impl_.round_)) + sizeof(_impl_.ending_timestamp_));
  // @@protoc_insertion_point(copy_constructor:injective.auction.v1beta1.EventAuctionStart)
}

inline void EventAuctionStart::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.new_basket_){arena}
    , decltype(_impl_.round_) { ::uint64_t{0u} }

    , decltype(_impl_.ending_timestamp_) { ::int64_t{0} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

EventAuctionStart::~EventAuctionStart() {
  // @@protoc_insertion_point(destructor:injective.auction.v1beta1.EventAuctionStart)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EventAuctionStart::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_new_basket()->~RepeatedPtrField();
}

void EventAuctionStart::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EventAuctionStart::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.auction.v1beta1.EventAuctionStart)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_new_basket()->Clear();
  ::memset(&_impl_.round_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.ending_timestamp_) -
      reinterpret_cast<char*>(&_impl_.round_)) + sizeof(_impl_.ending_timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EventAuctionStart::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 round = 1 [json_name = "round"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.round_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 ending_timestamp = 2 [json_name = "endingTimestamp"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.ending_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .cosmos.base.v1beta1.Coin new_basket = 3 [json_name = "newBasket", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_new_basket(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* EventAuctionStart::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.auction.v1beta1.EventAuctionStart)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 round = 1 [json_name = "round"];
  if (this->_internal_round() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_round(), target);
  }

  // int64 ending_timestamp = 2 [json_name = "endingTimestamp"];
  if (this->_internal_ending_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        2, this->_internal_ending_timestamp(), target);
  }

  // repeated .cosmos.base.v1beta1.Coin new_basket = 3 [json_name = "newBasket", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_new_basket_size()); i < n; i++) {
    const auto& repfield = this->_internal_new_basket(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.auction.v1beta1.EventAuctionStart)
  return target;
}

::size_t EventAuctionStart::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.auction.v1beta1.EventAuctionStart)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cosmos.base.v1beta1.Coin new_basket = 3 [json_name = "newBasket", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];
  total_size += 1UL * this->_internal_new_basket_size();
  for (const auto& msg : this->_internal_new_basket()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint64 round = 1 [json_name = "round"];
  if (this->_internal_round() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_round());
  }

  // int64 ending_timestamp = 2 [json_name = "endingTimestamp"];
  if (this->_internal_ending_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_ending_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EventAuctionStart::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EventAuctionStart::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EventAuctionStart::GetClassData() const { return &_class_data_; }


void EventAuctionStart::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EventAuctionStart*>(&to_msg);
  auto& from = static_cast<const EventAuctionStart&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.auction.v1beta1.EventAuctionStart)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_new_basket()->MergeFrom(from._internal_new_basket());
  if (from._internal_round() != 0) {
    _this->_internal_set_round(from._internal_round());
  }
  if (from._internal_ending_timestamp() != 0) {
    _this->_internal_set_ending_timestamp(from._internal_ending_timestamp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EventAuctionStart::CopyFrom(const EventAuctionStart& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.auction.v1beta1.EventAuctionStart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventAuctionStart::IsInitialized() const {
  return true;
}

void EventAuctionStart::InternalSwap(EventAuctionStart* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_new_basket()->InternalSwap(other->_internal_mutable_new_basket());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EventAuctionStart, _impl_.ending_timestamp_)
      + sizeof(EventAuctionStart::_impl_.ending_timestamp_)
      - PROTOBUF_FIELD_OFFSET(EventAuctionStart, _impl_.round_)>(
          reinterpret_cast<char*>(&_impl_.round_),
          reinterpret_cast<char*>(&other->_impl_.round_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EventAuctionStart::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2fauction_2fv1beta1_2fauction_2eproto_getter, &descriptor_table_injective_2fauction_2fv1beta1_2fauction_2eproto_once,
      file_level_metadata_injective_2fauction_2fv1beta1_2fauction_2eproto[4]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1beta1
}  // namespace auction
}  // namespace injective
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::injective::auction::v1beta1::Params*
Arena::CreateMaybeMessage< ::injective::auction::v1beta1::Params >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::auction::v1beta1::Params >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::auction::v1beta1::Bid*
Arena::CreateMaybeMessage< ::injective::auction::v1beta1::Bid >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::auction::v1beta1::Bid >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::auction::v1beta1::EventBid*
Arena::CreateMaybeMessage< ::injective::auction::v1beta1::EventBid >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::auction::v1beta1::EventBid >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::auction::v1beta1::EventAuctionResult*
Arena::CreateMaybeMessage< ::injective::auction::v1beta1::EventAuctionResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::auction::v1beta1::EventAuctionResult >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::auction::v1beta1::EventAuctionStart*
Arena::CreateMaybeMessage< ::injective::auction::v1beta1::EventAuctionStart >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::auction::v1beta1::EventAuctionStart >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: injective/oracle/v1beta1/tx.proto
#ifndef GRPC_injective_2foracle_2fv1beta1_2ftx_2eproto__INCLUDED
#define GRPC_injective_2foracle_2fv1beta1_2ftx_2eproto__INCLUDED

#include "injective/oracle/v1beta1/tx.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace injective {
namespace oracle {
namespace v1beta1 {

// Msg defines the oracle Msg service.
class Msg final {
 public:
  static constexpr char const* service_full_name() {
    return "injective.oracle.v1beta1.Msg";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // RelayProviderPrice defines a method for relaying a price for a
    // provider-based oracle
    virtual ::grpc::Status RelayProviderPrices(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::MsgRelayProviderPrices& request, ::injective::oracle::v1beta1::MsgRelayProviderPricesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::oracle::v1beta1::MsgRelayProviderPricesResponse>> AsyncRelayProviderPrices(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::MsgRelayProviderPrices& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::oracle::v1beta1::MsgRelayProviderPricesResponse>>(AsyncRelayProviderPricesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::oracle::v1beta1::MsgRelayProviderPricesResponse>> PrepareAsyncRelayProviderPrices(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::MsgRelayProviderPrices& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::oracle::v1beta1::MsgRelayProviderPricesResponse>>(PrepareAsyncRelayProviderPricesRaw(context, request, cq));
    }
    // RelayPriceFeedPrice defines a method for relaying a price for a price
    // feeder-based oracle
    virtual ::grpc::Status RelayPriceFeedPrice(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::MsgRelayPriceFeedPrice& request, ::injective::oracle::v1beta1::MsgRelayPriceFeedPriceResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::oracle::v1beta1::MsgRelayPriceFeedPriceResponse>> AsyncRelayPriceFeedPrice(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::MsgRelayPriceFeedPrice& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::oracle::v1beta1::MsgRelayPriceFeedPriceResponse>>(AsyncRelayPriceFeedPriceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::oracle::v1beta1::MsgRelayPriceFeedPriceResponse>> PrepareAsyncRelayPriceFeedPrice(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::MsgRelayPriceFeedPrice& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::oracle::v1beta1::MsgRelayPriceFeedPriceResponse>>(PrepareAsyncRelayPriceFeedPriceRaw(context, request, cq));
    }
    // RelayBandRates defines a method for relaying rates from Band
    virtual ::grpc::Status RelayBandRates(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::MsgRelayBandRates& request, ::injective::oracle::v1beta1::MsgRelayBandRatesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::oracle::v1beta1::MsgRelayBandRatesResponse>> AsyncRelayBandRates(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::MsgRelayBandRates& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::oracle::v1beta1::MsgRelayBandRatesResponse>>(AsyncRelayBandRatesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::oracle::v1beta1::MsgRelayBandRatesResponse>> PrepareAsyncRelayBandRates(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::MsgRelayBandRates& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::oracle::v1beta1::MsgRelayBandRatesResponse>>(PrepareAsyncRelayBandRatesRaw(context, request, cq));
    }
    // RequestBandIBCRates defines a method for fetching rates from Band ibc
    virtual ::grpc::Status RequestBandIBCRates(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::MsgRequestBandIBCRates& request, ::injective::oracle::v1beta1::MsgRequestBandIBCRatesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::oracle::v1beta1::MsgRequestBandIBCRatesResponse>> AsyncRequestBandIBCRates(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::MsgRequestBandIBCRates& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::oracle::v1beta1::MsgRequestBandIBCRatesResponse>>(AsyncRequestBandIBCRatesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::oracle::v1beta1::MsgRequestBandIBCRatesResponse>> PrepareAsyncRequestBandIBCRates(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::MsgRequestBandIBCRates& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::oracle::v1beta1::MsgRequestBandIBCRatesResponse>>(PrepareAsyncRequestBandIBCRatesRaw(context, request, cq));
    }
    // RelayCoinbaseMessages defines a method for relaying price messages from
    // Coinbase API
    virtual ::grpc::Status RelayCoinbaseMessages(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::MsgRelayCoinbaseMessages& request, ::injective::oracle::v1beta1::MsgRelayCoinbaseMessagesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::oracle::v1beta1::MsgRelayCoinbaseMessagesResponse>> AsyncRelayCoinbaseMessages(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::MsgRelayCoinbaseMessages& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::oracle::v1beta1::MsgRelayCoinbaseMessagesResponse>>(AsyncRelayCoinbaseMessagesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::oracle::v1beta1::MsgRelayCoinbaseMessagesResponse>> PrepareAsyncRelayCoinbaseMessages(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::MsgRelayCoinbaseMessages& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::oracle::v1beta1::MsgRelayCoinbaseMessagesResponse>>(PrepareAsyncRelayCoinbaseMessagesRaw(context, request, cq));
    }
    // RelayPythPrices defines a method for relaying rates from the Pyth contract
    virtual ::grpc::Status RelayPythPrices(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::MsgRelayPythPrices& request, ::injective::oracle::v1beta1::MsgRelayPythPricesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::oracle::v1beta1::MsgRelayPythPricesResponse>> AsyncRelayPythPrices(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::MsgRelayPythPrices& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::oracle::v1beta1::MsgRelayPythPricesResponse>>(AsyncRelayPythPricesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::oracle::v1beta1::MsgRelayPythPricesResponse>> PrepareAsyncRelayPythPrices(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::MsgRelayPythPrices& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::oracle::v1beta1::MsgRelayPythPricesResponse>>(PrepareAsyncRelayPythPricesRaw(context, request, cq));
    }
    //  UpdateParams enables updating oracle module's params via governance
    virtual ::grpc::Status UpdateParams(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::MsgUpdateParams& request, ::injective::oracle::v1beta1::MsgUpdateParamsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::oracle::v1beta1::MsgUpdateParamsResponse>> AsyncUpdateParams(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::MsgUpdateParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::oracle::v1beta1::MsgUpdateParamsResponse>>(AsyncUpdateParamsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::oracle::v1beta1::MsgUpdateParamsResponse>> PrepareAsyncUpdateParams(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::MsgUpdateParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::oracle::v1beta1::MsgUpdateParamsResponse>>(PrepareAsyncUpdateParamsRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // RelayProviderPrice defines a method for relaying a price for a
      // provider-based oracle
      virtual void RelayProviderPrices(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::MsgRelayProviderPrices* request, ::injective::oracle::v1beta1::MsgRelayProviderPricesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RelayProviderPrices(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::MsgRelayProviderPrices* request, ::injective::oracle::v1beta1::MsgRelayProviderPricesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // RelayPriceFeedPrice defines a method for relaying a price for a price
      // feeder-based oracle
      virtual void RelayPriceFeedPrice(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::MsgRelayPriceFeedPrice* request, ::injective::oracle::v1beta1::MsgRelayPriceFeedPriceResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RelayPriceFeedPrice(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::MsgRelayPriceFeedPrice* request, ::injective::oracle::v1beta1::MsgRelayPriceFeedPriceResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // RelayBandRates defines a method for relaying rates from Band
      virtual void RelayBandRates(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::MsgRelayBandRates* request, ::injective::oracle::v1beta1::MsgRelayBandRatesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RelayBandRates(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::MsgRelayBandRates* request, ::injective::oracle::v1beta1::MsgRelayBandRatesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // RequestBandIBCRates defines a method for fetching rates from Band ibc
      virtual void RequestBandIBCRates(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::MsgRequestBandIBCRates* request, ::injective::oracle::v1beta1::MsgRequestBandIBCRatesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RequestBandIBCRates(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::MsgRequestBandIBCRates* request, ::injective::oracle::v1beta1::MsgRequestBandIBCRatesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // RelayCoinbaseMessages defines a method for relaying price messages from
      // Coinbase API
      virtual void RelayCoinbaseMessages(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::MsgRelayCoinbaseMessages* request, ::injective::oracle::v1beta1::MsgRelayCoinbaseMessagesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RelayCoinbaseMessages(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::MsgRelayCoinbaseMessages* request, ::injective::oracle::v1beta1::MsgRelayCoinbaseMessagesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // RelayPythPrices defines a method for relaying rates from the Pyth contract
      virtual void RelayPythPrices(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::MsgRelayPythPrices* request, ::injective::oracle::v1beta1::MsgRelayPythPricesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RelayPythPrices(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::MsgRelayPythPrices* request, ::injective::oracle::v1beta1::MsgRelayPythPricesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      //  UpdateParams enables updating oracle module's params via governance
      virtual void UpdateParams(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::MsgUpdateParams* request, ::injective::oracle::v1beta1::MsgUpdateParamsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateParams(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::MsgUpdateParams* request, ::injective::oracle::v1beta1::MsgUpdateParamsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::oracle::v1beta1::MsgRelayProviderPricesResponse>* AsyncRelayProviderPricesRaw(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::MsgRelayProviderPrices& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::oracle::v1beta1::MsgRelayProviderPricesResponse>* PrepareAsyncRelayProviderPricesRaw(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::MsgRelayProviderPrices& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::oracle::v1beta1::MsgRelayPriceFeedPriceResponse>* AsyncRelayPriceFeedPriceRaw(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::MsgRelayPriceFeedPrice& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::oracle::v1beta1::MsgRelayPriceFeedPriceResponse>* PrepareAsyncRelayPriceFeedPriceRaw(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::MsgRelayPriceFeedPrice& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::oracle::v1beta1::MsgRelayBandRatesResponse>* AsyncRelayBandRatesRaw(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::MsgRelayBandRates& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::oracle::v1beta1::MsgRelayBandRatesResponse>* PrepareAsyncRelayBandRatesRaw(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::MsgRelayBandRates& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::oracle::v1beta1::MsgRequestBandIBCRatesResponse>* AsyncRequestBandIBCRatesRaw(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::MsgRequestBandIBCRates& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::oracle::v1beta1::MsgRequestBandIBCRatesResponse>* PrepareAsyncRequestBandIBCRatesRaw(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::MsgRequestBandIBCRates& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::oracle::v1beta1::MsgRelayCoinbaseMessagesResponse>* AsyncRelayCoinbaseMessagesRaw(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::MsgRelayCoinbaseMessages& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::oracle::v1beta1::MsgRelayCoinbaseMessagesResponse>* PrepareAsyncRelayCoinbaseMessagesRaw(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::MsgRelayCoinbaseMessages& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::oracle::v1beta1::MsgRelayPythPricesResponse>* AsyncRelayPythPricesRaw(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::MsgRelayPythPrices& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::oracle::v1beta1::MsgRelayPythPricesResponse>* PrepareAsyncRelayPythPricesRaw(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::MsgRelayPythPrices& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::oracle::v1beta1::MsgUpdateParamsResponse>* AsyncUpdateParamsRaw(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::MsgUpdateParams& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::oracle::v1beta1::MsgUpdateParamsResponse>* PrepareAsyncUpdateParamsRaw(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::MsgUpdateParams& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status RelayProviderPrices(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::MsgRelayProviderPrices& request, ::injective::oracle::v1beta1::MsgRelayProviderPricesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::MsgRelayProviderPricesResponse>> AsyncRelayProviderPrices(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::MsgRelayProviderPrices& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::MsgRelayProviderPricesResponse>>(AsyncRelayProviderPricesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::MsgRelayProviderPricesResponse>> PrepareAsyncRelayProviderPrices(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::MsgRelayProviderPrices& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::MsgRelayProviderPricesResponse>>(PrepareAsyncRelayProviderPricesRaw(context, request, cq));
    }
    ::grpc::Status RelayPriceFeedPrice(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::MsgRelayPriceFeedPrice& request, ::injective::oracle::v1beta1::MsgRelayPriceFeedPriceResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::MsgRelayPriceFeedPriceResponse>> AsyncRelayPriceFeedPrice(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::MsgRelayPriceFeedPrice& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::MsgRelayPriceFeedPriceResponse>>(AsyncRelayPriceFeedPriceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::MsgRelayPriceFeedPriceResponse>> PrepareAsyncRelayPriceFeedPrice(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::MsgRelayPriceFeedPrice& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::MsgRelayPriceFeedPriceResponse>>(PrepareAsyncRelayPriceFeedPriceRaw(context, request, cq));
    }
    ::grpc::Status RelayBandRates(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::MsgRelayBandRates& request, ::injective::oracle::v1beta1::MsgRelayBandRatesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::MsgRelayBandRatesResponse>> AsyncRelayBandRates(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::MsgRelayBandRates& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::MsgRelayBandRatesResponse>>(AsyncRelayBandRatesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::MsgRelayBandRatesResponse>> PrepareAsyncRelayBandRates(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::MsgRelayBandRates& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::MsgRelayBandRatesResponse>>(PrepareAsyncRelayBandRatesRaw(context, request, cq));
    }
    ::grpc::Status RequestBandIBCRates(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::MsgRequestBandIBCRates& request, ::injective::oracle::v1beta1::MsgRequestBandIBCRatesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::MsgRequestBandIBCRatesResponse>> AsyncRequestBandIBCRates(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::MsgRequestBandIBCRates& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::MsgRequestBandIBCRatesResponse>>(AsyncRequestBandIBCRatesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::MsgRequestBandIBCRatesResponse>> PrepareAsyncRequestBandIBCRates(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::MsgRequestBandIBCRates& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::MsgRequestBandIBCRatesResponse>>(PrepareAsyncRequestBandIBCRatesRaw(context, request, cq));
    }
    ::grpc::Status RelayCoinbaseMessages(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::MsgRelayCoinbaseMessages& request, ::injective::oracle::v1beta1::MsgRelayCoinbaseMessagesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::MsgRelayCoinbaseMessagesResponse>> AsyncRelayCoinbaseMessages(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::MsgRelayCoinbaseMessages& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::MsgRelayCoinbaseMessagesResponse>>(AsyncRelayCoinbaseMessagesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::MsgRelayCoinbaseMessagesResponse>> PrepareAsyncRelayCoinbaseMessages(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::MsgRelayCoinbaseMessages& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::MsgRelayCoinbaseMessagesResponse>>(PrepareAsyncRelayCoinbaseMessagesRaw(context, request, cq));
    }
    ::grpc::Status RelayPythPrices(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::MsgRelayPythPrices& request, ::injective::oracle::v1beta1::MsgRelayPythPricesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::MsgRelayPythPricesResponse>> AsyncRelayPythPrices(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::MsgRelayPythPrices& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::MsgRelayPythPricesResponse>>(AsyncRelayPythPricesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::MsgRelayPythPricesResponse>> PrepareAsyncRelayPythPrices(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::MsgRelayPythPrices& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::MsgRelayPythPricesResponse>>(PrepareAsyncRelayPythPricesRaw(context, request, cq));
    }
    ::grpc::Status UpdateParams(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::MsgUpdateParams& request, ::injective::oracle::v1beta1::MsgUpdateParamsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::MsgUpdateParamsResponse>> AsyncUpdateParams(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::MsgUpdateParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::MsgUpdateParamsResponse>>(AsyncUpdateParamsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::MsgUpdateParamsResponse>> PrepareAsyncUpdateParams(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::MsgUpdateParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::MsgUpdateParamsResponse>>(PrepareAsyncUpdateParamsRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void RelayProviderPrices(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::MsgRelayProviderPrices* request, ::injective::oracle::v1beta1::MsgRelayProviderPricesResponse* response, std::function<void(::grpc::Status)>) override;
      void RelayProviderPrices(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::MsgRelayProviderPrices* request, ::injective::oracle::v1beta1::MsgRelayProviderPricesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void RelayPriceFeedPrice(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::MsgRelayPriceFeedPrice* request, ::injective::oracle::v1beta1::MsgRelayPriceFeedPriceResponse* response, std::function<void(::grpc::Status)>) override;
      void RelayPriceFeedPrice(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::MsgRelayPriceFeedPrice* request, ::injective::oracle::v1beta1::MsgRelayPriceFeedPriceResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void RelayBandRates(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::MsgRelayBandRates* request, ::injective::oracle::v1beta1::MsgRelayBandRatesResponse* response, std::function<void(::grpc::Status)>) override;
      void RelayBandRates(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::MsgRelayBandRates* request, ::injective::oracle::v1beta1::MsgRelayBandRatesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void RequestBandIBCRates(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::MsgRequestBandIBCRates* request, ::injective::oracle::v1beta1::MsgRequestBandIBCRatesResponse* response, std::function<void(::grpc::Status)>) override;
      void RequestBandIBCRates(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::MsgRequestBandIBCRates* request, ::injective::oracle::v1beta1::MsgRequestBandIBCRatesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void RelayCoinbaseMessages(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::MsgRelayCoinbaseMessages* request, ::injective::oracle::v1beta1::MsgRelayCoinbaseMessagesResponse* response, std::function<void(::grpc::Status)>) override;
      void RelayCoinbaseMessages(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::MsgRelayCoinbaseMessages* request, ::injective::oracle::v1beta1::MsgRelayCoinbaseMessagesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void RelayPythPrices(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::MsgRelayPythPrices* request, ::injective::oracle::v1beta1::MsgRelayPythPricesResponse* response, std::function<void(::grpc::Status)>) override;
      void RelayPythPrices(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::MsgRelayPythPrices* request, ::injective::oracle::v1beta1::MsgRelayPythPricesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UpdateParams(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::MsgUpdateParams* request, ::injective::oracle::v1beta1::MsgUpdateParamsResponse* response, std::function<void(::grpc::Status)>) override;
      void UpdateParams(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::MsgUpdateParams* request, ::injective::oracle::v1beta1::MsgUpdateParamsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::MsgRelayProviderPricesResponse>* AsyncRelayProviderPricesRaw(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::MsgRelayProviderPrices& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::MsgRelayProviderPricesResponse>* PrepareAsyncRelayProviderPricesRaw(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::MsgRelayProviderPrices& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::MsgRelayPriceFeedPriceResponse>* AsyncRelayPriceFeedPriceRaw(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::MsgRelayPriceFeedPrice& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::MsgRelayPriceFeedPriceResponse>* PrepareAsyncRelayPriceFeedPriceRaw(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::MsgRelayPriceFeedPrice& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::MsgRelayBandRatesResponse>* AsyncRelayBandRatesRaw(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::MsgRelayBandRates& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::MsgRelayBandRatesResponse>* PrepareAsyncRelayBandRatesRaw(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::MsgRelayBandRates& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::MsgRequestBandIBCRatesResponse>* AsyncRequestBandIBCRatesRaw(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::MsgRequestBandIBCRates& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::MsgRequestBandIBCRatesResponse>* PrepareAsyncRequestBandIBCRatesRaw(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::MsgRequestBandIBCRates& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::MsgRelayCoinbaseMessagesResponse>* AsyncRelayCoinbaseMessagesRaw(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::MsgRelayCoinbaseMessages& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::MsgRelayCoinbaseMessagesResponse>* PrepareAsyncRelayCoinbaseMessagesRaw(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::MsgRelayCoinbaseMessages& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::MsgRelayPythPricesResponse>* AsyncRelayPythPricesRaw(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::MsgRelayPythPrices& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::MsgRelayPythPricesResponse>* PrepareAsyncRelayPythPricesRaw(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::MsgRelayPythPrices& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::MsgUpdateParamsResponse>* AsyncUpdateParamsRaw(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::MsgUpdateParams& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::MsgUpdateParamsResponse>* PrepareAsyncUpdateParamsRaw(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::MsgUpdateParams& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_RelayProviderPrices_;
    const ::grpc::internal::RpcMethod rpcmethod_RelayPriceFeedPrice_;
    const ::grpc::internal::RpcMethod rpcmethod_RelayBandRates_;
    const ::grpc::internal::RpcMethod rpcmethod_RequestBandIBCRates_;
    const ::grpc::internal::RpcMethod rpcmethod_RelayCoinbaseMessages_;
    const ::grpc::internal::RpcMethod rpcmethod_RelayPythPrices_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateParams_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // RelayProviderPrice defines a method for relaying a price for a
    // provider-based oracle
    virtual ::grpc::Status RelayProviderPrices(::grpc::ServerContext* context, const ::injective::oracle::v1beta1::MsgRelayProviderPrices* request, ::injective::oracle::v1beta1::MsgRelayProviderPricesResponse* response);
    // RelayPriceFeedPrice defines a method for relaying a price for a price
    // feeder-based oracle
    virtual ::grpc::Status RelayPriceFeedPrice(::grpc::ServerContext* context, const ::injective::oracle::v1beta1::MsgRelayPriceFeedPrice* request, ::injective::oracle::v1beta1::MsgRelayPriceFeedPriceResponse* response);
    // RelayBandRates defines a method for relaying rates from Band
    virtual ::grpc::Status RelayBandRates(::grpc::ServerContext* context, const ::injective::oracle::v1beta1::MsgRelayBandRates* request, ::injective::oracle::v1beta1::MsgRelayBandRatesResponse* response);
    // RequestBandIBCRates defines a method for fetching rates from Band ibc
    virtual ::grpc::Status RequestBandIBCRates(::grpc::ServerContext* context, const ::injective::oracle::v1beta1::MsgRequestBandIBCRates* request, ::injective::oracle::v1beta1::MsgRequestBandIBCRatesResponse* response);
    // RelayCoinbaseMessages defines a method for relaying price messages from
    // Coinbase API
    virtual ::grpc::Status RelayCoinbaseMessages(::grpc::ServerContext* context, const ::injective::oracle::v1beta1::MsgRelayCoinbaseMessages* request, ::injective::oracle::v1beta1::MsgRelayCoinbaseMessagesResponse* response);
    // RelayPythPrices defines a method for relaying rates from the Pyth contract
    virtual ::grpc::Status RelayPythPrices(::grpc::ServerContext* context, const ::injective::oracle::v1beta1::MsgRelayPythPrices* request, ::injective::oracle::v1beta1::MsgRelayPythPricesResponse* response);
    //  UpdateParams enables updating oracle module's params via governance
    virtual ::grpc::Status UpdateParams(::grpc::ServerContext* context, const ::injective::oracle::v1beta1::MsgUpdateParams* request, ::injective::oracle::v1beta1::MsgUpdateParamsResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_RelayProviderPrices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RelayProviderPrices() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_RelayProviderPrices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RelayProviderPrices(::grpc::ServerContext* /*context*/, const ::injective::oracle::v1beta1::MsgRelayProviderPrices* /*request*/, ::injective::oracle::v1beta1::MsgRelayProviderPricesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRelayProviderPrices(::grpc::ServerContext* context, ::injective::oracle::v1beta1::MsgRelayProviderPrices* request, ::grpc::ServerAsyncResponseWriter< ::injective::oracle::v1beta1::MsgRelayProviderPricesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RelayPriceFeedPrice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RelayPriceFeedPrice() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_RelayPriceFeedPrice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RelayPriceFeedPrice(::grpc::ServerContext* /*context*/, const ::injective::oracle::v1beta1::MsgRelayPriceFeedPrice* /*request*/, ::injective::oracle::v1beta1::MsgRelayPriceFeedPriceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRelayPriceFeedPrice(::grpc::ServerContext* context, ::injective::oracle::v1beta1::MsgRelayPriceFeedPrice* request, ::grpc::ServerAsyncResponseWriter< ::injective::oracle::v1beta1::MsgRelayPriceFeedPriceResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RelayBandRates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RelayBandRates() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_RelayBandRates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RelayBandRates(::grpc::ServerContext* /*context*/, const ::injective::oracle::v1beta1::MsgRelayBandRates* /*request*/, ::injective::oracle::v1beta1::MsgRelayBandRatesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRelayBandRates(::grpc::ServerContext* context, ::injective::oracle::v1beta1::MsgRelayBandRates* request, ::grpc::ServerAsyncResponseWriter< ::injective::oracle::v1beta1::MsgRelayBandRatesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RequestBandIBCRates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RequestBandIBCRates() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_RequestBandIBCRates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestBandIBCRates(::grpc::ServerContext* /*context*/, const ::injective::oracle::v1beta1::MsgRequestBandIBCRates* /*request*/, ::injective::oracle::v1beta1::MsgRequestBandIBCRatesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRequestBandIBCRates(::grpc::ServerContext* context, ::injective::oracle::v1beta1::MsgRequestBandIBCRates* request, ::grpc::ServerAsyncResponseWriter< ::injective::oracle::v1beta1::MsgRequestBandIBCRatesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RelayCoinbaseMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RelayCoinbaseMessages() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_RelayCoinbaseMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RelayCoinbaseMessages(::grpc::ServerContext* /*context*/, const ::injective::oracle::v1beta1::MsgRelayCoinbaseMessages* /*request*/, ::injective::oracle::v1beta1::MsgRelayCoinbaseMessagesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRelayCoinbaseMessages(::grpc::ServerContext* context, ::injective::oracle::v1beta1::MsgRelayCoinbaseMessages* request, ::grpc::ServerAsyncResponseWriter< ::injective::oracle::v1beta1::MsgRelayCoinbaseMessagesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RelayPythPrices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RelayPythPrices() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_RelayPythPrices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RelayPythPrices(::grpc::ServerContext* /*context*/, const ::injective::oracle::v1beta1::MsgRelayPythPrices* /*request*/, ::injective::oracle::v1beta1::MsgRelayPythPricesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRelayPythPrices(::grpc::ServerContext* context, ::injective::oracle::v1beta1::MsgRelayPythPrices* request, ::grpc::ServerAsyncResponseWriter< ::injective::oracle::v1beta1::MsgRelayPythPricesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateParams : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateParams() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_UpdateParams() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateParams(::grpc::ServerContext* /*context*/, const ::injective::oracle::v1beta1::MsgUpdateParams* /*request*/, ::injective::oracle::v1beta1::MsgUpdateParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateParams(::grpc::ServerContext* context, ::injective::oracle::v1beta1::MsgUpdateParams* request, ::grpc::ServerAsyncResponseWriter< ::injective::oracle::v1beta1::MsgUpdateParamsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_RelayProviderPrices<WithAsyncMethod_RelayPriceFeedPrice<WithAsyncMethod_RelayBandRates<WithAsyncMethod_RequestBandIBCRates<WithAsyncMethod_RelayCoinbaseMessages<WithAsyncMethod_RelayPythPrices<WithAsyncMethod_UpdateParams<Service > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_RelayProviderPrices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RelayProviderPrices() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::injective::oracle::v1beta1::MsgRelayProviderPrices, ::injective::oracle::v1beta1::MsgRelayProviderPricesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::injective::oracle::v1beta1::MsgRelayProviderPrices* request, ::injective::oracle::v1beta1::MsgRelayProviderPricesResponse* response) { return this->RelayProviderPrices(context, request, response); }));}
    void SetMessageAllocatorFor_RelayProviderPrices(
        ::grpc::MessageAllocator< ::injective::oracle::v1beta1::MsgRelayProviderPrices, ::injective::oracle::v1beta1::MsgRelayProviderPricesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::injective::oracle::v1beta1::MsgRelayProviderPrices, ::injective::oracle::v1beta1::MsgRelayProviderPricesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RelayProviderPrices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RelayProviderPrices(::grpc::ServerContext* /*context*/, const ::injective::oracle::v1beta1::MsgRelayProviderPrices* /*request*/, ::injective::oracle::v1beta1::MsgRelayProviderPricesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RelayProviderPrices(
      ::grpc::CallbackServerContext* /*context*/, const ::injective::oracle::v1beta1::MsgRelayProviderPrices* /*request*/, ::injective::oracle::v1beta1::MsgRelayProviderPricesResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_RelayPriceFeedPrice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RelayPriceFeedPrice() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::injective::oracle::v1beta1::MsgRelayPriceFeedPrice, ::injective::oracle::v1beta1::MsgRelayPriceFeedPriceResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::injective::oracle::v1beta1::MsgRelayPriceFeedPrice* request, ::injective::oracle::v1beta1::MsgRelayPriceFeedPriceResponse* response) { return this->RelayPriceFeedPrice(context, request, response); }));}
    void SetMessageAllocatorFor_RelayPriceFeedPrice(
        ::grpc::MessageAllocator< ::injective::oracle::v1beta1::MsgRelayPriceFeedPrice, ::injective::oracle::v1beta1::MsgRelayPriceFeedPriceResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::injective::oracle::v1beta1::MsgRelayPriceFeedPrice, ::injective::oracle::v1beta1::MsgRelayPriceFeedPriceResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RelayPriceFeedPrice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RelayPriceFeedPrice(::grpc::ServerContext* /*context*/, const ::injective::oracle::v1beta1::MsgRelayPriceFeedPrice* /*request*/, ::injective::oracle::v1beta1::MsgRelayPriceFeedPriceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RelayPriceFeedPrice(
      ::grpc::CallbackServerContext* /*context*/, const ::injective::oracle::v1beta1::MsgRelayPriceFeedPrice* /*request*/, ::injective::oracle::v1beta1::MsgRelayPriceFeedPriceResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_RelayBandRates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RelayBandRates() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::injective::oracle::v1beta1::MsgRelayBandRates, ::injective::oracle::v1beta1::MsgRelayBandRatesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::injective::oracle::v1beta1::MsgRelayBandRates* request, ::injective::oracle::v1beta1::MsgRelayBandRatesResponse* response) { return this->RelayBandRates(context, request, response); }));}
    void SetMessageAllocatorFor_RelayBandRates(
        ::grpc::MessageAllocator< ::injective::oracle::v1beta1::MsgRelayBandRates, ::injective::oracle::v1beta1::MsgRelayBandRatesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::injective::oracle::v1beta1::MsgRelayBandRates, ::injective::oracle::v1beta1::MsgRelayBandRatesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RelayBandRates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RelayBandRates(::grpc::ServerContext* /*context*/, const ::injective::oracle::v1beta1::MsgRelayBandRates* /*request*/, ::injective::oracle::v1beta1::MsgRelayBandRatesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RelayBandRates(
      ::grpc::CallbackServerContext* /*context*/, const ::injective::oracle::v1beta1::MsgRelayBandRates* /*request*/, ::injective::oracle::v1beta1::MsgRelayBandRatesResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_RequestBandIBCRates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RequestBandIBCRates() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::injective::oracle::v1beta1::MsgRequestBandIBCRates, ::injective::oracle::v1beta1::MsgRequestBandIBCRatesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::injective::oracle::v1beta1::MsgRequestBandIBCRates* request, ::injective::oracle::v1beta1::MsgRequestBandIBCRatesResponse* response) { return this->RequestBandIBCRates(context, request, response); }));}
    void SetMessageAllocatorFor_RequestBandIBCRates(
        ::grpc::MessageAllocator< ::injective::oracle::v1beta1::MsgRequestBandIBCRates, ::injective::oracle::v1beta1::MsgRequestBandIBCRatesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::injective::oracle::v1beta1::MsgRequestBandIBCRates, ::injective::oracle::v1beta1::MsgRequestBandIBCRatesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RequestBandIBCRates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestBandIBCRates(::grpc::ServerContext* /*context*/, const ::injective::oracle::v1beta1::MsgRequestBandIBCRates* /*request*/, ::injective::oracle::v1beta1::MsgRequestBandIBCRatesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RequestBandIBCRates(
      ::grpc::CallbackServerContext* /*context*/, const ::injective::oracle::v1beta1::MsgRequestBandIBCRates* /*request*/, ::injective::oracle::v1beta1::MsgRequestBandIBCRatesResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_RelayCoinbaseMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RelayCoinbaseMessages() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::injective::oracle::v1beta1::MsgRelayCoinbaseMessages, ::injective::oracle::v1beta1::MsgRelayCoinbaseMessagesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::injective::oracle::v1beta1::MsgRelayCoinbaseMessages* request, ::injective::oracle::v1beta1::MsgRelayCoinbaseMessagesResponse* response) { return this->RelayCoinbaseMessages(context, request, response); }));}
    void SetMessageAllocatorFor_RelayCoinbaseMessages(
        ::grpc::MessageAllocator< ::injective::oracle::v1beta1::MsgRelayCoinbaseMessages, ::injective::oracle::v1beta1::MsgRelayCoinbaseMessagesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::injective::oracle::v1beta1::MsgRelayCoinbaseMessages, ::injective::oracle::v1beta1::MsgRelayCoinbaseMessagesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RelayCoinbaseMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RelayCoinbaseMessages(::grpc::ServerContext* /*context*/, const ::injective::oracle::v1beta1::MsgRelayCoinbaseMessages* /*request*/, ::injective::oracle::v1beta1::MsgRelayCoinbaseMessagesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RelayCoinbaseMessages(
      ::grpc::CallbackServerContext* /*context*/, const ::injective::oracle::v1beta1::MsgRelayCoinbaseMessages* /*request*/, ::injective::oracle::v1beta1::MsgRelayCoinbaseMessagesResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_RelayPythPrices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RelayPythPrices() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::injective::oracle::v1beta1::MsgRelayPythPrices, ::injective::oracle::v1beta1::MsgRelayPythPricesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::injective::oracle::v1beta1::MsgRelayPythPrices* request, ::injective::oracle::v1beta1::MsgRelayPythPricesResponse* response) { return this->RelayPythPrices(context, request, response); }));}
    void SetMessageAllocatorFor_RelayPythPrices(
        ::grpc::MessageAllocator< ::injective::oracle::v1beta1::MsgRelayPythPrices, ::injective::oracle::v1beta1::MsgRelayPythPricesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::injective::oracle::v1beta1::MsgRelayPythPrices, ::injective::oracle::v1beta1::MsgRelayPythPricesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RelayPythPrices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RelayPythPrices(::grpc::ServerContext* /*context*/, const ::injective::oracle::v1beta1::MsgRelayPythPrices* /*request*/, ::injective::oracle::v1beta1::MsgRelayPythPricesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RelayPythPrices(
      ::grpc::CallbackServerContext* /*context*/, const ::injective::oracle::v1beta1::MsgRelayPythPrices* /*request*/, ::injective::oracle::v1beta1::MsgRelayPythPricesResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdateParams : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdateParams() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::injective::oracle::v1beta1::MsgUpdateParams, ::injective::oracle::v1beta1::MsgUpdateParamsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::injective::oracle::v1beta1::MsgUpdateParams* request, ::injective::oracle::v1beta1::MsgUpdateParamsResponse* response) { return this->UpdateParams(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateParams(
        ::grpc::MessageAllocator< ::injective::oracle::v1beta1::MsgUpdateParams, ::injective::oracle::v1beta1::MsgUpdateParamsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::injective::oracle::v1beta1::MsgUpdateParams, ::injective::oracle::v1beta1::MsgUpdateParamsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdateParams() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateParams(::grpc::ServerContext* /*context*/, const ::injective::oracle::v1beta1::MsgUpdateParams* /*request*/, ::injective::oracle::v1beta1::MsgUpdateParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateParams(
      ::grpc::CallbackServerContext* /*context*/, const ::injective::oracle::v1beta1::MsgUpdateParams* /*request*/, ::injective::oracle::v1beta1::MsgUpdateParamsResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_RelayProviderPrices<WithCallbackMethod_RelayPriceFeedPrice<WithCallbackMethod_RelayBandRates<WithCallbackMethod_RequestBandIBCRates<WithCallbackMethod_RelayCoinbaseMessages<WithCallbackMethod_RelayPythPrices<WithCallbackMethod_UpdateParams<Service > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_RelayProviderPrices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RelayProviderPrices() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_RelayProviderPrices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RelayProviderPrices(::grpc::ServerContext* /*context*/, const ::injective::oracle::v1beta1::MsgRelayProviderPrices* /*request*/, ::injective::oracle::v1beta1::MsgRelayProviderPricesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RelayPriceFeedPrice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RelayPriceFeedPrice() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_RelayPriceFeedPrice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RelayPriceFeedPrice(::grpc::ServerContext* /*context*/, const ::injective::oracle::v1beta1::MsgRelayPriceFeedPrice* /*request*/, ::injective::oracle::v1beta1::MsgRelayPriceFeedPriceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RelayBandRates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RelayBandRates() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_RelayBandRates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RelayBandRates(::grpc::ServerContext* /*context*/, const ::injective::oracle::v1beta1::MsgRelayBandRates* /*request*/, ::injective::oracle::v1beta1::MsgRelayBandRatesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RequestBandIBCRates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RequestBandIBCRates() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_RequestBandIBCRates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestBandIBCRates(::grpc::ServerContext* /*context*/, const ::injective::oracle::v1beta1::MsgRequestBandIBCRates* /*request*/, ::injective::oracle::v1beta1::MsgRequestBandIBCRatesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RelayCoinbaseMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RelayCoinbaseMessages() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_RelayCoinbaseMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RelayCoinbaseMessages(::grpc::ServerContext* /*context*/, const ::injective::oracle::v1beta1::MsgRelayCoinbaseMessages* /*request*/, ::injective::oracle::v1beta1::MsgRelayCoinbaseMessagesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RelayPythPrices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RelayPythPrices() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_RelayPythPrices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RelayPythPrices(::grpc::ServerContext* /*context*/, const ::injective::oracle::v1beta1::MsgRelayPythPrices* /*request*/, ::injective::oracle::v1beta1::MsgRelayPythPricesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateParams : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateParams() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_UpdateParams() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateParams(::grpc::ServerContext* /*context*/, const ::injective::oracle::v1beta1::MsgUpdateParams* /*request*/, ::injective::oracle::v1beta1::MsgUpdateParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_RelayProviderPrices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RelayProviderPrices() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_RelayProviderPrices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RelayProviderPrices(::grpc::ServerContext* /*context*/, const ::injective::oracle::v1beta1::MsgRelayProviderPrices* /*request*/, ::injective::oracle::v1beta1::MsgRelayProviderPricesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRelayProviderPrices(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RelayPriceFeedPrice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RelayPriceFeedPrice() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_RelayPriceFeedPrice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RelayPriceFeedPrice(::grpc::ServerContext* /*context*/, const ::injective::oracle::v1beta1::MsgRelayPriceFeedPrice* /*request*/, ::injective::oracle::v1beta1::MsgRelayPriceFeedPriceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRelayPriceFeedPrice(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RelayBandRates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RelayBandRates() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_RelayBandRates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RelayBandRates(::grpc::ServerContext* /*context*/, const ::injective::oracle::v1beta1::MsgRelayBandRates* /*request*/, ::injective::oracle::v1beta1::MsgRelayBandRatesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRelayBandRates(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RequestBandIBCRates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RequestBandIBCRates() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_RequestBandIBCRates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestBandIBCRates(::grpc::ServerContext* /*context*/, const ::injective::oracle::v1beta1::MsgRequestBandIBCRates* /*request*/, ::injective::oracle::v1beta1::MsgRequestBandIBCRatesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRequestBandIBCRates(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RelayCoinbaseMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RelayCoinbaseMessages() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_RelayCoinbaseMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RelayCoinbaseMessages(::grpc::ServerContext* /*context*/, const ::injective::oracle::v1beta1::MsgRelayCoinbaseMessages* /*request*/, ::injective::oracle::v1beta1::MsgRelayCoinbaseMessagesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRelayCoinbaseMessages(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RelayPythPrices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RelayPythPrices() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_RelayPythPrices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RelayPythPrices(::grpc::ServerContext* /*context*/, const ::injective::oracle::v1beta1::MsgRelayPythPrices* /*request*/, ::injective::oracle::v1beta1::MsgRelayPythPricesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRelayPythPrices(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateParams : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateParams() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_UpdateParams() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateParams(::grpc::ServerContext* /*context*/, const ::injective::oracle::v1beta1::MsgUpdateParams* /*request*/, ::injective::oracle::v1beta1::MsgUpdateParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateParams(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RelayProviderPrices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RelayProviderPrices() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RelayProviderPrices(context, request, response); }));
    }
    ~WithRawCallbackMethod_RelayProviderPrices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RelayProviderPrices(::grpc::ServerContext* /*context*/, const ::injective::oracle::v1beta1::MsgRelayProviderPrices* /*request*/, ::injective::oracle::v1beta1::MsgRelayProviderPricesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RelayProviderPrices(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RelayPriceFeedPrice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RelayPriceFeedPrice() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RelayPriceFeedPrice(context, request, response); }));
    }
    ~WithRawCallbackMethod_RelayPriceFeedPrice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RelayPriceFeedPrice(::grpc::ServerContext* /*context*/, const ::injective::oracle::v1beta1::MsgRelayPriceFeedPrice* /*request*/, ::injective::oracle::v1beta1::MsgRelayPriceFeedPriceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RelayPriceFeedPrice(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RelayBandRates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RelayBandRates() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RelayBandRates(context, request, response); }));
    }
    ~WithRawCallbackMethod_RelayBandRates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RelayBandRates(::grpc::ServerContext* /*context*/, const ::injective::oracle::v1beta1::MsgRelayBandRates* /*request*/, ::injective::oracle::v1beta1::MsgRelayBandRatesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RelayBandRates(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RequestBandIBCRates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RequestBandIBCRates() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RequestBandIBCRates(context, request, response); }));
    }
    ~WithRawCallbackMethod_RequestBandIBCRates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestBandIBCRates(::grpc::ServerContext* /*context*/, const ::injective::oracle::v1beta1::MsgRequestBandIBCRates* /*request*/, ::injective::oracle::v1beta1::MsgRequestBandIBCRatesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RequestBandIBCRates(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RelayCoinbaseMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RelayCoinbaseMessages() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RelayCoinbaseMessages(context, request, response); }));
    }
    ~WithRawCallbackMethod_RelayCoinbaseMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RelayCoinbaseMessages(::grpc::ServerContext* /*context*/, const ::injective::oracle::v1beta1::MsgRelayCoinbaseMessages* /*request*/, ::injective::oracle::v1beta1::MsgRelayCoinbaseMessagesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RelayCoinbaseMessages(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RelayPythPrices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RelayPythPrices() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RelayPythPrices(context, request, response); }));
    }
    ~WithRawCallbackMethod_RelayPythPrices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RelayPythPrices(::grpc::ServerContext* /*context*/, const ::injective::oracle::v1beta1::MsgRelayPythPrices* /*request*/, ::injective::oracle::v1beta1::MsgRelayPythPricesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RelayPythPrices(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdateParams : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdateParams() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateParams(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdateParams() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateParams(::grpc::ServerContext* /*context*/, const ::injective::oracle::v1beta1::MsgUpdateParams* /*request*/, ::injective::oracle::v1beta1::MsgUpdateParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateParams(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RelayProviderPrices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RelayProviderPrices() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::injective::oracle::v1beta1::MsgRelayProviderPrices, ::injective::oracle::v1beta1::MsgRelayProviderPricesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::injective::oracle::v1beta1::MsgRelayProviderPrices, ::injective::oracle::v1beta1::MsgRelayProviderPricesResponse>* streamer) {
                       return this->StreamedRelayProviderPrices(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RelayProviderPrices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RelayProviderPrices(::grpc::ServerContext* /*context*/, const ::injective::oracle::v1beta1::MsgRelayProviderPrices* /*request*/, ::injective::oracle::v1beta1::MsgRelayProviderPricesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRelayProviderPrices(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::injective::oracle::v1beta1::MsgRelayProviderPrices,::injective::oracle::v1beta1::MsgRelayProviderPricesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RelayPriceFeedPrice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RelayPriceFeedPrice() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::injective::oracle::v1beta1::MsgRelayPriceFeedPrice, ::injective::oracle::v1beta1::MsgRelayPriceFeedPriceResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::injective::oracle::v1beta1::MsgRelayPriceFeedPrice, ::injective::oracle::v1beta1::MsgRelayPriceFeedPriceResponse>* streamer) {
                       return this->StreamedRelayPriceFeedPrice(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RelayPriceFeedPrice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RelayPriceFeedPrice(::grpc::ServerContext* /*context*/, const ::injective::oracle::v1beta1::MsgRelayPriceFeedPrice* /*request*/, ::injective::oracle::v1beta1::MsgRelayPriceFeedPriceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRelayPriceFeedPrice(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::injective::oracle::v1beta1::MsgRelayPriceFeedPrice,::injective::oracle::v1beta1::MsgRelayPriceFeedPriceResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RelayBandRates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RelayBandRates() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::injective::oracle::v1beta1::MsgRelayBandRates, ::injective::oracle::v1beta1::MsgRelayBandRatesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::injective::oracle::v1beta1::MsgRelayBandRates, ::injective::oracle::v1beta1::MsgRelayBandRatesResponse>* streamer) {
                       return this->StreamedRelayBandRates(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RelayBandRates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RelayBandRates(::grpc::ServerContext* /*context*/, const ::injective::oracle::v1beta1::MsgRelayBandRates* /*request*/, ::injective::oracle::v1beta1::MsgRelayBandRatesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRelayBandRates(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::injective::oracle::v1beta1::MsgRelayBandRates,::injective::oracle::v1beta1::MsgRelayBandRatesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RequestBandIBCRates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RequestBandIBCRates() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::injective::oracle::v1beta1::MsgRequestBandIBCRates, ::injective::oracle::v1beta1::MsgRequestBandIBCRatesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::injective::oracle::v1beta1::MsgRequestBandIBCRates, ::injective::oracle::v1beta1::MsgRequestBandIBCRatesResponse>* streamer) {
                       return this->StreamedRequestBandIBCRates(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RequestBandIBCRates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RequestBandIBCRates(::grpc::ServerContext* /*context*/, const ::injective::oracle::v1beta1::MsgRequestBandIBCRates* /*request*/, ::injective::oracle::v1beta1::MsgRequestBandIBCRatesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRequestBandIBCRates(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::injective::oracle::v1beta1::MsgRequestBandIBCRates,::injective::oracle::v1beta1::MsgRequestBandIBCRatesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RelayCoinbaseMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RelayCoinbaseMessages() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::injective::oracle::v1beta1::MsgRelayCoinbaseMessages, ::injective::oracle::v1beta1::MsgRelayCoinbaseMessagesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::injective::oracle::v1beta1::MsgRelayCoinbaseMessages, ::injective::oracle::v1beta1::MsgRelayCoinbaseMessagesResponse>* streamer) {
                       return this->StreamedRelayCoinbaseMessages(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RelayCoinbaseMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RelayCoinbaseMessages(::grpc::ServerContext* /*context*/, const ::injective::oracle::v1beta1::MsgRelayCoinbaseMessages* /*request*/, ::injective::oracle::v1beta1::MsgRelayCoinbaseMessagesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRelayCoinbaseMessages(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::injective::oracle::v1beta1::MsgRelayCoinbaseMessages,::injective::oracle::v1beta1::MsgRelayCoinbaseMessagesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RelayPythPrices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RelayPythPrices() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::injective::oracle::v1beta1::MsgRelayPythPrices, ::injective::oracle::v1beta1::MsgRelayPythPricesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::injective::oracle::v1beta1::MsgRelayPythPrices, ::injective::oracle::v1beta1::MsgRelayPythPricesResponse>* streamer) {
                       return this->StreamedRelayPythPrices(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RelayPythPrices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RelayPythPrices(::grpc::ServerContext* /*context*/, const ::injective::oracle::v1beta1::MsgRelayPythPrices* /*request*/, ::injective::oracle::v1beta1::MsgRelayPythPricesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRelayPythPrices(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::injective::oracle::v1beta1::MsgRelayPythPrices,::injective::oracle::v1beta1::MsgRelayPythPricesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateParams : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateParams() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::injective::oracle::v1beta1::MsgUpdateParams, ::injective::oracle::v1beta1::MsgUpdateParamsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::injective::oracle::v1beta1::MsgUpdateParams, ::injective::oracle::v1beta1::MsgUpdateParamsResponse>* streamer) {
                       return this->StreamedUpdateParams(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateParams() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateParams(::grpc::ServerContext* /*context*/, const ::injective::oracle::v1beta1::MsgUpdateParams* /*request*/, ::injective::oracle::v1beta1::MsgUpdateParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateParams(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::injective::oracle::v1beta1::MsgUpdateParams,::injective::oracle::v1beta1::MsgUpdateParamsResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_RelayProviderPrices<WithStreamedUnaryMethod_RelayPriceFeedPrice<WithStreamedUnaryMethod_RelayBandRates<WithStreamedUnaryMethod_RequestBandIBCRates<WithStreamedUnaryMethod_RelayCoinbaseMessages<WithStreamedUnaryMethod_RelayPythPrices<WithStreamedUnaryMethod_UpdateParams<Service > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_RelayProviderPrices<WithStreamedUnaryMethod_RelayPriceFeedPrice<WithStreamedUnaryMethod_RelayBandRates<WithStreamedUnaryMethod_RequestBandIBCRates<WithStreamedUnaryMethod_RelayCoinbaseMessages<WithStreamedUnaryMethod_RelayPythPrices<WithStreamedUnaryMethod_UpdateParams<Service > > > > > > > StreamedService;
};

}  // namespace v1beta1
}  // namespace oracle
}  // namespace injective


#endif  // GRPC_injective_2foracle_2fv1beta1_2ftx_2eproto__INCLUDED

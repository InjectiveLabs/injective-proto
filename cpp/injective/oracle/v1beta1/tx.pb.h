// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: injective/oracle/v1beta1/tx.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_injective_2foracle_2fv1beta1_2ftx_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_injective_2foracle_2fv1beta1_2ftx_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "gogoproto/gogo.pb.h"
#include "injective/oracle/v1beta1/oracle.pb.h"
#include "cosmos/msg/v1/msg.pb.h"
#include "cosmos_proto/cosmos.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_injective_2foracle_2fv1beta1_2ftx_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_injective_2foracle_2fv1beta1_2ftx_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_injective_2foracle_2fv1beta1_2ftx_2eproto;
namespace injective {
namespace oracle {
namespace v1beta1 {
class MsgRelayBandRates;
struct MsgRelayBandRatesDefaultTypeInternal;
extern MsgRelayBandRatesDefaultTypeInternal _MsgRelayBandRates_default_instance_;
class MsgRelayBandRatesResponse;
struct MsgRelayBandRatesResponseDefaultTypeInternal;
extern MsgRelayBandRatesResponseDefaultTypeInternal _MsgRelayBandRatesResponse_default_instance_;
class MsgRelayCoinbaseMessages;
struct MsgRelayCoinbaseMessagesDefaultTypeInternal;
extern MsgRelayCoinbaseMessagesDefaultTypeInternal _MsgRelayCoinbaseMessages_default_instance_;
class MsgRelayCoinbaseMessagesResponse;
struct MsgRelayCoinbaseMessagesResponseDefaultTypeInternal;
extern MsgRelayCoinbaseMessagesResponseDefaultTypeInternal _MsgRelayCoinbaseMessagesResponse_default_instance_;
class MsgRelayPriceFeedPrice;
struct MsgRelayPriceFeedPriceDefaultTypeInternal;
extern MsgRelayPriceFeedPriceDefaultTypeInternal _MsgRelayPriceFeedPrice_default_instance_;
class MsgRelayPriceFeedPriceResponse;
struct MsgRelayPriceFeedPriceResponseDefaultTypeInternal;
extern MsgRelayPriceFeedPriceResponseDefaultTypeInternal _MsgRelayPriceFeedPriceResponse_default_instance_;
class MsgRelayProviderPrices;
struct MsgRelayProviderPricesDefaultTypeInternal;
extern MsgRelayProviderPricesDefaultTypeInternal _MsgRelayProviderPrices_default_instance_;
class MsgRelayProviderPricesResponse;
struct MsgRelayProviderPricesResponseDefaultTypeInternal;
extern MsgRelayProviderPricesResponseDefaultTypeInternal _MsgRelayProviderPricesResponse_default_instance_;
class MsgRelayPythPrices;
struct MsgRelayPythPricesDefaultTypeInternal;
extern MsgRelayPythPricesDefaultTypeInternal _MsgRelayPythPrices_default_instance_;
class MsgRelayPythPricesResponse;
struct MsgRelayPythPricesResponseDefaultTypeInternal;
extern MsgRelayPythPricesResponseDefaultTypeInternal _MsgRelayPythPricesResponse_default_instance_;
class MsgRequestBandIBCRates;
struct MsgRequestBandIBCRatesDefaultTypeInternal;
extern MsgRequestBandIBCRatesDefaultTypeInternal _MsgRequestBandIBCRates_default_instance_;
class MsgRequestBandIBCRatesResponse;
struct MsgRequestBandIBCRatesResponseDefaultTypeInternal;
extern MsgRequestBandIBCRatesResponseDefaultTypeInternal _MsgRequestBandIBCRatesResponse_default_instance_;
class MsgUpdateParams;
struct MsgUpdateParamsDefaultTypeInternal;
extern MsgUpdateParamsDefaultTypeInternal _MsgUpdateParams_default_instance_;
class MsgUpdateParamsResponse;
struct MsgUpdateParamsResponseDefaultTypeInternal;
extern MsgUpdateParamsResponseDefaultTypeInternal _MsgUpdateParamsResponse_default_instance_;
}  // namespace v1beta1
}  // namespace oracle
}  // namespace injective
PROTOBUF_NAMESPACE_OPEN
template <>
::injective::oracle::v1beta1::MsgRelayBandRates* Arena::CreateMaybeMessage<::injective::oracle::v1beta1::MsgRelayBandRates>(Arena*);
template <>
::injective::oracle::v1beta1::MsgRelayBandRatesResponse* Arena::CreateMaybeMessage<::injective::oracle::v1beta1::MsgRelayBandRatesResponse>(Arena*);
template <>
::injective::oracle::v1beta1::MsgRelayCoinbaseMessages* Arena::CreateMaybeMessage<::injective::oracle::v1beta1::MsgRelayCoinbaseMessages>(Arena*);
template <>
::injective::oracle::v1beta1::MsgRelayCoinbaseMessagesResponse* Arena::CreateMaybeMessage<::injective::oracle::v1beta1::MsgRelayCoinbaseMessagesResponse>(Arena*);
template <>
::injective::oracle::v1beta1::MsgRelayPriceFeedPrice* Arena::CreateMaybeMessage<::injective::oracle::v1beta1::MsgRelayPriceFeedPrice>(Arena*);
template <>
::injective::oracle::v1beta1::MsgRelayPriceFeedPriceResponse* Arena::CreateMaybeMessage<::injective::oracle::v1beta1::MsgRelayPriceFeedPriceResponse>(Arena*);
template <>
::injective::oracle::v1beta1::MsgRelayProviderPrices* Arena::CreateMaybeMessage<::injective::oracle::v1beta1::MsgRelayProviderPrices>(Arena*);
template <>
::injective::oracle::v1beta1::MsgRelayProviderPricesResponse* Arena::CreateMaybeMessage<::injective::oracle::v1beta1::MsgRelayProviderPricesResponse>(Arena*);
template <>
::injective::oracle::v1beta1::MsgRelayPythPrices* Arena::CreateMaybeMessage<::injective::oracle::v1beta1::MsgRelayPythPrices>(Arena*);
template <>
::injective::oracle::v1beta1::MsgRelayPythPricesResponse* Arena::CreateMaybeMessage<::injective::oracle::v1beta1::MsgRelayPythPricesResponse>(Arena*);
template <>
::injective::oracle::v1beta1::MsgRequestBandIBCRates* Arena::CreateMaybeMessage<::injective::oracle::v1beta1::MsgRequestBandIBCRates>(Arena*);
template <>
::injective::oracle::v1beta1::MsgRequestBandIBCRatesResponse* Arena::CreateMaybeMessage<::injective::oracle::v1beta1::MsgRequestBandIBCRatesResponse>(Arena*);
template <>
::injective::oracle::v1beta1::MsgUpdateParams* Arena::CreateMaybeMessage<::injective::oracle::v1beta1::MsgUpdateParams>(Arena*);
template <>
::injective::oracle::v1beta1::MsgUpdateParamsResponse* Arena::CreateMaybeMessage<::injective::oracle::v1beta1::MsgUpdateParamsResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace injective {
namespace oracle {
namespace v1beta1 {

// ===================================================================


// -------------------------------------------------------------------

class MsgRelayProviderPrices final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.oracle.v1beta1.MsgRelayProviderPrices) */ {
 public:
  inline MsgRelayProviderPrices() : MsgRelayProviderPrices(nullptr) {}
  ~MsgRelayProviderPrices() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MsgRelayProviderPrices(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgRelayProviderPrices(const MsgRelayProviderPrices& from);
  MsgRelayProviderPrices(MsgRelayProviderPrices&& from) noexcept
    : MsgRelayProviderPrices() {
    *this = ::std::move(from);
  }

  inline MsgRelayProviderPrices& operator=(const MsgRelayProviderPrices& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgRelayProviderPrices& operator=(MsgRelayProviderPrices&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgRelayProviderPrices& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgRelayProviderPrices* internal_default_instance() {
    return reinterpret_cast<const MsgRelayProviderPrices*>(
               &_MsgRelayProviderPrices_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MsgRelayProviderPrices& a, MsgRelayProviderPrices& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgRelayProviderPrices* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgRelayProviderPrices* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgRelayProviderPrices* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgRelayProviderPrices>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MsgRelayProviderPrices& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MsgRelayProviderPrices& from) {
    MsgRelayProviderPrices::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgRelayProviderPrices* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.oracle.v1beta1.MsgRelayProviderPrices";
  }
  protected:
  explicit MsgRelayProviderPrices(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSymbolsFieldNumber = 3,
    kPricesFieldNumber = 4,
    kSenderFieldNumber = 1,
    kProviderFieldNumber = 2,
  };
  // repeated string symbols = 3 [json_name = "symbols"];
  int symbols_size() const;
  private:
  int _internal_symbols_size() const;

  public:
  void clear_symbols() ;
  const std::string& symbols(int index) const;
  std::string* mutable_symbols(int index);
  void set_symbols(int index, const std::string& value);
  void set_symbols(int index, std::string&& value);
  void set_symbols(int index, const char* value);
  void set_symbols(int index, const char* value, std::size_t size);
  void set_symbols(int index, absl::string_view value);
  std::string* add_symbols();
  void add_symbols(const std::string& value);
  void add_symbols(std::string&& value);
  void add_symbols(const char* value);
  void add_symbols(const char* value, std::size_t size);
  void add_symbols(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& symbols() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_symbols();

  private:
  const std::string& _internal_symbols(int index) const;
  std::string* _internal_add_symbols();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_symbols() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_symbols();

  public:
  // repeated string prices = 4 [json_name = "prices", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  int prices_size() const;
  private:
  int _internal_prices_size() const;

  public:
  void clear_prices() ;
  const std::string& prices(int index) const;
  std::string* mutable_prices(int index);
  void set_prices(int index, const std::string& value);
  void set_prices(int index, std::string&& value);
  void set_prices(int index, const char* value);
  void set_prices(int index, const char* value, std::size_t size);
  void set_prices(int index, absl::string_view value);
  std::string* add_prices();
  void add_prices(const std::string& value);
  void add_prices(std::string&& value);
  void add_prices(const char* value);
  void add_prices(const char* value, std::size_t size);
  void add_prices(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& prices() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_prices();

  private:
  const std::string& _internal_prices(int index) const;
  std::string* _internal_add_prices();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_prices() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_prices();

  public:
  // string sender = 1 [json_name = "sender"];
  void clear_sender() ;
  const std::string& sender() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_sender(Arg_&& arg, Args_... args);
  std::string* mutable_sender();
  PROTOBUF_NODISCARD std::string* release_sender();
  void set_allocated_sender(std::string* ptr);

  private:
  const std::string& _internal_sender() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sender(
      const std::string& value);
  std::string* _internal_mutable_sender();

  public:
  // string provider = 2 [json_name = "provider"];
  void clear_provider() ;
  const std::string& provider() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_provider(Arg_&& arg, Args_... args);
  std::string* mutable_provider();
  PROTOBUF_NODISCARD std::string* release_provider();
  void set_allocated_provider(std::string* ptr);

  private:
  const std::string& _internal_provider() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_provider(
      const std::string& value);
  std::string* _internal_mutable_provider();

  public:
  // @@protoc_insertion_point(class_scope:injective.oracle.v1beta1.MsgRelayProviderPrices)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> symbols_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> prices_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sender_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr provider_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2foracle_2fv1beta1_2ftx_2eproto;
};// -------------------------------------------------------------------

class MsgRelayProviderPricesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:injective.oracle.v1beta1.MsgRelayProviderPricesResponse) */ {
 public:
  inline MsgRelayProviderPricesResponse() : MsgRelayProviderPricesResponse(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MsgRelayProviderPricesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgRelayProviderPricesResponse(const MsgRelayProviderPricesResponse& from);
  MsgRelayProviderPricesResponse(MsgRelayProviderPricesResponse&& from) noexcept
    : MsgRelayProviderPricesResponse() {
    *this = ::std::move(from);
  }

  inline MsgRelayProviderPricesResponse& operator=(const MsgRelayProviderPricesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgRelayProviderPricesResponse& operator=(MsgRelayProviderPricesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgRelayProviderPricesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgRelayProviderPricesResponse* internal_default_instance() {
    return reinterpret_cast<const MsgRelayProviderPricesResponse*>(
               &_MsgRelayProviderPricesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MsgRelayProviderPricesResponse& a, MsgRelayProviderPricesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgRelayProviderPricesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgRelayProviderPricesResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgRelayProviderPricesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgRelayProviderPricesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const MsgRelayProviderPricesResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const MsgRelayProviderPricesResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.oracle.v1beta1.MsgRelayProviderPricesResponse";
  }
  protected:
  explicit MsgRelayProviderPricesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:injective.oracle.v1beta1.MsgRelayProviderPricesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_injective_2foracle_2fv1beta1_2ftx_2eproto;
};// -------------------------------------------------------------------

class MsgRelayPriceFeedPrice final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.oracle.v1beta1.MsgRelayPriceFeedPrice) */ {
 public:
  inline MsgRelayPriceFeedPrice() : MsgRelayPriceFeedPrice(nullptr) {}
  ~MsgRelayPriceFeedPrice() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MsgRelayPriceFeedPrice(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgRelayPriceFeedPrice(const MsgRelayPriceFeedPrice& from);
  MsgRelayPriceFeedPrice(MsgRelayPriceFeedPrice&& from) noexcept
    : MsgRelayPriceFeedPrice() {
    *this = ::std::move(from);
  }

  inline MsgRelayPriceFeedPrice& operator=(const MsgRelayPriceFeedPrice& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgRelayPriceFeedPrice& operator=(MsgRelayPriceFeedPrice&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgRelayPriceFeedPrice& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgRelayPriceFeedPrice* internal_default_instance() {
    return reinterpret_cast<const MsgRelayPriceFeedPrice*>(
               &_MsgRelayPriceFeedPrice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MsgRelayPriceFeedPrice& a, MsgRelayPriceFeedPrice& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgRelayPriceFeedPrice* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgRelayPriceFeedPrice* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgRelayPriceFeedPrice* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgRelayPriceFeedPrice>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MsgRelayPriceFeedPrice& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MsgRelayPriceFeedPrice& from) {
    MsgRelayPriceFeedPrice::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgRelayPriceFeedPrice* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.oracle.v1beta1.MsgRelayPriceFeedPrice";
  }
  protected:
  explicit MsgRelayPriceFeedPrice(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBaseFieldNumber = 2,
    kQuoteFieldNumber = 3,
    kPriceFieldNumber = 4,
    kSenderFieldNumber = 1,
  };
  // repeated string base = 2 [json_name = "base"];
  int base_size() const;
  private:
  int _internal_base_size() const;

  public:
  void clear_base() ;
  const std::string& base(int index) const;
  std::string* mutable_base(int index);
  void set_base(int index, const std::string& value);
  void set_base(int index, std::string&& value);
  void set_base(int index, const char* value);
  void set_base(int index, const char* value, std::size_t size);
  void set_base(int index, absl::string_view value);
  std::string* add_base();
  void add_base(const std::string& value);
  void add_base(std::string&& value);
  void add_base(const char* value);
  void add_base(const char* value, std::size_t size);
  void add_base(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& base() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_base();

  private:
  const std::string& _internal_base(int index) const;
  std::string* _internal_add_base();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_base() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_base();

  public:
  // repeated string quote = 3 [json_name = "quote"];
  int quote_size() const;
  private:
  int _internal_quote_size() const;

  public:
  void clear_quote() ;
  const std::string& quote(int index) const;
  std::string* mutable_quote(int index);
  void set_quote(int index, const std::string& value);
  void set_quote(int index, std::string&& value);
  void set_quote(int index, const char* value);
  void set_quote(int index, const char* value, std::size_t size);
  void set_quote(int index, absl::string_view value);
  std::string* add_quote();
  void add_quote(const std::string& value);
  void add_quote(std::string&& value);
  void add_quote(const char* value);
  void add_quote(const char* value, std::size_t size);
  void add_quote(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& quote() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_quote();

  private:
  const std::string& _internal_quote(int index) const;
  std::string* _internal_add_quote();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_quote() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_quote();

  public:
  // repeated string price = 4 [json_name = "price", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  int price_size() const;
  private:
  int _internal_price_size() const;

  public:
  void clear_price() ;
  const std::string& price(int index) const;
  std::string* mutable_price(int index);
  void set_price(int index, const std::string& value);
  void set_price(int index, std::string&& value);
  void set_price(int index, const char* value);
  void set_price(int index, const char* value, std::size_t size);
  void set_price(int index, absl::string_view value);
  std::string* add_price();
  void add_price(const std::string& value);
  void add_price(std::string&& value);
  void add_price(const char* value);
  void add_price(const char* value, std::size_t size);
  void add_price(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& price() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_price();

  private:
  const std::string& _internal_price(int index) const;
  std::string* _internal_add_price();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_price() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_price();

  public:
  // string sender = 1 [json_name = "sender"];
  void clear_sender() ;
  const std::string& sender() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_sender(Arg_&& arg, Args_... args);
  std::string* mutable_sender();
  PROTOBUF_NODISCARD std::string* release_sender();
  void set_allocated_sender(std::string* ptr);

  private:
  const std::string& _internal_sender() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sender(
      const std::string& value);
  std::string* _internal_mutable_sender();

  public:
  // @@protoc_insertion_point(class_scope:injective.oracle.v1beta1.MsgRelayPriceFeedPrice)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> base_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> quote_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> price_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sender_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2foracle_2fv1beta1_2ftx_2eproto;
};// -------------------------------------------------------------------

class MsgRelayPriceFeedPriceResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:injective.oracle.v1beta1.MsgRelayPriceFeedPriceResponse) */ {
 public:
  inline MsgRelayPriceFeedPriceResponse() : MsgRelayPriceFeedPriceResponse(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MsgRelayPriceFeedPriceResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgRelayPriceFeedPriceResponse(const MsgRelayPriceFeedPriceResponse& from);
  MsgRelayPriceFeedPriceResponse(MsgRelayPriceFeedPriceResponse&& from) noexcept
    : MsgRelayPriceFeedPriceResponse() {
    *this = ::std::move(from);
  }

  inline MsgRelayPriceFeedPriceResponse& operator=(const MsgRelayPriceFeedPriceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgRelayPriceFeedPriceResponse& operator=(MsgRelayPriceFeedPriceResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgRelayPriceFeedPriceResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgRelayPriceFeedPriceResponse* internal_default_instance() {
    return reinterpret_cast<const MsgRelayPriceFeedPriceResponse*>(
               &_MsgRelayPriceFeedPriceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(MsgRelayPriceFeedPriceResponse& a, MsgRelayPriceFeedPriceResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgRelayPriceFeedPriceResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgRelayPriceFeedPriceResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgRelayPriceFeedPriceResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgRelayPriceFeedPriceResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const MsgRelayPriceFeedPriceResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const MsgRelayPriceFeedPriceResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.oracle.v1beta1.MsgRelayPriceFeedPriceResponse";
  }
  protected:
  explicit MsgRelayPriceFeedPriceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:injective.oracle.v1beta1.MsgRelayPriceFeedPriceResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_injective_2foracle_2fv1beta1_2ftx_2eproto;
};// -------------------------------------------------------------------

class MsgRelayBandRates final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.oracle.v1beta1.MsgRelayBandRates) */ {
 public:
  inline MsgRelayBandRates() : MsgRelayBandRates(nullptr) {}
  ~MsgRelayBandRates() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MsgRelayBandRates(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgRelayBandRates(const MsgRelayBandRates& from);
  MsgRelayBandRates(MsgRelayBandRates&& from) noexcept
    : MsgRelayBandRates() {
    *this = ::std::move(from);
  }

  inline MsgRelayBandRates& operator=(const MsgRelayBandRates& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgRelayBandRates& operator=(MsgRelayBandRates&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgRelayBandRates& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgRelayBandRates* internal_default_instance() {
    return reinterpret_cast<const MsgRelayBandRates*>(
               &_MsgRelayBandRates_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(MsgRelayBandRates& a, MsgRelayBandRates& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgRelayBandRates* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgRelayBandRates* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgRelayBandRates* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgRelayBandRates>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MsgRelayBandRates& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MsgRelayBandRates& from) {
    MsgRelayBandRates::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgRelayBandRates* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.oracle.v1beta1.MsgRelayBandRates";
  }
  protected:
  explicit MsgRelayBandRates(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSymbolsFieldNumber = 2,
    kRatesFieldNumber = 3,
    kResolveTimesFieldNumber = 4,
    kRequestIDsFieldNumber = 5,
    kRelayerFieldNumber = 1,
  };
  // repeated string symbols = 2 [json_name = "symbols"];
  int symbols_size() const;
  private:
  int _internal_symbols_size() const;

  public:
  void clear_symbols() ;
  const std::string& symbols(int index) const;
  std::string* mutable_symbols(int index);
  void set_symbols(int index, const std::string& value);
  void set_symbols(int index, std::string&& value);
  void set_symbols(int index, const char* value);
  void set_symbols(int index, const char* value, std::size_t size);
  void set_symbols(int index, absl::string_view value);
  std::string* add_symbols();
  void add_symbols(const std::string& value);
  void add_symbols(std::string&& value);
  void add_symbols(const char* value);
  void add_symbols(const char* value, std::size_t size);
  void add_symbols(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& symbols() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_symbols();

  private:
  const std::string& _internal_symbols(int index) const;
  std::string* _internal_add_symbols();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_symbols() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_symbols();

  public:
  // repeated uint64 rates = 3 [json_name = "rates"];
  int rates_size() const;
  private:
  int _internal_rates_size() const;

  public:
  void clear_rates() ;
  ::uint64_t rates(int index) const;
  void set_rates(int index, ::uint64_t value);
  void add_rates(::uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>& rates() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>* mutable_rates();

  private:
  ::uint64_t _internal_rates(int index) const;
  void _internal_add_rates(::uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>& _internal_rates() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>* _internal_mutable_rates();

  public:
  // repeated uint64 resolve_times = 4 [json_name = "resolveTimes"];
  int resolve_times_size() const;
  private:
  int _internal_resolve_times_size() const;

  public:
  void clear_resolve_times() ;
  ::uint64_t resolve_times(int index) const;
  void set_resolve_times(int index, ::uint64_t value);
  void add_resolve_times(::uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>& resolve_times() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>* mutable_resolve_times();

  private:
  ::uint64_t _internal_resolve_times(int index) const;
  void _internal_add_resolve_times(::uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>& _internal_resolve_times() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>* _internal_mutable_resolve_times();

  public:
  // repeated uint64 requestIDs = 5 [json_name = "requestIDs"];
  int requestids_size() const;
  private:
  int _internal_requestids_size() const;

  public:
  void clear_requestids() ;
  ::uint64_t requestids(int index) const;
  void set_requestids(int index, ::uint64_t value);
  void add_requestids(::uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>& requestids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>* mutable_requestids();

  private:
  ::uint64_t _internal_requestids(int index) const;
  void _internal_add_requestids(::uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>& _internal_requestids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>* _internal_mutable_requestids();

  public:
  // string relayer = 1 [json_name = "relayer"];
  void clear_relayer() ;
  const std::string& relayer() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_relayer(Arg_&& arg, Args_... args);
  std::string* mutable_relayer();
  PROTOBUF_NODISCARD std::string* release_relayer();
  void set_allocated_relayer(std::string* ptr);

  private:
  const std::string& _internal_relayer() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_relayer(
      const std::string& value);
  std::string* _internal_mutable_relayer();

  public:
  // @@protoc_insertion_point(class_scope:injective.oracle.v1beta1.MsgRelayBandRates)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> symbols_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t> rates_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _rates_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t> resolve_times_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _resolve_times_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t> requestids_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _requestids_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr relayer_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2foracle_2fv1beta1_2ftx_2eproto;
};// -------------------------------------------------------------------

class MsgRelayBandRatesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:injective.oracle.v1beta1.MsgRelayBandRatesResponse) */ {
 public:
  inline MsgRelayBandRatesResponse() : MsgRelayBandRatesResponse(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MsgRelayBandRatesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgRelayBandRatesResponse(const MsgRelayBandRatesResponse& from);
  MsgRelayBandRatesResponse(MsgRelayBandRatesResponse&& from) noexcept
    : MsgRelayBandRatesResponse() {
    *this = ::std::move(from);
  }

  inline MsgRelayBandRatesResponse& operator=(const MsgRelayBandRatesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgRelayBandRatesResponse& operator=(MsgRelayBandRatesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgRelayBandRatesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgRelayBandRatesResponse* internal_default_instance() {
    return reinterpret_cast<const MsgRelayBandRatesResponse*>(
               &_MsgRelayBandRatesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(MsgRelayBandRatesResponse& a, MsgRelayBandRatesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgRelayBandRatesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgRelayBandRatesResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgRelayBandRatesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgRelayBandRatesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const MsgRelayBandRatesResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const MsgRelayBandRatesResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.oracle.v1beta1.MsgRelayBandRatesResponse";
  }
  protected:
  explicit MsgRelayBandRatesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:injective.oracle.v1beta1.MsgRelayBandRatesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_injective_2foracle_2fv1beta1_2ftx_2eproto;
};// -------------------------------------------------------------------

class MsgRelayCoinbaseMessages final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.oracle.v1beta1.MsgRelayCoinbaseMessages) */ {
 public:
  inline MsgRelayCoinbaseMessages() : MsgRelayCoinbaseMessages(nullptr) {}
  ~MsgRelayCoinbaseMessages() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MsgRelayCoinbaseMessages(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgRelayCoinbaseMessages(const MsgRelayCoinbaseMessages& from);
  MsgRelayCoinbaseMessages(MsgRelayCoinbaseMessages&& from) noexcept
    : MsgRelayCoinbaseMessages() {
    *this = ::std::move(from);
  }

  inline MsgRelayCoinbaseMessages& operator=(const MsgRelayCoinbaseMessages& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgRelayCoinbaseMessages& operator=(MsgRelayCoinbaseMessages&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgRelayCoinbaseMessages& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgRelayCoinbaseMessages* internal_default_instance() {
    return reinterpret_cast<const MsgRelayCoinbaseMessages*>(
               &_MsgRelayCoinbaseMessages_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(MsgRelayCoinbaseMessages& a, MsgRelayCoinbaseMessages& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgRelayCoinbaseMessages* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgRelayCoinbaseMessages* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgRelayCoinbaseMessages* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgRelayCoinbaseMessages>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MsgRelayCoinbaseMessages& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MsgRelayCoinbaseMessages& from) {
    MsgRelayCoinbaseMessages::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgRelayCoinbaseMessages* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.oracle.v1beta1.MsgRelayCoinbaseMessages";
  }
  protected:
  explicit MsgRelayCoinbaseMessages(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessagesFieldNumber = 2,
    kSignaturesFieldNumber = 3,
    kSenderFieldNumber = 1,
  };
  // repeated bytes messages = 2 [json_name = "messages"];
  int messages_size() const;
  private:
  int _internal_messages_size() const;

  public:
  void clear_messages() ;
  const std::string& messages(int index) const;
  std::string* mutable_messages(int index);
  void set_messages(int index, const std::string& value);
  void set_messages(int index, std::string&& value);
  void set_messages(int index, const char* value);
  void set_messages(int index, const void* value, std::size_t size);
  void set_messages(int index, absl::string_view value);
  std::string* add_messages();
  void add_messages(const std::string& value);
  void add_messages(std::string&& value);
  void add_messages(const char* value);
  void add_messages(const void* value, std::size_t size);
  void add_messages(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& messages() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_messages();

  private:
  const std::string& _internal_messages(int index) const;
  std::string* _internal_add_messages();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_messages() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_messages();

  public:
  // repeated bytes signatures = 3 [json_name = "signatures"];
  int signatures_size() const;
  private:
  int _internal_signatures_size() const;

  public:
  void clear_signatures() ;
  const std::string& signatures(int index) const;
  std::string* mutable_signatures(int index);
  void set_signatures(int index, const std::string& value);
  void set_signatures(int index, std::string&& value);
  void set_signatures(int index, const char* value);
  void set_signatures(int index, const void* value, std::size_t size);
  void set_signatures(int index, absl::string_view value);
  std::string* add_signatures();
  void add_signatures(const std::string& value);
  void add_signatures(std::string&& value);
  void add_signatures(const char* value);
  void add_signatures(const void* value, std::size_t size);
  void add_signatures(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& signatures() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_signatures();

  private:
  const std::string& _internal_signatures(int index) const;
  std::string* _internal_add_signatures();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_signatures() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_signatures();

  public:
  // string sender = 1 [json_name = "sender"];
  void clear_sender() ;
  const std::string& sender() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_sender(Arg_&& arg, Args_... args);
  std::string* mutable_sender();
  PROTOBUF_NODISCARD std::string* release_sender();
  void set_allocated_sender(std::string* ptr);

  private:
  const std::string& _internal_sender() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sender(
      const std::string& value);
  std::string* _internal_mutable_sender();

  public:
  // @@protoc_insertion_point(class_scope:injective.oracle.v1beta1.MsgRelayCoinbaseMessages)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> messages_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> signatures_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sender_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2foracle_2fv1beta1_2ftx_2eproto;
};// -------------------------------------------------------------------

class MsgRelayCoinbaseMessagesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:injective.oracle.v1beta1.MsgRelayCoinbaseMessagesResponse) */ {
 public:
  inline MsgRelayCoinbaseMessagesResponse() : MsgRelayCoinbaseMessagesResponse(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MsgRelayCoinbaseMessagesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgRelayCoinbaseMessagesResponse(const MsgRelayCoinbaseMessagesResponse& from);
  MsgRelayCoinbaseMessagesResponse(MsgRelayCoinbaseMessagesResponse&& from) noexcept
    : MsgRelayCoinbaseMessagesResponse() {
    *this = ::std::move(from);
  }

  inline MsgRelayCoinbaseMessagesResponse& operator=(const MsgRelayCoinbaseMessagesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgRelayCoinbaseMessagesResponse& operator=(MsgRelayCoinbaseMessagesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgRelayCoinbaseMessagesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgRelayCoinbaseMessagesResponse* internal_default_instance() {
    return reinterpret_cast<const MsgRelayCoinbaseMessagesResponse*>(
               &_MsgRelayCoinbaseMessagesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(MsgRelayCoinbaseMessagesResponse& a, MsgRelayCoinbaseMessagesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgRelayCoinbaseMessagesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgRelayCoinbaseMessagesResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgRelayCoinbaseMessagesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgRelayCoinbaseMessagesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const MsgRelayCoinbaseMessagesResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const MsgRelayCoinbaseMessagesResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.oracle.v1beta1.MsgRelayCoinbaseMessagesResponse";
  }
  protected:
  explicit MsgRelayCoinbaseMessagesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:injective.oracle.v1beta1.MsgRelayCoinbaseMessagesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_injective_2foracle_2fv1beta1_2ftx_2eproto;
};// -------------------------------------------------------------------

class MsgRequestBandIBCRates final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.oracle.v1beta1.MsgRequestBandIBCRates) */ {
 public:
  inline MsgRequestBandIBCRates() : MsgRequestBandIBCRates(nullptr) {}
  ~MsgRequestBandIBCRates() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MsgRequestBandIBCRates(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgRequestBandIBCRates(const MsgRequestBandIBCRates& from);
  MsgRequestBandIBCRates(MsgRequestBandIBCRates&& from) noexcept
    : MsgRequestBandIBCRates() {
    *this = ::std::move(from);
  }

  inline MsgRequestBandIBCRates& operator=(const MsgRequestBandIBCRates& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgRequestBandIBCRates& operator=(MsgRequestBandIBCRates&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgRequestBandIBCRates& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgRequestBandIBCRates* internal_default_instance() {
    return reinterpret_cast<const MsgRequestBandIBCRates*>(
               &_MsgRequestBandIBCRates_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(MsgRequestBandIBCRates& a, MsgRequestBandIBCRates& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgRequestBandIBCRates* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgRequestBandIBCRates* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgRequestBandIBCRates* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgRequestBandIBCRates>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MsgRequestBandIBCRates& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MsgRequestBandIBCRates& from) {
    MsgRequestBandIBCRates::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgRequestBandIBCRates* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.oracle.v1beta1.MsgRequestBandIBCRates";
  }
  protected:
  explicit MsgRequestBandIBCRates(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSenderFieldNumber = 1,
    kRequestIdFieldNumber = 2,
  };
  // string sender = 1 [json_name = "sender"];
  void clear_sender() ;
  const std::string& sender() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_sender(Arg_&& arg, Args_... args);
  std::string* mutable_sender();
  PROTOBUF_NODISCARD std::string* release_sender();
  void set_allocated_sender(std::string* ptr);

  private:
  const std::string& _internal_sender() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sender(
      const std::string& value);
  std::string* _internal_mutable_sender();

  public:
  // uint64 request_id = 2 [json_name = "requestId"];
  void clear_request_id() ;
  ::uint64_t request_id() const;
  void set_request_id(::uint64_t value);

  private:
  ::uint64_t _internal_request_id() const;
  void _internal_set_request_id(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:injective.oracle.v1beta1.MsgRequestBandIBCRates)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sender_;
    ::uint64_t request_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2foracle_2fv1beta1_2ftx_2eproto;
};// -------------------------------------------------------------------

class MsgRequestBandIBCRatesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:injective.oracle.v1beta1.MsgRequestBandIBCRatesResponse) */ {
 public:
  inline MsgRequestBandIBCRatesResponse() : MsgRequestBandIBCRatesResponse(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MsgRequestBandIBCRatesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgRequestBandIBCRatesResponse(const MsgRequestBandIBCRatesResponse& from);
  MsgRequestBandIBCRatesResponse(MsgRequestBandIBCRatesResponse&& from) noexcept
    : MsgRequestBandIBCRatesResponse() {
    *this = ::std::move(from);
  }

  inline MsgRequestBandIBCRatesResponse& operator=(const MsgRequestBandIBCRatesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgRequestBandIBCRatesResponse& operator=(MsgRequestBandIBCRatesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgRequestBandIBCRatesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgRequestBandIBCRatesResponse* internal_default_instance() {
    return reinterpret_cast<const MsgRequestBandIBCRatesResponse*>(
               &_MsgRequestBandIBCRatesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(MsgRequestBandIBCRatesResponse& a, MsgRequestBandIBCRatesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgRequestBandIBCRatesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgRequestBandIBCRatesResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgRequestBandIBCRatesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgRequestBandIBCRatesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const MsgRequestBandIBCRatesResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const MsgRequestBandIBCRatesResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.oracle.v1beta1.MsgRequestBandIBCRatesResponse";
  }
  protected:
  explicit MsgRequestBandIBCRatesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:injective.oracle.v1beta1.MsgRequestBandIBCRatesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_injective_2foracle_2fv1beta1_2ftx_2eproto;
};// -------------------------------------------------------------------

class MsgRelayPythPrices final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.oracle.v1beta1.MsgRelayPythPrices) */ {
 public:
  inline MsgRelayPythPrices() : MsgRelayPythPrices(nullptr) {}
  ~MsgRelayPythPrices() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MsgRelayPythPrices(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgRelayPythPrices(const MsgRelayPythPrices& from);
  MsgRelayPythPrices(MsgRelayPythPrices&& from) noexcept
    : MsgRelayPythPrices() {
    *this = ::std::move(from);
  }

  inline MsgRelayPythPrices& operator=(const MsgRelayPythPrices& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgRelayPythPrices& operator=(MsgRelayPythPrices&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgRelayPythPrices& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgRelayPythPrices* internal_default_instance() {
    return reinterpret_cast<const MsgRelayPythPrices*>(
               &_MsgRelayPythPrices_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(MsgRelayPythPrices& a, MsgRelayPythPrices& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgRelayPythPrices* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgRelayPythPrices* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgRelayPythPrices* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgRelayPythPrices>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MsgRelayPythPrices& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MsgRelayPythPrices& from) {
    MsgRelayPythPrices::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgRelayPythPrices* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.oracle.v1beta1.MsgRelayPythPrices";
  }
  protected:
  explicit MsgRelayPythPrices(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPriceAttestationsFieldNumber = 2,
    kSenderFieldNumber = 1,
  };
  // repeated .injective.oracle.v1beta1.PriceAttestation price_attestations = 2 [json_name = "priceAttestations"];
  int price_attestations_size() const;
  private:
  int _internal_price_attestations_size() const;

  public:
  void clear_price_attestations() ;
  ::injective::oracle::v1beta1::PriceAttestation* mutable_price_attestations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::oracle::v1beta1::PriceAttestation >*
      mutable_price_attestations();
  private:
  const ::injective::oracle::v1beta1::PriceAttestation& _internal_price_attestations(int index) const;
  ::injective::oracle::v1beta1::PriceAttestation* _internal_add_price_attestations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::oracle::v1beta1::PriceAttestation>& _internal_price_attestations() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::oracle::v1beta1::PriceAttestation>* _internal_mutable_price_attestations();
  public:
  const ::injective::oracle::v1beta1::PriceAttestation& price_attestations(int index) const;
  ::injective::oracle::v1beta1::PriceAttestation* add_price_attestations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::oracle::v1beta1::PriceAttestation >&
      price_attestations() const;
  // string sender = 1 [json_name = "sender"];
  void clear_sender() ;
  const std::string& sender() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_sender(Arg_&& arg, Args_... args);
  std::string* mutable_sender();
  PROTOBUF_NODISCARD std::string* release_sender();
  void set_allocated_sender(std::string* ptr);

  private:
  const std::string& _internal_sender() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sender(
      const std::string& value);
  std::string* _internal_mutable_sender();

  public:
  // @@protoc_insertion_point(class_scope:injective.oracle.v1beta1.MsgRelayPythPrices)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::oracle::v1beta1::PriceAttestation > price_attestations_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sender_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2foracle_2fv1beta1_2ftx_2eproto;
};// -------------------------------------------------------------------

class MsgRelayPythPricesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:injective.oracle.v1beta1.MsgRelayPythPricesResponse) */ {
 public:
  inline MsgRelayPythPricesResponse() : MsgRelayPythPricesResponse(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MsgRelayPythPricesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgRelayPythPricesResponse(const MsgRelayPythPricesResponse& from);
  MsgRelayPythPricesResponse(MsgRelayPythPricesResponse&& from) noexcept
    : MsgRelayPythPricesResponse() {
    *this = ::std::move(from);
  }

  inline MsgRelayPythPricesResponse& operator=(const MsgRelayPythPricesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgRelayPythPricesResponse& operator=(MsgRelayPythPricesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgRelayPythPricesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgRelayPythPricesResponse* internal_default_instance() {
    return reinterpret_cast<const MsgRelayPythPricesResponse*>(
               &_MsgRelayPythPricesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(MsgRelayPythPricesResponse& a, MsgRelayPythPricesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgRelayPythPricesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgRelayPythPricesResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgRelayPythPricesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgRelayPythPricesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const MsgRelayPythPricesResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const MsgRelayPythPricesResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.oracle.v1beta1.MsgRelayPythPricesResponse";
  }
  protected:
  explicit MsgRelayPythPricesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:injective.oracle.v1beta1.MsgRelayPythPricesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_injective_2foracle_2fv1beta1_2ftx_2eproto;
};// -------------------------------------------------------------------

class MsgUpdateParams final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.oracle.v1beta1.MsgUpdateParams) */ {
 public:
  inline MsgUpdateParams() : MsgUpdateParams(nullptr) {}
  ~MsgUpdateParams() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MsgUpdateParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgUpdateParams(const MsgUpdateParams& from);
  MsgUpdateParams(MsgUpdateParams&& from) noexcept
    : MsgUpdateParams() {
    *this = ::std::move(from);
  }

  inline MsgUpdateParams& operator=(const MsgUpdateParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgUpdateParams& operator=(MsgUpdateParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgUpdateParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgUpdateParams* internal_default_instance() {
    return reinterpret_cast<const MsgUpdateParams*>(
               &_MsgUpdateParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(MsgUpdateParams& a, MsgUpdateParams& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgUpdateParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgUpdateParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgUpdateParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgUpdateParams>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MsgUpdateParams& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MsgUpdateParams& from) {
    MsgUpdateParams::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgUpdateParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.oracle.v1beta1.MsgUpdateParams";
  }
  protected:
  explicit MsgUpdateParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAuthorityFieldNumber = 1,
    kParamsFieldNumber = 2,
  };
  // string authority = 1 [json_name = "authority", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  void clear_authority() ;
  const std::string& authority() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_authority(Arg_&& arg, Args_... args);
  std::string* mutable_authority();
  PROTOBUF_NODISCARD std::string* release_authority();
  void set_allocated_authority(std::string* ptr);

  private:
  const std::string& _internal_authority() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_authority(
      const std::string& value);
  std::string* _internal_mutable_authority();

  public:
  // .injective.oracle.v1beta1.Params params = 2 [json_name = "params", (.gogoproto.nullable) = false];
  bool has_params() const;
  void clear_params() ;
  const ::injective::oracle::v1beta1::Params& params() const;
  PROTOBUF_NODISCARD ::injective::oracle::v1beta1::Params* release_params();
  ::injective::oracle::v1beta1::Params* mutable_params();
  void set_allocated_params(::injective::oracle::v1beta1::Params* params);
  private:
  const ::injective::oracle::v1beta1::Params& _internal_params() const;
  ::injective::oracle::v1beta1::Params* _internal_mutable_params();
  public:
  void unsafe_arena_set_allocated_params(
      ::injective::oracle::v1beta1::Params* params);
  ::injective::oracle::v1beta1::Params* unsafe_arena_release_params();
  // @@protoc_insertion_point(class_scope:injective.oracle.v1beta1.MsgUpdateParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr authority_;
    ::injective::oracle::v1beta1::Params* params_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2foracle_2fv1beta1_2ftx_2eproto;
};// -------------------------------------------------------------------

class MsgUpdateParamsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:injective.oracle.v1beta1.MsgUpdateParamsResponse) */ {
 public:
  inline MsgUpdateParamsResponse() : MsgUpdateParamsResponse(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MsgUpdateParamsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgUpdateParamsResponse(const MsgUpdateParamsResponse& from);
  MsgUpdateParamsResponse(MsgUpdateParamsResponse&& from) noexcept
    : MsgUpdateParamsResponse() {
    *this = ::std::move(from);
  }

  inline MsgUpdateParamsResponse& operator=(const MsgUpdateParamsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgUpdateParamsResponse& operator=(MsgUpdateParamsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgUpdateParamsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgUpdateParamsResponse* internal_default_instance() {
    return reinterpret_cast<const MsgUpdateParamsResponse*>(
               &_MsgUpdateParamsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(MsgUpdateParamsResponse& a, MsgUpdateParamsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgUpdateParamsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgUpdateParamsResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgUpdateParamsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgUpdateParamsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const MsgUpdateParamsResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const MsgUpdateParamsResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.oracle.v1beta1.MsgUpdateParamsResponse";
  }
  protected:
  explicit MsgUpdateParamsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:injective.oracle.v1beta1.MsgUpdateParamsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_injective_2foracle_2fv1beta1_2ftx_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// MsgRelayProviderPrices

// string sender = 1 [json_name = "sender"];
inline void MsgRelayProviderPrices::clear_sender() {
  _impl_.sender_.ClearToEmpty();
}
inline const std::string& MsgRelayProviderPrices::sender() const {
  // @@protoc_insertion_point(field_get:injective.oracle.v1beta1.MsgRelayProviderPrices.sender)
  return _internal_sender();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgRelayProviderPrices::set_sender(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.sender_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.oracle.v1beta1.MsgRelayProviderPrices.sender)
}
inline std::string* MsgRelayProviderPrices::mutable_sender() {
  std::string* _s = _internal_mutable_sender();
  // @@protoc_insertion_point(field_mutable:injective.oracle.v1beta1.MsgRelayProviderPrices.sender)
  return _s;
}
inline const std::string& MsgRelayProviderPrices::_internal_sender() const {
  return _impl_.sender_.Get();
}
inline void MsgRelayProviderPrices::_internal_set_sender(const std::string& value) {
  ;


  _impl_.sender_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgRelayProviderPrices::_internal_mutable_sender() {
  ;
  return _impl_.sender_.Mutable( GetArenaForAllocation());
}
inline std::string* MsgRelayProviderPrices::release_sender() {
  // @@protoc_insertion_point(field_release:injective.oracle.v1beta1.MsgRelayProviderPrices.sender)
  return _impl_.sender_.Release();
}
inline void MsgRelayProviderPrices::set_allocated_sender(std::string* value) {
  _impl_.sender_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.sender_.IsDefault()) {
          _impl_.sender_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.oracle.v1beta1.MsgRelayProviderPrices.sender)
}

// string provider = 2 [json_name = "provider"];
inline void MsgRelayProviderPrices::clear_provider() {
  _impl_.provider_.ClearToEmpty();
}
inline const std::string& MsgRelayProviderPrices::provider() const {
  // @@protoc_insertion_point(field_get:injective.oracle.v1beta1.MsgRelayProviderPrices.provider)
  return _internal_provider();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgRelayProviderPrices::set_provider(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.provider_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.oracle.v1beta1.MsgRelayProviderPrices.provider)
}
inline std::string* MsgRelayProviderPrices::mutable_provider() {
  std::string* _s = _internal_mutable_provider();
  // @@protoc_insertion_point(field_mutable:injective.oracle.v1beta1.MsgRelayProviderPrices.provider)
  return _s;
}
inline const std::string& MsgRelayProviderPrices::_internal_provider() const {
  return _impl_.provider_.Get();
}
inline void MsgRelayProviderPrices::_internal_set_provider(const std::string& value) {
  ;


  _impl_.provider_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgRelayProviderPrices::_internal_mutable_provider() {
  ;
  return _impl_.provider_.Mutable( GetArenaForAllocation());
}
inline std::string* MsgRelayProviderPrices::release_provider() {
  // @@protoc_insertion_point(field_release:injective.oracle.v1beta1.MsgRelayProviderPrices.provider)
  return _impl_.provider_.Release();
}
inline void MsgRelayProviderPrices::set_allocated_provider(std::string* value) {
  _impl_.provider_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.provider_.IsDefault()) {
          _impl_.provider_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.oracle.v1beta1.MsgRelayProviderPrices.provider)
}

// repeated string symbols = 3 [json_name = "symbols"];
inline int MsgRelayProviderPrices::_internal_symbols_size() const {
  return _impl_.symbols_.size();
}
inline int MsgRelayProviderPrices::symbols_size() const {
  return _internal_symbols_size();
}
inline void MsgRelayProviderPrices::clear_symbols() {
  _internal_mutable_symbols()->Clear();
}
inline std::string* MsgRelayProviderPrices::add_symbols() {
  std::string* _s = _internal_add_symbols();
  // @@protoc_insertion_point(field_add_mutable:injective.oracle.v1beta1.MsgRelayProviderPrices.symbols)
  return _s;
}
inline const std::string& MsgRelayProviderPrices::symbols(int index) const {
  // @@protoc_insertion_point(field_get:injective.oracle.v1beta1.MsgRelayProviderPrices.symbols)
  return _internal_symbols(index);
}
inline std::string* MsgRelayProviderPrices::mutable_symbols(int index) {
  // @@protoc_insertion_point(field_mutable:injective.oracle.v1beta1.MsgRelayProviderPrices.symbols)
  return _internal_mutable_symbols()->Mutable(index);
}
inline void MsgRelayProviderPrices::set_symbols(int index, const std::string& value) {
  _internal_mutable_symbols()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:injective.oracle.v1beta1.MsgRelayProviderPrices.symbols)
}
inline void MsgRelayProviderPrices::set_symbols(int index, std::string&& value) {
  _internal_mutable_symbols()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:injective.oracle.v1beta1.MsgRelayProviderPrices.symbols)
}
inline void MsgRelayProviderPrices::set_symbols(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_symbols()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:injective.oracle.v1beta1.MsgRelayProviderPrices.symbols)
}
inline void MsgRelayProviderPrices::set_symbols(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_symbols()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:injective.oracle.v1beta1.MsgRelayProviderPrices.symbols)
}
inline void MsgRelayProviderPrices::set_symbols(int index, absl::string_view value) {
  _internal_mutable_symbols()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:injective.oracle.v1beta1.MsgRelayProviderPrices.symbols)
}
inline void MsgRelayProviderPrices::add_symbols(const std::string& value) {
  _internal_mutable_symbols()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:injective.oracle.v1beta1.MsgRelayProviderPrices.symbols)
}
inline void MsgRelayProviderPrices::add_symbols(std::string&& value) {
  _internal_mutable_symbols()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:injective.oracle.v1beta1.MsgRelayProviderPrices.symbols)
}
inline void MsgRelayProviderPrices::add_symbols(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_symbols()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:injective.oracle.v1beta1.MsgRelayProviderPrices.symbols)
}
inline void MsgRelayProviderPrices::add_symbols(const char* value, std::size_t size) {
  _internal_mutable_symbols()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:injective.oracle.v1beta1.MsgRelayProviderPrices.symbols)
}
inline void MsgRelayProviderPrices::add_symbols(absl::string_view value) {
  _internal_mutable_symbols()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:injective.oracle.v1beta1.MsgRelayProviderPrices.symbols)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
MsgRelayProviderPrices::symbols() const {
  // @@protoc_insertion_point(field_list:injective.oracle.v1beta1.MsgRelayProviderPrices.symbols)
  return _internal_symbols();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* MsgRelayProviderPrices::mutable_symbols() {
  // @@protoc_insertion_point(field_mutable_list:injective.oracle.v1beta1.MsgRelayProviderPrices.symbols)
  return _internal_mutable_symbols();
}
inline const std::string& MsgRelayProviderPrices::_internal_symbols(int index) const {
  return _internal_symbols().Get(index);
}
inline std::string* MsgRelayProviderPrices::_internal_add_symbols() {
  return _internal_mutable_symbols()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
MsgRelayProviderPrices::_internal_symbols() const {
  return _impl_.symbols_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
MsgRelayProviderPrices::_internal_mutable_symbols() {
  return &_impl_.symbols_;
}

// repeated string prices = 4 [json_name = "prices", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
inline int MsgRelayProviderPrices::_internal_prices_size() const {
  return _impl_.prices_.size();
}
inline int MsgRelayProviderPrices::prices_size() const {
  return _internal_prices_size();
}
inline void MsgRelayProviderPrices::clear_prices() {
  _internal_mutable_prices()->Clear();
}
inline std::string* MsgRelayProviderPrices::add_prices() {
  std::string* _s = _internal_add_prices();
  // @@protoc_insertion_point(field_add_mutable:injective.oracle.v1beta1.MsgRelayProviderPrices.prices)
  return _s;
}
inline const std::string& MsgRelayProviderPrices::prices(int index) const {
  // @@protoc_insertion_point(field_get:injective.oracle.v1beta1.MsgRelayProviderPrices.prices)
  return _internal_prices(index);
}
inline std::string* MsgRelayProviderPrices::mutable_prices(int index) {
  // @@protoc_insertion_point(field_mutable:injective.oracle.v1beta1.MsgRelayProviderPrices.prices)
  return _internal_mutable_prices()->Mutable(index);
}
inline void MsgRelayProviderPrices::set_prices(int index, const std::string& value) {
  _internal_mutable_prices()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:injective.oracle.v1beta1.MsgRelayProviderPrices.prices)
}
inline void MsgRelayProviderPrices::set_prices(int index, std::string&& value) {
  _internal_mutable_prices()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:injective.oracle.v1beta1.MsgRelayProviderPrices.prices)
}
inline void MsgRelayProviderPrices::set_prices(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_prices()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:injective.oracle.v1beta1.MsgRelayProviderPrices.prices)
}
inline void MsgRelayProviderPrices::set_prices(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_prices()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:injective.oracle.v1beta1.MsgRelayProviderPrices.prices)
}
inline void MsgRelayProviderPrices::set_prices(int index, absl::string_view value) {
  _internal_mutable_prices()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:injective.oracle.v1beta1.MsgRelayProviderPrices.prices)
}
inline void MsgRelayProviderPrices::add_prices(const std::string& value) {
  _internal_mutable_prices()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:injective.oracle.v1beta1.MsgRelayProviderPrices.prices)
}
inline void MsgRelayProviderPrices::add_prices(std::string&& value) {
  _internal_mutable_prices()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:injective.oracle.v1beta1.MsgRelayProviderPrices.prices)
}
inline void MsgRelayProviderPrices::add_prices(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_prices()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:injective.oracle.v1beta1.MsgRelayProviderPrices.prices)
}
inline void MsgRelayProviderPrices::add_prices(const char* value, std::size_t size) {
  _internal_mutable_prices()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:injective.oracle.v1beta1.MsgRelayProviderPrices.prices)
}
inline void MsgRelayProviderPrices::add_prices(absl::string_view value) {
  _internal_mutable_prices()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:injective.oracle.v1beta1.MsgRelayProviderPrices.prices)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
MsgRelayProviderPrices::prices() const {
  // @@protoc_insertion_point(field_list:injective.oracle.v1beta1.MsgRelayProviderPrices.prices)
  return _internal_prices();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* MsgRelayProviderPrices::mutable_prices() {
  // @@protoc_insertion_point(field_mutable_list:injective.oracle.v1beta1.MsgRelayProviderPrices.prices)
  return _internal_mutable_prices();
}
inline const std::string& MsgRelayProviderPrices::_internal_prices(int index) const {
  return _internal_prices().Get(index);
}
inline std::string* MsgRelayProviderPrices::_internal_add_prices() {
  return _internal_mutable_prices()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
MsgRelayProviderPrices::_internal_prices() const {
  return _impl_.prices_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
MsgRelayProviderPrices::_internal_mutable_prices() {
  return &_impl_.prices_;
}

// -------------------------------------------------------------------

// MsgRelayProviderPricesResponse

// -------------------------------------------------------------------

// MsgRelayPriceFeedPrice

// string sender = 1 [json_name = "sender"];
inline void MsgRelayPriceFeedPrice::clear_sender() {
  _impl_.sender_.ClearToEmpty();
}
inline const std::string& MsgRelayPriceFeedPrice::sender() const {
  // @@protoc_insertion_point(field_get:injective.oracle.v1beta1.MsgRelayPriceFeedPrice.sender)
  return _internal_sender();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgRelayPriceFeedPrice::set_sender(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.sender_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.oracle.v1beta1.MsgRelayPriceFeedPrice.sender)
}
inline std::string* MsgRelayPriceFeedPrice::mutable_sender() {
  std::string* _s = _internal_mutable_sender();
  // @@protoc_insertion_point(field_mutable:injective.oracle.v1beta1.MsgRelayPriceFeedPrice.sender)
  return _s;
}
inline const std::string& MsgRelayPriceFeedPrice::_internal_sender() const {
  return _impl_.sender_.Get();
}
inline void MsgRelayPriceFeedPrice::_internal_set_sender(const std::string& value) {
  ;


  _impl_.sender_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgRelayPriceFeedPrice::_internal_mutable_sender() {
  ;
  return _impl_.sender_.Mutable( GetArenaForAllocation());
}
inline std::string* MsgRelayPriceFeedPrice::release_sender() {
  // @@protoc_insertion_point(field_release:injective.oracle.v1beta1.MsgRelayPriceFeedPrice.sender)
  return _impl_.sender_.Release();
}
inline void MsgRelayPriceFeedPrice::set_allocated_sender(std::string* value) {
  _impl_.sender_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.sender_.IsDefault()) {
          _impl_.sender_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.oracle.v1beta1.MsgRelayPriceFeedPrice.sender)
}

// repeated string base = 2 [json_name = "base"];
inline int MsgRelayPriceFeedPrice::_internal_base_size() const {
  return _impl_.base_.size();
}
inline int MsgRelayPriceFeedPrice::base_size() const {
  return _internal_base_size();
}
inline void MsgRelayPriceFeedPrice::clear_base() {
  _internal_mutable_base()->Clear();
}
inline std::string* MsgRelayPriceFeedPrice::add_base() {
  std::string* _s = _internal_add_base();
  // @@protoc_insertion_point(field_add_mutable:injective.oracle.v1beta1.MsgRelayPriceFeedPrice.base)
  return _s;
}
inline const std::string& MsgRelayPriceFeedPrice::base(int index) const {
  // @@protoc_insertion_point(field_get:injective.oracle.v1beta1.MsgRelayPriceFeedPrice.base)
  return _internal_base(index);
}
inline std::string* MsgRelayPriceFeedPrice::mutable_base(int index) {
  // @@protoc_insertion_point(field_mutable:injective.oracle.v1beta1.MsgRelayPriceFeedPrice.base)
  return _internal_mutable_base()->Mutable(index);
}
inline void MsgRelayPriceFeedPrice::set_base(int index, const std::string& value) {
  _internal_mutable_base()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:injective.oracle.v1beta1.MsgRelayPriceFeedPrice.base)
}
inline void MsgRelayPriceFeedPrice::set_base(int index, std::string&& value) {
  _internal_mutable_base()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:injective.oracle.v1beta1.MsgRelayPriceFeedPrice.base)
}
inline void MsgRelayPriceFeedPrice::set_base(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_base()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:injective.oracle.v1beta1.MsgRelayPriceFeedPrice.base)
}
inline void MsgRelayPriceFeedPrice::set_base(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_base()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:injective.oracle.v1beta1.MsgRelayPriceFeedPrice.base)
}
inline void MsgRelayPriceFeedPrice::set_base(int index, absl::string_view value) {
  _internal_mutable_base()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:injective.oracle.v1beta1.MsgRelayPriceFeedPrice.base)
}
inline void MsgRelayPriceFeedPrice::add_base(const std::string& value) {
  _internal_mutable_base()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:injective.oracle.v1beta1.MsgRelayPriceFeedPrice.base)
}
inline void MsgRelayPriceFeedPrice::add_base(std::string&& value) {
  _internal_mutable_base()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:injective.oracle.v1beta1.MsgRelayPriceFeedPrice.base)
}
inline void MsgRelayPriceFeedPrice::add_base(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_base()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:injective.oracle.v1beta1.MsgRelayPriceFeedPrice.base)
}
inline void MsgRelayPriceFeedPrice::add_base(const char* value, std::size_t size) {
  _internal_mutable_base()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:injective.oracle.v1beta1.MsgRelayPriceFeedPrice.base)
}
inline void MsgRelayPriceFeedPrice::add_base(absl::string_view value) {
  _internal_mutable_base()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:injective.oracle.v1beta1.MsgRelayPriceFeedPrice.base)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
MsgRelayPriceFeedPrice::base() const {
  // @@protoc_insertion_point(field_list:injective.oracle.v1beta1.MsgRelayPriceFeedPrice.base)
  return _internal_base();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* MsgRelayPriceFeedPrice::mutable_base() {
  // @@protoc_insertion_point(field_mutable_list:injective.oracle.v1beta1.MsgRelayPriceFeedPrice.base)
  return _internal_mutable_base();
}
inline const std::string& MsgRelayPriceFeedPrice::_internal_base(int index) const {
  return _internal_base().Get(index);
}
inline std::string* MsgRelayPriceFeedPrice::_internal_add_base() {
  return _internal_mutable_base()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
MsgRelayPriceFeedPrice::_internal_base() const {
  return _impl_.base_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
MsgRelayPriceFeedPrice::_internal_mutable_base() {
  return &_impl_.base_;
}

// repeated string quote = 3 [json_name = "quote"];
inline int MsgRelayPriceFeedPrice::_internal_quote_size() const {
  return _impl_.quote_.size();
}
inline int MsgRelayPriceFeedPrice::quote_size() const {
  return _internal_quote_size();
}
inline void MsgRelayPriceFeedPrice::clear_quote() {
  _internal_mutable_quote()->Clear();
}
inline std::string* MsgRelayPriceFeedPrice::add_quote() {
  std::string* _s = _internal_add_quote();
  // @@protoc_insertion_point(field_add_mutable:injective.oracle.v1beta1.MsgRelayPriceFeedPrice.quote)
  return _s;
}
inline const std::string& MsgRelayPriceFeedPrice::quote(int index) const {
  // @@protoc_insertion_point(field_get:injective.oracle.v1beta1.MsgRelayPriceFeedPrice.quote)
  return _internal_quote(index);
}
inline std::string* MsgRelayPriceFeedPrice::mutable_quote(int index) {
  // @@protoc_insertion_point(field_mutable:injective.oracle.v1beta1.MsgRelayPriceFeedPrice.quote)
  return _internal_mutable_quote()->Mutable(index);
}
inline void MsgRelayPriceFeedPrice::set_quote(int index, const std::string& value) {
  _internal_mutable_quote()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:injective.oracle.v1beta1.MsgRelayPriceFeedPrice.quote)
}
inline void MsgRelayPriceFeedPrice::set_quote(int index, std::string&& value) {
  _internal_mutable_quote()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:injective.oracle.v1beta1.MsgRelayPriceFeedPrice.quote)
}
inline void MsgRelayPriceFeedPrice::set_quote(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_quote()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:injective.oracle.v1beta1.MsgRelayPriceFeedPrice.quote)
}
inline void MsgRelayPriceFeedPrice::set_quote(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_quote()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:injective.oracle.v1beta1.MsgRelayPriceFeedPrice.quote)
}
inline void MsgRelayPriceFeedPrice::set_quote(int index, absl::string_view value) {
  _internal_mutable_quote()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:injective.oracle.v1beta1.MsgRelayPriceFeedPrice.quote)
}
inline void MsgRelayPriceFeedPrice::add_quote(const std::string& value) {
  _internal_mutable_quote()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:injective.oracle.v1beta1.MsgRelayPriceFeedPrice.quote)
}
inline void MsgRelayPriceFeedPrice::add_quote(std::string&& value) {
  _internal_mutable_quote()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:injective.oracle.v1beta1.MsgRelayPriceFeedPrice.quote)
}
inline void MsgRelayPriceFeedPrice::add_quote(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_quote()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:injective.oracle.v1beta1.MsgRelayPriceFeedPrice.quote)
}
inline void MsgRelayPriceFeedPrice::add_quote(const char* value, std::size_t size) {
  _internal_mutable_quote()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:injective.oracle.v1beta1.MsgRelayPriceFeedPrice.quote)
}
inline void MsgRelayPriceFeedPrice::add_quote(absl::string_view value) {
  _internal_mutable_quote()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:injective.oracle.v1beta1.MsgRelayPriceFeedPrice.quote)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
MsgRelayPriceFeedPrice::quote() const {
  // @@protoc_insertion_point(field_list:injective.oracle.v1beta1.MsgRelayPriceFeedPrice.quote)
  return _internal_quote();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* MsgRelayPriceFeedPrice::mutable_quote() {
  // @@protoc_insertion_point(field_mutable_list:injective.oracle.v1beta1.MsgRelayPriceFeedPrice.quote)
  return _internal_mutable_quote();
}
inline const std::string& MsgRelayPriceFeedPrice::_internal_quote(int index) const {
  return _internal_quote().Get(index);
}
inline std::string* MsgRelayPriceFeedPrice::_internal_add_quote() {
  return _internal_mutable_quote()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
MsgRelayPriceFeedPrice::_internal_quote() const {
  return _impl_.quote_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
MsgRelayPriceFeedPrice::_internal_mutable_quote() {
  return &_impl_.quote_;
}

// repeated string price = 4 [json_name = "price", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
inline int MsgRelayPriceFeedPrice::_internal_price_size() const {
  return _impl_.price_.size();
}
inline int MsgRelayPriceFeedPrice::price_size() const {
  return _internal_price_size();
}
inline void MsgRelayPriceFeedPrice::clear_price() {
  _internal_mutable_price()->Clear();
}
inline std::string* MsgRelayPriceFeedPrice::add_price() {
  std::string* _s = _internal_add_price();
  // @@protoc_insertion_point(field_add_mutable:injective.oracle.v1beta1.MsgRelayPriceFeedPrice.price)
  return _s;
}
inline const std::string& MsgRelayPriceFeedPrice::price(int index) const {
  // @@protoc_insertion_point(field_get:injective.oracle.v1beta1.MsgRelayPriceFeedPrice.price)
  return _internal_price(index);
}
inline std::string* MsgRelayPriceFeedPrice::mutable_price(int index) {
  // @@protoc_insertion_point(field_mutable:injective.oracle.v1beta1.MsgRelayPriceFeedPrice.price)
  return _internal_mutable_price()->Mutable(index);
}
inline void MsgRelayPriceFeedPrice::set_price(int index, const std::string& value) {
  _internal_mutable_price()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:injective.oracle.v1beta1.MsgRelayPriceFeedPrice.price)
}
inline void MsgRelayPriceFeedPrice::set_price(int index, std::string&& value) {
  _internal_mutable_price()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:injective.oracle.v1beta1.MsgRelayPriceFeedPrice.price)
}
inline void MsgRelayPriceFeedPrice::set_price(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_price()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:injective.oracle.v1beta1.MsgRelayPriceFeedPrice.price)
}
inline void MsgRelayPriceFeedPrice::set_price(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_price()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:injective.oracle.v1beta1.MsgRelayPriceFeedPrice.price)
}
inline void MsgRelayPriceFeedPrice::set_price(int index, absl::string_view value) {
  _internal_mutable_price()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:injective.oracle.v1beta1.MsgRelayPriceFeedPrice.price)
}
inline void MsgRelayPriceFeedPrice::add_price(const std::string& value) {
  _internal_mutable_price()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:injective.oracle.v1beta1.MsgRelayPriceFeedPrice.price)
}
inline void MsgRelayPriceFeedPrice::add_price(std::string&& value) {
  _internal_mutable_price()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:injective.oracle.v1beta1.MsgRelayPriceFeedPrice.price)
}
inline void MsgRelayPriceFeedPrice::add_price(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_price()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:injective.oracle.v1beta1.MsgRelayPriceFeedPrice.price)
}
inline void MsgRelayPriceFeedPrice::add_price(const char* value, std::size_t size) {
  _internal_mutable_price()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:injective.oracle.v1beta1.MsgRelayPriceFeedPrice.price)
}
inline void MsgRelayPriceFeedPrice::add_price(absl::string_view value) {
  _internal_mutable_price()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:injective.oracle.v1beta1.MsgRelayPriceFeedPrice.price)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
MsgRelayPriceFeedPrice::price() const {
  // @@protoc_insertion_point(field_list:injective.oracle.v1beta1.MsgRelayPriceFeedPrice.price)
  return _internal_price();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* MsgRelayPriceFeedPrice::mutable_price() {
  // @@protoc_insertion_point(field_mutable_list:injective.oracle.v1beta1.MsgRelayPriceFeedPrice.price)
  return _internal_mutable_price();
}
inline const std::string& MsgRelayPriceFeedPrice::_internal_price(int index) const {
  return _internal_price().Get(index);
}
inline std::string* MsgRelayPriceFeedPrice::_internal_add_price() {
  return _internal_mutable_price()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
MsgRelayPriceFeedPrice::_internal_price() const {
  return _impl_.price_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
MsgRelayPriceFeedPrice::_internal_mutable_price() {
  return &_impl_.price_;
}

// -------------------------------------------------------------------

// MsgRelayPriceFeedPriceResponse

// -------------------------------------------------------------------

// MsgRelayBandRates

// string relayer = 1 [json_name = "relayer"];
inline void MsgRelayBandRates::clear_relayer() {
  _impl_.relayer_.ClearToEmpty();
}
inline const std::string& MsgRelayBandRates::relayer() const {
  // @@protoc_insertion_point(field_get:injective.oracle.v1beta1.MsgRelayBandRates.relayer)
  return _internal_relayer();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgRelayBandRates::set_relayer(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.relayer_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.oracle.v1beta1.MsgRelayBandRates.relayer)
}
inline std::string* MsgRelayBandRates::mutable_relayer() {
  std::string* _s = _internal_mutable_relayer();
  // @@protoc_insertion_point(field_mutable:injective.oracle.v1beta1.MsgRelayBandRates.relayer)
  return _s;
}
inline const std::string& MsgRelayBandRates::_internal_relayer() const {
  return _impl_.relayer_.Get();
}
inline void MsgRelayBandRates::_internal_set_relayer(const std::string& value) {
  ;


  _impl_.relayer_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgRelayBandRates::_internal_mutable_relayer() {
  ;
  return _impl_.relayer_.Mutable( GetArenaForAllocation());
}
inline std::string* MsgRelayBandRates::release_relayer() {
  // @@protoc_insertion_point(field_release:injective.oracle.v1beta1.MsgRelayBandRates.relayer)
  return _impl_.relayer_.Release();
}
inline void MsgRelayBandRates::set_allocated_relayer(std::string* value) {
  _impl_.relayer_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.relayer_.IsDefault()) {
          _impl_.relayer_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.oracle.v1beta1.MsgRelayBandRates.relayer)
}

// repeated string symbols = 2 [json_name = "symbols"];
inline int MsgRelayBandRates::_internal_symbols_size() const {
  return _impl_.symbols_.size();
}
inline int MsgRelayBandRates::symbols_size() const {
  return _internal_symbols_size();
}
inline void MsgRelayBandRates::clear_symbols() {
  _internal_mutable_symbols()->Clear();
}
inline std::string* MsgRelayBandRates::add_symbols() {
  std::string* _s = _internal_add_symbols();
  // @@protoc_insertion_point(field_add_mutable:injective.oracle.v1beta1.MsgRelayBandRates.symbols)
  return _s;
}
inline const std::string& MsgRelayBandRates::symbols(int index) const {
  // @@protoc_insertion_point(field_get:injective.oracle.v1beta1.MsgRelayBandRates.symbols)
  return _internal_symbols(index);
}
inline std::string* MsgRelayBandRates::mutable_symbols(int index) {
  // @@protoc_insertion_point(field_mutable:injective.oracle.v1beta1.MsgRelayBandRates.symbols)
  return _internal_mutable_symbols()->Mutable(index);
}
inline void MsgRelayBandRates::set_symbols(int index, const std::string& value) {
  _internal_mutable_symbols()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:injective.oracle.v1beta1.MsgRelayBandRates.symbols)
}
inline void MsgRelayBandRates::set_symbols(int index, std::string&& value) {
  _internal_mutable_symbols()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:injective.oracle.v1beta1.MsgRelayBandRates.symbols)
}
inline void MsgRelayBandRates::set_symbols(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_symbols()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:injective.oracle.v1beta1.MsgRelayBandRates.symbols)
}
inline void MsgRelayBandRates::set_symbols(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_symbols()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:injective.oracle.v1beta1.MsgRelayBandRates.symbols)
}
inline void MsgRelayBandRates::set_symbols(int index, absl::string_view value) {
  _internal_mutable_symbols()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:injective.oracle.v1beta1.MsgRelayBandRates.symbols)
}
inline void MsgRelayBandRates::add_symbols(const std::string& value) {
  _internal_mutable_symbols()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:injective.oracle.v1beta1.MsgRelayBandRates.symbols)
}
inline void MsgRelayBandRates::add_symbols(std::string&& value) {
  _internal_mutable_symbols()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:injective.oracle.v1beta1.MsgRelayBandRates.symbols)
}
inline void MsgRelayBandRates::add_symbols(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_symbols()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:injective.oracle.v1beta1.MsgRelayBandRates.symbols)
}
inline void MsgRelayBandRates::add_symbols(const char* value, std::size_t size) {
  _internal_mutable_symbols()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:injective.oracle.v1beta1.MsgRelayBandRates.symbols)
}
inline void MsgRelayBandRates::add_symbols(absl::string_view value) {
  _internal_mutable_symbols()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:injective.oracle.v1beta1.MsgRelayBandRates.symbols)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
MsgRelayBandRates::symbols() const {
  // @@protoc_insertion_point(field_list:injective.oracle.v1beta1.MsgRelayBandRates.symbols)
  return _internal_symbols();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* MsgRelayBandRates::mutable_symbols() {
  // @@protoc_insertion_point(field_mutable_list:injective.oracle.v1beta1.MsgRelayBandRates.symbols)
  return _internal_mutable_symbols();
}
inline const std::string& MsgRelayBandRates::_internal_symbols(int index) const {
  return _internal_symbols().Get(index);
}
inline std::string* MsgRelayBandRates::_internal_add_symbols() {
  return _internal_mutable_symbols()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
MsgRelayBandRates::_internal_symbols() const {
  return _impl_.symbols_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
MsgRelayBandRates::_internal_mutable_symbols() {
  return &_impl_.symbols_;
}

// repeated uint64 rates = 3 [json_name = "rates"];
inline int MsgRelayBandRates::_internal_rates_size() const {
  return _impl_.rates_.size();
}
inline int MsgRelayBandRates::rates_size() const {
  return _internal_rates_size();
}
inline void MsgRelayBandRates::clear_rates() {
  _internal_mutable_rates()->Clear();
}
inline ::uint64_t MsgRelayBandRates::rates(int index) const {
  // @@protoc_insertion_point(field_get:injective.oracle.v1beta1.MsgRelayBandRates.rates)
  return _internal_rates(index);
}
inline void MsgRelayBandRates::set_rates(int index, ::uint64_t value) {
  _internal_mutable_rates()->Set(index, value);
  // @@protoc_insertion_point(field_set:injective.oracle.v1beta1.MsgRelayBandRates.rates)
}
inline void MsgRelayBandRates::add_rates(::uint64_t value) {
  _internal_add_rates(value);
  // @@protoc_insertion_point(field_add:injective.oracle.v1beta1.MsgRelayBandRates.rates)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>& MsgRelayBandRates::rates() const {
  // @@protoc_insertion_point(field_list:injective.oracle.v1beta1.MsgRelayBandRates.rates)
  return _internal_rates();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>* MsgRelayBandRates::mutable_rates() {
  // @@protoc_insertion_point(field_mutable_list:injective.oracle.v1beta1.MsgRelayBandRates.rates)
  return _internal_mutable_rates();
}

inline ::uint64_t MsgRelayBandRates::_internal_rates(int index) const {
  return _internal_rates().Get(index);
}
inline void MsgRelayBandRates::_internal_add_rates(::uint64_t value) {
  _internal_mutable_rates()->Add(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>& MsgRelayBandRates::_internal_rates() const {
  return _impl_.rates_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>* MsgRelayBandRates::_internal_mutable_rates() {
  return &_impl_.rates_;
}

// repeated uint64 resolve_times = 4 [json_name = "resolveTimes"];
inline int MsgRelayBandRates::_internal_resolve_times_size() const {
  return _impl_.resolve_times_.size();
}
inline int MsgRelayBandRates::resolve_times_size() const {
  return _internal_resolve_times_size();
}
inline void MsgRelayBandRates::clear_resolve_times() {
  _internal_mutable_resolve_times()->Clear();
}
inline ::uint64_t MsgRelayBandRates::resolve_times(int index) const {
  // @@protoc_insertion_point(field_get:injective.oracle.v1beta1.MsgRelayBandRates.resolve_times)
  return _internal_resolve_times(index);
}
inline void MsgRelayBandRates::set_resolve_times(int index, ::uint64_t value) {
  _internal_mutable_resolve_times()->Set(index, value);
  // @@protoc_insertion_point(field_set:injective.oracle.v1beta1.MsgRelayBandRates.resolve_times)
}
inline void MsgRelayBandRates::add_resolve_times(::uint64_t value) {
  _internal_add_resolve_times(value);
  // @@protoc_insertion_point(field_add:injective.oracle.v1beta1.MsgRelayBandRates.resolve_times)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>& MsgRelayBandRates::resolve_times() const {
  // @@protoc_insertion_point(field_list:injective.oracle.v1beta1.MsgRelayBandRates.resolve_times)
  return _internal_resolve_times();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>* MsgRelayBandRates::mutable_resolve_times() {
  // @@protoc_insertion_point(field_mutable_list:injective.oracle.v1beta1.MsgRelayBandRates.resolve_times)
  return _internal_mutable_resolve_times();
}

inline ::uint64_t MsgRelayBandRates::_internal_resolve_times(int index) const {
  return _internal_resolve_times().Get(index);
}
inline void MsgRelayBandRates::_internal_add_resolve_times(::uint64_t value) {
  _internal_mutable_resolve_times()->Add(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>& MsgRelayBandRates::_internal_resolve_times() const {
  return _impl_.resolve_times_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>* MsgRelayBandRates::_internal_mutable_resolve_times() {
  return &_impl_.resolve_times_;
}

// repeated uint64 requestIDs = 5 [json_name = "requestIDs"];
inline int MsgRelayBandRates::_internal_requestids_size() const {
  return _impl_.requestids_.size();
}
inline int MsgRelayBandRates::requestids_size() const {
  return _internal_requestids_size();
}
inline void MsgRelayBandRates::clear_requestids() {
  _internal_mutable_requestids()->Clear();
}
inline ::uint64_t MsgRelayBandRates::requestids(int index) const {
  // @@protoc_insertion_point(field_get:injective.oracle.v1beta1.MsgRelayBandRates.requestIDs)
  return _internal_requestids(index);
}
inline void MsgRelayBandRates::set_requestids(int index, ::uint64_t value) {
  _internal_mutable_requestids()->Set(index, value);
  // @@protoc_insertion_point(field_set:injective.oracle.v1beta1.MsgRelayBandRates.requestIDs)
}
inline void MsgRelayBandRates::add_requestids(::uint64_t value) {
  _internal_add_requestids(value);
  // @@protoc_insertion_point(field_add:injective.oracle.v1beta1.MsgRelayBandRates.requestIDs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>& MsgRelayBandRates::requestids() const {
  // @@protoc_insertion_point(field_list:injective.oracle.v1beta1.MsgRelayBandRates.requestIDs)
  return _internal_requestids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>* MsgRelayBandRates::mutable_requestids() {
  // @@protoc_insertion_point(field_mutable_list:injective.oracle.v1beta1.MsgRelayBandRates.requestIDs)
  return _internal_mutable_requestids();
}

inline ::uint64_t MsgRelayBandRates::_internal_requestids(int index) const {
  return _internal_requestids().Get(index);
}
inline void MsgRelayBandRates::_internal_add_requestids(::uint64_t value) {
  _internal_mutable_requestids()->Add(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>& MsgRelayBandRates::_internal_requestids() const {
  return _impl_.requestids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>* MsgRelayBandRates::_internal_mutable_requestids() {
  return &_impl_.requestids_;
}

// -------------------------------------------------------------------

// MsgRelayBandRatesResponse

// -------------------------------------------------------------------

// MsgRelayCoinbaseMessages

// string sender = 1 [json_name = "sender"];
inline void MsgRelayCoinbaseMessages::clear_sender() {
  _impl_.sender_.ClearToEmpty();
}
inline const std::string& MsgRelayCoinbaseMessages::sender() const {
  // @@protoc_insertion_point(field_get:injective.oracle.v1beta1.MsgRelayCoinbaseMessages.sender)
  return _internal_sender();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgRelayCoinbaseMessages::set_sender(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.sender_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.oracle.v1beta1.MsgRelayCoinbaseMessages.sender)
}
inline std::string* MsgRelayCoinbaseMessages::mutable_sender() {
  std::string* _s = _internal_mutable_sender();
  // @@protoc_insertion_point(field_mutable:injective.oracle.v1beta1.MsgRelayCoinbaseMessages.sender)
  return _s;
}
inline const std::string& MsgRelayCoinbaseMessages::_internal_sender() const {
  return _impl_.sender_.Get();
}
inline void MsgRelayCoinbaseMessages::_internal_set_sender(const std::string& value) {
  ;


  _impl_.sender_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgRelayCoinbaseMessages::_internal_mutable_sender() {
  ;
  return _impl_.sender_.Mutable( GetArenaForAllocation());
}
inline std::string* MsgRelayCoinbaseMessages::release_sender() {
  // @@protoc_insertion_point(field_release:injective.oracle.v1beta1.MsgRelayCoinbaseMessages.sender)
  return _impl_.sender_.Release();
}
inline void MsgRelayCoinbaseMessages::set_allocated_sender(std::string* value) {
  _impl_.sender_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.sender_.IsDefault()) {
          _impl_.sender_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.oracle.v1beta1.MsgRelayCoinbaseMessages.sender)
}

// repeated bytes messages = 2 [json_name = "messages"];
inline int MsgRelayCoinbaseMessages::_internal_messages_size() const {
  return _impl_.messages_.size();
}
inline int MsgRelayCoinbaseMessages::messages_size() const {
  return _internal_messages_size();
}
inline void MsgRelayCoinbaseMessages::clear_messages() {
  _internal_mutable_messages()->Clear();
}
inline std::string* MsgRelayCoinbaseMessages::add_messages() {
  std::string* _s = _internal_add_messages();
  // @@protoc_insertion_point(field_add_mutable:injective.oracle.v1beta1.MsgRelayCoinbaseMessages.messages)
  return _s;
}
inline const std::string& MsgRelayCoinbaseMessages::messages(int index) const {
  // @@protoc_insertion_point(field_get:injective.oracle.v1beta1.MsgRelayCoinbaseMessages.messages)
  return _internal_messages(index);
}
inline std::string* MsgRelayCoinbaseMessages::mutable_messages(int index) {
  // @@protoc_insertion_point(field_mutable:injective.oracle.v1beta1.MsgRelayCoinbaseMessages.messages)
  return _internal_mutable_messages()->Mutable(index);
}
inline void MsgRelayCoinbaseMessages::set_messages(int index, const std::string& value) {
  _internal_mutable_messages()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:injective.oracle.v1beta1.MsgRelayCoinbaseMessages.messages)
}
inline void MsgRelayCoinbaseMessages::set_messages(int index, std::string&& value) {
  _internal_mutable_messages()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:injective.oracle.v1beta1.MsgRelayCoinbaseMessages.messages)
}
inline void MsgRelayCoinbaseMessages::set_messages(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_messages()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:injective.oracle.v1beta1.MsgRelayCoinbaseMessages.messages)
}
inline void MsgRelayCoinbaseMessages::set_messages(int index, const void* value,
                              std::size_t size) {
  _internal_mutable_messages()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:injective.oracle.v1beta1.MsgRelayCoinbaseMessages.messages)
}
inline void MsgRelayCoinbaseMessages::set_messages(int index, absl::string_view value) {
  _internal_mutable_messages()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:injective.oracle.v1beta1.MsgRelayCoinbaseMessages.messages)
}
inline void MsgRelayCoinbaseMessages::add_messages(const std::string& value) {
  _internal_mutable_messages()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:injective.oracle.v1beta1.MsgRelayCoinbaseMessages.messages)
}
inline void MsgRelayCoinbaseMessages::add_messages(std::string&& value) {
  _internal_mutable_messages()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:injective.oracle.v1beta1.MsgRelayCoinbaseMessages.messages)
}
inline void MsgRelayCoinbaseMessages::add_messages(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_messages()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:injective.oracle.v1beta1.MsgRelayCoinbaseMessages.messages)
}
inline void MsgRelayCoinbaseMessages::add_messages(const void* value, std::size_t size) {
  _internal_mutable_messages()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:injective.oracle.v1beta1.MsgRelayCoinbaseMessages.messages)
}
inline void MsgRelayCoinbaseMessages::add_messages(absl::string_view value) {
  _internal_mutable_messages()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:injective.oracle.v1beta1.MsgRelayCoinbaseMessages.messages)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
MsgRelayCoinbaseMessages::messages() const {
  // @@protoc_insertion_point(field_list:injective.oracle.v1beta1.MsgRelayCoinbaseMessages.messages)
  return _internal_messages();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* MsgRelayCoinbaseMessages::mutable_messages() {
  // @@protoc_insertion_point(field_mutable_list:injective.oracle.v1beta1.MsgRelayCoinbaseMessages.messages)
  return _internal_mutable_messages();
}
inline const std::string& MsgRelayCoinbaseMessages::_internal_messages(int index) const {
  return _internal_messages().Get(index);
}
inline std::string* MsgRelayCoinbaseMessages::_internal_add_messages() {
  return _internal_mutable_messages()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
MsgRelayCoinbaseMessages::_internal_messages() const {
  return _impl_.messages_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
MsgRelayCoinbaseMessages::_internal_mutable_messages() {
  return &_impl_.messages_;
}

// repeated bytes signatures = 3 [json_name = "signatures"];
inline int MsgRelayCoinbaseMessages::_internal_signatures_size() const {
  return _impl_.signatures_.size();
}
inline int MsgRelayCoinbaseMessages::signatures_size() const {
  return _internal_signatures_size();
}
inline void MsgRelayCoinbaseMessages::clear_signatures() {
  _internal_mutable_signatures()->Clear();
}
inline std::string* MsgRelayCoinbaseMessages::add_signatures() {
  std::string* _s = _internal_add_signatures();
  // @@protoc_insertion_point(field_add_mutable:injective.oracle.v1beta1.MsgRelayCoinbaseMessages.signatures)
  return _s;
}
inline const std::string& MsgRelayCoinbaseMessages::signatures(int index) const {
  // @@protoc_insertion_point(field_get:injective.oracle.v1beta1.MsgRelayCoinbaseMessages.signatures)
  return _internal_signatures(index);
}
inline std::string* MsgRelayCoinbaseMessages::mutable_signatures(int index) {
  // @@protoc_insertion_point(field_mutable:injective.oracle.v1beta1.MsgRelayCoinbaseMessages.signatures)
  return _internal_mutable_signatures()->Mutable(index);
}
inline void MsgRelayCoinbaseMessages::set_signatures(int index, const std::string& value) {
  _internal_mutable_signatures()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:injective.oracle.v1beta1.MsgRelayCoinbaseMessages.signatures)
}
inline void MsgRelayCoinbaseMessages::set_signatures(int index, std::string&& value) {
  _internal_mutable_signatures()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:injective.oracle.v1beta1.MsgRelayCoinbaseMessages.signatures)
}
inline void MsgRelayCoinbaseMessages::set_signatures(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_signatures()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:injective.oracle.v1beta1.MsgRelayCoinbaseMessages.signatures)
}
inline void MsgRelayCoinbaseMessages::set_signatures(int index, const void* value,
                              std::size_t size) {
  _internal_mutable_signatures()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:injective.oracle.v1beta1.MsgRelayCoinbaseMessages.signatures)
}
inline void MsgRelayCoinbaseMessages::set_signatures(int index, absl::string_view value) {
  _internal_mutable_signatures()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:injective.oracle.v1beta1.MsgRelayCoinbaseMessages.signatures)
}
inline void MsgRelayCoinbaseMessages::add_signatures(const std::string& value) {
  _internal_mutable_signatures()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:injective.oracle.v1beta1.MsgRelayCoinbaseMessages.signatures)
}
inline void MsgRelayCoinbaseMessages::add_signatures(std::string&& value) {
  _internal_mutable_signatures()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:injective.oracle.v1beta1.MsgRelayCoinbaseMessages.signatures)
}
inline void MsgRelayCoinbaseMessages::add_signatures(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_signatures()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:injective.oracle.v1beta1.MsgRelayCoinbaseMessages.signatures)
}
inline void MsgRelayCoinbaseMessages::add_signatures(const void* value, std::size_t size) {
  _internal_mutable_signatures()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:injective.oracle.v1beta1.MsgRelayCoinbaseMessages.signatures)
}
inline void MsgRelayCoinbaseMessages::add_signatures(absl::string_view value) {
  _internal_mutable_signatures()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:injective.oracle.v1beta1.MsgRelayCoinbaseMessages.signatures)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
MsgRelayCoinbaseMessages::signatures() const {
  // @@protoc_insertion_point(field_list:injective.oracle.v1beta1.MsgRelayCoinbaseMessages.signatures)
  return _internal_signatures();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* MsgRelayCoinbaseMessages::mutable_signatures() {
  // @@protoc_insertion_point(field_mutable_list:injective.oracle.v1beta1.MsgRelayCoinbaseMessages.signatures)
  return _internal_mutable_signatures();
}
inline const std::string& MsgRelayCoinbaseMessages::_internal_signatures(int index) const {
  return _internal_signatures().Get(index);
}
inline std::string* MsgRelayCoinbaseMessages::_internal_add_signatures() {
  return _internal_mutable_signatures()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
MsgRelayCoinbaseMessages::_internal_signatures() const {
  return _impl_.signatures_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
MsgRelayCoinbaseMessages::_internal_mutable_signatures() {
  return &_impl_.signatures_;
}

// -------------------------------------------------------------------

// MsgRelayCoinbaseMessagesResponse

// -------------------------------------------------------------------

// MsgRequestBandIBCRates

// string sender = 1 [json_name = "sender"];
inline void MsgRequestBandIBCRates::clear_sender() {
  _impl_.sender_.ClearToEmpty();
}
inline const std::string& MsgRequestBandIBCRates::sender() const {
  // @@protoc_insertion_point(field_get:injective.oracle.v1beta1.MsgRequestBandIBCRates.sender)
  return _internal_sender();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgRequestBandIBCRates::set_sender(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.sender_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.oracle.v1beta1.MsgRequestBandIBCRates.sender)
}
inline std::string* MsgRequestBandIBCRates::mutable_sender() {
  std::string* _s = _internal_mutable_sender();
  // @@protoc_insertion_point(field_mutable:injective.oracle.v1beta1.MsgRequestBandIBCRates.sender)
  return _s;
}
inline const std::string& MsgRequestBandIBCRates::_internal_sender() const {
  return _impl_.sender_.Get();
}
inline void MsgRequestBandIBCRates::_internal_set_sender(const std::string& value) {
  ;


  _impl_.sender_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgRequestBandIBCRates::_internal_mutable_sender() {
  ;
  return _impl_.sender_.Mutable( GetArenaForAllocation());
}
inline std::string* MsgRequestBandIBCRates::release_sender() {
  // @@protoc_insertion_point(field_release:injective.oracle.v1beta1.MsgRequestBandIBCRates.sender)
  return _impl_.sender_.Release();
}
inline void MsgRequestBandIBCRates::set_allocated_sender(std::string* value) {
  _impl_.sender_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.sender_.IsDefault()) {
          _impl_.sender_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.oracle.v1beta1.MsgRequestBandIBCRates.sender)
}

// uint64 request_id = 2 [json_name = "requestId"];
inline void MsgRequestBandIBCRates::clear_request_id() {
  _impl_.request_id_ = ::uint64_t{0u};
}
inline ::uint64_t MsgRequestBandIBCRates::request_id() const {
  // @@protoc_insertion_point(field_get:injective.oracle.v1beta1.MsgRequestBandIBCRates.request_id)
  return _internal_request_id();
}
inline void MsgRequestBandIBCRates::set_request_id(::uint64_t value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:injective.oracle.v1beta1.MsgRequestBandIBCRates.request_id)
}
inline ::uint64_t MsgRequestBandIBCRates::_internal_request_id() const {
  return _impl_.request_id_;
}
inline void MsgRequestBandIBCRates::_internal_set_request_id(::uint64_t value) {
  ;
  _impl_.request_id_ = value;
}

// -------------------------------------------------------------------

// MsgRequestBandIBCRatesResponse

// -------------------------------------------------------------------

// MsgRelayPythPrices

// string sender = 1 [json_name = "sender"];
inline void MsgRelayPythPrices::clear_sender() {
  _impl_.sender_.ClearToEmpty();
}
inline const std::string& MsgRelayPythPrices::sender() const {
  // @@protoc_insertion_point(field_get:injective.oracle.v1beta1.MsgRelayPythPrices.sender)
  return _internal_sender();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgRelayPythPrices::set_sender(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.sender_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.oracle.v1beta1.MsgRelayPythPrices.sender)
}
inline std::string* MsgRelayPythPrices::mutable_sender() {
  std::string* _s = _internal_mutable_sender();
  // @@protoc_insertion_point(field_mutable:injective.oracle.v1beta1.MsgRelayPythPrices.sender)
  return _s;
}
inline const std::string& MsgRelayPythPrices::_internal_sender() const {
  return _impl_.sender_.Get();
}
inline void MsgRelayPythPrices::_internal_set_sender(const std::string& value) {
  ;


  _impl_.sender_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgRelayPythPrices::_internal_mutable_sender() {
  ;
  return _impl_.sender_.Mutable( GetArenaForAllocation());
}
inline std::string* MsgRelayPythPrices::release_sender() {
  // @@protoc_insertion_point(field_release:injective.oracle.v1beta1.MsgRelayPythPrices.sender)
  return _impl_.sender_.Release();
}
inline void MsgRelayPythPrices::set_allocated_sender(std::string* value) {
  _impl_.sender_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.sender_.IsDefault()) {
          _impl_.sender_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.oracle.v1beta1.MsgRelayPythPrices.sender)
}

// repeated .injective.oracle.v1beta1.PriceAttestation price_attestations = 2 [json_name = "priceAttestations"];
inline int MsgRelayPythPrices::_internal_price_attestations_size() const {
  return _impl_.price_attestations_.size();
}
inline int MsgRelayPythPrices::price_attestations_size() const {
  return _internal_price_attestations_size();
}
inline ::injective::oracle::v1beta1::PriceAttestation* MsgRelayPythPrices::mutable_price_attestations(int index) {
  // @@protoc_insertion_point(field_mutable:injective.oracle.v1beta1.MsgRelayPythPrices.price_attestations)
  return _internal_mutable_price_attestations()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::oracle::v1beta1::PriceAttestation >*
MsgRelayPythPrices::mutable_price_attestations() {
  // @@protoc_insertion_point(field_mutable_list:injective.oracle.v1beta1.MsgRelayPythPrices.price_attestations)
  return _internal_mutable_price_attestations();
}
inline const ::injective::oracle::v1beta1::PriceAttestation& MsgRelayPythPrices::_internal_price_attestations(int index) const {
  return _internal_price_attestations().Get(index);
}
inline const ::injective::oracle::v1beta1::PriceAttestation& MsgRelayPythPrices::price_attestations(int index) const {
  // @@protoc_insertion_point(field_get:injective.oracle.v1beta1.MsgRelayPythPrices.price_attestations)
  return _internal_price_attestations(index);
}
inline ::injective::oracle::v1beta1::PriceAttestation* MsgRelayPythPrices::_internal_add_price_attestations() {
  return _internal_mutable_price_attestations()->Add();
}
inline ::injective::oracle::v1beta1::PriceAttestation* MsgRelayPythPrices::add_price_attestations() {
  ::injective::oracle::v1beta1::PriceAttestation* _add = _internal_add_price_attestations();
  // @@protoc_insertion_point(field_add:injective.oracle.v1beta1.MsgRelayPythPrices.price_attestations)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::oracle::v1beta1::PriceAttestation >&
MsgRelayPythPrices::price_attestations() const {
  // @@protoc_insertion_point(field_list:injective.oracle.v1beta1.MsgRelayPythPrices.price_attestations)
  return _internal_price_attestations();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::oracle::v1beta1::PriceAttestation>&
MsgRelayPythPrices::_internal_price_attestations() const {
  return _impl_.price_attestations_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::oracle::v1beta1::PriceAttestation>*
MsgRelayPythPrices::_internal_mutable_price_attestations() {
  return &_impl_.price_attestations_;
}

// -------------------------------------------------------------------

// MsgRelayPythPricesResponse

// -------------------------------------------------------------------

// MsgUpdateParams

// string authority = 1 [json_name = "authority", (.cosmos_proto.scalar) = "cosmos.AddressString"];
inline void MsgUpdateParams::clear_authority() {
  _impl_.authority_.ClearToEmpty();
}
inline const std::string& MsgUpdateParams::authority() const {
  // @@protoc_insertion_point(field_get:injective.oracle.v1beta1.MsgUpdateParams.authority)
  return _internal_authority();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgUpdateParams::set_authority(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.authority_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.oracle.v1beta1.MsgUpdateParams.authority)
}
inline std::string* MsgUpdateParams::mutable_authority() {
  std::string* _s = _internal_mutable_authority();
  // @@protoc_insertion_point(field_mutable:injective.oracle.v1beta1.MsgUpdateParams.authority)
  return _s;
}
inline const std::string& MsgUpdateParams::_internal_authority() const {
  return _impl_.authority_.Get();
}
inline void MsgUpdateParams::_internal_set_authority(const std::string& value) {
  ;


  _impl_.authority_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgUpdateParams::_internal_mutable_authority() {
  ;
  return _impl_.authority_.Mutable( GetArenaForAllocation());
}
inline std::string* MsgUpdateParams::release_authority() {
  // @@protoc_insertion_point(field_release:injective.oracle.v1beta1.MsgUpdateParams.authority)
  return _impl_.authority_.Release();
}
inline void MsgUpdateParams::set_allocated_authority(std::string* value) {
  _impl_.authority_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.authority_.IsDefault()) {
          _impl_.authority_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.oracle.v1beta1.MsgUpdateParams.authority)
}

// .injective.oracle.v1beta1.Params params = 2 [json_name = "params", (.gogoproto.nullable) = false];
inline bool MsgUpdateParams::has_params() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.params_ != nullptr);
  return value;
}
inline const ::injective::oracle::v1beta1::Params& MsgUpdateParams::_internal_params() const {
  const ::injective::oracle::v1beta1::Params* p = _impl_.params_;
  return p != nullptr ? *p : reinterpret_cast<const ::injective::oracle::v1beta1::Params&>(
      ::injective::oracle::v1beta1::_Params_default_instance_);
}
inline const ::injective::oracle::v1beta1::Params& MsgUpdateParams::params() const {
  // @@protoc_insertion_point(field_get:injective.oracle.v1beta1.MsgUpdateParams.params)
  return _internal_params();
}
inline void MsgUpdateParams::unsafe_arena_set_allocated_params(
    ::injective::oracle::v1beta1::Params* params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.params_);
  }
  _impl_.params_ = params;
  if (params) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:injective.oracle.v1beta1.MsgUpdateParams.params)
}
inline ::injective::oracle::v1beta1::Params* MsgUpdateParams::release_params() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::injective::oracle::v1beta1::Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::injective::oracle::v1beta1::Params* MsgUpdateParams::unsafe_arena_release_params() {
  // @@protoc_insertion_point(field_release:injective.oracle.v1beta1.MsgUpdateParams.params)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::injective::oracle::v1beta1::Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
  return temp;
}
inline ::injective::oracle::v1beta1::Params* MsgUpdateParams::_internal_mutable_params() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.params_ == nullptr) {
    auto* p = CreateMaybeMessage<::injective::oracle::v1beta1::Params>(GetArenaForAllocation());
    _impl_.params_ = p;
  }
  return _impl_.params_;
}
inline ::injective::oracle::v1beta1::Params* MsgUpdateParams::mutable_params() {
  ::injective::oracle::v1beta1::Params* _msg = _internal_mutable_params();
  // @@protoc_insertion_point(field_mutable:injective.oracle.v1beta1.MsgUpdateParams.params)
  return _msg;
}
inline void MsgUpdateParams::set_allocated_params(::injective::oracle::v1beta1::Params* params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.params_);
  }
  if (params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(params));
    if (message_arena != submessage_arena) {
      params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, params, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.params_ = params;
  // @@protoc_insertion_point(field_set_allocated:injective.oracle.v1beta1.MsgUpdateParams.params)
}

// -------------------------------------------------------------------

// MsgUpdateParamsResponse

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1beta1
}  // namespace oracle
}  // namespace injective


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_injective_2foracle_2fv1beta1_2ftx_2eproto_2epb_2eh

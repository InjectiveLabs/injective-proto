// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: injective/oracle/v1beta1/tx.proto

#include "injective/oracle/v1beta1/tx.pb.h"
#include "injective/oracle/v1beta1/tx.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace injective {
namespace oracle {
namespace v1beta1 {

static const char* Msg_method_names[] = {
  "/injective.oracle.v1beta1.Msg/RelayProviderPrices",
  "/injective.oracle.v1beta1.Msg/RelayPriceFeedPrice",
  "/injective.oracle.v1beta1.Msg/RelayBandRates",
  "/injective.oracle.v1beta1.Msg/RequestBandIBCRates",
  "/injective.oracle.v1beta1.Msg/RelayCoinbaseMessages",
  "/injective.oracle.v1beta1.Msg/RelayPythPrices",
  "/injective.oracle.v1beta1.Msg/UpdateParams",
};

std::unique_ptr< Msg::Stub> Msg::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Msg::Stub> stub(new Msg::Stub(channel, options));
  return stub;
}

Msg::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_RelayProviderPrices_(Msg_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RelayPriceFeedPrice_(Msg_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RelayBandRates_(Msg_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RequestBandIBCRates_(Msg_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RelayCoinbaseMessages_(Msg_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RelayPythPrices_(Msg_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateParams_(Msg_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Msg::Stub::RelayProviderPrices(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::MsgRelayProviderPrices& request, ::injective::oracle::v1beta1::MsgRelayProviderPricesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::oracle::v1beta1::MsgRelayProviderPrices, ::injective::oracle::v1beta1::MsgRelayProviderPricesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RelayProviderPrices_, context, request, response);
}

void Msg::Stub::async::RelayProviderPrices(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::MsgRelayProviderPrices* request, ::injective::oracle::v1beta1::MsgRelayProviderPricesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::oracle::v1beta1::MsgRelayProviderPrices, ::injective::oracle::v1beta1::MsgRelayProviderPricesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RelayProviderPrices_, context, request, response, std::move(f));
}

void Msg::Stub::async::RelayProviderPrices(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::MsgRelayProviderPrices* request, ::injective::oracle::v1beta1::MsgRelayProviderPricesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RelayProviderPrices_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::MsgRelayProviderPricesResponse>* Msg::Stub::PrepareAsyncRelayProviderPricesRaw(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::MsgRelayProviderPrices& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::oracle::v1beta1::MsgRelayProviderPricesResponse, ::injective::oracle::v1beta1::MsgRelayProviderPrices, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RelayProviderPrices_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::MsgRelayProviderPricesResponse>* Msg::Stub::AsyncRelayProviderPricesRaw(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::MsgRelayProviderPrices& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRelayProviderPricesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Msg::Stub::RelayPriceFeedPrice(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::MsgRelayPriceFeedPrice& request, ::injective::oracle::v1beta1::MsgRelayPriceFeedPriceResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::oracle::v1beta1::MsgRelayPriceFeedPrice, ::injective::oracle::v1beta1::MsgRelayPriceFeedPriceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RelayPriceFeedPrice_, context, request, response);
}

void Msg::Stub::async::RelayPriceFeedPrice(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::MsgRelayPriceFeedPrice* request, ::injective::oracle::v1beta1::MsgRelayPriceFeedPriceResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::oracle::v1beta1::MsgRelayPriceFeedPrice, ::injective::oracle::v1beta1::MsgRelayPriceFeedPriceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RelayPriceFeedPrice_, context, request, response, std::move(f));
}

void Msg::Stub::async::RelayPriceFeedPrice(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::MsgRelayPriceFeedPrice* request, ::injective::oracle::v1beta1::MsgRelayPriceFeedPriceResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RelayPriceFeedPrice_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::MsgRelayPriceFeedPriceResponse>* Msg::Stub::PrepareAsyncRelayPriceFeedPriceRaw(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::MsgRelayPriceFeedPrice& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::oracle::v1beta1::MsgRelayPriceFeedPriceResponse, ::injective::oracle::v1beta1::MsgRelayPriceFeedPrice, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RelayPriceFeedPrice_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::MsgRelayPriceFeedPriceResponse>* Msg::Stub::AsyncRelayPriceFeedPriceRaw(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::MsgRelayPriceFeedPrice& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRelayPriceFeedPriceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Msg::Stub::RelayBandRates(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::MsgRelayBandRates& request, ::injective::oracle::v1beta1::MsgRelayBandRatesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::oracle::v1beta1::MsgRelayBandRates, ::injective::oracle::v1beta1::MsgRelayBandRatesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RelayBandRates_, context, request, response);
}

void Msg::Stub::async::RelayBandRates(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::MsgRelayBandRates* request, ::injective::oracle::v1beta1::MsgRelayBandRatesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::oracle::v1beta1::MsgRelayBandRates, ::injective::oracle::v1beta1::MsgRelayBandRatesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RelayBandRates_, context, request, response, std::move(f));
}

void Msg::Stub::async::RelayBandRates(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::MsgRelayBandRates* request, ::injective::oracle::v1beta1::MsgRelayBandRatesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RelayBandRates_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::MsgRelayBandRatesResponse>* Msg::Stub::PrepareAsyncRelayBandRatesRaw(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::MsgRelayBandRates& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::oracle::v1beta1::MsgRelayBandRatesResponse, ::injective::oracle::v1beta1::MsgRelayBandRates, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RelayBandRates_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::MsgRelayBandRatesResponse>* Msg::Stub::AsyncRelayBandRatesRaw(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::MsgRelayBandRates& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRelayBandRatesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Msg::Stub::RequestBandIBCRates(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::MsgRequestBandIBCRates& request, ::injective::oracle::v1beta1::MsgRequestBandIBCRatesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::oracle::v1beta1::MsgRequestBandIBCRates, ::injective::oracle::v1beta1::MsgRequestBandIBCRatesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RequestBandIBCRates_, context, request, response);
}

void Msg::Stub::async::RequestBandIBCRates(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::MsgRequestBandIBCRates* request, ::injective::oracle::v1beta1::MsgRequestBandIBCRatesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::oracle::v1beta1::MsgRequestBandIBCRates, ::injective::oracle::v1beta1::MsgRequestBandIBCRatesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RequestBandIBCRates_, context, request, response, std::move(f));
}

void Msg::Stub::async::RequestBandIBCRates(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::MsgRequestBandIBCRates* request, ::injective::oracle::v1beta1::MsgRequestBandIBCRatesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RequestBandIBCRates_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::MsgRequestBandIBCRatesResponse>* Msg::Stub::PrepareAsyncRequestBandIBCRatesRaw(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::MsgRequestBandIBCRates& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::oracle::v1beta1::MsgRequestBandIBCRatesResponse, ::injective::oracle::v1beta1::MsgRequestBandIBCRates, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RequestBandIBCRates_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::MsgRequestBandIBCRatesResponse>* Msg::Stub::AsyncRequestBandIBCRatesRaw(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::MsgRequestBandIBCRates& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRequestBandIBCRatesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Msg::Stub::RelayCoinbaseMessages(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::MsgRelayCoinbaseMessages& request, ::injective::oracle::v1beta1::MsgRelayCoinbaseMessagesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::oracle::v1beta1::MsgRelayCoinbaseMessages, ::injective::oracle::v1beta1::MsgRelayCoinbaseMessagesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RelayCoinbaseMessages_, context, request, response);
}

void Msg::Stub::async::RelayCoinbaseMessages(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::MsgRelayCoinbaseMessages* request, ::injective::oracle::v1beta1::MsgRelayCoinbaseMessagesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::oracle::v1beta1::MsgRelayCoinbaseMessages, ::injective::oracle::v1beta1::MsgRelayCoinbaseMessagesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RelayCoinbaseMessages_, context, request, response, std::move(f));
}

void Msg::Stub::async::RelayCoinbaseMessages(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::MsgRelayCoinbaseMessages* request, ::injective::oracle::v1beta1::MsgRelayCoinbaseMessagesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RelayCoinbaseMessages_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::MsgRelayCoinbaseMessagesResponse>* Msg::Stub::PrepareAsyncRelayCoinbaseMessagesRaw(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::MsgRelayCoinbaseMessages& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::oracle::v1beta1::MsgRelayCoinbaseMessagesResponse, ::injective::oracle::v1beta1::MsgRelayCoinbaseMessages, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RelayCoinbaseMessages_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::MsgRelayCoinbaseMessagesResponse>* Msg::Stub::AsyncRelayCoinbaseMessagesRaw(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::MsgRelayCoinbaseMessages& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRelayCoinbaseMessagesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Msg::Stub::RelayPythPrices(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::MsgRelayPythPrices& request, ::injective::oracle::v1beta1::MsgRelayPythPricesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::oracle::v1beta1::MsgRelayPythPrices, ::injective::oracle::v1beta1::MsgRelayPythPricesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RelayPythPrices_, context, request, response);
}

void Msg::Stub::async::RelayPythPrices(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::MsgRelayPythPrices* request, ::injective::oracle::v1beta1::MsgRelayPythPricesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::oracle::v1beta1::MsgRelayPythPrices, ::injective::oracle::v1beta1::MsgRelayPythPricesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RelayPythPrices_, context, request, response, std::move(f));
}

void Msg::Stub::async::RelayPythPrices(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::MsgRelayPythPrices* request, ::injective::oracle::v1beta1::MsgRelayPythPricesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RelayPythPrices_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::MsgRelayPythPricesResponse>* Msg::Stub::PrepareAsyncRelayPythPricesRaw(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::MsgRelayPythPrices& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::oracle::v1beta1::MsgRelayPythPricesResponse, ::injective::oracle::v1beta1::MsgRelayPythPrices, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RelayPythPrices_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::MsgRelayPythPricesResponse>* Msg::Stub::AsyncRelayPythPricesRaw(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::MsgRelayPythPrices& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRelayPythPricesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Msg::Stub::UpdateParams(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::MsgUpdateParams& request, ::injective::oracle::v1beta1::MsgUpdateParamsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::oracle::v1beta1::MsgUpdateParams, ::injective::oracle::v1beta1::MsgUpdateParamsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateParams_, context, request, response);
}

void Msg::Stub::async::UpdateParams(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::MsgUpdateParams* request, ::injective::oracle::v1beta1::MsgUpdateParamsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::oracle::v1beta1::MsgUpdateParams, ::injective::oracle::v1beta1::MsgUpdateParamsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateParams_, context, request, response, std::move(f));
}

void Msg::Stub::async::UpdateParams(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::MsgUpdateParams* request, ::injective::oracle::v1beta1::MsgUpdateParamsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateParams_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::MsgUpdateParamsResponse>* Msg::Stub::PrepareAsyncUpdateParamsRaw(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::MsgUpdateParams& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::oracle::v1beta1::MsgUpdateParamsResponse, ::injective::oracle::v1beta1::MsgUpdateParams, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateParams_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::MsgUpdateParamsResponse>* Msg::Stub::AsyncUpdateParamsRaw(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::MsgUpdateParams& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateParamsRaw(context, request, cq);
  result->StartCall();
  return result;
}

Msg::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Msg_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Msg::Service, ::injective::oracle::v1beta1::MsgRelayProviderPrices, ::injective::oracle::v1beta1::MsgRelayProviderPricesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Msg::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::oracle::v1beta1::MsgRelayProviderPrices* req,
             ::injective::oracle::v1beta1::MsgRelayProviderPricesResponse* resp) {
               return service->RelayProviderPrices(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Msg_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Msg::Service, ::injective::oracle::v1beta1::MsgRelayPriceFeedPrice, ::injective::oracle::v1beta1::MsgRelayPriceFeedPriceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Msg::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::oracle::v1beta1::MsgRelayPriceFeedPrice* req,
             ::injective::oracle::v1beta1::MsgRelayPriceFeedPriceResponse* resp) {
               return service->RelayPriceFeedPrice(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Msg_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Msg::Service, ::injective::oracle::v1beta1::MsgRelayBandRates, ::injective::oracle::v1beta1::MsgRelayBandRatesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Msg::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::oracle::v1beta1::MsgRelayBandRates* req,
             ::injective::oracle::v1beta1::MsgRelayBandRatesResponse* resp) {
               return service->RelayBandRates(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Msg_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Msg::Service, ::injective::oracle::v1beta1::MsgRequestBandIBCRates, ::injective::oracle::v1beta1::MsgRequestBandIBCRatesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Msg::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::oracle::v1beta1::MsgRequestBandIBCRates* req,
             ::injective::oracle::v1beta1::MsgRequestBandIBCRatesResponse* resp) {
               return service->RequestBandIBCRates(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Msg_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Msg::Service, ::injective::oracle::v1beta1::MsgRelayCoinbaseMessages, ::injective::oracle::v1beta1::MsgRelayCoinbaseMessagesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Msg::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::oracle::v1beta1::MsgRelayCoinbaseMessages* req,
             ::injective::oracle::v1beta1::MsgRelayCoinbaseMessagesResponse* resp) {
               return service->RelayCoinbaseMessages(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Msg_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Msg::Service, ::injective::oracle::v1beta1::MsgRelayPythPrices, ::injective::oracle::v1beta1::MsgRelayPythPricesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Msg::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::oracle::v1beta1::MsgRelayPythPrices* req,
             ::injective::oracle::v1beta1::MsgRelayPythPricesResponse* resp) {
               return service->RelayPythPrices(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Msg_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Msg::Service, ::injective::oracle::v1beta1::MsgUpdateParams, ::injective::oracle::v1beta1::MsgUpdateParamsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Msg::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::oracle::v1beta1::MsgUpdateParams* req,
             ::injective::oracle::v1beta1::MsgUpdateParamsResponse* resp) {
               return service->UpdateParams(ctx, req, resp);
             }, this)));
}

Msg::Service::~Service() {
}

::grpc::Status Msg::Service::RelayProviderPrices(::grpc::ServerContext* context, const ::injective::oracle::v1beta1::MsgRelayProviderPrices* request, ::injective::oracle::v1beta1::MsgRelayProviderPricesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Msg::Service::RelayPriceFeedPrice(::grpc::ServerContext* context, const ::injective::oracle::v1beta1::MsgRelayPriceFeedPrice* request, ::injective::oracle::v1beta1::MsgRelayPriceFeedPriceResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Msg::Service::RelayBandRates(::grpc::ServerContext* context, const ::injective::oracle::v1beta1::MsgRelayBandRates* request, ::injective::oracle::v1beta1::MsgRelayBandRatesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Msg::Service::RequestBandIBCRates(::grpc::ServerContext* context, const ::injective::oracle::v1beta1::MsgRequestBandIBCRates* request, ::injective::oracle::v1beta1::MsgRequestBandIBCRatesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Msg::Service::RelayCoinbaseMessages(::grpc::ServerContext* context, const ::injective::oracle::v1beta1::MsgRelayCoinbaseMessages* request, ::injective::oracle::v1beta1::MsgRelayCoinbaseMessagesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Msg::Service::RelayPythPrices(::grpc::ServerContext* context, const ::injective::oracle::v1beta1::MsgRelayPythPrices* request, ::injective::oracle::v1beta1::MsgRelayPythPricesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Msg::Service::UpdateParams(::grpc::ServerContext* context, const ::injective::oracle::v1beta1::MsgUpdateParams* request, ::injective::oracle::v1beta1::MsgUpdateParamsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace injective
}  // namespace oracle
}  // namespace v1beta1


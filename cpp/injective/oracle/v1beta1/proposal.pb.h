// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: injective/oracle/v1beta1/proposal.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_injective_2foracle_2fv1beta1_2fproposal_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_injective_2foracle_2fv1beta1_2fproposal_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "cosmos/base/v1beta1/coin.pb.h"
#include "cosmos_proto/cosmos.pb.h"
#include "gogoproto/gogo.pb.h"
#include "injective/oracle/v1beta1/oracle.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_injective_2foracle_2fv1beta1_2fproposal_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_injective_2foracle_2fv1beta1_2fproposal_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_injective_2foracle_2fv1beta1_2fproposal_2eproto;
namespace injective {
namespace oracle {
namespace v1beta1 {
class AuthorizeBandOracleRequestProposal;
struct AuthorizeBandOracleRequestProposalDefaultTypeInternal;
extern AuthorizeBandOracleRequestProposalDefaultTypeInternal _AuthorizeBandOracleRequestProposal_default_instance_;
class EnableBandIBCProposal;
struct EnableBandIBCProposalDefaultTypeInternal;
extern EnableBandIBCProposalDefaultTypeInternal _EnableBandIBCProposal_default_instance_;
class GrantBandOraclePrivilegeProposal;
struct GrantBandOraclePrivilegeProposalDefaultTypeInternal;
extern GrantBandOraclePrivilegeProposalDefaultTypeInternal _GrantBandOraclePrivilegeProposal_default_instance_;
class GrantPriceFeederPrivilegeProposal;
struct GrantPriceFeederPrivilegeProposalDefaultTypeInternal;
extern GrantPriceFeederPrivilegeProposalDefaultTypeInternal _GrantPriceFeederPrivilegeProposal_default_instance_;
class GrantProviderPrivilegeProposal;
struct GrantProviderPrivilegeProposalDefaultTypeInternal;
extern GrantProviderPrivilegeProposalDefaultTypeInternal _GrantProviderPrivilegeProposal_default_instance_;
class RevokeBandOraclePrivilegeProposal;
struct RevokeBandOraclePrivilegeProposalDefaultTypeInternal;
extern RevokeBandOraclePrivilegeProposalDefaultTypeInternal _RevokeBandOraclePrivilegeProposal_default_instance_;
class RevokePriceFeederPrivilegeProposal;
struct RevokePriceFeederPrivilegeProposalDefaultTypeInternal;
extern RevokePriceFeederPrivilegeProposalDefaultTypeInternal _RevokePriceFeederPrivilegeProposal_default_instance_;
class RevokeProviderPrivilegeProposal;
struct RevokeProviderPrivilegeProposalDefaultTypeInternal;
extern RevokeProviderPrivilegeProposalDefaultTypeInternal _RevokeProviderPrivilegeProposal_default_instance_;
class UpdateBandOracleRequestProposal;
struct UpdateBandOracleRequestProposalDefaultTypeInternal;
extern UpdateBandOracleRequestProposalDefaultTypeInternal _UpdateBandOracleRequestProposal_default_instance_;
}  // namespace v1beta1
}  // namespace oracle
}  // namespace injective
PROTOBUF_NAMESPACE_OPEN
template <>
::injective::oracle::v1beta1::AuthorizeBandOracleRequestProposal* Arena::CreateMaybeMessage<::injective::oracle::v1beta1::AuthorizeBandOracleRequestProposal>(Arena*);
template <>
::injective::oracle::v1beta1::EnableBandIBCProposal* Arena::CreateMaybeMessage<::injective::oracle::v1beta1::EnableBandIBCProposal>(Arena*);
template <>
::injective::oracle::v1beta1::GrantBandOraclePrivilegeProposal* Arena::CreateMaybeMessage<::injective::oracle::v1beta1::GrantBandOraclePrivilegeProposal>(Arena*);
template <>
::injective::oracle::v1beta1::GrantPriceFeederPrivilegeProposal* Arena::CreateMaybeMessage<::injective::oracle::v1beta1::GrantPriceFeederPrivilegeProposal>(Arena*);
template <>
::injective::oracle::v1beta1::GrantProviderPrivilegeProposal* Arena::CreateMaybeMessage<::injective::oracle::v1beta1::GrantProviderPrivilegeProposal>(Arena*);
template <>
::injective::oracle::v1beta1::RevokeBandOraclePrivilegeProposal* Arena::CreateMaybeMessage<::injective::oracle::v1beta1::RevokeBandOraclePrivilegeProposal>(Arena*);
template <>
::injective::oracle::v1beta1::RevokePriceFeederPrivilegeProposal* Arena::CreateMaybeMessage<::injective::oracle::v1beta1::RevokePriceFeederPrivilegeProposal>(Arena*);
template <>
::injective::oracle::v1beta1::RevokeProviderPrivilegeProposal* Arena::CreateMaybeMessage<::injective::oracle::v1beta1::RevokeProviderPrivilegeProposal>(Arena*);
template <>
::injective::oracle::v1beta1::UpdateBandOracleRequestProposal* Arena::CreateMaybeMessage<::injective::oracle::v1beta1::UpdateBandOracleRequestProposal>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace injective {
namespace oracle {
namespace v1beta1 {

// ===================================================================


// -------------------------------------------------------------------

class GrantBandOraclePrivilegeProposal final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.oracle.v1beta1.GrantBandOraclePrivilegeProposal) */ {
 public:
  inline GrantBandOraclePrivilegeProposal() : GrantBandOraclePrivilegeProposal(nullptr) {}
  ~GrantBandOraclePrivilegeProposal() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GrantBandOraclePrivilegeProposal(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GrantBandOraclePrivilegeProposal(const GrantBandOraclePrivilegeProposal& from);
  GrantBandOraclePrivilegeProposal(GrantBandOraclePrivilegeProposal&& from) noexcept
    : GrantBandOraclePrivilegeProposal() {
    *this = ::std::move(from);
  }

  inline GrantBandOraclePrivilegeProposal& operator=(const GrantBandOraclePrivilegeProposal& from) {
    CopyFrom(from);
    return *this;
  }
  inline GrantBandOraclePrivilegeProposal& operator=(GrantBandOraclePrivilegeProposal&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GrantBandOraclePrivilegeProposal& default_instance() {
    return *internal_default_instance();
  }
  static inline const GrantBandOraclePrivilegeProposal* internal_default_instance() {
    return reinterpret_cast<const GrantBandOraclePrivilegeProposal*>(
               &_GrantBandOraclePrivilegeProposal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GrantBandOraclePrivilegeProposal& a, GrantBandOraclePrivilegeProposal& b) {
    a.Swap(&b);
  }
  inline void Swap(GrantBandOraclePrivilegeProposal* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GrantBandOraclePrivilegeProposal* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GrantBandOraclePrivilegeProposal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GrantBandOraclePrivilegeProposal>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GrantBandOraclePrivilegeProposal& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GrantBandOraclePrivilegeProposal& from) {
    GrantBandOraclePrivilegeProposal::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GrantBandOraclePrivilegeProposal* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.oracle.v1beta1.GrantBandOraclePrivilegeProposal";
  }
  protected:
  explicit GrantBandOraclePrivilegeProposal(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRelayersFieldNumber = 3,
    kTitleFieldNumber = 1,
    kDescriptionFieldNumber = 2,
  };
  // repeated string relayers = 3 [json_name = "relayers"];
  int relayers_size() const;
  private:
  int _internal_relayers_size() const;

  public:
  void clear_relayers() ;
  const std::string& relayers(int index) const;
  std::string* mutable_relayers(int index);
  void set_relayers(int index, const std::string& value);
  void set_relayers(int index, std::string&& value);
  void set_relayers(int index, const char* value);
  void set_relayers(int index, const char* value, std::size_t size);
  void set_relayers(int index, absl::string_view value);
  std::string* add_relayers();
  void add_relayers(const std::string& value);
  void add_relayers(std::string&& value);
  void add_relayers(const char* value);
  void add_relayers(const char* value, std::size_t size);
  void add_relayers(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& relayers() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_relayers();

  private:
  const std::string& _internal_relayers(int index) const;
  std::string* _internal_add_relayers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_relayers() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_relayers();

  public:
  // string title = 1 [json_name = "title"];
  void clear_title() ;
  const std::string& title() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_title(Arg_&& arg, Args_... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* ptr);

  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(
      const std::string& value);
  std::string* _internal_mutable_title();

  public:
  // string description = 2 [json_name = "description"];
  void clear_description() ;
  const std::string& description() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_description(Arg_&& arg, Args_... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* ptr);

  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(
      const std::string& value);
  std::string* _internal_mutable_description();

  public:
  // @@protoc_insertion_point(class_scope:injective.oracle.v1beta1.GrantBandOraclePrivilegeProposal)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> relayers_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2foracle_2fv1beta1_2fproposal_2eproto;
};// -------------------------------------------------------------------

class RevokeBandOraclePrivilegeProposal final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.oracle.v1beta1.RevokeBandOraclePrivilegeProposal) */ {
 public:
  inline RevokeBandOraclePrivilegeProposal() : RevokeBandOraclePrivilegeProposal(nullptr) {}
  ~RevokeBandOraclePrivilegeProposal() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR RevokeBandOraclePrivilegeProposal(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RevokeBandOraclePrivilegeProposal(const RevokeBandOraclePrivilegeProposal& from);
  RevokeBandOraclePrivilegeProposal(RevokeBandOraclePrivilegeProposal&& from) noexcept
    : RevokeBandOraclePrivilegeProposal() {
    *this = ::std::move(from);
  }

  inline RevokeBandOraclePrivilegeProposal& operator=(const RevokeBandOraclePrivilegeProposal& from) {
    CopyFrom(from);
    return *this;
  }
  inline RevokeBandOraclePrivilegeProposal& operator=(RevokeBandOraclePrivilegeProposal&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RevokeBandOraclePrivilegeProposal& default_instance() {
    return *internal_default_instance();
  }
  static inline const RevokeBandOraclePrivilegeProposal* internal_default_instance() {
    return reinterpret_cast<const RevokeBandOraclePrivilegeProposal*>(
               &_RevokeBandOraclePrivilegeProposal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RevokeBandOraclePrivilegeProposal& a, RevokeBandOraclePrivilegeProposal& b) {
    a.Swap(&b);
  }
  inline void Swap(RevokeBandOraclePrivilegeProposal* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RevokeBandOraclePrivilegeProposal* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RevokeBandOraclePrivilegeProposal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RevokeBandOraclePrivilegeProposal>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RevokeBandOraclePrivilegeProposal& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RevokeBandOraclePrivilegeProposal& from) {
    RevokeBandOraclePrivilegeProposal::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RevokeBandOraclePrivilegeProposal* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.oracle.v1beta1.RevokeBandOraclePrivilegeProposal";
  }
  protected:
  explicit RevokeBandOraclePrivilegeProposal(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRelayersFieldNumber = 3,
    kTitleFieldNumber = 1,
    kDescriptionFieldNumber = 2,
  };
  // repeated string relayers = 3 [json_name = "relayers"];
  int relayers_size() const;
  private:
  int _internal_relayers_size() const;

  public:
  void clear_relayers() ;
  const std::string& relayers(int index) const;
  std::string* mutable_relayers(int index);
  void set_relayers(int index, const std::string& value);
  void set_relayers(int index, std::string&& value);
  void set_relayers(int index, const char* value);
  void set_relayers(int index, const char* value, std::size_t size);
  void set_relayers(int index, absl::string_view value);
  std::string* add_relayers();
  void add_relayers(const std::string& value);
  void add_relayers(std::string&& value);
  void add_relayers(const char* value);
  void add_relayers(const char* value, std::size_t size);
  void add_relayers(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& relayers() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_relayers();

  private:
  const std::string& _internal_relayers(int index) const;
  std::string* _internal_add_relayers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_relayers() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_relayers();

  public:
  // string title = 1 [json_name = "title"];
  void clear_title() ;
  const std::string& title() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_title(Arg_&& arg, Args_... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* ptr);

  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(
      const std::string& value);
  std::string* _internal_mutable_title();

  public:
  // string description = 2 [json_name = "description"];
  void clear_description() ;
  const std::string& description() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_description(Arg_&& arg, Args_... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* ptr);

  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(
      const std::string& value);
  std::string* _internal_mutable_description();

  public:
  // @@protoc_insertion_point(class_scope:injective.oracle.v1beta1.RevokeBandOraclePrivilegeProposal)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> relayers_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2foracle_2fv1beta1_2fproposal_2eproto;
};// -------------------------------------------------------------------

class GrantPriceFeederPrivilegeProposal final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.oracle.v1beta1.GrantPriceFeederPrivilegeProposal) */ {
 public:
  inline GrantPriceFeederPrivilegeProposal() : GrantPriceFeederPrivilegeProposal(nullptr) {}
  ~GrantPriceFeederPrivilegeProposal() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GrantPriceFeederPrivilegeProposal(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GrantPriceFeederPrivilegeProposal(const GrantPriceFeederPrivilegeProposal& from);
  GrantPriceFeederPrivilegeProposal(GrantPriceFeederPrivilegeProposal&& from) noexcept
    : GrantPriceFeederPrivilegeProposal() {
    *this = ::std::move(from);
  }

  inline GrantPriceFeederPrivilegeProposal& operator=(const GrantPriceFeederPrivilegeProposal& from) {
    CopyFrom(from);
    return *this;
  }
  inline GrantPriceFeederPrivilegeProposal& operator=(GrantPriceFeederPrivilegeProposal&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GrantPriceFeederPrivilegeProposal& default_instance() {
    return *internal_default_instance();
  }
  static inline const GrantPriceFeederPrivilegeProposal* internal_default_instance() {
    return reinterpret_cast<const GrantPriceFeederPrivilegeProposal*>(
               &_GrantPriceFeederPrivilegeProposal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GrantPriceFeederPrivilegeProposal& a, GrantPriceFeederPrivilegeProposal& b) {
    a.Swap(&b);
  }
  inline void Swap(GrantPriceFeederPrivilegeProposal* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GrantPriceFeederPrivilegeProposal* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GrantPriceFeederPrivilegeProposal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GrantPriceFeederPrivilegeProposal>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GrantPriceFeederPrivilegeProposal& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GrantPriceFeederPrivilegeProposal& from) {
    GrantPriceFeederPrivilegeProposal::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GrantPriceFeederPrivilegeProposal* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.oracle.v1beta1.GrantPriceFeederPrivilegeProposal";
  }
  protected:
  explicit GrantPriceFeederPrivilegeProposal(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRelayersFieldNumber = 5,
    kTitleFieldNumber = 1,
    kDescriptionFieldNumber = 2,
    kBaseFieldNumber = 3,
    kQuoteFieldNumber = 4,
  };
  // repeated string relayers = 5 [json_name = "relayers"];
  int relayers_size() const;
  private:
  int _internal_relayers_size() const;

  public:
  void clear_relayers() ;
  const std::string& relayers(int index) const;
  std::string* mutable_relayers(int index);
  void set_relayers(int index, const std::string& value);
  void set_relayers(int index, std::string&& value);
  void set_relayers(int index, const char* value);
  void set_relayers(int index, const char* value, std::size_t size);
  void set_relayers(int index, absl::string_view value);
  std::string* add_relayers();
  void add_relayers(const std::string& value);
  void add_relayers(std::string&& value);
  void add_relayers(const char* value);
  void add_relayers(const char* value, std::size_t size);
  void add_relayers(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& relayers() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_relayers();

  private:
  const std::string& _internal_relayers(int index) const;
  std::string* _internal_add_relayers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_relayers() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_relayers();

  public:
  // string title = 1 [json_name = "title"];
  void clear_title() ;
  const std::string& title() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_title(Arg_&& arg, Args_... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* ptr);

  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(
      const std::string& value);
  std::string* _internal_mutable_title();

  public:
  // string description = 2 [json_name = "description"];
  void clear_description() ;
  const std::string& description() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_description(Arg_&& arg, Args_... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* ptr);

  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(
      const std::string& value);
  std::string* _internal_mutable_description();

  public:
  // string base = 3 [json_name = "base"];
  void clear_base() ;
  const std::string& base() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_base(Arg_&& arg, Args_... args);
  std::string* mutable_base();
  PROTOBUF_NODISCARD std::string* release_base();
  void set_allocated_base(std::string* ptr);

  private:
  const std::string& _internal_base() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_base(
      const std::string& value);
  std::string* _internal_mutable_base();

  public:
  // string quote = 4 [json_name = "quote"];
  void clear_quote() ;
  const std::string& quote() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_quote(Arg_&& arg, Args_... args);
  std::string* mutable_quote();
  PROTOBUF_NODISCARD std::string* release_quote();
  void set_allocated_quote(std::string* ptr);

  private:
  const std::string& _internal_quote() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_quote(
      const std::string& value);
  std::string* _internal_mutable_quote();

  public:
  // @@protoc_insertion_point(class_scope:injective.oracle.v1beta1.GrantPriceFeederPrivilegeProposal)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> relayers_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr base_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr quote_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2foracle_2fv1beta1_2fproposal_2eproto;
};// -------------------------------------------------------------------

class GrantProviderPrivilegeProposal final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.oracle.v1beta1.GrantProviderPrivilegeProposal) */ {
 public:
  inline GrantProviderPrivilegeProposal() : GrantProviderPrivilegeProposal(nullptr) {}
  ~GrantProviderPrivilegeProposal() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GrantProviderPrivilegeProposal(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GrantProviderPrivilegeProposal(const GrantProviderPrivilegeProposal& from);
  GrantProviderPrivilegeProposal(GrantProviderPrivilegeProposal&& from) noexcept
    : GrantProviderPrivilegeProposal() {
    *this = ::std::move(from);
  }

  inline GrantProviderPrivilegeProposal& operator=(const GrantProviderPrivilegeProposal& from) {
    CopyFrom(from);
    return *this;
  }
  inline GrantProviderPrivilegeProposal& operator=(GrantProviderPrivilegeProposal&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GrantProviderPrivilegeProposal& default_instance() {
    return *internal_default_instance();
  }
  static inline const GrantProviderPrivilegeProposal* internal_default_instance() {
    return reinterpret_cast<const GrantProviderPrivilegeProposal*>(
               &_GrantProviderPrivilegeProposal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GrantProviderPrivilegeProposal& a, GrantProviderPrivilegeProposal& b) {
    a.Swap(&b);
  }
  inline void Swap(GrantProviderPrivilegeProposal* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GrantProviderPrivilegeProposal* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GrantProviderPrivilegeProposal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GrantProviderPrivilegeProposal>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GrantProviderPrivilegeProposal& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GrantProviderPrivilegeProposal& from) {
    GrantProviderPrivilegeProposal::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GrantProviderPrivilegeProposal* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.oracle.v1beta1.GrantProviderPrivilegeProposal";
  }
  protected:
  explicit GrantProviderPrivilegeProposal(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRelayersFieldNumber = 4,
    kTitleFieldNumber = 1,
    kDescriptionFieldNumber = 2,
    kProviderFieldNumber = 3,
  };
  // repeated string relayers = 4 [json_name = "relayers"];
  int relayers_size() const;
  private:
  int _internal_relayers_size() const;

  public:
  void clear_relayers() ;
  const std::string& relayers(int index) const;
  std::string* mutable_relayers(int index);
  void set_relayers(int index, const std::string& value);
  void set_relayers(int index, std::string&& value);
  void set_relayers(int index, const char* value);
  void set_relayers(int index, const char* value, std::size_t size);
  void set_relayers(int index, absl::string_view value);
  std::string* add_relayers();
  void add_relayers(const std::string& value);
  void add_relayers(std::string&& value);
  void add_relayers(const char* value);
  void add_relayers(const char* value, std::size_t size);
  void add_relayers(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& relayers() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_relayers();

  private:
  const std::string& _internal_relayers(int index) const;
  std::string* _internal_add_relayers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_relayers() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_relayers();

  public:
  // string title = 1 [json_name = "title"];
  void clear_title() ;
  const std::string& title() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_title(Arg_&& arg, Args_... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* ptr);

  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(
      const std::string& value);
  std::string* _internal_mutable_title();

  public:
  // string description = 2 [json_name = "description"];
  void clear_description() ;
  const std::string& description() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_description(Arg_&& arg, Args_... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* ptr);

  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(
      const std::string& value);
  std::string* _internal_mutable_description();

  public:
  // string provider = 3 [json_name = "provider"];
  void clear_provider() ;
  const std::string& provider() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_provider(Arg_&& arg, Args_... args);
  std::string* mutable_provider();
  PROTOBUF_NODISCARD std::string* release_provider();
  void set_allocated_provider(std::string* ptr);

  private:
  const std::string& _internal_provider() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_provider(
      const std::string& value);
  std::string* _internal_mutable_provider();

  public:
  // @@protoc_insertion_point(class_scope:injective.oracle.v1beta1.GrantProviderPrivilegeProposal)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> relayers_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr provider_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2foracle_2fv1beta1_2fproposal_2eproto;
};// -------------------------------------------------------------------

class RevokeProviderPrivilegeProposal final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.oracle.v1beta1.RevokeProviderPrivilegeProposal) */ {
 public:
  inline RevokeProviderPrivilegeProposal() : RevokeProviderPrivilegeProposal(nullptr) {}
  ~RevokeProviderPrivilegeProposal() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR RevokeProviderPrivilegeProposal(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RevokeProviderPrivilegeProposal(const RevokeProviderPrivilegeProposal& from);
  RevokeProviderPrivilegeProposal(RevokeProviderPrivilegeProposal&& from) noexcept
    : RevokeProviderPrivilegeProposal() {
    *this = ::std::move(from);
  }

  inline RevokeProviderPrivilegeProposal& operator=(const RevokeProviderPrivilegeProposal& from) {
    CopyFrom(from);
    return *this;
  }
  inline RevokeProviderPrivilegeProposal& operator=(RevokeProviderPrivilegeProposal&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RevokeProviderPrivilegeProposal& default_instance() {
    return *internal_default_instance();
  }
  static inline const RevokeProviderPrivilegeProposal* internal_default_instance() {
    return reinterpret_cast<const RevokeProviderPrivilegeProposal*>(
               &_RevokeProviderPrivilegeProposal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(RevokeProviderPrivilegeProposal& a, RevokeProviderPrivilegeProposal& b) {
    a.Swap(&b);
  }
  inline void Swap(RevokeProviderPrivilegeProposal* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RevokeProviderPrivilegeProposal* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RevokeProviderPrivilegeProposal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RevokeProviderPrivilegeProposal>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RevokeProviderPrivilegeProposal& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RevokeProviderPrivilegeProposal& from) {
    RevokeProviderPrivilegeProposal::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RevokeProviderPrivilegeProposal* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.oracle.v1beta1.RevokeProviderPrivilegeProposal";
  }
  protected:
  explicit RevokeProviderPrivilegeProposal(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRelayersFieldNumber = 5,
    kTitleFieldNumber = 1,
    kDescriptionFieldNumber = 2,
    kProviderFieldNumber = 3,
  };
  // repeated string relayers = 5 [json_name = "relayers"];
  int relayers_size() const;
  private:
  int _internal_relayers_size() const;

  public:
  void clear_relayers() ;
  const std::string& relayers(int index) const;
  std::string* mutable_relayers(int index);
  void set_relayers(int index, const std::string& value);
  void set_relayers(int index, std::string&& value);
  void set_relayers(int index, const char* value);
  void set_relayers(int index, const char* value, std::size_t size);
  void set_relayers(int index, absl::string_view value);
  std::string* add_relayers();
  void add_relayers(const std::string& value);
  void add_relayers(std::string&& value);
  void add_relayers(const char* value);
  void add_relayers(const char* value, std::size_t size);
  void add_relayers(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& relayers() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_relayers();

  private:
  const std::string& _internal_relayers(int index) const;
  std::string* _internal_add_relayers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_relayers() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_relayers();

  public:
  // string title = 1 [json_name = "title"];
  void clear_title() ;
  const std::string& title() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_title(Arg_&& arg, Args_... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* ptr);

  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(
      const std::string& value);
  std::string* _internal_mutable_title();

  public:
  // string description = 2 [json_name = "description"];
  void clear_description() ;
  const std::string& description() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_description(Arg_&& arg, Args_... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* ptr);

  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(
      const std::string& value);
  std::string* _internal_mutable_description();

  public:
  // string provider = 3 [json_name = "provider"];
  void clear_provider() ;
  const std::string& provider() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_provider(Arg_&& arg, Args_... args);
  std::string* mutable_provider();
  PROTOBUF_NODISCARD std::string* release_provider();
  void set_allocated_provider(std::string* ptr);

  private:
  const std::string& _internal_provider() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_provider(
      const std::string& value);
  std::string* _internal_mutable_provider();

  public:
  // @@protoc_insertion_point(class_scope:injective.oracle.v1beta1.RevokeProviderPrivilegeProposal)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> relayers_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr provider_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2foracle_2fv1beta1_2fproposal_2eproto;
};// -------------------------------------------------------------------

class RevokePriceFeederPrivilegeProposal final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.oracle.v1beta1.RevokePriceFeederPrivilegeProposal) */ {
 public:
  inline RevokePriceFeederPrivilegeProposal() : RevokePriceFeederPrivilegeProposal(nullptr) {}
  ~RevokePriceFeederPrivilegeProposal() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR RevokePriceFeederPrivilegeProposal(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RevokePriceFeederPrivilegeProposal(const RevokePriceFeederPrivilegeProposal& from);
  RevokePriceFeederPrivilegeProposal(RevokePriceFeederPrivilegeProposal&& from) noexcept
    : RevokePriceFeederPrivilegeProposal() {
    *this = ::std::move(from);
  }

  inline RevokePriceFeederPrivilegeProposal& operator=(const RevokePriceFeederPrivilegeProposal& from) {
    CopyFrom(from);
    return *this;
  }
  inline RevokePriceFeederPrivilegeProposal& operator=(RevokePriceFeederPrivilegeProposal&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RevokePriceFeederPrivilegeProposal& default_instance() {
    return *internal_default_instance();
  }
  static inline const RevokePriceFeederPrivilegeProposal* internal_default_instance() {
    return reinterpret_cast<const RevokePriceFeederPrivilegeProposal*>(
               &_RevokePriceFeederPrivilegeProposal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(RevokePriceFeederPrivilegeProposal& a, RevokePriceFeederPrivilegeProposal& b) {
    a.Swap(&b);
  }
  inline void Swap(RevokePriceFeederPrivilegeProposal* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RevokePriceFeederPrivilegeProposal* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RevokePriceFeederPrivilegeProposal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RevokePriceFeederPrivilegeProposal>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RevokePriceFeederPrivilegeProposal& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RevokePriceFeederPrivilegeProposal& from) {
    RevokePriceFeederPrivilegeProposal::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RevokePriceFeederPrivilegeProposal* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.oracle.v1beta1.RevokePriceFeederPrivilegeProposal";
  }
  protected:
  explicit RevokePriceFeederPrivilegeProposal(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRelayersFieldNumber = 5,
    kTitleFieldNumber = 1,
    kDescriptionFieldNumber = 2,
    kBaseFieldNumber = 3,
    kQuoteFieldNumber = 4,
  };
  // repeated string relayers = 5 [json_name = "relayers"];
  int relayers_size() const;
  private:
  int _internal_relayers_size() const;

  public:
  void clear_relayers() ;
  const std::string& relayers(int index) const;
  std::string* mutable_relayers(int index);
  void set_relayers(int index, const std::string& value);
  void set_relayers(int index, std::string&& value);
  void set_relayers(int index, const char* value);
  void set_relayers(int index, const char* value, std::size_t size);
  void set_relayers(int index, absl::string_view value);
  std::string* add_relayers();
  void add_relayers(const std::string& value);
  void add_relayers(std::string&& value);
  void add_relayers(const char* value);
  void add_relayers(const char* value, std::size_t size);
  void add_relayers(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& relayers() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_relayers();

  private:
  const std::string& _internal_relayers(int index) const;
  std::string* _internal_add_relayers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_relayers() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_relayers();

  public:
  // string title = 1 [json_name = "title"];
  void clear_title() ;
  const std::string& title() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_title(Arg_&& arg, Args_... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* ptr);

  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(
      const std::string& value);
  std::string* _internal_mutable_title();

  public:
  // string description = 2 [json_name = "description"];
  void clear_description() ;
  const std::string& description() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_description(Arg_&& arg, Args_... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* ptr);

  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(
      const std::string& value);
  std::string* _internal_mutable_description();

  public:
  // string base = 3 [json_name = "base"];
  void clear_base() ;
  const std::string& base() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_base(Arg_&& arg, Args_... args);
  std::string* mutable_base();
  PROTOBUF_NODISCARD std::string* release_base();
  void set_allocated_base(std::string* ptr);

  private:
  const std::string& _internal_base() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_base(
      const std::string& value);
  std::string* _internal_mutable_base();

  public:
  // string quote = 4 [json_name = "quote"];
  void clear_quote() ;
  const std::string& quote() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_quote(Arg_&& arg, Args_... args);
  std::string* mutable_quote();
  PROTOBUF_NODISCARD std::string* release_quote();
  void set_allocated_quote(std::string* ptr);

  private:
  const std::string& _internal_quote() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_quote(
      const std::string& value);
  std::string* _internal_mutable_quote();

  public:
  // @@protoc_insertion_point(class_scope:injective.oracle.v1beta1.RevokePriceFeederPrivilegeProposal)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> relayers_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr base_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr quote_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2foracle_2fv1beta1_2fproposal_2eproto;
};// -------------------------------------------------------------------

class AuthorizeBandOracleRequestProposal final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.oracle.v1beta1.AuthorizeBandOracleRequestProposal) */ {
 public:
  inline AuthorizeBandOracleRequestProposal() : AuthorizeBandOracleRequestProposal(nullptr) {}
  ~AuthorizeBandOracleRequestProposal() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR AuthorizeBandOracleRequestProposal(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AuthorizeBandOracleRequestProposal(const AuthorizeBandOracleRequestProposal& from);
  AuthorizeBandOracleRequestProposal(AuthorizeBandOracleRequestProposal&& from) noexcept
    : AuthorizeBandOracleRequestProposal() {
    *this = ::std::move(from);
  }

  inline AuthorizeBandOracleRequestProposal& operator=(const AuthorizeBandOracleRequestProposal& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthorizeBandOracleRequestProposal& operator=(AuthorizeBandOracleRequestProposal&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AuthorizeBandOracleRequestProposal& default_instance() {
    return *internal_default_instance();
  }
  static inline const AuthorizeBandOracleRequestProposal* internal_default_instance() {
    return reinterpret_cast<const AuthorizeBandOracleRequestProposal*>(
               &_AuthorizeBandOracleRequestProposal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(AuthorizeBandOracleRequestProposal& a, AuthorizeBandOracleRequestProposal& b) {
    a.Swap(&b);
  }
  inline void Swap(AuthorizeBandOracleRequestProposal* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AuthorizeBandOracleRequestProposal* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AuthorizeBandOracleRequestProposal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AuthorizeBandOracleRequestProposal>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AuthorizeBandOracleRequestProposal& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AuthorizeBandOracleRequestProposal& from) {
    AuthorizeBandOracleRequestProposal::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthorizeBandOracleRequestProposal* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.oracle.v1beta1.AuthorizeBandOracleRequestProposal";
  }
  protected:
  explicit AuthorizeBandOracleRequestProposal(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTitleFieldNumber = 1,
    kDescriptionFieldNumber = 2,
    kRequestFieldNumber = 3,
  };
  // string title = 1 [json_name = "title"];
  void clear_title() ;
  const std::string& title() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_title(Arg_&& arg, Args_... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* ptr);

  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(
      const std::string& value);
  std::string* _internal_mutable_title();

  public:
  // string description = 2 [json_name = "description"];
  void clear_description() ;
  const std::string& description() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_description(Arg_&& arg, Args_... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* ptr);

  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(
      const std::string& value);
  std::string* _internal_mutable_description();

  public:
  // .injective.oracle.v1beta1.BandOracleRequest request = 3 [json_name = "request", (.gogoproto.nullable) = false];
  bool has_request() const;
  void clear_request() ;
  const ::injective::oracle::v1beta1::BandOracleRequest& request() const;
  PROTOBUF_NODISCARD ::injective::oracle::v1beta1::BandOracleRequest* release_request();
  ::injective::oracle::v1beta1::BandOracleRequest* mutable_request();
  void set_allocated_request(::injective::oracle::v1beta1::BandOracleRequest* request);
  private:
  const ::injective::oracle::v1beta1::BandOracleRequest& _internal_request() const;
  ::injective::oracle::v1beta1::BandOracleRequest* _internal_mutable_request();
  public:
  void unsafe_arena_set_allocated_request(
      ::injective::oracle::v1beta1::BandOracleRequest* request);
  ::injective::oracle::v1beta1::BandOracleRequest* unsafe_arena_release_request();
  // @@protoc_insertion_point(class_scope:injective.oracle.v1beta1.AuthorizeBandOracleRequestProposal)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
    ::injective::oracle::v1beta1::BandOracleRequest* request_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2foracle_2fv1beta1_2fproposal_2eproto;
};// -------------------------------------------------------------------

class UpdateBandOracleRequestProposal final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.oracle.v1beta1.UpdateBandOracleRequestProposal) */ {
 public:
  inline UpdateBandOracleRequestProposal() : UpdateBandOracleRequestProposal(nullptr) {}
  ~UpdateBandOracleRequestProposal() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR UpdateBandOracleRequestProposal(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateBandOracleRequestProposal(const UpdateBandOracleRequestProposal& from);
  UpdateBandOracleRequestProposal(UpdateBandOracleRequestProposal&& from) noexcept
    : UpdateBandOracleRequestProposal() {
    *this = ::std::move(from);
  }

  inline UpdateBandOracleRequestProposal& operator=(const UpdateBandOracleRequestProposal& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateBandOracleRequestProposal& operator=(UpdateBandOracleRequestProposal&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateBandOracleRequestProposal& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateBandOracleRequestProposal* internal_default_instance() {
    return reinterpret_cast<const UpdateBandOracleRequestProposal*>(
               &_UpdateBandOracleRequestProposal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(UpdateBandOracleRequestProposal& a, UpdateBandOracleRequestProposal& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateBandOracleRequestProposal* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateBandOracleRequestProposal* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateBandOracleRequestProposal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateBandOracleRequestProposal>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateBandOracleRequestProposal& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UpdateBandOracleRequestProposal& from) {
    UpdateBandOracleRequestProposal::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateBandOracleRequestProposal* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.oracle.v1beta1.UpdateBandOracleRequestProposal";
  }
  protected:
  explicit UpdateBandOracleRequestProposal(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeleteRequestIdsFieldNumber = 3,
    kTitleFieldNumber = 1,
    kDescriptionFieldNumber = 2,
    kUpdateOracleRequestFieldNumber = 4,
  };
  // repeated uint64 delete_request_ids = 3 [json_name = "deleteRequestIds"];
  int delete_request_ids_size() const;
  private:
  int _internal_delete_request_ids_size() const;

  public:
  void clear_delete_request_ids() ;
  ::uint64_t delete_request_ids(int index) const;
  void set_delete_request_ids(int index, ::uint64_t value);
  void add_delete_request_ids(::uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>& delete_request_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>* mutable_delete_request_ids();

  private:
  ::uint64_t _internal_delete_request_ids(int index) const;
  void _internal_add_delete_request_ids(::uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>& _internal_delete_request_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>* _internal_mutable_delete_request_ids();

  public:
  // string title = 1 [json_name = "title"];
  void clear_title() ;
  const std::string& title() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_title(Arg_&& arg, Args_... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* ptr);

  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(
      const std::string& value);
  std::string* _internal_mutable_title();

  public:
  // string description = 2 [json_name = "description"];
  void clear_description() ;
  const std::string& description() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_description(Arg_&& arg, Args_... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* ptr);

  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(
      const std::string& value);
  std::string* _internal_mutable_description();

  public:
  // .injective.oracle.v1beta1.BandOracleRequest update_oracle_request = 4 [json_name = "updateOracleRequest"];
  bool has_update_oracle_request() const;
  void clear_update_oracle_request() ;
  const ::injective::oracle::v1beta1::BandOracleRequest& update_oracle_request() const;
  PROTOBUF_NODISCARD ::injective::oracle::v1beta1::BandOracleRequest* release_update_oracle_request();
  ::injective::oracle::v1beta1::BandOracleRequest* mutable_update_oracle_request();
  void set_allocated_update_oracle_request(::injective::oracle::v1beta1::BandOracleRequest* update_oracle_request);
  private:
  const ::injective::oracle::v1beta1::BandOracleRequest& _internal_update_oracle_request() const;
  ::injective::oracle::v1beta1::BandOracleRequest* _internal_mutable_update_oracle_request();
  public:
  void unsafe_arena_set_allocated_update_oracle_request(
      ::injective::oracle::v1beta1::BandOracleRequest* update_oracle_request);
  ::injective::oracle::v1beta1::BandOracleRequest* unsafe_arena_release_update_oracle_request();
  // @@protoc_insertion_point(class_scope:injective.oracle.v1beta1.UpdateBandOracleRequestProposal)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t> delete_request_ids_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _delete_request_ids_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
    ::injective::oracle::v1beta1::BandOracleRequest* update_oracle_request_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2foracle_2fv1beta1_2fproposal_2eproto;
};// -------------------------------------------------------------------

class EnableBandIBCProposal final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.oracle.v1beta1.EnableBandIBCProposal) */ {
 public:
  inline EnableBandIBCProposal() : EnableBandIBCProposal(nullptr) {}
  ~EnableBandIBCProposal() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR EnableBandIBCProposal(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EnableBandIBCProposal(const EnableBandIBCProposal& from);
  EnableBandIBCProposal(EnableBandIBCProposal&& from) noexcept
    : EnableBandIBCProposal() {
    *this = ::std::move(from);
  }

  inline EnableBandIBCProposal& operator=(const EnableBandIBCProposal& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnableBandIBCProposal& operator=(EnableBandIBCProposal&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EnableBandIBCProposal& default_instance() {
    return *internal_default_instance();
  }
  static inline const EnableBandIBCProposal* internal_default_instance() {
    return reinterpret_cast<const EnableBandIBCProposal*>(
               &_EnableBandIBCProposal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(EnableBandIBCProposal& a, EnableBandIBCProposal& b) {
    a.Swap(&b);
  }
  inline void Swap(EnableBandIBCProposal* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnableBandIBCProposal* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EnableBandIBCProposal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EnableBandIBCProposal>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EnableBandIBCProposal& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EnableBandIBCProposal& from) {
    EnableBandIBCProposal::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnableBandIBCProposal* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.oracle.v1beta1.EnableBandIBCProposal";
  }
  protected:
  explicit EnableBandIBCProposal(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTitleFieldNumber = 1,
    kDescriptionFieldNumber = 2,
    kBandIbcParamsFieldNumber = 3,
  };
  // string title = 1 [json_name = "title"];
  void clear_title() ;
  const std::string& title() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_title(Arg_&& arg, Args_... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* ptr);

  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(
      const std::string& value);
  std::string* _internal_mutable_title();

  public:
  // string description = 2 [json_name = "description"];
  void clear_description() ;
  const std::string& description() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_description(Arg_&& arg, Args_... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* ptr);

  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(
      const std::string& value);
  std::string* _internal_mutable_description();

  public:
  // .injective.oracle.v1beta1.BandIBCParams band_ibc_params = 3 [json_name = "bandIbcParams", (.gogoproto.nullable) = false];
  bool has_band_ibc_params() const;
  void clear_band_ibc_params() ;
  const ::injective::oracle::v1beta1::BandIBCParams& band_ibc_params() const;
  PROTOBUF_NODISCARD ::injective::oracle::v1beta1::BandIBCParams* release_band_ibc_params();
  ::injective::oracle::v1beta1::BandIBCParams* mutable_band_ibc_params();
  void set_allocated_band_ibc_params(::injective::oracle::v1beta1::BandIBCParams* band_ibc_params);
  private:
  const ::injective::oracle::v1beta1::BandIBCParams& _internal_band_ibc_params() const;
  ::injective::oracle::v1beta1::BandIBCParams* _internal_mutable_band_ibc_params();
  public:
  void unsafe_arena_set_allocated_band_ibc_params(
      ::injective::oracle::v1beta1::BandIBCParams* band_ibc_params);
  ::injective::oracle::v1beta1::BandIBCParams* unsafe_arena_release_band_ibc_params();
  // @@protoc_insertion_point(class_scope:injective.oracle.v1beta1.EnableBandIBCProposal)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
    ::injective::oracle::v1beta1::BandIBCParams* band_ibc_params_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2foracle_2fv1beta1_2fproposal_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// GrantBandOraclePrivilegeProposal

// string title = 1 [json_name = "title"];
inline void GrantBandOraclePrivilegeProposal::clear_title() {
  _impl_.title_.ClearToEmpty();
}
inline const std::string& GrantBandOraclePrivilegeProposal::title() const {
  // @@protoc_insertion_point(field_get:injective.oracle.v1beta1.GrantBandOraclePrivilegeProposal.title)
  return _internal_title();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GrantBandOraclePrivilegeProposal::set_title(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.title_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.oracle.v1beta1.GrantBandOraclePrivilegeProposal.title)
}
inline std::string* GrantBandOraclePrivilegeProposal::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:injective.oracle.v1beta1.GrantBandOraclePrivilegeProposal.title)
  return _s;
}
inline const std::string& GrantBandOraclePrivilegeProposal::_internal_title() const {
  return _impl_.title_.Get();
}
inline void GrantBandOraclePrivilegeProposal::_internal_set_title(const std::string& value) {
  ;


  _impl_.title_.Set(value, GetArenaForAllocation());
}
inline std::string* GrantBandOraclePrivilegeProposal::_internal_mutable_title() {
  ;
  return _impl_.title_.Mutable( GetArenaForAllocation());
}
inline std::string* GrantBandOraclePrivilegeProposal::release_title() {
  // @@protoc_insertion_point(field_release:injective.oracle.v1beta1.GrantBandOraclePrivilegeProposal.title)
  return _impl_.title_.Release();
}
inline void GrantBandOraclePrivilegeProposal::set_allocated_title(std::string* value) {
  _impl_.title_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.title_.IsDefault()) {
          _impl_.title_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.oracle.v1beta1.GrantBandOraclePrivilegeProposal.title)
}

// string description = 2 [json_name = "description"];
inline void GrantBandOraclePrivilegeProposal::clear_description() {
  _impl_.description_.ClearToEmpty();
}
inline const std::string& GrantBandOraclePrivilegeProposal::description() const {
  // @@protoc_insertion_point(field_get:injective.oracle.v1beta1.GrantBandOraclePrivilegeProposal.description)
  return _internal_description();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GrantBandOraclePrivilegeProposal::set_description(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.description_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.oracle.v1beta1.GrantBandOraclePrivilegeProposal.description)
}
inline std::string* GrantBandOraclePrivilegeProposal::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:injective.oracle.v1beta1.GrantBandOraclePrivilegeProposal.description)
  return _s;
}
inline const std::string& GrantBandOraclePrivilegeProposal::_internal_description() const {
  return _impl_.description_.Get();
}
inline void GrantBandOraclePrivilegeProposal::_internal_set_description(const std::string& value) {
  ;


  _impl_.description_.Set(value, GetArenaForAllocation());
}
inline std::string* GrantBandOraclePrivilegeProposal::_internal_mutable_description() {
  ;
  return _impl_.description_.Mutable( GetArenaForAllocation());
}
inline std::string* GrantBandOraclePrivilegeProposal::release_description() {
  // @@protoc_insertion_point(field_release:injective.oracle.v1beta1.GrantBandOraclePrivilegeProposal.description)
  return _impl_.description_.Release();
}
inline void GrantBandOraclePrivilegeProposal::set_allocated_description(std::string* value) {
  _impl_.description_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.description_.IsDefault()) {
          _impl_.description_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.oracle.v1beta1.GrantBandOraclePrivilegeProposal.description)
}

// repeated string relayers = 3 [json_name = "relayers"];
inline int GrantBandOraclePrivilegeProposal::_internal_relayers_size() const {
  return _impl_.relayers_.size();
}
inline int GrantBandOraclePrivilegeProposal::relayers_size() const {
  return _internal_relayers_size();
}
inline void GrantBandOraclePrivilegeProposal::clear_relayers() {
  _internal_mutable_relayers()->Clear();
}
inline std::string* GrantBandOraclePrivilegeProposal::add_relayers() {
  std::string* _s = _internal_add_relayers();
  // @@protoc_insertion_point(field_add_mutable:injective.oracle.v1beta1.GrantBandOraclePrivilegeProposal.relayers)
  return _s;
}
inline const std::string& GrantBandOraclePrivilegeProposal::relayers(int index) const {
  // @@protoc_insertion_point(field_get:injective.oracle.v1beta1.GrantBandOraclePrivilegeProposal.relayers)
  return _internal_relayers(index);
}
inline std::string* GrantBandOraclePrivilegeProposal::mutable_relayers(int index) {
  // @@protoc_insertion_point(field_mutable:injective.oracle.v1beta1.GrantBandOraclePrivilegeProposal.relayers)
  return _internal_mutable_relayers()->Mutable(index);
}
inline void GrantBandOraclePrivilegeProposal::set_relayers(int index, const std::string& value) {
  _internal_mutable_relayers()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:injective.oracle.v1beta1.GrantBandOraclePrivilegeProposal.relayers)
}
inline void GrantBandOraclePrivilegeProposal::set_relayers(int index, std::string&& value) {
  _internal_mutable_relayers()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:injective.oracle.v1beta1.GrantBandOraclePrivilegeProposal.relayers)
}
inline void GrantBandOraclePrivilegeProposal::set_relayers(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_relayers()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:injective.oracle.v1beta1.GrantBandOraclePrivilegeProposal.relayers)
}
inline void GrantBandOraclePrivilegeProposal::set_relayers(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_relayers()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:injective.oracle.v1beta1.GrantBandOraclePrivilegeProposal.relayers)
}
inline void GrantBandOraclePrivilegeProposal::set_relayers(int index, absl::string_view value) {
  _internal_mutable_relayers()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:injective.oracle.v1beta1.GrantBandOraclePrivilegeProposal.relayers)
}
inline void GrantBandOraclePrivilegeProposal::add_relayers(const std::string& value) {
  _internal_mutable_relayers()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:injective.oracle.v1beta1.GrantBandOraclePrivilegeProposal.relayers)
}
inline void GrantBandOraclePrivilegeProposal::add_relayers(std::string&& value) {
  _internal_mutable_relayers()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:injective.oracle.v1beta1.GrantBandOraclePrivilegeProposal.relayers)
}
inline void GrantBandOraclePrivilegeProposal::add_relayers(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_relayers()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:injective.oracle.v1beta1.GrantBandOraclePrivilegeProposal.relayers)
}
inline void GrantBandOraclePrivilegeProposal::add_relayers(const char* value, std::size_t size) {
  _internal_mutable_relayers()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:injective.oracle.v1beta1.GrantBandOraclePrivilegeProposal.relayers)
}
inline void GrantBandOraclePrivilegeProposal::add_relayers(absl::string_view value) {
  _internal_mutable_relayers()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:injective.oracle.v1beta1.GrantBandOraclePrivilegeProposal.relayers)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GrantBandOraclePrivilegeProposal::relayers() const {
  // @@protoc_insertion_point(field_list:injective.oracle.v1beta1.GrantBandOraclePrivilegeProposal.relayers)
  return _internal_relayers();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* GrantBandOraclePrivilegeProposal::mutable_relayers() {
  // @@protoc_insertion_point(field_mutable_list:injective.oracle.v1beta1.GrantBandOraclePrivilegeProposal.relayers)
  return _internal_mutable_relayers();
}
inline const std::string& GrantBandOraclePrivilegeProposal::_internal_relayers(int index) const {
  return _internal_relayers().Get(index);
}
inline std::string* GrantBandOraclePrivilegeProposal::_internal_add_relayers() {
  return _internal_mutable_relayers()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GrantBandOraclePrivilegeProposal::_internal_relayers() const {
  return _impl_.relayers_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GrantBandOraclePrivilegeProposal::_internal_mutable_relayers() {
  return &_impl_.relayers_;
}

// -------------------------------------------------------------------

// RevokeBandOraclePrivilegeProposal

// string title = 1 [json_name = "title"];
inline void RevokeBandOraclePrivilegeProposal::clear_title() {
  _impl_.title_.ClearToEmpty();
}
inline const std::string& RevokeBandOraclePrivilegeProposal::title() const {
  // @@protoc_insertion_point(field_get:injective.oracle.v1beta1.RevokeBandOraclePrivilegeProposal.title)
  return _internal_title();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RevokeBandOraclePrivilegeProposal::set_title(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.title_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.oracle.v1beta1.RevokeBandOraclePrivilegeProposal.title)
}
inline std::string* RevokeBandOraclePrivilegeProposal::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:injective.oracle.v1beta1.RevokeBandOraclePrivilegeProposal.title)
  return _s;
}
inline const std::string& RevokeBandOraclePrivilegeProposal::_internal_title() const {
  return _impl_.title_.Get();
}
inline void RevokeBandOraclePrivilegeProposal::_internal_set_title(const std::string& value) {
  ;


  _impl_.title_.Set(value, GetArenaForAllocation());
}
inline std::string* RevokeBandOraclePrivilegeProposal::_internal_mutable_title() {
  ;
  return _impl_.title_.Mutable( GetArenaForAllocation());
}
inline std::string* RevokeBandOraclePrivilegeProposal::release_title() {
  // @@protoc_insertion_point(field_release:injective.oracle.v1beta1.RevokeBandOraclePrivilegeProposal.title)
  return _impl_.title_.Release();
}
inline void RevokeBandOraclePrivilegeProposal::set_allocated_title(std::string* value) {
  _impl_.title_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.title_.IsDefault()) {
          _impl_.title_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.oracle.v1beta1.RevokeBandOraclePrivilegeProposal.title)
}

// string description = 2 [json_name = "description"];
inline void RevokeBandOraclePrivilegeProposal::clear_description() {
  _impl_.description_.ClearToEmpty();
}
inline const std::string& RevokeBandOraclePrivilegeProposal::description() const {
  // @@protoc_insertion_point(field_get:injective.oracle.v1beta1.RevokeBandOraclePrivilegeProposal.description)
  return _internal_description();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RevokeBandOraclePrivilegeProposal::set_description(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.description_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.oracle.v1beta1.RevokeBandOraclePrivilegeProposal.description)
}
inline std::string* RevokeBandOraclePrivilegeProposal::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:injective.oracle.v1beta1.RevokeBandOraclePrivilegeProposal.description)
  return _s;
}
inline const std::string& RevokeBandOraclePrivilegeProposal::_internal_description() const {
  return _impl_.description_.Get();
}
inline void RevokeBandOraclePrivilegeProposal::_internal_set_description(const std::string& value) {
  ;


  _impl_.description_.Set(value, GetArenaForAllocation());
}
inline std::string* RevokeBandOraclePrivilegeProposal::_internal_mutable_description() {
  ;
  return _impl_.description_.Mutable( GetArenaForAllocation());
}
inline std::string* RevokeBandOraclePrivilegeProposal::release_description() {
  // @@protoc_insertion_point(field_release:injective.oracle.v1beta1.RevokeBandOraclePrivilegeProposal.description)
  return _impl_.description_.Release();
}
inline void RevokeBandOraclePrivilegeProposal::set_allocated_description(std::string* value) {
  _impl_.description_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.description_.IsDefault()) {
          _impl_.description_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.oracle.v1beta1.RevokeBandOraclePrivilegeProposal.description)
}

// repeated string relayers = 3 [json_name = "relayers"];
inline int RevokeBandOraclePrivilegeProposal::_internal_relayers_size() const {
  return _impl_.relayers_.size();
}
inline int RevokeBandOraclePrivilegeProposal::relayers_size() const {
  return _internal_relayers_size();
}
inline void RevokeBandOraclePrivilegeProposal::clear_relayers() {
  _internal_mutable_relayers()->Clear();
}
inline std::string* RevokeBandOraclePrivilegeProposal::add_relayers() {
  std::string* _s = _internal_add_relayers();
  // @@protoc_insertion_point(field_add_mutable:injective.oracle.v1beta1.RevokeBandOraclePrivilegeProposal.relayers)
  return _s;
}
inline const std::string& RevokeBandOraclePrivilegeProposal::relayers(int index) const {
  // @@protoc_insertion_point(field_get:injective.oracle.v1beta1.RevokeBandOraclePrivilegeProposal.relayers)
  return _internal_relayers(index);
}
inline std::string* RevokeBandOraclePrivilegeProposal::mutable_relayers(int index) {
  // @@protoc_insertion_point(field_mutable:injective.oracle.v1beta1.RevokeBandOraclePrivilegeProposal.relayers)
  return _internal_mutable_relayers()->Mutable(index);
}
inline void RevokeBandOraclePrivilegeProposal::set_relayers(int index, const std::string& value) {
  _internal_mutable_relayers()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:injective.oracle.v1beta1.RevokeBandOraclePrivilegeProposal.relayers)
}
inline void RevokeBandOraclePrivilegeProposal::set_relayers(int index, std::string&& value) {
  _internal_mutable_relayers()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:injective.oracle.v1beta1.RevokeBandOraclePrivilegeProposal.relayers)
}
inline void RevokeBandOraclePrivilegeProposal::set_relayers(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_relayers()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:injective.oracle.v1beta1.RevokeBandOraclePrivilegeProposal.relayers)
}
inline void RevokeBandOraclePrivilegeProposal::set_relayers(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_relayers()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:injective.oracle.v1beta1.RevokeBandOraclePrivilegeProposal.relayers)
}
inline void RevokeBandOraclePrivilegeProposal::set_relayers(int index, absl::string_view value) {
  _internal_mutable_relayers()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:injective.oracle.v1beta1.RevokeBandOraclePrivilegeProposal.relayers)
}
inline void RevokeBandOraclePrivilegeProposal::add_relayers(const std::string& value) {
  _internal_mutable_relayers()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:injective.oracle.v1beta1.RevokeBandOraclePrivilegeProposal.relayers)
}
inline void RevokeBandOraclePrivilegeProposal::add_relayers(std::string&& value) {
  _internal_mutable_relayers()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:injective.oracle.v1beta1.RevokeBandOraclePrivilegeProposal.relayers)
}
inline void RevokeBandOraclePrivilegeProposal::add_relayers(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_relayers()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:injective.oracle.v1beta1.RevokeBandOraclePrivilegeProposal.relayers)
}
inline void RevokeBandOraclePrivilegeProposal::add_relayers(const char* value, std::size_t size) {
  _internal_mutable_relayers()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:injective.oracle.v1beta1.RevokeBandOraclePrivilegeProposal.relayers)
}
inline void RevokeBandOraclePrivilegeProposal::add_relayers(absl::string_view value) {
  _internal_mutable_relayers()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:injective.oracle.v1beta1.RevokeBandOraclePrivilegeProposal.relayers)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
RevokeBandOraclePrivilegeProposal::relayers() const {
  // @@protoc_insertion_point(field_list:injective.oracle.v1beta1.RevokeBandOraclePrivilegeProposal.relayers)
  return _internal_relayers();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* RevokeBandOraclePrivilegeProposal::mutable_relayers() {
  // @@protoc_insertion_point(field_mutable_list:injective.oracle.v1beta1.RevokeBandOraclePrivilegeProposal.relayers)
  return _internal_mutable_relayers();
}
inline const std::string& RevokeBandOraclePrivilegeProposal::_internal_relayers(int index) const {
  return _internal_relayers().Get(index);
}
inline std::string* RevokeBandOraclePrivilegeProposal::_internal_add_relayers() {
  return _internal_mutable_relayers()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
RevokeBandOraclePrivilegeProposal::_internal_relayers() const {
  return _impl_.relayers_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
RevokeBandOraclePrivilegeProposal::_internal_mutable_relayers() {
  return &_impl_.relayers_;
}

// -------------------------------------------------------------------

// GrantPriceFeederPrivilegeProposal

// string title = 1 [json_name = "title"];
inline void GrantPriceFeederPrivilegeProposal::clear_title() {
  _impl_.title_.ClearToEmpty();
}
inline const std::string& GrantPriceFeederPrivilegeProposal::title() const {
  // @@protoc_insertion_point(field_get:injective.oracle.v1beta1.GrantPriceFeederPrivilegeProposal.title)
  return _internal_title();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GrantPriceFeederPrivilegeProposal::set_title(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.title_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.oracle.v1beta1.GrantPriceFeederPrivilegeProposal.title)
}
inline std::string* GrantPriceFeederPrivilegeProposal::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:injective.oracle.v1beta1.GrantPriceFeederPrivilegeProposal.title)
  return _s;
}
inline const std::string& GrantPriceFeederPrivilegeProposal::_internal_title() const {
  return _impl_.title_.Get();
}
inline void GrantPriceFeederPrivilegeProposal::_internal_set_title(const std::string& value) {
  ;


  _impl_.title_.Set(value, GetArenaForAllocation());
}
inline std::string* GrantPriceFeederPrivilegeProposal::_internal_mutable_title() {
  ;
  return _impl_.title_.Mutable( GetArenaForAllocation());
}
inline std::string* GrantPriceFeederPrivilegeProposal::release_title() {
  // @@protoc_insertion_point(field_release:injective.oracle.v1beta1.GrantPriceFeederPrivilegeProposal.title)
  return _impl_.title_.Release();
}
inline void GrantPriceFeederPrivilegeProposal::set_allocated_title(std::string* value) {
  _impl_.title_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.title_.IsDefault()) {
          _impl_.title_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.oracle.v1beta1.GrantPriceFeederPrivilegeProposal.title)
}

// string description = 2 [json_name = "description"];
inline void GrantPriceFeederPrivilegeProposal::clear_description() {
  _impl_.description_.ClearToEmpty();
}
inline const std::string& GrantPriceFeederPrivilegeProposal::description() const {
  // @@protoc_insertion_point(field_get:injective.oracle.v1beta1.GrantPriceFeederPrivilegeProposal.description)
  return _internal_description();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GrantPriceFeederPrivilegeProposal::set_description(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.description_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.oracle.v1beta1.GrantPriceFeederPrivilegeProposal.description)
}
inline std::string* GrantPriceFeederPrivilegeProposal::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:injective.oracle.v1beta1.GrantPriceFeederPrivilegeProposal.description)
  return _s;
}
inline const std::string& GrantPriceFeederPrivilegeProposal::_internal_description() const {
  return _impl_.description_.Get();
}
inline void GrantPriceFeederPrivilegeProposal::_internal_set_description(const std::string& value) {
  ;


  _impl_.description_.Set(value, GetArenaForAllocation());
}
inline std::string* GrantPriceFeederPrivilegeProposal::_internal_mutable_description() {
  ;
  return _impl_.description_.Mutable( GetArenaForAllocation());
}
inline std::string* GrantPriceFeederPrivilegeProposal::release_description() {
  // @@protoc_insertion_point(field_release:injective.oracle.v1beta1.GrantPriceFeederPrivilegeProposal.description)
  return _impl_.description_.Release();
}
inline void GrantPriceFeederPrivilegeProposal::set_allocated_description(std::string* value) {
  _impl_.description_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.description_.IsDefault()) {
          _impl_.description_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.oracle.v1beta1.GrantPriceFeederPrivilegeProposal.description)
}

// string base = 3 [json_name = "base"];
inline void GrantPriceFeederPrivilegeProposal::clear_base() {
  _impl_.base_.ClearToEmpty();
}
inline const std::string& GrantPriceFeederPrivilegeProposal::base() const {
  // @@protoc_insertion_point(field_get:injective.oracle.v1beta1.GrantPriceFeederPrivilegeProposal.base)
  return _internal_base();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GrantPriceFeederPrivilegeProposal::set_base(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.base_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.oracle.v1beta1.GrantPriceFeederPrivilegeProposal.base)
}
inline std::string* GrantPriceFeederPrivilegeProposal::mutable_base() {
  std::string* _s = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:injective.oracle.v1beta1.GrantPriceFeederPrivilegeProposal.base)
  return _s;
}
inline const std::string& GrantPriceFeederPrivilegeProposal::_internal_base() const {
  return _impl_.base_.Get();
}
inline void GrantPriceFeederPrivilegeProposal::_internal_set_base(const std::string& value) {
  ;


  _impl_.base_.Set(value, GetArenaForAllocation());
}
inline std::string* GrantPriceFeederPrivilegeProposal::_internal_mutable_base() {
  ;
  return _impl_.base_.Mutable( GetArenaForAllocation());
}
inline std::string* GrantPriceFeederPrivilegeProposal::release_base() {
  // @@protoc_insertion_point(field_release:injective.oracle.v1beta1.GrantPriceFeederPrivilegeProposal.base)
  return _impl_.base_.Release();
}
inline void GrantPriceFeederPrivilegeProposal::set_allocated_base(std::string* value) {
  _impl_.base_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.base_.IsDefault()) {
          _impl_.base_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.oracle.v1beta1.GrantPriceFeederPrivilegeProposal.base)
}

// string quote = 4 [json_name = "quote"];
inline void GrantPriceFeederPrivilegeProposal::clear_quote() {
  _impl_.quote_.ClearToEmpty();
}
inline const std::string& GrantPriceFeederPrivilegeProposal::quote() const {
  // @@protoc_insertion_point(field_get:injective.oracle.v1beta1.GrantPriceFeederPrivilegeProposal.quote)
  return _internal_quote();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GrantPriceFeederPrivilegeProposal::set_quote(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.quote_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.oracle.v1beta1.GrantPriceFeederPrivilegeProposal.quote)
}
inline std::string* GrantPriceFeederPrivilegeProposal::mutable_quote() {
  std::string* _s = _internal_mutable_quote();
  // @@protoc_insertion_point(field_mutable:injective.oracle.v1beta1.GrantPriceFeederPrivilegeProposal.quote)
  return _s;
}
inline const std::string& GrantPriceFeederPrivilegeProposal::_internal_quote() const {
  return _impl_.quote_.Get();
}
inline void GrantPriceFeederPrivilegeProposal::_internal_set_quote(const std::string& value) {
  ;


  _impl_.quote_.Set(value, GetArenaForAllocation());
}
inline std::string* GrantPriceFeederPrivilegeProposal::_internal_mutable_quote() {
  ;
  return _impl_.quote_.Mutable( GetArenaForAllocation());
}
inline std::string* GrantPriceFeederPrivilegeProposal::release_quote() {
  // @@protoc_insertion_point(field_release:injective.oracle.v1beta1.GrantPriceFeederPrivilegeProposal.quote)
  return _impl_.quote_.Release();
}
inline void GrantPriceFeederPrivilegeProposal::set_allocated_quote(std::string* value) {
  _impl_.quote_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.quote_.IsDefault()) {
          _impl_.quote_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.oracle.v1beta1.GrantPriceFeederPrivilegeProposal.quote)
}

// repeated string relayers = 5 [json_name = "relayers"];
inline int GrantPriceFeederPrivilegeProposal::_internal_relayers_size() const {
  return _impl_.relayers_.size();
}
inline int GrantPriceFeederPrivilegeProposal::relayers_size() const {
  return _internal_relayers_size();
}
inline void GrantPriceFeederPrivilegeProposal::clear_relayers() {
  _internal_mutable_relayers()->Clear();
}
inline std::string* GrantPriceFeederPrivilegeProposal::add_relayers() {
  std::string* _s = _internal_add_relayers();
  // @@protoc_insertion_point(field_add_mutable:injective.oracle.v1beta1.GrantPriceFeederPrivilegeProposal.relayers)
  return _s;
}
inline const std::string& GrantPriceFeederPrivilegeProposal::relayers(int index) const {
  // @@protoc_insertion_point(field_get:injective.oracle.v1beta1.GrantPriceFeederPrivilegeProposal.relayers)
  return _internal_relayers(index);
}
inline std::string* GrantPriceFeederPrivilegeProposal::mutable_relayers(int index) {
  // @@protoc_insertion_point(field_mutable:injective.oracle.v1beta1.GrantPriceFeederPrivilegeProposal.relayers)
  return _internal_mutable_relayers()->Mutable(index);
}
inline void GrantPriceFeederPrivilegeProposal::set_relayers(int index, const std::string& value) {
  _internal_mutable_relayers()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:injective.oracle.v1beta1.GrantPriceFeederPrivilegeProposal.relayers)
}
inline void GrantPriceFeederPrivilegeProposal::set_relayers(int index, std::string&& value) {
  _internal_mutable_relayers()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:injective.oracle.v1beta1.GrantPriceFeederPrivilegeProposal.relayers)
}
inline void GrantPriceFeederPrivilegeProposal::set_relayers(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_relayers()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:injective.oracle.v1beta1.GrantPriceFeederPrivilegeProposal.relayers)
}
inline void GrantPriceFeederPrivilegeProposal::set_relayers(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_relayers()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:injective.oracle.v1beta1.GrantPriceFeederPrivilegeProposal.relayers)
}
inline void GrantPriceFeederPrivilegeProposal::set_relayers(int index, absl::string_view value) {
  _internal_mutable_relayers()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:injective.oracle.v1beta1.GrantPriceFeederPrivilegeProposal.relayers)
}
inline void GrantPriceFeederPrivilegeProposal::add_relayers(const std::string& value) {
  _internal_mutable_relayers()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:injective.oracle.v1beta1.GrantPriceFeederPrivilegeProposal.relayers)
}
inline void GrantPriceFeederPrivilegeProposal::add_relayers(std::string&& value) {
  _internal_mutable_relayers()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:injective.oracle.v1beta1.GrantPriceFeederPrivilegeProposal.relayers)
}
inline void GrantPriceFeederPrivilegeProposal::add_relayers(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_relayers()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:injective.oracle.v1beta1.GrantPriceFeederPrivilegeProposal.relayers)
}
inline void GrantPriceFeederPrivilegeProposal::add_relayers(const char* value, std::size_t size) {
  _internal_mutable_relayers()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:injective.oracle.v1beta1.GrantPriceFeederPrivilegeProposal.relayers)
}
inline void GrantPriceFeederPrivilegeProposal::add_relayers(absl::string_view value) {
  _internal_mutable_relayers()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:injective.oracle.v1beta1.GrantPriceFeederPrivilegeProposal.relayers)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GrantPriceFeederPrivilegeProposal::relayers() const {
  // @@protoc_insertion_point(field_list:injective.oracle.v1beta1.GrantPriceFeederPrivilegeProposal.relayers)
  return _internal_relayers();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* GrantPriceFeederPrivilegeProposal::mutable_relayers() {
  // @@protoc_insertion_point(field_mutable_list:injective.oracle.v1beta1.GrantPriceFeederPrivilegeProposal.relayers)
  return _internal_mutable_relayers();
}
inline const std::string& GrantPriceFeederPrivilegeProposal::_internal_relayers(int index) const {
  return _internal_relayers().Get(index);
}
inline std::string* GrantPriceFeederPrivilegeProposal::_internal_add_relayers() {
  return _internal_mutable_relayers()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GrantPriceFeederPrivilegeProposal::_internal_relayers() const {
  return _impl_.relayers_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GrantPriceFeederPrivilegeProposal::_internal_mutable_relayers() {
  return &_impl_.relayers_;
}

// -------------------------------------------------------------------

// GrantProviderPrivilegeProposal

// string title = 1 [json_name = "title"];
inline void GrantProviderPrivilegeProposal::clear_title() {
  _impl_.title_.ClearToEmpty();
}
inline const std::string& GrantProviderPrivilegeProposal::title() const {
  // @@protoc_insertion_point(field_get:injective.oracle.v1beta1.GrantProviderPrivilegeProposal.title)
  return _internal_title();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GrantProviderPrivilegeProposal::set_title(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.title_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.oracle.v1beta1.GrantProviderPrivilegeProposal.title)
}
inline std::string* GrantProviderPrivilegeProposal::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:injective.oracle.v1beta1.GrantProviderPrivilegeProposal.title)
  return _s;
}
inline const std::string& GrantProviderPrivilegeProposal::_internal_title() const {
  return _impl_.title_.Get();
}
inline void GrantProviderPrivilegeProposal::_internal_set_title(const std::string& value) {
  ;


  _impl_.title_.Set(value, GetArenaForAllocation());
}
inline std::string* GrantProviderPrivilegeProposal::_internal_mutable_title() {
  ;
  return _impl_.title_.Mutable( GetArenaForAllocation());
}
inline std::string* GrantProviderPrivilegeProposal::release_title() {
  // @@protoc_insertion_point(field_release:injective.oracle.v1beta1.GrantProviderPrivilegeProposal.title)
  return _impl_.title_.Release();
}
inline void GrantProviderPrivilegeProposal::set_allocated_title(std::string* value) {
  _impl_.title_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.title_.IsDefault()) {
          _impl_.title_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.oracle.v1beta1.GrantProviderPrivilegeProposal.title)
}

// string description = 2 [json_name = "description"];
inline void GrantProviderPrivilegeProposal::clear_description() {
  _impl_.description_.ClearToEmpty();
}
inline const std::string& GrantProviderPrivilegeProposal::description() const {
  // @@protoc_insertion_point(field_get:injective.oracle.v1beta1.GrantProviderPrivilegeProposal.description)
  return _internal_description();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GrantProviderPrivilegeProposal::set_description(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.description_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.oracle.v1beta1.GrantProviderPrivilegeProposal.description)
}
inline std::string* GrantProviderPrivilegeProposal::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:injective.oracle.v1beta1.GrantProviderPrivilegeProposal.description)
  return _s;
}
inline const std::string& GrantProviderPrivilegeProposal::_internal_description() const {
  return _impl_.description_.Get();
}
inline void GrantProviderPrivilegeProposal::_internal_set_description(const std::string& value) {
  ;


  _impl_.description_.Set(value, GetArenaForAllocation());
}
inline std::string* GrantProviderPrivilegeProposal::_internal_mutable_description() {
  ;
  return _impl_.description_.Mutable( GetArenaForAllocation());
}
inline std::string* GrantProviderPrivilegeProposal::release_description() {
  // @@protoc_insertion_point(field_release:injective.oracle.v1beta1.GrantProviderPrivilegeProposal.description)
  return _impl_.description_.Release();
}
inline void GrantProviderPrivilegeProposal::set_allocated_description(std::string* value) {
  _impl_.description_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.description_.IsDefault()) {
          _impl_.description_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.oracle.v1beta1.GrantProviderPrivilegeProposal.description)
}

// string provider = 3 [json_name = "provider"];
inline void GrantProviderPrivilegeProposal::clear_provider() {
  _impl_.provider_.ClearToEmpty();
}
inline const std::string& GrantProviderPrivilegeProposal::provider() const {
  // @@protoc_insertion_point(field_get:injective.oracle.v1beta1.GrantProviderPrivilegeProposal.provider)
  return _internal_provider();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GrantProviderPrivilegeProposal::set_provider(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.provider_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.oracle.v1beta1.GrantProviderPrivilegeProposal.provider)
}
inline std::string* GrantProviderPrivilegeProposal::mutable_provider() {
  std::string* _s = _internal_mutable_provider();
  // @@protoc_insertion_point(field_mutable:injective.oracle.v1beta1.GrantProviderPrivilegeProposal.provider)
  return _s;
}
inline const std::string& GrantProviderPrivilegeProposal::_internal_provider() const {
  return _impl_.provider_.Get();
}
inline void GrantProviderPrivilegeProposal::_internal_set_provider(const std::string& value) {
  ;


  _impl_.provider_.Set(value, GetArenaForAllocation());
}
inline std::string* GrantProviderPrivilegeProposal::_internal_mutable_provider() {
  ;
  return _impl_.provider_.Mutable( GetArenaForAllocation());
}
inline std::string* GrantProviderPrivilegeProposal::release_provider() {
  // @@protoc_insertion_point(field_release:injective.oracle.v1beta1.GrantProviderPrivilegeProposal.provider)
  return _impl_.provider_.Release();
}
inline void GrantProviderPrivilegeProposal::set_allocated_provider(std::string* value) {
  _impl_.provider_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.provider_.IsDefault()) {
          _impl_.provider_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.oracle.v1beta1.GrantProviderPrivilegeProposal.provider)
}

// repeated string relayers = 4 [json_name = "relayers"];
inline int GrantProviderPrivilegeProposal::_internal_relayers_size() const {
  return _impl_.relayers_.size();
}
inline int GrantProviderPrivilegeProposal::relayers_size() const {
  return _internal_relayers_size();
}
inline void GrantProviderPrivilegeProposal::clear_relayers() {
  _internal_mutable_relayers()->Clear();
}
inline std::string* GrantProviderPrivilegeProposal::add_relayers() {
  std::string* _s = _internal_add_relayers();
  // @@protoc_insertion_point(field_add_mutable:injective.oracle.v1beta1.GrantProviderPrivilegeProposal.relayers)
  return _s;
}
inline const std::string& GrantProviderPrivilegeProposal::relayers(int index) const {
  // @@protoc_insertion_point(field_get:injective.oracle.v1beta1.GrantProviderPrivilegeProposal.relayers)
  return _internal_relayers(index);
}
inline std::string* GrantProviderPrivilegeProposal::mutable_relayers(int index) {
  // @@protoc_insertion_point(field_mutable:injective.oracle.v1beta1.GrantProviderPrivilegeProposal.relayers)
  return _internal_mutable_relayers()->Mutable(index);
}
inline void GrantProviderPrivilegeProposal::set_relayers(int index, const std::string& value) {
  _internal_mutable_relayers()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:injective.oracle.v1beta1.GrantProviderPrivilegeProposal.relayers)
}
inline void GrantProviderPrivilegeProposal::set_relayers(int index, std::string&& value) {
  _internal_mutable_relayers()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:injective.oracle.v1beta1.GrantProviderPrivilegeProposal.relayers)
}
inline void GrantProviderPrivilegeProposal::set_relayers(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_relayers()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:injective.oracle.v1beta1.GrantProviderPrivilegeProposal.relayers)
}
inline void GrantProviderPrivilegeProposal::set_relayers(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_relayers()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:injective.oracle.v1beta1.GrantProviderPrivilegeProposal.relayers)
}
inline void GrantProviderPrivilegeProposal::set_relayers(int index, absl::string_view value) {
  _internal_mutable_relayers()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:injective.oracle.v1beta1.GrantProviderPrivilegeProposal.relayers)
}
inline void GrantProviderPrivilegeProposal::add_relayers(const std::string& value) {
  _internal_mutable_relayers()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:injective.oracle.v1beta1.GrantProviderPrivilegeProposal.relayers)
}
inline void GrantProviderPrivilegeProposal::add_relayers(std::string&& value) {
  _internal_mutable_relayers()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:injective.oracle.v1beta1.GrantProviderPrivilegeProposal.relayers)
}
inline void GrantProviderPrivilegeProposal::add_relayers(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_relayers()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:injective.oracle.v1beta1.GrantProviderPrivilegeProposal.relayers)
}
inline void GrantProviderPrivilegeProposal::add_relayers(const char* value, std::size_t size) {
  _internal_mutable_relayers()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:injective.oracle.v1beta1.GrantProviderPrivilegeProposal.relayers)
}
inline void GrantProviderPrivilegeProposal::add_relayers(absl::string_view value) {
  _internal_mutable_relayers()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:injective.oracle.v1beta1.GrantProviderPrivilegeProposal.relayers)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GrantProviderPrivilegeProposal::relayers() const {
  // @@protoc_insertion_point(field_list:injective.oracle.v1beta1.GrantProviderPrivilegeProposal.relayers)
  return _internal_relayers();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* GrantProviderPrivilegeProposal::mutable_relayers() {
  // @@protoc_insertion_point(field_mutable_list:injective.oracle.v1beta1.GrantProviderPrivilegeProposal.relayers)
  return _internal_mutable_relayers();
}
inline const std::string& GrantProviderPrivilegeProposal::_internal_relayers(int index) const {
  return _internal_relayers().Get(index);
}
inline std::string* GrantProviderPrivilegeProposal::_internal_add_relayers() {
  return _internal_mutable_relayers()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GrantProviderPrivilegeProposal::_internal_relayers() const {
  return _impl_.relayers_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GrantProviderPrivilegeProposal::_internal_mutable_relayers() {
  return &_impl_.relayers_;
}

// -------------------------------------------------------------------

// RevokeProviderPrivilegeProposal

// string title = 1 [json_name = "title"];
inline void RevokeProviderPrivilegeProposal::clear_title() {
  _impl_.title_.ClearToEmpty();
}
inline const std::string& RevokeProviderPrivilegeProposal::title() const {
  // @@protoc_insertion_point(field_get:injective.oracle.v1beta1.RevokeProviderPrivilegeProposal.title)
  return _internal_title();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RevokeProviderPrivilegeProposal::set_title(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.title_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.oracle.v1beta1.RevokeProviderPrivilegeProposal.title)
}
inline std::string* RevokeProviderPrivilegeProposal::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:injective.oracle.v1beta1.RevokeProviderPrivilegeProposal.title)
  return _s;
}
inline const std::string& RevokeProviderPrivilegeProposal::_internal_title() const {
  return _impl_.title_.Get();
}
inline void RevokeProviderPrivilegeProposal::_internal_set_title(const std::string& value) {
  ;


  _impl_.title_.Set(value, GetArenaForAllocation());
}
inline std::string* RevokeProviderPrivilegeProposal::_internal_mutable_title() {
  ;
  return _impl_.title_.Mutable( GetArenaForAllocation());
}
inline std::string* RevokeProviderPrivilegeProposal::release_title() {
  // @@protoc_insertion_point(field_release:injective.oracle.v1beta1.RevokeProviderPrivilegeProposal.title)
  return _impl_.title_.Release();
}
inline void RevokeProviderPrivilegeProposal::set_allocated_title(std::string* value) {
  _impl_.title_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.title_.IsDefault()) {
          _impl_.title_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.oracle.v1beta1.RevokeProviderPrivilegeProposal.title)
}

// string description = 2 [json_name = "description"];
inline void RevokeProviderPrivilegeProposal::clear_description() {
  _impl_.description_.ClearToEmpty();
}
inline const std::string& RevokeProviderPrivilegeProposal::description() const {
  // @@protoc_insertion_point(field_get:injective.oracle.v1beta1.RevokeProviderPrivilegeProposal.description)
  return _internal_description();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RevokeProviderPrivilegeProposal::set_description(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.description_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.oracle.v1beta1.RevokeProviderPrivilegeProposal.description)
}
inline std::string* RevokeProviderPrivilegeProposal::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:injective.oracle.v1beta1.RevokeProviderPrivilegeProposal.description)
  return _s;
}
inline const std::string& RevokeProviderPrivilegeProposal::_internal_description() const {
  return _impl_.description_.Get();
}
inline void RevokeProviderPrivilegeProposal::_internal_set_description(const std::string& value) {
  ;


  _impl_.description_.Set(value, GetArenaForAllocation());
}
inline std::string* RevokeProviderPrivilegeProposal::_internal_mutable_description() {
  ;
  return _impl_.description_.Mutable( GetArenaForAllocation());
}
inline std::string* RevokeProviderPrivilegeProposal::release_description() {
  // @@protoc_insertion_point(field_release:injective.oracle.v1beta1.RevokeProviderPrivilegeProposal.description)
  return _impl_.description_.Release();
}
inline void RevokeProviderPrivilegeProposal::set_allocated_description(std::string* value) {
  _impl_.description_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.description_.IsDefault()) {
          _impl_.description_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.oracle.v1beta1.RevokeProviderPrivilegeProposal.description)
}

// string provider = 3 [json_name = "provider"];
inline void RevokeProviderPrivilegeProposal::clear_provider() {
  _impl_.provider_.ClearToEmpty();
}
inline const std::string& RevokeProviderPrivilegeProposal::provider() const {
  // @@protoc_insertion_point(field_get:injective.oracle.v1beta1.RevokeProviderPrivilegeProposal.provider)
  return _internal_provider();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RevokeProviderPrivilegeProposal::set_provider(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.provider_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.oracle.v1beta1.RevokeProviderPrivilegeProposal.provider)
}
inline std::string* RevokeProviderPrivilegeProposal::mutable_provider() {
  std::string* _s = _internal_mutable_provider();
  // @@protoc_insertion_point(field_mutable:injective.oracle.v1beta1.RevokeProviderPrivilegeProposal.provider)
  return _s;
}
inline const std::string& RevokeProviderPrivilegeProposal::_internal_provider() const {
  return _impl_.provider_.Get();
}
inline void RevokeProviderPrivilegeProposal::_internal_set_provider(const std::string& value) {
  ;


  _impl_.provider_.Set(value, GetArenaForAllocation());
}
inline std::string* RevokeProviderPrivilegeProposal::_internal_mutable_provider() {
  ;
  return _impl_.provider_.Mutable( GetArenaForAllocation());
}
inline std::string* RevokeProviderPrivilegeProposal::release_provider() {
  // @@protoc_insertion_point(field_release:injective.oracle.v1beta1.RevokeProviderPrivilegeProposal.provider)
  return _impl_.provider_.Release();
}
inline void RevokeProviderPrivilegeProposal::set_allocated_provider(std::string* value) {
  _impl_.provider_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.provider_.IsDefault()) {
          _impl_.provider_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.oracle.v1beta1.RevokeProviderPrivilegeProposal.provider)
}

// repeated string relayers = 5 [json_name = "relayers"];
inline int RevokeProviderPrivilegeProposal::_internal_relayers_size() const {
  return _impl_.relayers_.size();
}
inline int RevokeProviderPrivilegeProposal::relayers_size() const {
  return _internal_relayers_size();
}
inline void RevokeProviderPrivilegeProposal::clear_relayers() {
  _internal_mutable_relayers()->Clear();
}
inline std::string* RevokeProviderPrivilegeProposal::add_relayers() {
  std::string* _s = _internal_add_relayers();
  // @@protoc_insertion_point(field_add_mutable:injective.oracle.v1beta1.RevokeProviderPrivilegeProposal.relayers)
  return _s;
}
inline const std::string& RevokeProviderPrivilegeProposal::relayers(int index) const {
  // @@protoc_insertion_point(field_get:injective.oracle.v1beta1.RevokeProviderPrivilegeProposal.relayers)
  return _internal_relayers(index);
}
inline std::string* RevokeProviderPrivilegeProposal::mutable_relayers(int index) {
  // @@protoc_insertion_point(field_mutable:injective.oracle.v1beta1.RevokeProviderPrivilegeProposal.relayers)
  return _internal_mutable_relayers()->Mutable(index);
}
inline void RevokeProviderPrivilegeProposal::set_relayers(int index, const std::string& value) {
  _internal_mutable_relayers()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:injective.oracle.v1beta1.RevokeProviderPrivilegeProposal.relayers)
}
inline void RevokeProviderPrivilegeProposal::set_relayers(int index, std::string&& value) {
  _internal_mutable_relayers()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:injective.oracle.v1beta1.RevokeProviderPrivilegeProposal.relayers)
}
inline void RevokeProviderPrivilegeProposal::set_relayers(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_relayers()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:injective.oracle.v1beta1.RevokeProviderPrivilegeProposal.relayers)
}
inline void RevokeProviderPrivilegeProposal::set_relayers(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_relayers()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:injective.oracle.v1beta1.RevokeProviderPrivilegeProposal.relayers)
}
inline void RevokeProviderPrivilegeProposal::set_relayers(int index, absl::string_view value) {
  _internal_mutable_relayers()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:injective.oracle.v1beta1.RevokeProviderPrivilegeProposal.relayers)
}
inline void RevokeProviderPrivilegeProposal::add_relayers(const std::string& value) {
  _internal_mutable_relayers()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:injective.oracle.v1beta1.RevokeProviderPrivilegeProposal.relayers)
}
inline void RevokeProviderPrivilegeProposal::add_relayers(std::string&& value) {
  _internal_mutable_relayers()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:injective.oracle.v1beta1.RevokeProviderPrivilegeProposal.relayers)
}
inline void RevokeProviderPrivilegeProposal::add_relayers(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_relayers()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:injective.oracle.v1beta1.RevokeProviderPrivilegeProposal.relayers)
}
inline void RevokeProviderPrivilegeProposal::add_relayers(const char* value, std::size_t size) {
  _internal_mutable_relayers()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:injective.oracle.v1beta1.RevokeProviderPrivilegeProposal.relayers)
}
inline void RevokeProviderPrivilegeProposal::add_relayers(absl::string_view value) {
  _internal_mutable_relayers()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:injective.oracle.v1beta1.RevokeProviderPrivilegeProposal.relayers)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
RevokeProviderPrivilegeProposal::relayers() const {
  // @@protoc_insertion_point(field_list:injective.oracle.v1beta1.RevokeProviderPrivilegeProposal.relayers)
  return _internal_relayers();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* RevokeProviderPrivilegeProposal::mutable_relayers() {
  // @@protoc_insertion_point(field_mutable_list:injective.oracle.v1beta1.RevokeProviderPrivilegeProposal.relayers)
  return _internal_mutable_relayers();
}
inline const std::string& RevokeProviderPrivilegeProposal::_internal_relayers(int index) const {
  return _internal_relayers().Get(index);
}
inline std::string* RevokeProviderPrivilegeProposal::_internal_add_relayers() {
  return _internal_mutable_relayers()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
RevokeProviderPrivilegeProposal::_internal_relayers() const {
  return _impl_.relayers_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
RevokeProviderPrivilegeProposal::_internal_mutable_relayers() {
  return &_impl_.relayers_;
}

// -------------------------------------------------------------------

// RevokePriceFeederPrivilegeProposal

// string title = 1 [json_name = "title"];
inline void RevokePriceFeederPrivilegeProposal::clear_title() {
  _impl_.title_.ClearToEmpty();
}
inline const std::string& RevokePriceFeederPrivilegeProposal::title() const {
  // @@protoc_insertion_point(field_get:injective.oracle.v1beta1.RevokePriceFeederPrivilegeProposal.title)
  return _internal_title();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RevokePriceFeederPrivilegeProposal::set_title(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.title_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.oracle.v1beta1.RevokePriceFeederPrivilegeProposal.title)
}
inline std::string* RevokePriceFeederPrivilegeProposal::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:injective.oracle.v1beta1.RevokePriceFeederPrivilegeProposal.title)
  return _s;
}
inline const std::string& RevokePriceFeederPrivilegeProposal::_internal_title() const {
  return _impl_.title_.Get();
}
inline void RevokePriceFeederPrivilegeProposal::_internal_set_title(const std::string& value) {
  ;


  _impl_.title_.Set(value, GetArenaForAllocation());
}
inline std::string* RevokePriceFeederPrivilegeProposal::_internal_mutable_title() {
  ;
  return _impl_.title_.Mutable( GetArenaForAllocation());
}
inline std::string* RevokePriceFeederPrivilegeProposal::release_title() {
  // @@protoc_insertion_point(field_release:injective.oracle.v1beta1.RevokePriceFeederPrivilegeProposal.title)
  return _impl_.title_.Release();
}
inline void RevokePriceFeederPrivilegeProposal::set_allocated_title(std::string* value) {
  _impl_.title_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.title_.IsDefault()) {
          _impl_.title_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.oracle.v1beta1.RevokePriceFeederPrivilegeProposal.title)
}

// string description = 2 [json_name = "description"];
inline void RevokePriceFeederPrivilegeProposal::clear_description() {
  _impl_.description_.ClearToEmpty();
}
inline const std::string& RevokePriceFeederPrivilegeProposal::description() const {
  // @@protoc_insertion_point(field_get:injective.oracle.v1beta1.RevokePriceFeederPrivilegeProposal.description)
  return _internal_description();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RevokePriceFeederPrivilegeProposal::set_description(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.description_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.oracle.v1beta1.RevokePriceFeederPrivilegeProposal.description)
}
inline std::string* RevokePriceFeederPrivilegeProposal::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:injective.oracle.v1beta1.RevokePriceFeederPrivilegeProposal.description)
  return _s;
}
inline const std::string& RevokePriceFeederPrivilegeProposal::_internal_description() const {
  return _impl_.description_.Get();
}
inline void RevokePriceFeederPrivilegeProposal::_internal_set_description(const std::string& value) {
  ;


  _impl_.description_.Set(value, GetArenaForAllocation());
}
inline std::string* RevokePriceFeederPrivilegeProposal::_internal_mutable_description() {
  ;
  return _impl_.description_.Mutable( GetArenaForAllocation());
}
inline std::string* RevokePriceFeederPrivilegeProposal::release_description() {
  // @@protoc_insertion_point(field_release:injective.oracle.v1beta1.RevokePriceFeederPrivilegeProposal.description)
  return _impl_.description_.Release();
}
inline void RevokePriceFeederPrivilegeProposal::set_allocated_description(std::string* value) {
  _impl_.description_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.description_.IsDefault()) {
          _impl_.description_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.oracle.v1beta1.RevokePriceFeederPrivilegeProposal.description)
}

// string base = 3 [json_name = "base"];
inline void RevokePriceFeederPrivilegeProposal::clear_base() {
  _impl_.base_.ClearToEmpty();
}
inline const std::string& RevokePriceFeederPrivilegeProposal::base() const {
  // @@protoc_insertion_point(field_get:injective.oracle.v1beta1.RevokePriceFeederPrivilegeProposal.base)
  return _internal_base();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RevokePriceFeederPrivilegeProposal::set_base(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.base_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.oracle.v1beta1.RevokePriceFeederPrivilegeProposal.base)
}
inline std::string* RevokePriceFeederPrivilegeProposal::mutable_base() {
  std::string* _s = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:injective.oracle.v1beta1.RevokePriceFeederPrivilegeProposal.base)
  return _s;
}
inline const std::string& RevokePriceFeederPrivilegeProposal::_internal_base() const {
  return _impl_.base_.Get();
}
inline void RevokePriceFeederPrivilegeProposal::_internal_set_base(const std::string& value) {
  ;


  _impl_.base_.Set(value, GetArenaForAllocation());
}
inline std::string* RevokePriceFeederPrivilegeProposal::_internal_mutable_base() {
  ;
  return _impl_.base_.Mutable( GetArenaForAllocation());
}
inline std::string* RevokePriceFeederPrivilegeProposal::release_base() {
  // @@protoc_insertion_point(field_release:injective.oracle.v1beta1.RevokePriceFeederPrivilegeProposal.base)
  return _impl_.base_.Release();
}
inline void RevokePriceFeederPrivilegeProposal::set_allocated_base(std::string* value) {
  _impl_.base_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.base_.IsDefault()) {
          _impl_.base_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.oracle.v1beta1.RevokePriceFeederPrivilegeProposal.base)
}

// string quote = 4 [json_name = "quote"];
inline void RevokePriceFeederPrivilegeProposal::clear_quote() {
  _impl_.quote_.ClearToEmpty();
}
inline const std::string& RevokePriceFeederPrivilegeProposal::quote() const {
  // @@protoc_insertion_point(field_get:injective.oracle.v1beta1.RevokePriceFeederPrivilegeProposal.quote)
  return _internal_quote();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RevokePriceFeederPrivilegeProposal::set_quote(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.quote_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.oracle.v1beta1.RevokePriceFeederPrivilegeProposal.quote)
}
inline std::string* RevokePriceFeederPrivilegeProposal::mutable_quote() {
  std::string* _s = _internal_mutable_quote();
  // @@protoc_insertion_point(field_mutable:injective.oracle.v1beta1.RevokePriceFeederPrivilegeProposal.quote)
  return _s;
}
inline const std::string& RevokePriceFeederPrivilegeProposal::_internal_quote() const {
  return _impl_.quote_.Get();
}
inline void RevokePriceFeederPrivilegeProposal::_internal_set_quote(const std::string& value) {
  ;


  _impl_.quote_.Set(value, GetArenaForAllocation());
}
inline std::string* RevokePriceFeederPrivilegeProposal::_internal_mutable_quote() {
  ;
  return _impl_.quote_.Mutable( GetArenaForAllocation());
}
inline std::string* RevokePriceFeederPrivilegeProposal::release_quote() {
  // @@protoc_insertion_point(field_release:injective.oracle.v1beta1.RevokePriceFeederPrivilegeProposal.quote)
  return _impl_.quote_.Release();
}
inline void RevokePriceFeederPrivilegeProposal::set_allocated_quote(std::string* value) {
  _impl_.quote_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.quote_.IsDefault()) {
          _impl_.quote_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.oracle.v1beta1.RevokePriceFeederPrivilegeProposal.quote)
}

// repeated string relayers = 5 [json_name = "relayers"];
inline int RevokePriceFeederPrivilegeProposal::_internal_relayers_size() const {
  return _impl_.relayers_.size();
}
inline int RevokePriceFeederPrivilegeProposal::relayers_size() const {
  return _internal_relayers_size();
}
inline void RevokePriceFeederPrivilegeProposal::clear_relayers() {
  _internal_mutable_relayers()->Clear();
}
inline std::string* RevokePriceFeederPrivilegeProposal::add_relayers() {
  std::string* _s = _internal_add_relayers();
  // @@protoc_insertion_point(field_add_mutable:injective.oracle.v1beta1.RevokePriceFeederPrivilegeProposal.relayers)
  return _s;
}
inline const std::string& RevokePriceFeederPrivilegeProposal::relayers(int index) const {
  // @@protoc_insertion_point(field_get:injective.oracle.v1beta1.RevokePriceFeederPrivilegeProposal.relayers)
  return _internal_relayers(index);
}
inline std::string* RevokePriceFeederPrivilegeProposal::mutable_relayers(int index) {
  // @@protoc_insertion_point(field_mutable:injective.oracle.v1beta1.RevokePriceFeederPrivilegeProposal.relayers)
  return _internal_mutable_relayers()->Mutable(index);
}
inline void RevokePriceFeederPrivilegeProposal::set_relayers(int index, const std::string& value) {
  _internal_mutable_relayers()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:injective.oracle.v1beta1.RevokePriceFeederPrivilegeProposal.relayers)
}
inline void RevokePriceFeederPrivilegeProposal::set_relayers(int index, std::string&& value) {
  _internal_mutable_relayers()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:injective.oracle.v1beta1.RevokePriceFeederPrivilegeProposal.relayers)
}
inline void RevokePriceFeederPrivilegeProposal::set_relayers(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_relayers()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:injective.oracle.v1beta1.RevokePriceFeederPrivilegeProposal.relayers)
}
inline void RevokePriceFeederPrivilegeProposal::set_relayers(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_relayers()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:injective.oracle.v1beta1.RevokePriceFeederPrivilegeProposal.relayers)
}
inline void RevokePriceFeederPrivilegeProposal::set_relayers(int index, absl::string_view value) {
  _internal_mutable_relayers()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:injective.oracle.v1beta1.RevokePriceFeederPrivilegeProposal.relayers)
}
inline void RevokePriceFeederPrivilegeProposal::add_relayers(const std::string& value) {
  _internal_mutable_relayers()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:injective.oracle.v1beta1.RevokePriceFeederPrivilegeProposal.relayers)
}
inline void RevokePriceFeederPrivilegeProposal::add_relayers(std::string&& value) {
  _internal_mutable_relayers()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:injective.oracle.v1beta1.RevokePriceFeederPrivilegeProposal.relayers)
}
inline void RevokePriceFeederPrivilegeProposal::add_relayers(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_relayers()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:injective.oracle.v1beta1.RevokePriceFeederPrivilegeProposal.relayers)
}
inline void RevokePriceFeederPrivilegeProposal::add_relayers(const char* value, std::size_t size) {
  _internal_mutable_relayers()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:injective.oracle.v1beta1.RevokePriceFeederPrivilegeProposal.relayers)
}
inline void RevokePriceFeederPrivilegeProposal::add_relayers(absl::string_view value) {
  _internal_mutable_relayers()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:injective.oracle.v1beta1.RevokePriceFeederPrivilegeProposal.relayers)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
RevokePriceFeederPrivilegeProposal::relayers() const {
  // @@protoc_insertion_point(field_list:injective.oracle.v1beta1.RevokePriceFeederPrivilegeProposal.relayers)
  return _internal_relayers();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* RevokePriceFeederPrivilegeProposal::mutable_relayers() {
  // @@protoc_insertion_point(field_mutable_list:injective.oracle.v1beta1.RevokePriceFeederPrivilegeProposal.relayers)
  return _internal_mutable_relayers();
}
inline const std::string& RevokePriceFeederPrivilegeProposal::_internal_relayers(int index) const {
  return _internal_relayers().Get(index);
}
inline std::string* RevokePriceFeederPrivilegeProposal::_internal_add_relayers() {
  return _internal_mutable_relayers()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
RevokePriceFeederPrivilegeProposal::_internal_relayers() const {
  return _impl_.relayers_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
RevokePriceFeederPrivilegeProposal::_internal_mutable_relayers() {
  return &_impl_.relayers_;
}

// -------------------------------------------------------------------

// AuthorizeBandOracleRequestProposal

// string title = 1 [json_name = "title"];
inline void AuthorizeBandOracleRequestProposal::clear_title() {
  _impl_.title_.ClearToEmpty();
}
inline const std::string& AuthorizeBandOracleRequestProposal::title() const {
  // @@protoc_insertion_point(field_get:injective.oracle.v1beta1.AuthorizeBandOracleRequestProposal.title)
  return _internal_title();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AuthorizeBandOracleRequestProposal::set_title(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.title_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.oracle.v1beta1.AuthorizeBandOracleRequestProposal.title)
}
inline std::string* AuthorizeBandOracleRequestProposal::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:injective.oracle.v1beta1.AuthorizeBandOracleRequestProposal.title)
  return _s;
}
inline const std::string& AuthorizeBandOracleRequestProposal::_internal_title() const {
  return _impl_.title_.Get();
}
inline void AuthorizeBandOracleRequestProposal::_internal_set_title(const std::string& value) {
  ;


  _impl_.title_.Set(value, GetArenaForAllocation());
}
inline std::string* AuthorizeBandOracleRequestProposal::_internal_mutable_title() {
  ;
  return _impl_.title_.Mutable( GetArenaForAllocation());
}
inline std::string* AuthorizeBandOracleRequestProposal::release_title() {
  // @@protoc_insertion_point(field_release:injective.oracle.v1beta1.AuthorizeBandOracleRequestProposal.title)
  return _impl_.title_.Release();
}
inline void AuthorizeBandOracleRequestProposal::set_allocated_title(std::string* value) {
  _impl_.title_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.title_.IsDefault()) {
          _impl_.title_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.oracle.v1beta1.AuthorizeBandOracleRequestProposal.title)
}

// string description = 2 [json_name = "description"];
inline void AuthorizeBandOracleRequestProposal::clear_description() {
  _impl_.description_.ClearToEmpty();
}
inline const std::string& AuthorizeBandOracleRequestProposal::description() const {
  // @@protoc_insertion_point(field_get:injective.oracle.v1beta1.AuthorizeBandOracleRequestProposal.description)
  return _internal_description();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AuthorizeBandOracleRequestProposal::set_description(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.description_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.oracle.v1beta1.AuthorizeBandOracleRequestProposal.description)
}
inline std::string* AuthorizeBandOracleRequestProposal::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:injective.oracle.v1beta1.AuthorizeBandOracleRequestProposal.description)
  return _s;
}
inline const std::string& AuthorizeBandOracleRequestProposal::_internal_description() const {
  return _impl_.description_.Get();
}
inline void AuthorizeBandOracleRequestProposal::_internal_set_description(const std::string& value) {
  ;


  _impl_.description_.Set(value, GetArenaForAllocation());
}
inline std::string* AuthorizeBandOracleRequestProposal::_internal_mutable_description() {
  ;
  return _impl_.description_.Mutable( GetArenaForAllocation());
}
inline std::string* AuthorizeBandOracleRequestProposal::release_description() {
  // @@protoc_insertion_point(field_release:injective.oracle.v1beta1.AuthorizeBandOracleRequestProposal.description)
  return _impl_.description_.Release();
}
inline void AuthorizeBandOracleRequestProposal::set_allocated_description(std::string* value) {
  _impl_.description_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.description_.IsDefault()) {
          _impl_.description_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.oracle.v1beta1.AuthorizeBandOracleRequestProposal.description)
}

// .injective.oracle.v1beta1.BandOracleRequest request = 3 [json_name = "request", (.gogoproto.nullable) = false];
inline bool AuthorizeBandOracleRequestProposal::has_request() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.request_ != nullptr);
  return value;
}
inline const ::injective::oracle::v1beta1::BandOracleRequest& AuthorizeBandOracleRequestProposal::_internal_request() const {
  const ::injective::oracle::v1beta1::BandOracleRequest* p = _impl_.request_;
  return p != nullptr ? *p : reinterpret_cast<const ::injective::oracle::v1beta1::BandOracleRequest&>(
      ::injective::oracle::v1beta1::_BandOracleRequest_default_instance_);
}
inline const ::injective::oracle::v1beta1::BandOracleRequest& AuthorizeBandOracleRequestProposal::request() const {
  // @@protoc_insertion_point(field_get:injective.oracle.v1beta1.AuthorizeBandOracleRequestProposal.request)
  return _internal_request();
}
inline void AuthorizeBandOracleRequestProposal::unsafe_arena_set_allocated_request(
    ::injective::oracle::v1beta1::BandOracleRequest* request) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.request_);
  }
  _impl_.request_ = request;
  if (request) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:injective.oracle.v1beta1.AuthorizeBandOracleRequestProposal.request)
}
inline ::injective::oracle::v1beta1::BandOracleRequest* AuthorizeBandOracleRequestProposal::release_request() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::injective::oracle::v1beta1::BandOracleRequest* temp = _impl_.request_;
  _impl_.request_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::injective::oracle::v1beta1::BandOracleRequest* AuthorizeBandOracleRequestProposal::unsafe_arena_release_request() {
  // @@protoc_insertion_point(field_release:injective.oracle.v1beta1.AuthorizeBandOracleRequestProposal.request)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::injective::oracle::v1beta1::BandOracleRequest* temp = _impl_.request_;
  _impl_.request_ = nullptr;
  return temp;
}
inline ::injective::oracle::v1beta1::BandOracleRequest* AuthorizeBandOracleRequestProposal::_internal_mutable_request() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.request_ == nullptr) {
    auto* p = CreateMaybeMessage<::injective::oracle::v1beta1::BandOracleRequest>(GetArenaForAllocation());
    _impl_.request_ = p;
  }
  return _impl_.request_;
}
inline ::injective::oracle::v1beta1::BandOracleRequest* AuthorizeBandOracleRequestProposal::mutable_request() {
  ::injective::oracle::v1beta1::BandOracleRequest* _msg = _internal_mutable_request();
  // @@protoc_insertion_point(field_mutable:injective.oracle.v1beta1.AuthorizeBandOracleRequestProposal.request)
  return _msg;
}
inline void AuthorizeBandOracleRequestProposal::set_allocated_request(::injective::oracle::v1beta1::BandOracleRequest* request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.request_);
  }
  if (request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(request));
    if (message_arena != submessage_arena) {
      request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, request, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.request_ = request;
  // @@protoc_insertion_point(field_set_allocated:injective.oracle.v1beta1.AuthorizeBandOracleRequestProposal.request)
}

// -------------------------------------------------------------------

// UpdateBandOracleRequestProposal

// string title = 1 [json_name = "title"];
inline void UpdateBandOracleRequestProposal::clear_title() {
  _impl_.title_.ClearToEmpty();
}
inline const std::string& UpdateBandOracleRequestProposal::title() const {
  // @@protoc_insertion_point(field_get:injective.oracle.v1beta1.UpdateBandOracleRequestProposal.title)
  return _internal_title();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UpdateBandOracleRequestProposal::set_title(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.title_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.oracle.v1beta1.UpdateBandOracleRequestProposal.title)
}
inline std::string* UpdateBandOracleRequestProposal::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:injective.oracle.v1beta1.UpdateBandOracleRequestProposal.title)
  return _s;
}
inline const std::string& UpdateBandOracleRequestProposal::_internal_title() const {
  return _impl_.title_.Get();
}
inline void UpdateBandOracleRequestProposal::_internal_set_title(const std::string& value) {
  ;


  _impl_.title_.Set(value, GetArenaForAllocation());
}
inline std::string* UpdateBandOracleRequestProposal::_internal_mutable_title() {
  ;
  return _impl_.title_.Mutable( GetArenaForAllocation());
}
inline std::string* UpdateBandOracleRequestProposal::release_title() {
  // @@protoc_insertion_point(field_release:injective.oracle.v1beta1.UpdateBandOracleRequestProposal.title)
  return _impl_.title_.Release();
}
inline void UpdateBandOracleRequestProposal::set_allocated_title(std::string* value) {
  _impl_.title_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.title_.IsDefault()) {
          _impl_.title_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.oracle.v1beta1.UpdateBandOracleRequestProposal.title)
}

// string description = 2 [json_name = "description"];
inline void UpdateBandOracleRequestProposal::clear_description() {
  _impl_.description_.ClearToEmpty();
}
inline const std::string& UpdateBandOracleRequestProposal::description() const {
  // @@protoc_insertion_point(field_get:injective.oracle.v1beta1.UpdateBandOracleRequestProposal.description)
  return _internal_description();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UpdateBandOracleRequestProposal::set_description(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.description_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.oracle.v1beta1.UpdateBandOracleRequestProposal.description)
}
inline std::string* UpdateBandOracleRequestProposal::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:injective.oracle.v1beta1.UpdateBandOracleRequestProposal.description)
  return _s;
}
inline const std::string& UpdateBandOracleRequestProposal::_internal_description() const {
  return _impl_.description_.Get();
}
inline void UpdateBandOracleRequestProposal::_internal_set_description(const std::string& value) {
  ;


  _impl_.description_.Set(value, GetArenaForAllocation());
}
inline std::string* UpdateBandOracleRequestProposal::_internal_mutable_description() {
  ;
  return _impl_.description_.Mutable( GetArenaForAllocation());
}
inline std::string* UpdateBandOracleRequestProposal::release_description() {
  // @@protoc_insertion_point(field_release:injective.oracle.v1beta1.UpdateBandOracleRequestProposal.description)
  return _impl_.description_.Release();
}
inline void UpdateBandOracleRequestProposal::set_allocated_description(std::string* value) {
  _impl_.description_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.description_.IsDefault()) {
          _impl_.description_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.oracle.v1beta1.UpdateBandOracleRequestProposal.description)
}

// repeated uint64 delete_request_ids = 3 [json_name = "deleteRequestIds"];
inline int UpdateBandOracleRequestProposal::_internal_delete_request_ids_size() const {
  return _impl_.delete_request_ids_.size();
}
inline int UpdateBandOracleRequestProposal::delete_request_ids_size() const {
  return _internal_delete_request_ids_size();
}
inline void UpdateBandOracleRequestProposal::clear_delete_request_ids() {
  _internal_mutable_delete_request_ids()->Clear();
}
inline ::uint64_t UpdateBandOracleRequestProposal::delete_request_ids(int index) const {
  // @@protoc_insertion_point(field_get:injective.oracle.v1beta1.UpdateBandOracleRequestProposal.delete_request_ids)
  return _internal_delete_request_ids(index);
}
inline void UpdateBandOracleRequestProposal::set_delete_request_ids(int index, ::uint64_t value) {
  _internal_mutable_delete_request_ids()->Set(index, value);
  // @@protoc_insertion_point(field_set:injective.oracle.v1beta1.UpdateBandOracleRequestProposal.delete_request_ids)
}
inline void UpdateBandOracleRequestProposal::add_delete_request_ids(::uint64_t value) {
  _internal_add_delete_request_ids(value);
  // @@protoc_insertion_point(field_add:injective.oracle.v1beta1.UpdateBandOracleRequestProposal.delete_request_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>& UpdateBandOracleRequestProposal::delete_request_ids() const {
  // @@protoc_insertion_point(field_list:injective.oracle.v1beta1.UpdateBandOracleRequestProposal.delete_request_ids)
  return _internal_delete_request_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>* UpdateBandOracleRequestProposal::mutable_delete_request_ids() {
  // @@protoc_insertion_point(field_mutable_list:injective.oracle.v1beta1.UpdateBandOracleRequestProposal.delete_request_ids)
  return _internal_mutable_delete_request_ids();
}

inline ::uint64_t UpdateBandOracleRequestProposal::_internal_delete_request_ids(int index) const {
  return _internal_delete_request_ids().Get(index);
}
inline void UpdateBandOracleRequestProposal::_internal_add_delete_request_ids(::uint64_t value) {
  _internal_mutable_delete_request_ids()->Add(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>& UpdateBandOracleRequestProposal::_internal_delete_request_ids() const {
  return _impl_.delete_request_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>* UpdateBandOracleRequestProposal::_internal_mutable_delete_request_ids() {
  return &_impl_.delete_request_ids_;
}

// .injective.oracle.v1beta1.BandOracleRequest update_oracle_request = 4 [json_name = "updateOracleRequest"];
inline bool UpdateBandOracleRequestProposal::has_update_oracle_request() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.update_oracle_request_ != nullptr);
  return value;
}
inline const ::injective::oracle::v1beta1::BandOracleRequest& UpdateBandOracleRequestProposal::_internal_update_oracle_request() const {
  const ::injective::oracle::v1beta1::BandOracleRequest* p = _impl_.update_oracle_request_;
  return p != nullptr ? *p : reinterpret_cast<const ::injective::oracle::v1beta1::BandOracleRequest&>(
      ::injective::oracle::v1beta1::_BandOracleRequest_default_instance_);
}
inline const ::injective::oracle::v1beta1::BandOracleRequest& UpdateBandOracleRequestProposal::update_oracle_request() const {
  // @@protoc_insertion_point(field_get:injective.oracle.v1beta1.UpdateBandOracleRequestProposal.update_oracle_request)
  return _internal_update_oracle_request();
}
inline void UpdateBandOracleRequestProposal::unsafe_arena_set_allocated_update_oracle_request(
    ::injective::oracle::v1beta1::BandOracleRequest* update_oracle_request) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.update_oracle_request_);
  }
  _impl_.update_oracle_request_ = update_oracle_request;
  if (update_oracle_request) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:injective.oracle.v1beta1.UpdateBandOracleRequestProposal.update_oracle_request)
}
inline ::injective::oracle::v1beta1::BandOracleRequest* UpdateBandOracleRequestProposal::release_update_oracle_request() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::injective::oracle::v1beta1::BandOracleRequest* temp = _impl_.update_oracle_request_;
  _impl_.update_oracle_request_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::injective::oracle::v1beta1::BandOracleRequest* UpdateBandOracleRequestProposal::unsafe_arena_release_update_oracle_request() {
  // @@protoc_insertion_point(field_release:injective.oracle.v1beta1.UpdateBandOracleRequestProposal.update_oracle_request)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::injective::oracle::v1beta1::BandOracleRequest* temp = _impl_.update_oracle_request_;
  _impl_.update_oracle_request_ = nullptr;
  return temp;
}
inline ::injective::oracle::v1beta1::BandOracleRequest* UpdateBandOracleRequestProposal::_internal_mutable_update_oracle_request() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.update_oracle_request_ == nullptr) {
    auto* p = CreateMaybeMessage<::injective::oracle::v1beta1::BandOracleRequest>(GetArenaForAllocation());
    _impl_.update_oracle_request_ = p;
  }
  return _impl_.update_oracle_request_;
}
inline ::injective::oracle::v1beta1::BandOracleRequest* UpdateBandOracleRequestProposal::mutable_update_oracle_request() {
  ::injective::oracle::v1beta1::BandOracleRequest* _msg = _internal_mutable_update_oracle_request();
  // @@protoc_insertion_point(field_mutable:injective.oracle.v1beta1.UpdateBandOracleRequestProposal.update_oracle_request)
  return _msg;
}
inline void UpdateBandOracleRequestProposal::set_allocated_update_oracle_request(::injective::oracle::v1beta1::BandOracleRequest* update_oracle_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.update_oracle_request_);
  }
  if (update_oracle_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_oracle_request));
    if (message_arena != submessage_arena) {
      update_oracle_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_oracle_request, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.update_oracle_request_ = update_oracle_request;
  // @@protoc_insertion_point(field_set_allocated:injective.oracle.v1beta1.UpdateBandOracleRequestProposal.update_oracle_request)
}

// -------------------------------------------------------------------

// EnableBandIBCProposal

// string title = 1 [json_name = "title"];
inline void EnableBandIBCProposal::clear_title() {
  _impl_.title_.ClearToEmpty();
}
inline const std::string& EnableBandIBCProposal::title() const {
  // @@protoc_insertion_point(field_get:injective.oracle.v1beta1.EnableBandIBCProposal.title)
  return _internal_title();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EnableBandIBCProposal::set_title(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.title_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.oracle.v1beta1.EnableBandIBCProposal.title)
}
inline std::string* EnableBandIBCProposal::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:injective.oracle.v1beta1.EnableBandIBCProposal.title)
  return _s;
}
inline const std::string& EnableBandIBCProposal::_internal_title() const {
  return _impl_.title_.Get();
}
inline void EnableBandIBCProposal::_internal_set_title(const std::string& value) {
  ;


  _impl_.title_.Set(value, GetArenaForAllocation());
}
inline std::string* EnableBandIBCProposal::_internal_mutable_title() {
  ;
  return _impl_.title_.Mutable( GetArenaForAllocation());
}
inline std::string* EnableBandIBCProposal::release_title() {
  // @@protoc_insertion_point(field_release:injective.oracle.v1beta1.EnableBandIBCProposal.title)
  return _impl_.title_.Release();
}
inline void EnableBandIBCProposal::set_allocated_title(std::string* value) {
  _impl_.title_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.title_.IsDefault()) {
          _impl_.title_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.oracle.v1beta1.EnableBandIBCProposal.title)
}

// string description = 2 [json_name = "description"];
inline void EnableBandIBCProposal::clear_description() {
  _impl_.description_.ClearToEmpty();
}
inline const std::string& EnableBandIBCProposal::description() const {
  // @@protoc_insertion_point(field_get:injective.oracle.v1beta1.EnableBandIBCProposal.description)
  return _internal_description();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EnableBandIBCProposal::set_description(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.description_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.oracle.v1beta1.EnableBandIBCProposal.description)
}
inline std::string* EnableBandIBCProposal::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:injective.oracle.v1beta1.EnableBandIBCProposal.description)
  return _s;
}
inline const std::string& EnableBandIBCProposal::_internal_description() const {
  return _impl_.description_.Get();
}
inline void EnableBandIBCProposal::_internal_set_description(const std::string& value) {
  ;


  _impl_.description_.Set(value, GetArenaForAllocation());
}
inline std::string* EnableBandIBCProposal::_internal_mutable_description() {
  ;
  return _impl_.description_.Mutable( GetArenaForAllocation());
}
inline std::string* EnableBandIBCProposal::release_description() {
  // @@protoc_insertion_point(field_release:injective.oracle.v1beta1.EnableBandIBCProposal.description)
  return _impl_.description_.Release();
}
inline void EnableBandIBCProposal::set_allocated_description(std::string* value) {
  _impl_.description_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.description_.IsDefault()) {
          _impl_.description_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.oracle.v1beta1.EnableBandIBCProposal.description)
}

// .injective.oracle.v1beta1.BandIBCParams band_ibc_params = 3 [json_name = "bandIbcParams", (.gogoproto.nullable) = false];
inline bool EnableBandIBCProposal::has_band_ibc_params() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.band_ibc_params_ != nullptr);
  return value;
}
inline const ::injective::oracle::v1beta1::BandIBCParams& EnableBandIBCProposal::_internal_band_ibc_params() const {
  const ::injective::oracle::v1beta1::BandIBCParams* p = _impl_.band_ibc_params_;
  return p != nullptr ? *p : reinterpret_cast<const ::injective::oracle::v1beta1::BandIBCParams&>(
      ::injective::oracle::v1beta1::_BandIBCParams_default_instance_);
}
inline const ::injective::oracle::v1beta1::BandIBCParams& EnableBandIBCProposal::band_ibc_params() const {
  // @@protoc_insertion_point(field_get:injective.oracle.v1beta1.EnableBandIBCProposal.band_ibc_params)
  return _internal_band_ibc_params();
}
inline void EnableBandIBCProposal::unsafe_arena_set_allocated_band_ibc_params(
    ::injective::oracle::v1beta1::BandIBCParams* band_ibc_params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.band_ibc_params_);
  }
  _impl_.band_ibc_params_ = band_ibc_params;
  if (band_ibc_params) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:injective.oracle.v1beta1.EnableBandIBCProposal.band_ibc_params)
}
inline ::injective::oracle::v1beta1::BandIBCParams* EnableBandIBCProposal::release_band_ibc_params() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::injective::oracle::v1beta1::BandIBCParams* temp = _impl_.band_ibc_params_;
  _impl_.band_ibc_params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::injective::oracle::v1beta1::BandIBCParams* EnableBandIBCProposal::unsafe_arena_release_band_ibc_params() {
  // @@protoc_insertion_point(field_release:injective.oracle.v1beta1.EnableBandIBCProposal.band_ibc_params)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::injective::oracle::v1beta1::BandIBCParams* temp = _impl_.band_ibc_params_;
  _impl_.band_ibc_params_ = nullptr;
  return temp;
}
inline ::injective::oracle::v1beta1::BandIBCParams* EnableBandIBCProposal::_internal_mutable_band_ibc_params() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.band_ibc_params_ == nullptr) {
    auto* p = CreateMaybeMessage<::injective::oracle::v1beta1::BandIBCParams>(GetArenaForAllocation());
    _impl_.band_ibc_params_ = p;
  }
  return _impl_.band_ibc_params_;
}
inline ::injective::oracle::v1beta1::BandIBCParams* EnableBandIBCProposal::mutable_band_ibc_params() {
  ::injective::oracle::v1beta1::BandIBCParams* _msg = _internal_mutable_band_ibc_params();
  // @@protoc_insertion_point(field_mutable:injective.oracle.v1beta1.EnableBandIBCProposal.band_ibc_params)
  return _msg;
}
inline void EnableBandIBCProposal::set_allocated_band_ibc_params(::injective::oracle::v1beta1::BandIBCParams* band_ibc_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.band_ibc_params_);
  }
  if (band_ibc_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(band_ibc_params));
    if (message_arena != submessage_arena) {
      band_ibc_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, band_ibc_params, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.band_ibc_params_ = band_ibc_params;
  // @@protoc_insertion_point(field_set_allocated:injective.oracle.v1beta1.EnableBandIBCProposal.band_ibc_params)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1beta1
}  // namespace oracle
}  // namespace injective


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_injective_2foracle_2fv1beta1_2fproposal_2eproto_2epb_2eh

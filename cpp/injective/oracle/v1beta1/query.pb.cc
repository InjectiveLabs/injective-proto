// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: injective/oracle/v1beta1/query.proto

#include "injective/oracle/v1beta1/query.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace injective {
namespace oracle {
namespace v1beta1 {
template <typename>
PROTOBUF_CONSTEXPR QueryPythPriceRequest::QueryPythPriceRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.price_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QueryPythPriceRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryPythPriceRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryPythPriceRequestDefaultTypeInternal() {}
  union {
    QueryPythPriceRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryPythPriceRequestDefaultTypeInternal _QueryPythPriceRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryPythPriceResponse::QueryPythPriceResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.price_state_)*/nullptr} {}
struct QueryPythPriceResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryPythPriceResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryPythPriceResponseDefaultTypeInternal() {}
  union {
    QueryPythPriceResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryPythPriceResponseDefaultTypeInternal _QueryPythPriceResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryParamsRequest::QueryParamsRequest(
    ::_pbi::ConstantInitialized) {}
struct QueryParamsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryParamsRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryParamsRequestDefaultTypeInternal() {}
  union {
    QueryParamsRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryParamsRequestDefaultTypeInternal _QueryParamsRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryParamsResponse::QueryParamsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.params_)*/nullptr} {}
struct QueryParamsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryParamsResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryParamsResponseDefaultTypeInternal() {}
  union {
    QueryParamsResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryParamsResponseDefaultTypeInternal _QueryParamsResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryBandRelayersRequest::QueryBandRelayersRequest(
    ::_pbi::ConstantInitialized) {}
struct QueryBandRelayersRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryBandRelayersRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryBandRelayersRequestDefaultTypeInternal() {}
  union {
    QueryBandRelayersRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryBandRelayersRequestDefaultTypeInternal _QueryBandRelayersRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryBandRelayersResponse::QueryBandRelayersResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.relayers_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QueryBandRelayersResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryBandRelayersResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryBandRelayersResponseDefaultTypeInternal() {}
  union {
    QueryBandRelayersResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryBandRelayersResponseDefaultTypeInternal _QueryBandRelayersResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryBandPriceStatesRequest::QueryBandPriceStatesRequest(
    ::_pbi::ConstantInitialized) {}
struct QueryBandPriceStatesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryBandPriceStatesRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryBandPriceStatesRequestDefaultTypeInternal() {}
  union {
    QueryBandPriceStatesRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryBandPriceStatesRequestDefaultTypeInternal _QueryBandPriceStatesRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryBandPriceStatesResponse::QueryBandPriceStatesResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.price_states_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QueryBandPriceStatesResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryBandPriceStatesResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryBandPriceStatesResponseDefaultTypeInternal() {}
  union {
    QueryBandPriceStatesResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryBandPriceStatesResponseDefaultTypeInternal _QueryBandPriceStatesResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryBandIBCPriceStatesRequest::QueryBandIBCPriceStatesRequest(
    ::_pbi::ConstantInitialized) {}
struct QueryBandIBCPriceStatesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryBandIBCPriceStatesRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryBandIBCPriceStatesRequestDefaultTypeInternal() {}
  union {
    QueryBandIBCPriceStatesRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryBandIBCPriceStatesRequestDefaultTypeInternal _QueryBandIBCPriceStatesRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryBandIBCPriceStatesResponse::QueryBandIBCPriceStatesResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.price_states_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QueryBandIBCPriceStatesResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryBandIBCPriceStatesResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryBandIBCPriceStatesResponseDefaultTypeInternal() {}
  union {
    QueryBandIBCPriceStatesResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryBandIBCPriceStatesResponseDefaultTypeInternal _QueryBandIBCPriceStatesResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryPriceFeedPriceStatesRequest::QueryPriceFeedPriceStatesRequest(
    ::_pbi::ConstantInitialized) {}
struct QueryPriceFeedPriceStatesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryPriceFeedPriceStatesRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryPriceFeedPriceStatesRequestDefaultTypeInternal() {}
  union {
    QueryPriceFeedPriceStatesRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryPriceFeedPriceStatesRequestDefaultTypeInternal _QueryPriceFeedPriceStatesRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryPriceFeedPriceStatesResponse::QueryPriceFeedPriceStatesResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.price_states_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QueryPriceFeedPriceStatesResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryPriceFeedPriceStatesResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryPriceFeedPriceStatesResponseDefaultTypeInternal() {}
  union {
    QueryPriceFeedPriceStatesResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryPriceFeedPriceStatesResponseDefaultTypeInternal _QueryPriceFeedPriceStatesResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryCoinbasePriceStatesRequest::QueryCoinbasePriceStatesRequest(
    ::_pbi::ConstantInitialized) {}
struct QueryCoinbasePriceStatesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryCoinbasePriceStatesRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryCoinbasePriceStatesRequestDefaultTypeInternal() {}
  union {
    QueryCoinbasePriceStatesRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryCoinbasePriceStatesRequestDefaultTypeInternal _QueryCoinbasePriceStatesRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryCoinbasePriceStatesResponse::QueryCoinbasePriceStatesResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.price_states_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QueryCoinbasePriceStatesResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryCoinbasePriceStatesResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryCoinbasePriceStatesResponseDefaultTypeInternal() {}
  union {
    QueryCoinbasePriceStatesResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryCoinbasePriceStatesResponseDefaultTypeInternal _QueryCoinbasePriceStatesResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryPythPriceStatesRequest::QueryPythPriceStatesRequest(
    ::_pbi::ConstantInitialized) {}
struct QueryPythPriceStatesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryPythPriceStatesRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryPythPriceStatesRequestDefaultTypeInternal() {}
  union {
    QueryPythPriceStatesRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryPythPriceStatesRequestDefaultTypeInternal _QueryPythPriceStatesRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryPythPriceStatesResponse::QueryPythPriceStatesResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.price_states_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QueryPythPriceStatesResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryPythPriceStatesResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryPythPriceStatesResponseDefaultTypeInternal() {}
  union {
    QueryPythPriceStatesResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryPythPriceStatesResponseDefaultTypeInternal _QueryPythPriceStatesResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryProviderPriceStateRequest::QueryProviderPriceStateRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.provider_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.symbol_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QueryProviderPriceStateRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryProviderPriceStateRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryProviderPriceStateRequestDefaultTypeInternal() {}
  union {
    QueryProviderPriceStateRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryProviderPriceStateRequestDefaultTypeInternal _QueryProviderPriceStateRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryProviderPriceStateResponse::QueryProviderPriceStateResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.price_state_)*/nullptr} {}
struct QueryProviderPriceStateResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryProviderPriceStateResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryProviderPriceStateResponseDefaultTypeInternal() {}
  union {
    QueryProviderPriceStateResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryProviderPriceStateResponseDefaultTypeInternal _QueryProviderPriceStateResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryModuleStateRequest::QueryModuleStateRequest(
    ::_pbi::ConstantInitialized) {}
struct QueryModuleStateRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryModuleStateRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryModuleStateRequestDefaultTypeInternal() {}
  union {
    QueryModuleStateRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryModuleStateRequestDefaultTypeInternal _QueryModuleStateRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryModuleStateResponse::QueryModuleStateResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.state_)*/nullptr} {}
struct QueryModuleStateResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryModuleStateResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryModuleStateResponseDefaultTypeInternal() {}
  union {
    QueryModuleStateResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryModuleStateResponseDefaultTypeInternal _QueryModuleStateResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryHistoricalPriceRecordsRequest::QueryHistoricalPriceRecordsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.symbol_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.oracle_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QueryHistoricalPriceRecordsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryHistoricalPriceRecordsRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryHistoricalPriceRecordsRequestDefaultTypeInternal() {}
  union {
    QueryHistoricalPriceRecordsRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryHistoricalPriceRecordsRequestDefaultTypeInternal _QueryHistoricalPriceRecordsRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryHistoricalPriceRecordsResponse::QueryHistoricalPriceRecordsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.price_records_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QueryHistoricalPriceRecordsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryHistoricalPriceRecordsResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryHistoricalPriceRecordsResponseDefaultTypeInternal() {}
  union {
    QueryHistoricalPriceRecordsResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryHistoricalPriceRecordsResponseDefaultTypeInternal _QueryHistoricalPriceRecordsResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR OracleHistoryOptions::OracleHistoryOptions(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.max_age_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.include_raw_history_)*/ false

  , /*decltype(_impl_.include_metadata_)*/ false

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OracleHistoryOptionsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OracleHistoryOptionsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~OracleHistoryOptionsDefaultTypeInternal() {}
  union {
    OracleHistoryOptions _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OracleHistoryOptionsDefaultTypeInternal _OracleHistoryOptions_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryOracleVolatilityRequest::QueryOracleVolatilityRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.base_info_)*/nullptr
  , /*decltype(_impl_.quote_info_)*/nullptr
  , /*decltype(_impl_.oracle_history_options_)*/nullptr} {}
struct QueryOracleVolatilityRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryOracleVolatilityRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryOracleVolatilityRequestDefaultTypeInternal() {}
  union {
    QueryOracleVolatilityRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryOracleVolatilityRequestDefaultTypeInternal _QueryOracleVolatilityRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryOracleVolatilityResponse::QueryOracleVolatilityResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.raw_history_)*/{}
  , /*decltype(_impl_.volatility_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.history_metadata_)*/nullptr} {}
struct QueryOracleVolatilityResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryOracleVolatilityResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryOracleVolatilityResponseDefaultTypeInternal() {}
  union {
    QueryOracleVolatilityResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryOracleVolatilityResponseDefaultTypeInternal _QueryOracleVolatilityResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryOracleProvidersInfoRequest::QueryOracleProvidersInfoRequest(
    ::_pbi::ConstantInitialized) {}
struct QueryOracleProvidersInfoRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryOracleProvidersInfoRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryOracleProvidersInfoRequestDefaultTypeInternal() {}
  union {
    QueryOracleProvidersInfoRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryOracleProvidersInfoRequestDefaultTypeInternal _QueryOracleProvidersInfoRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryOracleProvidersInfoResponse::QueryOracleProvidersInfoResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.providers_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QueryOracleProvidersInfoResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryOracleProvidersInfoResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryOracleProvidersInfoResponseDefaultTypeInternal() {}
  union {
    QueryOracleProvidersInfoResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryOracleProvidersInfoResponseDefaultTypeInternal _QueryOracleProvidersInfoResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryOracleProviderPricesRequest::QueryOracleProviderPricesRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.provider_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QueryOracleProviderPricesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryOracleProviderPricesRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryOracleProviderPricesRequestDefaultTypeInternal() {}
  union {
    QueryOracleProviderPricesRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryOracleProviderPricesRequestDefaultTypeInternal _QueryOracleProviderPricesRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryOracleProviderPricesResponse::QueryOracleProviderPricesResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.providerstate_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QueryOracleProviderPricesResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryOracleProviderPricesResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryOracleProviderPricesResponseDefaultTypeInternal() {}
  union {
    QueryOracleProviderPricesResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryOracleProviderPricesResponseDefaultTypeInternal _QueryOracleProviderPricesResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryOraclePriceRequest::QueryOraclePriceRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.base_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.quote_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.oracle_type_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QueryOraclePriceRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryOraclePriceRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryOraclePriceRequestDefaultTypeInternal() {}
  union {
    QueryOraclePriceRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryOraclePriceRequestDefaultTypeInternal _QueryOraclePriceRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR PricePairState::PricePairState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pair_price_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.base_price_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.quote_price_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.base_cumulative_price_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.quote_cumulative_price_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.base_timestamp_)*/ ::int64_t{0}

  , /*decltype(_impl_.quote_timestamp_)*/ ::int64_t{0}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PricePairStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PricePairStateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PricePairStateDefaultTypeInternal() {}
  union {
    PricePairState _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PricePairStateDefaultTypeInternal _PricePairState_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryOraclePriceResponse::QueryOraclePriceResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.price_pair_state_)*/nullptr} {}
struct QueryOraclePriceResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryOraclePriceResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryOraclePriceResponseDefaultTypeInternal() {}
  union {
    QueryOraclePriceResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryOraclePriceResponseDefaultTypeInternal _QueryOraclePriceResponse_default_instance_;
}  // namespace v1beta1
}  // namespace oracle
}  // namespace injective
static ::_pb::Metadata file_level_metadata_injective_2foracle_2fv1beta1_2fquery_2eproto[32];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_injective_2foracle_2fv1beta1_2fquery_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_injective_2foracle_2fv1beta1_2fquery_2eproto = nullptr;
const ::uint32_t TableStruct_injective_2foracle_2fv1beta1_2fquery_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::QueryPythPriceRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::QueryPythPriceRequest, _impl_.price_id_),
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::QueryPythPriceResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::QueryPythPriceResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::QueryPythPriceResponse, _impl_.price_state_),
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::QueryParamsRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::QueryParamsResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::QueryParamsResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::QueryParamsResponse, _impl_.params_),
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::QueryBandRelayersRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::QueryBandRelayersResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::QueryBandRelayersResponse, _impl_.relayers_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::QueryBandPriceStatesRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::QueryBandPriceStatesResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::QueryBandPriceStatesResponse, _impl_.price_states_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::QueryBandIBCPriceStatesRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::QueryBandIBCPriceStatesResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::QueryBandIBCPriceStatesResponse, _impl_.price_states_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::QueryPriceFeedPriceStatesRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::QueryPriceFeedPriceStatesResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::QueryPriceFeedPriceStatesResponse, _impl_.price_states_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::QueryCoinbasePriceStatesRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::QueryCoinbasePriceStatesResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::QueryCoinbasePriceStatesResponse, _impl_.price_states_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::QueryPythPriceStatesRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::QueryPythPriceStatesResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::QueryPythPriceStatesResponse, _impl_.price_states_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::QueryProviderPriceStateRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::QueryProviderPriceStateRequest, _impl_.provider_),
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::QueryProviderPriceStateRequest, _impl_.symbol_),
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::QueryProviderPriceStateResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::QueryProviderPriceStateResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::QueryProviderPriceStateResponse, _impl_.price_state_),
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::QueryModuleStateRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::QueryModuleStateResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::QueryModuleStateResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::QueryModuleStateResponse, _impl_.state_),
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::QueryHistoricalPriceRecordsRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::QueryHistoricalPriceRecordsRequest, _impl_.oracle_),
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::QueryHistoricalPriceRecordsRequest, _impl_.symbol_id_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::QueryHistoricalPriceRecordsResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::QueryHistoricalPriceRecordsResponse, _impl_.price_records_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::OracleHistoryOptions, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::OracleHistoryOptions, _impl_.max_age_),
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::OracleHistoryOptions, _impl_.include_raw_history_),
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::OracleHistoryOptions, _impl_.include_metadata_),
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::QueryOracleVolatilityRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::QueryOracleVolatilityRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::QueryOracleVolatilityRequest, _impl_.base_info_),
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::QueryOracleVolatilityRequest, _impl_.quote_info_),
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::QueryOracleVolatilityRequest, _impl_.oracle_history_options_),
    0,
    1,
    2,
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::QueryOracleVolatilityResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::QueryOracleVolatilityResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::QueryOracleVolatilityResponse, _impl_.volatility_),
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::QueryOracleVolatilityResponse, _impl_.history_metadata_),
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::QueryOracleVolatilityResponse, _impl_.raw_history_),
    ~0u,
    0,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::QueryOracleProvidersInfoRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::QueryOracleProvidersInfoResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::QueryOracleProvidersInfoResponse, _impl_.providers_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::QueryOracleProviderPricesRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::QueryOracleProviderPricesRequest, _impl_.provider_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::QueryOracleProviderPricesResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::QueryOracleProviderPricesResponse, _impl_.providerstate_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::QueryOraclePriceRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::QueryOraclePriceRequest, _impl_.oracle_type_),
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::QueryOraclePriceRequest, _impl_.base_),
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::QueryOraclePriceRequest, _impl_.quote_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::PricePairState, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::PricePairState, _impl_.pair_price_),
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::PricePairState, _impl_.base_price_),
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::PricePairState, _impl_.quote_price_),
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::PricePairState, _impl_.base_cumulative_price_),
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::PricePairState, _impl_.quote_cumulative_price_),
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::PricePairState, _impl_.base_timestamp_),
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::PricePairState, _impl_.quote_timestamp_),
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::QueryOraclePriceResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::QueryOraclePriceResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::QueryOraclePriceResponse, _impl_.price_pair_state_),
    0,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::injective::oracle::v1beta1::QueryPythPriceRequest)},
        { 9, 18, -1, sizeof(::injective::oracle::v1beta1::QueryPythPriceResponse)},
        { 19, -1, -1, sizeof(::injective::oracle::v1beta1::QueryParamsRequest)},
        { 27, 36, -1, sizeof(::injective::oracle::v1beta1::QueryParamsResponse)},
        { 37, -1, -1, sizeof(::injective::oracle::v1beta1::QueryBandRelayersRequest)},
        { 45, -1, -1, sizeof(::injective::oracle::v1beta1::QueryBandRelayersResponse)},
        { 54, -1, -1, sizeof(::injective::oracle::v1beta1::QueryBandPriceStatesRequest)},
        { 62, -1, -1, sizeof(::injective::oracle::v1beta1::QueryBandPriceStatesResponse)},
        { 71, -1, -1, sizeof(::injective::oracle::v1beta1::QueryBandIBCPriceStatesRequest)},
        { 79, -1, -1, sizeof(::injective::oracle::v1beta1::QueryBandIBCPriceStatesResponse)},
        { 88, -1, -1, sizeof(::injective::oracle::v1beta1::QueryPriceFeedPriceStatesRequest)},
        { 96, -1, -1, sizeof(::injective::oracle::v1beta1::QueryPriceFeedPriceStatesResponse)},
        { 105, -1, -1, sizeof(::injective::oracle::v1beta1::QueryCoinbasePriceStatesRequest)},
        { 113, -1, -1, sizeof(::injective::oracle::v1beta1::QueryCoinbasePriceStatesResponse)},
        { 122, -1, -1, sizeof(::injective::oracle::v1beta1::QueryPythPriceStatesRequest)},
        { 130, -1, -1, sizeof(::injective::oracle::v1beta1::QueryPythPriceStatesResponse)},
        { 139, -1, -1, sizeof(::injective::oracle::v1beta1::QueryProviderPriceStateRequest)},
        { 149, 158, -1, sizeof(::injective::oracle::v1beta1::QueryProviderPriceStateResponse)},
        { 159, -1, -1, sizeof(::injective::oracle::v1beta1::QueryModuleStateRequest)},
        { 167, 176, -1, sizeof(::injective::oracle::v1beta1::QueryModuleStateResponse)},
        { 177, -1, -1, sizeof(::injective::oracle::v1beta1::QueryHistoricalPriceRecordsRequest)},
        { 187, -1, -1, sizeof(::injective::oracle::v1beta1::QueryHistoricalPriceRecordsResponse)},
        { 196, -1, -1, sizeof(::injective::oracle::v1beta1::OracleHistoryOptions)},
        { 207, 218, -1, sizeof(::injective::oracle::v1beta1::QueryOracleVolatilityRequest)},
        { 221, 232, -1, sizeof(::injective::oracle::v1beta1::QueryOracleVolatilityResponse)},
        { 235, -1, -1, sizeof(::injective::oracle::v1beta1::QueryOracleProvidersInfoRequest)},
        { 243, -1, -1, sizeof(::injective::oracle::v1beta1::QueryOracleProvidersInfoResponse)},
        { 252, -1, -1, sizeof(::injective::oracle::v1beta1::QueryOracleProviderPricesRequest)},
        { 261, -1, -1, sizeof(::injective::oracle::v1beta1::QueryOracleProviderPricesResponse)},
        { 270, -1, -1, sizeof(::injective::oracle::v1beta1::QueryOraclePriceRequest)},
        { 281, -1, -1, sizeof(::injective::oracle::v1beta1::PricePairState)},
        { 296, 305, -1, sizeof(::injective::oracle::v1beta1::QueryOraclePriceResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::injective::oracle::v1beta1::_QueryPythPriceRequest_default_instance_._instance,
    &::injective::oracle::v1beta1::_QueryPythPriceResponse_default_instance_._instance,
    &::injective::oracle::v1beta1::_QueryParamsRequest_default_instance_._instance,
    &::injective::oracle::v1beta1::_QueryParamsResponse_default_instance_._instance,
    &::injective::oracle::v1beta1::_QueryBandRelayersRequest_default_instance_._instance,
    &::injective::oracle::v1beta1::_QueryBandRelayersResponse_default_instance_._instance,
    &::injective::oracle::v1beta1::_QueryBandPriceStatesRequest_default_instance_._instance,
    &::injective::oracle::v1beta1::_QueryBandPriceStatesResponse_default_instance_._instance,
    &::injective::oracle::v1beta1::_QueryBandIBCPriceStatesRequest_default_instance_._instance,
    &::injective::oracle::v1beta1::_QueryBandIBCPriceStatesResponse_default_instance_._instance,
    &::injective::oracle::v1beta1::_QueryPriceFeedPriceStatesRequest_default_instance_._instance,
    &::injective::oracle::v1beta1::_QueryPriceFeedPriceStatesResponse_default_instance_._instance,
    &::injective::oracle::v1beta1::_QueryCoinbasePriceStatesRequest_default_instance_._instance,
    &::injective::oracle::v1beta1::_QueryCoinbasePriceStatesResponse_default_instance_._instance,
    &::injective::oracle::v1beta1::_QueryPythPriceStatesRequest_default_instance_._instance,
    &::injective::oracle::v1beta1::_QueryPythPriceStatesResponse_default_instance_._instance,
    &::injective::oracle::v1beta1::_QueryProviderPriceStateRequest_default_instance_._instance,
    &::injective::oracle::v1beta1::_QueryProviderPriceStateResponse_default_instance_._instance,
    &::injective::oracle::v1beta1::_QueryModuleStateRequest_default_instance_._instance,
    &::injective::oracle::v1beta1::_QueryModuleStateResponse_default_instance_._instance,
    &::injective::oracle::v1beta1::_QueryHistoricalPriceRecordsRequest_default_instance_._instance,
    &::injective::oracle::v1beta1::_QueryHistoricalPriceRecordsResponse_default_instance_._instance,
    &::injective::oracle::v1beta1::_OracleHistoryOptions_default_instance_._instance,
    &::injective::oracle::v1beta1::_QueryOracleVolatilityRequest_default_instance_._instance,
    &::injective::oracle::v1beta1::_QueryOracleVolatilityResponse_default_instance_._instance,
    &::injective::oracle::v1beta1::_QueryOracleProvidersInfoRequest_default_instance_._instance,
    &::injective::oracle::v1beta1::_QueryOracleProvidersInfoResponse_default_instance_._instance,
    &::injective::oracle::v1beta1::_QueryOracleProviderPricesRequest_default_instance_._instance,
    &::injective::oracle::v1beta1::_QueryOracleProviderPricesResponse_default_instance_._instance,
    &::injective::oracle::v1beta1::_QueryOraclePriceRequest_default_instance_._instance,
    &::injective::oracle::v1beta1::_PricePairState_default_instance_._instance,
    &::injective::oracle::v1beta1::_QueryOraclePriceResponse_default_instance_._instance,
};
const char descriptor_table_protodef_injective_2foracle_2fv1beta1_2fquery_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n$injective/oracle/v1beta1/query.proto\022\030"
    "injective.oracle.v1beta1\032\034google/api/ann"
    "otations.proto\032%injective/oracle/v1beta1"
    "/oracle.proto\032&injective/oracle/v1beta1/"
    "genesis.proto\032\024gogoproto/gogo.proto\"2\n\025Q"
    "ueryPythPriceRequest\022\031\n\010price_id\030\001 \001(\tR\007"
    "priceId\"c\n\026QueryPythPriceResponse\022I\n\013pri"
    "ce_state\030\001 \001(\0132(.injective.oracle.v1beta"
    "1.PythPriceStateR\npriceState\"\024\n\022QueryPar"
    "amsRequest\"U\n\023QueryParamsResponse\022>\n\006par"
    "ams\030\001 \001(\0132 .injective.oracle.v1beta1.Par"
    "amsB\004\310\336\037\000R\006params\"\032\n\030QueryBandRelayersRe"
    "quest\"7\n\031QueryBandRelayersResponse\022\032\n\010re"
    "layers\030\001 \003(\tR\010relayers\"\035\n\033QueryBandPrice"
    "StatesRequest\"k\n\034QueryBandPriceStatesRes"
    "ponse\022K\n\014price_states\030\001 \003(\0132(.injective."
    "oracle.v1beta1.BandPriceStateR\013priceStat"
    "es\" \n\036QueryBandIBCPriceStatesRequest\"n\n\037"
    "QueryBandIBCPriceStatesResponse\022K\n\014price"
    "_states\030\001 \003(\0132(.injective.oracle.v1beta1"
    ".BandPriceStateR\013priceStates\"\"\n QueryPri"
    "ceFeedPriceStatesRequest\"p\n!QueryPriceFe"
    "edPriceStatesResponse\022K\n\014price_states\030\001 "
    "\003(\0132(.injective.oracle.v1beta1.PriceFeed"
    "StateR\013priceStates\"!\n\037QueryCoinbasePrice"
    "StatesRequest\"s\n QueryCoinbasePriceState"
    "sResponse\022O\n\014price_states\030\001 \003(\0132,.inject"
    "ive.oracle.v1beta1.CoinbasePriceStateR\013p"
    "riceStates\"\035\n\033QueryPythPriceStatesReques"
    "t\"k\n\034QueryPythPriceStatesResponse\022K\n\014pri"
    "ce_states\030\001 \003(\0132(.injective.oracle.v1bet"
    "a1.PythPriceStateR\013priceStates\"T\n\036QueryP"
    "roviderPriceStateRequest\022\032\n\010provider\030\001 \001"
    "(\tR\010provider\022\026\n\006symbol\030\002 \001(\tR\006symbol\"h\n\037"
    "QueryProviderPriceStateResponse\022E\n\013price"
    "_state\030\001 \001(\0132$.injective.oracle.v1beta1."
    "PriceStateR\npriceState\"\031\n\027QueryModuleSta"
    "teRequest\"X\n\030QueryModuleStateResponse\022<\n"
    "\005state\030\001 \001(\0132&.injective.oracle.v1beta1."
    "GenesisStateR\005state\"\177\n\"QueryHistoricalPr"
    "iceRecordsRequest\022<\n\006oracle\030\001 \001(\0162$.inje"
    "ctive.oracle.v1beta1.OracleTypeR\006oracle\022"
    "\033\n\tsymbol_id\030\002 \001(\tR\010symbolId\"r\n#QueryHis"
    "toricalPriceRecordsResponse\022K\n\rprice_rec"
    "ords\030\001 \003(\0132&.injective.oracle.v1beta1.Pr"
    "iceRecordsR\014priceRecords\"\212\001\n\024OracleHisto"
    "ryOptions\022\027\n\007max_age\030\001 \001(\004R\006maxAge\022.\n\023in"
    "clude_raw_history\030\002 \001(\010R\021includeRawHisto"
    "ry\022)\n\020include_metadata\030\003 \001(\010R\017includeMet"
    "adata\"\214\002\n\034QueryOracleVolatilityRequest\022A"
    "\n\tbase_info\030\001 \001(\0132$.injective.oracle.v1b"
    "eta1.OracleInfoR\010baseInfo\022C\n\nquote_info\030"
    "\002 \001(\0132$.injective.oracle.v1beta1.OracleI"
    "nfoR\tquoteInfo\022d\n\026oracle_history_options"
    "\030\003 \001(\0132..injective.oracle.v1beta1.Oracle"
    "HistoryOptionsR\024oracleHistoryOptions\"\214\002\n"
    "\035QueryOracleVolatilityResponse\022J\n\nvolati"
    "lity\030\001 \001(\tB*\332\336\037&github.com/cosmos/cosmos"
    "-sdk/types.DecR\nvolatility\022W\n\020history_me"
    "tadata\030\002 \001(\0132,.injective.oracle.v1beta1."
    "MetadataStatisticsR\017historyMetadata\022F\n\013r"
    "aw_history\030\003 \003(\0132%.injective.oracle.v1be"
    "ta1.PriceRecordR\nrawHistory\"!\n\037QueryOrac"
    "leProvidersInfoRequest\"h\n QueryOraclePro"
    "vidersInfoResponse\022D\n\tproviders\030\001 \003(\0132&."
    "injective.oracle.v1beta1.ProviderInfoR\tp"
    "roviders\">\n QueryOracleProviderPricesReq"
    "uest\022\032\n\010provider\030\001 \001(\tR\010provider\"r\n!Quer"
    "yOracleProviderPricesResponse\022M\n\rprovide"
    "rState\030\001 \003(\0132\'.injective.oracle.v1beta1."
    "ProviderStateR\rproviderState\"\212\001\n\027QueryOr"
    "aclePriceRequest\022E\n\013oracle_type\030\001 \001(\0162$."
    "injective.oracle.v1beta1.OracleTypeR\nora"
    "cleType\022\022\n\004base\030\002 \001(\tR\004base\022\024\n\005quote\030\003 \001"
    "(\tR\005quote\"\231\004\n\016PricePairState\022M\n\npair_pri"
    "ce\030\001 \001(\tB.\310\336\037\000\332\336\037&github.com/cosmos/cosm"
    "os-sdk/types.DecR\tpairPrice\022M\n\nbase_pric"
    "e\030\002 \001(\tB.\310\336\037\000\332\336\037&github.com/cosmos/cosmo"
    "s-sdk/types.DecR\tbasePrice\022O\n\013quote_pric"
    "e\030\003 \001(\tB.\310\336\037\000\332\336\037&github.com/cosmos/cosmo"
    "s-sdk/types.DecR\nquotePrice\022b\n\025base_cumu"
    "lative_price\030\004 \001(\tB.\310\336\037\000\332\336\037&github.com/c"
    "osmos/cosmos-sdk/types.DecR\023baseCumulati"
    "vePrice\022d\n\026quote_cumulative_price\030\005 \001(\tB"
    ".\310\336\037\000\332\336\037&github.com/cosmos/cosmos-sdk/ty"
    "pes.DecR\024quoteCumulativePrice\022%\n\016base_ti"
    "mestamp\030\006 \001(\003R\rbaseTimestamp\022\'\n\017quote_ti"
    "mestamp\030\007 \001(\003R\016quoteTimestamp\"n\n\030QueryOr"
    "aclePriceResponse\022R\n\020price_pair_state\030\001 "
    "\001(\0132(.injective.oracle.v1beta1.PricePair"
    "StateR\016pricePairState2\332\025\n\005Query\022\217\001\n\006Para"
    "ms\022,.injective.oracle.v1beta1.QueryParam"
    "sRequest\032-.injective.oracle.v1beta1.Quer"
    "yParamsResponse\"(\202\323\344\223\002\"\022 /injective/orac"
    "le/v1beta1/params\022\250\001\n\014BandRelayers\0222.inj"
    "ective.oracle.v1beta1.QueryBandRelayersR"
    "equest\0323.injective.oracle.v1beta1.QueryB"
    "andRelayersResponse\"/\202\323\344\223\002)\022\'/injective/"
    "oracle/v1beta1/band_relayers\022\265\001\n\017BandPri"
    "ceStates\0225.injective.oracle.v1beta1.Quer"
    "yBandPriceStatesRequest\0326.injective.orac"
    "le.v1beta1.QueryBandPriceStatesResponse\""
    "3\202\323\344\223\002-\022+/injective/oracle/v1beta1/band_"
    "price_states\022\302\001\n\022BandIBCPriceStates\0228.in"
    "jective.oracle.v1beta1.QueryBandIBCPrice"
    "StatesRequest\0329.injective.oracle.v1beta1"
    ".QueryBandIBCPriceStatesResponse\"7\202\323\344\223\0021"
    "\022//injective/oracle/v1beta1/band_ibc_pri"
    "ce_states\022\311\001\n\024PriceFeedPriceStates\022:.inj"
    "ective.oracle.v1beta1.QueryPriceFeedPric"
    "eStatesRequest\032;.injective.oracle.v1beta"
    "1.QueryPriceFeedPriceStatesResponse\"8\202\323\344"
    "\223\0022\0220/injective/oracle/v1beta1/pricefeed"
    "_price_states\022\305\001\n\023CoinbasePriceStates\0229."
    "injective.oracle.v1beta1.QueryCoinbasePr"
    "iceStatesRequest\032:.injective.oracle.v1be"
    "ta1.QueryCoinbasePriceStatesResponse\"7\202\323"
    "\344\223\0021\022//injective/oracle/v1beta1/coinbase"
    "_price_states\022\265\001\n\017PythPriceStates\0225.inje"
    "ctive.oracle.v1beta1.QueryPythPriceState"
    "sRequest\0326.injective.oracle.v1beta1.Quer"
    "yPythPriceStatesResponse\"3\202\323\344\223\002-\022+/injec"
    "tive/oracle/v1beta1/pyth_price_states\022\325\001"
    "\n\022ProviderPriceState\0228.injective.oracle."
    "v1beta1.QueryProviderPriceStateRequest\0329"
    ".injective.oracle.v1beta1.QueryProviderP"
    "riceStateResponse\"J\202\323\344\223\002D\022B/injective/or"
    "acle/v1beta1/provider_price_state/{provi"
    "der}/{symbol}\022\252\001\n\021OracleModuleState\0221.in"
    "jective.oracle.v1beta1.QueryModuleStateR"
    "equest\0322.injective.oracle.v1beta1.QueryM"
    "oduleStateResponse\".\202\323\344\223\002(\022&/injective/o"
    "racle/v1beta1/module_state\022\321\001\n\026Historica"
    "lPriceRecords\022<.injective.oracle.v1beta1"
    ".QueryHistoricalPriceRecordsRequest\032=.in"
    "jective.oracle.v1beta1.QueryHistoricalPr"
    "iceRecordsResponse\":\202\323\344\223\0024\0222/injective/o"
    "racle/v1beta1/historical_price_records\022\261"
    "\001\n\020OracleVolatility\0226.injective.oracle.v"
    "1beta1.QueryOracleVolatilityRequest\0327.in"
    "jective.oracle.v1beta1.QueryOracleVolati"
    "lityResponse\",\202\323\344\223\002&\022$/injective/oracle/"
    "v1beta1/volatility\022\271\001\n\023OracleProvidersIn"
    "fo\0229.injective.oracle.v1beta1.QueryOracl"
    "eProvidersInfoRequest\032:.injective.oracle"
    ".v1beta1.QueryOracleProvidersInfoRespons"
    "e\"+\202\323\344\223\002%\022#/injective/oracle/v1beta1/pro"
    "viders\022\302\001\n\024OracleProviderPrices\022:.inject"
    "ive.oracle.v1beta1.QueryOracleProviderPr"
    "icesRequest\032;.injective.oracle.v1beta1.Q"
    "ueryOracleProviderPricesResponse\"1\202\323\344\223\002+"
    "\022)/injective/oracle/v1beta1/provider_pri"
    "ces\022\235\001\n\013OraclePrice\0221.injective.oracle.v"
    "1beta1.QueryOraclePriceRequest\0322.injecti"
    "ve.oracle.v1beta1.QueryOraclePriceRespon"
    "se\"\'\202\323\344\223\002!\022\037/injective/oracle/v1beta1/pr"
    "ice\022\234\001\n\tPythPrice\022/.injective.oracle.v1b"
    "eta1.QueryPythPriceRequest\0320.injective.o"
    "racle.v1beta1.QueryPythPriceResponse\",\202\323"
    "\344\223\002&\022$/injective/oracle/v1beta1/pyth_pri"
    "ceB\372\001\n\034com.injective.oracle.v1beta1B\nQue"
    "ryProtoP\001ZLgithub.com/InjectiveLabs/inje"
    "ctive-core/injective-chain/modules/oracl"
    "e/types\242\002\003IOX\252\002\030Injective.Oracle.V1beta1"
    "\312\002\030Injective\\Oracle\\V1beta1\342\002$Injective\\"
    "Oracle\\V1beta1\\GPBMetadata\352\002\032Injective::"
    "Oracle::V1beta1b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_injective_2foracle_2fv1beta1_2fquery_2eproto_deps[4] =
    {
        &::descriptor_table_gogoproto_2fgogo_2eproto,
        &::descriptor_table_google_2fapi_2fannotations_2eproto,
        &::descriptor_table_injective_2foracle_2fv1beta1_2fgenesis_2eproto,
        &::descriptor_table_injective_2foracle_2fv1beta1_2foracle_2eproto,
};
static ::absl::once_flag descriptor_table_injective_2foracle_2fv1beta1_2fquery_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_injective_2foracle_2fv1beta1_2fquery_2eproto = {
    false,
    false,
    6663,
    descriptor_table_protodef_injective_2foracle_2fv1beta1_2fquery_2eproto,
    "injective/oracle/v1beta1/query.proto",
    &descriptor_table_injective_2foracle_2fv1beta1_2fquery_2eproto_once,
    descriptor_table_injective_2foracle_2fv1beta1_2fquery_2eproto_deps,
    4,
    32,
    schemas,
    file_default_instances,
    TableStruct_injective_2foracle_2fv1beta1_2fquery_2eproto::offsets,
    file_level_metadata_injective_2foracle_2fv1beta1_2fquery_2eproto,
    file_level_enum_descriptors_injective_2foracle_2fv1beta1_2fquery_2eproto,
    file_level_service_descriptors_injective_2foracle_2fv1beta1_2fquery_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_injective_2foracle_2fv1beta1_2fquery_2eproto_getter() {
  return &descriptor_table_injective_2foracle_2fv1beta1_2fquery_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_injective_2foracle_2fv1beta1_2fquery_2eproto(&descriptor_table_injective_2foracle_2fv1beta1_2fquery_2eproto);
namespace injective {
namespace oracle {
namespace v1beta1 {
// ===================================================================

class QueryPythPriceRequest::_Internal {
 public:
};

QueryPythPriceRequest::QueryPythPriceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.oracle.v1beta1.QueryPythPriceRequest)
}
QueryPythPriceRequest::QueryPythPriceRequest(const QueryPythPriceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryPythPriceRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.price_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.price_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.price_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_price_id().empty()) {
    _this->_impl_.price_id_.Set(from._internal_price_id(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:injective.oracle.v1beta1.QueryPythPriceRequest)
}

inline void QueryPythPriceRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.price_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.price_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.price_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

QueryPythPriceRequest::~QueryPythPriceRequest() {
  // @@protoc_insertion_point(destructor:injective.oracle.v1beta1.QueryPythPriceRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryPythPriceRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.price_id_.Destroy();
}

void QueryPythPriceRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryPythPriceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.oracle.v1beta1.QueryPythPriceRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.price_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryPythPriceRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string price_id = 1 [json_name = "priceId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_price_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.oracle.v1beta1.QueryPythPriceRequest.price_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryPythPriceRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.oracle.v1beta1.QueryPythPriceRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string price_id = 1 [json_name = "priceId"];
  if (!this->_internal_price_id().empty()) {
    const std::string& _s = this->_internal_price_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.oracle.v1beta1.QueryPythPriceRequest.price_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.oracle.v1beta1.QueryPythPriceRequest)
  return target;
}

::size_t QueryPythPriceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.oracle.v1beta1.QueryPythPriceRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string price_id = 1 [json_name = "priceId"];
  if (!this->_internal_price_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_price_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryPythPriceRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryPythPriceRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryPythPriceRequest::GetClassData() const { return &_class_data_; }


void QueryPythPriceRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryPythPriceRequest*>(&to_msg);
  auto& from = static_cast<const QueryPythPriceRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.oracle.v1beta1.QueryPythPriceRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_price_id().empty()) {
    _this->_internal_set_price_id(from._internal_price_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryPythPriceRequest::CopyFrom(const QueryPythPriceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.oracle.v1beta1.QueryPythPriceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryPythPriceRequest::IsInitialized() const {
  return true;
}

void QueryPythPriceRequest::InternalSwap(QueryPythPriceRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.price_id_, lhs_arena,
                                       &other->_impl_.price_id_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryPythPriceRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2foracle_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2foracle_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2foracle_2fv1beta1_2fquery_2eproto[0]);
}
// ===================================================================

class QueryPythPriceResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<QueryPythPriceResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(QueryPythPriceResponse, _impl_._has_bits_);
  static const ::injective::oracle::v1beta1::PythPriceState& price_state(const QueryPythPriceResponse* msg);
  static void set_has_price_state(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::injective::oracle::v1beta1::PythPriceState&
QueryPythPriceResponse::_Internal::price_state(const QueryPythPriceResponse* msg) {
  return *msg->_impl_.price_state_;
}
void QueryPythPriceResponse::clear_price_state() {
  if (_impl_.price_state_ != nullptr) _impl_.price_state_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
QueryPythPriceResponse::QueryPythPriceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.oracle.v1beta1.QueryPythPriceResponse)
}
QueryPythPriceResponse::QueryPythPriceResponse(const QueryPythPriceResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryPythPriceResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.price_state_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.price_state_ = new ::injective::oracle::v1beta1::PythPriceState(*from._impl_.price_state_);
  }
  // @@protoc_insertion_point(copy_constructor:injective.oracle.v1beta1.QueryPythPriceResponse)
}

inline void QueryPythPriceResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.price_state_){nullptr}
  };
}

QueryPythPriceResponse::~QueryPythPriceResponse() {
  // @@protoc_insertion_point(destructor:injective.oracle.v1beta1.QueryPythPriceResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryPythPriceResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.price_state_;
}

void QueryPythPriceResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryPythPriceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.oracle.v1beta1.QueryPythPriceResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.price_state_ != nullptr);
    _impl_.price_state_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryPythPriceResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .injective.oracle.v1beta1.PythPriceState price_state = 1 [json_name = "priceState"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_price_state(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryPythPriceResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.oracle.v1beta1.QueryPythPriceResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .injective.oracle.v1beta1.PythPriceState price_state = 1 [json_name = "priceState"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::price_state(this),
        _Internal::price_state(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.oracle.v1beta1.QueryPythPriceResponse)
  return target;
}

::size_t QueryPythPriceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.oracle.v1beta1.QueryPythPriceResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .injective.oracle.v1beta1.PythPriceState price_state = 1 [json_name = "priceState"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.price_state_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryPythPriceResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryPythPriceResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryPythPriceResponse::GetClassData() const { return &_class_data_; }


void QueryPythPriceResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryPythPriceResponse*>(&to_msg);
  auto& from = static_cast<const QueryPythPriceResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.oracle.v1beta1.QueryPythPriceResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_price_state()->::injective::oracle::v1beta1::PythPriceState::MergeFrom(
        from._internal_price_state());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryPythPriceResponse::CopyFrom(const QueryPythPriceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.oracle.v1beta1.QueryPythPriceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryPythPriceResponse::IsInitialized() const {
  return true;
}

void QueryPythPriceResponse::InternalSwap(QueryPythPriceResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.price_state_, other->_impl_.price_state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryPythPriceResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2foracle_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2foracle_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2foracle_2fv1beta1_2fquery_2eproto[1]);
}
// ===================================================================

class QueryParamsRequest::_Internal {
 public:
};

QueryParamsRequest::QueryParamsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:injective.oracle.v1beta1.QueryParamsRequest)
}
QueryParamsRequest::QueryParamsRequest(const QueryParamsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  QueryParamsRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:injective.oracle.v1beta1.QueryParamsRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryParamsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryParamsRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata QueryParamsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2foracle_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2foracle_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2foracle_2fv1beta1_2fquery_2eproto[2]);
}
// ===================================================================

class QueryParamsResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<QueryParamsResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(QueryParamsResponse, _impl_._has_bits_);
  static const ::injective::oracle::v1beta1::Params& params(const QueryParamsResponse* msg);
  static void set_has_params(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::injective::oracle::v1beta1::Params&
QueryParamsResponse::_Internal::params(const QueryParamsResponse* msg) {
  return *msg->_impl_.params_;
}
void QueryParamsResponse::clear_params() {
  if (_impl_.params_ != nullptr) _impl_.params_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
QueryParamsResponse::QueryParamsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.oracle.v1beta1.QueryParamsResponse)
}
QueryParamsResponse::QueryParamsResponse(const QueryParamsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryParamsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.params_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.params_ = new ::injective::oracle::v1beta1::Params(*from._impl_.params_);
  }
  // @@protoc_insertion_point(copy_constructor:injective.oracle.v1beta1.QueryParamsResponse)
}

inline void QueryParamsResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.params_){nullptr}
  };
}

QueryParamsResponse::~QueryParamsResponse() {
  // @@protoc_insertion_point(destructor:injective.oracle.v1beta1.QueryParamsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryParamsResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.params_;
}

void QueryParamsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryParamsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.oracle.v1beta1.QueryParamsResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.params_ != nullptr);
    _impl_.params_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryParamsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .injective.oracle.v1beta1.Params params = 1 [json_name = "params", (.gogoproto.nullable) = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_params(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryParamsResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.oracle.v1beta1.QueryParamsResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .injective.oracle.v1beta1.Params params = 1 [json_name = "params", (.gogoproto.nullable) = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::params(this),
        _Internal::params(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.oracle.v1beta1.QueryParamsResponse)
  return target;
}

::size_t QueryParamsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.oracle.v1beta1.QueryParamsResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .injective.oracle.v1beta1.Params params = 1 [json_name = "params", (.gogoproto.nullable) = false];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.params_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryParamsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryParamsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryParamsResponse::GetClassData() const { return &_class_data_; }


void QueryParamsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryParamsResponse*>(&to_msg);
  auto& from = static_cast<const QueryParamsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.oracle.v1beta1.QueryParamsResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_params()->::injective::oracle::v1beta1::Params::MergeFrom(
        from._internal_params());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryParamsResponse::CopyFrom(const QueryParamsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.oracle.v1beta1.QueryParamsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryParamsResponse::IsInitialized() const {
  return true;
}

void QueryParamsResponse::InternalSwap(QueryParamsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.params_, other->_impl_.params_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryParamsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2foracle_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2foracle_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2foracle_2fv1beta1_2fquery_2eproto[3]);
}
// ===================================================================

class QueryBandRelayersRequest::_Internal {
 public:
};

QueryBandRelayersRequest::QueryBandRelayersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:injective.oracle.v1beta1.QueryBandRelayersRequest)
}
QueryBandRelayersRequest::QueryBandRelayersRequest(const QueryBandRelayersRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  QueryBandRelayersRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:injective.oracle.v1beta1.QueryBandRelayersRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryBandRelayersRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryBandRelayersRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata QueryBandRelayersRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2foracle_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2foracle_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2foracle_2fv1beta1_2fquery_2eproto[4]);
}
// ===================================================================

class QueryBandRelayersResponse::_Internal {
 public:
};

QueryBandRelayersResponse::QueryBandRelayersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.oracle.v1beta1.QueryBandRelayersResponse)
}
QueryBandRelayersResponse::QueryBandRelayersResponse(const QueryBandRelayersResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryBandRelayersResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.relayers_){from._impl_.relayers_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:injective.oracle.v1beta1.QueryBandRelayersResponse)
}

inline void QueryBandRelayersResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.relayers_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

QueryBandRelayersResponse::~QueryBandRelayersResponse() {
  // @@protoc_insertion_point(destructor:injective.oracle.v1beta1.QueryBandRelayersResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryBandRelayersResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_relayers()->~RepeatedPtrField();
}

void QueryBandRelayersResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryBandRelayersResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.oracle.v1beta1.QueryBandRelayersResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_relayers()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryBandRelayersResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string relayers = 1 [json_name = "relayers"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_relayers();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "injective.oracle.v1beta1.QueryBandRelayersResponse.relayers"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryBandRelayersResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.oracle.v1beta1.QueryBandRelayersResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string relayers = 1 [json_name = "relayers"];
  for (int i = 0, n = this->_internal_relayers_size(); i < n; ++i) {
    const auto& s = this->_internal_relayers(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.oracle.v1beta1.QueryBandRelayersResponse.relayers");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.oracle.v1beta1.QueryBandRelayersResponse)
  return target;
}

::size_t QueryBandRelayersResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.oracle.v1beta1.QueryBandRelayersResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string relayers = 1 [json_name = "relayers"];
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_relayers().size());
  for (int i = 0, n = _internal_relayers().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_relayers().Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryBandRelayersResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryBandRelayersResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryBandRelayersResponse::GetClassData() const { return &_class_data_; }


void QueryBandRelayersResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryBandRelayersResponse*>(&to_msg);
  auto& from = static_cast<const QueryBandRelayersResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.oracle.v1beta1.QueryBandRelayersResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_relayers()->MergeFrom(from._internal_relayers());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryBandRelayersResponse::CopyFrom(const QueryBandRelayersResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.oracle.v1beta1.QueryBandRelayersResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryBandRelayersResponse::IsInitialized() const {
  return true;
}

void QueryBandRelayersResponse::InternalSwap(QueryBandRelayersResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_relayers()->InternalSwap(
      other->_internal_mutable_relayers());
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryBandRelayersResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2foracle_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2foracle_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2foracle_2fv1beta1_2fquery_2eproto[5]);
}
// ===================================================================

class QueryBandPriceStatesRequest::_Internal {
 public:
};

QueryBandPriceStatesRequest::QueryBandPriceStatesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:injective.oracle.v1beta1.QueryBandPriceStatesRequest)
}
QueryBandPriceStatesRequest::QueryBandPriceStatesRequest(const QueryBandPriceStatesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  QueryBandPriceStatesRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:injective.oracle.v1beta1.QueryBandPriceStatesRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryBandPriceStatesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryBandPriceStatesRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata QueryBandPriceStatesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2foracle_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2foracle_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2foracle_2fv1beta1_2fquery_2eproto[6]);
}
// ===================================================================

class QueryBandPriceStatesResponse::_Internal {
 public:
};

void QueryBandPriceStatesResponse::clear_price_states() {
  _internal_mutable_price_states()->Clear();
}
QueryBandPriceStatesResponse::QueryBandPriceStatesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.oracle.v1beta1.QueryBandPriceStatesResponse)
}
QueryBandPriceStatesResponse::QueryBandPriceStatesResponse(const QueryBandPriceStatesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryBandPriceStatesResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.price_states_){from._impl_.price_states_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:injective.oracle.v1beta1.QueryBandPriceStatesResponse)
}

inline void QueryBandPriceStatesResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.price_states_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

QueryBandPriceStatesResponse::~QueryBandPriceStatesResponse() {
  // @@protoc_insertion_point(destructor:injective.oracle.v1beta1.QueryBandPriceStatesResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryBandPriceStatesResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_price_states()->~RepeatedPtrField();
}

void QueryBandPriceStatesResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryBandPriceStatesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.oracle.v1beta1.QueryBandPriceStatesResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_price_states()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryBandPriceStatesResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .injective.oracle.v1beta1.BandPriceState price_states = 1 [json_name = "priceStates"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_price_states(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryBandPriceStatesResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.oracle.v1beta1.QueryBandPriceStatesResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .injective.oracle.v1beta1.BandPriceState price_states = 1 [json_name = "priceStates"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_price_states_size()); i < n; i++) {
    const auto& repfield = this->_internal_price_states(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.oracle.v1beta1.QueryBandPriceStatesResponse)
  return target;
}

::size_t QueryBandPriceStatesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.oracle.v1beta1.QueryBandPriceStatesResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .injective.oracle.v1beta1.BandPriceState price_states = 1 [json_name = "priceStates"];
  total_size += 1UL * this->_internal_price_states_size();
  for (const auto& msg : this->_internal_price_states()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryBandPriceStatesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryBandPriceStatesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryBandPriceStatesResponse::GetClassData() const { return &_class_data_; }


void QueryBandPriceStatesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryBandPriceStatesResponse*>(&to_msg);
  auto& from = static_cast<const QueryBandPriceStatesResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.oracle.v1beta1.QueryBandPriceStatesResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_price_states()->MergeFrom(from._internal_price_states());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryBandPriceStatesResponse::CopyFrom(const QueryBandPriceStatesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.oracle.v1beta1.QueryBandPriceStatesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryBandPriceStatesResponse::IsInitialized() const {
  return true;
}

void QueryBandPriceStatesResponse::InternalSwap(QueryBandPriceStatesResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_price_states()->InternalSwap(other->_internal_mutable_price_states());
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryBandPriceStatesResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2foracle_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2foracle_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2foracle_2fv1beta1_2fquery_2eproto[7]);
}
// ===================================================================

class QueryBandIBCPriceStatesRequest::_Internal {
 public:
};

QueryBandIBCPriceStatesRequest::QueryBandIBCPriceStatesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:injective.oracle.v1beta1.QueryBandIBCPriceStatesRequest)
}
QueryBandIBCPriceStatesRequest::QueryBandIBCPriceStatesRequest(const QueryBandIBCPriceStatesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  QueryBandIBCPriceStatesRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:injective.oracle.v1beta1.QueryBandIBCPriceStatesRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryBandIBCPriceStatesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryBandIBCPriceStatesRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata QueryBandIBCPriceStatesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2foracle_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2foracle_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2foracle_2fv1beta1_2fquery_2eproto[8]);
}
// ===================================================================

class QueryBandIBCPriceStatesResponse::_Internal {
 public:
};

void QueryBandIBCPriceStatesResponse::clear_price_states() {
  _internal_mutable_price_states()->Clear();
}
QueryBandIBCPriceStatesResponse::QueryBandIBCPriceStatesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.oracle.v1beta1.QueryBandIBCPriceStatesResponse)
}
QueryBandIBCPriceStatesResponse::QueryBandIBCPriceStatesResponse(const QueryBandIBCPriceStatesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryBandIBCPriceStatesResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.price_states_){from._impl_.price_states_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:injective.oracle.v1beta1.QueryBandIBCPriceStatesResponse)
}

inline void QueryBandIBCPriceStatesResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.price_states_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

QueryBandIBCPriceStatesResponse::~QueryBandIBCPriceStatesResponse() {
  // @@protoc_insertion_point(destructor:injective.oracle.v1beta1.QueryBandIBCPriceStatesResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryBandIBCPriceStatesResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_price_states()->~RepeatedPtrField();
}

void QueryBandIBCPriceStatesResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryBandIBCPriceStatesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.oracle.v1beta1.QueryBandIBCPriceStatesResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_price_states()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryBandIBCPriceStatesResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .injective.oracle.v1beta1.BandPriceState price_states = 1 [json_name = "priceStates"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_price_states(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryBandIBCPriceStatesResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.oracle.v1beta1.QueryBandIBCPriceStatesResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .injective.oracle.v1beta1.BandPriceState price_states = 1 [json_name = "priceStates"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_price_states_size()); i < n; i++) {
    const auto& repfield = this->_internal_price_states(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.oracle.v1beta1.QueryBandIBCPriceStatesResponse)
  return target;
}

::size_t QueryBandIBCPriceStatesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.oracle.v1beta1.QueryBandIBCPriceStatesResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .injective.oracle.v1beta1.BandPriceState price_states = 1 [json_name = "priceStates"];
  total_size += 1UL * this->_internal_price_states_size();
  for (const auto& msg : this->_internal_price_states()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryBandIBCPriceStatesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryBandIBCPriceStatesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryBandIBCPriceStatesResponse::GetClassData() const { return &_class_data_; }


void QueryBandIBCPriceStatesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryBandIBCPriceStatesResponse*>(&to_msg);
  auto& from = static_cast<const QueryBandIBCPriceStatesResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.oracle.v1beta1.QueryBandIBCPriceStatesResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_price_states()->MergeFrom(from._internal_price_states());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryBandIBCPriceStatesResponse::CopyFrom(const QueryBandIBCPriceStatesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.oracle.v1beta1.QueryBandIBCPriceStatesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryBandIBCPriceStatesResponse::IsInitialized() const {
  return true;
}

void QueryBandIBCPriceStatesResponse::InternalSwap(QueryBandIBCPriceStatesResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_price_states()->InternalSwap(other->_internal_mutable_price_states());
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryBandIBCPriceStatesResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2foracle_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2foracle_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2foracle_2fv1beta1_2fquery_2eproto[9]);
}
// ===================================================================

class QueryPriceFeedPriceStatesRequest::_Internal {
 public:
};

QueryPriceFeedPriceStatesRequest::QueryPriceFeedPriceStatesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:injective.oracle.v1beta1.QueryPriceFeedPriceStatesRequest)
}
QueryPriceFeedPriceStatesRequest::QueryPriceFeedPriceStatesRequest(const QueryPriceFeedPriceStatesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  QueryPriceFeedPriceStatesRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:injective.oracle.v1beta1.QueryPriceFeedPriceStatesRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryPriceFeedPriceStatesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryPriceFeedPriceStatesRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata QueryPriceFeedPriceStatesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2foracle_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2foracle_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2foracle_2fv1beta1_2fquery_2eproto[10]);
}
// ===================================================================

class QueryPriceFeedPriceStatesResponse::_Internal {
 public:
};

void QueryPriceFeedPriceStatesResponse::clear_price_states() {
  _internal_mutable_price_states()->Clear();
}
QueryPriceFeedPriceStatesResponse::QueryPriceFeedPriceStatesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.oracle.v1beta1.QueryPriceFeedPriceStatesResponse)
}
QueryPriceFeedPriceStatesResponse::QueryPriceFeedPriceStatesResponse(const QueryPriceFeedPriceStatesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryPriceFeedPriceStatesResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.price_states_){from._impl_.price_states_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:injective.oracle.v1beta1.QueryPriceFeedPriceStatesResponse)
}

inline void QueryPriceFeedPriceStatesResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.price_states_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

QueryPriceFeedPriceStatesResponse::~QueryPriceFeedPriceStatesResponse() {
  // @@protoc_insertion_point(destructor:injective.oracle.v1beta1.QueryPriceFeedPriceStatesResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryPriceFeedPriceStatesResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_price_states()->~RepeatedPtrField();
}

void QueryPriceFeedPriceStatesResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryPriceFeedPriceStatesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.oracle.v1beta1.QueryPriceFeedPriceStatesResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_price_states()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryPriceFeedPriceStatesResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .injective.oracle.v1beta1.PriceFeedState price_states = 1 [json_name = "priceStates"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_price_states(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryPriceFeedPriceStatesResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.oracle.v1beta1.QueryPriceFeedPriceStatesResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .injective.oracle.v1beta1.PriceFeedState price_states = 1 [json_name = "priceStates"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_price_states_size()); i < n; i++) {
    const auto& repfield = this->_internal_price_states(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.oracle.v1beta1.QueryPriceFeedPriceStatesResponse)
  return target;
}

::size_t QueryPriceFeedPriceStatesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.oracle.v1beta1.QueryPriceFeedPriceStatesResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .injective.oracle.v1beta1.PriceFeedState price_states = 1 [json_name = "priceStates"];
  total_size += 1UL * this->_internal_price_states_size();
  for (const auto& msg : this->_internal_price_states()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryPriceFeedPriceStatesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryPriceFeedPriceStatesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryPriceFeedPriceStatesResponse::GetClassData() const { return &_class_data_; }


void QueryPriceFeedPriceStatesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryPriceFeedPriceStatesResponse*>(&to_msg);
  auto& from = static_cast<const QueryPriceFeedPriceStatesResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.oracle.v1beta1.QueryPriceFeedPriceStatesResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_price_states()->MergeFrom(from._internal_price_states());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryPriceFeedPriceStatesResponse::CopyFrom(const QueryPriceFeedPriceStatesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.oracle.v1beta1.QueryPriceFeedPriceStatesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryPriceFeedPriceStatesResponse::IsInitialized() const {
  return true;
}

void QueryPriceFeedPriceStatesResponse::InternalSwap(QueryPriceFeedPriceStatesResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_price_states()->InternalSwap(other->_internal_mutable_price_states());
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryPriceFeedPriceStatesResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2foracle_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2foracle_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2foracle_2fv1beta1_2fquery_2eproto[11]);
}
// ===================================================================

class QueryCoinbasePriceStatesRequest::_Internal {
 public:
};

QueryCoinbasePriceStatesRequest::QueryCoinbasePriceStatesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:injective.oracle.v1beta1.QueryCoinbasePriceStatesRequest)
}
QueryCoinbasePriceStatesRequest::QueryCoinbasePriceStatesRequest(const QueryCoinbasePriceStatesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  QueryCoinbasePriceStatesRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:injective.oracle.v1beta1.QueryCoinbasePriceStatesRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryCoinbasePriceStatesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryCoinbasePriceStatesRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata QueryCoinbasePriceStatesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2foracle_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2foracle_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2foracle_2fv1beta1_2fquery_2eproto[12]);
}
// ===================================================================

class QueryCoinbasePriceStatesResponse::_Internal {
 public:
};

void QueryCoinbasePriceStatesResponse::clear_price_states() {
  _internal_mutable_price_states()->Clear();
}
QueryCoinbasePriceStatesResponse::QueryCoinbasePriceStatesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.oracle.v1beta1.QueryCoinbasePriceStatesResponse)
}
QueryCoinbasePriceStatesResponse::QueryCoinbasePriceStatesResponse(const QueryCoinbasePriceStatesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryCoinbasePriceStatesResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.price_states_){from._impl_.price_states_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:injective.oracle.v1beta1.QueryCoinbasePriceStatesResponse)
}

inline void QueryCoinbasePriceStatesResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.price_states_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

QueryCoinbasePriceStatesResponse::~QueryCoinbasePriceStatesResponse() {
  // @@protoc_insertion_point(destructor:injective.oracle.v1beta1.QueryCoinbasePriceStatesResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryCoinbasePriceStatesResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_price_states()->~RepeatedPtrField();
}

void QueryCoinbasePriceStatesResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryCoinbasePriceStatesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.oracle.v1beta1.QueryCoinbasePriceStatesResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_price_states()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryCoinbasePriceStatesResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .injective.oracle.v1beta1.CoinbasePriceState price_states = 1 [json_name = "priceStates"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_price_states(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryCoinbasePriceStatesResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.oracle.v1beta1.QueryCoinbasePriceStatesResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .injective.oracle.v1beta1.CoinbasePriceState price_states = 1 [json_name = "priceStates"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_price_states_size()); i < n; i++) {
    const auto& repfield = this->_internal_price_states(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.oracle.v1beta1.QueryCoinbasePriceStatesResponse)
  return target;
}

::size_t QueryCoinbasePriceStatesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.oracle.v1beta1.QueryCoinbasePriceStatesResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .injective.oracle.v1beta1.CoinbasePriceState price_states = 1 [json_name = "priceStates"];
  total_size += 1UL * this->_internal_price_states_size();
  for (const auto& msg : this->_internal_price_states()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryCoinbasePriceStatesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryCoinbasePriceStatesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryCoinbasePriceStatesResponse::GetClassData() const { return &_class_data_; }


void QueryCoinbasePriceStatesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryCoinbasePriceStatesResponse*>(&to_msg);
  auto& from = static_cast<const QueryCoinbasePriceStatesResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.oracle.v1beta1.QueryCoinbasePriceStatesResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_price_states()->MergeFrom(from._internal_price_states());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryCoinbasePriceStatesResponse::CopyFrom(const QueryCoinbasePriceStatesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.oracle.v1beta1.QueryCoinbasePriceStatesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryCoinbasePriceStatesResponse::IsInitialized() const {
  return true;
}

void QueryCoinbasePriceStatesResponse::InternalSwap(QueryCoinbasePriceStatesResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_price_states()->InternalSwap(other->_internal_mutable_price_states());
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryCoinbasePriceStatesResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2foracle_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2foracle_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2foracle_2fv1beta1_2fquery_2eproto[13]);
}
// ===================================================================

class QueryPythPriceStatesRequest::_Internal {
 public:
};

QueryPythPriceStatesRequest::QueryPythPriceStatesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:injective.oracle.v1beta1.QueryPythPriceStatesRequest)
}
QueryPythPriceStatesRequest::QueryPythPriceStatesRequest(const QueryPythPriceStatesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  QueryPythPriceStatesRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:injective.oracle.v1beta1.QueryPythPriceStatesRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryPythPriceStatesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryPythPriceStatesRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata QueryPythPriceStatesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2foracle_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2foracle_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2foracle_2fv1beta1_2fquery_2eproto[14]);
}
// ===================================================================

class QueryPythPriceStatesResponse::_Internal {
 public:
};

void QueryPythPriceStatesResponse::clear_price_states() {
  _internal_mutable_price_states()->Clear();
}
QueryPythPriceStatesResponse::QueryPythPriceStatesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.oracle.v1beta1.QueryPythPriceStatesResponse)
}
QueryPythPriceStatesResponse::QueryPythPriceStatesResponse(const QueryPythPriceStatesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryPythPriceStatesResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.price_states_){from._impl_.price_states_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:injective.oracle.v1beta1.QueryPythPriceStatesResponse)
}

inline void QueryPythPriceStatesResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.price_states_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

QueryPythPriceStatesResponse::~QueryPythPriceStatesResponse() {
  // @@protoc_insertion_point(destructor:injective.oracle.v1beta1.QueryPythPriceStatesResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryPythPriceStatesResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_price_states()->~RepeatedPtrField();
}

void QueryPythPriceStatesResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryPythPriceStatesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.oracle.v1beta1.QueryPythPriceStatesResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_price_states()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryPythPriceStatesResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .injective.oracle.v1beta1.PythPriceState price_states = 1 [json_name = "priceStates"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_price_states(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryPythPriceStatesResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.oracle.v1beta1.QueryPythPriceStatesResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .injective.oracle.v1beta1.PythPriceState price_states = 1 [json_name = "priceStates"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_price_states_size()); i < n; i++) {
    const auto& repfield = this->_internal_price_states(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.oracle.v1beta1.QueryPythPriceStatesResponse)
  return target;
}

::size_t QueryPythPriceStatesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.oracle.v1beta1.QueryPythPriceStatesResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .injective.oracle.v1beta1.PythPriceState price_states = 1 [json_name = "priceStates"];
  total_size += 1UL * this->_internal_price_states_size();
  for (const auto& msg : this->_internal_price_states()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryPythPriceStatesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryPythPriceStatesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryPythPriceStatesResponse::GetClassData() const { return &_class_data_; }


void QueryPythPriceStatesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryPythPriceStatesResponse*>(&to_msg);
  auto& from = static_cast<const QueryPythPriceStatesResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.oracle.v1beta1.QueryPythPriceStatesResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_price_states()->MergeFrom(from._internal_price_states());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryPythPriceStatesResponse::CopyFrom(const QueryPythPriceStatesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.oracle.v1beta1.QueryPythPriceStatesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryPythPriceStatesResponse::IsInitialized() const {
  return true;
}

void QueryPythPriceStatesResponse::InternalSwap(QueryPythPriceStatesResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_price_states()->InternalSwap(other->_internal_mutable_price_states());
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryPythPriceStatesResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2foracle_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2foracle_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2foracle_2fv1beta1_2fquery_2eproto[15]);
}
// ===================================================================

class QueryProviderPriceStateRequest::_Internal {
 public:
};

QueryProviderPriceStateRequest::QueryProviderPriceStateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.oracle.v1beta1.QueryProviderPriceStateRequest)
}
QueryProviderPriceStateRequest::QueryProviderPriceStateRequest(const QueryProviderPriceStateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryProviderPriceStateRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.provider_) {}

    , decltype(_impl_.symbol_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.provider_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.provider_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_provider().empty()) {
    _this->_impl_.provider_.Set(from._internal_provider(), _this->GetArenaForAllocation());
  }
  _impl_.symbol_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.symbol_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_symbol().empty()) {
    _this->_impl_.symbol_.Set(from._internal_symbol(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:injective.oracle.v1beta1.QueryProviderPriceStateRequest)
}

inline void QueryProviderPriceStateRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.provider_) {}

    , decltype(_impl_.symbol_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.provider_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.provider_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.symbol_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.symbol_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

QueryProviderPriceStateRequest::~QueryProviderPriceStateRequest() {
  // @@protoc_insertion_point(destructor:injective.oracle.v1beta1.QueryProviderPriceStateRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryProviderPriceStateRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.provider_.Destroy();
  _impl_.symbol_.Destroy();
}

void QueryProviderPriceStateRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryProviderPriceStateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.oracle.v1beta1.QueryProviderPriceStateRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.provider_.ClearToEmpty();
  _impl_.symbol_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryProviderPriceStateRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string provider = 1 [json_name = "provider"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_provider();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.oracle.v1beta1.QueryProviderPriceStateRequest.provider"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string symbol = 2 [json_name = "symbol"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_symbol();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.oracle.v1beta1.QueryProviderPriceStateRequest.symbol"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryProviderPriceStateRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.oracle.v1beta1.QueryProviderPriceStateRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string provider = 1 [json_name = "provider"];
  if (!this->_internal_provider().empty()) {
    const std::string& _s = this->_internal_provider();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.oracle.v1beta1.QueryProviderPriceStateRequest.provider");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string symbol = 2 [json_name = "symbol"];
  if (!this->_internal_symbol().empty()) {
    const std::string& _s = this->_internal_symbol();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.oracle.v1beta1.QueryProviderPriceStateRequest.symbol");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.oracle.v1beta1.QueryProviderPriceStateRequest)
  return target;
}

::size_t QueryProviderPriceStateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.oracle.v1beta1.QueryProviderPriceStateRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string provider = 1 [json_name = "provider"];
  if (!this->_internal_provider().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_provider());
  }

  // string symbol = 2 [json_name = "symbol"];
  if (!this->_internal_symbol().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_symbol());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryProviderPriceStateRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryProviderPriceStateRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryProviderPriceStateRequest::GetClassData() const { return &_class_data_; }


void QueryProviderPriceStateRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryProviderPriceStateRequest*>(&to_msg);
  auto& from = static_cast<const QueryProviderPriceStateRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.oracle.v1beta1.QueryProviderPriceStateRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_provider().empty()) {
    _this->_internal_set_provider(from._internal_provider());
  }
  if (!from._internal_symbol().empty()) {
    _this->_internal_set_symbol(from._internal_symbol());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryProviderPriceStateRequest::CopyFrom(const QueryProviderPriceStateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.oracle.v1beta1.QueryProviderPriceStateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryProviderPriceStateRequest::IsInitialized() const {
  return true;
}

void QueryProviderPriceStateRequest::InternalSwap(QueryProviderPriceStateRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.provider_, lhs_arena,
                                       &other->_impl_.provider_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.symbol_, lhs_arena,
                                       &other->_impl_.symbol_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryProviderPriceStateRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2foracle_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2foracle_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2foracle_2fv1beta1_2fquery_2eproto[16]);
}
// ===================================================================

class QueryProviderPriceStateResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<QueryProviderPriceStateResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(QueryProviderPriceStateResponse, _impl_._has_bits_);
  static const ::injective::oracle::v1beta1::PriceState& price_state(const QueryProviderPriceStateResponse* msg);
  static void set_has_price_state(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::injective::oracle::v1beta1::PriceState&
QueryProviderPriceStateResponse::_Internal::price_state(const QueryProviderPriceStateResponse* msg) {
  return *msg->_impl_.price_state_;
}
void QueryProviderPriceStateResponse::clear_price_state() {
  if (_impl_.price_state_ != nullptr) _impl_.price_state_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
QueryProviderPriceStateResponse::QueryProviderPriceStateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.oracle.v1beta1.QueryProviderPriceStateResponse)
}
QueryProviderPriceStateResponse::QueryProviderPriceStateResponse(const QueryProviderPriceStateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryProviderPriceStateResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.price_state_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.price_state_ = new ::injective::oracle::v1beta1::PriceState(*from._impl_.price_state_);
  }
  // @@protoc_insertion_point(copy_constructor:injective.oracle.v1beta1.QueryProviderPriceStateResponse)
}

inline void QueryProviderPriceStateResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.price_state_){nullptr}
  };
}

QueryProviderPriceStateResponse::~QueryProviderPriceStateResponse() {
  // @@protoc_insertion_point(destructor:injective.oracle.v1beta1.QueryProviderPriceStateResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryProviderPriceStateResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.price_state_;
}

void QueryProviderPriceStateResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryProviderPriceStateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.oracle.v1beta1.QueryProviderPriceStateResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.price_state_ != nullptr);
    _impl_.price_state_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryProviderPriceStateResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .injective.oracle.v1beta1.PriceState price_state = 1 [json_name = "priceState"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_price_state(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryProviderPriceStateResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.oracle.v1beta1.QueryProviderPriceStateResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .injective.oracle.v1beta1.PriceState price_state = 1 [json_name = "priceState"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::price_state(this),
        _Internal::price_state(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.oracle.v1beta1.QueryProviderPriceStateResponse)
  return target;
}

::size_t QueryProviderPriceStateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.oracle.v1beta1.QueryProviderPriceStateResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .injective.oracle.v1beta1.PriceState price_state = 1 [json_name = "priceState"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.price_state_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryProviderPriceStateResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryProviderPriceStateResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryProviderPriceStateResponse::GetClassData() const { return &_class_data_; }


void QueryProviderPriceStateResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryProviderPriceStateResponse*>(&to_msg);
  auto& from = static_cast<const QueryProviderPriceStateResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.oracle.v1beta1.QueryProviderPriceStateResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_price_state()->::injective::oracle::v1beta1::PriceState::MergeFrom(
        from._internal_price_state());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryProviderPriceStateResponse::CopyFrom(const QueryProviderPriceStateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.oracle.v1beta1.QueryProviderPriceStateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryProviderPriceStateResponse::IsInitialized() const {
  return true;
}

void QueryProviderPriceStateResponse::InternalSwap(QueryProviderPriceStateResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.price_state_, other->_impl_.price_state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryProviderPriceStateResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2foracle_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2foracle_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2foracle_2fv1beta1_2fquery_2eproto[17]);
}
// ===================================================================

class QueryModuleStateRequest::_Internal {
 public:
};

QueryModuleStateRequest::QueryModuleStateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:injective.oracle.v1beta1.QueryModuleStateRequest)
}
QueryModuleStateRequest::QueryModuleStateRequest(const QueryModuleStateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  QueryModuleStateRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:injective.oracle.v1beta1.QueryModuleStateRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryModuleStateRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryModuleStateRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata QueryModuleStateRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2foracle_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2foracle_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2foracle_2fv1beta1_2fquery_2eproto[18]);
}
// ===================================================================

class QueryModuleStateResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<QueryModuleStateResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(QueryModuleStateResponse, _impl_._has_bits_);
  static const ::injective::oracle::v1beta1::GenesisState& state(const QueryModuleStateResponse* msg);
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::injective::oracle::v1beta1::GenesisState&
QueryModuleStateResponse::_Internal::state(const QueryModuleStateResponse* msg) {
  return *msg->_impl_.state_;
}
void QueryModuleStateResponse::clear_state() {
  if (_impl_.state_ != nullptr) _impl_.state_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
QueryModuleStateResponse::QueryModuleStateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.oracle.v1beta1.QueryModuleStateResponse)
}
QueryModuleStateResponse::QueryModuleStateResponse(const QueryModuleStateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryModuleStateResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.state_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.state_ = new ::injective::oracle::v1beta1::GenesisState(*from._impl_.state_);
  }
  // @@protoc_insertion_point(copy_constructor:injective.oracle.v1beta1.QueryModuleStateResponse)
}

inline void QueryModuleStateResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.state_){nullptr}
  };
}

QueryModuleStateResponse::~QueryModuleStateResponse() {
  // @@protoc_insertion_point(destructor:injective.oracle.v1beta1.QueryModuleStateResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryModuleStateResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.state_;
}

void QueryModuleStateResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryModuleStateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.oracle.v1beta1.QueryModuleStateResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.state_ != nullptr);
    _impl_.state_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryModuleStateResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .injective.oracle.v1beta1.GenesisState state = 1 [json_name = "state"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_state(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryModuleStateResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.oracle.v1beta1.QueryModuleStateResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .injective.oracle.v1beta1.GenesisState state = 1 [json_name = "state"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::state(this),
        _Internal::state(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.oracle.v1beta1.QueryModuleStateResponse)
  return target;
}

::size_t QueryModuleStateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.oracle.v1beta1.QueryModuleStateResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .injective.oracle.v1beta1.GenesisState state = 1 [json_name = "state"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.state_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryModuleStateResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryModuleStateResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryModuleStateResponse::GetClassData() const { return &_class_data_; }


void QueryModuleStateResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryModuleStateResponse*>(&to_msg);
  auto& from = static_cast<const QueryModuleStateResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.oracle.v1beta1.QueryModuleStateResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_state()->::injective::oracle::v1beta1::GenesisState::MergeFrom(
        from._internal_state());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryModuleStateResponse::CopyFrom(const QueryModuleStateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.oracle.v1beta1.QueryModuleStateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryModuleStateResponse::IsInitialized() const {
  return true;
}

void QueryModuleStateResponse::InternalSwap(QueryModuleStateResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.state_, other->_impl_.state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryModuleStateResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2foracle_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2foracle_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2foracle_2fv1beta1_2fquery_2eproto[19]);
}
// ===================================================================

class QueryHistoricalPriceRecordsRequest::_Internal {
 public:
};

QueryHistoricalPriceRecordsRequest::QueryHistoricalPriceRecordsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.oracle.v1beta1.QueryHistoricalPriceRecordsRequest)
}
QueryHistoricalPriceRecordsRequest::QueryHistoricalPriceRecordsRequest(const QueryHistoricalPriceRecordsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryHistoricalPriceRecordsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.symbol_id_) {}

    , decltype(_impl_.oracle_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.symbol_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.symbol_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_symbol_id().empty()) {
    _this->_impl_.symbol_id_.Set(from._internal_symbol_id(), _this->GetArenaForAllocation());
  }
  _this->_impl_.oracle_ = from._impl_.oracle_;
  // @@protoc_insertion_point(copy_constructor:injective.oracle.v1beta1.QueryHistoricalPriceRecordsRequest)
}

inline void QueryHistoricalPriceRecordsRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.symbol_id_) {}

    , decltype(_impl_.oracle_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.symbol_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.symbol_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

QueryHistoricalPriceRecordsRequest::~QueryHistoricalPriceRecordsRequest() {
  // @@protoc_insertion_point(destructor:injective.oracle.v1beta1.QueryHistoricalPriceRecordsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryHistoricalPriceRecordsRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.symbol_id_.Destroy();
}

void QueryHistoricalPriceRecordsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryHistoricalPriceRecordsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.oracle.v1beta1.QueryHistoricalPriceRecordsRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.symbol_id_.ClearToEmpty();
  _impl_.oracle_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryHistoricalPriceRecordsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .injective.oracle.v1beta1.OracleType oracle = 1 [json_name = "oracle"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_oracle(static_cast<::injective::oracle::v1beta1::OracleType>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // string symbol_id = 2 [json_name = "symbolId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_symbol_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.oracle.v1beta1.QueryHistoricalPriceRecordsRequest.symbol_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryHistoricalPriceRecordsRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.oracle.v1beta1.QueryHistoricalPriceRecordsRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .injective.oracle.v1beta1.OracleType oracle = 1 [json_name = "oracle"];
  if (this->_internal_oracle() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_oracle(), target);
  }

  // string symbol_id = 2 [json_name = "symbolId"];
  if (!this->_internal_symbol_id().empty()) {
    const std::string& _s = this->_internal_symbol_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.oracle.v1beta1.QueryHistoricalPriceRecordsRequest.symbol_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.oracle.v1beta1.QueryHistoricalPriceRecordsRequest)
  return target;
}

::size_t QueryHistoricalPriceRecordsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.oracle.v1beta1.QueryHistoricalPriceRecordsRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string symbol_id = 2 [json_name = "symbolId"];
  if (!this->_internal_symbol_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_symbol_id());
  }

  // .injective.oracle.v1beta1.OracleType oracle = 1 [json_name = "oracle"];
  if (this->_internal_oracle() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_oracle());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryHistoricalPriceRecordsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryHistoricalPriceRecordsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryHistoricalPriceRecordsRequest::GetClassData() const { return &_class_data_; }


void QueryHistoricalPriceRecordsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryHistoricalPriceRecordsRequest*>(&to_msg);
  auto& from = static_cast<const QueryHistoricalPriceRecordsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.oracle.v1beta1.QueryHistoricalPriceRecordsRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_symbol_id().empty()) {
    _this->_internal_set_symbol_id(from._internal_symbol_id());
  }
  if (from._internal_oracle() != 0) {
    _this->_internal_set_oracle(from._internal_oracle());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryHistoricalPriceRecordsRequest::CopyFrom(const QueryHistoricalPriceRecordsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.oracle.v1beta1.QueryHistoricalPriceRecordsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryHistoricalPriceRecordsRequest::IsInitialized() const {
  return true;
}

void QueryHistoricalPriceRecordsRequest::InternalSwap(QueryHistoricalPriceRecordsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.symbol_id_, lhs_arena,
                                       &other->_impl_.symbol_id_, rhs_arena);
  swap(_impl_.oracle_, other->_impl_.oracle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryHistoricalPriceRecordsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2foracle_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2foracle_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2foracle_2fv1beta1_2fquery_2eproto[20]);
}
// ===================================================================

class QueryHistoricalPriceRecordsResponse::_Internal {
 public:
};

void QueryHistoricalPriceRecordsResponse::clear_price_records() {
  _internal_mutable_price_records()->Clear();
}
QueryHistoricalPriceRecordsResponse::QueryHistoricalPriceRecordsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.oracle.v1beta1.QueryHistoricalPriceRecordsResponse)
}
QueryHistoricalPriceRecordsResponse::QueryHistoricalPriceRecordsResponse(const QueryHistoricalPriceRecordsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryHistoricalPriceRecordsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.price_records_){from._impl_.price_records_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:injective.oracle.v1beta1.QueryHistoricalPriceRecordsResponse)
}

inline void QueryHistoricalPriceRecordsResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.price_records_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

QueryHistoricalPriceRecordsResponse::~QueryHistoricalPriceRecordsResponse() {
  // @@protoc_insertion_point(destructor:injective.oracle.v1beta1.QueryHistoricalPriceRecordsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryHistoricalPriceRecordsResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_price_records()->~RepeatedPtrField();
}

void QueryHistoricalPriceRecordsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryHistoricalPriceRecordsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.oracle.v1beta1.QueryHistoricalPriceRecordsResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_price_records()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryHistoricalPriceRecordsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .injective.oracle.v1beta1.PriceRecords price_records = 1 [json_name = "priceRecords"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_price_records(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryHistoricalPriceRecordsResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.oracle.v1beta1.QueryHistoricalPriceRecordsResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .injective.oracle.v1beta1.PriceRecords price_records = 1 [json_name = "priceRecords"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_price_records_size()); i < n; i++) {
    const auto& repfield = this->_internal_price_records(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.oracle.v1beta1.QueryHistoricalPriceRecordsResponse)
  return target;
}

::size_t QueryHistoricalPriceRecordsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.oracle.v1beta1.QueryHistoricalPriceRecordsResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .injective.oracle.v1beta1.PriceRecords price_records = 1 [json_name = "priceRecords"];
  total_size += 1UL * this->_internal_price_records_size();
  for (const auto& msg : this->_internal_price_records()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryHistoricalPriceRecordsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryHistoricalPriceRecordsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryHistoricalPriceRecordsResponse::GetClassData() const { return &_class_data_; }


void QueryHistoricalPriceRecordsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryHistoricalPriceRecordsResponse*>(&to_msg);
  auto& from = static_cast<const QueryHistoricalPriceRecordsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.oracle.v1beta1.QueryHistoricalPriceRecordsResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_price_records()->MergeFrom(from._internal_price_records());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryHistoricalPriceRecordsResponse::CopyFrom(const QueryHistoricalPriceRecordsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.oracle.v1beta1.QueryHistoricalPriceRecordsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryHistoricalPriceRecordsResponse::IsInitialized() const {
  return true;
}

void QueryHistoricalPriceRecordsResponse::InternalSwap(QueryHistoricalPriceRecordsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_price_records()->InternalSwap(other->_internal_mutable_price_records());
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryHistoricalPriceRecordsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2foracle_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2foracle_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2foracle_2fv1beta1_2fquery_2eproto[21]);
}
// ===================================================================

class OracleHistoryOptions::_Internal {
 public:
};

OracleHistoryOptions::OracleHistoryOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.oracle.v1beta1.OracleHistoryOptions)
}
OracleHistoryOptions::OracleHistoryOptions(const OracleHistoryOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:injective.oracle.v1beta1.OracleHistoryOptions)
}

inline void OracleHistoryOptions::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.max_age_) { ::uint64_t{0u} }

    , decltype(_impl_.include_raw_history_) { false }

    , decltype(_impl_.include_metadata_) { false }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

OracleHistoryOptions::~OracleHistoryOptions() {
  // @@protoc_insertion_point(destructor:injective.oracle.v1beta1.OracleHistoryOptions)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OracleHistoryOptions::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void OracleHistoryOptions::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OracleHistoryOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.oracle.v1beta1.OracleHistoryOptions)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.max_age_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.include_metadata_) -
      reinterpret_cast<char*>(&_impl_.max_age_)) + sizeof(_impl_.include_metadata_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OracleHistoryOptions::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 max_age = 1 [json_name = "maxAge"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.max_age_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bool include_raw_history = 2 [json_name = "includeRawHistory"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.include_raw_history_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bool include_metadata = 3 [json_name = "includeMetadata"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.include_metadata_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* OracleHistoryOptions::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.oracle.v1beta1.OracleHistoryOptions)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 max_age = 1 [json_name = "maxAge"];
  if (this->_internal_max_age() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_max_age(), target);
  }

  // bool include_raw_history = 2 [json_name = "includeRawHistory"];
  if (this->_internal_include_raw_history() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        2, this->_internal_include_raw_history(), target);
  }

  // bool include_metadata = 3 [json_name = "includeMetadata"];
  if (this->_internal_include_metadata() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        3, this->_internal_include_metadata(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.oracle.v1beta1.OracleHistoryOptions)
  return target;
}

::size_t OracleHistoryOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.oracle.v1beta1.OracleHistoryOptions)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 max_age = 1 [json_name = "maxAge"];
  if (this->_internal_max_age() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_max_age());
  }

  // bool include_raw_history = 2 [json_name = "includeRawHistory"];
  if (this->_internal_include_raw_history() != 0) {
    total_size += 2;
  }

  // bool include_metadata = 3 [json_name = "includeMetadata"];
  if (this->_internal_include_metadata() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OracleHistoryOptions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OracleHistoryOptions::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OracleHistoryOptions::GetClassData() const { return &_class_data_; }


void OracleHistoryOptions::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OracleHistoryOptions*>(&to_msg);
  auto& from = static_cast<const OracleHistoryOptions&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.oracle.v1beta1.OracleHistoryOptions)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_max_age() != 0) {
    _this->_internal_set_max_age(from._internal_max_age());
  }
  if (from._internal_include_raw_history() != 0) {
    _this->_internal_set_include_raw_history(from._internal_include_raw_history());
  }
  if (from._internal_include_metadata() != 0) {
    _this->_internal_set_include_metadata(from._internal_include_metadata());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OracleHistoryOptions::CopyFrom(const OracleHistoryOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.oracle.v1beta1.OracleHistoryOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OracleHistoryOptions::IsInitialized() const {
  return true;
}

void OracleHistoryOptions::InternalSwap(OracleHistoryOptions* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OracleHistoryOptions, _impl_.include_metadata_)
      + sizeof(OracleHistoryOptions::_impl_.include_metadata_)
      - PROTOBUF_FIELD_OFFSET(OracleHistoryOptions, _impl_.max_age_)>(
          reinterpret_cast<char*>(&_impl_.max_age_),
          reinterpret_cast<char*>(&other->_impl_.max_age_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OracleHistoryOptions::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2foracle_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2foracle_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2foracle_2fv1beta1_2fquery_2eproto[22]);
}
// ===================================================================

class QueryOracleVolatilityRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<QueryOracleVolatilityRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(QueryOracleVolatilityRequest, _impl_._has_bits_);
  static const ::injective::oracle::v1beta1::OracleInfo& base_info(const QueryOracleVolatilityRequest* msg);
  static void set_has_base_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::injective::oracle::v1beta1::OracleInfo& quote_info(const QueryOracleVolatilityRequest* msg);
  static void set_has_quote_info(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::injective::oracle::v1beta1::OracleHistoryOptions& oracle_history_options(const QueryOracleVolatilityRequest* msg);
  static void set_has_oracle_history_options(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::injective::oracle::v1beta1::OracleInfo&
QueryOracleVolatilityRequest::_Internal::base_info(const QueryOracleVolatilityRequest* msg) {
  return *msg->_impl_.base_info_;
}
const ::injective::oracle::v1beta1::OracleInfo&
QueryOracleVolatilityRequest::_Internal::quote_info(const QueryOracleVolatilityRequest* msg) {
  return *msg->_impl_.quote_info_;
}
const ::injective::oracle::v1beta1::OracleHistoryOptions&
QueryOracleVolatilityRequest::_Internal::oracle_history_options(const QueryOracleVolatilityRequest* msg) {
  return *msg->_impl_.oracle_history_options_;
}
void QueryOracleVolatilityRequest::clear_base_info() {
  if (_impl_.base_info_ != nullptr) _impl_.base_info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void QueryOracleVolatilityRequest::clear_quote_info() {
  if (_impl_.quote_info_ != nullptr) _impl_.quote_info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
QueryOracleVolatilityRequest::QueryOracleVolatilityRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.oracle.v1beta1.QueryOracleVolatilityRequest)
}
QueryOracleVolatilityRequest::QueryOracleVolatilityRequest(const QueryOracleVolatilityRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryOracleVolatilityRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.base_info_){nullptr}
    , decltype(_impl_.quote_info_){nullptr}
    , decltype(_impl_.oracle_history_options_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.base_info_ = new ::injective::oracle::v1beta1::OracleInfo(*from._impl_.base_info_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.quote_info_ = new ::injective::oracle::v1beta1::OracleInfo(*from._impl_.quote_info_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.oracle_history_options_ = new ::injective::oracle::v1beta1::OracleHistoryOptions(*from._impl_.oracle_history_options_);
  }
  // @@protoc_insertion_point(copy_constructor:injective.oracle.v1beta1.QueryOracleVolatilityRequest)
}

inline void QueryOracleVolatilityRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.base_info_){nullptr}
    , decltype(_impl_.quote_info_){nullptr}
    , decltype(_impl_.oracle_history_options_){nullptr}
  };
}

QueryOracleVolatilityRequest::~QueryOracleVolatilityRequest() {
  // @@protoc_insertion_point(destructor:injective.oracle.v1beta1.QueryOracleVolatilityRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryOracleVolatilityRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.base_info_;
  if (this != internal_default_instance()) delete _impl_.quote_info_;
  if (this != internal_default_instance()) delete _impl_.oracle_history_options_;
}

void QueryOracleVolatilityRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryOracleVolatilityRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.oracle.v1beta1.QueryOracleVolatilityRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.base_info_ != nullptr);
      _impl_.base_info_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.quote_info_ != nullptr);
      _impl_.quote_info_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.oracle_history_options_ != nullptr);
      _impl_.oracle_history_options_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryOracleVolatilityRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .injective.oracle.v1beta1.OracleInfo base_info = 1 [json_name = "baseInfo"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base_info(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .injective.oracle.v1beta1.OracleInfo quote_info = 2 [json_name = "quoteInfo"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_quote_info(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .injective.oracle.v1beta1.OracleHistoryOptions oracle_history_options = 3 [json_name = "oracleHistoryOptions"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_oracle_history_options(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryOracleVolatilityRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.oracle.v1beta1.QueryOracleVolatilityRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .injective.oracle.v1beta1.OracleInfo base_info = 1 [json_name = "baseInfo"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::base_info(this),
        _Internal::base_info(this).GetCachedSize(), target, stream);
  }

  // .injective.oracle.v1beta1.OracleInfo quote_info = 2 [json_name = "quoteInfo"];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::quote_info(this),
        _Internal::quote_info(this).GetCachedSize(), target, stream);
  }

  // .injective.oracle.v1beta1.OracleHistoryOptions oracle_history_options = 3 [json_name = "oracleHistoryOptions"];
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::oracle_history_options(this),
        _Internal::oracle_history_options(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.oracle.v1beta1.QueryOracleVolatilityRequest)
  return target;
}

::size_t QueryOracleVolatilityRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.oracle.v1beta1.QueryOracleVolatilityRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // .injective.oracle.v1beta1.OracleInfo base_info = 1 [json_name = "baseInfo"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.base_info_);
    }

    // .injective.oracle.v1beta1.OracleInfo quote_info = 2 [json_name = "quoteInfo"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.quote_info_);
    }

    // .injective.oracle.v1beta1.OracleHistoryOptions oracle_history_options = 3 [json_name = "oracleHistoryOptions"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.oracle_history_options_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryOracleVolatilityRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryOracleVolatilityRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryOracleVolatilityRequest::GetClassData() const { return &_class_data_; }


void QueryOracleVolatilityRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryOracleVolatilityRequest*>(&to_msg);
  auto& from = static_cast<const QueryOracleVolatilityRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.oracle.v1beta1.QueryOracleVolatilityRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_base_info()->::injective::oracle::v1beta1::OracleInfo::MergeFrom(
          from._internal_base_info());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_quote_info()->::injective::oracle::v1beta1::OracleInfo::MergeFrom(
          from._internal_quote_info());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_oracle_history_options()->::injective::oracle::v1beta1::OracleHistoryOptions::MergeFrom(
          from._internal_oracle_history_options());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryOracleVolatilityRequest::CopyFrom(const QueryOracleVolatilityRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.oracle.v1beta1.QueryOracleVolatilityRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryOracleVolatilityRequest::IsInitialized() const {
  return true;
}

void QueryOracleVolatilityRequest::InternalSwap(QueryOracleVolatilityRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(QueryOracleVolatilityRequest, _impl_.oracle_history_options_)
      + sizeof(QueryOracleVolatilityRequest::_impl_.oracle_history_options_)
      - PROTOBUF_FIELD_OFFSET(QueryOracleVolatilityRequest, _impl_.base_info_)>(
          reinterpret_cast<char*>(&_impl_.base_info_),
          reinterpret_cast<char*>(&other->_impl_.base_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryOracleVolatilityRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2foracle_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2foracle_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2foracle_2fv1beta1_2fquery_2eproto[23]);
}
// ===================================================================

class QueryOracleVolatilityResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<QueryOracleVolatilityResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(QueryOracleVolatilityResponse, _impl_._has_bits_);
  static const ::injective::oracle::v1beta1::MetadataStatistics& history_metadata(const QueryOracleVolatilityResponse* msg);
  static void set_has_history_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::injective::oracle::v1beta1::MetadataStatistics&
QueryOracleVolatilityResponse::_Internal::history_metadata(const QueryOracleVolatilityResponse* msg) {
  return *msg->_impl_.history_metadata_;
}
void QueryOracleVolatilityResponse::clear_history_metadata() {
  if (_impl_.history_metadata_ != nullptr) _impl_.history_metadata_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void QueryOracleVolatilityResponse::clear_raw_history() {
  _internal_mutable_raw_history()->Clear();
}
QueryOracleVolatilityResponse::QueryOracleVolatilityResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.oracle.v1beta1.QueryOracleVolatilityResponse)
}
QueryOracleVolatilityResponse::QueryOracleVolatilityResponse(const QueryOracleVolatilityResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryOracleVolatilityResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.raw_history_){from._impl_.raw_history_}
    , decltype(_impl_.volatility_) {}

    , decltype(_impl_.history_metadata_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.volatility_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.volatility_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_volatility().empty()) {
    _this->_impl_.volatility_.Set(from._internal_volatility(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.history_metadata_ = new ::injective::oracle::v1beta1::MetadataStatistics(*from._impl_.history_metadata_);
  }
  // @@protoc_insertion_point(copy_constructor:injective.oracle.v1beta1.QueryOracleVolatilityResponse)
}

inline void QueryOracleVolatilityResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.raw_history_){arena}
    , decltype(_impl_.volatility_) {}

    , decltype(_impl_.history_metadata_){nullptr}
  };
  _impl_.volatility_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.volatility_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

QueryOracleVolatilityResponse::~QueryOracleVolatilityResponse() {
  // @@protoc_insertion_point(destructor:injective.oracle.v1beta1.QueryOracleVolatilityResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryOracleVolatilityResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_raw_history()->~RepeatedPtrField();
  _impl_.volatility_.Destroy();
  if (this != internal_default_instance()) delete _impl_.history_metadata_;
}

void QueryOracleVolatilityResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryOracleVolatilityResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.oracle.v1beta1.QueryOracleVolatilityResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_raw_history()->Clear();
  _impl_.volatility_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.history_metadata_ != nullptr);
    _impl_.history_metadata_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryOracleVolatilityResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string volatility = 1 [json_name = "volatility", (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_volatility();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.oracle.v1beta1.QueryOracleVolatilityResponse.volatility"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .injective.oracle.v1beta1.MetadataStatistics history_metadata = 2 [json_name = "historyMetadata"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_history_metadata(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .injective.oracle.v1beta1.PriceRecord raw_history = 3 [json_name = "rawHistory"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_raw_history(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryOracleVolatilityResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.oracle.v1beta1.QueryOracleVolatilityResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string volatility = 1 [json_name = "volatility", (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_volatility().empty()) {
    const std::string& _s = this->_internal_volatility();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.oracle.v1beta1.QueryOracleVolatilityResponse.volatility");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .injective.oracle.v1beta1.MetadataStatistics history_metadata = 2 [json_name = "historyMetadata"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::history_metadata(this),
        _Internal::history_metadata(this).GetCachedSize(), target, stream);
  }

  // repeated .injective.oracle.v1beta1.PriceRecord raw_history = 3 [json_name = "rawHistory"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_raw_history_size()); i < n; i++) {
    const auto& repfield = this->_internal_raw_history(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.oracle.v1beta1.QueryOracleVolatilityResponse)
  return target;
}

::size_t QueryOracleVolatilityResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.oracle.v1beta1.QueryOracleVolatilityResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .injective.oracle.v1beta1.PriceRecord raw_history = 3 [json_name = "rawHistory"];
  total_size += 1UL * this->_internal_raw_history_size();
  for (const auto& msg : this->_internal_raw_history()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string volatility = 1 [json_name = "volatility", (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_volatility().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_volatility());
  }

  // .injective.oracle.v1beta1.MetadataStatistics history_metadata = 2 [json_name = "historyMetadata"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.history_metadata_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryOracleVolatilityResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryOracleVolatilityResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryOracleVolatilityResponse::GetClassData() const { return &_class_data_; }


void QueryOracleVolatilityResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryOracleVolatilityResponse*>(&to_msg);
  auto& from = static_cast<const QueryOracleVolatilityResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.oracle.v1beta1.QueryOracleVolatilityResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_raw_history()->MergeFrom(from._internal_raw_history());
  if (!from._internal_volatility().empty()) {
    _this->_internal_set_volatility(from._internal_volatility());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_history_metadata()->::injective::oracle::v1beta1::MetadataStatistics::MergeFrom(
        from._internal_history_metadata());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryOracleVolatilityResponse::CopyFrom(const QueryOracleVolatilityResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.oracle.v1beta1.QueryOracleVolatilityResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryOracleVolatilityResponse::IsInitialized() const {
  return true;
}

void QueryOracleVolatilityResponse::InternalSwap(QueryOracleVolatilityResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_raw_history()->InternalSwap(other->_internal_mutable_raw_history());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.volatility_, lhs_arena,
                                       &other->_impl_.volatility_, rhs_arena);
  swap(_impl_.history_metadata_, other->_impl_.history_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryOracleVolatilityResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2foracle_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2foracle_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2foracle_2fv1beta1_2fquery_2eproto[24]);
}
// ===================================================================

class QueryOracleProvidersInfoRequest::_Internal {
 public:
};

QueryOracleProvidersInfoRequest::QueryOracleProvidersInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:injective.oracle.v1beta1.QueryOracleProvidersInfoRequest)
}
QueryOracleProvidersInfoRequest::QueryOracleProvidersInfoRequest(const QueryOracleProvidersInfoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  QueryOracleProvidersInfoRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:injective.oracle.v1beta1.QueryOracleProvidersInfoRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryOracleProvidersInfoRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryOracleProvidersInfoRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata QueryOracleProvidersInfoRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2foracle_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2foracle_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2foracle_2fv1beta1_2fquery_2eproto[25]);
}
// ===================================================================

class QueryOracleProvidersInfoResponse::_Internal {
 public:
};

void QueryOracleProvidersInfoResponse::clear_providers() {
  _internal_mutable_providers()->Clear();
}
QueryOracleProvidersInfoResponse::QueryOracleProvidersInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.oracle.v1beta1.QueryOracleProvidersInfoResponse)
}
QueryOracleProvidersInfoResponse::QueryOracleProvidersInfoResponse(const QueryOracleProvidersInfoResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryOracleProvidersInfoResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.providers_){from._impl_.providers_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:injective.oracle.v1beta1.QueryOracleProvidersInfoResponse)
}

inline void QueryOracleProvidersInfoResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.providers_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

QueryOracleProvidersInfoResponse::~QueryOracleProvidersInfoResponse() {
  // @@protoc_insertion_point(destructor:injective.oracle.v1beta1.QueryOracleProvidersInfoResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryOracleProvidersInfoResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_providers()->~RepeatedPtrField();
}

void QueryOracleProvidersInfoResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryOracleProvidersInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.oracle.v1beta1.QueryOracleProvidersInfoResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_providers()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryOracleProvidersInfoResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .injective.oracle.v1beta1.ProviderInfo providers = 1 [json_name = "providers"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_providers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryOracleProvidersInfoResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.oracle.v1beta1.QueryOracleProvidersInfoResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .injective.oracle.v1beta1.ProviderInfo providers = 1 [json_name = "providers"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_providers_size()); i < n; i++) {
    const auto& repfield = this->_internal_providers(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.oracle.v1beta1.QueryOracleProvidersInfoResponse)
  return target;
}

::size_t QueryOracleProvidersInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.oracle.v1beta1.QueryOracleProvidersInfoResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .injective.oracle.v1beta1.ProviderInfo providers = 1 [json_name = "providers"];
  total_size += 1UL * this->_internal_providers_size();
  for (const auto& msg : this->_internal_providers()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryOracleProvidersInfoResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryOracleProvidersInfoResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryOracleProvidersInfoResponse::GetClassData() const { return &_class_data_; }


void QueryOracleProvidersInfoResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryOracleProvidersInfoResponse*>(&to_msg);
  auto& from = static_cast<const QueryOracleProvidersInfoResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.oracle.v1beta1.QueryOracleProvidersInfoResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_providers()->MergeFrom(from._internal_providers());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryOracleProvidersInfoResponse::CopyFrom(const QueryOracleProvidersInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.oracle.v1beta1.QueryOracleProvidersInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryOracleProvidersInfoResponse::IsInitialized() const {
  return true;
}

void QueryOracleProvidersInfoResponse::InternalSwap(QueryOracleProvidersInfoResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_providers()->InternalSwap(other->_internal_mutable_providers());
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryOracleProvidersInfoResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2foracle_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2foracle_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2foracle_2fv1beta1_2fquery_2eproto[26]);
}
// ===================================================================

class QueryOracleProviderPricesRequest::_Internal {
 public:
};

QueryOracleProviderPricesRequest::QueryOracleProviderPricesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.oracle.v1beta1.QueryOracleProviderPricesRequest)
}
QueryOracleProviderPricesRequest::QueryOracleProviderPricesRequest(const QueryOracleProviderPricesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryOracleProviderPricesRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.provider_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.provider_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.provider_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_provider().empty()) {
    _this->_impl_.provider_.Set(from._internal_provider(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:injective.oracle.v1beta1.QueryOracleProviderPricesRequest)
}

inline void QueryOracleProviderPricesRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.provider_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.provider_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.provider_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

QueryOracleProviderPricesRequest::~QueryOracleProviderPricesRequest() {
  // @@protoc_insertion_point(destructor:injective.oracle.v1beta1.QueryOracleProviderPricesRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryOracleProviderPricesRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.provider_.Destroy();
}

void QueryOracleProviderPricesRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryOracleProviderPricesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.oracle.v1beta1.QueryOracleProviderPricesRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.provider_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryOracleProviderPricesRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string provider = 1 [json_name = "provider"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_provider();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.oracle.v1beta1.QueryOracleProviderPricesRequest.provider"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryOracleProviderPricesRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.oracle.v1beta1.QueryOracleProviderPricesRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string provider = 1 [json_name = "provider"];
  if (!this->_internal_provider().empty()) {
    const std::string& _s = this->_internal_provider();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.oracle.v1beta1.QueryOracleProviderPricesRequest.provider");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.oracle.v1beta1.QueryOracleProviderPricesRequest)
  return target;
}

::size_t QueryOracleProviderPricesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.oracle.v1beta1.QueryOracleProviderPricesRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string provider = 1 [json_name = "provider"];
  if (!this->_internal_provider().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_provider());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryOracleProviderPricesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryOracleProviderPricesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryOracleProviderPricesRequest::GetClassData() const { return &_class_data_; }


void QueryOracleProviderPricesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryOracleProviderPricesRequest*>(&to_msg);
  auto& from = static_cast<const QueryOracleProviderPricesRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.oracle.v1beta1.QueryOracleProviderPricesRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_provider().empty()) {
    _this->_internal_set_provider(from._internal_provider());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryOracleProviderPricesRequest::CopyFrom(const QueryOracleProviderPricesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.oracle.v1beta1.QueryOracleProviderPricesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryOracleProviderPricesRequest::IsInitialized() const {
  return true;
}

void QueryOracleProviderPricesRequest::InternalSwap(QueryOracleProviderPricesRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.provider_, lhs_arena,
                                       &other->_impl_.provider_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryOracleProviderPricesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2foracle_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2foracle_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2foracle_2fv1beta1_2fquery_2eproto[27]);
}
// ===================================================================

class QueryOracleProviderPricesResponse::_Internal {
 public:
};

void QueryOracleProviderPricesResponse::clear_providerstate() {
  _internal_mutable_providerstate()->Clear();
}
QueryOracleProviderPricesResponse::QueryOracleProviderPricesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.oracle.v1beta1.QueryOracleProviderPricesResponse)
}
QueryOracleProviderPricesResponse::QueryOracleProviderPricesResponse(const QueryOracleProviderPricesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryOracleProviderPricesResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.providerstate_){from._impl_.providerstate_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:injective.oracle.v1beta1.QueryOracleProviderPricesResponse)
}

inline void QueryOracleProviderPricesResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.providerstate_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

QueryOracleProviderPricesResponse::~QueryOracleProviderPricesResponse() {
  // @@protoc_insertion_point(destructor:injective.oracle.v1beta1.QueryOracleProviderPricesResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryOracleProviderPricesResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_providerstate()->~RepeatedPtrField();
}

void QueryOracleProviderPricesResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryOracleProviderPricesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.oracle.v1beta1.QueryOracleProviderPricesResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_providerstate()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryOracleProviderPricesResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .injective.oracle.v1beta1.ProviderState providerState = 1 [json_name = "providerState"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_providerstate(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryOracleProviderPricesResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.oracle.v1beta1.QueryOracleProviderPricesResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .injective.oracle.v1beta1.ProviderState providerState = 1 [json_name = "providerState"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_providerstate_size()); i < n; i++) {
    const auto& repfield = this->_internal_providerstate(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.oracle.v1beta1.QueryOracleProviderPricesResponse)
  return target;
}

::size_t QueryOracleProviderPricesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.oracle.v1beta1.QueryOracleProviderPricesResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .injective.oracle.v1beta1.ProviderState providerState = 1 [json_name = "providerState"];
  total_size += 1UL * this->_internal_providerstate_size();
  for (const auto& msg : this->_internal_providerstate()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryOracleProviderPricesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryOracleProviderPricesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryOracleProviderPricesResponse::GetClassData() const { return &_class_data_; }


void QueryOracleProviderPricesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryOracleProviderPricesResponse*>(&to_msg);
  auto& from = static_cast<const QueryOracleProviderPricesResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.oracle.v1beta1.QueryOracleProviderPricesResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_providerstate()->MergeFrom(from._internal_providerstate());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryOracleProviderPricesResponse::CopyFrom(const QueryOracleProviderPricesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.oracle.v1beta1.QueryOracleProviderPricesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryOracleProviderPricesResponse::IsInitialized() const {
  return true;
}

void QueryOracleProviderPricesResponse::InternalSwap(QueryOracleProviderPricesResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_providerstate()->InternalSwap(other->_internal_mutable_providerstate());
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryOracleProviderPricesResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2foracle_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2foracle_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2foracle_2fv1beta1_2fquery_2eproto[28]);
}
// ===================================================================

class QueryOraclePriceRequest::_Internal {
 public:
};

QueryOraclePriceRequest::QueryOraclePriceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.oracle.v1beta1.QueryOraclePriceRequest)
}
QueryOraclePriceRequest::QueryOraclePriceRequest(const QueryOraclePriceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryOraclePriceRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.base_) {}

    , decltype(_impl_.quote_) {}

    , decltype(_impl_.oracle_type_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.base_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.base_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_base().empty()) {
    _this->_impl_.base_.Set(from._internal_base(), _this->GetArenaForAllocation());
  }
  _impl_.quote_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.quote_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_quote().empty()) {
    _this->_impl_.quote_.Set(from._internal_quote(), _this->GetArenaForAllocation());
  }
  _this->_impl_.oracle_type_ = from._impl_.oracle_type_;
  // @@protoc_insertion_point(copy_constructor:injective.oracle.v1beta1.QueryOraclePriceRequest)
}

inline void QueryOraclePriceRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.base_) {}

    , decltype(_impl_.quote_) {}

    , decltype(_impl_.oracle_type_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.base_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.base_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.quote_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.quote_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

QueryOraclePriceRequest::~QueryOraclePriceRequest() {
  // @@protoc_insertion_point(destructor:injective.oracle.v1beta1.QueryOraclePriceRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryOraclePriceRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.base_.Destroy();
  _impl_.quote_.Destroy();
}

void QueryOraclePriceRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryOraclePriceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.oracle.v1beta1.QueryOraclePriceRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.base_.ClearToEmpty();
  _impl_.quote_.ClearToEmpty();
  _impl_.oracle_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryOraclePriceRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .injective.oracle.v1beta1.OracleType oracle_type = 1 [json_name = "oracleType"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_oracle_type(static_cast<::injective::oracle::v1beta1::OracleType>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // string base = 2 [json_name = "base"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_base();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.oracle.v1beta1.QueryOraclePriceRequest.base"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string quote = 3 [json_name = "quote"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_quote();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.oracle.v1beta1.QueryOraclePriceRequest.quote"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryOraclePriceRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.oracle.v1beta1.QueryOraclePriceRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .injective.oracle.v1beta1.OracleType oracle_type = 1 [json_name = "oracleType"];
  if (this->_internal_oracle_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_oracle_type(), target);
  }

  // string base = 2 [json_name = "base"];
  if (!this->_internal_base().empty()) {
    const std::string& _s = this->_internal_base();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.oracle.v1beta1.QueryOraclePriceRequest.base");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string quote = 3 [json_name = "quote"];
  if (!this->_internal_quote().empty()) {
    const std::string& _s = this->_internal_quote();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.oracle.v1beta1.QueryOraclePriceRequest.quote");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.oracle.v1beta1.QueryOraclePriceRequest)
  return target;
}

::size_t QueryOraclePriceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.oracle.v1beta1.QueryOraclePriceRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string base = 2 [json_name = "base"];
  if (!this->_internal_base().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_base());
  }

  // string quote = 3 [json_name = "quote"];
  if (!this->_internal_quote().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_quote());
  }

  // .injective.oracle.v1beta1.OracleType oracle_type = 1 [json_name = "oracleType"];
  if (this->_internal_oracle_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_oracle_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryOraclePriceRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryOraclePriceRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryOraclePriceRequest::GetClassData() const { return &_class_data_; }


void QueryOraclePriceRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryOraclePriceRequest*>(&to_msg);
  auto& from = static_cast<const QueryOraclePriceRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.oracle.v1beta1.QueryOraclePriceRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_base().empty()) {
    _this->_internal_set_base(from._internal_base());
  }
  if (!from._internal_quote().empty()) {
    _this->_internal_set_quote(from._internal_quote());
  }
  if (from._internal_oracle_type() != 0) {
    _this->_internal_set_oracle_type(from._internal_oracle_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryOraclePriceRequest::CopyFrom(const QueryOraclePriceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.oracle.v1beta1.QueryOraclePriceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryOraclePriceRequest::IsInitialized() const {
  return true;
}

void QueryOraclePriceRequest::InternalSwap(QueryOraclePriceRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.base_, lhs_arena,
                                       &other->_impl_.base_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.quote_, lhs_arena,
                                       &other->_impl_.quote_, rhs_arena);
  swap(_impl_.oracle_type_, other->_impl_.oracle_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryOraclePriceRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2foracle_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2foracle_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2foracle_2fv1beta1_2fquery_2eproto[29]);
}
// ===================================================================

class PricePairState::_Internal {
 public:
};

PricePairState::PricePairState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.oracle.v1beta1.PricePairState)
}
PricePairState::PricePairState(const PricePairState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PricePairState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pair_price_) {}

    , decltype(_impl_.base_price_) {}

    , decltype(_impl_.quote_price_) {}

    , decltype(_impl_.base_cumulative_price_) {}

    , decltype(_impl_.quote_cumulative_price_) {}

    , decltype(_impl_.base_timestamp_) {}

    , decltype(_impl_.quote_timestamp_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.pair_price_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.pair_price_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_pair_price().empty()) {
    _this->_impl_.pair_price_.Set(from._internal_pair_price(), _this->GetArenaForAllocation());
  }
  _impl_.base_price_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.base_price_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_base_price().empty()) {
    _this->_impl_.base_price_.Set(from._internal_base_price(), _this->GetArenaForAllocation());
  }
  _impl_.quote_price_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.quote_price_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_quote_price().empty()) {
    _this->_impl_.quote_price_.Set(from._internal_quote_price(), _this->GetArenaForAllocation());
  }
  _impl_.base_cumulative_price_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.base_cumulative_price_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_base_cumulative_price().empty()) {
    _this->_impl_.base_cumulative_price_.Set(from._internal_base_cumulative_price(), _this->GetArenaForAllocation());
  }
  _impl_.quote_cumulative_price_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.quote_cumulative_price_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_quote_cumulative_price().empty()) {
    _this->_impl_.quote_cumulative_price_.Set(from._internal_quote_cumulative_price(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.base_timestamp_, &from._impl_.base_timestamp_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.quote_timestamp_) -
    reinterpret_cast<char*>(&_impl_.base_timestamp_)) + sizeof(_impl_.quote_timestamp_));
  // @@protoc_insertion_point(copy_constructor:injective.oracle.v1beta1.PricePairState)
}

inline void PricePairState::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.pair_price_) {}

    , decltype(_impl_.base_price_) {}

    , decltype(_impl_.quote_price_) {}

    , decltype(_impl_.base_cumulative_price_) {}

    , decltype(_impl_.quote_cumulative_price_) {}

    , decltype(_impl_.base_timestamp_) { ::int64_t{0} }

    , decltype(_impl_.quote_timestamp_) { ::int64_t{0} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.pair_price_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.pair_price_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.base_price_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.base_price_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.quote_price_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.quote_price_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.base_cumulative_price_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.base_cumulative_price_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.quote_cumulative_price_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.quote_cumulative_price_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PricePairState::~PricePairState() {
  // @@protoc_insertion_point(destructor:injective.oracle.v1beta1.PricePairState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PricePairState::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.pair_price_.Destroy();
  _impl_.base_price_.Destroy();
  _impl_.quote_price_.Destroy();
  _impl_.base_cumulative_price_.Destroy();
  _impl_.quote_cumulative_price_.Destroy();
}

void PricePairState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PricePairState::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.oracle.v1beta1.PricePairState)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.pair_price_.ClearToEmpty();
  _impl_.base_price_.ClearToEmpty();
  _impl_.quote_price_.ClearToEmpty();
  _impl_.base_cumulative_price_.ClearToEmpty();
  _impl_.quote_cumulative_price_.ClearToEmpty();
  ::memset(&_impl_.base_timestamp_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.quote_timestamp_) -
      reinterpret_cast<char*>(&_impl_.base_timestamp_)) + sizeof(_impl_.quote_timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PricePairState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string pair_price = 1 [json_name = "pairPrice", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_pair_price();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.oracle.v1beta1.PricePairState.pair_price"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string base_price = 2 [json_name = "basePrice", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_base_price();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.oracle.v1beta1.PricePairState.base_price"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string quote_price = 3 [json_name = "quotePrice", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_quote_price();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.oracle.v1beta1.PricePairState.quote_price"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string base_cumulative_price = 4 [json_name = "baseCumulativePrice", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_base_cumulative_price();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.oracle.v1beta1.PricePairState.base_cumulative_price"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string quote_cumulative_price = 5 [json_name = "quoteCumulativePrice", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_quote_cumulative_price();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.oracle.v1beta1.PricePairState.quote_cumulative_price"));
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 base_timestamp = 6 [json_name = "baseTimestamp"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _impl_.base_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 quote_timestamp = 7 [json_name = "quoteTimestamp"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 56)) {
          _impl_.quote_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* PricePairState::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.oracle.v1beta1.PricePairState)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string pair_price = 1 [json_name = "pairPrice", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_pair_price().empty()) {
    const std::string& _s = this->_internal_pair_price();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.oracle.v1beta1.PricePairState.pair_price");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string base_price = 2 [json_name = "basePrice", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_base_price().empty()) {
    const std::string& _s = this->_internal_base_price();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.oracle.v1beta1.PricePairState.base_price");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string quote_price = 3 [json_name = "quotePrice", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_quote_price().empty()) {
    const std::string& _s = this->_internal_quote_price();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.oracle.v1beta1.PricePairState.quote_price");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string base_cumulative_price = 4 [json_name = "baseCumulativePrice", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_base_cumulative_price().empty()) {
    const std::string& _s = this->_internal_base_cumulative_price();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.oracle.v1beta1.PricePairState.base_cumulative_price");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // string quote_cumulative_price = 5 [json_name = "quoteCumulativePrice", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_quote_cumulative_price().empty()) {
    const std::string& _s = this->_internal_quote_cumulative_price();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.oracle.v1beta1.PricePairState.quote_cumulative_price");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // int64 base_timestamp = 6 [json_name = "baseTimestamp"];
  if (this->_internal_base_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        6, this->_internal_base_timestamp(), target);
  }

  // int64 quote_timestamp = 7 [json_name = "quoteTimestamp"];
  if (this->_internal_quote_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        7, this->_internal_quote_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.oracle.v1beta1.PricePairState)
  return target;
}

::size_t PricePairState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.oracle.v1beta1.PricePairState)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string pair_price = 1 [json_name = "pairPrice", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_pair_price().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_pair_price());
  }

  // string base_price = 2 [json_name = "basePrice", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_base_price().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_base_price());
  }

  // string quote_price = 3 [json_name = "quotePrice", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_quote_price().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_quote_price());
  }

  // string base_cumulative_price = 4 [json_name = "baseCumulativePrice", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_base_cumulative_price().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_base_cumulative_price());
  }

  // string quote_cumulative_price = 5 [json_name = "quoteCumulativePrice", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_quote_cumulative_price().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_quote_cumulative_price());
  }

  // int64 base_timestamp = 6 [json_name = "baseTimestamp"];
  if (this->_internal_base_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_base_timestamp());
  }

  // int64 quote_timestamp = 7 [json_name = "quoteTimestamp"];
  if (this->_internal_quote_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_quote_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PricePairState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PricePairState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PricePairState::GetClassData() const { return &_class_data_; }


void PricePairState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PricePairState*>(&to_msg);
  auto& from = static_cast<const PricePairState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.oracle.v1beta1.PricePairState)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_pair_price().empty()) {
    _this->_internal_set_pair_price(from._internal_pair_price());
  }
  if (!from._internal_base_price().empty()) {
    _this->_internal_set_base_price(from._internal_base_price());
  }
  if (!from._internal_quote_price().empty()) {
    _this->_internal_set_quote_price(from._internal_quote_price());
  }
  if (!from._internal_base_cumulative_price().empty()) {
    _this->_internal_set_base_cumulative_price(from._internal_base_cumulative_price());
  }
  if (!from._internal_quote_cumulative_price().empty()) {
    _this->_internal_set_quote_cumulative_price(from._internal_quote_cumulative_price());
  }
  if (from._internal_base_timestamp() != 0) {
    _this->_internal_set_base_timestamp(from._internal_base_timestamp());
  }
  if (from._internal_quote_timestamp() != 0) {
    _this->_internal_set_quote_timestamp(from._internal_quote_timestamp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PricePairState::CopyFrom(const PricePairState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.oracle.v1beta1.PricePairState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PricePairState::IsInitialized() const {
  return true;
}

void PricePairState::InternalSwap(PricePairState* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.pair_price_, lhs_arena,
                                       &other->_impl_.pair_price_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.base_price_, lhs_arena,
                                       &other->_impl_.base_price_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.quote_price_, lhs_arena,
                                       &other->_impl_.quote_price_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.base_cumulative_price_, lhs_arena,
                                       &other->_impl_.base_cumulative_price_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.quote_cumulative_price_, lhs_arena,
                                       &other->_impl_.quote_cumulative_price_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PricePairState, _impl_.quote_timestamp_)
      + sizeof(PricePairState::_impl_.quote_timestamp_)
      - PROTOBUF_FIELD_OFFSET(PricePairState, _impl_.base_timestamp_)>(
          reinterpret_cast<char*>(&_impl_.base_timestamp_),
          reinterpret_cast<char*>(&other->_impl_.base_timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PricePairState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2foracle_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2foracle_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2foracle_2fv1beta1_2fquery_2eproto[30]);
}
// ===================================================================

class QueryOraclePriceResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<QueryOraclePriceResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(QueryOraclePriceResponse, _impl_._has_bits_);
  static const ::injective::oracle::v1beta1::PricePairState& price_pair_state(const QueryOraclePriceResponse* msg);
  static void set_has_price_pair_state(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::injective::oracle::v1beta1::PricePairState&
QueryOraclePriceResponse::_Internal::price_pair_state(const QueryOraclePriceResponse* msg) {
  return *msg->_impl_.price_pair_state_;
}
QueryOraclePriceResponse::QueryOraclePriceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.oracle.v1beta1.QueryOraclePriceResponse)
}
QueryOraclePriceResponse::QueryOraclePriceResponse(const QueryOraclePriceResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryOraclePriceResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.price_pair_state_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.price_pair_state_ = new ::injective::oracle::v1beta1::PricePairState(*from._impl_.price_pair_state_);
  }
  // @@protoc_insertion_point(copy_constructor:injective.oracle.v1beta1.QueryOraclePriceResponse)
}

inline void QueryOraclePriceResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.price_pair_state_){nullptr}
  };
}

QueryOraclePriceResponse::~QueryOraclePriceResponse() {
  // @@protoc_insertion_point(destructor:injective.oracle.v1beta1.QueryOraclePriceResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryOraclePriceResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.price_pair_state_;
}

void QueryOraclePriceResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryOraclePriceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.oracle.v1beta1.QueryOraclePriceResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.price_pair_state_ != nullptr);
    _impl_.price_pair_state_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryOraclePriceResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .injective.oracle.v1beta1.PricePairState price_pair_state = 1 [json_name = "pricePairState"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_price_pair_state(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryOraclePriceResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.oracle.v1beta1.QueryOraclePriceResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .injective.oracle.v1beta1.PricePairState price_pair_state = 1 [json_name = "pricePairState"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::price_pair_state(this),
        _Internal::price_pair_state(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.oracle.v1beta1.QueryOraclePriceResponse)
  return target;
}

::size_t QueryOraclePriceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.oracle.v1beta1.QueryOraclePriceResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .injective.oracle.v1beta1.PricePairState price_pair_state = 1 [json_name = "pricePairState"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.price_pair_state_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryOraclePriceResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryOraclePriceResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryOraclePriceResponse::GetClassData() const { return &_class_data_; }


void QueryOraclePriceResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryOraclePriceResponse*>(&to_msg);
  auto& from = static_cast<const QueryOraclePriceResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.oracle.v1beta1.QueryOraclePriceResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_price_pair_state()->::injective::oracle::v1beta1::PricePairState::MergeFrom(
        from._internal_price_pair_state());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryOraclePriceResponse::CopyFrom(const QueryOraclePriceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.oracle.v1beta1.QueryOraclePriceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryOraclePriceResponse::IsInitialized() const {
  return true;
}

void QueryOraclePriceResponse::InternalSwap(QueryOraclePriceResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.price_pair_state_, other->_impl_.price_pair_state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryOraclePriceResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2foracle_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_injective_2foracle_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_injective_2foracle_2fv1beta1_2fquery_2eproto[31]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1beta1
}  // namespace oracle
}  // namespace injective
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::injective::oracle::v1beta1::QueryPythPriceRequest*
Arena::CreateMaybeMessage< ::injective::oracle::v1beta1::QueryPythPriceRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::oracle::v1beta1::QueryPythPriceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::oracle::v1beta1::QueryPythPriceResponse*
Arena::CreateMaybeMessage< ::injective::oracle::v1beta1::QueryPythPriceResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::oracle::v1beta1::QueryPythPriceResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::oracle::v1beta1::QueryParamsRequest*
Arena::CreateMaybeMessage< ::injective::oracle::v1beta1::QueryParamsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::oracle::v1beta1::QueryParamsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::oracle::v1beta1::QueryParamsResponse*
Arena::CreateMaybeMessage< ::injective::oracle::v1beta1::QueryParamsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::oracle::v1beta1::QueryParamsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::oracle::v1beta1::QueryBandRelayersRequest*
Arena::CreateMaybeMessage< ::injective::oracle::v1beta1::QueryBandRelayersRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::oracle::v1beta1::QueryBandRelayersRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::oracle::v1beta1::QueryBandRelayersResponse*
Arena::CreateMaybeMessage< ::injective::oracle::v1beta1::QueryBandRelayersResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::oracle::v1beta1::QueryBandRelayersResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::oracle::v1beta1::QueryBandPriceStatesRequest*
Arena::CreateMaybeMessage< ::injective::oracle::v1beta1::QueryBandPriceStatesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::oracle::v1beta1::QueryBandPriceStatesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::oracle::v1beta1::QueryBandPriceStatesResponse*
Arena::CreateMaybeMessage< ::injective::oracle::v1beta1::QueryBandPriceStatesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::oracle::v1beta1::QueryBandPriceStatesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::oracle::v1beta1::QueryBandIBCPriceStatesRequest*
Arena::CreateMaybeMessage< ::injective::oracle::v1beta1::QueryBandIBCPriceStatesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::oracle::v1beta1::QueryBandIBCPriceStatesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::oracle::v1beta1::QueryBandIBCPriceStatesResponse*
Arena::CreateMaybeMessage< ::injective::oracle::v1beta1::QueryBandIBCPriceStatesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::oracle::v1beta1::QueryBandIBCPriceStatesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::oracle::v1beta1::QueryPriceFeedPriceStatesRequest*
Arena::CreateMaybeMessage< ::injective::oracle::v1beta1::QueryPriceFeedPriceStatesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::oracle::v1beta1::QueryPriceFeedPriceStatesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::oracle::v1beta1::QueryPriceFeedPriceStatesResponse*
Arena::CreateMaybeMessage< ::injective::oracle::v1beta1::QueryPriceFeedPriceStatesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::oracle::v1beta1::QueryPriceFeedPriceStatesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::oracle::v1beta1::QueryCoinbasePriceStatesRequest*
Arena::CreateMaybeMessage< ::injective::oracle::v1beta1::QueryCoinbasePriceStatesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::oracle::v1beta1::QueryCoinbasePriceStatesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::oracle::v1beta1::QueryCoinbasePriceStatesResponse*
Arena::CreateMaybeMessage< ::injective::oracle::v1beta1::QueryCoinbasePriceStatesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::oracle::v1beta1::QueryCoinbasePriceStatesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::oracle::v1beta1::QueryPythPriceStatesRequest*
Arena::CreateMaybeMessage< ::injective::oracle::v1beta1::QueryPythPriceStatesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::oracle::v1beta1::QueryPythPriceStatesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::oracle::v1beta1::QueryPythPriceStatesResponse*
Arena::CreateMaybeMessage< ::injective::oracle::v1beta1::QueryPythPriceStatesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::oracle::v1beta1::QueryPythPriceStatesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::oracle::v1beta1::QueryProviderPriceStateRequest*
Arena::CreateMaybeMessage< ::injective::oracle::v1beta1::QueryProviderPriceStateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::oracle::v1beta1::QueryProviderPriceStateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::oracle::v1beta1::QueryProviderPriceStateResponse*
Arena::CreateMaybeMessage< ::injective::oracle::v1beta1::QueryProviderPriceStateResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::oracle::v1beta1::QueryProviderPriceStateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::oracle::v1beta1::QueryModuleStateRequest*
Arena::CreateMaybeMessage< ::injective::oracle::v1beta1::QueryModuleStateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::oracle::v1beta1::QueryModuleStateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::oracle::v1beta1::QueryModuleStateResponse*
Arena::CreateMaybeMessage< ::injective::oracle::v1beta1::QueryModuleStateResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::oracle::v1beta1::QueryModuleStateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::oracle::v1beta1::QueryHistoricalPriceRecordsRequest*
Arena::CreateMaybeMessage< ::injective::oracle::v1beta1::QueryHistoricalPriceRecordsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::oracle::v1beta1::QueryHistoricalPriceRecordsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::oracle::v1beta1::QueryHistoricalPriceRecordsResponse*
Arena::CreateMaybeMessage< ::injective::oracle::v1beta1::QueryHistoricalPriceRecordsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::oracle::v1beta1::QueryHistoricalPriceRecordsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::oracle::v1beta1::OracleHistoryOptions*
Arena::CreateMaybeMessage< ::injective::oracle::v1beta1::OracleHistoryOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::oracle::v1beta1::OracleHistoryOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::oracle::v1beta1::QueryOracleVolatilityRequest*
Arena::CreateMaybeMessage< ::injective::oracle::v1beta1::QueryOracleVolatilityRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::oracle::v1beta1::QueryOracleVolatilityRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::oracle::v1beta1::QueryOracleVolatilityResponse*
Arena::CreateMaybeMessage< ::injective::oracle::v1beta1::QueryOracleVolatilityResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::oracle::v1beta1::QueryOracleVolatilityResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::oracle::v1beta1::QueryOracleProvidersInfoRequest*
Arena::CreateMaybeMessage< ::injective::oracle::v1beta1::QueryOracleProvidersInfoRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::oracle::v1beta1::QueryOracleProvidersInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::oracle::v1beta1::QueryOracleProvidersInfoResponse*
Arena::CreateMaybeMessage< ::injective::oracle::v1beta1::QueryOracleProvidersInfoResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::oracle::v1beta1::QueryOracleProvidersInfoResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::oracle::v1beta1::QueryOracleProviderPricesRequest*
Arena::CreateMaybeMessage< ::injective::oracle::v1beta1::QueryOracleProviderPricesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::oracle::v1beta1::QueryOracleProviderPricesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::oracle::v1beta1::QueryOracleProviderPricesResponse*
Arena::CreateMaybeMessage< ::injective::oracle::v1beta1::QueryOracleProviderPricesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::oracle::v1beta1::QueryOracleProviderPricesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::oracle::v1beta1::QueryOraclePriceRequest*
Arena::CreateMaybeMessage< ::injective::oracle::v1beta1::QueryOraclePriceRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::oracle::v1beta1::QueryOraclePriceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::oracle::v1beta1::PricePairState*
Arena::CreateMaybeMessage< ::injective::oracle::v1beta1::PricePairState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::oracle::v1beta1::PricePairState >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::oracle::v1beta1::QueryOraclePriceResponse*
Arena::CreateMaybeMessage< ::injective::oracle::v1beta1::QueryOraclePriceResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::oracle::v1beta1::QueryOraclePriceResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: injective/oracle/v1beta1/events.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_injective_2foracle_2fv1beta1_2fevents_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_injective_2foracle_2fv1beta1_2fevents_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "gogoproto/gogo.pb.h"
#include "cosmos/base/v1beta1/coin.pb.h"
#include "injective/oracle/v1beta1/oracle.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_injective_2foracle_2fv1beta1_2fevents_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_injective_2foracle_2fv1beta1_2fevents_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_injective_2foracle_2fv1beta1_2fevents_2eproto;
namespace injective {
namespace oracle {
namespace v1beta1 {
class EventBandIBCAckError;
struct EventBandIBCAckErrorDefaultTypeInternal;
extern EventBandIBCAckErrorDefaultTypeInternal _EventBandIBCAckError_default_instance_;
class EventBandIBCAckSuccess;
struct EventBandIBCAckSuccessDefaultTypeInternal;
extern EventBandIBCAckSuccessDefaultTypeInternal _EventBandIBCAckSuccess_default_instance_;
class EventBandIBCResponseTimeout;
struct EventBandIBCResponseTimeoutDefaultTypeInternal;
extern EventBandIBCResponseTimeoutDefaultTypeInternal _EventBandIBCResponseTimeout_default_instance_;
class EventSetPythPrices;
struct EventSetPythPricesDefaultTypeInternal;
extern EventSetPythPricesDefaultTypeInternal _EventSetPythPrices_default_instance_;
class SetBandIBCPriceEvent;
struct SetBandIBCPriceEventDefaultTypeInternal;
extern SetBandIBCPriceEventDefaultTypeInternal _SetBandIBCPriceEvent_default_instance_;
class SetBandPriceEvent;
struct SetBandPriceEventDefaultTypeInternal;
extern SetBandPriceEventDefaultTypeInternal _SetBandPriceEvent_default_instance_;
class SetChainlinkPriceEvent;
struct SetChainlinkPriceEventDefaultTypeInternal;
extern SetChainlinkPriceEventDefaultTypeInternal _SetChainlinkPriceEvent_default_instance_;
class SetCoinbasePriceEvent;
struct SetCoinbasePriceEventDefaultTypeInternal;
extern SetCoinbasePriceEventDefaultTypeInternal _SetCoinbasePriceEvent_default_instance_;
class SetPriceFeedPriceEvent;
struct SetPriceFeedPriceEventDefaultTypeInternal;
extern SetPriceFeedPriceEventDefaultTypeInternal _SetPriceFeedPriceEvent_default_instance_;
class SetProviderPriceEvent;
struct SetProviderPriceEventDefaultTypeInternal;
extern SetProviderPriceEventDefaultTypeInternal _SetProviderPriceEvent_default_instance_;
}  // namespace v1beta1
}  // namespace oracle
}  // namespace injective
PROTOBUF_NAMESPACE_OPEN
template <>
::injective::oracle::v1beta1::EventBandIBCAckError* Arena::CreateMaybeMessage<::injective::oracle::v1beta1::EventBandIBCAckError>(Arena*);
template <>
::injective::oracle::v1beta1::EventBandIBCAckSuccess* Arena::CreateMaybeMessage<::injective::oracle::v1beta1::EventBandIBCAckSuccess>(Arena*);
template <>
::injective::oracle::v1beta1::EventBandIBCResponseTimeout* Arena::CreateMaybeMessage<::injective::oracle::v1beta1::EventBandIBCResponseTimeout>(Arena*);
template <>
::injective::oracle::v1beta1::EventSetPythPrices* Arena::CreateMaybeMessage<::injective::oracle::v1beta1::EventSetPythPrices>(Arena*);
template <>
::injective::oracle::v1beta1::SetBandIBCPriceEvent* Arena::CreateMaybeMessage<::injective::oracle::v1beta1::SetBandIBCPriceEvent>(Arena*);
template <>
::injective::oracle::v1beta1::SetBandPriceEvent* Arena::CreateMaybeMessage<::injective::oracle::v1beta1::SetBandPriceEvent>(Arena*);
template <>
::injective::oracle::v1beta1::SetChainlinkPriceEvent* Arena::CreateMaybeMessage<::injective::oracle::v1beta1::SetChainlinkPriceEvent>(Arena*);
template <>
::injective::oracle::v1beta1::SetCoinbasePriceEvent* Arena::CreateMaybeMessage<::injective::oracle::v1beta1::SetCoinbasePriceEvent>(Arena*);
template <>
::injective::oracle::v1beta1::SetPriceFeedPriceEvent* Arena::CreateMaybeMessage<::injective::oracle::v1beta1::SetPriceFeedPriceEvent>(Arena*);
template <>
::injective::oracle::v1beta1::SetProviderPriceEvent* Arena::CreateMaybeMessage<::injective::oracle::v1beta1::SetProviderPriceEvent>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace injective {
namespace oracle {
namespace v1beta1 {

// ===================================================================


// -------------------------------------------------------------------

class SetChainlinkPriceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.oracle.v1beta1.SetChainlinkPriceEvent) */ {
 public:
  inline SetChainlinkPriceEvent() : SetChainlinkPriceEvent(nullptr) {}
  ~SetChainlinkPriceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SetChainlinkPriceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetChainlinkPriceEvent(const SetChainlinkPriceEvent& from);
  SetChainlinkPriceEvent(SetChainlinkPriceEvent&& from) noexcept
    : SetChainlinkPriceEvent() {
    *this = ::std::move(from);
  }

  inline SetChainlinkPriceEvent& operator=(const SetChainlinkPriceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetChainlinkPriceEvent& operator=(SetChainlinkPriceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetChainlinkPriceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetChainlinkPriceEvent* internal_default_instance() {
    return reinterpret_cast<const SetChainlinkPriceEvent*>(
               &_SetChainlinkPriceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SetChainlinkPriceEvent& a, SetChainlinkPriceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(SetChainlinkPriceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetChainlinkPriceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetChainlinkPriceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetChainlinkPriceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetChainlinkPriceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SetChainlinkPriceEvent& from) {
    SetChainlinkPriceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetChainlinkPriceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.oracle.v1beta1.SetChainlinkPriceEvent";
  }
  protected:
  explicit SetChainlinkPriceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFeedIdFieldNumber = 1,
    kAnswerFieldNumber = 2,
    kTimestampFieldNumber = 3,
  };
  // string feed_id = 1 [json_name = "feedId"];
  void clear_feed_id() ;
  const std::string& feed_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_feed_id(Arg_&& arg, Args_... args);
  std::string* mutable_feed_id();
  PROTOBUF_NODISCARD std::string* release_feed_id();
  void set_allocated_feed_id(std::string* ptr);

  private:
  const std::string& _internal_feed_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_feed_id(
      const std::string& value);
  std::string* _internal_mutable_feed_id();

  public:
  // string answer = 2 [json_name = "answer", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  void clear_answer() ;
  const std::string& answer() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_answer(Arg_&& arg, Args_... args);
  std::string* mutable_answer();
  PROTOBUF_NODISCARD std::string* release_answer();
  void set_allocated_answer(std::string* ptr);

  private:
  const std::string& _internal_answer() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_answer(
      const std::string& value);
  std::string* _internal_mutable_answer();

  public:
  // uint64 timestamp = 3 [json_name = "timestamp"];
  void clear_timestamp() ;
  ::uint64_t timestamp() const;
  void set_timestamp(::uint64_t value);

  private:
  ::uint64_t _internal_timestamp() const;
  void _internal_set_timestamp(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:injective.oracle.v1beta1.SetChainlinkPriceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr feed_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr answer_;
    ::uint64_t timestamp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2foracle_2fv1beta1_2fevents_2eproto;
};// -------------------------------------------------------------------

class SetBandPriceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.oracle.v1beta1.SetBandPriceEvent) */ {
 public:
  inline SetBandPriceEvent() : SetBandPriceEvent(nullptr) {}
  ~SetBandPriceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SetBandPriceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetBandPriceEvent(const SetBandPriceEvent& from);
  SetBandPriceEvent(SetBandPriceEvent&& from) noexcept
    : SetBandPriceEvent() {
    *this = ::std::move(from);
  }

  inline SetBandPriceEvent& operator=(const SetBandPriceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetBandPriceEvent& operator=(SetBandPriceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetBandPriceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetBandPriceEvent* internal_default_instance() {
    return reinterpret_cast<const SetBandPriceEvent*>(
               &_SetBandPriceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SetBandPriceEvent& a, SetBandPriceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(SetBandPriceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetBandPriceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetBandPriceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetBandPriceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetBandPriceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SetBandPriceEvent& from) {
    SetBandPriceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetBandPriceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.oracle.v1beta1.SetBandPriceEvent";
  }
  protected:
  explicit SetBandPriceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRelayerFieldNumber = 1,
    kSymbolFieldNumber = 2,
    kPriceFieldNumber = 3,
    kResolveTimeFieldNumber = 4,
    kRequestIdFieldNumber = 5,
  };
  // string relayer = 1 [json_name = "relayer"];
  void clear_relayer() ;
  const std::string& relayer() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_relayer(Arg_&& arg, Args_... args);
  std::string* mutable_relayer();
  PROTOBUF_NODISCARD std::string* release_relayer();
  void set_allocated_relayer(std::string* ptr);

  private:
  const std::string& _internal_relayer() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_relayer(
      const std::string& value);
  std::string* _internal_mutable_relayer();

  public:
  // string symbol = 2 [json_name = "symbol"];
  void clear_symbol() ;
  const std::string& symbol() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_symbol(Arg_&& arg, Args_... args);
  std::string* mutable_symbol();
  PROTOBUF_NODISCARD std::string* release_symbol();
  void set_allocated_symbol(std::string* ptr);

  private:
  const std::string& _internal_symbol() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_symbol(
      const std::string& value);
  std::string* _internal_mutable_symbol();

  public:
  // string price = 3 [json_name = "price", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  void clear_price() ;
  const std::string& price() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_price(Arg_&& arg, Args_... args);
  std::string* mutable_price();
  PROTOBUF_NODISCARD std::string* release_price();
  void set_allocated_price(std::string* ptr);

  private:
  const std::string& _internal_price() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_price(
      const std::string& value);
  std::string* _internal_mutable_price();

  public:
  // uint64 resolve_time = 4 [json_name = "resolveTime"];
  void clear_resolve_time() ;
  ::uint64_t resolve_time() const;
  void set_resolve_time(::uint64_t value);

  private:
  ::uint64_t _internal_resolve_time() const;
  void _internal_set_resolve_time(::uint64_t value);

  public:
  // uint64 request_id = 5 [json_name = "requestId"];
  void clear_request_id() ;
  ::uint64_t request_id() const;
  void set_request_id(::uint64_t value);

  private:
  ::uint64_t _internal_request_id() const;
  void _internal_set_request_id(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:injective.oracle.v1beta1.SetBandPriceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr relayer_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr symbol_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr price_;
    ::uint64_t resolve_time_;
    ::uint64_t request_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2foracle_2fv1beta1_2fevents_2eproto;
};// -------------------------------------------------------------------

class SetBandIBCPriceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.oracle.v1beta1.SetBandIBCPriceEvent) */ {
 public:
  inline SetBandIBCPriceEvent() : SetBandIBCPriceEvent(nullptr) {}
  ~SetBandIBCPriceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SetBandIBCPriceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetBandIBCPriceEvent(const SetBandIBCPriceEvent& from);
  SetBandIBCPriceEvent(SetBandIBCPriceEvent&& from) noexcept
    : SetBandIBCPriceEvent() {
    *this = ::std::move(from);
  }

  inline SetBandIBCPriceEvent& operator=(const SetBandIBCPriceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetBandIBCPriceEvent& operator=(SetBandIBCPriceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetBandIBCPriceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetBandIBCPriceEvent* internal_default_instance() {
    return reinterpret_cast<const SetBandIBCPriceEvent*>(
               &_SetBandIBCPriceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SetBandIBCPriceEvent& a, SetBandIBCPriceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(SetBandIBCPriceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetBandIBCPriceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetBandIBCPriceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetBandIBCPriceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetBandIBCPriceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SetBandIBCPriceEvent& from) {
    SetBandIBCPriceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetBandIBCPriceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.oracle.v1beta1.SetBandIBCPriceEvent";
  }
  protected:
  explicit SetBandIBCPriceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSymbolsFieldNumber = 2,
    kPricesFieldNumber = 3,
    kRelayerFieldNumber = 1,
    kResolveTimeFieldNumber = 4,
    kRequestIdFieldNumber = 5,
    kClientIdFieldNumber = 6,
  };
  // repeated string symbols = 2 [json_name = "symbols"];
  int symbols_size() const;
  private:
  int _internal_symbols_size() const;

  public:
  void clear_symbols() ;
  const std::string& symbols(int index) const;
  std::string* mutable_symbols(int index);
  void set_symbols(int index, const std::string& value);
  void set_symbols(int index, std::string&& value);
  void set_symbols(int index, const char* value);
  void set_symbols(int index, const char* value, std::size_t size);
  void set_symbols(int index, absl::string_view value);
  std::string* add_symbols();
  void add_symbols(const std::string& value);
  void add_symbols(std::string&& value);
  void add_symbols(const char* value);
  void add_symbols(const char* value, std::size_t size);
  void add_symbols(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& symbols() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_symbols();

  private:
  const std::string& _internal_symbols(int index) const;
  std::string* _internal_add_symbols();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_symbols() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_symbols();

  public:
  // repeated string prices = 3 [json_name = "prices", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  int prices_size() const;
  private:
  int _internal_prices_size() const;

  public:
  void clear_prices() ;
  const std::string& prices(int index) const;
  std::string* mutable_prices(int index);
  void set_prices(int index, const std::string& value);
  void set_prices(int index, std::string&& value);
  void set_prices(int index, const char* value);
  void set_prices(int index, const char* value, std::size_t size);
  void set_prices(int index, absl::string_view value);
  std::string* add_prices();
  void add_prices(const std::string& value);
  void add_prices(std::string&& value);
  void add_prices(const char* value);
  void add_prices(const char* value, std::size_t size);
  void add_prices(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& prices() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_prices();

  private:
  const std::string& _internal_prices(int index) const;
  std::string* _internal_add_prices();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_prices() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_prices();

  public:
  // string relayer = 1 [json_name = "relayer"];
  void clear_relayer() ;
  const std::string& relayer() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_relayer(Arg_&& arg, Args_... args);
  std::string* mutable_relayer();
  PROTOBUF_NODISCARD std::string* release_relayer();
  void set_allocated_relayer(std::string* ptr);

  private:
  const std::string& _internal_relayer() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_relayer(
      const std::string& value);
  std::string* _internal_mutable_relayer();

  public:
  // uint64 resolve_time = 4 [json_name = "resolveTime"];
  void clear_resolve_time() ;
  ::uint64_t resolve_time() const;
  void set_resolve_time(::uint64_t value);

  private:
  ::uint64_t _internal_resolve_time() const;
  void _internal_set_resolve_time(::uint64_t value);

  public:
  // uint64 request_id = 5 [json_name = "requestId"];
  void clear_request_id() ;
  ::uint64_t request_id() const;
  void set_request_id(::uint64_t value);

  private:
  ::uint64_t _internal_request_id() const;
  void _internal_set_request_id(::uint64_t value);

  public:
  // int64 client_id = 6 [json_name = "clientId"];
  void clear_client_id() ;
  ::int64_t client_id() const;
  void set_client_id(::int64_t value);

  private:
  ::int64_t _internal_client_id() const;
  void _internal_set_client_id(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:injective.oracle.v1beta1.SetBandIBCPriceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> symbols_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> prices_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr relayer_;
    ::uint64_t resolve_time_;
    ::uint64_t request_id_;
    ::int64_t client_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2foracle_2fv1beta1_2fevents_2eproto;
};// -------------------------------------------------------------------

class EventBandIBCAckSuccess final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.oracle.v1beta1.EventBandIBCAckSuccess) */ {
 public:
  inline EventBandIBCAckSuccess() : EventBandIBCAckSuccess(nullptr) {}
  ~EventBandIBCAckSuccess() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR EventBandIBCAckSuccess(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EventBandIBCAckSuccess(const EventBandIBCAckSuccess& from);
  EventBandIBCAckSuccess(EventBandIBCAckSuccess&& from) noexcept
    : EventBandIBCAckSuccess() {
    *this = ::std::move(from);
  }

  inline EventBandIBCAckSuccess& operator=(const EventBandIBCAckSuccess& from) {
    CopyFrom(from);
    return *this;
  }
  inline EventBandIBCAckSuccess& operator=(EventBandIBCAckSuccess&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EventBandIBCAckSuccess& default_instance() {
    return *internal_default_instance();
  }
  static inline const EventBandIBCAckSuccess* internal_default_instance() {
    return reinterpret_cast<const EventBandIBCAckSuccess*>(
               &_EventBandIBCAckSuccess_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(EventBandIBCAckSuccess& a, EventBandIBCAckSuccess& b) {
    a.Swap(&b);
  }
  inline void Swap(EventBandIBCAckSuccess* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EventBandIBCAckSuccess* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EventBandIBCAckSuccess* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EventBandIBCAckSuccess>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EventBandIBCAckSuccess& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EventBandIBCAckSuccess& from) {
    EventBandIBCAckSuccess::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EventBandIBCAckSuccess* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.oracle.v1beta1.EventBandIBCAckSuccess";
  }
  protected:
  explicit EventBandIBCAckSuccess(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAckResultFieldNumber = 1,
    kClientIdFieldNumber = 2,
  };
  // string ack_result = 1 [json_name = "ackResult"];
  void clear_ack_result() ;
  const std::string& ack_result() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_ack_result(Arg_&& arg, Args_... args);
  std::string* mutable_ack_result();
  PROTOBUF_NODISCARD std::string* release_ack_result();
  void set_allocated_ack_result(std::string* ptr);

  private:
  const std::string& _internal_ack_result() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ack_result(
      const std::string& value);
  std::string* _internal_mutable_ack_result();

  public:
  // int64 client_id = 2 [json_name = "clientId"];
  void clear_client_id() ;
  ::int64_t client_id() const;
  void set_client_id(::int64_t value);

  private:
  ::int64_t _internal_client_id() const;
  void _internal_set_client_id(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:injective.oracle.v1beta1.EventBandIBCAckSuccess)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ack_result_;
    ::int64_t client_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2foracle_2fv1beta1_2fevents_2eproto;
};// -------------------------------------------------------------------

class EventBandIBCAckError final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.oracle.v1beta1.EventBandIBCAckError) */ {
 public:
  inline EventBandIBCAckError() : EventBandIBCAckError(nullptr) {}
  ~EventBandIBCAckError() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR EventBandIBCAckError(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EventBandIBCAckError(const EventBandIBCAckError& from);
  EventBandIBCAckError(EventBandIBCAckError&& from) noexcept
    : EventBandIBCAckError() {
    *this = ::std::move(from);
  }

  inline EventBandIBCAckError& operator=(const EventBandIBCAckError& from) {
    CopyFrom(from);
    return *this;
  }
  inline EventBandIBCAckError& operator=(EventBandIBCAckError&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EventBandIBCAckError& default_instance() {
    return *internal_default_instance();
  }
  static inline const EventBandIBCAckError* internal_default_instance() {
    return reinterpret_cast<const EventBandIBCAckError*>(
               &_EventBandIBCAckError_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(EventBandIBCAckError& a, EventBandIBCAckError& b) {
    a.Swap(&b);
  }
  inline void Swap(EventBandIBCAckError* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EventBandIBCAckError* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EventBandIBCAckError* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EventBandIBCAckError>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EventBandIBCAckError& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EventBandIBCAckError& from) {
    EventBandIBCAckError::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EventBandIBCAckError* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.oracle.v1beta1.EventBandIBCAckError";
  }
  protected:
  explicit EventBandIBCAckError(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAckErrorFieldNumber = 1,
    kClientIdFieldNumber = 2,
  };
  // string ack_error = 1 [json_name = "ackError"];
  void clear_ack_error() ;
  const std::string& ack_error() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_ack_error(Arg_&& arg, Args_... args);
  std::string* mutable_ack_error();
  PROTOBUF_NODISCARD std::string* release_ack_error();
  void set_allocated_ack_error(std::string* ptr);

  private:
  const std::string& _internal_ack_error() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ack_error(
      const std::string& value);
  std::string* _internal_mutable_ack_error();

  public:
  // int64 client_id = 2 [json_name = "clientId"];
  void clear_client_id() ;
  ::int64_t client_id() const;
  void set_client_id(::int64_t value);

  private:
  ::int64_t _internal_client_id() const;
  void _internal_set_client_id(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:injective.oracle.v1beta1.EventBandIBCAckError)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ack_error_;
    ::int64_t client_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2foracle_2fv1beta1_2fevents_2eproto;
};// -------------------------------------------------------------------

class EventBandIBCResponseTimeout final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.oracle.v1beta1.EventBandIBCResponseTimeout) */ {
 public:
  inline EventBandIBCResponseTimeout() : EventBandIBCResponseTimeout(nullptr) {}
  ~EventBandIBCResponseTimeout() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR EventBandIBCResponseTimeout(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EventBandIBCResponseTimeout(const EventBandIBCResponseTimeout& from);
  EventBandIBCResponseTimeout(EventBandIBCResponseTimeout&& from) noexcept
    : EventBandIBCResponseTimeout() {
    *this = ::std::move(from);
  }

  inline EventBandIBCResponseTimeout& operator=(const EventBandIBCResponseTimeout& from) {
    CopyFrom(from);
    return *this;
  }
  inline EventBandIBCResponseTimeout& operator=(EventBandIBCResponseTimeout&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EventBandIBCResponseTimeout& default_instance() {
    return *internal_default_instance();
  }
  static inline const EventBandIBCResponseTimeout* internal_default_instance() {
    return reinterpret_cast<const EventBandIBCResponseTimeout*>(
               &_EventBandIBCResponseTimeout_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(EventBandIBCResponseTimeout& a, EventBandIBCResponseTimeout& b) {
    a.Swap(&b);
  }
  inline void Swap(EventBandIBCResponseTimeout* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EventBandIBCResponseTimeout* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EventBandIBCResponseTimeout* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EventBandIBCResponseTimeout>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EventBandIBCResponseTimeout& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EventBandIBCResponseTimeout& from) {
    EventBandIBCResponseTimeout::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EventBandIBCResponseTimeout* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.oracle.v1beta1.EventBandIBCResponseTimeout";
  }
  protected:
  explicit EventBandIBCResponseTimeout(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientIdFieldNumber = 1,
  };
  // int64 client_id = 1 [json_name = "clientId"];
  void clear_client_id() ;
  ::int64_t client_id() const;
  void set_client_id(::int64_t value);

  private:
  ::int64_t _internal_client_id() const;
  void _internal_set_client_id(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:injective.oracle.v1beta1.EventBandIBCResponseTimeout)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::int64_t client_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2foracle_2fv1beta1_2fevents_2eproto;
};// -------------------------------------------------------------------

class SetPriceFeedPriceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.oracle.v1beta1.SetPriceFeedPriceEvent) */ {
 public:
  inline SetPriceFeedPriceEvent() : SetPriceFeedPriceEvent(nullptr) {}
  ~SetPriceFeedPriceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SetPriceFeedPriceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetPriceFeedPriceEvent(const SetPriceFeedPriceEvent& from);
  SetPriceFeedPriceEvent(SetPriceFeedPriceEvent&& from) noexcept
    : SetPriceFeedPriceEvent() {
    *this = ::std::move(from);
  }

  inline SetPriceFeedPriceEvent& operator=(const SetPriceFeedPriceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetPriceFeedPriceEvent& operator=(SetPriceFeedPriceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetPriceFeedPriceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetPriceFeedPriceEvent* internal_default_instance() {
    return reinterpret_cast<const SetPriceFeedPriceEvent*>(
               &_SetPriceFeedPriceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SetPriceFeedPriceEvent& a, SetPriceFeedPriceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(SetPriceFeedPriceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetPriceFeedPriceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetPriceFeedPriceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetPriceFeedPriceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetPriceFeedPriceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SetPriceFeedPriceEvent& from) {
    SetPriceFeedPriceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetPriceFeedPriceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.oracle.v1beta1.SetPriceFeedPriceEvent";
  }
  protected:
  explicit SetPriceFeedPriceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRelayerFieldNumber = 1,
    kBaseFieldNumber = 2,
    kQuoteFieldNumber = 3,
    kPriceFieldNumber = 4,
  };
  // string relayer = 1 [json_name = "relayer"];
  void clear_relayer() ;
  const std::string& relayer() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_relayer(Arg_&& arg, Args_... args);
  std::string* mutable_relayer();
  PROTOBUF_NODISCARD std::string* release_relayer();
  void set_allocated_relayer(std::string* ptr);

  private:
  const std::string& _internal_relayer() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_relayer(
      const std::string& value);
  std::string* _internal_mutable_relayer();

  public:
  // string base = 2 [json_name = "base"];
  void clear_base() ;
  const std::string& base() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_base(Arg_&& arg, Args_... args);
  std::string* mutable_base();
  PROTOBUF_NODISCARD std::string* release_base();
  void set_allocated_base(std::string* ptr);

  private:
  const std::string& _internal_base() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_base(
      const std::string& value);
  std::string* _internal_mutable_base();

  public:
  // string quote = 3 [json_name = "quote"];
  void clear_quote() ;
  const std::string& quote() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_quote(Arg_&& arg, Args_... args);
  std::string* mutable_quote();
  PROTOBUF_NODISCARD std::string* release_quote();
  void set_allocated_quote(std::string* ptr);

  private:
  const std::string& _internal_quote() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_quote(
      const std::string& value);
  std::string* _internal_mutable_quote();

  public:
  // string price = 4 [json_name = "price", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  void clear_price() ;
  const std::string& price() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_price(Arg_&& arg, Args_... args);
  std::string* mutable_price();
  PROTOBUF_NODISCARD std::string* release_price();
  void set_allocated_price(std::string* ptr);

  private:
  const std::string& _internal_price() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_price(
      const std::string& value);
  std::string* _internal_mutable_price();

  public:
  // @@protoc_insertion_point(class_scope:injective.oracle.v1beta1.SetPriceFeedPriceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr relayer_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr base_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr quote_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr price_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2foracle_2fv1beta1_2fevents_2eproto;
};// -------------------------------------------------------------------

class SetProviderPriceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.oracle.v1beta1.SetProviderPriceEvent) */ {
 public:
  inline SetProviderPriceEvent() : SetProviderPriceEvent(nullptr) {}
  ~SetProviderPriceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SetProviderPriceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetProviderPriceEvent(const SetProviderPriceEvent& from);
  SetProviderPriceEvent(SetProviderPriceEvent&& from) noexcept
    : SetProviderPriceEvent() {
    *this = ::std::move(from);
  }

  inline SetProviderPriceEvent& operator=(const SetProviderPriceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetProviderPriceEvent& operator=(SetProviderPriceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetProviderPriceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetProviderPriceEvent* internal_default_instance() {
    return reinterpret_cast<const SetProviderPriceEvent*>(
               &_SetProviderPriceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(SetProviderPriceEvent& a, SetProviderPriceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(SetProviderPriceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetProviderPriceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetProviderPriceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetProviderPriceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetProviderPriceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SetProviderPriceEvent& from) {
    SetProviderPriceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetProviderPriceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.oracle.v1beta1.SetProviderPriceEvent";
  }
  protected:
  explicit SetProviderPriceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProviderFieldNumber = 1,
    kRelayerFieldNumber = 2,
    kSymbolFieldNumber = 3,
    kPriceFieldNumber = 4,
  };
  // string provider = 1 [json_name = "provider"];
  void clear_provider() ;
  const std::string& provider() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_provider(Arg_&& arg, Args_... args);
  std::string* mutable_provider();
  PROTOBUF_NODISCARD std::string* release_provider();
  void set_allocated_provider(std::string* ptr);

  private:
  const std::string& _internal_provider() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_provider(
      const std::string& value);
  std::string* _internal_mutable_provider();

  public:
  // string relayer = 2 [json_name = "relayer"];
  void clear_relayer() ;
  const std::string& relayer() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_relayer(Arg_&& arg, Args_... args);
  std::string* mutable_relayer();
  PROTOBUF_NODISCARD std::string* release_relayer();
  void set_allocated_relayer(std::string* ptr);

  private:
  const std::string& _internal_relayer() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_relayer(
      const std::string& value);
  std::string* _internal_mutable_relayer();

  public:
  // string symbol = 3 [json_name = "symbol"];
  void clear_symbol() ;
  const std::string& symbol() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_symbol(Arg_&& arg, Args_... args);
  std::string* mutable_symbol();
  PROTOBUF_NODISCARD std::string* release_symbol();
  void set_allocated_symbol(std::string* ptr);

  private:
  const std::string& _internal_symbol() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_symbol(
      const std::string& value);
  std::string* _internal_mutable_symbol();

  public:
  // string price = 4 [json_name = "price", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  void clear_price() ;
  const std::string& price() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_price(Arg_&& arg, Args_... args);
  std::string* mutable_price();
  PROTOBUF_NODISCARD std::string* release_price();
  void set_allocated_price(std::string* ptr);

  private:
  const std::string& _internal_price() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_price(
      const std::string& value);
  std::string* _internal_mutable_price();

  public:
  // @@protoc_insertion_point(class_scope:injective.oracle.v1beta1.SetProviderPriceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr provider_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr relayer_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr symbol_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr price_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2foracle_2fv1beta1_2fevents_2eproto;
};// -------------------------------------------------------------------

class SetCoinbasePriceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.oracle.v1beta1.SetCoinbasePriceEvent) */ {
 public:
  inline SetCoinbasePriceEvent() : SetCoinbasePriceEvent(nullptr) {}
  ~SetCoinbasePriceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SetCoinbasePriceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetCoinbasePriceEvent(const SetCoinbasePriceEvent& from);
  SetCoinbasePriceEvent(SetCoinbasePriceEvent&& from) noexcept
    : SetCoinbasePriceEvent() {
    *this = ::std::move(from);
  }

  inline SetCoinbasePriceEvent& operator=(const SetCoinbasePriceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetCoinbasePriceEvent& operator=(SetCoinbasePriceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetCoinbasePriceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetCoinbasePriceEvent* internal_default_instance() {
    return reinterpret_cast<const SetCoinbasePriceEvent*>(
               &_SetCoinbasePriceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(SetCoinbasePriceEvent& a, SetCoinbasePriceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(SetCoinbasePriceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetCoinbasePriceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetCoinbasePriceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetCoinbasePriceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetCoinbasePriceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SetCoinbasePriceEvent& from) {
    SetCoinbasePriceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetCoinbasePriceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.oracle.v1beta1.SetCoinbasePriceEvent";
  }
  protected:
  explicit SetCoinbasePriceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSymbolFieldNumber = 1,
    kPriceFieldNumber = 2,
    kTimestampFieldNumber = 3,
  };
  // string symbol = 1 [json_name = "symbol"];
  void clear_symbol() ;
  const std::string& symbol() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_symbol(Arg_&& arg, Args_... args);
  std::string* mutable_symbol();
  PROTOBUF_NODISCARD std::string* release_symbol();
  void set_allocated_symbol(std::string* ptr);

  private:
  const std::string& _internal_symbol() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_symbol(
      const std::string& value);
  std::string* _internal_mutable_symbol();

  public:
  // string price = 2 [json_name = "price", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  void clear_price() ;
  const std::string& price() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_price(Arg_&& arg, Args_... args);
  std::string* mutable_price();
  PROTOBUF_NODISCARD std::string* release_price();
  void set_allocated_price(std::string* ptr);

  private:
  const std::string& _internal_price() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_price(
      const std::string& value);
  std::string* _internal_mutable_price();

  public:
  // uint64 timestamp = 3 [json_name = "timestamp"];
  void clear_timestamp() ;
  ::uint64_t timestamp() const;
  void set_timestamp(::uint64_t value);

  private:
  ::uint64_t _internal_timestamp() const;
  void _internal_set_timestamp(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:injective.oracle.v1beta1.SetCoinbasePriceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr symbol_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr price_;
    ::uint64_t timestamp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2foracle_2fv1beta1_2fevents_2eproto;
};// -------------------------------------------------------------------

class EventSetPythPrices final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.oracle.v1beta1.EventSetPythPrices) */ {
 public:
  inline EventSetPythPrices() : EventSetPythPrices(nullptr) {}
  ~EventSetPythPrices() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR EventSetPythPrices(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EventSetPythPrices(const EventSetPythPrices& from);
  EventSetPythPrices(EventSetPythPrices&& from) noexcept
    : EventSetPythPrices() {
    *this = ::std::move(from);
  }

  inline EventSetPythPrices& operator=(const EventSetPythPrices& from) {
    CopyFrom(from);
    return *this;
  }
  inline EventSetPythPrices& operator=(EventSetPythPrices&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EventSetPythPrices& default_instance() {
    return *internal_default_instance();
  }
  static inline const EventSetPythPrices* internal_default_instance() {
    return reinterpret_cast<const EventSetPythPrices*>(
               &_EventSetPythPrices_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(EventSetPythPrices& a, EventSetPythPrices& b) {
    a.Swap(&b);
  }
  inline void Swap(EventSetPythPrices* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EventSetPythPrices* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EventSetPythPrices* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EventSetPythPrices>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EventSetPythPrices& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EventSetPythPrices& from) {
    EventSetPythPrices::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EventSetPythPrices* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.oracle.v1beta1.EventSetPythPrices";
  }
  protected:
  explicit EventSetPythPrices(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPricesFieldNumber = 1,
  };
  // repeated .injective.oracle.v1beta1.PythPriceState prices = 1 [json_name = "prices"];
  int prices_size() const;
  private:
  int _internal_prices_size() const;

  public:
  void clear_prices() ;
  ::injective::oracle::v1beta1::PythPriceState* mutable_prices(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::oracle::v1beta1::PythPriceState >*
      mutable_prices();
  private:
  const ::injective::oracle::v1beta1::PythPriceState& _internal_prices(int index) const;
  ::injective::oracle::v1beta1::PythPriceState* _internal_add_prices();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::oracle::v1beta1::PythPriceState>& _internal_prices() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::oracle::v1beta1::PythPriceState>* _internal_mutable_prices();
  public:
  const ::injective::oracle::v1beta1::PythPriceState& prices(int index) const;
  ::injective::oracle::v1beta1::PythPriceState* add_prices();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::oracle::v1beta1::PythPriceState >&
      prices() const;
  // @@protoc_insertion_point(class_scope:injective.oracle.v1beta1.EventSetPythPrices)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::oracle::v1beta1::PythPriceState > prices_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2foracle_2fv1beta1_2fevents_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// SetChainlinkPriceEvent

// string feed_id = 1 [json_name = "feedId"];
inline void SetChainlinkPriceEvent::clear_feed_id() {
  _impl_.feed_id_.ClearToEmpty();
}
inline const std::string& SetChainlinkPriceEvent::feed_id() const {
  // @@protoc_insertion_point(field_get:injective.oracle.v1beta1.SetChainlinkPriceEvent.feed_id)
  return _internal_feed_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SetChainlinkPriceEvent::set_feed_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.feed_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.oracle.v1beta1.SetChainlinkPriceEvent.feed_id)
}
inline std::string* SetChainlinkPriceEvent::mutable_feed_id() {
  std::string* _s = _internal_mutable_feed_id();
  // @@protoc_insertion_point(field_mutable:injective.oracle.v1beta1.SetChainlinkPriceEvent.feed_id)
  return _s;
}
inline const std::string& SetChainlinkPriceEvent::_internal_feed_id() const {
  return _impl_.feed_id_.Get();
}
inline void SetChainlinkPriceEvent::_internal_set_feed_id(const std::string& value) {
  ;


  _impl_.feed_id_.Set(value, GetArenaForAllocation());
}
inline std::string* SetChainlinkPriceEvent::_internal_mutable_feed_id() {
  ;
  return _impl_.feed_id_.Mutable( GetArenaForAllocation());
}
inline std::string* SetChainlinkPriceEvent::release_feed_id() {
  // @@protoc_insertion_point(field_release:injective.oracle.v1beta1.SetChainlinkPriceEvent.feed_id)
  return _impl_.feed_id_.Release();
}
inline void SetChainlinkPriceEvent::set_allocated_feed_id(std::string* value) {
  _impl_.feed_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.feed_id_.IsDefault()) {
          _impl_.feed_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.oracle.v1beta1.SetChainlinkPriceEvent.feed_id)
}

// string answer = 2 [json_name = "answer", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
inline void SetChainlinkPriceEvent::clear_answer() {
  _impl_.answer_.ClearToEmpty();
}
inline const std::string& SetChainlinkPriceEvent::answer() const {
  // @@protoc_insertion_point(field_get:injective.oracle.v1beta1.SetChainlinkPriceEvent.answer)
  return _internal_answer();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SetChainlinkPriceEvent::set_answer(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.answer_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.oracle.v1beta1.SetChainlinkPriceEvent.answer)
}
inline std::string* SetChainlinkPriceEvent::mutable_answer() {
  std::string* _s = _internal_mutable_answer();
  // @@protoc_insertion_point(field_mutable:injective.oracle.v1beta1.SetChainlinkPriceEvent.answer)
  return _s;
}
inline const std::string& SetChainlinkPriceEvent::_internal_answer() const {
  return _impl_.answer_.Get();
}
inline void SetChainlinkPriceEvent::_internal_set_answer(const std::string& value) {
  ;


  _impl_.answer_.Set(value, GetArenaForAllocation());
}
inline std::string* SetChainlinkPriceEvent::_internal_mutable_answer() {
  ;
  return _impl_.answer_.Mutable( GetArenaForAllocation());
}
inline std::string* SetChainlinkPriceEvent::release_answer() {
  // @@protoc_insertion_point(field_release:injective.oracle.v1beta1.SetChainlinkPriceEvent.answer)
  return _impl_.answer_.Release();
}
inline void SetChainlinkPriceEvent::set_allocated_answer(std::string* value) {
  _impl_.answer_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.answer_.IsDefault()) {
          _impl_.answer_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.oracle.v1beta1.SetChainlinkPriceEvent.answer)
}

// uint64 timestamp = 3 [json_name = "timestamp"];
inline void SetChainlinkPriceEvent::clear_timestamp() {
  _impl_.timestamp_ = ::uint64_t{0u};
}
inline ::uint64_t SetChainlinkPriceEvent::timestamp() const {
  // @@protoc_insertion_point(field_get:injective.oracle.v1beta1.SetChainlinkPriceEvent.timestamp)
  return _internal_timestamp();
}
inline void SetChainlinkPriceEvent::set_timestamp(::uint64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:injective.oracle.v1beta1.SetChainlinkPriceEvent.timestamp)
}
inline ::uint64_t SetChainlinkPriceEvent::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline void SetChainlinkPriceEvent::_internal_set_timestamp(::uint64_t value) {
  ;
  _impl_.timestamp_ = value;
}

// -------------------------------------------------------------------

// SetBandPriceEvent

// string relayer = 1 [json_name = "relayer"];
inline void SetBandPriceEvent::clear_relayer() {
  _impl_.relayer_.ClearToEmpty();
}
inline const std::string& SetBandPriceEvent::relayer() const {
  // @@protoc_insertion_point(field_get:injective.oracle.v1beta1.SetBandPriceEvent.relayer)
  return _internal_relayer();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SetBandPriceEvent::set_relayer(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.relayer_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.oracle.v1beta1.SetBandPriceEvent.relayer)
}
inline std::string* SetBandPriceEvent::mutable_relayer() {
  std::string* _s = _internal_mutable_relayer();
  // @@protoc_insertion_point(field_mutable:injective.oracle.v1beta1.SetBandPriceEvent.relayer)
  return _s;
}
inline const std::string& SetBandPriceEvent::_internal_relayer() const {
  return _impl_.relayer_.Get();
}
inline void SetBandPriceEvent::_internal_set_relayer(const std::string& value) {
  ;


  _impl_.relayer_.Set(value, GetArenaForAllocation());
}
inline std::string* SetBandPriceEvent::_internal_mutable_relayer() {
  ;
  return _impl_.relayer_.Mutable( GetArenaForAllocation());
}
inline std::string* SetBandPriceEvent::release_relayer() {
  // @@protoc_insertion_point(field_release:injective.oracle.v1beta1.SetBandPriceEvent.relayer)
  return _impl_.relayer_.Release();
}
inline void SetBandPriceEvent::set_allocated_relayer(std::string* value) {
  _impl_.relayer_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.relayer_.IsDefault()) {
          _impl_.relayer_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.oracle.v1beta1.SetBandPriceEvent.relayer)
}

// string symbol = 2 [json_name = "symbol"];
inline void SetBandPriceEvent::clear_symbol() {
  _impl_.symbol_.ClearToEmpty();
}
inline const std::string& SetBandPriceEvent::symbol() const {
  // @@protoc_insertion_point(field_get:injective.oracle.v1beta1.SetBandPriceEvent.symbol)
  return _internal_symbol();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SetBandPriceEvent::set_symbol(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.symbol_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.oracle.v1beta1.SetBandPriceEvent.symbol)
}
inline std::string* SetBandPriceEvent::mutable_symbol() {
  std::string* _s = _internal_mutable_symbol();
  // @@protoc_insertion_point(field_mutable:injective.oracle.v1beta1.SetBandPriceEvent.symbol)
  return _s;
}
inline const std::string& SetBandPriceEvent::_internal_symbol() const {
  return _impl_.symbol_.Get();
}
inline void SetBandPriceEvent::_internal_set_symbol(const std::string& value) {
  ;


  _impl_.symbol_.Set(value, GetArenaForAllocation());
}
inline std::string* SetBandPriceEvent::_internal_mutable_symbol() {
  ;
  return _impl_.symbol_.Mutable( GetArenaForAllocation());
}
inline std::string* SetBandPriceEvent::release_symbol() {
  // @@protoc_insertion_point(field_release:injective.oracle.v1beta1.SetBandPriceEvent.symbol)
  return _impl_.symbol_.Release();
}
inline void SetBandPriceEvent::set_allocated_symbol(std::string* value) {
  _impl_.symbol_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.symbol_.IsDefault()) {
          _impl_.symbol_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.oracle.v1beta1.SetBandPriceEvent.symbol)
}

// string price = 3 [json_name = "price", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
inline void SetBandPriceEvent::clear_price() {
  _impl_.price_.ClearToEmpty();
}
inline const std::string& SetBandPriceEvent::price() const {
  // @@protoc_insertion_point(field_get:injective.oracle.v1beta1.SetBandPriceEvent.price)
  return _internal_price();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SetBandPriceEvent::set_price(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.price_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.oracle.v1beta1.SetBandPriceEvent.price)
}
inline std::string* SetBandPriceEvent::mutable_price() {
  std::string* _s = _internal_mutable_price();
  // @@protoc_insertion_point(field_mutable:injective.oracle.v1beta1.SetBandPriceEvent.price)
  return _s;
}
inline const std::string& SetBandPriceEvent::_internal_price() const {
  return _impl_.price_.Get();
}
inline void SetBandPriceEvent::_internal_set_price(const std::string& value) {
  ;


  _impl_.price_.Set(value, GetArenaForAllocation());
}
inline std::string* SetBandPriceEvent::_internal_mutable_price() {
  ;
  return _impl_.price_.Mutable( GetArenaForAllocation());
}
inline std::string* SetBandPriceEvent::release_price() {
  // @@protoc_insertion_point(field_release:injective.oracle.v1beta1.SetBandPriceEvent.price)
  return _impl_.price_.Release();
}
inline void SetBandPriceEvent::set_allocated_price(std::string* value) {
  _impl_.price_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.price_.IsDefault()) {
          _impl_.price_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.oracle.v1beta1.SetBandPriceEvent.price)
}

// uint64 resolve_time = 4 [json_name = "resolveTime"];
inline void SetBandPriceEvent::clear_resolve_time() {
  _impl_.resolve_time_ = ::uint64_t{0u};
}
inline ::uint64_t SetBandPriceEvent::resolve_time() const {
  // @@protoc_insertion_point(field_get:injective.oracle.v1beta1.SetBandPriceEvent.resolve_time)
  return _internal_resolve_time();
}
inline void SetBandPriceEvent::set_resolve_time(::uint64_t value) {
  _internal_set_resolve_time(value);
  // @@protoc_insertion_point(field_set:injective.oracle.v1beta1.SetBandPriceEvent.resolve_time)
}
inline ::uint64_t SetBandPriceEvent::_internal_resolve_time() const {
  return _impl_.resolve_time_;
}
inline void SetBandPriceEvent::_internal_set_resolve_time(::uint64_t value) {
  ;
  _impl_.resolve_time_ = value;
}

// uint64 request_id = 5 [json_name = "requestId"];
inline void SetBandPriceEvent::clear_request_id() {
  _impl_.request_id_ = ::uint64_t{0u};
}
inline ::uint64_t SetBandPriceEvent::request_id() const {
  // @@protoc_insertion_point(field_get:injective.oracle.v1beta1.SetBandPriceEvent.request_id)
  return _internal_request_id();
}
inline void SetBandPriceEvent::set_request_id(::uint64_t value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:injective.oracle.v1beta1.SetBandPriceEvent.request_id)
}
inline ::uint64_t SetBandPriceEvent::_internal_request_id() const {
  return _impl_.request_id_;
}
inline void SetBandPriceEvent::_internal_set_request_id(::uint64_t value) {
  ;
  _impl_.request_id_ = value;
}

// -------------------------------------------------------------------

// SetBandIBCPriceEvent

// string relayer = 1 [json_name = "relayer"];
inline void SetBandIBCPriceEvent::clear_relayer() {
  _impl_.relayer_.ClearToEmpty();
}
inline const std::string& SetBandIBCPriceEvent::relayer() const {
  // @@protoc_insertion_point(field_get:injective.oracle.v1beta1.SetBandIBCPriceEvent.relayer)
  return _internal_relayer();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SetBandIBCPriceEvent::set_relayer(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.relayer_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.oracle.v1beta1.SetBandIBCPriceEvent.relayer)
}
inline std::string* SetBandIBCPriceEvent::mutable_relayer() {
  std::string* _s = _internal_mutable_relayer();
  // @@protoc_insertion_point(field_mutable:injective.oracle.v1beta1.SetBandIBCPriceEvent.relayer)
  return _s;
}
inline const std::string& SetBandIBCPriceEvent::_internal_relayer() const {
  return _impl_.relayer_.Get();
}
inline void SetBandIBCPriceEvent::_internal_set_relayer(const std::string& value) {
  ;


  _impl_.relayer_.Set(value, GetArenaForAllocation());
}
inline std::string* SetBandIBCPriceEvent::_internal_mutable_relayer() {
  ;
  return _impl_.relayer_.Mutable( GetArenaForAllocation());
}
inline std::string* SetBandIBCPriceEvent::release_relayer() {
  // @@protoc_insertion_point(field_release:injective.oracle.v1beta1.SetBandIBCPriceEvent.relayer)
  return _impl_.relayer_.Release();
}
inline void SetBandIBCPriceEvent::set_allocated_relayer(std::string* value) {
  _impl_.relayer_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.relayer_.IsDefault()) {
          _impl_.relayer_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.oracle.v1beta1.SetBandIBCPriceEvent.relayer)
}

// repeated string symbols = 2 [json_name = "symbols"];
inline int SetBandIBCPriceEvent::_internal_symbols_size() const {
  return _impl_.symbols_.size();
}
inline int SetBandIBCPriceEvent::symbols_size() const {
  return _internal_symbols_size();
}
inline void SetBandIBCPriceEvent::clear_symbols() {
  _internal_mutable_symbols()->Clear();
}
inline std::string* SetBandIBCPriceEvent::add_symbols() {
  std::string* _s = _internal_add_symbols();
  // @@protoc_insertion_point(field_add_mutable:injective.oracle.v1beta1.SetBandIBCPriceEvent.symbols)
  return _s;
}
inline const std::string& SetBandIBCPriceEvent::symbols(int index) const {
  // @@protoc_insertion_point(field_get:injective.oracle.v1beta1.SetBandIBCPriceEvent.symbols)
  return _internal_symbols(index);
}
inline std::string* SetBandIBCPriceEvent::mutable_symbols(int index) {
  // @@protoc_insertion_point(field_mutable:injective.oracle.v1beta1.SetBandIBCPriceEvent.symbols)
  return _internal_mutable_symbols()->Mutable(index);
}
inline void SetBandIBCPriceEvent::set_symbols(int index, const std::string& value) {
  _internal_mutable_symbols()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:injective.oracle.v1beta1.SetBandIBCPriceEvent.symbols)
}
inline void SetBandIBCPriceEvent::set_symbols(int index, std::string&& value) {
  _internal_mutable_symbols()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:injective.oracle.v1beta1.SetBandIBCPriceEvent.symbols)
}
inline void SetBandIBCPriceEvent::set_symbols(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_symbols()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:injective.oracle.v1beta1.SetBandIBCPriceEvent.symbols)
}
inline void SetBandIBCPriceEvent::set_symbols(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_symbols()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:injective.oracle.v1beta1.SetBandIBCPriceEvent.symbols)
}
inline void SetBandIBCPriceEvent::set_symbols(int index, absl::string_view value) {
  _internal_mutable_symbols()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:injective.oracle.v1beta1.SetBandIBCPriceEvent.symbols)
}
inline void SetBandIBCPriceEvent::add_symbols(const std::string& value) {
  _internal_mutable_symbols()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:injective.oracle.v1beta1.SetBandIBCPriceEvent.symbols)
}
inline void SetBandIBCPriceEvent::add_symbols(std::string&& value) {
  _internal_mutable_symbols()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:injective.oracle.v1beta1.SetBandIBCPriceEvent.symbols)
}
inline void SetBandIBCPriceEvent::add_symbols(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_symbols()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:injective.oracle.v1beta1.SetBandIBCPriceEvent.symbols)
}
inline void SetBandIBCPriceEvent::add_symbols(const char* value, std::size_t size) {
  _internal_mutable_symbols()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:injective.oracle.v1beta1.SetBandIBCPriceEvent.symbols)
}
inline void SetBandIBCPriceEvent::add_symbols(absl::string_view value) {
  _internal_mutable_symbols()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:injective.oracle.v1beta1.SetBandIBCPriceEvent.symbols)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SetBandIBCPriceEvent::symbols() const {
  // @@protoc_insertion_point(field_list:injective.oracle.v1beta1.SetBandIBCPriceEvent.symbols)
  return _internal_symbols();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* SetBandIBCPriceEvent::mutable_symbols() {
  // @@protoc_insertion_point(field_mutable_list:injective.oracle.v1beta1.SetBandIBCPriceEvent.symbols)
  return _internal_mutable_symbols();
}
inline const std::string& SetBandIBCPriceEvent::_internal_symbols(int index) const {
  return _internal_symbols().Get(index);
}
inline std::string* SetBandIBCPriceEvent::_internal_add_symbols() {
  return _internal_mutable_symbols()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SetBandIBCPriceEvent::_internal_symbols() const {
  return _impl_.symbols_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SetBandIBCPriceEvent::_internal_mutable_symbols() {
  return &_impl_.symbols_;
}

// repeated string prices = 3 [json_name = "prices", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
inline int SetBandIBCPriceEvent::_internal_prices_size() const {
  return _impl_.prices_.size();
}
inline int SetBandIBCPriceEvent::prices_size() const {
  return _internal_prices_size();
}
inline void SetBandIBCPriceEvent::clear_prices() {
  _internal_mutable_prices()->Clear();
}
inline std::string* SetBandIBCPriceEvent::add_prices() {
  std::string* _s = _internal_add_prices();
  // @@protoc_insertion_point(field_add_mutable:injective.oracle.v1beta1.SetBandIBCPriceEvent.prices)
  return _s;
}
inline const std::string& SetBandIBCPriceEvent::prices(int index) const {
  // @@protoc_insertion_point(field_get:injective.oracle.v1beta1.SetBandIBCPriceEvent.prices)
  return _internal_prices(index);
}
inline std::string* SetBandIBCPriceEvent::mutable_prices(int index) {
  // @@protoc_insertion_point(field_mutable:injective.oracle.v1beta1.SetBandIBCPriceEvent.prices)
  return _internal_mutable_prices()->Mutable(index);
}
inline void SetBandIBCPriceEvent::set_prices(int index, const std::string& value) {
  _internal_mutable_prices()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:injective.oracle.v1beta1.SetBandIBCPriceEvent.prices)
}
inline void SetBandIBCPriceEvent::set_prices(int index, std::string&& value) {
  _internal_mutable_prices()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:injective.oracle.v1beta1.SetBandIBCPriceEvent.prices)
}
inline void SetBandIBCPriceEvent::set_prices(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_prices()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:injective.oracle.v1beta1.SetBandIBCPriceEvent.prices)
}
inline void SetBandIBCPriceEvent::set_prices(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_prices()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:injective.oracle.v1beta1.SetBandIBCPriceEvent.prices)
}
inline void SetBandIBCPriceEvent::set_prices(int index, absl::string_view value) {
  _internal_mutable_prices()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:injective.oracle.v1beta1.SetBandIBCPriceEvent.prices)
}
inline void SetBandIBCPriceEvent::add_prices(const std::string& value) {
  _internal_mutable_prices()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:injective.oracle.v1beta1.SetBandIBCPriceEvent.prices)
}
inline void SetBandIBCPriceEvent::add_prices(std::string&& value) {
  _internal_mutable_prices()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:injective.oracle.v1beta1.SetBandIBCPriceEvent.prices)
}
inline void SetBandIBCPriceEvent::add_prices(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_prices()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:injective.oracle.v1beta1.SetBandIBCPriceEvent.prices)
}
inline void SetBandIBCPriceEvent::add_prices(const char* value, std::size_t size) {
  _internal_mutable_prices()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:injective.oracle.v1beta1.SetBandIBCPriceEvent.prices)
}
inline void SetBandIBCPriceEvent::add_prices(absl::string_view value) {
  _internal_mutable_prices()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:injective.oracle.v1beta1.SetBandIBCPriceEvent.prices)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SetBandIBCPriceEvent::prices() const {
  // @@protoc_insertion_point(field_list:injective.oracle.v1beta1.SetBandIBCPriceEvent.prices)
  return _internal_prices();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* SetBandIBCPriceEvent::mutable_prices() {
  // @@protoc_insertion_point(field_mutable_list:injective.oracle.v1beta1.SetBandIBCPriceEvent.prices)
  return _internal_mutable_prices();
}
inline const std::string& SetBandIBCPriceEvent::_internal_prices(int index) const {
  return _internal_prices().Get(index);
}
inline std::string* SetBandIBCPriceEvent::_internal_add_prices() {
  return _internal_mutable_prices()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SetBandIBCPriceEvent::_internal_prices() const {
  return _impl_.prices_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SetBandIBCPriceEvent::_internal_mutable_prices() {
  return &_impl_.prices_;
}

// uint64 resolve_time = 4 [json_name = "resolveTime"];
inline void SetBandIBCPriceEvent::clear_resolve_time() {
  _impl_.resolve_time_ = ::uint64_t{0u};
}
inline ::uint64_t SetBandIBCPriceEvent::resolve_time() const {
  // @@protoc_insertion_point(field_get:injective.oracle.v1beta1.SetBandIBCPriceEvent.resolve_time)
  return _internal_resolve_time();
}
inline void SetBandIBCPriceEvent::set_resolve_time(::uint64_t value) {
  _internal_set_resolve_time(value);
  // @@protoc_insertion_point(field_set:injective.oracle.v1beta1.SetBandIBCPriceEvent.resolve_time)
}
inline ::uint64_t SetBandIBCPriceEvent::_internal_resolve_time() const {
  return _impl_.resolve_time_;
}
inline void SetBandIBCPriceEvent::_internal_set_resolve_time(::uint64_t value) {
  ;
  _impl_.resolve_time_ = value;
}

// uint64 request_id = 5 [json_name = "requestId"];
inline void SetBandIBCPriceEvent::clear_request_id() {
  _impl_.request_id_ = ::uint64_t{0u};
}
inline ::uint64_t SetBandIBCPriceEvent::request_id() const {
  // @@protoc_insertion_point(field_get:injective.oracle.v1beta1.SetBandIBCPriceEvent.request_id)
  return _internal_request_id();
}
inline void SetBandIBCPriceEvent::set_request_id(::uint64_t value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:injective.oracle.v1beta1.SetBandIBCPriceEvent.request_id)
}
inline ::uint64_t SetBandIBCPriceEvent::_internal_request_id() const {
  return _impl_.request_id_;
}
inline void SetBandIBCPriceEvent::_internal_set_request_id(::uint64_t value) {
  ;
  _impl_.request_id_ = value;
}

// int64 client_id = 6 [json_name = "clientId"];
inline void SetBandIBCPriceEvent::clear_client_id() {
  _impl_.client_id_ = ::int64_t{0};
}
inline ::int64_t SetBandIBCPriceEvent::client_id() const {
  // @@protoc_insertion_point(field_get:injective.oracle.v1beta1.SetBandIBCPriceEvent.client_id)
  return _internal_client_id();
}
inline void SetBandIBCPriceEvent::set_client_id(::int64_t value) {
  _internal_set_client_id(value);
  // @@protoc_insertion_point(field_set:injective.oracle.v1beta1.SetBandIBCPriceEvent.client_id)
}
inline ::int64_t SetBandIBCPriceEvent::_internal_client_id() const {
  return _impl_.client_id_;
}
inline void SetBandIBCPriceEvent::_internal_set_client_id(::int64_t value) {
  ;
  _impl_.client_id_ = value;
}

// -------------------------------------------------------------------

// EventBandIBCAckSuccess

// string ack_result = 1 [json_name = "ackResult"];
inline void EventBandIBCAckSuccess::clear_ack_result() {
  _impl_.ack_result_.ClearToEmpty();
}
inline const std::string& EventBandIBCAckSuccess::ack_result() const {
  // @@protoc_insertion_point(field_get:injective.oracle.v1beta1.EventBandIBCAckSuccess.ack_result)
  return _internal_ack_result();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EventBandIBCAckSuccess::set_ack_result(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.ack_result_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.oracle.v1beta1.EventBandIBCAckSuccess.ack_result)
}
inline std::string* EventBandIBCAckSuccess::mutable_ack_result() {
  std::string* _s = _internal_mutable_ack_result();
  // @@protoc_insertion_point(field_mutable:injective.oracle.v1beta1.EventBandIBCAckSuccess.ack_result)
  return _s;
}
inline const std::string& EventBandIBCAckSuccess::_internal_ack_result() const {
  return _impl_.ack_result_.Get();
}
inline void EventBandIBCAckSuccess::_internal_set_ack_result(const std::string& value) {
  ;


  _impl_.ack_result_.Set(value, GetArenaForAllocation());
}
inline std::string* EventBandIBCAckSuccess::_internal_mutable_ack_result() {
  ;
  return _impl_.ack_result_.Mutable( GetArenaForAllocation());
}
inline std::string* EventBandIBCAckSuccess::release_ack_result() {
  // @@protoc_insertion_point(field_release:injective.oracle.v1beta1.EventBandIBCAckSuccess.ack_result)
  return _impl_.ack_result_.Release();
}
inline void EventBandIBCAckSuccess::set_allocated_ack_result(std::string* value) {
  _impl_.ack_result_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.ack_result_.IsDefault()) {
          _impl_.ack_result_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.oracle.v1beta1.EventBandIBCAckSuccess.ack_result)
}

// int64 client_id = 2 [json_name = "clientId"];
inline void EventBandIBCAckSuccess::clear_client_id() {
  _impl_.client_id_ = ::int64_t{0};
}
inline ::int64_t EventBandIBCAckSuccess::client_id() const {
  // @@protoc_insertion_point(field_get:injective.oracle.v1beta1.EventBandIBCAckSuccess.client_id)
  return _internal_client_id();
}
inline void EventBandIBCAckSuccess::set_client_id(::int64_t value) {
  _internal_set_client_id(value);
  // @@protoc_insertion_point(field_set:injective.oracle.v1beta1.EventBandIBCAckSuccess.client_id)
}
inline ::int64_t EventBandIBCAckSuccess::_internal_client_id() const {
  return _impl_.client_id_;
}
inline void EventBandIBCAckSuccess::_internal_set_client_id(::int64_t value) {
  ;
  _impl_.client_id_ = value;
}

// -------------------------------------------------------------------

// EventBandIBCAckError

// string ack_error = 1 [json_name = "ackError"];
inline void EventBandIBCAckError::clear_ack_error() {
  _impl_.ack_error_.ClearToEmpty();
}
inline const std::string& EventBandIBCAckError::ack_error() const {
  // @@protoc_insertion_point(field_get:injective.oracle.v1beta1.EventBandIBCAckError.ack_error)
  return _internal_ack_error();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EventBandIBCAckError::set_ack_error(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.ack_error_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.oracle.v1beta1.EventBandIBCAckError.ack_error)
}
inline std::string* EventBandIBCAckError::mutable_ack_error() {
  std::string* _s = _internal_mutable_ack_error();
  // @@protoc_insertion_point(field_mutable:injective.oracle.v1beta1.EventBandIBCAckError.ack_error)
  return _s;
}
inline const std::string& EventBandIBCAckError::_internal_ack_error() const {
  return _impl_.ack_error_.Get();
}
inline void EventBandIBCAckError::_internal_set_ack_error(const std::string& value) {
  ;


  _impl_.ack_error_.Set(value, GetArenaForAllocation());
}
inline std::string* EventBandIBCAckError::_internal_mutable_ack_error() {
  ;
  return _impl_.ack_error_.Mutable( GetArenaForAllocation());
}
inline std::string* EventBandIBCAckError::release_ack_error() {
  // @@protoc_insertion_point(field_release:injective.oracle.v1beta1.EventBandIBCAckError.ack_error)
  return _impl_.ack_error_.Release();
}
inline void EventBandIBCAckError::set_allocated_ack_error(std::string* value) {
  _impl_.ack_error_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.ack_error_.IsDefault()) {
          _impl_.ack_error_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.oracle.v1beta1.EventBandIBCAckError.ack_error)
}

// int64 client_id = 2 [json_name = "clientId"];
inline void EventBandIBCAckError::clear_client_id() {
  _impl_.client_id_ = ::int64_t{0};
}
inline ::int64_t EventBandIBCAckError::client_id() const {
  // @@protoc_insertion_point(field_get:injective.oracle.v1beta1.EventBandIBCAckError.client_id)
  return _internal_client_id();
}
inline void EventBandIBCAckError::set_client_id(::int64_t value) {
  _internal_set_client_id(value);
  // @@protoc_insertion_point(field_set:injective.oracle.v1beta1.EventBandIBCAckError.client_id)
}
inline ::int64_t EventBandIBCAckError::_internal_client_id() const {
  return _impl_.client_id_;
}
inline void EventBandIBCAckError::_internal_set_client_id(::int64_t value) {
  ;
  _impl_.client_id_ = value;
}

// -------------------------------------------------------------------

// EventBandIBCResponseTimeout

// int64 client_id = 1 [json_name = "clientId"];
inline void EventBandIBCResponseTimeout::clear_client_id() {
  _impl_.client_id_ = ::int64_t{0};
}
inline ::int64_t EventBandIBCResponseTimeout::client_id() const {
  // @@protoc_insertion_point(field_get:injective.oracle.v1beta1.EventBandIBCResponseTimeout.client_id)
  return _internal_client_id();
}
inline void EventBandIBCResponseTimeout::set_client_id(::int64_t value) {
  _internal_set_client_id(value);
  // @@protoc_insertion_point(field_set:injective.oracle.v1beta1.EventBandIBCResponseTimeout.client_id)
}
inline ::int64_t EventBandIBCResponseTimeout::_internal_client_id() const {
  return _impl_.client_id_;
}
inline void EventBandIBCResponseTimeout::_internal_set_client_id(::int64_t value) {
  ;
  _impl_.client_id_ = value;
}

// -------------------------------------------------------------------

// SetPriceFeedPriceEvent

// string relayer = 1 [json_name = "relayer"];
inline void SetPriceFeedPriceEvent::clear_relayer() {
  _impl_.relayer_.ClearToEmpty();
}
inline const std::string& SetPriceFeedPriceEvent::relayer() const {
  // @@protoc_insertion_point(field_get:injective.oracle.v1beta1.SetPriceFeedPriceEvent.relayer)
  return _internal_relayer();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SetPriceFeedPriceEvent::set_relayer(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.relayer_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.oracle.v1beta1.SetPriceFeedPriceEvent.relayer)
}
inline std::string* SetPriceFeedPriceEvent::mutable_relayer() {
  std::string* _s = _internal_mutable_relayer();
  // @@protoc_insertion_point(field_mutable:injective.oracle.v1beta1.SetPriceFeedPriceEvent.relayer)
  return _s;
}
inline const std::string& SetPriceFeedPriceEvent::_internal_relayer() const {
  return _impl_.relayer_.Get();
}
inline void SetPriceFeedPriceEvent::_internal_set_relayer(const std::string& value) {
  ;


  _impl_.relayer_.Set(value, GetArenaForAllocation());
}
inline std::string* SetPriceFeedPriceEvent::_internal_mutable_relayer() {
  ;
  return _impl_.relayer_.Mutable( GetArenaForAllocation());
}
inline std::string* SetPriceFeedPriceEvent::release_relayer() {
  // @@protoc_insertion_point(field_release:injective.oracle.v1beta1.SetPriceFeedPriceEvent.relayer)
  return _impl_.relayer_.Release();
}
inline void SetPriceFeedPriceEvent::set_allocated_relayer(std::string* value) {
  _impl_.relayer_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.relayer_.IsDefault()) {
          _impl_.relayer_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.oracle.v1beta1.SetPriceFeedPriceEvent.relayer)
}

// string base = 2 [json_name = "base"];
inline void SetPriceFeedPriceEvent::clear_base() {
  _impl_.base_.ClearToEmpty();
}
inline const std::string& SetPriceFeedPriceEvent::base() const {
  // @@protoc_insertion_point(field_get:injective.oracle.v1beta1.SetPriceFeedPriceEvent.base)
  return _internal_base();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SetPriceFeedPriceEvent::set_base(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.base_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.oracle.v1beta1.SetPriceFeedPriceEvent.base)
}
inline std::string* SetPriceFeedPriceEvent::mutable_base() {
  std::string* _s = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:injective.oracle.v1beta1.SetPriceFeedPriceEvent.base)
  return _s;
}
inline const std::string& SetPriceFeedPriceEvent::_internal_base() const {
  return _impl_.base_.Get();
}
inline void SetPriceFeedPriceEvent::_internal_set_base(const std::string& value) {
  ;


  _impl_.base_.Set(value, GetArenaForAllocation());
}
inline std::string* SetPriceFeedPriceEvent::_internal_mutable_base() {
  ;
  return _impl_.base_.Mutable( GetArenaForAllocation());
}
inline std::string* SetPriceFeedPriceEvent::release_base() {
  // @@protoc_insertion_point(field_release:injective.oracle.v1beta1.SetPriceFeedPriceEvent.base)
  return _impl_.base_.Release();
}
inline void SetPriceFeedPriceEvent::set_allocated_base(std::string* value) {
  _impl_.base_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.base_.IsDefault()) {
          _impl_.base_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.oracle.v1beta1.SetPriceFeedPriceEvent.base)
}

// string quote = 3 [json_name = "quote"];
inline void SetPriceFeedPriceEvent::clear_quote() {
  _impl_.quote_.ClearToEmpty();
}
inline const std::string& SetPriceFeedPriceEvent::quote() const {
  // @@protoc_insertion_point(field_get:injective.oracle.v1beta1.SetPriceFeedPriceEvent.quote)
  return _internal_quote();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SetPriceFeedPriceEvent::set_quote(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.quote_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.oracle.v1beta1.SetPriceFeedPriceEvent.quote)
}
inline std::string* SetPriceFeedPriceEvent::mutable_quote() {
  std::string* _s = _internal_mutable_quote();
  // @@protoc_insertion_point(field_mutable:injective.oracle.v1beta1.SetPriceFeedPriceEvent.quote)
  return _s;
}
inline const std::string& SetPriceFeedPriceEvent::_internal_quote() const {
  return _impl_.quote_.Get();
}
inline void SetPriceFeedPriceEvent::_internal_set_quote(const std::string& value) {
  ;


  _impl_.quote_.Set(value, GetArenaForAllocation());
}
inline std::string* SetPriceFeedPriceEvent::_internal_mutable_quote() {
  ;
  return _impl_.quote_.Mutable( GetArenaForAllocation());
}
inline std::string* SetPriceFeedPriceEvent::release_quote() {
  // @@protoc_insertion_point(field_release:injective.oracle.v1beta1.SetPriceFeedPriceEvent.quote)
  return _impl_.quote_.Release();
}
inline void SetPriceFeedPriceEvent::set_allocated_quote(std::string* value) {
  _impl_.quote_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.quote_.IsDefault()) {
          _impl_.quote_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.oracle.v1beta1.SetPriceFeedPriceEvent.quote)
}

// string price = 4 [json_name = "price", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
inline void SetPriceFeedPriceEvent::clear_price() {
  _impl_.price_.ClearToEmpty();
}
inline const std::string& SetPriceFeedPriceEvent::price() const {
  // @@protoc_insertion_point(field_get:injective.oracle.v1beta1.SetPriceFeedPriceEvent.price)
  return _internal_price();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SetPriceFeedPriceEvent::set_price(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.price_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.oracle.v1beta1.SetPriceFeedPriceEvent.price)
}
inline std::string* SetPriceFeedPriceEvent::mutable_price() {
  std::string* _s = _internal_mutable_price();
  // @@protoc_insertion_point(field_mutable:injective.oracle.v1beta1.SetPriceFeedPriceEvent.price)
  return _s;
}
inline const std::string& SetPriceFeedPriceEvent::_internal_price() const {
  return _impl_.price_.Get();
}
inline void SetPriceFeedPriceEvent::_internal_set_price(const std::string& value) {
  ;


  _impl_.price_.Set(value, GetArenaForAllocation());
}
inline std::string* SetPriceFeedPriceEvent::_internal_mutable_price() {
  ;
  return _impl_.price_.Mutable( GetArenaForAllocation());
}
inline std::string* SetPriceFeedPriceEvent::release_price() {
  // @@protoc_insertion_point(field_release:injective.oracle.v1beta1.SetPriceFeedPriceEvent.price)
  return _impl_.price_.Release();
}
inline void SetPriceFeedPriceEvent::set_allocated_price(std::string* value) {
  _impl_.price_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.price_.IsDefault()) {
          _impl_.price_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.oracle.v1beta1.SetPriceFeedPriceEvent.price)
}

// -------------------------------------------------------------------

// SetProviderPriceEvent

// string provider = 1 [json_name = "provider"];
inline void SetProviderPriceEvent::clear_provider() {
  _impl_.provider_.ClearToEmpty();
}
inline const std::string& SetProviderPriceEvent::provider() const {
  // @@protoc_insertion_point(field_get:injective.oracle.v1beta1.SetProviderPriceEvent.provider)
  return _internal_provider();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SetProviderPriceEvent::set_provider(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.provider_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.oracle.v1beta1.SetProviderPriceEvent.provider)
}
inline std::string* SetProviderPriceEvent::mutable_provider() {
  std::string* _s = _internal_mutable_provider();
  // @@protoc_insertion_point(field_mutable:injective.oracle.v1beta1.SetProviderPriceEvent.provider)
  return _s;
}
inline const std::string& SetProviderPriceEvent::_internal_provider() const {
  return _impl_.provider_.Get();
}
inline void SetProviderPriceEvent::_internal_set_provider(const std::string& value) {
  ;


  _impl_.provider_.Set(value, GetArenaForAllocation());
}
inline std::string* SetProviderPriceEvent::_internal_mutable_provider() {
  ;
  return _impl_.provider_.Mutable( GetArenaForAllocation());
}
inline std::string* SetProviderPriceEvent::release_provider() {
  // @@protoc_insertion_point(field_release:injective.oracle.v1beta1.SetProviderPriceEvent.provider)
  return _impl_.provider_.Release();
}
inline void SetProviderPriceEvent::set_allocated_provider(std::string* value) {
  _impl_.provider_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.provider_.IsDefault()) {
          _impl_.provider_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.oracle.v1beta1.SetProviderPriceEvent.provider)
}

// string relayer = 2 [json_name = "relayer"];
inline void SetProviderPriceEvent::clear_relayer() {
  _impl_.relayer_.ClearToEmpty();
}
inline const std::string& SetProviderPriceEvent::relayer() const {
  // @@protoc_insertion_point(field_get:injective.oracle.v1beta1.SetProviderPriceEvent.relayer)
  return _internal_relayer();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SetProviderPriceEvent::set_relayer(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.relayer_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.oracle.v1beta1.SetProviderPriceEvent.relayer)
}
inline std::string* SetProviderPriceEvent::mutable_relayer() {
  std::string* _s = _internal_mutable_relayer();
  // @@protoc_insertion_point(field_mutable:injective.oracle.v1beta1.SetProviderPriceEvent.relayer)
  return _s;
}
inline const std::string& SetProviderPriceEvent::_internal_relayer() const {
  return _impl_.relayer_.Get();
}
inline void SetProviderPriceEvent::_internal_set_relayer(const std::string& value) {
  ;


  _impl_.relayer_.Set(value, GetArenaForAllocation());
}
inline std::string* SetProviderPriceEvent::_internal_mutable_relayer() {
  ;
  return _impl_.relayer_.Mutable( GetArenaForAllocation());
}
inline std::string* SetProviderPriceEvent::release_relayer() {
  // @@protoc_insertion_point(field_release:injective.oracle.v1beta1.SetProviderPriceEvent.relayer)
  return _impl_.relayer_.Release();
}
inline void SetProviderPriceEvent::set_allocated_relayer(std::string* value) {
  _impl_.relayer_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.relayer_.IsDefault()) {
          _impl_.relayer_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.oracle.v1beta1.SetProviderPriceEvent.relayer)
}

// string symbol = 3 [json_name = "symbol"];
inline void SetProviderPriceEvent::clear_symbol() {
  _impl_.symbol_.ClearToEmpty();
}
inline const std::string& SetProviderPriceEvent::symbol() const {
  // @@protoc_insertion_point(field_get:injective.oracle.v1beta1.SetProviderPriceEvent.symbol)
  return _internal_symbol();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SetProviderPriceEvent::set_symbol(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.symbol_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.oracle.v1beta1.SetProviderPriceEvent.symbol)
}
inline std::string* SetProviderPriceEvent::mutable_symbol() {
  std::string* _s = _internal_mutable_symbol();
  // @@protoc_insertion_point(field_mutable:injective.oracle.v1beta1.SetProviderPriceEvent.symbol)
  return _s;
}
inline const std::string& SetProviderPriceEvent::_internal_symbol() const {
  return _impl_.symbol_.Get();
}
inline void SetProviderPriceEvent::_internal_set_symbol(const std::string& value) {
  ;


  _impl_.symbol_.Set(value, GetArenaForAllocation());
}
inline std::string* SetProviderPriceEvent::_internal_mutable_symbol() {
  ;
  return _impl_.symbol_.Mutable( GetArenaForAllocation());
}
inline std::string* SetProviderPriceEvent::release_symbol() {
  // @@protoc_insertion_point(field_release:injective.oracle.v1beta1.SetProviderPriceEvent.symbol)
  return _impl_.symbol_.Release();
}
inline void SetProviderPriceEvent::set_allocated_symbol(std::string* value) {
  _impl_.symbol_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.symbol_.IsDefault()) {
          _impl_.symbol_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.oracle.v1beta1.SetProviderPriceEvent.symbol)
}

// string price = 4 [json_name = "price", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
inline void SetProviderPriceEvent::clear_price() {
  _impl_.price_.ClearToEmpty();
}
inline const std::string& SetProviderPriceEvent::price() const {
  // @@protoc_insertion_point(field_get:injective.oracle.v1beta1.SetProviderPriceEvent.price)
  return _internal_price();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SetProviderPriceEvent::set_price(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.price_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.oracle.v1beta1.SetProviderPriceEvent.price)
}
inline std::string* SetProviderPriceEvent::mutable_price() {
  std::string* _s = _internal_mutable_price();
  // @@protoc_insertion_point(field_mutable:injective.oracle.v1beta1.SetProviderPriceEvent.price)
  return _s;
}
inline const std::string& SetProviderPriceEvent::_internal_price() const {
  return _impl_.price_.Get();
}
inline void SetProviderPriceEvent::_internal_set_price(const std::string& value) {
  ;


  _impl_.price_.Set(value, GetArenaForAllocation());
}
inline std::string* SetProviderPriceEvent::_internal_mutable_price() {
  ;
  return _impl_.price_.Mutable( GetArenaForAllocation());
}
inline std::string* SetProviderPriceEvent::release_price() {
  // @@protoc_insertion_point(field_release:injective.oracle.v1beta1.SetProviderPriceEvent.price)
  return _impl_.price_.Release();
}
inline void SetProviderPriceEvent::set_allocated_price(std::string* value) {
  _impl_.price_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.price_.IsDefault()) {
          _impl_.price_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.oracle.v1beta1.SetProviderPriceEvent.price)
}

// -------------------------------------------------------------------

// SetCoinbasePriceEvent

// string symbol = 1 [json_name = "symbol"];
inline void SetCoinbasePriceEvent::clear_symbol() {
  _impl_.symbol_.ClearToEmpty();
}
inline const std::string& SetCoinbasePriceEvent::symbol() const {
  // @@protoc_insertion_point(field_get:injective.oracle.v1beta1.SetCoinbasePriceEvent.symbol)
  return _internal_symbol();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SetCoinbasePriceEvent::set_symbol(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.symbol_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.oracle.v1beta1.SetCoinbasePriceEvent.symbol)
}
inline std::string* SetCoinbasePriceEvent::mutable_symbol() {
  std::string* _s = _internal_mutable_symbol();
  // @@protoc_insertion_point(field_mutable:injective.oracle.v1beta1.SetCoinbasePriceEvent.symbol)
  return _s;
}
inline const std::string& SetCoinbasePriceEvent::_internal_symbol() const {
  return _impl_.symbol_.Get();
}
inline void SetCoinbasePriceEvent::_internal_set_symbol(const std::string& value) {
  ;


  _impl_.symbol_.Set(value, GetArenaForAllocation());
}
inline std::string* SetCoinbasePriceEvent::_internal_mutable_symbol() {
  ;
  return _impl_.symbol_.Mutable( GetArenaForAllocation());
}
inline std::string* SetCoinbasePriceEvent::release_symbol() {
  // @@protoc_insertion_point(field_release:injective.oracle.v1beta1.SetCoinbasePriceEvent.symbol)
  return _impl_.symbol_.Release();
}
inline void SetCoinbasePriceEvent::set_allocated_symbol(std::string* value) {
  _impl_.symbol_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.symbol_.IsDefault()) {
          _impl_.symbol_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.oracle.v1beta1.SetCoinbasePriceEvent.symbol)
}

// string price = 2 [json_name = "price", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
inline void SetCoinbasePriceEvent::clear_price() {
  _impl_.price_.ClearToEmpty();
}
inline const std::string& SetCoinbasePriceEvent::price() const {
  // @@protoc_insertion_point(field_get:injective.oracle.v1beta1.SetCoinbasePriceEvent.price)
  return _internal_price();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SetCoinbasePriceEvent::set_price(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.price_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.oracle.v1beta1.SetCoinbasePriceEvent.price)
}
inline std::string* SetCoinbasePriceEvent::mutable_price() {
  std::string* _s = _internal_mutable_price();
  // @@protoc_insertion_point(field_mutable:injective.oracle.v1beta1.SetCoinbasePriceEvent.price)
  return _s;
}
inline const std::string& SetCoinbasePriceEvent::_internal_price() const {
  return _impl_.price_.Get();
}
inline void SetCoinbasePriceEvent::_internal_set_price(const std::string& value) {
  ;


  _impl_.price_.Set(value, GetArenaForAllocation());
}
inline std::string* SetCoinbasePriceEvent::_internal_mutable_price() {
  ;
  return _impl_.price_.Mutable( GetArenaForAllocation());
}
inline std::string* SetCoinbasePriceEvent::release_price() {
  // @@protoc_insertion_point(field_release:injective.oracle.v1beta1.SetCoinbasePriceEvent.price)
  return _impl_.price_.Release();
}
inline void SetCoinbasePriceEvent::set_allocated_price(std::string* value) {
  _impl_.price_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.price_.IsDefault()) {
          _impl_.price_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.oracle.v1beta1.SetCoinbasePriceEvent.price)
}

// uint64 timestamp = 3 [json_name = "timestamp"];
inline void SetCoinbasePriceEvent::clear_timestamp() {
  _impl_.timestamp_ = ::uint64_t{0u};
}
inline ::uint64_t SetCoinbasePriceEvent::timestamp() const {
  // @@protoc_insertion_point(field_get:injective.oracle.v1beta1.SetCoinbasePriceEvent.timestamp)
  return _internal_timestamp();
}
inline void SetCoinbasePriceEvent::set_timestamp(::uint64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:injective.oracle.v1beta1.SetCoinbasePriceEvent.timestamp)
}
inline ::uint64_t SetCoinbasePriceEvent::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline void SetCoinbasePriceEvent::_internal_set_timestamp(::uint64_t value) {
  ;
  _impl_.timestamp_ = value;
}

// -------------------------------------------------------------------

// EventSetPythPrices

// repeated .injective.oracle.v1beta1.PythPriceState prices = 1 [json_name = "prices"];
inline int EventSetPythPrices::_internal_prices_size() const {
  return _impl_.prices_.size();
}
inline int EventSetPythPrices::prices_size() const {
  return _internal_prices_size();
}
inline ::injective::oracle::v1beta1::PythPriceState* EventSetPythPrices::mutable_prices(int index) {
  // @@protoc_insertion_point(field_mutable:injective.oracle.v1beta1.EventSetPythPrices.prices)
  return _internal_mutable_prices()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::oracle::v1beta1::PythPriceState >*
EventSetPythPrices::mutable_prices() {
  // @@protoc_insertion_point(field_mutable_list:injective.oracle.v1beta1.EventSetPythPrices.prices)
  return _internal_mutable_prices();
}
inline const ::injective::oracle::v1beta1::PythPriceState& EventSetPythPrices::_internal_prices(int index) const {
  return _internal_prices().Get(index);
}
inline const ::injective::oracle::v1beta1::PythPriceState& EventSetPythPrices::prices(int index) const {
  // @@protoc_insertion_point(field_get:injective.oracle.v1beta1.EventSetPythPrices.prices)
  return _internal_prices(index);
}
inline ::injective::oracle::v1beta1::PythPriceState* EventSetPythPrices::_internal_add_prices() {
  return _internal_mutable_prices()->Add();
}
inline ::injective::oracle::v1beta1::PythPriceState* EventSetPythPrices::add_prices() {
  ::injective::oracle::v1beta1::PythPriceState* _add = _internal_add_prices();
  // @@protoc_insertion_point(field_add:injective.oracle.v1beta1.EventSetPythPrices.prices)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::oracle::v1beta1::PythPriceState >&
EventSetPythPrices::prices() const {
  // @@protoc_insertion_point(field_list:injective.oracle.v1beta1.EventSetPythPrices.prices)
  return _internal_prices();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::oracle::v1beta1::PythPriceState>&
EventSetPythPrices::_internal_prices() const {
  return _impl_.prices_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::oracle::v1beta1::PythPriceState>*
EventSetPythPrices::_internal_mutable_prices() {
  return &_impl_.prices_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1beta1
}  // namespace oracle
}  // namespace injective


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_injective_2foracle_2fv1beta1_2fevents_2eproto_2epb_2eh

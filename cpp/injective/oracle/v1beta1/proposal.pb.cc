// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: injective/oracle/v1beta1/proposal.proto

#include "injective/oracle/v1beta1/proposal.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace injective {
namespace oracle {
namespace v1beta1 {
template <typename>
PROTOBUF_CONSTEXPR GrantBandOraclePrivilegeProposal::GrantBandOraclePrivilegeProposal(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.relayers_)*/{}
  , /*decltype(_impl_.title_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.description_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GrantBandOraclePrivilegeProposalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GrantBandOraclePrivilegeProposalDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GrantBandOraclePrivilegeProposalDefaultTypeInternal() {}
  union {
    GrantBandOraclePrivilegeProposal _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GrantBandOraclePrivilegeProposalDefaultTypeInternal _GrantBandOraclePrivilegeProposal_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR RevokeBandOraclePrivilegeProposal::RevokeBandOraclePrivilegeProposal(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.relayers_)*/{}
  , /*decltype(_impl_.title_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.description_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RevokeBandOraclePrivilegeProposalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RevokeBandOraclePrivilegeProposalDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RevokeBandOraclePrivilegeProposalDefaultTypeInternal() {}
  union {
    RevokeBandOraclePrivilegeProposal _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RevokeBandOraclePrivilegeProposalDefaultTypeInternal _RevokeBandOraclePrivilegeProposal_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR GrantPriceFeederPrivilegeProposal::GrantPriceFeederPrivilegeProposal(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.relayers_)*/{}
  , /*decltype(_impl_.title_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.description_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.base_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.quote_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GrantPriceFeederPrivilegeProposalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GrantPriceFeederPrivilegeProposalDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GrantPriceFeederPrivilegeProposalDefaultTypeInternal() {}
  union {
    GrantPriceFeederPrivilegeProposal _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GrantPriceFeederPrivilegeProposalDefaultTypeInternal _GrantPriceFeederPrivilegeProposal_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR GrantProviderPrivilegeProposal::GrantProviderPrivilegeProposal(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.relayers_)*/{}
  , /*decltype(_impl_.title_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.description_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.provider_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GrantProviderPrivilegeProposalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GrantProviderPrivilegeProposalDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GrantProviderPrivilegeProposalDefaultTypeInternal() {}
  union {
    GrantProviderPrivilegeProposal _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GrantProviderPrivilegeProposalDefaultTypeInternal _GrantProviderPrivilegeProposal_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR RevokeProviderPrivilegeProposal::RevokeProviderPrivilegeProposal(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.relayers_)*/{}
  , /*decltype(_impl_.title_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.description_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.provider_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RevokeProviderPrivilegeProposalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RevokeProviderPrivilegeProposalDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RevokeProviderPrivilegeProposalDefaultTypeInternal() {}
  union {
    RevokeProviderPrivilegeProposal _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RevokeProviderPrivilegeProposalDefaultTypeInternal _RevokeProviderPrivilegeProposal_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR RevokePriceFeederPrivilegeProposal::RevokePriceFeederPrivilegeProposal(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.relayers_)*/{}
  , /*decltype(_impl_.title_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.description_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.base_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.quote_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RevokePriceFeederPrivilegeProposalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RevokePriceFeederPrivilegeProposalDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RevokePriceFeederPrivilegeProposalDefaultTypeInternal() {}
  union {
    RevokePriceFeederPrivilegeProposal _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RevokePriceFeederPrivilegeProposalDefaultTypeInternal _RevokePriceFeederPrivilegeProposal_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR AuthorizeBandOracleRequestProposal::AuthorizeBandOracleRequestProposal(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.title_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.description_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.request_)*/nullptr} {}
struct AuthorizeBandOracleRequestProposalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AuthorizeBandOracleRequestProposalDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AuthorizeBandOracleRequestProposalDefaultTypeInternal() {}
  union {
    AuthorizeBandOracleRequestProposal _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AuthorizeBandOracleRequestProposalDefaultTypeInternal _AuthorizeBandOracleRequestProposal_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR UpdateBandOracleRequestProposal::UpdateBandOracleRequestProposal(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.delete_request_ids_)*/ {}
  ,/* _impl_._delete_request_ids_cached_byte_size_ = */ { 0 }

  , /*decltype(_impl_.title_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.description_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.update_oracle_request_)*/nullptr} {}
struct UpdateBandOracleRequestProposalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateBandOracleRequestProposalDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateBandOracleRequestProposalDefaultTypeInternal() {}
  union {
    UpdateBandOracleRequestProposal _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateBandOracleRequestProposalDefaultTypeInternal _UpdateBandOracleRequestProposal_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR EnableBandIBCProposal::EnableBandIBCProposal(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.title_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.description_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.band_ibc_params_)*/nullptr} {}
struct EnableBandIBCProposalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EnableBandIBCProposalDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EnableBandIBCProposalDefaultTypeInternal() {}
  union {
    EnableBandIBCProposal _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EnableBandIBCProposalDefaultTypeInternal _EnableBandIBCProposal_default_instance_;
}  // namespace v1beta1
}  // namespace oracle
}  // namespace injective
static ::_pb::Metadata file_level_metadata_injective_2foracle_2fv1beta1_2fproposal_2eproto[9];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_injective_2foracle_2fv1beta1_2fproposal_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_injective_2foracle_2fv1beta1_2fproposal_2eproto = nullptr;
const ::uint32_t TableStruct_injective_2foracle_2fv1beta1_2fproposal_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::GrantBandOraclePrivilegeProposal, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::GrantBandOraclePrivilegeProposal, _impl_.title_),
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::GrantBandOraclePrivilegeProposal, _impl_.description_),
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::GrantBandOraclePrivilegeProposal, _impl_.relayers_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::RevokeBandOraclePrivilegeProposal, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::RevokeBandOraclePrivilegeProposal, _impl_.title_),
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::RevokeBandOraclePrivilegeProposal, _impl_.description_),
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::RevokeBandOraclePrivilegeProposal, _impl_.relayers_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::GrantPriceFeederPrivilegeProposal, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::GrantPriceFeederPrivilegeProposal, _impl_.title_),
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::GrantPriceFeederPrivilegeProposal, _impl_.description_),
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::GrantPriceFeederPrivilegeProposal, _impl_.base_),
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::GrantPriceFeederPrivilegeProposal, _impl_.quote_),
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::GrantPriceFeederPrivilegeProposal, _impl_.relayers_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::GrantProviderPrivilegeProposal, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::GrantProviderPrivilegeProposal, _impl_.title_),
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::GrantProviderPrivilegeProposal, _impl_.description_),
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::GrantProviderPrivilegeProposal, _impl_.provider_),
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::GrantProviderPrivilegeProposal, _impl_.relayers_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::RevokeProviderPrivilegeProposal, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::RevokeProviderPrivilegeProposal, _impl_.title_),
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::RevokeProviderPrivilegeProposal, _impl_.description_),
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::RevokeProviderPrivilegeProposal, _impl_.provider_),
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::RevokeProviderPrivilegeProposal, _impl_.relayers_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::RevokePriceFeederPrivilegeProposal, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::RevokePriceFeederPrivilegeProposal, _impl_.title_),
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::RevokePriceFeederPrivilegeProposal, _impl_.description_),
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::RevokePriceFeederPrivilegeProposal, _impl_.base_),
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::RevokePriceFeederPrivilegeProposal, _impl_.quote_),
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::RevokePriceFeederPrivilegeProposal, _impl_.relayers_),
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::AuthorizeBandOracleRequestProposal, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::AuthorizeBandOracleRequestProposal, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::AuthorizeBandOracleRequestProposal, _impl_.title_),
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::AuthorizeBandOracleRequestProposal, _impl_.description_),
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::AuthorizeBandOracleRequestProposal, _impl_.request_),
    ~0u,
    ~0u,
    0,
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::UpdateBandOracleRequestProposal, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::UpdateBandOracleRequestProposal, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::UpdateBandOracleRequestProposal, _impl_.title_),
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::UpdateBandOracleRequestProposal, _impl_.description_),
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::UpdateBandOracleRequestProposal, _impl_.delete_request_ids_),
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::UpdateBandOracleRequestProposal, _impl_.update_oracle_request_),
    ~0u,
    ~0u,
    ~0u,
    0,
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::EnableBandIBCProposal, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::EnableBandIBCProposal, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::EnableBandIBCProposal, _impl_.title_),
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::EnableBandIBCProposal, _impl_.description_),
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::EnableBandIBCProposal, _impl_.band_ibc_params_),
    ~0u,
    ~0u,
    0,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::injective::oracle::v1beta1::GrantBandOraclePrivilegeProposal)},
        { 11, -1, -1, sizeof(::injective::oracle::v1beta1::RevokeBandOraclePrivilegeProposal)},
        { 22, -1, -1, sizeof(::injective::oracle::v1beta1::GrantPriceFeederPrivilegeProposal)},
        { 35, -1, -1, sizeof(::injective::oracle::v1beta1::GrantProviderPrivilegeProposal)},
        { 47, -1, -1, sizeof(::injective::oracle::v1beta1::RevokeProviderPrivilegeProposal)},
        { 59, -1, -1, sizeof(::injective::oracle::v1beta1::RevokePriceFeederPrivilegeProposal)},
        { 72, 83, -1, sizeof(::injective::oracle::v1beta1::AuthorizeBandOracleRequestProposal)},
        { 86, 98, -1, sizeof(::injective::oracle::v1beta1::UpdateBandOracleRequestProposal)},
        { 102, 113, -1, sizeof(::injective::oracle::v1beta1::EnableBandIBCProposal)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::injective::oracle::v1beta1::_GrantBandOraclePrivilegeProposal_default_instance_._instance,
    &::injective::oracle::v1beta1::_RevokeBandOraclePrivilegeProposal_default_instance_._instance,
    &::injective::oracle::v1beta1::_GrantPriceFeederPrivilegeProposal_default_instance_._instance,
    &::injective::oracle::v1beta1::_GrantProviderPrivilegeProposal_default_instance_._instance,
    &::injective::oracle::v1beta1::_RevokeProviderPrivilegeProposal_default_instance_._instance,
    &::injective::oracle::v1beta1::_RevokePriceFeederPrivilegeProposal_default_instance_._instance,
    &::injective::oracle::v1beta1::_AuthorizeBandOracleRequestProposal_default_instance_._instance,
    &::injective::oracle::v1beta1::_UpdateBandOracleRequestProposal_default_instance_._instance,
    &::injective::oracle::v1beta1::_EnableBandIBCProposal_default_instance_._instance,
};
const char descriptor_table_protodef_injective_2foracle_2fv1beta1_2fproposal_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\'injective/oracle/v1beta1/proposal.prot"
    "o\022\030injective.oracle.v1beta1\032\036cosmos/base"
    "/v1beta1/coin.proto\032\031cosmos_proto/cosmos"
    ".proto\032\024gogoproto/gogo.proto\032%injective/"
    "oracle/v1beta1/oracle.proto\"\236\001\n GrantBan"
    "dOraclePrivilegeProposal\022\024\n\005title\030\001 \001(\tR"
    "\005title\022 \n\013description\030\002 \001(\tR\013description"
    "\022\032\n\010relayers\030\003 \003(\tR\010relayers:&\210\240\037\000\350\240\037\000\312\264"
    "-\032cosmos.gov.v1beta1.Content\"\237\001\n!RevokeB"
    "andOraclePrivilegeProposal\022\024\n\005title\030\001 \001("
    "\tR\005title\022 \n\013description\030\002 \001(\tR\013descripti"
    "on\022\032\n\010relayers\030\003 \003(\tR\010relayers:&\210\240\037\000\350\240\037\000"
    "\312\264-\032cosmos.gov.v1beta1.Content\"\311\001\n!Grant"
    "PriceFeederPrivilegeProposal\022\024\n\005title\030\001 "
    "\001(\tR\005title\022 \n\013description\030\002 \001(\tR\013descrip"
    "tion\022\022\n\004base\030\003 \001(\tR\004base\022\024\n\005quote\030\004 \001(\tR"
    "\005quote\022\032\n\010relayers\030\005 \003(\tR\010relayers:&\210\240\037\000"
    "\350\240\037\000\312\264-\032cosmos.gov.v1beta1.Content\"\270\001\n\036G"
    "rantProviderPrivilegeProposal\022\024\n\005title\030\001"
    " \001(\tR\005title\022 \n\013description\030\002 \001(\tR\013descri"
    "ption\022\032\n\010provider\030\003 \001(\tR\010provider\022\032\n\010rel"
    "ayers\030\004 \003(\tR\010relayers:&\210\240\037\000\350\240\037\000\312\264-\032cosmo"
    "s.gov.v1beta1.Content\"\271\001\n\037RevokeProvider"
    "PrivilegeProposal\022\024\n\005title\030\001 \001(\tR\005title\022"
    " \n\013description\030\002 \001(\tR\013description\022\032\n\010pro"
    "vider\030\003 \001(\tR\010provider\022\032\n\010relayers\030\005 \003(\tR"
    "\010relayers:&\210\240\037\000\350\240\037\000\312\264-\032cosmos.gov.v1beta"
    "1.Content\"\312\001\n\"RevokePriceFeederPrivilege"
    "Proposal\022\024\n\005title\030\001 \001(\tR\005title\022 \n\013descri"
    "ption\030\002 \001(\tR\013description\022\022\n\004base\030\003 \001(\tR\004"
    "base\022\024\n\005quote\030\004 \001(\tR\005quote\022\032\n\010relayers\030\005"
    " \003(\tR\010relayers:&\210\240\037\000\350\240\037\000\312\264-\032cosmos.gov.v"
    "1beta1.Content\"\321\001\n\"AuthorizeBandOracleRe"
    "questProposal\022\024\n\005title\030\001 \001(\tR\005title\022 \n\013d"
    "escription\030\002 \001(\tR\013description\022K\n\007request"
    "\030\003 \001(\0132+.injective.oracle.v1beta1.BandOr"
    "acleRequestB\004\310\336\037\000R\007request:&\210\240\037\000\350\240\037\000\312\264-\032"
    "cosmos.gov.v1beta1.Content\"\220\002\n\037UpdateBan"
    "dOracleRequestProposal\022\024\n\005title\030\001 \001(\tR\005t"
    "itle\022 \n\013description\030\002 \001(\tR\013description\022,"
    "\n\022delete_request_ids\030\003 \003(\004R\020deleteReques"
    "tIds\022_\n\025update_oracle_request\030\004 \001(\0132+.in"
    "jective.oracle.v1beta1.BandOracleRequest"
    "R\023updateOracleRequest:&\210\240\037\000\350\240\037\000\312\264-\032cosmo"
    "s.gov.v1beta1.Content\"\316\001\n\025EnableBandIBCP"
    "roposal\022\024\n\005title\030\001 \001(\tR\005title\022 \n\013descrip"
    "tion\030\002 \001(\tR\013description\022U\n\017band_ibc_para"
    "ms\030\003 \001(\0132\'.injective.oracle.v1beta1.Band"
    "IBCParamsB\004\310\336\037\000R\rbandIbcParams:&\210\240\037\000\350\240\037\000"
    "\312\264-\032cosmos.gov.v1beta1.ContentB\375\001\n\034com.i"
    "njective.oracle.v1beta1B\rProposalProtoP\001"
    "ZLgithub.com/InjectiveLabs/injective-cor"
    "e/injective-chain/modules/oracle/types\242\002"
    "\003IOX\252\002\030Injective.Oracle.V1beta1\312\002\030Inject"
    "ive\\Oracle\\V1beta1\342\002$Injective\\Oracle\\V1"
    "beta1\\GPBMetadata\352\002\032Injective::Oracle::V"
    "1beta1b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_injective_2foracle_2fv1beta1_2fproposal_2eproto_deps[4] =
    {
        &::descriptor_table_cosmos_2fbase_2fv1beta1_2fcoin_2eproto,
        &::descriptor_table_cosmos_5fproto_2fcosmos_2eproto,
        &::descriptor_table_gogoproto_2fgogo_2eproto,
        &::descriptor_table_injective_2foracle_2fv1beta1_2foracle_2eproto,
};
static ::absl::once_flag descriptor_table_injective_2foracle_2fv1beta1_2fproposal_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_injective_2foracle_2fv1beta1_2fproposal_2eproto = {
    false,
    false,
    2254,
    descriptor_table_protodef_injective_2foracle_2fv1beta1_2fproposal_2eproto,
    "injective/oracle/v1beta1/proposal.proto",
    &descriptor_table_injective_2foracle_2fv1beta1_2fproposal_2eproto_once,
    descriptor_table_injective_2foracle_2fv1beta1_2fproposal_2eproto_deps,
    4,
    9,
    schemas,
    file_default_instances,
    TableStruct_injective_2foracle_2fv1beta1_2fproposal_2eproto::offsets,
    file_level_metadata_injective_2foracle_2fv1beta1_2fproposal_2eproto,
    file_level_enum_descriptors_injective_2foracle_2fv1beta1_2fproposal_2eproto,
    file_level_service_descriptors_injective_2foracle_2fv1beta1_2fproposal_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_injective_2foracle_2fv1beta1_2fproposal_2eproto_getter() {
  return &descriptor_table_injective_2foracle_2fv1beta1_2fproposal_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_injective_2foracle_2fv1beta1_2fproposal_2eproto(&descriptor_table_injective_2foracle_2fv1beta1_2fproposal_2eproto);
namespace injective {
namespace oracle {
namespace v1beta1 {
// ===================================================================

class GrantBandOraclePrivilegeProposal::_Internal {
 public:
};

GrantBandOraclePrivilegeProposal::GrantBandOraclePrivilegeProposal(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.oracle.v1beta1.GrantBandOraclePrivilegeProposal)
}
GrantBandOraclePrivilegeProposal::GrantBandOraclePrivilegeProposal(const GrantBandOraclePrivilegeProposal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GrantBandOraclePrivilegeProposal* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.relayers_){from._impl_.relayers_}
    , decltype(_impl_.title_) {}

    , decltype(_impl_.description_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.title_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_title().empty()) {
    _this->_impl_.title_.Set(from._internal_title(), _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.description_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:injective.oracle.v1beta1.GrantBandOraclePrivilegeProposal)
}

inline void GrantBandOraclePrivilegeProposal::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.relayers_){arena}
    , decltype(_impl_.title_) {}

    , decltype(_impl_.description_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.title_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.description_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GrantBandOraclePrivilegeProposal::~GrantBandOraclePrivilegeProposal() {
  // @@protoc_insertion_point(destructor:injective.oracle.v1beta1.GrantBandOraclePrivilegeProposal)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GrantBandOraclePrivilegeProposal::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_relayers()->~RepeatedPtrField();
  _impl_.title_.Destroy();
  _impl_.description_.Destroy();
}

void GrantBandOraclePrivilegeProposal::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GrantBandOraclePrivilegeProposal::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.oracle.v1beta1.GrantBandOraclePrivilegeProposal)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_relayers()->Clear();
  _impl_.title_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GrantBandOraclePrivilegeProposal::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string title = 1 [json_name = "title"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.oracle.v1beta1.GrantBandOraclePrivilegeProposal.title"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string description = 2 [json_name = "description"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.oracle.v1beta1.GrantBandOraclePrivilegeProposal.description"));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string relayers = 3 [json_name = "relayers"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_relayers();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "injective.oracle.v1beta1.GrantBandOraclePrivilegeProposal.relayers"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GrantBandOraclePrivilegeProposal::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.oracle.v1beta1.GrantBandOraclePrivilegeProposal)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string title = 1 [json_name = "title"];
  if (!this->_internal_title().empty()) {
    const std::string& _s = this->_internal_title();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.oracle.v1beta1.GrantBandOraclePrivilegeProposal.title");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string description = 2 [json_name = "description"];
  if (!this->_internal_description().empty()) {
    const std::string& _s = this->_internal_description();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.oracle.v1beta1.GrantBandOraclePrivilegeProposal.description");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // repeated string relayers = 3 [json_name = "relayers"];
  for (int i = 0, n = this->_internal_relayers_size(); i < n; ++i) {
    const auto& s = this->_internal_relayers(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.oracle.v1beta1.GrantBandOraclePrivilegeProposal.relayers");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.oracle.v1beta1.GrantBandOraclePrivilegeProposal)
  return target;
}

::size_t GrantBandOraclePrivilegeProposal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.oracle.v1beta1.GrantBandOraclePrivilegeProposal)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string relayers = 3 [json_name = "relayers"];
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_relayers().size());
  for (int i = 0, n = _internal_relayers().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_relayers().Get(i));
  }

  // string title = 1 [json_name = "title"];
  if (!this->_internal_title().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_title());
  }

  // string description = 2 [json_name = "description"];
  if (!this->_internal_description().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_description());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GrantBandOraclePrivilegeProposal::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GrantBandOraclePrivilegeProposal::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GrantBandOraclePrivilegeProposal::GetClassData() const { return &_class_data_; }


void GrantBandOraclePrivilegeProposal::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GrantBandOraclePrivilegeProposal*>(&to_msg);
  auto& from = static_cast<const GrantBandOraclePrivilegeProposal&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.oracle.v1beta1.GrantBandOraclePrivilegeProposal)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_relayers()->MergeFrom(from._internal_relayers());
  if (!from._internal_title().empty()) {
    _this->_internal_set_title(from._internal_title());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GrantBandOraclePrivilegeProposal::CopyFrom(const GrantBandOraclePrivilegeProposal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.oracle.v1beta1.GrantBandOraclePrivilegeProposal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GrantBandOraclePrivilegeProposal::IsInitialized() const {
  return true;
}

void GrantBandOraclePrivilegeProposal::InternalSwap(GrantBandOraclePrivilegeProposal* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_relayers()->InternalSwap(
      other->_internal_mutable_relayers());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.title_, lhs_arena,
                                       &other->_impl_.title_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.description_, lhs_arena,
                                       &other->_impl_.description_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata GrantBandOraclePrivilegeProposal::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2foracle_2fv1beta1_2fproposal_2eproto_getter, &descriptor_table_injective_2foracle_2fv1beta1_2fproposal_2eproto_once,
      file_level_metadata_injective_2foracle_2fv1beta1_2fproposal_2eproto[0]);
}
// ===================================================================

class RevokeBandOraclePrivilegeProposal::_Internal {
 public:
};

RevokeBandOraclePrivilegeProposal::RevokeBandOraclePrivilegeProposal(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.oracle.v1beta1.RevokeBandOraclePrivilegeProposal)
}
RevokeBandOraclePrivilegeProposal::RevokeBandOraclePrivilegeProposal(const RevokeBandOraclePrivilegeProposal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RevokeBandOraclePrivilegeProposal* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.relayers_){from._impl_.relayers_}
    , decltype(_impl_.title_) {}

    , decltype(_impl_.description_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.title_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_title().empty()) {
    _this->_impl_.title_.Set(from._internal_title(), _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.description_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:injective.oracle.v1beta1.RevokeBandOraclePrivilegeProposal)
}

inline void RevokeBandOraclePrivilegeProposal::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.relayers_){arena}
    , decltype(_impl_.title_) {}

    , decltype(_impl_.description_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.title_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.description_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RevokeBandOraclePrivilegeProposal::~RevokeBandOraclePrivilegeProposal() {
  // @@protoc_insertion_point(destructor:injective.oracle.v1beta1.RevokeBandOraclePrivilegeProposal)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RevokeBandOraclePrivilegeProposal::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_relayers()->~RepeatedPtrField();
  _impl_.title_.Destroy();
  _impl_.description_.Destroy();
}

void RevokeBandOraclePrivilegeProposal::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RevokeBandOraclePrivilegeProposal::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.oracle.v1beta1.RevokeBandOraclePrivilegeProposal)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_relayers()->Clear();
  _impl_.title_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RevokeBandOraclePrivilegeProposal::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string title = 1 [json_name = "title"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.oracle.v1beta1.RevokeBandOraclePrivilegeProposal.title"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string description = 2 [json_name = "description"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.oracle.v1beta1.RevokeBandOraclePrivilegeProposal.description"));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string relayers = 3 [json_name = "relayers"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_relayers();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "injective.oracle.v1beta1.RevokeBandOraclePrivilegeProposal.relayers"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* RevokeBandOraclePrivilegeProposal::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.oracle.v1beta1.RevokeBandOraclePrivilegeProposal)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string title = 1 [json_name = "title"];
  if (!this->_internal_title().empty()) {
    const std::string& _s = this->_internal_title();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.oracle.v1beta1.RevokeBandOraclePrivilegeProposal.title");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string description = 2 [json_name = "description"];
  if (!this->_internal_description().empty()) {
    const std::string& _s = this->_internal_description();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.oracle.v1beta1.RevokeBandOraclePrivilegeProposal.description");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // repeated string relayers = 3 [json_name = "relayers"];
  for (int i = 0, n = this->_internal_relayers_size(); i < n; ++i) {
    const auto& s = this->_internal_relayers(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.oracle.v1beta1.RevokeBandOraclePrivilegeProposal.relayers");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.oracle.v1beta1.RevokeBandOraclePrivilegeProposal)
  return target;
}

::size_t RevokeBandOraclePrivilegeProposal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.oracle.v1beta1.RevokeBandOraclePrivilegeProposal)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string relayers = 3 [json_name = "relayers"];
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_relayers().size());
  for (int i = 0, n = _internal_relayers().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_relayers().Get(i));
  }

  // string title = 1 [json_name = "title"];
  if (!this->_internal_title().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_title());
  }

  // string description = 2 [json_name = "description"];
  if (!this->_internal_description().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_description());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RevokeBandOraclePrivilegeProposal::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RevokeBandOraclePrivilegeProposal::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RevokeBandOraclePrivilegeProposal::GetClassData() const { return &_class_data_; }


void RevokeBandOraclePrivilegeProposal::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RevokeBandOraclePrivilegeProposal*>(&to_msg);
  auto& from = static_cast<const RevokeBandOraclePrivilegeProposal&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.oracle.v1beta1.RevokeBandOraclePrivilegeProposal)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_relayers()->MergeFrom(from._internal_relayers());
  if (!from._internal_title().empty()) {
    _this->_internal_set_title(from._internal_title());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RevokeBandOraclePrivilegeProposal::CopyFrom(const RevokeBandOraclePrivilegeProposal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.oracle.v1beta1.RevokeBandOraclePrivilegeProposal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RevokeBandOraclePrivilegeProposal::IsInitialized() const {
  return true;
}

void RevokeBandOraclePrivilegeProposal::InternalSwap(RevokeBandOraclePrivilegeProposal* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_relayers()->InternalSwap(
      other->_internal_mutable_relayers());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.title_, lhs_arena,
                                       &other->_impl_.title_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.description_, lhs_arena,
                                       &other->_impl_.description_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata RevokeBandOraclePrivilegeProposal::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2foracle_2fv1beta1_2fproposal_2eproto_getter, &descriptor_table_injective_2foracle_2fv1beta1_2fproposal_2eproto_once,
      file_level_metadata_injective_2foracle_2fv1beta1_2fproposal_2eproto[1]);
}
// ===================================================================

class GrantPriceFeederPrivilegeProposal::_Internal {
 public:
};

GrantPriceFeederPrivilegeProposal::GrantPriceFeederPrivilegeProposal(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.oracle.v1beta1.GrantPriceFeederPrivilegeProposal)
}
GrantPriceFeederPrivilegeProposal::GrantPriceFeederPrivilegeProposal(const GrantPriceFeederPrivilegeProposal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GrantPriceFeederPrivilegeProposal* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.relayers_){from._impl_.relayers_}
    , decltype(_impl_.title_) {}

    , decltype(_impl_.description_) {}

    , decltype(_impl_.base_) {}

    , decltype(_impl_.quote_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.title_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_title().empty()) {
    _this->_impl_.title_.Set(from._internal_title(), _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.description_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), _this->GetArenaForAllocation());
  }
  _impl_.base_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.base_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_base().empty()) {
    _this->_impl_.base_.Set(from._internal_base(), _this->GetArenaForAllocation());
  }
  _impl_.quote_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.quote_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_quote().empty()) {
    _this->_impl_.quote_.Set(from._internal_quote(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:injective.oracle.v1beta1.GrantPriceFeederPrivilegeProposal)
}

inline void GrantPriceFeederPrivilegeProposal::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.relayers_){arena}
    , decltype(_impl_.title_) {}

    , decltype(_impl_.description_) {}

    , decltype(_impl_.base_) {}

    , decltype(_impl_.quote_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.title_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.description_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.base_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.base_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.quote_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.quote_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GrantPriceFeederPrivilegeProposal::~GrantPriceFeederPrivilegeProposal() {
  // @@protoc_insertion_point(destructor:injective.oracle.v1beta1.GrantPriceFeederPrivilegeProposal)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GrantPriceFeederPrivilegeProposal::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_relayers()->~RepeatedPtrField();
  _impl_.title_.Destroy();
  _impl_.description_.Destroy();
  _impl_.base_.Destroy();
  _impl_.quote_.Destroy();
}

void GrantPriceFeederPrivilegeProposal::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GrantPriceFeederPrivilegeProposal::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.oracle.v1beta1.GrantPriceFeederPrivilegeProposal)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_relayers()->Clear();
  _impl_.title_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  _impl_.base_.ClearToEmpty();
  _impl_.quote_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GrantPriceFeederPrivilegeProposal::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string title = 1 [json_name = "title"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.oracle.v1beta1.GrantPriceFeederPrivilegeProposal.title"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string description = 2 [json_name = "description"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.oracle.v1beta1.GrantPriceFeederPrivilegeProposal.description"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string base = 3 [json_name = "base"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_base();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.oracle.v1beta1.GrantPriceFeederPrivilegeProposal.base"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string quote = 4 [json_name = "quote"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_quote();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.oracle.v1beta1.GrantPriceFeederPrivilegeProposal.quote"));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string relayers = 5 [json_name = "relayers"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_relayers();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "injective.oracle.v1beta1.GrantPriceFeederPrivilegeProposal.relayers"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GrantPriceFeederPrivilegeProposal::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.oracle.v1beta1.GrantPriceFeederPrivilegeProposal)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string title = 1 [json_name = "title"];
  if (!this->_internal_title().empty()) {
    const std::string& _s = this->_internal_title();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.oracle.v1beta1.GrantPriceFeederPrivilegeProposal.title");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string description = 2 [json_name = "description"];
  if (!this->_internal_description().empty()) {
    const std::string& _s = this->_internal_description();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.oracle.v1beta1.GrantPriceFeederPrivilegeProposal.description");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string base = 3 [json_name = "base"];
  if (!this->_internal_base().empty()) {
    const std::string& _s = this->_internal_base();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.oracle.v1beta1.GrantPriceFeederPrivilegeProposal.base");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string quote = 4 [json_name = "quote"];
  if (!this->_internal_quote().empty()) {
    const std::string& _s = this->_internal_quote();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.oracle.v1beta1.GrantPriceFeederPrivilegeProposal.quote");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // repeated string relayers = 5 [json_name = "relayers"];
  for (int i = 0, n = this->_internal_relayers_size(); i < n; ++i) {
    const auto& s = this->_internal_relayers(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.oracle.v1beta1.GrantPriceFeederPrivilegeProposal.relayers");
    target = stream->WriteString(5, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.oracle.v1beta1.GrantPriceFeederPrivilegeProposal)
  return target;
}

::size_t GrantPriceFeederPrivilegeProposal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.oracle.v1beta1.GrantPriceFeederPrivilegeProposal)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string relayers = 5 [json_name = "relayers"];
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_relayers().size());
  for (int i = 0, n = _internal_relayers().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_relayers().Get(i));
  }

  // string title = 1 [json_name = "title"];
  if (!this->_internal_title().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_title());
  }

  // string description = 2 [json_name = "description"];
  if (!this->_internal_description().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_description());
  }

  // string base = 3 [json_name = "base"];
  if (!this->_internal_base().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_base());
  }

  // string quote = 4 [json_name = "quote"];
  if (!this->_internal_quote().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_quote());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GrantPriceFeederPrivilegeProposal::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GrantPriceFeederPrivilegeProposal::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GrantPriceFeederPrivilegeProposal::GetClassData() const { return &_class_data_; }


void GrantPriceFeederPrivilegeProposal::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GrantPriceFeederPrivilegeProposal*>(&to_msg);
  auto& from = static_cast<const GrantPriceFeederPrivilegeProposal&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.oracle.v1beta1.GrantPriceFeederPrivilegeProposal)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_relayers()->MergeFrom(from._internal_relayers());
  if (!from._internal_title().empty()) {
    _this->_internal_set_title(from._internal_title());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  if (!from._internal_base().empty()) {
    _this->_internal_set_base(from._internal_base());
  }
  if (!from._internal_quote().empty()) {
    _this->_internal_set_quote(from._internal_quote());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GrantPriceFeederPrivilegeProposal::CopyFrom(const GrantPriceFeederPrivilegeProposal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.oracle.v1beta1.GrantPriceFeederPrivilegeProposal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GrantPriceFeederPrivilegeProposal::IsInitialized() const {
  return true;
}

void GrantPriceFeederPrivilegeProposal::InternalSwap(GrantPriceFeederPrivilegeProposal* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_relayers()->InternalSwap(
      other->_internal_mutable_relayers());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.title_, lhs_arena,
                                       &other->_impl_.title_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.description_, lhs_arena,
                                       &other->_impl_.description_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.base_, lhs_arena,
                                       &other->_impl_.base_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.quote_, lhs_arena,
                                       &other->_impl_.quote_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata GrantPriceFeederPrivilegeProposal::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2foracle_2fv1beta1_2fproposal_2eproto_getter, &descriptor_table_injective_2foracle_2fv1beta1_2fproposal_2eproto_once,
      file_level_metadata_injective_2foracle_2fv1beta1_2fproposal_2eproto[2]);
}
// ===================================================================

class GrantProviderPrivilegeProposal::_Internal {
 public:
};

GrantProviderPrivilegeProposal::GrantProviderPrivilegeProposal(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.oracle.v1beta1.GrantProviderPrivilegeProposal)
}
GrantProviderPrivilegeProposal::GrantProviderPrivilegeProposal(const GrantProviderPrivilegeProposal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GrantProviderPrivilegeProposal* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.relayers_){from._impl_.relayers_}
    , decltype(_impl_.title_) {}

    , decltype(_impl_.description_) {}

    , decltype(_impl_.provider_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.title_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_title().empty()) {
    _this->_impl_.title_.Set(from._internal_title(), _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.description_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), _this->GetArenaForAllocation());
  }
  _impl_.provider_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.provider_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_provider().empty()) {
    _this->_impl_.provider_.Set(from._internal_provider(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:injective.oracle.v1beta1.GrantProviderPrivilegeProposal)
}

inline void GrantProviderPrivilegeProposal::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.relayers_){arena}
    , decltype(_impl_.title_) {}

    , decltype(_impl_.description_) {}

    , decltype(_impl_.provider_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.title_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.description_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.provider_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.provider_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GrantProviderPrivilegeProposal::~GrantProviderPrivilegeProposal() {
  // @@protoc_insertion_point(destructor:injective.oracle.v1beta1.GrantProviderPrivilegeProposal)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GrantProviderPrivilegeProposal::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_relayers()->~RepeatedPtrField();
  _impl_.title_.Destroy();
  _impl_.description_.Destroy();
  _impl_.provider_.Destroy();
}

void GrantProviderPrivilegeProposal::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GrantProviderPrivilegeProposal::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.oracle.v1beta1.GrantProviderPrivilegeProposal)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_relayers()->Clear();
  _impl_.title_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  _impl_.provider_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GrantProviderPrivilegeProposal::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string title = 1 [json_name = "title"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.oracle.v1beta1.GrantProviderPrivilegeProposal.title"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string description = 2 [json_name = "description"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.oracle.v1beta1.GrantProviderPrivilegeProposal.description"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string provider = 3 [json_name = "provider"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_provider();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.oracle.v1beta1.GrantProviderPrivilegeProposal.provider"));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string relayers = 4 [json_name = "relayers"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_relayers();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "injective.oracle.v1beta1.GrantProviderPrivilegeProposal.relayers"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GrantProviderPrivilegeProposal::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.oracle.v1beta1.GrantProviderPrivilegeProposal)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string title = 1 [json_name = "title"];
  if (!this->_internal_title().empty()) {
    const std::string& _s = this->_internal_title();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.oracle.v1beta1.GrantProviderPrivilegeProposal.title");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string description = 2 [json_name = "description"];
  if (!this->_internal_description().empty()) {
    const std::string& _s = this->_internal_description();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.oracle.v1beta1.GrantProviderPrivilegeProposal.description");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string provider = 3 [json_name = "provider"];
  if (!this->_internal_provider().empty()) {
    const std::string& _s = this->_internal_provider();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.oracle.v1beta1.GrantProviderPrivilegeProposal.provider");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // repeated string relayers = 4 [json_name = "relayers"];
  for (int i = 0, n = this->_internal_relayers_size(); i < n; ++i) {
    const auto& s = this->_internal_relayers(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.oracle.v1beta1.GrantProviderPrivilegeProposal.relayers");
    target = stream->WriteString(4, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.oracle.v1beta1.GrantProviderPrivilegeProposal)
  return target;
}

::size_t GrantProviderPrivilegeProposal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.oracle.v1beta1.GrantProviderPrivilegeProposal)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string relayers = 4 [json_name = "relayers"];
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_relayers().size());
  for (int i = 0, n = _internal_relayers().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_relayers().Get(i));
  }

  // string title = 1 [json_name = "title"];
  if (!this->_internal_title().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_title());
  }

  // string description = 2 [json_name = "description"];
  if (!this->_internal_description().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_description());
  }

  // string provider = 3 [json_name = "provider"];
  if (!this->_internal_provider().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_provider());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GrantProviderPrivilegeProposal::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GrantProviderPrivilegeProposal::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GrantProviderPrivilegeProposal::GetClassData() const { return &_class_data_; }


void GrantProviderPrivilegeProposal::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GrantProviderPrivilegeProposal*>(&to_msg);
  auto& from = static_cast<const GrantProviderPrivilegeProposal&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.oracle.v1beta1.GrantProviderPrivilegeProposal)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_relayers()->MergeFrom(from._internal_relayers());
  if (!from._internal_title().empty()) {
    _this->_internal_set_title(from._internal_title());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  if (!from._internal_provider().empty()) {
    _this->_internal_set_provider(from._internal_provider());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GrantProviderPrivilegeProposal::CopyFrom(const GrantProviderPrivilegeProposal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.oracle.v1beta1.GrantProviderPrivilegeProposal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GrantProviderPrivilegeProposal::IsInitialized() const {
  return true;
}

void GrantProviderPrivilegeProposal::InternalSwap(GrantProviderPrivilegeProposal* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_relayers()->InternalSwap(
      other->_internal_mutable_relayers());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.title_, lhs_arena,
                                       &other->_impl_.title_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.description_, lhs_arena,
                                       &other->_impl_.description_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.provider_, lhs_arena,
                                       &other->_impl_.provider_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata GrantProviderPrivilegeProposal::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2foracle_2fv1beta1_2fproposal_2eproto_getter, &descriptor_table_injective_2foracle_2fv1beta1_2fproposal_2eproto_once,
      file_level_metadata_injective_2foracle_2fv1beta1_2fproposal_2eproto[3]);
}
// ===================================================================

class RevokeProviderPrivilegeProposal::_Internal {
 public:
};

RevokeProviderPrivilegeProposal::RevokeProviderPrivilegeProposal(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.oracle.v1beta1.RevokeProviderPrivilegeProposal)
}
RevokeProviderPrivilegeProposal::RevokeProviderPrivilegeProposal(const RevokeProviderPrivilegeProposal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RevokeProviderPrivilegeProposal* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.relayers_){from._impl_.relayers_}
    , decltype(_impl_.title_) {}

    , decltype(_impl_.description_) {}

    , decltype(_impl_.provider_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.title_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_title().empty()) {
    _this->_impl_.title_.Set(from._internal_title(), _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.description_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), _this->GetArenaForAllocation());
  }
  _impl_.provider_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.provider_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_provider().empty()) {
    _this->_impl_.provider_.Set(from._internal_provider(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:injective.oracle.v1beta1.RevokeProviderPrivilegeProposal)
}

inline void RevokeProviderPrivilegeProposal::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.relayers_){arena}
    , decltype(_impl_.title_) {}

    , decltype(_impl_.description_) {}

    , decltype(_impl_.provider_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.title_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.description_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.provider_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.provider_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RevokeProviderPrivilegeProposal::~RevokeProviderPrivilegeProposal() {
  // @@protoc_insertion_point(destructor:injective.oracle.v1beta1.RevokeProviderPrivilegeProposal)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RevokeProviderPrivilegeProposal::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_relayers()->~RepeatedPtrField();
  _impl_.title_.Destroy();
  _impl_.description_.Destroy();
  _impl_.provider_.Destroy();
}

void RevokeProviderPrivilegeProposal::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RevokeProviderPrivilegeProposal::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.oracle.v1beta1.RevokeProviderPrivilegeProposal)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_relayers()->Clear();
  _impl_.title_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  _impl_.provider_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RevokeProviderPrivilegeProposal::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string title = 1 [json_name = "title"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.oracle.v1beta1.RevokeProviderPrivilegeProposal.title"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string description = 2 [json_name = "description"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.oracle.v1beta1.RevokeProviderPrivilegeProposal.description"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string provider = 3 [json_name = "provider"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_provider();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.oracle.v1beta1.RevokeProviderPrivilegeProposal.provider"));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string relayers = 5 [json_name = "relayers"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_relayers();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "injective.oracle.v1beta1.RevokeProviderPrivilegeProposal.relayers"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* RevokeProviderPrivilegeProposal::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.oracle.v1beta1.RevokeProviderPrivilegeProposal)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string title = 1 [json_name = "title"];
  if (!this->_internal_title().empty()) {
    const std::string& _s = this->_internal_title();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.oracle.v1beta1.RevokeProviderPrivilegeProposal.title");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string description = 2 [json_name = "description"];
  if (!this->_internal_description().empty()) {
    const std::string& _s = this->_internal_description();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.oracle.v1beta1.RevokeProviderPrivilegeProposal.description");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string provider = 3 [json_name = "provider"];
  if (!this->_internal_provider().empty()) {
    const std::string& _s = this->_internal_provider();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.oracle.v1beta1.RevokeProviderPrivilegeProposal.provider");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // repeated string relayers = 5 [json_name = "relayers"];
  for (int i = 0, n = this->_internal_relayers_size(); i < n; ++i) {
    const auto& s = this->_internal_relayers(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.oracle.v1beta1.RevokeProviderPrivilegeProposal.relayers");
    target = stream->WriteString(5, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.oracle.v1beta1.RevokeProviderPrivilegeProposal)
  return target;
}

::size_t RevokeProviderPrivilegeProposal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.oracle.v1beta1.RevokeProviderPrivilegeProposal)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string relayers = 5 [json_name = "relayers"];
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_relayers().size());
  for (int i = 0, n = _internal_relayers().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_relayers().Get(i));
  }

  // string title = 1 [json_name = "title"];
  if (!this->_internal_title().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_title());
  }

  // string description = 2 [json_name = "description"];
  if (!this->_internal_description().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_description());
  }

  // string provider = 3 [json_name = "provider"];
  if (!this->_internal_provider().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_provider());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RevokeProviderPrivilegeProposal::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RevokeProviderPrivilegeProposal::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RevokeProviderPrivilegeProposal::GetClassData() const { return &_class_data_; }


void RevokeProviderPrivilegeProposal::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RevokeProviderPrivilegeProposal*>(&to_msg);
  auto& from = static_cast<const RevokeProviderPrivilegeProposal&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.oracle.v1beta1.RevokeProviderPrivilegeProposal)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_relayers()->MergeFrom(from._internal_relayers());
  if (!from._internal_title().empty()) {
    _this->_internal_set_title(from._internal_title());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  if (!from._internal_provider().empty()) {
    _this->_internal_set_provider(from._internal_provider());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RevokeProviderPrivilegeProposal::CopyFrom(const RevokeProviderPrivilegeProposal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.oracle.v1beta1.RevokeProviderPrivilegeProposal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RevokeProviderPrivilegeProposal::IsInitialized() const {
  return true;
}

void RevokeProviderPrivilegeProposal::InternalSwap(RevokeProviderPrivilegeProposal* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_relayers()->InternalSwap(
      other->_internal_mutable_relayers());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.title_, lhs_arena,
                                       &other->_impl_.title_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.description_, lhs_arena,
                                       &other->_impl_.description_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.provider_, lhs_arena,
                                       &other->_impl_.provider_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata RevokeProviderPrivilegeProposal::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2foracle_2fv1beta1_2fproposal_2eproto_getter, &descriptor_table_injective_2foracle_2fv1beta1_2fproposal_2eproto_once,
      file_level_metadata_injective_2foracle_2fv1beta1_2fproposal_2eproto[4]);
}
// ===================================================================

class RevokePriceFeederPrivilegeProposal::_Internal {
 public:
};

RevokePriceFeederPrivilegeProposal::RevokePriceFeederPrivilegeProposal(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.oracle.v1beta1.RevokePriceFeederPrivilegeProposal)
}
RevokePriceFeederPrivilegeProposal::RevokePriceFeederPrivilegeProposal(const RevokePriceFeederPrivilegeProposal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RevokePriceFeederPrivilegeProposal* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.relayers_){from._impl_.relayers_}
    , decltype(_impl_.title_) {}

    , decltype(_impl_.description_) {}

    , decltype(_impl_.base_) {}

    , decltype(_impl_.quote_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.title_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_title().empty()) {
    _this->_impl_.title_.Set(from._internal_title(), _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.description_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), _this->GetArenaForAllocation());
  }
  _impl_.base_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.base_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_base().empty()) {
    _this->_impl_.base_.Set(from._internal_base(), _this->GetArenaForAllocation());
  }
  _impl_.quote_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.quote_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_quote().empty()) {
    _this->_impl_.quote_.Set(from._internal_quote(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:injective.oracle.v1beta1.RevokePriceFeederPrivilegeProposal)
}

inline void RevokePriceFeederPrivilegeProposal::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.relayers_){arena}
    , decltype(_impl_.title_) {}

    , decltype(_impl_.description_) {}

    , decltype(_impl_.base_) {}

    , decltype(_impl_.quote_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.title_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.description_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.base_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.base_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.quote_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.quote_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RevokePriceFeederPrivilegeProposal::~RevokePriceFeederPrivilegeProposal() {
  // @@protoc_insertion_point(destructor:injective.oracle.v1beta1.RevokePriceFeederPrivilegeProposal)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RevokePriceFeederPrivilegeProposal::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_relayers()->~RepeatedPtrField();
  _impl_.title_.Destroy();
  _impl_.description_.Destroy();
  _impl_.base_.Destroy();
  _impl_.quote_.Destroy();
}

void RevokePriceFeederPrivilegeProposal::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RevokePriceFeederPrivilegeProposal::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.oracle.v1beta1.RevokePriceFeederPrivilegeProposal)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_relayers()->Clear();
  _impl_.title_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  _impl_.base_.ClearToEmpty();
  _impl_.quote_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RevokePriceFeederPrivilegeProposal::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string title = 1 [json_name = "title"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.oracle.v1beta1.RevokePriceFeederPrivilegeProposal.title"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string description = 2 [json_name = "description"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.oracle.v1beta1.RevokePriceFeederPrivilegeProposal.description"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string base = 3 [json_name = "base"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_base();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.oracle.v1beta1.RevokePriceFeederPrivilegeProposal.base"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string quote = 4 [json_name = "quote"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_quote();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.oracle.v1beta1.RevokePriceFeederPrivilegeProposal.quote"));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string relayers = 5 [json_name = "relayers"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_relayers();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "injective.oracle.v1beta1.RevokePriceFeederPrivilegeProposal.relayers"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* RevokePriceFeederPrivilegeProposal::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.oracle.v1beta1.RevokePriceFeederPrivilegeProposal)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string title = 1 [json_name = "title"];
  if (!this->_internal_title().empty()) {
    const std::string& _s = this->_internal_title();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.oracle.v1beta1.RevokePriceFeederPrivilegeProposal.title");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string description = 2 [json_name = "description"];
  if (!this->_internal_description().empty()) {
    const std::string& _s = this->_internal_description();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.oracle.v1beta1.RevokePriceFeederPrivilegeProposal.description");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string base = 3 [json_name = "base"];
  if (!this->_internal_base().empty()) {
    const std::string& _s = this->_internal_base();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.oracle.v1beta1.RevokePriceFeederPrivilegeProposal.base");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string quote = 4 [json_name = "quote"];
  if (!this->_internal_quote().empty()) {
    const std::string& _s = this->_internal_quote();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.oracle.v1beta1.RevokePriceFeederPrivilegeProposal.quote");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // repeated string relayers = 5 [json_name = "relayers"];
  for (int i = 0, n = this->_internal_relayers_size(); i < n; ++i) {
    const auto& s = this->_internal_relayers(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.oracle.v1beta1.RevokePriceFeederPrivilegeProposal.relayers");
    target = stream->WriteString(5, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.oracle.v1beta1.RevokePriceFeederPrivilegeProposal)
  return target;
}

::size_t RevokePriceFeederPrivilegeProposal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.oracle.v1beta1.RevokePriceFeederPrivilegeProposal)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string relayers = 5 [json_name = "relayers"];
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_relayers().size());
  for (int i = 0, n = _internal_relayers().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_relayers().Get(i));
  }

  // string title = 1 [json_name = "title"];
  if (!this->_internal_title().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_title());
  }

  // string description = 2 [json_name = "description"];
  if (!this->_internal_description().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_description());
  }

  // string base = 3 [json_name = "base"];
  if (!this->_internal_base().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_base());
  }

  // string quote = 4 [json_name = "quote"];
  if (!this->_internal_quote().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_quote());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RevokePriceFeederPrivilegeProposal::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RevokePriceFeederPrivilegeProposal::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RevokePriceFeederPrivilegeProposal::GetClassData() const { return &_class_data_; }


void RevokePriceFeederPrivilegeProposal::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RevokePriceFeederPrivilegeProposal*>(&to_msg);
  auto& from = static_cast<const RevokePriceFeederPrivilegeProposal&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.oracle.v1beta1.RevokePriceFeederPrivilegeProposal)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_relayers()->MergeFrom(from._internal_relayers());
  if (!from._internal_title().empty()) {
    _this->_internal_set_title(from._internal_title());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  if (!from._internal_base().empty()) {
    _this->_internal_set_base(from._internal_base());
  }
  if (!from._internal_quote().empty()) {
    _this->_internal_set_quote(from._internal_quote());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RevokePriceFeederPrivilegeProposal::CopyFrom(const RevokePriceFeederPrivilegeProposal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.oracle.v1beta1.RevokePriceFeederPrivilegeProposal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RevokePriceFeederPrivilegeProposal::IsInitialized() const {
  return true;
}

void RevokePriceFeederPrivilegeProposal::InternalSwap(RevokePriceFeederPrivilegeProposal* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_relayers()->InternalSwap(
      other->_internal_mutable_relayers());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.title_, lhs_arena,
                                       &other->_impl_.title_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.description_, lhs_arena,
                                       &other->_impl_.description_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.base_, lhs_arena,
                                       &other->_impl_.base_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.quote_, lhs_arena,
                                       &other->_impl_.quote_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata RevokePriceFeederPrivilegeProposal::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2foracle_2fv1beta1_2fproposal_2eproto_getter, &descriptor_table_injective_2foracle_2fv1beta1_2fproposal_2eproto_once,
      file_level_metadata_injective_2foracle_2fv1beta1_2fproposal_2eproto[5]);
}
// ===================================================================

class AuthorizeBandOracleRequestProposal::_Internal {
 public:
  using HasBits = decltype(std::declval<AuthorizeBandOracleRequestProposal>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(AuthorizeBandOracleRequestProposal, _impl_._has_bits_);
  static const ::injective::oracle::v1beta1::BandOracleRequest& request(const AuthorizeBandOracleRequestProposal* msg);
  static void set_has_request(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::injective::oracle::v1beta1::BandOracleRequest&
AuthorizeBandOracleRequestProposal::_Internal::request(const AuthorizeBandOracleRequestProposal* msg) {
  return *msg->_impl_.request_;
}
void AuthorizeBandOracleRequestProposal::clear_request() {
  if (_impl_.request_ != nullptr) _impl_.request_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
AuthorizeBandOracleRequestProposal::AuthorizeBandOracleRequestProposal(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.oracle.v1beta1.AuthorizeBandOracleRequestProposal)
}
AuthorizeBandOracleRequestProposal::AuthorizeBandOracleRequestProposal(const AuthorizeBandOracleRequestProposal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AuthorizeBandOracleRequestProposal* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.title_) {}

    , decltype(_impl_.description_) {}

    , decltype(_impl_.request_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.title_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_title().empty()) {
    _this->_impl_.title_.Set(from._internal_title(), _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.description_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.request_ = new ::injective::oracle::v1beta1::BandOracleRequest(*from._impl_.request_);
  }
  // @@protoc_insertion_point(copy_constructor:injective.oracle.v1beta1.AuthorizeBandOracleRequestProposal)
}

inline void AuthorizeBandOracleRequestProposal::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.title_) {}

    , decltype(_impl_.description_) {}

    , decltype(_impl_.request_){nullptr}
  };
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.title_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.description_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AuthorizeBandOracleRequestProposal::~AuthorizeBandOracleRequestProposal() {
  // @@protoc_insertion_point(destructor:injective.oracle.v1beta1.AuthorizeBandOracleRequestProposal)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AuthorizeBandOracleRequestProposal::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.title_.Destroy();
  _impl_.description_.Destroy();
  if (this != internal_default_instance()) delete _impl_.request_;
}

void AuthorizeBandOracleRequestProposal::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AuthorizeBandOracleRequestProposal::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.oracle.v1beta1.AuthorizeBandOracleRequestProposal)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.title_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.request_ != nullptr);
    _impl_.request_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AuthorizeBandOracleRequestProposal::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string title = 1 [json_name = "title"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.oracle.v1beta1.AuthorizeBandOracleRequestProposal.title"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string description = 2 [json_name = "description"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.oracle.v1beta1.AuthorizeBandOracleRequestProposal.description"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .injective.oracle.v1beta1.BandOracleRequest request = 3 [json_name = "request", (.gogoproto.nullable) = false];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_request(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* AuthorizeBandOracleRequestProposal::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.oracle.v1beta1.AuthorizeBandOracleRequestProposal)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string title = 1 [json_name = "title"];
  if (!this->_internal_title().empty()) {
    const std::string& _s = this->_internal_title();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.oracle.v1beta1.AuthorizeBandOracleRequestProposal.title");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string description = 2 [json_name = "description"];
  if (!this->_internal_description().empty()) {
    const std::string& _s = this->_internal_description();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.oracle.v1beta1.AuthorizeBandOracleRequestProposal.description");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .injective.oracle.v1beta1.BandOracleRequest request = 3 [json_name = "request", (.gogoproto.nullable) = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::request(this),
        _Internal::request(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.oracle.v1beta1.AuthorizeBandOracleRequestProposal)
  return target;
}

::size_t AuthorizeBandOracleRequestProposal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.oracle.v1beta1.AuthorizeBandOracleRequestProposal)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string title = 1 [json_name = "title"];
  if (!this->_internal_title().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_title());
  }

  // string description = 2 [json_name = "description"];
  if (!this->_internal_description().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_description());
  }

  // .injective.oracle.v1beta1.BandOracleRequest request = 3 [json_name = "request", (.gogoproto.nullable) = false];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.request_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AuthorizeBandOracleRequestProposal::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AuthorizeBandOracleRequestProposal::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AuthorizeBandOracleRequestProposal::GetClassData() const { return &_class_data_; }


void AuthorizeBandOracleRequestProposal::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AuthorizeBandOracleRequestProposal*>(&to_msg);
  auto& from = static_cast<const AuthorizeBandOracleRequestProposal&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.oracle.v1beta1.AuthorizeBandOracleRequestProposal)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_title().empty()) {
    _this->_internal_set_title(from._internal_title());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_request()->::injective::oracle::v1beta1::BandOracleRequest::MergeFrom(
        from._internal_request());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AuthorizeBandOracleRequestProposal::CopyFrom(const AuthorizeBandOracleRequestProposal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.oracle.v1beta1.AuthorizeBandOracleRequestProposal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthorizeBandOracleRequestProposal::IsInitialized() const {
  return true;
}

void AuthorizeBandOracleRequestProposal::InternalSwap(AuthorizeBandOracleRequestProposal* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.title_, lhs_arena,
                                       &other->_impl_.title_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.description_, lhs_arena,
                                       &other->_impl_.description_, rhs_arena);
  swap(_impl_.request_, other->_impl_.request_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AuthorizeBandOracleRequestProposal::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2foracle_2fv1beta1_2fproposal_2eproto_getter, &descriptor_table_injective_2foracle_2fv1beta1_2fproposal_2eproto_once,
      file_level_metadata_injective_2foracle_2fv1beta1_2fproposal_2eproto[6]);
}
// ===================================================================

class UpdateBandOracleRequestProposal::_Internal {
 public:
  using HasBits = decltype(std::declval<UpdateBandOracleRequestProposal>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(UpdateBandOracleRequestProposal, _impl_._has_bits_);
  static const ::injective::oracle::v1beta1::BandOracleRequest& update_oracle_request(const UpdateBandOracleRequestProposal* msg);
  static void set_has_update_oracle_request(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::injective::oracle::v1beta1::BandOracleRequest&
UpdateBandOracleRequestProposal::_Internal::update_oracle_request(const UpdateBandOracleRequestProposal* msg) {
  return *msg->_impl_.update_oracle_request_;
}
void UpdateBandOracleRequestProposal::clear_update_oracle_request() {
  if (_impl_.update_oracle_request_ != nullptr) _impl_.update_oracle_request_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
UpdateBandOracleRequestProposal::UpdateBandOracleRequestProposal(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.oracle.v1beta1.UpdateBandOracleRequestProposal)
}
UpdateBandOracleRequestProposal::UpdateBandOracleRequestProposal(const UpdateBandOracleRequestProposal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UpdateBandOracleRequestProposal* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.delete_request_ids_) { from._impl_.delete_request_ids_ }
    ,/* _impl_._delete_request_ids_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.title_) {}

    , decltype(_impl_.description_) {}

    , decltype(_impl_.update_oracle_request_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.title_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_title().empty()) {
    _this->_impl_.title_.Set(from._internal_title(), _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.description_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.update_oracle_request_ = new ::injective::oracle::v1beta1::BandOracleRequest(*from._impl_.update_oracle_request_);
  }
  // @@protoc_insertion_point(copy_constructor:injective.oracle.v1beta1.UpdateBandOracleRequestProposal)
}

inline void UpdateBandOracleRequestProposal::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.delete_request_ids_) { arena }
    ,/* _impl_._delete_request_ids_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.title_) {}

    , decltype(_impl_.description_) {}

    , decltype(_impl_.update_oracle_request_){nullptr}
  };
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.title_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.description_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UpdateBandOracleRequestProposal::~UpdateBandOracleRequestProposal() {
  // @@protoc_insertion_point(destructor:injective.oracle.v1beta1.UpdateBandOracleRequestProposal)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UpdateBandOracleRequestProposal::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.delete_request_ids_.~RepeatedField();
  _impl_.title_.Destroy();
  _impl_.description_.Destroy();
  if (this != internal_default_instance()) delete _impl_.update_oracle_request_;
}

void UpdateBandOracleRequestProposal::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UpdateBandOracleRequestProposal::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.oracle.v1beta1.UpdateBandOracleRequestProposal)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_delete_request_ids()->Clear();
  _impl_.title_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.update_oracle_request_ != nullptr);
    _impl_.update_oracle_request_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateBandOracleRequestProposal::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string title = 1 [json_name = "title"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.oracle.v1beta1.UpdateBandOracleRequestProposal.title"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string description = 2 [json_name = "description"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.oracle.v1beta1.UpdateBandOracleRequestProposal.description"));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated uint64 delete_request_ids = 3 [json_name = "deleteRequestIds"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_delete_request_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::uint8_t>(tag) == 24) {
          _internal_add_delete_request_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .injective.oracle.v1beta1.BandOracleRequest update_oracle_request = 4 [json_name = "updateOracleRequest"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_update_oracle_request(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* UpdateBandOracleRequestProposal::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.oracle.v1beta1.UpdateBandOracleRequestProposal)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string title = 1 [json_name = "title"];
  if (!this->_internal_title().empty()) {
    const std::string& _s = this->_internal_title();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.oracle.v1beta1.UpdateBandOracleRequestProposal.title");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string description = 2 [json_name = "description"];
  if (!this->_internal_description().empty()) {
    const std::string& _s = this->_internal_description();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.oracle.v1beta1.UpdateBandOracleRequestProposal.description");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // repeated uint64 delete_request_ids = 3 [json_name = "deleteRequestIds"];
  {
    int byte_size = _impl_._delete_request_ids_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(3, _internal_delete_request_ids(),
                                                 byte_size, target);
    }
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .injective.oracle.v1beta1.BandOracleRequest update_oracle_request = 4 [json_name = "updateOracleRequest"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::update_oracle_request(this),
        _Internal::update_oracle_request(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.oracle.v1beta1.UpdateBandOracleRequestProposal)
  return target;
}

::size_t UpdateBandOracleRequestProposal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.oracle.v1beta1.UpdateBandOracleRequestProposal)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 delete_request_ids = 3 [json_name = "deleteRequestIds"];
  {
    std::size_t data_size = ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_delete_request_ids())
    ;
    _impl_._delete_request_ids_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }

  // string title = 1 [json_name = "title"];
  if (!this->_internal_title().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_title());
  }

  // string description = 2 [json_name = "description"];
  if (!this->_internal_description().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_description());
  }

  // .injective.oracle.v1beta1.BandOracleRequest update_oracle_request = 4 [json_name = "updateOracleRequest"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.update_oracle_request_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateBandOracleRequestProposal::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UpdateBandOracleRequestProposal::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateBandOracleRequestProposal::GetClassData() const { return &_class_data_; }


void UpdateBandOracleRequestProposal::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UpdateBandOracleRequestProposal*>(&to_msg);
  auto& from = static_cast<const UpdateBandOracleRequestProposal&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.oracle.v1beta1.UpdateBandOracleRequestProposal)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.delete_request_ids_.MergeFrom(from._impl_.delete_request_ids_);
  if (!from._internal_title().empty()) {
    _this->_internal_set_title(from._internal_title());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_update_oracle_request()->::injective::oracle::v1beta1::BandOracleRequest::MergeFrom(
        from._internal_update_oracle_request());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateBandOracleRequestProposal::CopyFrom(const UpdateBandOracleRequestProposal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.oracle.v1beta1.UpdateBandOracleRequestProposal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateBandOracleRequestProposal::IsInitialized() const {
  return true;
}

void UpdateBandOracleRequestProposal::InternalSwap(UpdateBandOracleRequestProposal* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.delete_request_ids_.InternalSwap(&other->_impl_.delete_request_ids_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.title_, lhs_arena,
                                       &other->_impl_.title_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.description_, lhs_arena,
                                       &other->_impl_.description_, rhs_arena);
  swap(_impl_.update_oracle_request_, other->_impl_.update_oracle_request_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateBandOracleRequestProposal::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2foracle_2fv1beta1_2fproposal_2eproto_getter, &descriptor_table_injective_2foracle_2fv1beta1_2fproposal_2eproto_once,
      file_level_metadata_injective_2foracle_2fv1beta1_2fproposal_2eproto[7]);
}
// ===================================================================

class EnableBandIBCProposal::_Internal {
 public:
  using HasBits = decltype(std::declval<EnableBandIBCProposal>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(EnableBandIBCProposal, _impl_._has_bits_);
  static const ::injective::oracle::v1beta1::BandIBCParams& band_ibc_params(const EnableBandIBCProposal* msg);
  static void set_has_band_ibc_params(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::injective::oracle::v1beta1::BandIBCParams&
EnableBandIBCProposal::_Internal::band_ibc_params(const EnableBandIBCProposal* msg) {
  return *msg->_impl_.band_ibc_params_;
}
void EnableBandIBCProposal::clear_band_ibc_params() {
  if (_impl_.band_ibc_params_ != nullptr) _impl_.band_ibc_params_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
EnableBandIBCProposal::EnableBandIBCProposal(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.oracle.v1beta1.EnableBandIBCProposal)
}
EnableBandIBCProposal::EnableBandIBCProposal(const EnableBandIBCProposal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EnableBandIBCProposal* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.title_) {}

    , decltype(_impl_.description_) {}

    , decltype(_impl_.band_ibc_params_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.title_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_title().empty()) {
    _this->_impl_.title_.Set(from._internal_title(), _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.description_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.band_ibc_params_ = new ::injective::oracle::v1beta1::BandIBCParams(*from._impl_.band_ibc_params_);
  }
  // @@protoc_insertion_point(copy_constructor:injective.oracle.v1beta1.EnableBandIBCProposal)
}

inline void EnableBandIBCProposal::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.title_) {}

    , decltype(_impl_.description_) {}

    , decltype(_impl_.band_ibc_params_){nullptr}
  };
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.title_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.description_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

EnableBandIBCProposal::~EnableBandIBCProposal() {
  // @@protoc_insertion_point(destructor:injective.oracle.v1beta1.EnableBandIBCProposal)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EnableBandIBCProposal::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.title_.Destroy();
  _impl_.description_.Destroy();
  if (this != internal_default_instance()) delete _impl_.band_ibc_params_;
}

void EnableBandIBCProposal::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EnableBandIBCProposal::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.oracle.v1beta1.EnableBandIBCProposal)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.title_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.band_ibc_params_ != nullptr);
    _impl_.band_ibc_params_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EnableBandIBCProposal::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string title = 1 [json_name = "title"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.oracle.v1beta1.EnableBandIBCProposal.title"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string description = 2 [json_name = "description"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.oracle.v1beta1.EnableBandIBCProposal.description"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .injective.oracle.v1beta1.BandIBCParams band_ibc_params = 3 [json_name = "bandIbcParams", (.gogoproto.nullable) = false];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_band_ibc_params(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* EnableBandIBCProposal::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.oracle.v1beta1.EnableBandIBCProposal)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string title = 1 [json_name = "title"];
  if (!this->_internal_title().empty()) {
    const std::string& _s = this->_internal_title();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.oracle.v1beta1.EnableBandIBCProposal.title");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string description = 2 [json_name = "description"];
  if (!this->_internal_description().empty()) {
    const std::string& _s = this->_internal_description();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.oracle.v1beta1.EnableBandIBCProposal.description");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .injective.oracle.v1beta1.BandIBCParams band_ibc_params = 3 [json_name = "bandIbcParams", (.gogoproto.nullable) = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::band_ibc_params(this),
        _Internal::band_ibc_params(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.oracle.v1beta1.EnableBandIBCProposal)
  return target;
}

::size_t EnableBandIBCProposal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.oracle.v1beta1.EnableBandIBCProposal)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string title = 1 [json_name = "title"];
  if (!this->_internal_title().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_title());
  }

  // string description = 2 [json_name = "description"];
  if (!this->_internal_description().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_description());
  }

  // .injective.oracle.v1beta1.BandIBCParams band_ibc_params = 3 [json_name = "bandIbcParams", (.gogoproto.nullable) = false];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.band_ibc_params_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EnableBandIBCProposal::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EnableBandIBCProposal::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EnableBandIBCProposal::GetClassData() const { return &_class_data_; }


void EnableBandIBCProposal::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EnableBandIBCProposal*>(&to_msg);
  auto& from = static_cast<const EnableBandIBCProposal&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.oracle.v1beta1.EnableBandIBCProposal)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_title().empty()) {
    _this->_internal_set_title(from._internal_title());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_band_ibc_params()->::injective::oracle::v1beta1::BandIBCParams::MergeFrom(
        from._internal_band_ibc_params());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EnableBandIBCProposal::CopyFrom(const EnableBandIBCProposal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.oracle.v1beta1.EnableBandIBCProposal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableBandIBCProposal::IsInitialized() const {
  return true;
}

void EnableBandIBCProposal::InternalSwap(EnableBandIBCProposal* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.title_, lhs_arena,
                                       &other->_impl_.title_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.description_, lhs_arena,
                                       &other->_impl_.description_, rhs_arena);
  swap(_impl_.band_ibc_params_, other->_impl_.band_ibc_params_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EnableBandIBCProposal::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2foracle_2fv1beta1_2fproposal_2eproto_getter, &descriptor_table_injective_2foracle_2fv1beta1_2fproposal_2eproto_once,
      file_level_metadata_injective_2foracle_2fv1beta1_2fproposal_2eproto[8]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1beta1
}  // namespace oracle
}  // namespace injective
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::injective::oracle::v1beta1::GrantBandOraclePrivilegeProposal*
Arena::CreateMaybeMessage< ::injective::oracle::v1beta1::GrantBandOraclePrivilegeProposal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::oracle::v1beta1::GrantBandOraclePrivilegeProposal >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::oracle::v1beta1::RevokeBandOraclePrivilegeProposal*
Arena::CreateMaybeMessage< ::injective::oracle::v1beta1::RevokeBandOraclePrivilegeProposal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::oracle::v1beta1::RevokeBandOraclePrivilegeProposal >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::oracle::v1beta1::GrantPriceFeederPrivilegeProposal*
Arena::CreateMaybeMessage< ::injective::oracle::v1beta1::GrantPriceFeederPrivilegeProposal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::oracle::v1beta1::GrantPriceFeederPrivilegeProposal >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::oracle::v1beta1::GrantProviderPrivilegeProposal*
Arena::CreateMaybeMessage< ::injective::oracle::v1beta1::GrantProviderPrivilegeProposal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::oracle::v1beta1::GrantProviderPrivilegeProposal >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::oracle::v1beta1::RevokeProviderPrivilegeProposal*
Arena::CreateMaybeMessage< ::injective::oracle::v1beta1::RevokeProviderPrivilegeProposal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::oracle::v1beta1::RevokeProviderPrivilegeProposal >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::oracle::v1beta1::RevokePriceFeederPrivilegeProposal*
Arena::CreateMaybeMessage< ::injective::oracle::v1beta1::RevokePriceFeederPrivilegeProposal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::oracle::v1beta1::RevokePriceFeederPrivilegeProposal >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::oracle::v1beta1::AuthorizeBandOracleRequestProposal*
Arena::CreateMaybeMessage< ::injective::oracle::v1beta1::AuthorizeBandOracleRequestProposal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::oracle::v1beta1::AuthorizeBandOracleRequestProposal >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::oracle::v1beta1::UpdateBandOracleRequestProposal*
Arena::CreateMaybeMessage< ::injective::oracle::v1beta1::UpdateBandOracleRequestProposal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::oracle::v1beta1::UpdateBandOracleRequestProposal >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::oracle::v1beta1::EnableBandIBCProposal*
Arena::CreateMaybeMessage< ::injective::oracle::v1beta1::EnableBandIBCProposal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::oracle::v1beta1::EnableBandIBCProposal >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: injective/oracle/v1beta1/query.proto
#ifndef GRPC_injective_2foracle_2fv1beta1_2fquery_2eproto__INCLUDED
#define GRPC_injective_2foracle_2fv1beta1_2fquery_2eproto__INCLUDED

#include "injective/oracle/v1beta1/query.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace injective {
namespace oracle {
namespace v1beta1 {

// Query defines the gRPC querier service.
class Query final {
 public:
  static constexpr char const* service_full_name() {
    return "injective.oracle.v1beta1.Query";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Retrieves oracle params
    virtual ::grpc::Status Params(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryParamsRequest& request, ::injective::oracle::v1beta1::QueryParamsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::oracle::v1beta1::QueryParamsResponse>> AsyncParams(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryParamsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::oracle::v1beta1::QueryParamsResponse>>(AsyncParamsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::oracle::v1beta1::QueryParamsResponse>> PrepareAsyncParams(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryParamsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::oracle::v1beta1::QueryParamsResponse>>(PrepareAsyncParamsRaw(context, request, cq));
    }
    // Retrieves the band relayers
    virtual ::grpc::Status BandRelayers(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryBandRelayersRequest& request, ::injective::oracle::v1beta1::QueryBandRelayersResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::oracle::v1beta1::QueryBandRelayersResponse>> AsyncBandRelayers(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryBandRelayersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::oracle::v1beta1::QueryBandRelayersResponse>>(AsyncBandRelayersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::oracle::v1beta1::QueryBandRelayersResponse>> PrepareAsyncBandRelayers(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryBandRelayersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::oracle::v1beta1::QueryBandRelayersResponse>>(PrepareAsyncBandRelayersRaw(context, request, cq));
    }
    // Retrieves the state for all band price feeds
    virtual ::grpc::Status BandPriceStates(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryBandPriceStatesRequest& request, ::injective::oracle::v1beta1::QueryBandPriceStatesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::oracle::v1beta1::QueryBandPriceStatesResponse>> AsyncBandPriceStates(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryBandPriceStatesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::oracle::v1beta1::QueryBandPriceStatesResponse>>(AsyncBandPriceStatesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::oracle::v1beta1::QueryBandPriceStatesResponse>> PrepareAsyncBandPriceStates(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryBandPriceStatesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::oracle::v1beta1::QueryBandPriceStatesResponse>>(PrepareAsyncBandPriceStatesRaw(context, request, cq));
    }
    // Retrieves the state for all band ibc price feeds
    virtual ::grpc::Status BandIBCPriceStates(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryBandIBCPriceStatesRequest& request, ::injective::oracle::v1beta1::QueryBandIBCPriceStatesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::oracle::v1beta1::QueryBandIBCPriceStatesResponse>> AsyncBandIBCPriceStates(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryBandIBCPriceStatesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::oracle::v1beta1::QueryBandIBCPriceStatesResponse>>(AsyncBandIBCPriceStatesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::oracle::v1beta1::QueryBandIBCPriceStatesResponse>> PrepareAsyncBandIBCPriceStates(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryBandIBCPriceStatesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::oracle::v1beta1::QueryBandIBCPriceStatesResponse>>(PrepareAsyncBandIBCPriceStatesRaw(context, request, cq));
    }
    // Retrieves the state for all price feeds
    virtual ::grpc::Status PriceFeedPriceStates(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryPriceFeedPriceStatesRequest& request, ::injective::oracle::v1beta1::QueryPriceFeedPriceStatesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::oracle::v1beta1::QueryPriceFeedPriceStatesResponse>> AsyncPriceFeedPriceStates(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryPriceFeedPriceStatesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::oracle::v1beta1::QueryPriceFeedPriceStatesResponse>>(AsyncPriceFeedPriceStatesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::oracle::v1beta1::QueryPriceFeedPriceStatesResponse>> PrepareAsyncPriceFeedPriceStates(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryPriceFeedPriceStatesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::oracle::v1beta1::QueryPriceFeedPriceStatesResponse>>(PrepareAsyncPriceFeedPriceStatesRaw(context, request, cq));
    }
    // Retrieves the state for all coinbase price feeds
    virtual ::grpc::Status CoinbasePriceStates(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryCoinbasePriceStatesRequest& request, ::injective::oracle::v1beta1::QueryCoinbasePriceStatesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::oracle::v1beta1::QueryCoinbasePriceStatesResponse>> AsyncCoinbasePriceStates(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryCoinbasePriceStatesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::oracle::v1beta1::QueryCoinbasePriceStatesResponse>>(AsyncCoinbasePriceStatesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::oracle::v1beta1::QueryCoinbasePriceStatesResponse>> PrepareAsyncCoinbasePriceStates(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryCoinbasePriceStatesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::oracle::v1beta1::QueryCoinbasePriceStatesResponse>>(PrepareAsyncCoinbasePriceStatesRaw(context, request, cq));
    }
    // Retrieves the state for all pyth price feeds
    virtual ::grpc::Status PythPriceStates(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryPythPriceStatesRequest& request, ::injective::oracle::v1beta1::QueryPythPriceStatesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::oracle::v1beta1::QueryPythPriceStatesResponse>> AsyncPythPriceStates(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryPythPriceStatesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::oracle::v1beta1::QueryPythPriceStatesResponse>>(AsyncPythPriceStatesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::oracle::v1beta1::QueryPythPriceStatesResponse>> PrepareAsyncPythPriceStates(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryPythPriceStatesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::oracle::v1beta1::QueryPythPriceStatesResponse>>(PrepareAsyncPythPriceStatesRaw(context, request, cq));
    }
    // Retrieves the state for all provider price feeds
    virtual ::grpc::Status ProviderPriceState(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryProviderPriceStateRequest& request, ::injective::oracle::v1beta1::QueryProviderPriceStateResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::oracle::v1beta1::QueryProviderPriceStateResponse>> AsyncProviderPriceState(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryProviderPriceStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::oracle::v1beta1::QueryProviderPriceStateResponse>>(AsyncProviderPriceStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::oracle::v1beta1::QueryProviderPriceStateResponse>> PrepareAsyncProviderPriceState(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryProviderPriceStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::oracle::v1beta1::QueryProviderPriceStateResponse>>(PrepareAsyncProviderPriceStateRaw(context, request, cq));
    }
    // Retrieves the entire oracle module's state
    virtual ::grpc::Status OracleModuleState(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryModuleStateRequest& request, ::injective::oracle::v1beta1::QueryModuleStateResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::oracle::v1beta1::QueryModuleStateResponse>> AsyncOracleModuleState(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryModuleStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::oracle::v1beta1::QueryModuleStateResponse>>(AsyncOracleModuleStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::oracle::v1beta1::QueryModuleStateResponse>> PrepareAsyncOracleModuleState(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryModuleStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::oracle::v1beta1::QueryModuleStateResponse>>(PrepareAsyncOracleModuleStateRaw(context, request, cq));
    }
    // Retrieves historical price records for a given OracleType and Symbol
    virtual ::grpc::Status HistoricalPriceRecords(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryHistoricalPriceRecordsRequest& request, ::injective::oracle::v1beta1::QueryHistoricalPriceRecordsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::oracle::v1beta1::QueryHistoricalPriceRecordsResponse>> AsyncHistoricalPriceRecords(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryHistoricalPriceRecordsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::oracle::v1beta1::QueryHistoricalPriceRecordsResponse>>(AsyncHistoricalPriceRecordsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::oracle::v1beta1::QueryHistoricalPriceRecordsResponse>> PrepareAsyncHistoricalPriceRecords(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryHistoricalPriceRecordsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::oracle::v1beta1::QueryHistoricalPriceRecordsResponse>>(PrepareAsyncHistoricalPriceRecordsRaw(context, request, cq));
    }
    // Retrieves mixed volatility value for the specified pair of base/quote
    virtual ::grpc::Status OracleVolatility(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryOracleVolatilityRequest& request, ::injective::oracle::v1beta1::QueryOracleVolatilityResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::oracle::v1beta1::QueryOracleVolatilityResponse>> AsyncOracleVolatility(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryOracleVolatilityRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::oracle::v1beta1::QueryOracleVolatilityResponse>>(AsyncOracleVolatilityRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::oracle::v1beta1::QueryOracleVolatilityResponse>> PrepareAsyncOracleVolatility(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryOracleVolatilityRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::oracle::v1beta1::QueryOracleVolatilityResponse>>(PrepareAsyncOracleVolatilityRaw(context, request, cq));
    }
    virtual ::grpc::Status OracleProvidersInfo(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryOracleProvidersInfoRequest& request, ::injective::oracle::v1beta1::QueryOracleProvidersInfoResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::oracle::v1beta1::QueryOracleProvidersInfoResponse>> AsyncOracleProvidersInfo(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryOracleProvidersInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::oracle::v1beta1::QueryOracleProvidersInfoResponse>>(AsyncOracleProvidersInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::oracle::v1beta1::QueryOracleProvidersInfoResponse>> PrepareAsyncOracleProvidersInfo(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryOracleProvidersInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::oracle::v1beta1::QueryOracleProvidersInfoResponse>>(PrepareAsyncOracleProvidersInfoRaw(context, request, cq));
    }
    virtual ::grpc::Status OracleProviderPrices(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryOracleProviderPricesRequest& request, ::injective::oracle::v1beta1::QueryOracleProviderPricesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::oracle::v1beta1::QueryOracleProviderPricesResponse>> AsyncOracleProviderPrices(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryOracleProviderPricesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::oracle::v1beta1::QueryOracleProviderPricesResponse>>(AsyncOracleProviderPricesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::oracle::v1beta1::QueryOracleProviderPricesResponse>> PrepareAsyncOracleProviderPrices(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryOracleProviderPricesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::oracle::v1beta1::QueryOracleProviderPricesResponse>>(PrepareAsyncOracleProviderPricesRaw(context, request, cq));
    }
    virtual ::grpc::Status OraclePrice(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryOraclePriceRequest& request, ::injective::oracle::v1beta1::QueryOraclePriceResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::oracle::v1beta1::QueryOraclePriceResponse>> AsyncOraclePrice(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryOraclePriceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::oracle::v1beta1::QueryOraclePriceResponse>>(AsyncOraclePriceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::oracle::v1beta1::QueryOraclePriceResponse>> PrepareAsyncOraclePrice(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryOraclePriceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::oracle::v1beta1::QueryOraclePriceResponse>>(PrepareAsyncOraclePriceRaw(context, request, cq));
    }
    virtual ::grpc::Status PythPrice(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryPythPriceRequest& request, ::injective::oracle::v1beta1::QueryPythPriceResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::oracle::v1beta1::QueryPythPriceResponse>> AsyncPythPrice(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryPythPriceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::oracle::v1beta1::QueryPythPriceResponse>>(AsyncPythPriceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::oracle::v1beta1::QueryPythPriceResponse>> PrepareAsyncPythPrice(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryPythPriceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::oracle::v1beta1::QueryPythPriceResponse>>(PrepareAsyncPythPriceRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Retrieves oracle params
      virtual void Params(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryParamsRequest* request, ::injective::oracle::v1beta1::QueryParamsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Params(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryParamsRequest* request, ::injective::oracle::v1beta1::QueryParamsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Retrieves the band relayers
      virtual void BandRelayers(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryBandRelayersRequest* request, ::injective::oracle::v1beta1::QueryBandRelayersResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void BandRelayers(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryBandRelayersRequest* request, ::injective::oracle::v1beta1::QueryBandRelayersResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Retrieves the state for all band price feeds
      virtual void BandPriceStates(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryBandPriceStatesRequest* request, ::injective::oracle::v1beta1::QueryBandPriceStatesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void BandPriceStates(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryBandPriceStatesRequest* request, ::injective::oracle::v1beta1::QueryBandPriceStatesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Retrieves the state for all band ibc price feeds
      virtual void BandIBCPriceStates(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryBandIBCPriceStatesRequest* request, ::injective::oracle::v1beta1::QueryBandIBCPriceStatesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void BandIBCPriceStates(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryBandIBCPriceStatesRequest* request, ::injective::oracle::v1beta1::QueryBandIBCPriceStatesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Retrieves the state for all price feeds
      virtual void PriceFeedPriceStates(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryPriceFeedPriceStatesRequest* request, ::injective::oracle::v1beta1::QueryPriceFeedPriceStatesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PriceFeedPriceStates(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryPriceFeedPriceStatesRequest* request, ::injective::oracle::v1beta1::QueryPriceFeedPriceStatesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Retrieves the state for all coinbase price feeds
      virtual void CoinbasePriceStates(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryCoinbasePriceStatesRequest* request, ::injective::oracle::v1beta1::QueryCoinbasePriceStatesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CoinbasePriceStates(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryCoinbasePriceStatesRequest* request, ::injective::oracle::v1beta1::QueryCoinbasePriceStatesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Retrieves the state for all pyth price feeds
      virtual void PythPriceStates(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryPythPriceStatesRequest* request, ::injective::oracle::v1beta1::QueryPythPriceStatesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PythPriceStates(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryPythPriceStatesRequest* request, ::injective::oracle::v1beta1::QueryPythPriceStatesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Retrieves the state for all provider price feeds
      virtual void ProviderPriceState(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryProviderPriceStateRequest* request, ::injective::oracle::v1beta1::QueryProviderPriceStateResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ProviderPriceState(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryProviderPriceStateRequest* request, ::injective::oracle::v1beta1::QueryProviderPriceStateResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Retrieves the entire oracle module's state
      virtual void OracleModuleState(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryModuleStateRequest* request, ::injective::oracle::v1beta1::QueryModuleStateResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void OracleModuleState(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryModuleStateRequest* request, ::injective::oracle::v1beta1::QueryModuleStateResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Retrieves historical price records for a given OracleType and Symbol
      virtual void HistoricalPriceRecords(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryHistoricalPriceRecordsRequest* request, ::injective::oracle::v1beta1::QueryHistoricalPriceRecordsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void HistoricalPriceRecords(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryHistoricalPriceRecordsRequest* request, ::injective::oracle::v1beta1::QueryHistoricalPriceRecordsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Retrieves mixed volatility value for the specified pair of base/quote
      virtual void OracleVolatility(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryOracleVolatilityRequest* request, ::injective::oracle::v1beta1::QueryOracleVolatilityResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void OracleVolatility(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryOracleVolatilityRequest* request, ::injective::oracle::v1beta1::QueryOracleVolatilityResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void OracleProvidersInfo(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryOracleProvidersInfoRequest* request, ::injective::oracle::v1beta1::QueryOracleProvidersInfoResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void OracleProvidersInfo(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryOracleProvidersInfoRequest* request, ::injective::oracle::v1beta1::QueryOracleProvidersInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void OracleProviderPrices(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryOracleProviderPricesRequest* request, ::injective::oracle::v1beta1::QueryOracleProviderPricesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void OracleProviderPrices(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryOracleProviderPricesRequest* request, ::injective::oracle::v1beta1::QueryOracleProviderPricesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void OraclePrice(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryOraclePriceRequest* request, ::injective::oracle::v1beta1::QueryOraclePriceResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void OraclePrice(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryOraclePriceRequest* request, ::injective::oracle::v1beta1::QueryOraclePriceResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void PythPrice(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryPythPriceRequest* request, ::injective::oracle::v1beta1::QueryPythPriceResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PythPrice(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryPythPriceRequest* request, ::injective::oracle::v1beta1::QueryPythPriceResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::oracle::v1beta1::QueryParamsResponse>* AsyncParamsRaw(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryParamsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::oracle::v1beta1::QueryParamsResponse>* PrepareAsyncParamsRaw(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryParamsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::oracle::v1beta1::QueryBandRelayersResponse>* AsyncBandRelayersRaw(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryBandRelayersRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::oracle::v1beta1::QueryBandRelayersResponse>* PrepareAsyncBandRelayersRaw(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryBandRelayersRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::oracle::v1beta1::QueryBandPriceStatesResponse>* AsyncBandPriceStatesRaw(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryBandPriceStatesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::oracle::v1beta1::QueryBandPriceStatesResponse>* PrepareAsyncBandPriceStatesRaw(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryBandPriceStatesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::oracle::v1beta1::QueryBandIBCPriceStatesResponse>* AsyncBandIBCPriceStatesRaw(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryBandIBCPriceStatesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::oracle::v1beta1::QueryBandIBCPriceStatesResponse>* PrepareAsyncBandIBCPriceStatesRaw(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryBandIBCPriceStatesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::oracle::v1beta1::QueryPriceFeedPriceStatesResponse>* AsyncPriceFeedPriceStatesRaw(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryPriceFeedPriceStatesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::oracle::v1beta1::QueryPriceFeedPriceStatesResponse>* PrepareAsyncPriceFeedPriceStatesRaw(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryPriceFeedPriceStatesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::oracle::v1beta1::QueryCoinbasePriceStatesResponse>* AsyncCoinbasePriceStatesRaw(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryCoinbasePriceStatesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::oracle::v1beta1::QueryCoinbasePriceStatesResponse>* PrepareAsyncCoinbasePriceStatesRaw(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryCoinbasePriceStatesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::oracle::v1beta1::QueryPythPriceStatesResponse>* AsyncPythPriceStatesRaw(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryPythPriceStatesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::oracle::v1beta1::QueryPythPriceStatesResponse>* PrepareAsyncPythPriceStatesRaw(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryPythPriceStatesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::oracle::v1beta1::QueryProviderPriceStateResponse>* AsyncProviderPriceStateRaw(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryProviderPriceStateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::oracle::v1beta1::QueryProviderPriceStateResponse>* PrepareAsyncProviderPriceStateRaw(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryProviderPriceStateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::oracle::v1beta1::QueryModuleStateResponse>* AsyncOracleModuleStateRaw(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryModuleStateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::oracle::v1beta1::QueryModuleStateResponse>* PrepareAsyncOracleModuleStateRaw(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryModuleStateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::oracle::v1beta1::QueryHistoricalPriceRecordsResponse>* AsyncHistoricalPriceRecordsRaw(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryHistoricalPriceRecordsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::oracle::v1beta1::QueryHistoricalPriceRecordsResponse>* PrepareAsyncHistoricalPriceRecordsRaw(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryHistoricalPriceRecordsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::oracle::v1beta1::QueryOracleVolatilityResponse>* AsyncOracleVolatilityRaw(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryOracleVolatilityRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::oracle::v1beta1::QueryOracleVolatilityResponse>* PrepareAsyncOracleVolatilityRaw(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryOracleVolatilityRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::oracle::v1beta1::QueryOracleProvidersInfoResponse>* AsyncOracleProvidersInfoRaw(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryOracleProvidersInfoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::oracle::v1beta1::QueryOracleProvidersInfoResponse>* PrepareAsyncOracleProvidersInfoRaw(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryOracleProvidersInfoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::oracle::v1beta1::QueryOracleProviderPricesResponse>* AsyncOracleProviderPricesRaw(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryOracleProviderPricesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::oracle::v1beta1::QueryOracleProviderPricesResponse>* PrepareAsyncOracleProviderPricesRaw(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryOracleProviderPricesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::oracle::v1beta1::QueryOraclePriceResponse>* AsyncOraclePriceRaw(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryOraclePriceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::oracle::v1beta1::QueryOraclePriceResponse>* PrepareAsyncOraclePriceRaw(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryOraclePriceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::oracle::v1beta1::QueryPythPriceResponse>* AsyncPythPriceRaw(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryPythPriceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::oracle::v1beta1::QueryPythPriceResponse>* PrepareAsyncPythPriceRaw(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryPythPriceRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status Params(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryParamsRequest& request, ::injective::oracle::v1beta1::QueryParamsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::QueryParamsResponse>> AsyncParams(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryParamsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::QueryParamsResponse>>(AsyncParamsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::QueryParamsResponse>> PrepareAsyncParams(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryParamsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::QueryParamsResponse>>(PrepareAsyncParamsRaw(context, request, cq));
    }
    ::grpc::Status BandRelayers(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryBandRelayersRequest& request, ::injective::oracle::v1beta1::QueryBandRelayersResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::QueryBandRelayersResponse>> AsyncBandRelayers(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryBandRelayersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::QueryBandRelayersResponse>>(AsyncBandRelayersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::QueryBandRelayersResponse>> PrepareAsyncBandRelayers(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryBandRelayersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::QueryBandRelayersResponse>>(PrepareAsyncBandRelayersRaw(context, request, cq));
    }
    ::grpc::Status BandPriceStates(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryBandPriceStatesRequest& request, ::injective::oracle::v1beta1::QueryBandPriceStatesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::QueryBandPriceStatesResponse>> AsyncBandPriceStates(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryBandPriceStatesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::QueryBandPriceStatesResponse>>(AsyncBandPriceStatesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::QueryBandPriceStatesResponse>> PrepareAsyncBandPriceStates(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryBandPriceStatesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::QueryBandPriceStatesResponse>>(PrepareAsyncBandPriceStatesRaw(context, request, cq));
    }
    ::grpc::Status BandIBCPriceStates(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryBandIBCPriceStatesRequest& request, ::injective::oracle::v1beta1::QueryBandIBCPriceStatesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::QueryBandIBCPriceStatesResponse>> AsyncBandIBCPriceStates(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryBandIBCPriceStatesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::QueryBandIBCPriceStatesResponse>>(AsyncBandIBCPriceStatesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::QueryBandIBCPriceStatesResponse>> PrepareAsyncBandIBCPriceStates(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryBandIBCPriceStatesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::QueryBandIBCPriceStatesResponse>>(PrepareAsyncBandIBCPriceStatesRaw(context, request, cq));
    }
    ::grpc::Status PriceFeedPriceStates(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryPriceFeedPriceStatesRequest& request, ::injective::oracle::v1beta1::QueryPriceFeedPriceStatesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::QueryPriceFeedPriceStatesResponse>> AsyncPriceFeedPriceStates(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryPriceFeedPriceStatesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::QueryPriceFeedPriceStatesResponse>>(AsyncPriceFeedPriceStatesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::QueryPriceFeedPriceStatesResponse>> PrepareAsyncPriceFeedPriceStates(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryPriceFeedPriceStatesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::QueryPriceFeedPriceStatesResponse>>(PrepareAsyncPriceFeedPriceStatesRaw(context, request, cq));
    }
    ::grpc::Status CoinbasePriceStates(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryCoinbasePriceStatesRequest& request, ::injective::oracle::v1beta1::QueryCoinbasePriceStatesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::QueryCoinbasePriceStatesResponse>> AsyncCoinbasePriceStates(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryCoinbasePriceStatesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::QueryCoinbasePriceStatesResponse>>(AsyncCoinbasePriceStatesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::QueryCoinbasePriceStatesResponse>> PrepareAsyncCoinbasePriceStates(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryCoinbasePriceStatesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::QueryCoinbasePriceStatesResponse>>(PrepareAsyncCoinbasePriceStatesRaw(context, request, cq));
    }
    ::grpc::Status PythPriceStates(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryPythPriceStatesRequest& request, ::injective::oracle::v1beta1::QueryPythPriceStatesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::QueryPythPriceStatesResponse>> AsyncPythPriceStates(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryPythPriceStatesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::QueryPythPriceStatesResponse>>(AsyncPythPriceStatesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::QueryPythPriceStatesResponse>> PrepareAsyncPythPriceStates(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryPythPriceStatesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::QueryPythPriceStatesResponse>>(PrepareAsyncPythPriceStatesRaw(context, request, cq));
    }
    ::grpc::Status ProviderPriceState(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryProviderPriceStateRequest& request, ::injective::oracle::v1beta1::QueryProviderPriceStateResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::QueryProviderPriceStateResponse>> AsyncProviderPriceState(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryProviderPriceStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::QueryProviderPriceStateResponse>>(AsyncProviderPriceStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::QueryProviderPriceStateResponse>> PrepareAsyncProviderPriceState(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryProviderPriceStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::QueryProviderPriceStateResponse>>(PrepareAsyncProviderPriceStateRaw(context, request, cq));
    }
    ::grpc::Status OracleModuleState(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryModuleStateRequest& request, ::injective::oracle::v1beta1::QueryModuleStateResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::QueryModuleStateResponse>> AsyncOracleModuleState(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryModuleStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::QueryModuleStateResponse>>(AsyncOracleModuleStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::QueryModuleStateResponse>> PrepareAsyncOracleModuleState(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryModuleStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::QueryModuleStateResponse>>(PrepareAsyncOracleModuleStateRaw(context, request, cq));
    }
    ::grpc::Status HistoricalPriceRecords(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryHistoricalPriceRecordsRequest& request, ::injective::oracle::v1beta1::QueryHistoricalPriceRecordsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::QueryHistoricalPriceRecordsResponse>> AsyncHistoricalPriceRecords(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryHistoricalPriceRecordsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::QueryHistoricalPriceRecordsResponse>>(AsyncHistoricalPriceRecordsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::QueryHistoricalPriceRecordsResponse>> PrepareAsyncHistoricalPriceRecords(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryHistoricalPriceRecordsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::QueryHistoricalPriceRecordsResponse>>(PrepareAsyncHistoricalPriceRecordsRaw(context, request, cq));
    }
    ::grpc::Status OracleVolatility(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryOracleVolatilityRequest& request, ::injective::oracle::v1beta1::QueryOracleVolatilityResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::QueryOracleVolatilityResponse>> AsyncOracleVolatility(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryOracleVolatilityRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::QueryOracleVolatilityResponse>>(AsyncOracleVolatilityRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::QueryOracleVolatilityResponse>> PrepareAsyncOracleVolatility(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryOracleVolatilityRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::QueryOracleVolatilityResponse>>(PrepareAsyncOracleVolatilityRaw(context, request, cq));
    }
    ::grpc::Status OracleProvidersInfo(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryOracleProvidersInfoRequest& request, ::injective::oracle::v1beta1::QueryOracleProvidersInfoResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::QueryOracleProvidersInfoResponse>> AsyncOracleProvidersInfo(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryOracleProvidersInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::QueryOracleProvidersInfoResponse>>(AsyncOracleProvidersInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::QueryOracleProvidersInfoResponse>> PrepareAsyncOracleProvidersInfo(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryOracleProvidersInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::QueryOracleProvidersInfoResponse>>(PrepareAsyncOracleProvidersInfoRaw(context, request, cq));
    }
    ::grpc::Status OracleProviderPrices(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryOracleProviderPricesRequest& request, ::injective::oracle::v1beta1::QueryOracleProviderPricesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::QueryOracleProviderPricesResponse>> AsyncOracleProviderPrices(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryOracleProviderPricesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::QueryOracleProviderPricesResponse>>(AsyncOracleProviderPricesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::QueryOracleProviderPricesResponse>> PrepareAsyncOracleProviderPrices(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryOracleProviderPricesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::QueryOracleProviderPricesResponse>>(PrepareAsyncOracleProviderPricesRaw(context, request, cq));
    }
    ::grpc::Status OraclePrice(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryOraclePriceRequest& request, ::injective::oracle::v1beta1::QueryOraclePriceResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::QueryOraclePriceResponse>> AsyncOraclePrice(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryOraclePriceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::QueryOraclePriceResponse>>(AsyncOraclePriceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::QueryOraclePriceResponse>> PrepareAsyncOraclePrice(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryOraclePriceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::QueryOraclePriceResponse>>(PrepareAsyncOraclePriceRaw(context, request, cq));
    }
    ::grpc::Status PythPrice(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryPythPriceRequest& request, ::injective::oracle::v1beta1::QueryPythPriceResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::QueryPythPriceResponse>> AsyncPythPrice(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryPythPriceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::QueryPythPriceResponse>>(AsyncPythPriceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::QueryPythPriceResponse>> PrepareAsyncPythPrice(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryPythPriceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::QueryPythPriceResponse>>(PrepareAsyncPythPriceRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Params(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryParamsRequest* request, ::injective::oracle::v1beta1::QueryParamsResponse* response, std::function<void(::grpc::Status)>) override;
      void Params(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryParamsRequest* request, ::injective::oracle::v1beta1::QueryParamsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void BandRelayers(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryBandRelayersRequest* request, ::injective::oracle::v1beta1::QueryBandRelayersResponse* response, std::function<void(::grpc::Status)>) override;
      void BandRelayers(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryBandRelayersRequest* request, ::injective::oracle::v1beta1::QueryBandRelayersResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void BandPriceStates(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryBandPriceStatesRequest* request, ::injective::oracle::v1beta1::QueryBandPriceStatesResponse* response, std::function<void(::grpc::Status)>) override;
      void BandPriceStates(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryBandPriceStatesRequest* request, ::injective::oracle::v1beta1::QueryBandPriceStatesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void BandIBCPriceStates(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryBandIBCPriceStatesRequest* request, ::injective::oracle::v1beta1::QueryBandIBCPriceStatesResponse* response, std::function<void(::grpc::Status)>) override;
      void BandIBCPriceStates(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryBandIBCPriceStatesRequest* request, ::injective::oracle::v1beta1::QueryBandIBCPriceStatesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void PriceFeedPriceStates(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryPriceFeedPriceStatesRequest* request, ::injective::oracle::v1beta1::QueryPriceFeedPriceStatesResponse* response, std::function<void(::grpc::Status)>) override;
      void PriceFeedPriceStates(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryPriceFeedPriceStatesRequest* request, ::injective::oracle::v1beta1::QueryPriceFeedPriceStatesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CoinbasePriceStates(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryCoinbasePriceStatesRequest* request, ::injective::oracle::v1beta1::QueryCoinbasePriceStatesResponse* response, std::function<void(::grpc::Status)>) override;
      void CoinbasePriceStates(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryCoinbasePriceStatesRequest* request, ::injective::oracle::v1beta1::QueryCoinbasePriceStatesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void PythPriceStates(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryPythPriceStatesRequest* request, ::injective::oracle::v1beta1::QueryPythPriceStatesResponse* response, std::function<void(::grpc::Status)>) override;
      void PythPriceStates(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryPythPriceStatesRequest* request, ::injective::oracle::v1beta1::QueryPythPriceStatesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ProviderPriceState(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryProviderPriceStateRequest* request, ::injective::oracle::v1beta1::QueryProviderPriceStateResponse* response, std::function<void(::grpc::Status)>) override;
      void ProviderPriceState(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryProviderPriceStateRequest* request, ::injective::oracle::v1beta1::QueryProviderPriceStateResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void OracleModuleState(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryModuleStateRequest* request, ::injective::oracle::v1beta1::QueryModuleStateResponse* response, std::function<void(::grpc::Status)>) override;
      void OracleModuleState(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryModuleStateRequest* request, ::injective::oracle::v1beta1::QueryModuleStateResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void HistoricalPriceRecords(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryHistoricalPriceRecordsRequest* request, ::injective::oracle::v1beta1::QueryHistoricalPriceRecordsResponse* response, std::function<void(::grpc::Status)>) override;
      void HistoricalPriceRecords(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryHistoricalPriceRecordsRequest* request, ::injective::oracle::v1beta1::QueryHistoricalPriceRecordsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void OracleVolatility(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryOracleVolatilityRequest* request, ::injective::oracle::v1beta1::QueryOracleVolatilityResponse* response, std::function<void(::grpc::Status)>) override;
      void OracleVolatility(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryOracleVolatilityRequest* request, ::injective::oracle::v1beta1::QueryOracleVolatilityResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void OracleProvidersInfo(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryOracleProvidersInfoRequest* request, ::injective::oracle::v1beta1::QueryOracleProvidersInfoResponse* response, std::function<void(::grpc::Status)>) override;
      void OracleProvidersInfo(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryOracleProvidersInfoRequest* request, ::injective::oracle::v1beta1::QueryOracleProvidersInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void OracleProviderPrices(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryOracleProviderPricesRequest* request, ::injective::oracle::v1beta1::QueryOracleProviderPricesResponse* response, std::function<void(::grpc::Status)>) override;
      void OracleProviderPrices(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryOracleProviderPricesRequest* request, ::injective::oracle::v1beta1::QueryOracleProviderPricesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void OraclePrice(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryOraclePriceRequest* request, ::injective::oracle::v1beta1::QueryOraclePriceResponse* response, std::function<void(::grpc::Status)>) override;
      void OraclePrice(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryOraclePriceRequest* request, ::injective::oracle::v1beta1::QueryOraclePriceResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void PythPrice(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryPythPriceRequest* request, ::injective::oracle::v1beta1::QueryPythPriceResponse* response, std::function<void(::grpc::Status)>) override;
      void PythPrice(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryPythPriceRequest* request, ::injective::oracle::v1beta1::QueryPythPriceResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::QueryParamsResponse>* AsyncParamsRaw(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryParamsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::QueryParamsResponse>* PrepareAsyncParamsRaw(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryParamsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::QueryBandRelayersResponse>* AsyncBandRelayersRaw(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryBandRelayersRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::QueryBandRelayersResponse>* PrepareAsyncBandRelayersRaw(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryBandRelayersRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::QueryBandPriceStatesResponse>* AsyncBandPriceStatesRaw(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryBandPriceStatesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::QueryBandPriceStatesResponse>* PrepareAsyncBandPriceStatesRaw(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryBandPriceStatesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::QueryBandIBCPriceStatesResponse>* AsyncBandIBCPriceStatesRaw(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryBandIBCPriceStatesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::QueryBandIBCPriceStatesResponse>* PrepareAsyncBandIBCPriceStatesRaw(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryBandIBCPriceStatesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::QueryPriceFeedPriceStatesResponse>* AsyncPriceFeedPriceStatesRaw(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryPriceFeedPriceStatesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::QueryPriceFeedPriceStatesResponse>* PrepareAsyncPriceFeedPriceStatesRaw(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryPriceFeedPriceStatesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::QueryCoinbasePriceStatesResponse>* AsyncCoinbasePriceStatesRaw(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryCoinbasePriceStatesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::QueryCoinbasePriceStatesResponse>* PrepareAsyncCoinbasePriceStatesRaw(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryCoinbasePriceStatesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::QueryPythPriceStatesResponse>* AsyncPythPriceStatesRaw(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryPythPriceStatesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::QueryPythPriceStatesResponse>* PrepareAsyncPythPriceStatesRaw(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryPythPriceStatesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::QueryProviderPriceStateResponse>* AsyncProviderPriceStateRaw(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryProviderPriceStateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::QueryProviderPriceStateResponse>* PrepareAsyncProviderPriceStateRaw(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryProviderPriceStateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::QueryModuleStateResponse>* AsyncOracleModuleStateRaw(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryModuleStateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::QueryModuleStateResponse>* PrepareAsyncOracleModuleStateRaw(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryModuleStateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::QueryHistoricalPriceRecordsResponse>* AsyncHistoricalPriceRecordsRaw(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryHistoricalPriceRecordsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::QueryHistoricalPriceRecordsResponse>* PrepareAsyncHistoricalPriceRecordsRaw(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryHistoricalPriceRecordsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::QueryOracleVolatilityResponse>* AsyncOracleVolatilityRaw(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryOracleVolatilityRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::QueryOracleVolatilityResponse>* PrepareAsyncOracleVolatilityRaw(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryOracleVolatilityRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::QueryOracleProvidersInfoResponse>* AsyncOracleProvidersInfoRaw(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryOracleProvidersInfoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::QueryOracleProvidersInfoResponse>* PrepareAsyncOracleProvidersInfoRaw(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryOracleProvidersInfoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::QueryOracleProviderPricesResponse>* AsyncOracleProviderPricesRaw(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryOracleProviderPricesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::QueryOracleProviderPricesResponse>* PrepareAsyncOracleProviderPricesRaw(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryOracleProviderPricesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::QueryOraclePriceResponse>* AsyncOraclePriceRaw(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryOraclePriceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::QueryOraclePriceResponse>* PrepareAsyncOraclePriceRaw(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryOraclePriceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::QueryPythPriceResponse>* AsyncPythPriceRaw(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryPythPriceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::QueryPythPriceResponse>* PrepareAsyncPythPriceRaw(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryPythPriceRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Params_;
    const ::grpc::internal::RpcMethod rpcmethod_BandRelayers_;
    const ::grpc::internal::RpcMethod rpcmethod_BandPriceStates_;
    const ::grpc::internal::RpcMethod rpcmethod_BandIBCPriceStates_;
    const ::grpc::internal::RpcMethod rpcmethod_PriceFeedPriceStates_;
    const ::grpc::internal::RpcMethod rpcmethod_CoinbasePriceStates_;
    const ::grpc::internal::RpcMethod rpcmethod_PythPriceStates_;
    const ::grpc::internal::RpcMethod rpcmethod_ProviderPriceState_;
    const ::grpc::internal::RpcMethod rpcmethod_OracleModuleState_;
    const ::grpc::internal::RpcMethod rpcmethod_HistoricalPriceRecords_;
    const ::grpc::internal::RpcMethod rpcmethod_OracleVolatility_;
    const ::grpc::internal::RpcMethod rpcmethod_OracleProvidersInfo_;
    const ::grpc::internal::RpcMethod rpcmethod_OracleProviderPrices_;
    const ::grpc::internal::RpcMethod rpcmethod_OraclePrice_;
    const ::grpc::internal::RpcMethod rpcmethod_PythPrice_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Retrieves oracle params
    virtual ::grpc::Status Params(::grpc::ServerContext* context, const ::injective::oracle::v1beta1::QueryParamsRequest* request, ::injective::oracle::v1beta1::QueryParamsResponse* response);
    // Retrieves the band relayers
    virtual ::grpc::Status BandRelayers(::grpc::ServerContext* context, const ::injective::oracle::v1beta1::QueryBandRelayersRequest* request, ::injective::oracle::v1beta1::QueryBandRelayersResponse* response);
    // Retrieves the state for all band price feeds
    virtual ::grpc::Status BandPriceStates(::grpc::ServerContext* context, const ::injective::oracle::v1beta1::QueryBandPriceStatesRequest* request, ::injective::oracle::v1beta1::QueryBandPriceStatesResponse* response);
    // Retrieves the state for all band ibc price feeds
    virtual ::grpc::Status BandIBCPriceStates(::grpc::ServerContext* context, const ::injective::oracle::v1beta1::QueryBandIBCPriceStatesRequest* request, ::injective::oracle::v1beta1::QueryBandIBCPriceStatesResponse* response);
    // Retrieves the state for all price feeds
    virtual ::grpc::Status PriceFeedPriceStates(::grpc::ServerContext* context, const ::injective::oracle::v1beta1::QueryPriceFeedPriceStatesRequest* request, ::injective::oracle::v1beta1::QueryPriceFeedPriceStatesResponse* response);
    // Retrieves the state for all coinbase price feeds
    virtual ::grpc::Status CoinbasePriceStates(::grpc::ServerContext* context, const ::injective::oracle::v1beta1::QueryCoinbasePriceStatesRequest* request, ::injective::oracle::v1beta1::QueryCoinbasePriceStatesResponse* response);
    // Retrieves the state for all pyth price feeds
    virtual ::grpc::Status PythPriceStates(::grpc::ServerContext* context, const ::injective::oracle::v1beta1::QueryPythPriceStatesRequest* request, ::injective::oracle::v1beta1::QueryPythPriceStatesResponse* response);
    // Retrieves the state for all provider price feeds
    virtual ::grpc::Status ProviderPriceState(::grpc::ServerContext* context, const ::injective::oracle::v1beta1::QueryProviderPriceStateRequest* request, ::injective::oracle::v1beta1::QueryProviderPriceStateResponse* response);
    // Retrieves the entire oracle module's state
    virtual ::grpc::Status OracleModuleState(::grpc::ServerContext* context, const ::injective::oracle::v1beta1::QueryModuleStateRequest* request, ::injective::oracle::v1beta1::QueryModuleStateResponse* response);
    // Retrieves historical price records for a given OracleType and Symbol
    virtual ::grpc::Status HistoricalPriceRecords(::grpc::ServerContext* context, const ::injective::oracle::v1beta1::QueryHistoricalPriceRecordsRequest* request, ::injective::oracle::v1beta1::QueryHistoricalPriceRecordsResponse* response);
    // Retrieves mixed volatility value for the specified pair of base/quote
    virtual ::grpc::Status OracleVolatility(::grpc::ServerContext* context, const ::injective::oracle::v1beta1::QueryOracleVolatilityRequest* request, ::injective::oracle::v1beta1::QueryOracleVolatilityResponse* response);
    virtual ::grpc::Status OracleProvidersInfo(::grpc::ServerContext* context, const ::injective::oracle::v1beta1::QueryOracleProvidersInfoRequest* request, ::injective::oracle::v1beta1::QueryOracleProvidersInfoResponse* response);
    virtual ::grpc::Status OracleProviderPrices(::grpc::ServerContext* context, const ::injective::oracle::v1beta1::QueryOracleProviderPricesRequest* request, ::injective::oracle::v1beta1::QueryOracleProviderPricesResponse* response);
    virtual ::grpc::Status OraclePrice(::grpc::ServerContext* context, const ::injective::oracle::v1beta1::QueryOraclePriceRequest* request, ::injective::oracle::v1beta1::QueryOraclePriceResponse* response);
    virtual ::grpc::Status PythPrice(::grpc::ServerContext* context, const ::injective::oracle::v1beta1::QueryPythPriceRequest* request, ::injective::oracle::v1beta1::QueryPythPriceResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Params : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Params() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Params() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Params(::grpc::ServerContext* /*context*/, const ::injective::oracle::v1beta1::QueryParamsRequest* /*request*/, ::injective::oracle::v1beta1::QueryParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestParams(::grpc::ServerContext* context, ::injective::oracle::v1beta1::QueryParamsRequest* request, ::grpc::ServerAsyncResponseWriter< ::injective::oracle::v1beta1::QueryParamsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_BandRelayers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_BandRelayers() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_BandRelayers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BandRelayers(::grpc::ServerContext* /*context*/, const ::injective::oracle::v1beta1::QueryBandRelayersRequest* /*request*/, ::injective::oracle::v1beta1::QueryBandRelayersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBandRelayers(::grpc::ServerContext* context, ::injective::oracle::v1beta1::QueryBandRelayersRequest* request, ::grpc::ServerAsyncResponseWriter< ::injective::oracle::v1beta1::QueryBandRelayersResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_BandPriceStates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_BandPriceStates() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_BandPriceStates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BandPriceStates(::grpc::ServerContext* /*context*/, const ::injective::oracle::v1beta1::QueryBandPriceStatesRequest* /*request*/, ::injective::oracle::v1beta1::QueryBandPriceStatesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBandPriceStates(::grpc::ServerContext* context, ::injective::oracle::v1beta1::QueryBandPriceStatesRequest* request, ::grpc::ServerAsyncResponseWriter< ::injective::oracle::v1beta1::QueryBandPriceStatesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_BandIBCPriceStates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_BandIBCPriceStates() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_BandIBCPriceStates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BandIBCPriceStates(::grpc::ServerContext* /*context*/, const ::injective::oracle::v1beta1::QueryBandIBCPriceStatesRequest* /*request*/, ::injective::oracle::v1beta1::QueryBandIBCPriceStatesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBandIBCPriceStates(::grpc::ServerContext* context, ::injective::oracle::v1beta1::QueryBandIBCPriceStatesRequest* request, ::grpc::ServerAsyncResponseWriter< ::injective::oracle::v1beta1::QueryBandIBCPriceStatesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PriceFeedPriceStates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PriceFeedPriceStates() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_PriceFeedPriceStates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PriceFeedPriceStates(::grpc::ServerContext* /*context*/, const ::injective::oracle::v1beta1::QueryPriceFeedPriceStatesRequest* /*request*/, ::injective::oracle::v1beta1::QueryPriceFeedPriceStatesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPriceFeedPriceStates(::grpc::ServerContext* context, ::injective::oracle::v1beta1::QueryPriceFeedPriceStatesRequest* request, ::grpc::ServerAsyncResponseWriter< ::injective::oracle::v1beta1::QueryPriceFeedPriceStatesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CoinbasePriceStates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CoinbasePriceStates() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_CoinbasePriceStates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CoinbasePriceStates(::grpc::ServerContext* /*context*/, const ::injective::oracle::v1beta1::QueryCoinbasePriceStatesRequest* /*request*/, ::injective::oracle::v1beta1::QueryCoinbasePriceStatesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCoinbasePriceStates(::grpc::ServerContext* context, ::injective::oracle::v1beta1::QueryCoinbasePriceStatesRequest* request, ::grpc::ServerAsyncResponseWriter< ::injective::oracle::v1beta1::QueryCoinbasePriceStatesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PythPriceStates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PythPriceStates() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_PythPriceStates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PythPriceStates(::grpc::ServerContext* /*context*/, const ::injective::oracle::v1beta1::QueryPythPriceStatesRequest* /*request*/, ::injective::oracle::v1beta1::QueryPythPriceStatesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPythPriceStates(::grpc::ServerContext* context, ::injective::oracle::v1beta1::QueryPythPriceStatesRequest* request, ::grpc::ServerAsyncResponseWriter< ::injective::oracle::v1beta1::QueryPythPriceStatesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ProviderPriceState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ProviderPriceState() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_ProviderPriceState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ProviderPriceState(::grpc::ServerContext* /*context*/, const ::injective::oracle::v1beta1::QueryProviderPriceStateRequest* /*request*/, ::injective::oracle::v1beta1::QueryProviderPriceStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestProviderPriceState(::grpc::ServerContext* context, ::injective::oracle::v1beta1::QueryProviderPriceStateRequest* request, ::grpc::ServerAsyncResponseWriter< ::injective::oracle::v1beta1::QueryProviderPriceStateResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_OracleModuleState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_OracleModuleState() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_OracleModuleState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OracleModuleState(::grpc::ServerContext* /*context*/, const ::injective::oracle::v1beta1::QueryModuleStateRequest* /*request*/, ::injective::oracle::v1beta1::QueryModuleStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOracleModuleState(::grpc::ServerContext* context, ::injective::oracle::v1beta1::QueryModuleStateRequest* request, ::grpc::ServerAsyncResponseWriter< ::injective::oracle::v1beta1::QueryModuleStateResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_HistoricalPriceRecords : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_HistoricalPriceRecords() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_HistoricalPriceRecords() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HistoricalPriceRecords(::grpc::ServerContext* /*context*/, const ::injective::oracle::v1beta1::QueryHistoricalPriceRecordsRequest* /*request*/, ::injective::oracle::v1beta1::QueryHistoricalPriceRecordsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHistoricalPriceRecords(::grpc::ServerContext* context, ::injective::oracle::v1beta1::QueryHistoricalPriceRecordsRequest* request, ::grpc::ServerAsyncResponseWriter< ::injective::oracle::v1beta1::QueryHistoricalPriceRecordsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_OracleVolatility : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_OracleVolatility() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_OracleVolatility() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OracleVolatility(::grpc::ServerContext* /*context*/, const ::injective::oracle::v1beta1::QueryOracleVolatilityRequest* /*request*/, ::injective::oracle::v1beta1::QueryOracleVolatilityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOracleVolatility(::grpc::ServerContext* context, ::injective::oracle::v1beta1::QueryOracleVolatilityRequest* request, ::grpc::ServerAsyncResponseWriter< ::injective::oracle::v1beta1::QueryOracleVolatilityResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_OracleProvidersInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_OracleProvidersInfo() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_OracleProvidersInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OracleProvidersInfo(::grpc::ServerContext* /*context*/, const ::injective::oracle::v1beta1::QueryOracleProvidersInfoRequest* /*request*/, ::injective::oracle::v1beta1::QueryOracleProvidersInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOracleProvidersInfo(::grpc::ServerContext* context, ::injective::oracle::v1beta1::QueryOracleProvidersInfoRequest* request, ::grpc::ServerAsyncResponseWriter< ::injective::oracle::v1beta1::QueryOracleProvidersInfoResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_OracleProviderPrices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_OracleProviderPrices() {
      ::grpc::Service::MarkMethodAsync(12);
    }
    ~WithAsyncMethod_OracleProviderPrices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OracleProviderPrices(::grpc::ServerContext* /*context*/, const ::injective::oracle::v1beta1::QueryOracleProviderPricesRequest* /*request*/, ::injective::oracle::v1beta1::QueryOracleProviderPricesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOracleProviderPrices(::grpc::ServerContext* context, ::injective::oracle::v1beta1::QueryOracleProviderPricesRequest* request, ::grpc::ServerAsyncResponseWriter< ::injective::oracle::v1beta1::QueryOracleProviderPricesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_OraclePrice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_OraclePrice() {
      ::grpc::Service::MarkMethodAsync(13);
    }
    ~WithAsyncMethod_OraclePrice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OraclePrice(::grpc::ServerContext* /*context*/, const ::injective::oracle::v1beta1::QueryOraclePriceRequest* /*request*/, ::injective::oracle::v1beta1::QueryOraclePriceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOraclePrice(::grpc::ServerContext* context, ::injective::oracle::v1beta1::QueryOraclePriceRequest* request, ::grpc::ServerAsyncResponseWriter< ::injective::oracle::v1beta1::QueryOraclePriceResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PythPrice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PythPrice() {
      ::grpc::Service::MarkMethodAsync(14);
    }
    ~WithAsyncMethod_PythPrice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PythPrice(::grpc::ServerContext* /*context*/, const ::injective::oracle::v1beta1::QueryPythPriceRequest* /*request*/, ::injective::oracle::v1beta1::QueryPythPriceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPythPrice(::grpc::ServerContext* context, ::injective::oracle::v1beta1::QueryPythPriceRequest* request, ::grpc::ServerAsyncResponseWriter< ::injective::oracle::v1beta1::QueryPythPriceResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Params<WithAsyncMethod_BandRelayers<WithAsyncMethod_BandPriceStates<WithAsyncMethod_BandIBCPriceStates<WithAsyncMethod_PriceFeedPriceStates<WithAsyncMethod_CoinbasePriceStates<WithAsyncMethod_PythPriceStates<WithAsyncMethod_ProviderPriceState<WithAsyncMethod_OracleModuleState<WithAsyncMethod_HistoricalPriceRecords<WithAsyncMethod_OracleVolatility<WithAsyncMethod_OracleProvidersInfo<WithAsyncMethod_OracleProviderPrices<WithAsyncMethod_OraclePrice<WithAsyncMethod_PythPrice<Service > > > > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Params : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Params() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::injective::oracle::v1beta1::QueryParamsRequest, ::injective::oracle::v1beta1::QueryParamsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::injective::oracle::v1beta1::QueryParamsRequest* request, ::injective::oracle::v1beta1::QueryParamsResponse* response) { return this->Params(context, request, response); }));}
    void SetMessageAllocatorFor_Params(
        ::grpc::MessageAllocator< ::injective::oracle::v1beta1::QueryParamsRequest, ::injective::oracle::v1beta1::QueryParamsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::injective::oracle::v1beta1::QueryParamsRequest, ::injective::oracle::v1beta1::QueryParamsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Params() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Params(::grpc::ServerContext* /*context*/, const ::injective::oracle::v1beta1::QueryParamsRequest* /*request*/, ::injective::oracle::v1beta1::QueryParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Params(
      ::grpc::CallbackServerContext* /*context*/, const ::injective::oracle::v1beta1::QueryParamsRequest* /*request*/, ::injective::oracle::v1beta1::QueryParamsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_BandRelayers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_BandRelayers() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::injective::oracle::v1beta1::QueryBandRelayersRequest, ::injective::oracle::v1beta1::QueryBandRelayersResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::injective::oracle::v1beta1::QueryBandRelayersRequest* request, ::injective::oracle::v1beta1::QueryBandRelayersResponse* response) { return this->BandRelayers(context, request, response); }));}
    void SetMessageAllocatorFor_BandRelayers(
        ::grpc::MessageAllocator< ::injective::oracle::v1beta1::QueryBandRelayersRequest, ::injective::oracle::v1beta1::QueryBandRelayersResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::injective::oracle::v1beta1::QueryBandRelayersRequest, ::injective::oracle::v1beta1::QueryBandRelayersResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_BandRelayers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BandRelayers(::grpc::ServerContext* /*context*/, const ::injective::oracle::v1beta1::QueryBandRelayersRequest* /*request*/, ::injective::oracle::v1beta1::QueryBandRelayersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* BandRelayers(
      ::grpc::CallbackServerContext* /*context*/, const ::injective::oracle::v1beta1::QueryBandRelayersRequest* /*request*/, ::injective::oracle::v1beta1::QueryBandRelayersResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_BandPriceStates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_BandPriceStates() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::injective::oracle::v1beta1::QueryBandPriceStatesRequest, ::injective::oracle::v1beta1::QueryBandPriceStatesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::injective::oracle::v1beta1::QueryBandPriceStatesRequest* request, ::injective::oracle::v1beta1::QueryBandPriceStatesResponse* response) { return this->BandPriceStates(context, request, response); }));}
    void SetMessageAllocatorFor_BandPriceStates(
        ::grpc::MessageAllocator< ::injective::oracle::v1beta1::QueryBandPriceStatesRequest, ::injective::oracle::v1beta1::QueryBandPriceStatesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::injective::oracle::v1beta1::QueryBandPriceStatesRequest, ::injective::oracle::v1beta1::QueryBandPriceStatesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_BandPriceStates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BandPriceStates(::grpc::ServerContext* /*context*/, const ::injective::oracle::v1beta1::QueryBandPriceStatesRequest* /*request*/, ::injective::oracle::v1beta1::QueryBandPriceStatesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* BandPriceStates(
      ::grpc::CallbackServerContext* /*context*/, const ::injective::oracle::v1beta1::QueryBandPriceStatesRequest* /*request*/, ::injective::oracle::v1beta1::QueryBandPriceStatesResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_BandIBCPriceStates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_BandIBCPriceStates() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::injective::oracle::v1beta1::QueryBandIBCPriceStatesRequest, ::injective::oracle::v1beta1::QueryBandIBCPriceStatesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::injective::oracle::v1beta1::QueryBandIBCPriceStatesRequest* request, ::injective::oracle::v1beta1::QueryBandIBCPriceStatesResponse* response) { return this->BandIBCPriceStates(context, request, response); }));}
    void SetMessageAllocatorFor_BandIBCPriceStates(
        ::grpc::MessageAllocator< ::injective::oracle::v1beta1::QueryBandIBCPriceStatesRequest, ::injective::oracle::v1beta1::QueryBandIBCPriceStatesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::injective::oracle::v1beta1::QueryBandIBCPriceStatesRequest, ::injective::oracle::v1beta1::QueryBandIBCPriceStatesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_BandIBCPriceStates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BandIBCPriceStates(::grpc::ServerContext* /*context*/, const ::injective::oracle::v1beta1::QueryBandIBCPriceStatesRequest* /*request*/, ::injective::oracle::v1beta1::QueryBandIBCPriceStatesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* BandIBCPriceStates(
      ::grpc::CallbackServerContext* /*context*/, const ::injective::oracle::v1beta1::QueryBandIBCPriceStatesRequest* /*request*/, ::injective::oracle::v1beta1::QueryBandIBCPriceStatesResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PriceFeedPriceStates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PriceFeedPriceStates() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::injective::oracle::v1beta1::QueryPriceFeedPriceStatesRequest, ::injective::oracle::v1beta1::QueryPriceFeedPriceStatesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::injective::oracle::v1beta1::QueryPriceFeedPriceStatesRequest* request, ::injective::oracle::v1beta1::QueryPriceFeedPriceStatesResponse* response) { return this->PriceFeedPriceStates(context, request, response); }));}
    void SetMessageAllocatorFor_PriceFeedPriceStates(
        ::grpc::MessageAllocator< ::injective::oracle::v1beta1::QueryPriceFeedPriceStatesRequest, ::injective::oracle::v1beta1::QueryPriceFeedPriceStatesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::injective::oracle::v1beta1::QueryPriceFeedPriceStatesRequest, ::injective::oracle::v1beta1::QueryPriceFeedPriceStatesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PriceFeedPriceStates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PriceFeedPriceStates(::grpc::ServerContext* /*context*/, const ::injective::oracle::v1beta1::QueryPriceFeedPriceStatesRequest* /*request*/, ::injective::oracle::v1beta1::QueryPriceFeedPriceStatesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PriceFeedPriceStates(
      ::grpc::CallbackServerContext* /*context*/, const ::injective::oracle::v1beta1::QueryPriceFeedPriceStatesRequest* /*request*/, ::injective::oracle::v1beta1::QueryPriceFeedPriceStatesResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CoinbasePriceStates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CoinbasePriceStates() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::injective::oracle::v1beta1::QueryCoinbasePriceStatesRequest, ::injective::oracle::v1beta1::QueryCoinbasePriceStatesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::injective::oracle::v1beta1::QueryCoinbasePriceStatesRequest* request, ::injective::oracle::v1beta1::QueryCoinbasePriceStatesResponse* response) { return this->CoinbasePriceStates(context, request, response); }));}
    void SetMessageAllocatorFor_CoinbasePriceStates(
        ::grpc::MessageAllocator< ::injective::oracle::v1beta1::QueryCoinbasePriceStatesRequest, ::injective::oracle::v1beta1::QueryCoinbasePriceStatesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::injective::oracle::v1beta1::QueryCoinbasePriceStatesRequest, ::injective::oracle::v1beta1::QueryCoinbasePriceStatesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CoinbasePriceStates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CoinbasePriceStates(::grpc::ServerContext* /*context*/, const ::injective::oracle::v1beta1::QueryCoinbasePriceStatesRequest* /*request*/, ::injective::oracle::v1beta1::QueryCoinbasePriceStatesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CoinbasePriceStates(
      ::grpc::CallbackServerContext* /*context*/, const ::injective::oracle::v1beta1::QueryCoinbasePriceStatesRequest* /*request*/, ::injective::oracle::v1beta1::QueryCoinbasePriceStatesResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PythPriceStates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PythPriceStates() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::injective::oracle::v1beta1::QueryPythPriceStatesRequest, ::injective::oracle::v1beta1::QueryPythPriceStatesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::injective::oracle::v1beta1::QueryPythPriceStatesRequest* request, ::injective::oracle::v1beta1::QueryPythPriceStatesResponse* response) { return this->PythPriceStates(context, request, response); }));}
    void SetMessageAllocatorFor_PythPriceStates(
        ::grpc::MessageAllocator< ::injective::oracle::v1beta1::QueryPythPriceStatesRequest, ::injective::oracle::v1beta1::QueryPythPriceStatesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::injective::oracle::v1beta1::QueryPythPriceStatesRequest, ::injective::oracle::v1beta1::QueryPythPriceStatesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PythPriceStates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PythPriceStates(::grpc::ServerContext* /*context*/, const ::injective::oracle::v1beta1::QueryPythPriceStatesRequest* /*request*/, ::injective::oracle::v1beta1::QueryPythPriceStatesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PythPriceStates(
      ::grpc::CallbackServerContext* /*context*/, const ::injective::oracle::v1beta1::QueryPythPriceStatesRequest* /*request*/, ::injective::oracle::v1beta1::QueryPythPriceStatesResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ProviderPriceState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ProviderPriceState() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::injective::oracle::v1beta1::QueryProviderPriceStateRequest, ::injective::oracle::v1beta1::QueryProviderPriceStateResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::injective::oracle::v1beta1::QueryProviderPriceStateRequest* request, ::injective::oracle::v1beta1::QueryProviderPriceStateResponse* response) { return this->ProviderPriceState(context, request, response); }));}
    void SetMessageAllocatorFor_ProviderPriceState(
        ::grpc::MessageAllocator< ::injective::oracle::v1beta1::QueryProviderPriceStateRequest, ::injective::oracle::v1beta1::QueryProviderPriceStateResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::injective::oracle::v1beta1::QueryProviderPriceStateRequest, ::injective::oracle::v1beta1::QueryProviderPriceStateResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ProviderPriceState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ProviderPriceState(::grpc::ServerContext* /*context*/, const ::injective::oracle::v1beta1::QueryProviderPriceStateRequest* /*request*/, ::injective::oracle::v1beta1::QueryProviderPriceStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ProviderPriceState(
      ::grpc::CallbackServerContext* /*context*/, const ::injective::oracle::v1beta1::QueryProviderPriceStateRequest* /*request*/, ::injective::oracle::v1beta1::QueryProviderPriceStateResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_OracleModuleState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_OracleModuleState() {
      ::grpc::Service::MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::injective::oracle::v1beta1::QueryModuleStateRequest, ::injective::oracle::v1beta1::QueryModuleStateResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::injective::oracle::v1beta1::QueryModuleStateRequest* request, ::injective::oracle::v1beta1::QueryModuleStateResponse* response) { return this->OracleModuleState(context, request, response); }));}
    void SetMessageAllocatorFor_OracleModuleState(
        ::grpc::MessageAllocator< ::injective::oracle::v1beta1::QueryModuleStateRequest, ::injective::oracle::v1beta1::QueryModuleStateResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::injective::oracle::v1beta1::QueryModuleStateRequest, ::injective::oracle::v1beta1::QueryModuleStateResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_OracleModuleState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OracleModuleState(::grpc::ServerContext* /*context*/, const ::injective::oracle::v1beta1::QueryModuleStateRequest* /*request*/, ::injective::oracle::v1beta1::QueryModuleStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* OracleModuleState(
      ::grpc::CallbackServerContext* /*context*/, const ::injective::oracle::v1beta1::QueryModuleStateRequest* /*request*/, ::injective::oracle::v1beta1::QueryModuleStateResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_HistoricalPriceRecords : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_HistoricalPriceRecords() {
      ::grpc::Service::MarkMethodCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::injective::oracle::v1beta1::QueryHistoricalPriceRecordsRequest, ::injective::oracle::v1beta1::QueryHistoricalPriceRecordsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::injective::oracle::v1beta1::QueryHistoricalPriceRecordsRequest* request, ::injective::oracle::v1beta1::QueryHistoricalPriceRecordsResponse* response) { return this->HistoricalPriceRecords(context, request, response); }));}
    void SetMessageAllocatorFor_HistoricalPriceRecords(
        ::grpc::MessageAllocator< ::injective::oracle::v1beta1::QueryHistoricalPriceRecordsRequest, ::injective::oracle::v1beta1::QueryHistoricalPriceRecordsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(9);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::injective::oracle::v1beta1::QueryHistoricalPriceRecordsRequest, ::injective::oracle::v1beta1::QueryHistoricalPriceRecordsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_HistoricalPriceRecords() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HistoricalPriceRecords(::grpc::ServerContext* /*context*/, const ::injective::oracle::v1beta1::QueryHistoricalPriceRecordsRequest* /*request*/, ::injective::oracle::v1beta1::QueryHistoricalPriceRecordsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* HistoricalPriceRecords(
      ::grpc::CallbackServerContext* /*context*/, const ::injective::oracle::v1beta1::QueryHistoricalPriceRecordsRequest* /*request*/, ::injective::oracle::v1beta1::QueryHistoricalPriceRecordsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_OracleVolatility : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_OracleVolatility() {
      ::grpc::Service::MarkMethodCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::injective::oracle::v1beta1::QueryOracleVolatilityRequest, ::injective::oracle::v1beta1::QueryOracleVolatilityResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::injective::oracle::v1beta1::QueryOracleVolatilityRequest* request, ::injective::oracle::v1beta1::QueryOracleVolatilityResponse* response) { return this->OracleVolatility(context, request, response); }));}
    void SetMessageAllocatorFor_OracleVolatility(
        ::grpc::MessageAllocator< ::injective::oracle::v1beta1::QueryOracleVolatilityRequest, ::injective::oracle::v1beta1::QueryOracleVolatilityResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(10);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::injective::oracle::v1beta1::QueryOracleVolatilityRequest, ::injective::oracle::v1beta1::QueryOracleVolatilityResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_OracleVolatility() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OracleVolatility(::grpc::ServerContext* /*context*/, const ::injective::oracle::v1beta1::QueryOracleVolatilityRequest* /*request*/, ::injective::oracle::v1beta1::QueryOracleVolatilityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* OracleVolatility(
      ::grpc::CallbackServerContext* /*context*/, const ::injective::oracle::v1beta1::QueryOracleVolatilityRequest* /*request*/, ::injective::oracle::v1beta1::QueryOracleVolatilityResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_OracleProvidersInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_OracleProvidersInfo() {
      ::grpc::Service::MarkMethodCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::injective::oracle::v1beta1::QueryOracleProvidersInfoRequest, ::injective::oracle::v1beta1::QueryOracleProvidersInfoResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::injective::oracle::v1beta1::QueryOracleProvidersInfoRequest* request, ::injective::oracle::v1beta1::QueryOracleProvidersInfoResponse* response) { return this->OracleProvidersInfo(context, request, response); }));}
    void SetMessageAllocatorFor_OracleProvidersInfo(
        ::grpc::MessageAllocator< ::injective::oracle::v1beta1::QueryOracleProvidersInfoRequest, ::injective::oracle::v1beta1::QueryOracleProvidersInfoResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(11);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::injective::oracle::v1beta1::QueryOracleProvidersInfoRequest, ::injective::oracle::v1beta1::QueryOracleProvidersInfoResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_OracleProvidersInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OracleProvidersInfo(::grpc::ServerContext* /*context*/, const ::injective::oracle::v1beta1::QueryOracleProvidersInfoRequest* /*request*/, ::injective::oracle::v1beta1::QueryOracleProvidersInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* OracleProvidersInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::injective::oracle::v1beta1::QueryOracleProvidersInfoRequest* /*request*/, ::injective::oracle::v1beta1::QueryOracleProvidersInfoResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_OracleProviderPrices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_OracleProviderPrices() {
      ::grpc::Service::MarkMethodCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::injective::oracle::v1beta1::QueryOracleProviderPricesRequest, ::injective::oracle::v1beta1::QueryOracleProviderPricesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::injective::oracle::v1beta1::QueryOracleProviderPricesRequest* request, ::injective::oracle::v1beta1::QueryOracleProviderPricesResponse* response) { return this->OracleProviderPrices(context, request, response); }));}
    void SetMessageAllocatorFor_OracleProviderPrices(
        ::grpc::MessageAllocator< ::injective::oracle::v1beta1::QueryOracleProviderPricesRequest, ::injective::oracle::v1beta1::QueryOracleProviderPricesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(12);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::injective::oracle::v1beta1::QueryOracleProviderPricesRequest, ::injective::oracle::v1beta1::QueryOracleProviderPricesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_OracleProviderPrices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OracleProviderPrices(::grpc::ServerContext* /*context*/, const ::injective::oracle::v1beta1::QueryOracleProviderPricesRequest* /*request*/, ::injective::oracle::v1beta1::QueryOracleProviderPricesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* OracleProviderPrices(
      ::grpc::CallbackServerContext* /*context*/, const ::injective::oracle::v1beta1::QueryOracleProviderPricesRequest* /*request*/, ::injective::oracle::v1beta1::QueryOracleProviderPricesResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_OraclePrice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_OraclePrice() {
      ::grpc::Service::MarkMethodCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::injective::oracle::v1beta1::QueryOraclePriceRequest, ::injective::oracle::v1beta1::QueryOraclePriceResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::injective::oracle::v1beta1::QueryOraclePriceRequest* request, ::injective::oracle::v1beta1::QueryOraclePriceResponse* response) { return this->OraclePrice(context, request, response); }));}
    void SetMessageAllocatorFor_OraclePrice(
        ::grpc::MessageAllocator< ::injective::oracle::v1beta1::QueryOraclePriceRequest, ::injective::oracle::v1beta1::QueryOraclePriceResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(13);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::injective::oracle::v1beta1::QueryOraclePriceRequest, ::injective::oracle::v1beta1::QueryOraclePriceResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_OraclePrice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OraclePrice(::grpc::ServerContext* /*context*/, const ::injective::oracle::v1beta1::QueryOraclePriceRequest* /*request*/, ::injective::oracle::v1beta1::QueryOraclePriceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* OraclePrice(
      ::grpc::CallbackServerContext* /*context*/, const ::injective::oracle::v1beta1::QueryOraclePriceRequest* /*request*/, ::injective::oracle::v1beta1::QueryOraclePriceResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PythPrice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PythPrice() {
      ::grpc::Service::MarkMethodCallback(14,
          new ::grpc::internal::CallbackUnaryHandler< ::injective::oracle::v1beta1::QueryPythPriceRequest, ::injective::oracle::v1beta1::QueryPythPriceResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::injective::oracle::v1beta1::QueryPythPriceRequest* request, ::injective::oracle::v1beta1::QueryPythPriceResponse* response) { return this->PythPrice(context, request, response); }));}
    void SetMessageAllocatorFor_PythPrice(
        ::grpc::MessageAllocator< ::injective::oracle::v1beta1::QueryPythPriceRequest, ::injective::oracle::v1beta1::QueryPythPriceResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(14);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::injective::oracle::v1beta1::QueryPythPriceRequest, ::injective::oracle::v1beta1::QueryPythPriceResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PythPrice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PythPrice(::grpc::ServerContext* /*context*/, const ::injective::oracle::v1beta1::QueryPythPriceRequest* /*request*/, ::injective::oracle::v1beta1::QueryPythPriceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PythPrice(
      ::grpc::CallbackServerContext* /*context*/, const ::injective::oracle::v1beta1::QueryPythPriceRequest* /*request*/, ::injective::oracle::v1beta1::QueryPythPriceResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Params<WithCallbackMethod_BandRelayers<WithCallbackMethod_BandPriceStates<WithCallbackMethod_BandIBCPriceStates<WithCallbackMethod_PriceFeedPriceStates<WithCallbackMethod_CoinbasePriceStates<WithCallbackMethod_PythPriceStates<WithCallbackMethod_ProviderPriceState<WithCallbackMethod_OracleModuleState<WithCallbackMethod_HistoricalPriceRecords<WithCallbackMethod_OracleVolatility<WithCallbackMethod_OracleProvidersInfo<WithCallbackMethod_OracleProviderPrices<WithCallbackMethod_OraclePrice<WithCallbackMethod_PythPrice<Service > > > > > > > > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Params : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Params() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Params() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Params(::grpc::ServerContext* /*context*/, const ::injective::oracle::v1beta1::QueryParamsRequest* /*request*/, ::injective::oracle::v1beta1::QueryParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_BandRelayers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_BandRelayers() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_BandRelayers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BandRelayers(::grpc::ServerContext* /*context*/, const ::injective::oracle::v1beta1::QueryBandRelayersRequest* /*request*/, ::injective::oracle::v1beta1::QueryBandRelayersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_BandPriceStates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_BandPriceStates() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_BandPriceStates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BandPriceStates(::grpc::ServerContext* /*context*/, const ::injective::oracle::v1beta1::QueryBandPriceStatesRequest* /*request*/, ::injective::oracle::v1beta1::QueryBandPriceStatesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_BandIBCPriceStates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_BandIBCPriceStates() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_BandIBCPriceStates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BandIBCPriceStates(::grpc::ServerContext* /*context*/, const ::injective::oracle::v1beta1::QueryBandIBCPriceStatesRequest* /*request*/, ::injective::oracle::v1beta1::QueryBandIBCPriceStatesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PriceFeedPriceStates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PriceFeedPriceStates() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_PriceFeedPriceStates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PriceFeedPriceStates(::grpc::ServerContext* /*context*/, const ::injective::oracle::v1beta1::QueryPriceFeedPriceStatesRequest* /*request*/, ::injective::oracle::v1beta1::QueryPriceFeedPriceStatesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CoinbasePriceStates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CoinbasePriceStates() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_CoinbasePriceStates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CoinbasePriceStates(::grpc::ServerContext* /*context*/, const ::injective::oracle::v1beta1::QueryCoinbasePriceStatesRequest* /*request*/, ::injective::oracle::v1beta1::QueryCoinbasePriceStatesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PythPriceStates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PythPriceStates() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_PythPriceStates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PythPriceStates(::grpc::ServerContext* /*context*/, const ::injective::oracle::v1beta1::QueryPythPriceStatesRequest* /*request*/, ::injective::oracle::v1beta1::QueryPythPriceStatesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ProviderPriceState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ProviderPriceState() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_ProviderPriceState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ProviderPriceState(::grpc::ServerContext* /*context*/, const ::injective::oracle::v1beta1::QueryProviderPriceStateRequest* /*request*/, ::injective::oracle::v1beta1::QueryProviderPriceStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_OracleModuleState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_OracleModuleState() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_OracleModuleState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OracleModuleState(::grpc::ServerContext* /*context*/, const ::injective::oracle::v1beta1::QueryModuleStateRequest* /*request*/, ::injective::oracle::v1beta1::QueryModuleStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_HistoricalPriceRecords : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_HistoricalPriceRecords() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_HistoricalPriceRecords() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HistoricalPriceRecords(::grpc::ServerContext* /*context*/, const ::injective::oracle::v1beta1::QueryHistoricalPriceRecordsRequest* /*request*/, ::injective::oracle::v1beta1::QueryHistoricalPriceRecordsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_OracleVolatility : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_OracleVolatility() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_OracleVolatility() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OracleVolatility(::grpc::ServerContext* /*context*/, const ::injective::oracle::v1beta1::QueryOracleVolatilityRequest* /*request*/, ::injective::oracle::v1beta1::QueryOracleVolatilityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_OracleProvidersInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_OracleProvidersInfo() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_OracleProvidersInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OracleProvidersInfo(::grpc::ServerContext* /*context*/, const ::injective::oracle::v1beta1::QueryOracleProvidersInfoRequest* /*request*/, ::injective::oracle::v1beta1::QueryOracleProvidersInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_OracleProviderPrices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_OracleProviderPrices() {
      ::grpc::Service::MarkMethodGeneric(12);
    }
    ~WithGenericMethod_OracleProviderPrices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OracleProviderPrices(::grpc::ServerContext* /*context*/, const ::injective::oracle::v1beta1::QueryOracleProviderPricesRequest* /*request*/, ::injective::oracle::v1beta1::QueryOracleProviderPricesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_OraclePrice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_OraclePrice() {
      ::grpc::Service::MarkMethodGeneric(13);
    }
    ~WithGenericMethod_OraclePrice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OraclePrice(::grpc::ServerContext* /*context*/, const ::injective::oracle::v1beta1::QueryOraclePriceRequest* /*request*/, ::injective::oracle::v1beta1::QueryOraclePriceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PythPrice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PythPrice() {
      ::grpc::Service::MarkMethodGeneric(14);
    }
    ~WithGenericMethod_PythPrice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PythPrice(::grpc::ServerContext* /*context*/, const ::injective::oracle::v1beta1::QueryPythPriceRequest* /*request*/, ::injective::oracle::v1beta1::QueryPythPriceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Params : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Params() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Params() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Params(::grpc::ServerContext* /*context*/, const ::injective::oracle::v1beta1::QueryParamsRequest* /*request*/, ::injective::oracle::v1beta1::QueryParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestParams(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_BandRelayers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_BandRelayers() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_BandRelayers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BandRelayers(::grpc::ServerContext* /*context*/, const ::injective::oracle::v1beta1::QueryBandRelayersRequest* /*request*/, ::injective::oracle::v1beta1::QueryBandRelayersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBandRelayers(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_BandPriceStates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_BandPriceStates() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_BandPriceStates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BandPriceStates(::grpc::ServerContext* /*context*/, const ::injective::oracle::v1beta1::QueryBandPriceStatesRequest* /*request*/, ::injective::oracle::v1beta1::QueryBandPriceStatesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBandPriceStates(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_BandIBCPriceStates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_BandIBCPriceStates() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_BandIBCPriceStates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BandIBCPriceStates(::grpc::ServerContext* /*context*/, const ::injective::oracle::v1beta1::QueryBandIBCPriceStatesRequest* /*request*/, ::injective::oracle::v1beta1::QueryBandIBCPriceStatesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBandIBCPriceStates(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PriceFeedPriceStates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PriceFeedPriceStates() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_PriceFeedPriceStates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PriceFeedPriceStates(::grpc::ServerContext* /*context*/, const ::injective::oracle::v1beta1::QueryPriceFeedPriceStatesRequest* /*request*/, ::injective::oracle::v1beta1::QueryPriceFeedPriceStatesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPriceFeedPriceStates(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CoinbasePriceStates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CoinbasePriceStates() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_CoinbasePriceStates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CoinbasePriceStates(::grpc::ServerContext* /*context*/, const ::injective::oracle::v1beta1::QueryCoinbasePriceStatesRequest* /*request*/, ::injective::oracle::v1beta1::QueryCoinbasePriceStatesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCoinbasePriceStates(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PythPriceStates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PythPriceStates() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_PythPriceStates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PythPriceStates(::grpc::ServerContext* /*context*/, const ::injective::oracle::v1beta1::QueryPythPriceStatesRequest* /*request*/, ::injective::oracle::v1beta1::QueryPythPriceStatesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPythPriceStates(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ProviderPriceState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ProviderPriceState() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_ProviderPriceState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ProviderPriceState(::grpc::ServerContext* /*context*/, const ::injective::oracle::v1beta1::QueryProviderPriceStateRequest* /*request*/, ::injective::oracle::v1beta1::QueryProviderPriceStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestProviderPriceState(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_OracleModuleState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_OracleModuleState() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_OracleModuleState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OracleModuleState(::grpc::ServerContext* /*context*/, const ::injective::oracle::v1beta1::QueryModuleStateRequest* /*request*/, ::injective::oracle::v1beta1::QueryModuleStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOracleModuleState(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_HistoricalPriceRecords : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_HistoricalPriceRecords() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_HistoricalPriceRecords() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HistoricalPriceRecords(::grpc::ServerContext* /*context*/, const ::injective::oracle::v1beta1::QueryHistoricalPriceRecordsRequest* /*request*/, ::injective::oracle::v1beta1::QueryHistoricalPriceRecordsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHistoricalPriceRecords(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_OracleVolatility : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_OracleVolatility() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_OracleVolatility() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OracleVolatility(::grpc::ServerContext* /*context*/, const ::injective::oracle::v1beta1::QueryOracleVolatilityRequest* /*request*/, ::injective::oracle::v1beta1::QueryOracleVolatilityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOracleVolatility(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_OracleProvidersInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_OracleProvidersInfo() {
      ::grpc::Service::MarkMethodRaw(11);
    }
    ~WithRawMethod_OracleProvidersInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OracleProvidersInfo(::grpc::ServerContext* /*context*/, const ::injective::oracle::v1beta1::QueryOracleProvidersInfoRequest* /*request*/, ::injective::oracle::v1beta1::QueryOracleProvidersInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOracleProvidersInfo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_OracleProviderPrices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_OracleProviderPrices() {
      ::grpc::Service::MarkMethodRaw(12);
    }
    ~WithRawMethod_OracleProviderPrices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OracleProviderPrices(::grpc::ServerContext* /*context*/, const ::injective::oracle::v1beta1::QueryOracleProviderPricesRequest* /*request*/, ::injective::oracle::v1beta1::QueryOracleProviderPricesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOracleProviderPrices(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_OraclePrice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_OraclePrice() {
      ::grpc::Service::MarkMethodRaw(13);
    }
    ~WithRawMethod_OraclePrice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OraclePrice(::grpc::ServerContext* /*context*/, const ::injective::oracle::v1beta1::QueryOraclePriceRequest* /*request*/, ::injective::oracle::v1beta1::QueryOraclePriceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOraclePrice(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PythPrice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PythPrice() {
      ::grpc::Service::MarkMethodRaw(14);
    }
    ~WithRawMethod_PythPrice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PythPrice(::grpc::ServerContext* /*context*/, const ::injective::oracle::v1beta1::QueryPythPriceRequest* /*request*/, ::injective::oracle::v1beta1::QueryPythPriceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPythPrice(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Params : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Params() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Params(context, request, response); }));
    }
    ~WithRawCallbackMethod_Params() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Params(::grpc::ServerContext* /*context*/, const ::injective::oracle::v1beta1::QueryParamsRequest* /*request*/, ::injective::oracle::v1beta1::QueryParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Params(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_BandRelayers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_BandRelayers() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->BandRelayers(context, request, response); }));
    }
    ~WithRawCallbackMethod_BandRelayers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BandRelayers(::grpc::ServerContext* /*context*/, const ::injective::oracle::v1beta1::QueryBandRelayersRequest* /*request*/, ::injective::oracle::v1beta1::QueryBandRelayersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* BandRelayers(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_BandPriceStates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_BandPriceStates() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->BandPriceStates(context, request, response); }));
    }
    ~WithRawCallbackMethod_BandPriceStates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BandPriceStates(::grpc::ServerContext* /*context*/, const ::injective::oracle::v1beta1::QueryBandPriceStatesRequest* /*request*/, ::injective::oracle::v1beta1::QueryBandPriceStatesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* BandPriceStates(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_BandIBCPriceStates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_BandIBCPriceStates() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->BandIBCPriceStates(context, request, response); }));
    }
    ~WithRawCallbackMethod_BandIBCPriceStates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BandIBCPriceStates(::grpc::ServerContext* /*context*/, const ::injective::oracle::v1beta1::QueryBandIBCPriceStatesRequest* /*request*/, ::injective::oracle::v1beta1::QueryBandIBCPriceStatesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* BandIBCPriceStates(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PriceFeedPriceStates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PriceFeedPriceStates() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PriceFeedPriceStates(context, request, response); }));
    }
    ~WithRawCallbackMethod_PriceFeedPriceStates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PriceFeedPriceStates(::grpc::ServerContext* /*context*/, const ::injective::oracle::v1beta1::QueryPriceFeedPriceStatesRequest* /*request*/, ::injective::oracle::v1beta1::QueryPriceFeedPriceStatesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PriceFeedPriceStates(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CoinbasePriceStates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CoinbasePriceStates() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CoinbasePriceStates(context, request, response); }));
    }
    ~WithRawCallbackMethod_CoinbasePriceStates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CoinbasePriceStates(::grpc::ServerContext* /*context*/, const ::injective::oracle::v1beta1::QueryCoinbasePriceStatesRequest* /*request*/, ::injective::oracle::v1beta1::QueryCoinbasePriceStatesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CoinbasePriceStates(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PythPriceStates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PythPriceStates() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PythPriceStates(context, request, response); }));
    }
    ~WithRawCallbackMethod_PythPriceStates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PythPriceStates(::grpc::ServerContext* /*context*/, const ::injective::oracle::v1beta1::QueryPythPriceStatesRequest* /*request*/, ::injective::oracle::v1beta1::QueryPythPriceStatesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PythPriceStates(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ProviderPriceState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ProviderPriceState() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ProviderPriceState(context, request, response); }));
    }
    ~WithRawCallbackMethod_ProviderPriceState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ProviderPriceState(::grpc::ServerContext* /*context*/, const ::injective::oracle::v1beta1::QueryProviderPriceStateRequest* /*request*/, ::injective::oracle::v1beta1::QueryProviderPriceStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ProviderPriceState(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_OracleModuleState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_OracleModuleState() {
      ::grpc::Service::MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->OracleModuleState(context, request, response); }));
    }
    ~WithRawCallbackMethod_OracleModuleState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OracleModuleState(::grpc::ServerContext* /*context*/, const ::injective::oracle::v1beta1::QueryModuleStateRequest* /*request*/, ::injective::oracle::v1beta1::QueryModuleStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* OracleModuleState(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_HistoricalPriceRecords : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_HistoricalPriceRecords() {
      ::grpc::Service::MarkMethodRawCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->HistoricalPriceRecords(context, request, response); }));
    }
    ~WithRawCallbackMethod_HistoricalPriceRecords() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HistoricalPriceRecords(::grpc::ServerContext* /*context*/, const ::injective::oracle::v1beta1::QueryHistoricalPriceRecordsRequest* /*request*/, ::injective::oracle::v1beta1::QueryHistoricalPriceRecordsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* HistoricalPriceRecords(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_OracleVolatility : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_OracleVolatility() {
      ::grpc::Service::MarkMethodRawCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->OracleVolatility(context, request, response); }));
    }
    ~WithRawCallbackMethod_OracleVolatility() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OracleVolatility(::grpc::ServerContext* /*context*/, const ::injective::oracle::v1beta1::QueryOracleVolatilityRequest* /*request*/, ::injective::oracle::v1beta1::QueryOracleVolatilityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* OracleVolatility(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_OracleProvidersInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_OracleProvidersInfo() {
      ::grpc::Service::MarkMethodRawCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->OracleProvidersInfo(context, request, response); }));
    }
    ~WithRawCallbackMethod_OracleProvidersInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OracleProvidersInfo(::grpc::ServerContext* /*context*/, const ::injective::oracle::v1beta1::QueryOracleProvidersInfoRequest* /*request*/, ::injective::oracle::v1beta1::QueryOracleProvidersInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* OracleProvidersInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_OracleProviderPrices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_OracleProviderPrices() {
      ::grpc::Service::MarkMethodRawCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->OracleProviderPrices(context, request, response); }));
    }
    ~WithRawCallbackMethod_OracleProviderPrices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OracleProviderPrices(::grpc::ServerContext* /*context*/, const ::injective::oracle::v1beta1::QueryOracleProviderPricesRequest* /*request*/, ::injective::oracle::v1beta1::QueryOracleProviderPricesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* OracleProviderPrices(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_OraclePrice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_OraclePrice() {
      ::grpc::Service::MarkMethodRawCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->OraclePrice(context, request, response); }));
    }
    ~WithRawCallbackMethod_OraclePrice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OraclePrice(::grpc::ServerContext* /*context*/, const ::injective::oracle::v1beta1::QueryOraclePriceRequest* /*request*/, ::injective::oracle::v1beta1::QueryOraclePriceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* OraclePrice(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PythPrice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PythPrice() {
      ::grpc::Service::MarkMethodRawCallback(14,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PythPrice(context, request, response); }));
    }
    ~WithRawCallbackMethod_PythPrice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PythPrice(::grpc::ServerContext* /*context*/, const ::injective::oracle::v1beta1::QueryPythPriceRequest* /*request*/, ::injective::oracle::v1beta1::QueryPythPriceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PythPrice(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Params : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Params() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::injective::oracle::v1beta1::QueryParamsRequest, ::injective::oracle::v1beta1::QueryParamsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::injective::oracle::v1beta1::QueryParamsRequest, ::injective::oracle::v1beta1::QueryParamsResponse>* streamer) {
                       return this->StreamedParams(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Params() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Params(::grpc::ServerContext* /*context*/, const ::injective::oracle::v1beta1::QueryParamsRequest* /*request*/, ::injective::oracle::v1beta1::QueryParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedParams(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::injective::oracle::v1beta1::QueryParamsRequest,::injective::oracle::v1beta1::QueryParamsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_BandRelayers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_BandRelayers() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::injective::oracle::v1beta1::QueryBandRelayersRequest, ::injective::oracle::v1beta1::QueryBandRelayersResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::injective::oracle::v1beta1::QueryBandRelayersRequest, ::injective::oracle::v1beta1::QueryBandRelayersResponse>* streamer) {
                       return this->StreamedBandRelayers(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_BandRelayers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status BandRelayers(::grpc::ServerContext* /*context*/, const ::injective::oracle::v1beta1::QueryBandRelayersRequest* /*request*/, ::injective::oracle::v1beta1::QueryBandRelayersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedBandRelayers(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::injective::oracle::v1beta1::QueryBandRelayersRequest,::injective::oracle::v1beta1::QueryBandRelayersResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_BandPriceStates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_BandPriceStates() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::injective::oracle::v1beta1::QueryBandPriceStatesRequest, ::injective::oracle::v1beta1::QueryBandPriceStatesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::injective::oracle::v1beta1::QueryBandPriceStatesRequest, ::injective::oracle::v1beta1::QueryBandPriceStatesResponse>* streamer) {
                       return this->StreamedBandPriceStates(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_BandPriceStates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status BandPriceStates(::grpc::ServerContext* /*context*/, const ::injective::oracle::v1beta1::QueryBandPriceStatesRequest* /*request*/, ::injective::oracle::v1beta1::QueryBandPriceStatesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedBandPriceStates(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::injective::oracle::v1beta1::QueryBandPriceStatesRequest,::injective::oracle::v1beta1::QueryBandPriceStatesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_BandIBCPriceStates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_BandIBCPriceStates() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::injective::oracle::v1beta1::QueryBandIBCPriceStatesRequest, ::injective::oracle::v1beta1::QueryBandIBCPriceStatesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::injective::oracle::v1beta1::QueryBandIBCPriceStatesRequest, ::injective::oracle::v1beta1::QueryBandIBCPriceStatesResponse>* streamer) {
                       return this->StreamedBandIBCPriceStates(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_BandIBCPriceStates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status BandIBCPriceStates(::grpc::ServerContext* /*context*/, const ::injective::oracle::v1beta1::QueryBandIBCPriceStatesRequest* /*request*/, ::injective::oracle::v1beta1::QueryBandIBCPriceStatesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedBandIBCPriceStates(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::injective::oracle::v1beta1::QueryBandIBCPriceStatesRequest,::injective::oracle::v1beta1::QueryBandIBCPriceStatesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PriceFeedPriceStates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PriceFeedPriceStates() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::injective::oracle::v1beta1::QueryPriceFeedPriceStatesRequest, ::injective::oracle::v1beta1::QueryPriceFeedPriceStatesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::injective::oracle::v1beta1::QueryPriceFeedPriceStatesRequest, ::injective::oracle::v1beta1::QueryPriceFeedPriceStatesResponse>* streamer) {
                       return this->StreamedPriceFeedPriceStates(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PriceFeedPriceStates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PriceFeedPriceStates(::grpc::ServerContext* /*context*/, const ::injective::oracle::v1beta1::QueryPriceFeedPriceStatesRequest* /*request*/, ::injective::oracle::v1beta1::QueryPriceFeedPriceStatesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPriceFeedPriceStates(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::injective::oracle::v1beta1::QueryPriceFeedPriceStatesRequest,::injective::oracle::v1beta1::QueryPriceFeedPriceStatesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CoinbasePriceStates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CoinbasePriceStates() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::injective::oracle::v1beta1::QueryCoinbasePriceStatesRequest, ::injective::oracle::v1beta1::QueryCoinbasePriceStatesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::injective::oracle::v1beta1::QueryCoinbasePriceStatesRequest, ::injective::oracle::v1beta1::QueryCoinbasePriceStatesResponse>* streamer) {
                       return this->StreamedCoinbasePriceStates(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CoinbasePriceStates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CoinbasePriceStates(::grpc::ServerContext* /*context*/, const ::injective::oracle::v1beta1::QueryCoinbasePriceStatesRequest* /*request*/, ::injective::oracle::v1beta1::QueryCoinbasePriceStatesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCoinbasePriceStates(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::injective::oracle::v1beta1::QueryCoinbasePriceStatesRequest,::injective::oracle::v1beta1::QueryCoinbasePriceStatesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PythPriceStates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PythPriceStates() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::injective::oracle::v1beta1::QueryPythPriceStatesRequest, ::injective::oracle::v1beta1::QueryPythPriceStatesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::injective::oracle::v1beta1::QueryPythPriceStatesRequest, ::injective::oracle::v1beta1::QueryPythPriceStatesResponse>* streamer) {
                       return this->StreamedPythPriceStates(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PythPriceStates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PythPriceStates(::grpc::ServerContext* /*context*/, const ::injective::oracle::v1beta1::QueryPythPriceStatesRequest* /*request*/, ::injective::oracle::v1beta1::QueryPythPriceStatesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPythPriceStates(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::injective::oracle::v1beta1::QueryPythPriceStatesRequest,::injective::oracle::v1beta1::QueryPythPriceStatesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ProviderPriceState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ProviderPriceState() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::injective::oracle::v1beta1::QueryProviderPriceStateRequest, ::injective::oracle::v1beta1::QueryProviderPriceStateResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::injective::oracle::v1beta1::QueryProviderPriceStateRequest, ::injective::oracle::v1beta1::QueryProviderPriceStateResponse>* streamer) {
                       return this->StreamedProviderPriceState(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ProviderPriceState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ProviderPriceState(::grpc::ServerContext* /*context*/, const ::injective::oracle::v1beta1::QueryProviderPriceStateRequest* /*request*/, ::injective::oracle::v1beta1::QueryProviderPriceStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedProviderPriceState(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::injective::oracle::v1beta1::QueryProviderPriceStateRequest,::injective::oracle::v1beta1::QueryProviderPriceStateResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_OracleModuleState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_OracleModuleState() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::injective::oracle::v1beta1::QueryModuleStateRequest, ::injective::oracle::v1beta1::QueryModuleStateResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::injective::oracle::v1beta1::QueryModuleStateRequest, ::injective::oracle::v1beta1::QueryModuleStateResponse>* streamer) {
                       return this->StreamedOracleModuleState(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_OracleModuleState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status OracleModuleState(::grpc::ServerContext* /*context*/, const ::injective::oracle::v1beta1::QueryModuleStateRequest* /*request*/, ::injective::oracle::v1beta1::QueryModuleStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedOracleModuleState(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::injective::oracle::v1beta1::QueryModuleStateRequest,::injective::oracle::v1beta1::QueryModuleStateResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_HistoricalPriceRecords : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_HistoricalPriceRecords() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler<
          ::injective::oracle::v1beta1::QueryHistoricalPriceRecordsRequest, ::injective::oracle::v1beta1::QueryHistoricalPriceRecordsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::injective::oracle::v1beta1::QueryHistoricalPriceRecordsRequest, ::injective::oracle::v1beta1::QueryHistoricalPriceRecordsResponse>* streamer) {
                       return this->StreamedHistoricalPriceRecords(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_HistoricalPriceRecords() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status HistoricalPriceRecords(::grpc::ServerContext* /*context*/, const ::injective::oracle::v1beta1::QueryHistoricalPriceRecordsRequest* /*request*/, ::injective::oracle::v1beta1::QueryHistoricalPriceRecordsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedHistoricalPriceRecords(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::injective::oracle::v1beta1::QueryHistoricalPriceRecordsRequest,::injective::oracle::v1beta1::QueryHistoricalPriceRecordsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_OracleVolatility : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_OracleVolatility() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler<
          ::injective::oracle::v1beta1::QueryOracleVolatilityRequest, ::injective::oracle::v1beta1::QueryOracleVolatilityResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::injective::oracle::v1beta1::QueryOracleVolatilityRequest, ::injective::oracle::v1beta1::QueryOracleVolatilityResponse>* streamer) {
                       return this->StreamedOracleVolatility(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_OracleVolatility() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status OracleVolatility(::grpc::ServerContext* /*context*/, const ::injective::oracle::v1beta1::QueryOracleVolatilityRequest* /*request*/, ::injective::oracle::v1beta1::QueryOracleVolatilityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedOracleVolatility(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::injective::oracle::v1beta1::QueryOracleVolatilityRequest,::injective::oracle::v1beta1::QueryOracleVolatilityResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_OracleProvidersInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_OracleProvidersInfo() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::StreamedUnaryHandler<
          ::injective::oracle::v1beta1::QueryOracleProvidersInfoRequest, ::injective::oracle::v1beta1::QueryOracleProvidersInfoResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::injective::oracle::v1beta1::QueryOracleProvidersInfoRequest, ::injective::oracle::v1beta1::QueryOracleProvidersInfoResponse>* streamer) {
                       return this->StreamedOracleProvidersInfo(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_OracleProvidersInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status OracleProvidersInfo(::grpc::ServerContext* /*context*/, const ::injective::oracle::v1beta1::QueryOracleProvidersInfoRequest* /*request*/, ::injective::oracle::v1beta1::QueryOracleProvidersInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedOracleProvidersInfo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::injective::oracle::v1beta1::QueryOracleProvidersInfoRequest,::injective::oracle::v1beta1::QueryOracleProvidersInfoResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_OracleProviderPrices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_OracleProviderPrices() {
      ::grpc::Service::MarkMethodStreamed(12,
        new ::grpc::internal::StreamedUnaryHandler<
          ::injective::oracle::v1beta1::QueryOracleProviderPricesRequest, ::injective::oracle::v1beta1::QueryOracleProviderPricesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::injective::oracle::v1beta1::QueryOracleProviderPricesRequest, ::injective::oracle::v1beta1::QueryOracleProviderPricesResponse>* streamer) {
                       return this->StreamedOracleProviderPrices(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_OracleProviderPrices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status OracleProviderPrices(::grpc::ServerContext* /*context*/, const ::injective::oracle::v1beta1::QueryOracleProviderPricesRequest* /*request*/, ::injective::oracle::v1beta1::QueryOracleProviderPricesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedOracleProviderPrices(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::injective::oracle::v1beta1::QueryOracleProviderPricesRequest,::injective::oracle::v1beta1::QueryOracleProviderPricesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_OraclePrice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_OraclePrice() {
      ::grpc::Service::MarkMethodStreamed(13,
        new ::grpc::internal::StreamedUnaryHandler<
          ::injective::oracle::v1beta1::QueryOraclePriceRequest, ::injective::oracle::v1beta1::QueryOraclePriceResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::injective::oracle::v1beta1::QueryOraclePriceRequest, ::injective::oracle::v1beta1::QueryOraclePriceResponse>* streamer) {
                       return this->StreamedOraclePrice(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_OraclePrice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status OraclePrice(::grpc::ServerContext* /*context*/, const ::injective::oracle::v1beta1::QueryOraclePriceRequest* /*request*/, ::injective::oracle::v1beta1::QueryOraclePriceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedOraclePrice(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::injective::oracle::v1beta1::QueryOraclePriceRequest,::injective::oracle::v1beta1::QueryOraclePriceResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PythPrice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PythPrice() {
      ::grpc::Service::MarkMethodStreamed(14,
        new ::grpc::internal::StreamedUnaryHandler<
          ::injective::oracle::v1beta1::QueryPythPriceRequest, ::injective::oracle::v1beta1::QueryPythPriceResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::injective::oracle::v1beta1::QueryPythPriceRequest, ::injective::oracle::v1beta1::QueryPythPriceResponse>* streamer) {
                       return this->StreamedPythPrice(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PythPrice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PythPrice(::grpc::ServerContext* /*context*/, const ::injective::oracle::v1beta1::QueryPythPriceRequest* /*request*/, ::injective::oracle::v1beta1::QueryPythPriceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPythPrice(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::injective::oracle::v1beta1::QueryPythPriceRequest,::injective::oracle::v1beta1::QueryPythPriceResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Params<WithStreamedUnaryMethod_BandRelayers<WithStreamedUnaryMethod_BandPriceStates<WithStreamedUnaryMethod_BandIBCPriceStates<WithStreamedUnaryMethod_PriceFeedPriceStates<WithStreamedUnaryMethod_CoinbasePriceStates<WithStreamedUnaryMethod_PythPriceStates<WithStreamedUnaryMethod_ProviderPriceState<WithStreamedUnaryMethod_OracleModuleState<WithStreamedUnaryMethod_HistoricalPriceRecords<WithStreamedUnaryMethod_OracleVolatility<WithStreamedUnaryMethod_OracleProvidersInfo<WithStreamedUnaryMethod_OracleProviderPrices<WithStreamedUnaryMethod_OraclePrice<WithStreamedUnaryMethod_PythPrice<Service > > > > > > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Params<WithStreamedUnaryMethod_BandRelayers<WithStreamedUnaryMethod_BandPriceStates<WithStreamedUnaryMethod_BandIBCPriceStates<WithStreamedUnaryMethod_PriceFeedPriceStates<WithStreamedUnaryMethod_CoinbasePriceStates<WithStreamedUnaryMethod_PythPriceStates<WithStreamedUnaryMethod_ProviderPriceState<WithStreamedUnaryMethod_OracleModuleState<WithStreamedUnaryMethod_HistoricalPriceRecords<WithStreamedUnaryMethod_OracleVolatility<WithStreamedUnaryMethod_OracleProvidersInfo<WithStreamedUnaryMethod_OracleProviderPrices<WithStreamedUnaryMethod_OraclePrice<WithStreamedUnaryMethod_PythPrice<Service > > > > > > > > > > > > > > > StreamedService;
};

}  // namespace v1beta1
}  // namespace oracle
}  // namespace injective


#endif  // GRPC_injective_2foracle_2fv1beta1_2fquery_2eproto__INCLUDED
